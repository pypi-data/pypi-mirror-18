# coding: utf-8

"""
Copyright 2016 SmartBear Software

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

    Ref: https://github.com/swagger-api/swagger-codegen
"""

from pprint import pformat
from six import iteritems
import re


class ForecastCreation(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self):
        """
        ForecastCreation - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'number_of_periods': 'int',
            'period_frequency': 'str',
            'description': 'str',
            'metrics': 'list[str]',
            'management_unit_id': 'str'
        }

        self.attribute_map = {
            'number_of_periods': 'numberOfPeriods',
            'period_frequency': 'periodFrequency',
            'description': 'description',
            'metrics': 'metrics',
            'management_unit_id': 'managementUnitId'
        }

        self._number_of_periods = None
        self._period_frequency = None
        self._description = None
        self._metrics = None
        self._management_unit_id = None

    @property
    def number_of_periods(self):
        """
        Gets the number_of_periods of this ForecastCreation.
        The number of periods to be forecasted for

        :return: The number_of_periods of this ForecastCreation.
        :rtype: int
        """
        return self._number_of_periods

    @number_of_periods.setter
    def number_of_periods(self, number_of_periods):
        """
        Sets the number_of_periods of this ForecastCreation.
        The number of periods to be forecasted for

        :param number_of_periods: The number_of_periods of this ForecastCreation.
        :type: int
        """
        
        self._number_of_periods = number_of_periods

    @property
    def period_frequency(self):
        """
        Gets the period_frequency of this ForecastCreation.
        The frequency of the period

        :return: The period_frequency of this ForecastCreation.
        :rtype: str
        """
        return self._period_frequency

    @period_frequency.setter
    def period_frequency(self, period_frequency):
        """
        Sets the period_frequency of this ForecastCreation.
        The frequency of the period

        :param period_frequency: The period_frequency of this ForecastCreation.
        :type: str
        """
        allowed_values = ["WEEK"]
        if period_frequency not in allowed_values:
            raise ValueError(
                "Invalid value for `period_frequency`, must be one of {0}"
                .format(allowed_values)
            )

        self._period_frequency = period_frequency

    @property
    def description(self):
        """
        Gets the description of this ForecastCreation.
        The description of the forecast to be created

        :return: The description of this ForecastCreation.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """
        Sets the description of this ForecastCreation.
        The description of the forecast to be created

        :param description: The description of this ForecastCreation.
        :type: str
        """
        
        self._description = description

    @property
    def metrics(self):
        """
        Gets the metrics of this ForecastCreation.
        The metrics the forecast is for

        :return: The metrics of this ForecastCreation.
        :rtype: list[str]
        """
        return self._metrics

    @metrics.setter
    def metrics(self, metrics):
        """
        Sets the metrics of this ForecastCreation.
        The metrics the forecast is for

        :param metrics: The metrics of this ForecastCreation.
        :type: list[str]
        """
        
        self._metrics = metrics

    @property
    def management_unit_id(self):
        """
        Gets the management_unit_id of this ForecastCreation.
        The id of the management unit to which the new forecast belongs

        :return: The management_unit_id of this ForecastCreation.
        :rtype: str
        """
        return self._management_unit_id

    @management_unit_id.setter
    def management_unit_id(self, management_unit_id):
        """
        Sets the management_unit_id of this ForecastCreation.
        The id of the management unit to which the new forecast belongs

        :param management_unit_id: The management_unit_id of this ForecastCreation.
        :type: str
        """
        
        self._management_unit_id = management_unit_id

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other

