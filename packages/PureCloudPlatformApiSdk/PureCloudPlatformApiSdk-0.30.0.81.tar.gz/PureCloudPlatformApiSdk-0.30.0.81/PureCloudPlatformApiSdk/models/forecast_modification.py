# coding: utf-8

"""
Copyright 2016 SmartBear Software

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

    Ref: https://github.com/swagger-api/swagger-codegen
"""

from pprint import pformat
from six import iteritems
import re


class ForecastModification(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self):
        """
        ForecastModification - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'id': 'str',
            'name': 'str',
            'forecast_id': 'str',
            'priority': 'int',
            'metric': 'str',
            'modification_type': 'str',
            'modification_value': 'float',
            'start_date': 'datetime',
            'end_date': 'datetime',
            'attributes': 'ForecastFilterAttributes',
            'enabled': 'bool',
            'last_modified_date': 'datetime',
            'last_modified_by': 'User',
            'notes': 'str',
            'self_uri': 'str'
        }

        self.attribute_map = {
            'id': 'id',
            'name': 'name',
            'forecast_id': 'forecastId',
            'priority': 'priority',
            'metric': 'metric',
            'modification_type': 'modificationType',
            'modification_value': 'modificationValue',
            'start_date': 'startDate',
            'end_date': 'endDate',
            'attributes': 'attributes',
            'enabled': 'enabled',
            'last_modified_date': 'lastModifiedDate',
            'last_modified_by': 'lastModifiedBy',
            'notes': 'notes',
            'self_uri': 'selfUri'
        }

        self._id = None
        self._name = None
        self._forecast_id = None
        self._priority = None
        self._metric = None
        self._modification_type = None
        self._modification_value = None
        self._start_date = None
        self._end_date = None
        self._attributes = None
        self._enabled = False
        self._last_modified_date = None
        self._last_modified_by = None
        self._notes = None
        self._self_uri = None

    @property
    def id(self):
        """
        Gets the id of this ForecastModification.
        The globally unique identifier for the object.

        :return: The id of this ForecastModification.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this ForecastModification.
        The globally unique identifier for the object.

        :param id: The id of this ForecastModification.
        :type: str
        """
        
        self._id = id

    @property
    def name(self):
        """
        Gets the name of this ForecastModification.


        :return: The name of this ForecastModification.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this ForecastModification.


        :param name: The name of this ForecastModification.
        :type: str
        """
        
        self._name = name

    @property
    def forecast_id(self):
        """
        Gets the forecast_id of this ForecastModification.
        The id of the associated forecast

        :return: The forecast_id of this ForecastModification.
        :rtype: str
        """
        return self._forecast_id

    @forecast_id.setter
    def forecast_id(self, forecast_id):
        """
        Sets the forecast_id of this ForecastModification.
        The id of the associated forecast

        :param forecast_id: The forecast_id of this ForecastModification.
        :type: str
        """
        
        self._forecast_id = forecast_id

    @property
    def priority(self):
        """
        Gets the priority of this ForecastModification.
        The priority in which the modification is applied

        :return: The priority of this ForecastModification.
        :rtype: int
        """
        return self._priority

    @priority.setter
    def priority(self, priority):
        """
        Sets the priority of this ForecastModification.
        The priority in which the modification is applied

        :param priority: The priority of this ForecastModification.
        :type: int
        """
        
        self._priority = priority

    @property
    def metric(self):
        """
        Gets the metric of this ForecastModification.
        The metric the modification is appied to

        :return: The metric of this ForecastModification.
        :rtype: str
        """
        return self._metric

    @metric.setter
    def metric(self, metric):
        """
        Sets the metric of this ForecastModification.
        The metric the modification is appied to

        :param metric: The metric of this ForecastModification.
        :type: str
        """
        allowed_values = ["CALL_VOLUME", "ATT", "ACW", "CHAT_VOLUME"]
        if metric not in allowed_values:
            raise ValueError(
                "Invalid value for `metric`, must be one of {0}"
                .format(allowed_values)
            )

        self._metric = metric

    @property
    def modification_type(self):
        """
        Gets the modification_type of this ForecastModification.
        The type of modification

        :return: The modification_type of this ForecastModification.
        :rtype: str
        """
        return self._modification_type

    @modification_type.setter
    def modification_type(self, modification_type):
        """
        Sets the modification_type of this ForecastModification.
        The type of modification

        :param modification_type: The modification_type of this ForecastModification.
        :type: str
        """
        allowed_values = ["MINIMUM_PER_INTERVAL", "MAXIMUM_PER_INTERVAL", "SET_VALUE_PER_INTERVAL", "CHANGE_VALUE_PER_INTERVAL", "CHANGE_PERCENT_PER_INTERVAL", "SET_VALUE_OVER_RANGE", "CHANGE_VALUE_OVER_RANGE"]
        if modification_type not in allowed_values:
            raise ValueError(
                "Invalid value for `modification_type`, must be one of {0}"
                .format(allowed_values)
            )

        self._modification_type = modification_type

    @property
    def modification_value(self):
        """
        Gets the modification_value of this ForecastModification.
        The value of the modification

        :return: The modification_value of this ForecastModification.
        :rtype: float
        """
        return self._modification_value

    @modification_value.setter
    def modification_value(self, modification_value):
        """
        Sets the modification_value of this ForecastModification.
        The value of the modification

        :param modification_value: The modification_value of this ForecastModification.
        :type: float
        """
        
        self._modification_value = modification_value

    @property
    def start_date(self):
        """
        Gets the start_date of this ForecastModification.
        The start of the modified time period. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss.SSSZ

        :return: The start_date of this ForecastModification.
        :rtype: datetime
        """
        return self._start_date

    @start_date.setter
    def start_date(self, start_date):
        """
        Sets the start_date of this ForecastModification.
        The start of the modified time period. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss.SSSZ

        :param start_date: The start_date of this ForecastModification.
        :type: datetime
        """
        
        self._start_date = start_date

    @property
    def end_date(self):
        """
        Gets the end_date of this ForecastModification.
        The end of the modified time period. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss.SSSZ

        :return: The end_date of this ForecastModification.
        :rtype: datetime
        """
        return self._end_date

    @end_date.setter
    def end_date(self, end_date):
        """
        Sets the end_date of this ForecastModification.
        The end of the modified time period. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss.SSSZ

        :param end_date: The end_date of this ForecastModification.
        :type: datetime
        """
        
        self._end_date = end_date

    @property
    def attributes(self):
        """
        Gets the attributes of this ForecastModification.
        The filters for the modification

        :return: The attributes of this ForecastModification.
        :rtype: ForecastFilterAttributes
        """
        return self._attributes

    @attributes.setter
    def attributes(self, attributes):
        """
        Sets the attributes of this ForecastModification.
        The filters for the modification

        :param attributes: The attributes of this ForecastModification.
        :type: ForecastFilterAttributes
        """
        
        self._attributes = attributes

    @property
    def enabled(self):
        """
        Gets the enabled of this ForecastModification.
        Determined if the modification is currently applied

        :return: The enabled of this ForecastModification.
        :rtype: bool
        """
        return self._enabled

    @enabled.setter
    def enabled(self, enabled):
        """
        Sets the enabled of this ForecastModification.
        Determined if the modification is currently applied

        :param enabled: The enabled of this ForecastModification.
        :type: bool
        """
        
        self._enabled = enabled

    @property
    def last_modified_date(self):
        """
        Gets the last_modified_date of this ForecastModification.
        The last time the modification was changed. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss.SSSZ

        :return: The last_modified_date of this ForecastModification.
        :rtype: datetime
        """
        return self._last_modified_date

    @last_modified_date.setter
    def last_modified_date(self, last_modified_date):
        """
        Sets the last_modified_date of this ForecastModification.
        The last time the modification was changed. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss.SSSZ

        :param last_modified_date: The last_modified_date of this ForecastModification.
        :type: datetime
        """
        
        self._last_modified_date = last_modified_date

    @property
    def last_modified_by(self):
        """
        Gets the last_modified_by of this ForecastModification.
        The last user to change the modification

        :return: The last_modified_by of this ForecastModification.
        :rtype: User
        """
        return self._last_modified_by

    @last_modified_by.setter
    def last_modified_by(self, last_modified_by):
        """
        Sets the last_modified_by of this ForecastModification.
        The last user to change the modification

        :param last_modified_by: The last_modified_by of this ForecastModification.
        :type: User
        """
        
        self._last_modified_by = last_modified_by

    @property
    def notes(self):
        """
        Gets the notes of this ForecastModification.
        Any notes associated with the modification

        :return: The notes of this ForecastModification.
        :rtype: str
        """
        return self._notes

    @notes.setter
    def notes(self, notes):
        """
        Sets the notes of this ForecastModification.
        Any notes associated with the modification

        :param notes: The notes of this ForecastModification.
        :type: str
        """
        
        self._notes = notes

    @property
    def self_uri(self):
        """
        Gets the self_uri of this ForecastModification.
        The URI for this object

        :return: The self_uri of this ForecastModification.
        :rtype: str
        """
        return self._self_uri

    @self_uri.setter
    def self_uri(self, self_uri):
        """
        Sets the self_uri of this ForecastModification.
        The URI for this object

        :param self_uri: The self_uri of this ForecastModification.
        :type: str
        """
        
        self._self_uri = self_uri

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other

