from telethon.tl.mtproto_request import MTProtoRequest


class BotCallbackAnswer(MTProtoRequest):
    """Class generated by TLObjects' generator. All changes will be ERASED. Original .tl definition below.
    messages.botCallbackAnswer#b10df1fb flags:None alert:flags.1?true has_url:flags.3?true message:flags.0?string url:flags.2?string = messages.BotCallbackAnswer"""

    # Telegram's constructor ID (and unique identifier) for this class
    constructor_id = 0xb10df1fb

    def __init__(self, alert=None, has_url=None, message=None, url=None):
        """
        :param alert: Telegram type: «true».
        :param has_url: Telegram type: «true».
        :param message: Telegram type: «string».
        :param url: Telegram type: «string».
        """
        super().__init__()

        self.alert = alert
        self.has_url = has_url
        self.message = message
        self.url = url

    def on_send(self, writer):
        writer.write_int(BotCallbackAnswer.constructor_id, signed=False)
        # Calculate the flags. This equals to those flag arguments which are NOT None
        flags = 0
        flags |= (1 << 1) if self.alert else 0
        flags |= (1 << 3) if self.has_url else 0
        flags |= (1 << 0) if self.message else 0
        flags |= (1 << 2) if self.url else 0
        writer.write_int(flags)

        if self.message:
            writer.tgwrite_string(self.message)

        if self.url:
            writer.tgwrite_string(self.url)

    @staticmethod
    def empty():
        """Returns an "empty" instance (all attributes are None)"""
        return BotCallbackAnswer(None, None, None, None)

    def on_response(self, reader):
        flags = reader.read_int()

        if (flags & (1 << 1)) != 0:
            self.alert = True  # Arbitrary not-None value, no need to read since it is a flag

        if (flags & (1 << 3)) != 0:
            self.has_url = True  # Arbitrary not-None value, no need to read since it is a flag

        if (flags & (1 << 0)) != 0:
            self.message = reader.tgread_string()

        if (flags & (1 << 2)) != 0:
            self.url = reader.tgread_string()

    def __repr__(self):
        return 'messages.botCallbackAnswer#b10df1fb flags:None alert:flags.1?true has_url:flags.3?true message:flags.0?string url:flags.2?string = messages.BotCallbackAnswer'

    def __str__(self):
        return '(messages.botCallbackAnswer (ID: 0xb10df1fb) = (alert={}, has_url={}, message={}, url={}))'.format(str(self.alert), str(self.has_url), str(self.message), str(self.url))
