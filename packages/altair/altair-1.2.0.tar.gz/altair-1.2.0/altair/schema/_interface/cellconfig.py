# This file auto-generated by `generate_schema_interface.py`.
# Do not modify this file directly.

import traitlets as T
from ..baseobject import BaseObject


class CellConfig(BaseObject):
    """Wrapper for Vega-Lite CellConfig definition.
    
    Attributes
    ----------
    clip: Bool
        
    fill: Unicode
        The fill color.
    fillOpacity: CFloat
        The fill opacity (value between [0,1]).
    height: CFloat
        
    stroke: Unicode
        The stroke color.
    strokeDash: List(CFloat)
        An array of alternating stroke, space lengths for creating dashed or dotted lines.
    strokeDashOffset: CFloat
        The offset (in pixels) into which to begin drawing with the stroke dash array.
    strokeOpacity: CFloat
        The stroke opacity (value between [0,1]).
    strokeWidth: CFloat
        The stroke width, in pixels.
    width: CFloat
        
    """
    clip = T.Bool(allow_none=True, default_value=None)
    fill = T.Unicode(allow_none=True, default_value=None, help="""The fill color.""")
    fillOpacity = T.CFloat(allow_none=True, default_value=None, help="""The fill opacity (value between [0,1]).""")
    height = T.CFloat(allow_none=True, default_value=None)
    stroke = T.Unicode(allow_none=True, default_value=None, help="""The stroke color.""")
    strokeDash = T.List(T.CFloat(), allow_none=True, default_value=None, help="""An array of alternating stroke, space lengths for creating dashed or dotted lines.""")
    strokeDashOffset = T.CFloat(allow_none=True, default_value=None, help="""The offset (in pixels) into which to begin drawing with the stroke dash array.""")
    strokeOpacity = T.CFloat(allow_none=True, default_value=None, help="""The stroke opacity (value between [0,1]).""")
    strokeWidth = T.CFloat(allow_none=True, default_value=None, help="""The stroke width, in pixels.""")
    width = T.CFloat(allow_none=True, default_value=None)
    
    def __init__(self, clip=None, fill=None, fillOpacity=None, height=None, stroke=None, strokeDash=None, strokeDashOffset=None, strokeOpacity=None, strokeWidth=None, width=None, **kwargs):
        kwds = dict(clip=clip, fill=fill, fillOpacity=fillOpacity, height=height, stroke=stroke, strokeDash=strokeDash, strokeDashOffset=strokeDashOffset, strokeOpacity=strokeOpacity, strokeWidth=strokeWidth, width=width)
        kwargs.update({k:v for k, v in kwds.items() if v is not None})
        super(CellConfig, self).__init__(**kwargs)