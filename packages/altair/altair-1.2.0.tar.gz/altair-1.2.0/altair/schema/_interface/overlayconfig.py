# This file auto-generated by `generate_schema_interface.py`.
# Do not modify this file directly.

import traitlets as T
from ..baseobject import BaseObject
from .areaoverlay import AreaOverlay
from .markconfig import MarkConfig


class OverlayConfig(BaseObject):
    """Wrapper for Vega-Lite OverlayConfig definition.
    
    Attributes
    ----------
    area: AreaOverlay
        Type of overlay for area mark (line or linepoint).
    line: Bool
        Whether to overlay line with point.
    lineStyle: MarkConfig
        Default style for the overlayed point.
    pointStyle: MarkConfig
        Default style for the overlayed point.
    """
    area = AreaOverlay(allow_none=True, default_value=None, help="""Type of overlay for area mark (line or linepoint).""")
    line = T.Bool(allow_none=True, default_value=None, help="""Whether to overlay line with point.""")
    lineStyle = T.Instance(MarkConfig, allow_none=True, default_value=None, help="""Default style for the overlayed point.""")
    pointStyle = T.Instance(MarkConfig, allow_none=True, default_value=None, help="""Default style for the overlayed point.""")
    
    def __init__(self, area=None, line=None, lineStyle=None, pointStyle=None, **kwargs):
        kwds = dict(area=area, line=line, lineStyle=lineStyle, pointStyle=pointStyle)
        kwargs.update({k:v for k, v in kwds.items() if v is not None})
        super(OverlayConfig, self).__init__(**kwargs)