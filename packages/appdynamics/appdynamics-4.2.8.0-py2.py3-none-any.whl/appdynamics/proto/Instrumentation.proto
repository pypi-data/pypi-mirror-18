//
//   Copyright 2013-2014 AppDynamics.
//   All rights reserved.
//

import "Common.proto";

option java_package = "appdynamics.pb";

package appdynamics.pb.Instrumentation;

message EntityCollector
{
    enum Type
    {
        INVOKED_OBJECT = 1;
        RETURN_VALUE = 2;
        PARAMETER = 3;
        IDENTIFYING_PROPERTY = 4;
        FIELD = 5;
        USER_DEFINED_NAME = 6;
    }

    optional Type type = 1 [ default = RETURN_VALUE ];
    optional int32 parameterIndex = 2;
    optional string propertyName = 3;
    optional string fieldName = 4;
    optional string userDefinedName = 5;
}

message Operator
{
    message Comparison
    {
        required ExpressionNode lhs = 1;
        required ExpressionNode rhs = 2;
    }

    message And
    {
        repeated ExpressionNode operands = 1;
    }

    message Or
    {
        repeated ExpressionNode operands = 1;
    }

    message Not
    {
        required ExpressionNode operand = 1;
    }

    message Getter
    {
        required string field = 1;
        required ExpressionNode base = 2;
    }

    message Caller
    {
        required string method = 1;
        repeated ExpressionNode params = 2;
        required ExpressionNode base = 3;
    }

    message StringMatch
    {
        required Common.StringMatchCondition condition = 1;
        required ExpressionNode input = 2;
    }

    message Merge
    {
        required ExpressionNode inputArray = 1;
        required string delimiter = 2;
    }

    message Split
    {
        required ExpressionNode input = 1;
        required string delimiter = 2;
        optional Segments segments = 3;
    }

    message RegexCapture
    {
        required ExpressionNode input = 1;
        required string regex = 2;
        repeated uint32 regexGroups = 3;
    }

    message XPath
    {
        required string expression = 1;
        optional bool optionalField = 2;
    }

    message XmlBinding
    {
        required ClassMatch classMatch = 1;
        required ExpressionNode getterChain = 2;
    }
}

message ExpressionNode
{
    enum Type
    {
        // operation types
        EQUALS          = 1;
        NOT_EQUALS      = 2;
        LT              = 3;
        GT              = 4;
        LE              = 5;
        GE              = 6;
        NOT             = 7;
        AND             = 8;
        OR              = 9;
        GETTER          = 10;
        CALLER          = 11;
        STRINGMATCH     = 12;
        MERGE           = 13;
        SPLIT           = 14;
        REGEXCAPTURE    = 15;
        XPATH           = 16;
        XML_BINDING     = 17;

        // value types (high bit is set for easier testing)
        ENTITY          = 128;
        STRING          = 129;
        INTEGER         = 130;
    }

    optional Type type = 1 [ default = STRING ];

    // Value node
    optional EntityCollector entityValue = 2;
    optional string stringValue = 3;
    optional int64 integerValue = 4;

    // n-ary operator node with operands
    optional Operator.Comparison comparisonOp = 5;
    optional Operator.And andOp = 6;
    optional Operator.Or orOp = 7;
    optional Operator.Not notOp = 8;
    optional Operator.Getter getterOp = 9;
    optional Operator.Caller callerOp = 10;
    optional Operator.StringMatch stringMatchOp = 11;
    optional Operator.Merge mergeOp = 12;
    optional Operator.Split splitOp = 13;
    optional Operator.RegexCapture regexCaptureOp = 14;
    optional Operator.XPath xpathOp = 15;
    optional Operator.XmlBinding xmlBindingOp = 16;
}

message ClassMatch
{
    enum Type
    {
        MATCHES_CLASS = 1;
        IMPLEMENTS_INTERFACE = 2;
        INHERITS_CLASS = 3;
        HAS_ANNOTATION = 4;
    }
    optional Type type = 1 [ default = MATCHES_CLASS ];
    required Common.StringMatchCondition classNameCondition = 2;

    extensions 100 to 199;
}

message FileMatch
{
    required string fileName = 1;
}

message MethodMatch
{
    required Common.StringMatchCondition methodNameCondition = 1;
    // method match can have additional match condition. Refer to info point UI.
    optional ExpressionNode matchCondition = 2;
}

message FieldMatch
{
    required Common.StringMatchCondition matchCondition = 1;
}

message ClosureMatch
{
    required string fileName = 1;
    required int32 startLineNo = 2;
    required int32 endLineNo = 3;
    optional ExpressionNode matchCondition = 4;
}

message InstrumentationProbe
{
    message Java
    {
        required ClassMatch classMatch = 1;
        required MethodMatch methodMatch = 2;
        optional bool noParams = 3;
        repeated string methodParamTypes = 4;
    }

    message PHP
    {
        optional ClassMatch classMatch = 1;
        optional MethodMatch methodMatch = 2;
        optional FileMatch fileMatch = 3;
        optional ClosureMatch closureMatch = 4;
    }

    message NodeJS
    {
        optional MethodMatch methodMatch = 1;
        optional ClosureMatch closureMatch = 2;
    }

    optional Java javaDefinition = 1;
    optional PHP phpDefinition = 2;
    optional NodeJS nodejsDefinition = 3;
}

message CustomMetricDefinition
{
    enum Rollup
    {
        AVERAGE = 1;
        SUM = 2;
    }

    required string name = 1;
    required Rollup rollup = 2;
    required ExpressionNode data = 3;
    optional int32 scale = 4 [ default = 1 ];
}

message InformationPoint
{
    required InstrumentationProbe probe = 1;
    repeated CustomMetricDefinition metricDefinitions = 2;
    // this will also have an 'id' field in the future, when info points get an
    // actual UI and controller migrates to use the new DTO
}

message MethodDataGathererConfig
{
    required int64 id = 1;
    required InstrumentationProbe probe = 2;
    repeated MethodDataToCollect methodDataToCollect = 3;
}

message MethodDataToCollect
{
    required string name = 1;
    required ExpressionNode data = 2;
}

message Range
{
    //TODO
}

message Segments
{
    enum Type
    {
        FIRST = 1;
        LAST = 2;
        SELECTED = 3;
    }
    required Type type = 1;
    // Used to capture first or last segments
    optional int32 numSegments = 2;
    repeated int32 selectedSegments = 3;
}