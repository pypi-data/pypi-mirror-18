option java_package = "appdynamics.pb";
package appdynamics.pb.Agent;

import "Common.proto";
import "Instrumentation.proto";

// Backend Configuration

// The backend rules are sorted by priority.
// The OOTB rule is added as the last entry since custom rules take precedence.
message BackendConfig
{
    message PHP
    {
        repeated BackendRule dbBackendConfig = 1;
        repeated BackendRule cacheBackendConfig = 2;
        repeated BackendRule httpBackendConfig = 3;
        repeated BackendRule webServiceBackendConfig = 4;
        repeated BackendRule rabbitmqBackendConfig = 5;
    }

    message NodeJS
    {
        repeated BackendRule dbBackendConfig = 1;
        repeated BackendRule cacheBackendConfig = 2;
        repeated BackendRule httpBackendConfig = 3;
    }

    message Python
    {
        repeated BackendRule dbBackendConfig = 1;
        repeated BackendRule cacheBackendConfig = 2;
        repeated BackendRule httpBackendConfig = 3;
        repeated BackendRule rabbitmqBackendConfig = 4;
        repeated BackendRule mongodbBackendConfig = 5;
    }

    message NativeSDK
    {
        repeated BackendRule dbBackendConfig = 1;
        repeated BackendRule cacheBackendConfig = 2;
        repeated BackendRule httpBackendConfig = 3;
    }

    message NativeDynamic
    {
        repeated BackendRule dbBackendConfig = 1;
        repeated BackendRule cacheBackendConfig = 2;
        repeated BackendRule httpBackendConfig = 3;
    }

    message NativeWebServer
    {
        repeated BackendRule dbBackendConfig = 1;
        repeated BackendRule cacheBackendConfig = 2;
        repeated BackendRule httpBackendConfig = 3;
        repeated BackendRule moduleBackendConfig = 4;
    }

    optional PHP phpDefinition = 1;
    optional NodeJS nodejsDefinition = 2;
    optional Python pythonDefinition = 3;
    optional NativeSDK nativeSDKDefinition = 4;
    optional NativeDynamic nativeDynamicDefinition = 5;
    optional NativeWebServer nativeWebServerDefinition = 6;
}

message BackendRule
{
    optional string name = 1;
    required bool correlationEnabled = 2;
    // not present for the OOTB rule
    optional BackendMatchRule matchRule = 3;
    required BackendNamingRule namingRule = 4;
    required int32 priority = 5;
}

message BackendMatchRule
{
    message DB
    {
        optional Common.StringMatchCondition url = 1;
        optional Common.StringMatchCondition host = 2;
        optional Common.StringMatchCondition port = 3;
        optional Common.StringMatchCondition database = 4;
        optional Common.StringMatchCondition version = 5;
        optional Common.StringMatchCondition vendor = 6;
    }

    message Cache
    {
        optional Common.StringMatchCondition serverPool = 1;
        optional Common.StringMatchCondition vendor = 2;
    }

    message HTTP
    {
        optional Common.StringMatchCondition host = 1;
        optional Common.StringMatchCondition port = 2;
        optional Common.StringMatchCondition url = 3;
        optional Common.StringMatchCondition queryString = 4;
    }

    message WebService
    {
        optional Common.StringMatchCondition serviceName = 1;
        optional Common.StringMatchCondition url = 2;
        optional Common.StringMatchCondition operation = 3;
        optional Common.StringMatchCondition soapAction = 4;
        optional Common.StringMatchCondition vendor = 5;
    }

    message Rabbitmq
    {
        optional Common.StringMatchCondition host = 1;
        optional Common.StringMatchCondition port = 2;
        optional Common.StringMatchCondition routingKey = 3;
        optional Common.StringMatchCondition exchange = 4;
    }

    message Module
    {
        optional Common.StringMatchCondition name = 1;
        optional Common.StringMatchCondition version = 2;
    }

    message Mongodb
    {
        optional Common.StringMatchCondition host = 1;
        optional Common.StringMatchCondition port = 2;
        optional Common.StringMatchCondition database = 3;
    }

    optional DB dbMatchRule = 1;
    optional Cache cacheMatchRule = 2;
    optional HTTP httpMatchRule = 3;
    optional WebService webServiceMatchRule = 4;
    optional Rabbitmq rabbitMQMatchRule = 5;
    optional Module moduleMatchRule = 6;
    optional Mongodb mongodbMatchRule = 7;
}


message BackendNamingRule
{
    message DB
    {
        optional Instrumentation.ExpressionNode url = 1;
        optional Instrumentation.ExpressionNode host = 2;
        optional Instrumentation.ExpressionNode port = 3;
        optional Instrumentation.ExpressionNode database = 4;
        optional Instrumentation.ExpressionNode version = 5;
        optional Instrumentation.ExpressionNode vendor = 6;
    }

    message Cache
    {
        optional Instrumentation.ExpressionNode serverPool = 1;
        optional Instrumentation.ExpressionNode vendor = 2;
    }

    message HTTP
    {
        optional Instrumentation.ExpressionNode host = 1;
        optional Instrumentation.ExpressionNode port = 2;
        optional Instrumentation.ExpressionNode url = 3;
        optional Instrumentation.ExpressionNode queryString = 4;
    }

    message WebService
    {
        optional Instrumentation.ExpressionNode serviceName = 1;
        optional Instrumentation.ExpressionNode url = 2;
        optional Instrumentation.ExpressionNode operation = 3;
        optional Instrumentation.ExpressionNode soapAction = 4;
        optional Instrumentation.ExpressionNode vendor = 5;
    }

    message Rabbitmq
    {
        optional Instrumentation.ExpressionNode host = 1;
        optional Instrumentation.ExpressionNode port = 2;
        optional Instrumentation.ExpressionNode routingKey = 3;
        optional Instrumentation.ExpressionNode exchange = 4;
    }

    message Module
    {
        optional Instrumentation.ExpressionNode name = 1;
        optional Instrumentation.ExpressionNode version = 2;
    }

    message Mongodb
    {
        optional Instrumentation.ExpressionNode host = 1;
        optional Instrumentation.ExpressionNode port = 2;
        optional Instrumentation.ExpressionNode database = 3;
    }

    optional DB dbNamingRule = 1;
    optional Cache cacheNamingRule = 2;
    optional HTTP httpNamingRule = 3;
    optional WebService webServiceNamingRule = 4;
    optional Rabbitmq rabbitMQNamingRule = 5;
    optional Module moduleNamingRule = 6;
    optional Mongodb mongodbNamingRule = 7;
}
