"""Subclass of TextPane, which is generated by wxFormBuilder."""

import wx

from beatle import tran
from beatle.ctx import THE_CONTEXT as context
from beatle.app.ui.pane import BasePane
from beatle.lib.handlers import IdentifiersHandler as ID

from activity.arch.ui import ui as ui
from activity.arch.handlers.text import EditorHandler



# Implementing TextPane
class TextPane(BasePane, ui.TextPane):
    """Implements text editor"""
    _closePane  = ID.register('close-pane')
    _toggleFull = ID.register('fullscreen')

    def __init__(self, parent, mainframe, fileobj):
        """Intialization of text editor"""
        self._parent = parent
        self._mainframe = mainframe
        self._object = fileobj
        self._types = {}
        self._editorArgs = {
            'language': 'python',
            'handler': EditorHandler(
                obj=fileobj
            )
        }
        super(TextPane, self).__init__(parent)
        self._defaulBkColor = self.GetBackgroundColour()
        self.Layout()

        wx.stc.EVT_STC_CHANGE(self.m_editor, self.m_editor.GetId(),
            self.OnEditorChange)

        frame = context.frame
        self.BindSpecial(wx.EVT_MENU, handler=frame.CloseCurrentDocPane, id=self._closePane)
        self.BindSpecial(wx.EVT_MENU, self.OnDelete, id=frame.delete.GetId())
        self.BindSpecial(wx.EVT_MENU, self.OnSave, id=frame.saveProject.GetId())
        self.BindSpecial(wx.wx.EVT_UPDATE_UI, self.OnUpdateSave, id=frame.saveProject.GetId())

        aTable = wx.AcceleratorTable([
            wx.AcceleratorEntry(wx.ACCEL_NORMAL, wx.WXK_DELETE, frame.delete.GetId()),
            wx.AcceleratorEntry(wx.ACCEL_ALT | wx.ACCEL_CTRL, ord('F'), self._toggleFull),
            wx.AcceleratorEntry(wx.ACCEL_CTRL, ord('W'), self._closePane)
        ])
        self.SetAcceleratorTable(aTable)
        

    def Refresh(self):
        """Update editor from external changes (like undo/redo)"""
        oldText = self.m_editor.GetText()
        newText = self._object.GetText()
        if oldText == newText:
            return
        line = self.m_editor.GetFirstVisibleLine()
        pos = self.m_editor.GetCurrentPos()
        self.m_editor.Freeze()
        self.m_editor.SetText(self._object.GetText())
        self.m_editor.SetModified(False)
        try:
            self.m_editor.SetFirstVisibleLine(line)
            self.m_editor.SetCurrentPos(pos)
        except:
            pass
        self.m_editor.Thaw()

    def OnEditorChange(self, event):
        """Called when editor status change"""
        if self.m_editor.GetModify():
            self.SetBackgroundColour(wx.LIGHT_GREY)
        else:
            self.SetBackgroundColour(self._defaulBkColor)

    @tran.TransactionalMethod('modify file {0}')
    def Commit(self):
        """Do commit changes"""
        if self.m_editor.GetModify():
            self._object.SaveState()
            self._object.SetText(self.m_editor.GetText())
            self.m_editor.SetModified(False)
            self.SetBackgroundColour(self._defaulBkColor)
            return True
        else:
            return False

    @property
    def line(self):
        """return current line"""
        return self.m_editor.GetCurrentLine()

    def OnDelete(self, event):
        """Handle delete key"""
        (b, e) = self.m_editor.GetSelection()
        if b == e:
            self.m_editor.CharRight()
        self.m_editor.DeleteBack()

    def OnUpdateSave(self, event):
        """Handles update event"""
        event.Enable(self.m_editor.GetModify())

    def OnSave(self, event):
        """Handles save event"""
        self.Commit()


