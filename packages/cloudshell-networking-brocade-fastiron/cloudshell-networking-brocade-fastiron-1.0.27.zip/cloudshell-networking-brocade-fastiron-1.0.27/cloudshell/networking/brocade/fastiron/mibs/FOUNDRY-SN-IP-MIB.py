#
# PySNMP MIB module FOUNDRY-SN-IP-MIB (http://pysnmp.sf.net)
# ASN.1 source file://F:\foundry\foundry.mib
# Produced by pysmi-0.0.6 at Tue Sep 20 14:02:01 2016
# On host ? platform ? version ? by user ?
# Using Python version 2.7.10 (default, May 23 2015, 09:40:32) [MSC v.1500 32 bit (Intel)]
#
( Integer, ObjectIdentifier, OctetString, ) = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
( NamedValues, ) = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
( ConstraintsUnion, SingleValueConstraint, ConstraintsIntersection, ValueSizeConstraint, ValueRangeConstraint, ) = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "SingleValueConstraint", "ConstraintsIntersection", "ValueSizeConstraint", "ValueRangeConstraint")
( DisplayString, ) = mibBuilder.importSymbols("FOUNDRY-SN-AGENT-MIB", "DisplayString")
( snFsrp, snGblRt, snPim, snRip, router, snDvmrp, snLoopbackIf, ) = mibBuilder.importSymbols("FOUNDRY-SN-ROOT-MIB", "snFsrp", "snGblRt", "snPim", "snRip", "router", "snDvmrp", "snLoopbackIf")
( PortMask, ) = mibBuilder.importSymbols("FOUNDRY-SN-SWITCH-GROUP-MIB", "PortMask")
( ifIndex, InterfaceIndex, ) = mibBuilder.importSymbols("IF-MIB", "ifIndex", "InterfaceIndex")
( InetAddressType, ) = mibBuilder.importSymbols("INET-ADDRESS-MIB", "InetAddressType")
( NotificationGroup, ModuleCompliance, ) = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
( Integer32, MibScalar, MibTable, MibTableRow, MibTableColumn, NotificationType, MibIdentifier, Bits, TimeTicks, Counter64, Unsigned32, ModuleIdentity, Gauge32, iso, ObjectIdentity, IpAddress, Counter32, ) = mibBuilder.importSymbols("SNMPv2-SMI", "Integer32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "NotificationType", "MibIdentifier", "Bits", "TimeTicks", "Counter64", "Unsigned32", "ModuleIdentity", "Gauge32", "iso", "ObjectIdentity", "IpAddress", "Counter32")
( DisplayString, TextualConvention, ) = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
snIp = ModuleIdentity((1, 3, 6, 1, 4, 1, 1991, 1, 2, 2)).setRevisions(("2009-09-30 00:00",))
class RtrStatus(Integer32, TextualConvention):
    subtypeSpec = Integer32.subtypeSpec+SingleValueConstraint(0, 1,)
    namedValues = NamedValues(("disabled", 0), ("enabled", 1),)

class ClearStatus(Integer32, TextualConvention):
    subtypeSpec = Integer32.subtypeSpec+SingleValueConstraint(0, 1,)
    namedValues = NamedValues(("normal", 0), ("clear", 1),)

class RowSts(Integer32, TextualConvention):
    subtypeSpec = Integer32.subtypeSpec+SingleValueConstraint(1, 2, 3, 4,)
    namedValues = NamedValues(("other", 1), ("valid", 2), ("delete", 3), ("create", 4),)

class PortIndex(Integer32, TextualConvention):
    pass

class Action(Integer32, TextualConvention):
    subtypeSpec = Integer32.subtypeSpec+SingleValueConstraint(0, 1,)
    namedValues = NamedValues(("deny", 0), ("permit", 1),)

class Metric(Integer32, TextualConvention):
    subtypeSpec = Integer32.subtypeSpec+ValueRangeConstraint(0,65535)

snGblRtGeneral = MibIdentifier((1, 3, 6, 1, 4, 1, 1991, 1, 2, 8, 1))
snGblRtRouteOnly = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 2, 8, 1, 1), RtrStatus()).setMaxAccess("readwrite")
snRtIpGeneral = MibIdentifier((1, 3, 6, 1, 4, 1, 1991, 1, 2, 2, 1))
snRtClearArpCache = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 2, 2, 1, 1), ClearStatus()).setMaxAccess("readwrite")
snRtClearIpCache = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 2, 2, 1, 2), ClearStatus()).setMaxAccess("readwrite")
snRtClearIpRoute = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 2, 2, 1, 3), ClearStatus()).setMaxAccess("readwrite")
snRtBootpServer = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 2, 2, 1, 4), IpAddress()).setMaxAccess("readwrite")
snRtBootpRelayMax = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 2, 2, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1,15))).setMaxAccess("readwrite")
snRtArpAge = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 2, 2, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0,240))).setMaxAccess("readwrite")
snRtIpIrdpEnable = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 2, 2, 1, 7), RtrStatus()).setMaxAccess("readwrite")
snRtIpLoadShare = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 2, 2, 1, 8), RtrStatus()).setMaxAccess("readwrite")
snRtIpProxyArp = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 2, 2, 1, 9), RtrStatus()).setMaxAccess("readwrite")
snRtIpRarp = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 2, 2, 1, 10), RtrStatus()).setMaxAccess("readwrite")
snRtIpTtl = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 2, 2, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1,255))).setMaxAccess("readwrite")
snRtIpSetAllPortConfig = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 2, 2, 1, 12), Integer32()).setMaxAccess("readwrite")
snRtIpFwdCacheMaxEntries = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 2, 2, 1, 13), Integer32()).setMaxAccess("readonly")
snRtIpFwdCacheCurEntries = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 2, 2, 1, 14), Integer32()).setMaxAccess("readonly")
snRtIpMaxStaticRouteEntries = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 2, 2, 1, 15), Integer32()).setMaxAccess("readonly")
snRtIpDirBcastFwd = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 2, 2, 1, 16), RtrStatus().clone('enabled')).setMaxAccess("readwrite")
snRtIpLoadShareNumOfPaths = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 2, 2, 1, 17), Integer32()).setMaxAccess("readwrite")
snRtIpLoadShareMaxPaths = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 2, 2, 1, 18), Integer32()).setMaxAccess("readonly")
snRtIpLoadShareMinPaths = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 2, 2, 1, 19), Integer32()).setMaxAccess("readonly")
snRtIpProtocolRouterId = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 2, 2, 1, 20), IpAddress()).setMaxAccess("readwrite")
snRtIpSourceRoute = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 2, 2, 1, 21), RtrStatus().clone('enabled')).setMaxAccess("readwrite")
snRtIpStaticRouteTable = MibTable((1, 3, 6, 1, 4, 1, 1991, 1, 2, 2, 2), )
snRtIpStaticRouteEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1991, 1, 2, 2, 2, 1), ).setIndexNames((0, "FOUNDRY-SN-IP-MIB", "snRtIpStaticRouteIndex"))
snRtIpStaticRouteIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 2, 2, 1, 1), Integer32()).setMaxAccess("readonly")
snRtIpStaticRouteDest = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 2, 2, 1, 2), IpAddress()).setMaxAccess("readwrite")
snRtIpStaticRouteMask = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 2, 2, 1, 3), IpAddress()).setMaxAccess("readwrite")
snRtIpStaticRouteNextHop = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 2, 2, 1, 4), IpAddress()).setMaxAccess("readwrite")
snRtIpStaticRouteMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 2, 2, 1, 5), Integer32()).setMaxAccess("readwrite")
snRtIpStaticRouteRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 2, 2, 1, 6), RowSts()).setMaxAccess("readwrite")
snRtIpStaticRouteDistance = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 2, 2, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1,255))).setMaxAccess("readwrite")
snRtIpFilterTable = MibTable((1, 3, 6, 1, 4, 1, 1991, 1, 2, 2, 3), )
snRtIpFilterEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1991, 1, 2, 2, 3, 1), ).setIndexNames((0, "FOUNDRY-SN-IP-MIB", "snRtIpFilterIndex"))
snRtIpFilterIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 2, 3, 1, 1), Integer32()).setMaxAccess("readonly")
snRtIpFilterAction = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 2, 3, 1, 2), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1, 2,)).clone(namedValues=NamedValues(("deny", 0), ("permit", 1), ("qosEnabled", 2),))).setMaxAccess("readwrite")
snRtIpFilterProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 2, 3, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0,255))).setMaxAccess("readwrite")
snRtIpFilterSourceIp = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 2, 3, 1, 4), IpAddress()).setMaxAccess("readwrite")
snRtIpFilterSourceMask = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 2, 3, 1, 5), IpAddress()).setMaxAccess("readwrite")
snRtIpFilterDestIp = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 2, 3, 1, 6), IpAddress()).setMaxAccess("readwrite")
snRtIpFilterDestMask = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 2, 3, 1, 7), IpAddress()).setMaxAccess("readwrite")
snRtIpFilterOperator = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 2, 3, 1, 8), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3, 4,)).clone(namedValues=NamedValues(("greater", 1), ("equal", 2), ("less", 3), ("notEqual", 4),))).setMaxAccess("readwrite")
snRtIpFilterOperand = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 2, 3, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0,65535))).setMaxAccess("readwrite")
snRtIpFilterRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 2, 3, 1, 10), RowSts()).setMaxAccess("readwrite")
snRtIpFilterEstablished = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 2, 3, 1, 11), RtrStatus()).setMaxAccess("readwrite")
snRtIpFilterQosPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 2, 3, 1, 12), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7,)).clone(namedValues=NamedValues(("level0", 0), ("level1", 1), ("level2", 2), ("level3", 3), ("level4", 4), ("level5", 5), ("level6", 6), ("level7", 7),))).setMaxAccess("readwrite")
snRtIpRarpTable = MibTable((1, 3, 6, 1, 4, 1, 1991, 1, 2, 2, 4), )
snRtIpRarpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1991, 1, 2, 2, 4, 1), ).setIndexNames((0, "FOUNDRY-SN-IP-MIB", "snRtIpRarpIndex"))
snRtIpRarpIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 2, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1,16))).setMaxAccess("readonly")
snRtIpRarpMac = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 2, 4, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(6,6)).setFixedLength(6)).setMaxAccess("readwrite")
snRtIpRarpIp = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 2, 4, 1, 3), IpAddress()).setMaxAccess("readwrite")
snRtIpRarpRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 2, 4, 1, 4), RowSts()).setMaxAccess("readwrite")
snRtStaticArpTable = MibTable((1, 3, 6, 1, 4, 1, 1991, 1, 2, 2, 5), )
snRtStaticArpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1991, 1, 2, 2, 5, 1), ).setIndexNames((0, "FOUNDRY-SN-IP-MIB", "snRtStaticArpIndex"))
snRtStaticArpIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 2, 5, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1,16))).setMaxAccess("readonly")
snRtStaticArpIp = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 2, 5, 1, 2), IpAddress()).setMaxAccess("readwrite")
snRtStaticArpMac = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 2, 5, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(6,6)).setFixedLength(6)).setMaxAccess("readwrite")
snRtStaticArpPort = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 2, 5, 1, 4), PortIndex()).setMaxAccess("readwrite")
snRtStaticArpRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 2, 5, 1, 5), RowSts()).setMaxAccess("readwrite")
snRtIpPortAddrTable = MibTable((1, 3, 6, 1, 4, 1, 1991, 1, 2, 2, 6), )
snRtIpPortAddrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1991, 1, 2, 2, 6, 1), ).setIndexNames((0, "FOUNDRY-SN-IP-MIB", "snRtIpPortAddrPortIndex"), (0, "FOUNDRY-SN-IP-MIB", "snRtIpPortAddress"))
snRtIpPortAddrPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 2, 6, 1, 1), PortIndex()).setMaxAccess("readonly")
snRtIpPortAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 2, 6, 1, 2), IpAddress()).setMaxAccess("readonly")
snRtIpPortSubnetMask = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 2, 6, 1, 3), IpAddress()).setMaxAccess("readwrite")
snRtIpPortAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 2, 6, 1, 4), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2,)).clone(namedValues=NamedValues(("primary", 1), ("secondary", 2),)).clone('primary')).setMaxAccess("readwrite")
snRtIpPortRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 2, 6, 1, 5), RowSts()).setMaxAccess("readwrite")
snRtIpPortAccessTable = MibTable((1, 3, 6, 1, 4, 1, 1991, 1, 2, 2, 7), )
snRtIpPortAccessEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1991, 1, 2, 2, 7, 1), ).setIndexNames((0, "FOUNDRY-SN-IP-MIB", "snRtIpPortAccessPortIndex"), (0, "FOUNDRY-SN-IP-MIB", "snRtIpPortAccessDirection"))
snRtIpPortAccessPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 2, 7, 1, 1), PortIndex()).setMaxAccess("readonly")
snRtIpPortAccessDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 2, 7, 1, 2), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2,)).clone(namedValues=NamedValues(("in", 1), ("out", 2),))).setMaxAccess("readonly")
snRtIpPortAccessFilters = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 2, 7, 1, 3), OctetString()).setMaxAccess("readwrite")
snRtIpPortAccessRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 2, 7, 1, 4), RowSts()).setMaxAccess("readwrite")
snRtIpPortConfigTable = MibTable((1, 3, 6, 1, 4, 1, 1991, 1, 2, 2, 8), )
snRtIpPortConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1991, 1, 2, 2, 8, 1), ).setIndexNames((0, "FOUNDRY-SN-IP-MIB", "snRtIpPortConfigPortIndex"))
snRtIpPortConfigPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 2, 8, 1, 1), PortIndex()).setMaxAccess("readonly")
snRtIpPortMtu = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 2, 8, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(576,4470))).setMaxAccess("readwrite")
snRtIpPortEncap = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 2, 8, 1, 3), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3, 4,)).clone(namedValues=NamedValues(("ethernet", 1), ("snap", 2), ("hdlc", 3), ("ppp", 4),))).setMaxAccess("readwrite")
snRtIpPortMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 2, 8, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1,15)).clone(1)).setMaxAccess("readwrite")
snRtIpPortDirBcastFwd = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 2, 8, 1, 5), RtrStatus().clone('enabled')).setMaxAccess("readwrite")
snRtIpPortIfAddrTable = MibTable((1, 3, 6, 1, 4, 1, 1991, 1, 2, 2, 18), )
snRtIpPortIfAddrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1991, 1, 2, 2, 18, 1), ).setIndexNames((0, "FOUNDRY-SN-IP-MIB", "snRtIpPortIfAddrInterfaceIndex"), (0, "FOUNDRY-SN-IP-MIB", "snRtIpPortIfAddress"))
snRtIpPortIfAddrInterfaceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 2, 18, 1, 1), InterfaceIndex()).setMaxAccess("readonly")
snRtIpPortIfAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 2, 18, 1, 2), IpAddress()).setMaxAccess("readonly")
snRtIpPortIfSubnetMask = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 2, 18, 1, 3), IpAddress()).setMaxAccess("readwrite")
snRtIpPortIfAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 2, 18, 1, 4), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2,)).clone(namedValues=NamedValues(("primary", 1), ("secondary", 2),)).clone('primary')).setMaxAccess("readwrite")
snRtIpPortIfRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 2, 18, 1, 5), RowSts()).setMaxAccess("readwrite")
snRtIpPortIfAccessTable = MibTable((1, 3, 6, 1, 4, 1, 1991, 1, 2, 2, 19), )
snRtIpPortIfAccessEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1991, 1, 2, 2, 19, 1), ).setIndexNames((0, "FOUNDRY-SN-IP-MIB", "snRtIpPortIfAccessInterfaceIndex"), (0, "FOUNDRY-SN-IP-MIB", "snRtIpPortIfAccessDirection"))
snRtIpPortIfAccessInterfaceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 2, 19, 1, 1), InterfaceIndex()).setMaxAccess("readonly")
snRtIpPortIfAccessDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 2, 19, 1, 2), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2,)).clone(namedValues=NamedValues(("in", 1), ("out", 2),))).setMaxAccess("readonly")
snRtIpPortIfAccessFilters = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 2, 19, 1, 3), OctetString()).setMaxAccess("readwrite")
snRtIpPortIfAccessRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 2, 19, 1, 4), RowSts()).setMaxAccess("readwrite")
snRtIpPortIfConfigTable = MibTable((1, 3, 6, 1, 4, 1, 1991, 1, 2, 2, 20), )
snRtIpPortIfConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1991, 1, 2, 2, 20, 1), ).setIndexNames((0, "FOUNDRY-SN-IP-MIB", "snRtIpPortIfConfigInterfaceIndex"))
snRtIpPortIfConfigInterfaceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 2, 20, 1, 1), InterfaceIndex()).setMaxAccess("readonly")
snRtIpPortIfMtu = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 2, 20, 1, 2), Integer32()).setMaxAccess("readwrite")
snRtIpPortIfEncap = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 2, 20, 1, 3), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3, 4, 5,)).clone(namedValues=NamedValues(("ethernet", 1), ("snap", 2), ("hdlc", 3), ("ppp", 4), ("other", 5),))).setMaxAccess("readwrite")
snRtIpPortIfMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 2, 20, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1,15)).clone(1)).setMaxAccess("readwrite")
snRtIpPortIfDirBcastFwd = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 2, 20, 1, 5), RtrStatus().clone('enabled')).setMaxAccess("readwrite")
agIpPortCounterTable = MibTable((1, 3, 6, 1, 4, 1, 1991, 1, 2, 2, 21), )
agIpPortCounterEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1991, 1, 2, 2, 21, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "FOUNDRY-SN-IP-MIB", "agIpPortCounterIpVersion"))
agIpPortCounterIpVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 2, 21, 1, 1), InetAddressType())
agIpPortCounterRxPacket = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 2, 21, 1, 2), Counter64()).setMaxAccess("readonly")
agIpPortCounterRxOctet = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 2, 21, 1, 3), Counter64()).setMaxAccess("readonly")
agIpPortCounterTxPacket = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 2, 21, 1, 4), Counter64()).setMaxAccess("readonly")
agIpPortCounterTxOctet = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 2, 21, 1, 5), Counter64()).setMaxAccess("readonly")
snRtBcastFwd = MibIdentifier((1, 3, 6, 1, 4, 1, 1991, 1, 2, 2, 9))
snRtBcastFwdGeneral = MibIdentifier((1, 3, 6, 1, 4, 1, 1991, 1, 2, 2, 9, 1))
snRtUdpBcastFwdPort = MibIdentifier((1, 3, 6, 1, 4, 1, 1991, 1, 2, 2, 9, 2))
snRtUdpHelper = MibIdentifier((1, 3, 6, 1, 4, 1, 1991, 1, 2, 2, 9, 3))
snRtUdpBcastFwdEnable = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 2, 2, 9, 1, 1), RtrStatus().clone('enabled')).setMaxAccess("readwrite")
snRtUdpBcastFwdPortTable = MibTable((1, 3, 6, 1, 4, 1, 1991, 1, 2, 2, 9, 2, 1), )
snRtUdpBcastFwdPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1991, 1, 2, 2, 9, 2, 1, 1), ).setIndexNames((0, "FOUNDRY-SN-IP-MIB", "snRtUdpBcastFwdPortIndex"))
snRtUdpBcastFwdPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 2, 9, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1,20))).setMaxAccess("readonly")
snRtUdpBcastFwdPortNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 2, 9, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1,65535))).setMaxAccess("readwrite")
snRtUdpBcastFwdPortRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 2, 9, 2, 1, 1, 3), RowSts()).setMaxAccess("readwrite")
snRtUdpBroadcastFwdPortTable = MibTable((1, 3, 6, 1, 4, 1, 1991, 1, 2, 2, 9, 2, 2), )
snRtUdpBroadcastFwdPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1991, 1, 2, 2, 9, 2, 2, 1), ).setIndexNames((0, "FOUNDRY-SN-IP-MIB", "snRtUdpBroadcastFwdPortNumber"))
snRtUdpBroadcastFwdPortNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 2, 9, 2, 2, 1, 1), Integer32())
snRtUdpBroadcastFwdPortRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 2, 9, 2, 2, 1, 2), RowSts()).setMaxAccess("readwrite")
snRtUdpHelperTable = MibTable((1, 3, 6, 1, 4, 1, 1991, 1, 2, 2, 9, 3, 1), )
snRtUdpHelperEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1991, 1, 2, 2, 9, 3, 1, 1), ).setIndexNames((0, "FOUNDRY-SN-IP-MIB", "snRtUdpHelperPortIndex"), (0, "FOUNDRY-SN-IP-MIB", "snRtUdpHelperIndex"))
snRtUdpHelperPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 2, 9, 3, 1, 1, 1), PortIndex()).setMaxAccess("readonly")
snRtUdpHelperIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 2, 9, 3, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1,4))).setMaxAccess("readonly")
snRtUdpHelperAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 2, 9, 3, 1, 1, 3), IpAddress()).setMaxAccess("readwrite")
snRtUdpHelperRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 2, 9, 3, 1, 1, 4), RowSts()).setMaxAccess("readwrite")
snRtUdpIfHelperTable = MibTable((1, 3, 6, 1, 4, 1, 1991, 1, 2, 2, 9, 3, 2), )
snRtUdpIfHelperEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1991, 1, 2, 2, 9, 3, 2, 1), ).setIndexNames((0, "FOUNDRY-SN-IP-MIB", "snRtUdpIfHelperPortIndex"), (0, "FOUNDRY-SN-IP-MIB", "snRtUdpIfHelperAddr"))
snRtUdpIfHelperPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 2, 9, 3, 2, 1, 1), InterfaceIndex())
snRtUdpIfHelperAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 2, 9, 3, 2, 1, 2), IpAddress())
snRtUdpIfHelperAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 2, 9, 3, 2, 1, 3), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2,)).clone(namedValues=NamedValues(("unicast", 1), ("broabcast", 2),))).setMaxAccess("readwrite")
snRtUdpIfHelperRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 2, 9, 3, 2, 1, 4), RowSts()).setMaxAccess("readwrite")
snRtIpTraceRoute = MibIdentifier((1, 3, 6, 1, 4, 1, 1991, 1, 2, 2, 10))
snRtIpTraceRouteGeneral = MibIdentifier((1, 3, 6, 1, 4, 1, 1991, 1, 2, 2, 10, 1))
snRtIpTraceRouteResult = MibIdentifier((1, 3, 6, 1, 4, 1, 1991, 1, 2, 2, 10, 2))
snRtIpTraceRouteTargetAddr = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 2, 2, 10, 1, 1), IpAddress()).setMaxAccess("readwrite")
snRtIpTraceRouteMinTtl = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 2, 2, 10, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0,255)).clone(1)).setMaxAccess("readwrite")
snRtIpTraceRouteMaxTtl = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 2, 2, 10, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0,255)).clone(30)).setMaxAccess("readwrite")
snRtIpTraceRouteTimeOut = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 2, 2, 10, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0,120)).clone(2)).setMaxAccess("readwrite")
snRtIpTraceRouteControl = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 2, 2, 10, 1, 5), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3, 4, 5,)).clone(namedValues=NamedValues(("start", 1), ("abort", 2), ("success", 3), ("failure", 4), ("inProgress", 5),))).setMaxAccess("readwrite")
snRtIpTraceRouteResultTable = MibTable((1, 3, 6, 1, 4, 1, 1991, 1, 2, 2, 10, 2, 1), )
snRtIpTraceRouteResultEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1991, 1, 2, 2, 10, 2, 1, 1), ).setIndexNames((0, "FOUNDRY-SN-IP-MIB", "snRtIpTraceRouteResultIndex"))
snRtIpTraceRouteResultIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 2, 10, 2, 1, 1, 1), Integer32()).setMaxAccess("readonly")
snRtIpTraceRouteResultAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 2, 10, 2, 1, 1, 2), IpAddress()).setMaxAccess("readonly")
snRtIpTraceRouteResultRoundTripTime1 = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 2, 10, 2, 1, 1, 3), TimeTicks()).setMaxAccess("readonly")
snRtIpTraceRouteResultRoundTripTime2 = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 2, 10, 2, 1, 1, 4), TimeTicks()).setMaxAccess("readonly")
snRtIpFwdCacheTable = MibTable((1, 3, 6, 1, 4, 1, 1991, 1, 2, 2, 11), )
snRtIpFwdCacheEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1991, 1, 2, 2, 11, 1), ).setIndexNames((0, "FOUNDRY-SN-IP-MIB", "snRtIpFwdCacheIndex"))
snRtIpFwdCacheIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 2, 11, 1, 1), Integer32()).setMaxAccess("readonly")
snRtIpFwdCacheIp = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 2, 11, 1, 2), IpAddress()).setMaxAccess("readonly")
snRtIpFwdCacheMac = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 2, 11, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(6,6)).setFixedLength(6)).setMaxAccess("readonly")
snRtIpFwdCacheNextHopIp = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 2, 11, 1, 4), IpAddress()).setMaxAccess("readonly")
snRtIpFwdCacheOutgoingPort = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 2, 11, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0,3900))).setMaxAccess("readonly")
snRtIpFwdCacheType = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 2, 11, 1, 6), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2,)).clone(namedValues=NamedValues(("dynamic", 1), ("permanent", 2),))).setMaxAccess("readonly")
snRtIpFwdCacheAction = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 2, 11, 1, 7), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3, 4, 5, 6, 7,)).clone(namedValues=NamedValues(("other", 1), ("forward", 2), ("forUs", 3), ("waitForArp", 4), ("complexFilter", 5), ("icmpDeny", 6), ("dropPacket", 7),))).setMaxAccess("readonly")
snRtIpFwdCacheFragCheck = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 2, 11, 1, 8), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1,)).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1),))).setMaxAccess("readonly")
snRtIpFwdCacheSnapHdr = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 2, 11, 1, 9), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1,)).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1),))).setMaxAccess("readonly")
snRtIpFwdCacheVLanId = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 2, 11, 1, 10), Integer32()).setMaxAccess("readonly")
snRtIpFwdCacheOutgoingIf = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 2, 11, 1, 11), Integer32()).setMaxAccess("readonly")
snIpAsPathAccessListTable = MibTable((1, 3, 6, 1, 4, 1, 1991, 1, 2, 2, 12), )
snIpAsPathAccessListEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1991, 1, 2, 2, 12, 1), ).setIndexNames((0, "FOUNDRY-SN-IP-MIB", "snIpAsPathAccessListIndex"), (0, "FOUNDRY-SN-IP-MIB", "snIpAsPathAccessListSequence"))
snIpAsPathAccessListIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 2, 12, 1, 1), Integer32()).setMaxAccess("readonly")
snIpAsPathAccessListSequence = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 2, 12, 1, 2), Integer32()).setMaxAccess("readonly")
snIpAsPathAccessListAction = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 2, 12, 1, 3), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1,)).clone(namedValues=NamedValues(("deny", 0), ("permit", 1),))).setMaxAccess("readwrite")
snIpAsPathAccessListRegExpression = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 2, 12, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0,256))).setMaxAccess("readwrite")
snIpAsPathAccessListRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 2, 12, 1, 5), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3, 4, 5,)).clone(namedValues=NamedValues(("invalid", 1), ("valid", 2), ("delete", 3), ("create", 4), ("modify", 5),))).setMaxAccess("readwrite")
snIpCommunityListTable = MibTable((1, 3, 6, 1, 4, 1, 1991, 1, 2, 2, 13), )
snIpCommunityListEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1991, 1, 2, 2, 13, 1), ).setIndexNames((0, "FOUNDRY-SN-IP-MIB", "snIpCommunityListIndex"), (0, "FOUNDRY-SN-IP-MIB", "snIpCommunityListSequence"))
snIpCommunityListIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 2, 13, 1, 1), Integer32()).setMaxAccess("readonly")
snIpCommunityListSequence = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 2, 13, 1, 2), Integer32()).setMaxAccess("readonly")
snIpCommunityListAction = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 2, 13, 1, 3), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1,)).clone(namedValues=NamedValues(("deny", 0), ("permit", 1),))).setMaxAccess("readwrite")
snIpCommunityListCommNum = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 2, 13, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0,80))).setMaxAccess("readwrite")
snIpCommunityListInternet = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 2, 13, 1, 5), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1,)).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1),))).setMaxAccess("readwrite")
snIpCommunityListNoAdvertise = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 2, 13, 1, 6), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1,)).clone(namedValues=NamedValues(("false", 0), ("true", 1),))).setMaxAccess("readwrite")
snIpCommunityListNoExport = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 2, 13, 1, 7), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1,)).clone(namedValues=NamedValues(("false", 0), ("true", 1),))).setMaxAccess("readwrite")
snIpCommunityListRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 2, 13, 1, 8), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3, 4, 5,)).clone(namedValues=NamedValues(("invalid", 1), ("valid", 2), ("delete", 3), ("create", 4), ("modify", 5),))).setMaxAccess("readwrite")
snIpCommunityListLocalAs = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 2, 13, 1, 9), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1,)).clone(namedValues=NamedValues(("false", 0), ("true", 1),))).setMaxAccess("readwrite")
snIpPrefixListTable = MibTable((1, 3, 6, 1, 4, 1, 1991, 1, 2, 2, 14), )
snIpPrefixListEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1991, 1, 2, 2, 14, 1), ).setIndexNames((0, "FOUNDRY-SN-IP-MIB", "snIpPrefixListName"), (0, "FOUNDRY-SN-IP-MIB", "snIpPrefixListSequence"))
snIpPrefixListName = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 2, 14, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0,32))).setMaxAccess("readonly")
snIpPrefixListSequence = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 2, 14, 1, 2), Integer32()).setMaxAccess("readonly")
snIpPrefixListDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 2, 14, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0,80))).setMaxAccess("readwrite")
snIpPrefixListAction = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 2, 14, 1, 4), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1,)).clone(namedValues=NamedValues(("deny", 0), ("permit", 1),))).setMaxAccess("readwrite")
snIpPrefixListAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 2, 14, 1, 5), IpAddress()).setMaxAccess("readwrite")
snIpPrefixListMask = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 2, 14, 1, 6), IpAddress()).setMaxAccess("readwrite")
snIpPrefixListGeValue = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 2, 14, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0,32))).setMaxAccess("readwrite")
snIpPrefixListLeValue = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 2, 14, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0,32))).setMaxAccess("readwrite")
snIpPrefixListRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 2, 14, 1, 9), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3, 4, 5,)).clone(namedValues=NamedValues(("invalid", 1), ("valid", 2), ("delete", 3), ("create", 4), ("modify", 5),))).setMaxAccess("readwrite")
snIpPrefixListLength = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 2, 14, 1, 10), Integer32()).setMaxAccess("readwrite")
snIpAsPathAccessListStringTable = MibTable((1, 3, 6, 1, 4, 1, 1991, 1, 2, 2, 16), )
snIpAsPathAccessListStringEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1991, 1, 2, 2, 16, 1), ).setIndexNames((0, "FOUNDRY-SN-IP-MIB", "snIpAsPathAccessListStringName"), (0, "FOUNDRY-SN-IP-MIB", "snIpAsPathAccessListStringSequence"))
snIpAsPathAccessListStringName = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 2, 16, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0,32))).setMaxAccess("readonly")
snIpAsPathAccessListStringSequence = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 2, 16, 1, 2), Integer32()).setMaxAccess("readonly")
snIpAsPathAccessListStringAction = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 2, 16, 1, 3), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1,)).clone(namedValues=NamedValues(("deny", 0), ("permit", 1),))).setMaxAccess("readwrite")
snIpAsPathAccessListStringRegExpression = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 2, 16, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0,256))).setMaxAccess("readwrite")
snIpAsPathAccessListStringRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 2, 16, 1, 5), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3, 4, 5,)).clone(namedValues=NamedValues(("invalid", 1), ("valid", 2), ("delete", 3), ("create", 4), ("modify", 5),))).setMaxAccess("readwrite")
snIpCommunityListStringTable = MibTable((1, 3, 6, 1, 4, 1, 1991, 1, 2, 2, 17), )
snIpCommunityListStringEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1991, 1, 2, 2, 17, 1), ).setIndexNames((0, "FOUNDRY-SN-IP-MIB", "snIpCommunityListStringName"), (0, "FOUNDRY-SN-IP-MIB", "snIpCommunityListStringSequence"))
snIpCommunityListStringName = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 2, 17, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0,32))).setMaxAccess("readonly")
snIpCommunityListStringSequence = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 2, 17, 1, 2), Integer32()).setMaxAccess("readonly")
snIpCommunityListStringAction = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 2, 17, 1, 3), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1,)).clone(namedValues=NamedValues(("deny", 0), ("permit", 1),))).setMaxAccess("readwrite")
snIpCommunityListStringCommNum = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 2, 17, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0,80))).setMaxAccess("readwrite")
snIpCommunityListStringInternet = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 2, 17, 1, 5), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1,)).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1),))).setMaxAccess("readwrite")
snIpCommunityListStringNoAdvertise = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 2, 17, 1, 6), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1,)).clone(namedValues=NamedValues(("false", 0), ("true", 1),))).setMaxAccess("readwrite")
snIpCommunityListStringNoExport = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 2, 17, 1, 7), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1,)).clone(namedValues=NamedValues(("false", 0), ("true", 1),))).setMaxAccess("readwrite")
snIpCommunityListStringRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 2, 17, 1, 8), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3, 4, 5,)).clone(namedValues=NamedValues(("invalid", 1), ("valid", 2), ("delete", 3), ("create", 4), ("modify", 5),))).setMaxAccess("readwrite")
snIpCommunityListStringLocalAs = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 2, 17, 1, 9), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1,)).clone(namedValues=NamedValues(("false", 0), ("true", 1),))).setMaxAccess("readwrite")
snIpCommunityListStringType = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 2, 17, 1, 10), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1,)).clone(namedValues=NamedValues(("standard", 0), ("extended", 1),))).setMaxAccess("readwrite")
snIpCommunityListStringRegExpr = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 2, 17, 1, 11), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0,255))).setMaxAccess("readwrite")
snRtIpRipGeneral = MibIdentifier((1, 3, 6, 1, 4, 1, 1991, 1, 2, 3, 1))
snRtIpRipEnable = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 2, 3, 1, 1), RtrStatus()).setMaxAccess("readwrite")
snRtIpRipUpdateTime = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 2, 3, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1,21845))).setMaxAccess("readwrite")
snRtIpRipRedisEnable = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 2, 3, 1, 3), RtrStatus()).setMaxAccess("readwrite")
snRtIpRipRedisDefMetric = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 2, 3, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1,15))).setMaxAccess("readwrite")
snRtIpRipSetAllPortConfig = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 2, 3, 1, 5), Integer32()).setMaxAccess("readwrite")
snRtIpRipGblFiltList = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 2, 3, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0,64))).setMaxAccess("readwrite")
snRtIpRipFiltOnAllPort = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 2, 3, 1, 7), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3, 4, 5,)).clone(namedValues=NamedValues(("valid", 1), ("deleteAllInBound", 2), ("deleteAllOutBound", 3), ("addAllInBound", 4), ("addAllOutBound", 5),))).setMaxAccess("readwrite")
snRtIpRipDistance = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 2, 3, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1,255))).setMaxAccess("readwrite")
snRtIpRipPortConfigTable = MibTable((1, 3, 6, 1, 4, 1, 1991, 1, 2, 3, 2), )
snRtIpRipPortConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1991, 1, 2, 3, 2, 1), ).setIndexNames((0, "FOUNDRY-SN-IP-MIB", "snRtIpRipPortConfigPortIndex"))
snRtIpRipPortConfigPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 3, 2, 1, 1), PortIndex()).setMaxAccess("readonly")
snRtIpRipPortVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 3, 2, 1, 2), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1, 2, 3,)).clone(namedValues=NamedValues(("disabled", 0), ("v1Only", 1), ("v2Only", 2), ("v1CompatibleV2", 3),))).setMaxAccess("readwrite")
snRtIpRipPortPoisonReverse = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 3, 2, 1, 3), RtrStatus()).setMaxAccess("readwrite")
snRtIpRipPortLearnDefault = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 3, 2, 1, 4), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1,)).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1),))).setMaxAccess("readwrite")
snRtIpRipRedisTable = MibTable((1, 3, 6, 1, 4, 1, 1991, 1, 2, 3, 3), )
snRtIpRipRedisEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1991, 1, 2, 3, 3, 1), ).setIndexNames((0, "FOUNDRY-SN-IP-MIB", "snRtIpRipRedisIndex"))
snRtIpRipRedisIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 3, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1,64))).setMaxAccess("readonly")
snRtIpRipRedisAction = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 3, 3, 1, 2), Action()).setMaxAccess("readwrite")
snRtIpRipRedisProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 3, 3, 1, 3), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3, 4, 5, 6, 7,)).clone(namedValues=NamedValues(("other", 1), ("all", 2), ("static", 3), ("ospf", 4), ("bgp", 5), ("isis", 6), ("connected", 7),))).setMaxAccess("readwrite")
snRtIpRipRedisIp = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 3, 3, 1, 4), IpAddress()).setMaxAccess("readwrite")
snRtIpRipRedisMask = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 3, 3, 1, 5), IpAddress()).setMaxAccess("readwrite")
snRtIpRipRedisMatchMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 3, 3, 1, 6), Metric()).setMaxAccess("readwrite")
snRtIpRipRedisSetMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 3, 3, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0,15))).setMaxAccess("readwrite")
snRtIpRipRedisRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 3, 3, 1, 8), RowSts()).setMaxAccess("readwrite")
snRtIpRipRedisRouteMapName = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 3, 3, 1, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0,32))).setMaxAccess("readwrite")
snRtIpRipRouteFilterTable = MibTable((1, 3, 6, 1, 4, 1, 1991, 1, 2, 3, 4), )
snRtIpRipRouteFilterEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1991, 1, 2, 3, 4, 1), ).setIndexNames((0, "FOUNDRY-SN-IP-MIB", "snRtIpRipRouteFilterId"))
snRtIpRipRouteFilterId = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 3, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1,64))).setMaxAccess("readonly")
snRtIpRipRouteFilterAction = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 3, 4, 1, 2), Action()).setMaxAccess("readwrite")
snRtIpRipRouteFilterIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 3, 4, 1, 3), IpAddress()).setMaxAccess("readwrite")
snRtIpRipRouteFilterSubnetMask = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 3, 4, 1, 4), IpAddress()).setMaxAccess("readwrite")
snRtIpRipRouteFilterRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 3, 4, 1, 5), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3, 4, 5,)).clone(namedValues=NamedValues(("invalid", 1), ("valid", 2), ("delete", 3), ("create", 4), ("modify", 5),))).setMaxAccess("readwrite")
snRtIpRipNbrFilterTable = MibTable((1, 3, 6, 1, 4, 1, 1991, 1, 2, 3, 5), )
snRtIpRipNbrFilterEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1991, 1, 2, 3, 5, 1), ).setIndexNames((0, "FOUNDRY-SN-IP-MIB", "snRtIpRipNbrFilterId"))
snRtIpRipNbrFilterId = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 3, 5, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1,64))).setMaxAccess("readonly")
snRtIpRipNbrFilterAction = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 3, 5, 1, 2), Action()).setMaxAccess("readwrite")
snRtIpRipNbrFilterSourceIp = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 3, 5, 1, 3), IpAddress()).setMaxAccess("readwrite")
snRtIpRipNbrFilterRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 3, 5, 1, 4), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3, 4, 5,)).clone(namedValues=NamedValues(("invalid", 1), ("valid", 2), ("delete", 3), ("create", 4), ("modify", 5),))).setMaxAccess("readwrite")
snRtIpRipPortAccessTable = MibTable((1, 3, 6, 1, 4, 1, 1991, 1, 2, 3, 6), )
snRtIpRipPortAccessEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1991, 1, 2, 3, 6, 1), ).setIndexNames((0, "FOUNDRY-SN-IP-MIB", "snRtIpRipPortAccessPort"), (0, "FOUNDRY-SN-IP-MIB", "snRtIpRipPortAccessDir"))
snRtIpRipPortAccessPort = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 3, 6, 1, 1), PortIndex()).setMaxAccess("readonly")
snRtIpRipPortAccessDir = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 3, 6, 1, 2), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2,)).clone(namedValues=NamedValues(("in", 1), ("out", 2),))).setMaxAccess("readonly")
snRtIpRipPortAccessFilterList = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 3, 6, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1,64))).setMaxAccess("readwrite")
snRtIpRipPortAccessRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 3, 6, 1, 4), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3, 4, 5,)).clone(namedValues=NamedValues(("invalid", 1), ("valid", 2), ("delete", 3), ("create", 4), ("modify", 5),))).setMaxAccess("readwrite")
snRtIpRipPortIfConfigTable = MibTable((1, 3, 6, 1, 4, 1, 1991, 1, 2, 3, 7), )
snRtIpRipPortIfConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1991, 1, 2, 3, 7, 1), ).setIndexNames((0, "FOUNDRY-SN-IP-MIB", "snRtIpRipPortIfConfigInterfaceIndex"))
snRtIpRipPortIfConfigInterfaceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 3, 7, 1, 1), InterfaceIndex()).setMaxAccess("readonly")
snRtIpRipPortIfVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 3, 7, 1, 2), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1, 2, 3,)).clone(namedValues=NamedValues(("disabled", 0), ("v1Only", 1), ("v2Only", 2), ("v1CompatibleV2", 3),))).setMaxAccess("readwrite")
snRtIpRipPortIfPoisonReverse = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 3, 7, 1, 3), RtrStatus()).setMaxAccess("readwrite")
snRtIpRipPortIfLearnDefault = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 3, 7, 1, 4), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1,)).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1),))).setMaxAccess("readwrite")
snRtIpRipPortIfAccessTable = MibTable((1, 3, 6, 1, 4, 1, 1991, 1, 2, 3, 8), )
snRtIpRipPortIfAccessEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1991, 1, 2, 3, 8, 1), ).setIndexNames((0, "FOUNDRY-SN-IP-MIB", "snRtIpRipPortIfAccessPort"), (0, "FOUNDRY-SN-IP-MIB", "snRtIpRipPortIfAccessDir"))
snRtIpRipPortIfAccessPort = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 3, 8, 1, 1), InterfaceIndex()).setMaxAccess("readonly")
snRtIpRipPortIfAccessDir = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 3, 8, 1, 2), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2,)).clone(namedValues=NamedValues(("in", 1), ("out", 2),))).setMaxAccess("readonly")
snRtIpRipPortIfAccessFilterList = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 3, 8, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1,64))).setMaxAccess("readwrite")
snRtIpRipPortIfAccessRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 3, 8, 1, 4), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3, 4, 5,)).clone(namedValues=NamedValues(("invalid", 1), ("valid", 2), ("delete", 3), ("create", 4), ("modify", 5),))).setMaxAccess("readwrite")
snRtIpRipStats = MibIdentifier((1, 3, 6, 1, 4, 1, 1991, 1, 2, 3, 9))
snRtIpRipStatsOutRequest = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 2, 3, 9, 1), Counter32()).setMaxAccess("readonly")
snRtIpRipStatsOutResponse = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 2, 3, 9, 2), Counter32()).setMaxAccess("readonly")
snRtIpRipStatsInRequest = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 2, 3, 9, 3), Counter32()).setMaxAccess("readonly")
snRtIpRipStatsInResponse = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 2, 3, 9, 4), Counter32()).setMaxAccess("readonly")
snRtIpRipStatsUnrecognized = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 2, 3, 9, 5), Counter32()).setMaxAccess("readonly")
snRtIpRipStatsBadVersion = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 2, 3, 9, 6), Counter32()).setMaxAccess("readonly")
snRtIpRipStatsBadAddrFamily = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 2, 3, 9, 7), Counter32()).setMaxAccess("readonly")
snRtIpRipStatsBadRequestFormat = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 2, 3, 9, 8), Counter32()).setMaxAccess("readonly")
snRtIpRipStatsBadMetrics = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 2, 3, 9, 9), Counter32()).setMaxAccess("readonly")
snRtIpRipStatsBadRespFormat = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 2, 3, 9, 10), Counter32()).setMaxAccess("readonly")
snRtIpRipStatsRespFromNonRipPort = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 2, 3, 9, 11), Counter32()).setMaxAccess("readonly")
snRtIpRipStatsResponseFromLoopback = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 2, 3, 9, 12), Counter32()).setMaxAccess("readonly")
snRtIpRipStatsPacketRejected = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 2, 3, 9, 13), Counter32()).setMaxAccess("readonly")
snDvmrpMIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 1991, 1, 2, 5, 1))
snDvmrpVersion = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 2, 5, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0,255))).setMaxAccess("readonly")
snDvmrpEnable = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 2, 5, 1, 2), RtrStatus().clone('disabled')).setMaxAccess("readwrite")
snDvmrpGenerationId = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 2, 5, 1, 3), Integer32()).setMaxAccess("readonly")
snDvmrpProbeInterval = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 2, 5, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(5,30)).clone(10)).setMaxAccess("readwrite")
snDvmrpReportInterval = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 2, 5, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(10,2000)).clone(60)).setMaxAccess("readwrite")
snDvmrpTriggerInterval = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 2, 5, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(5,30)).clone(5)).setMaxAccess("readwrite")
snDvmrpNeighborRouterTimeout = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 2, 5, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(60,8000)).clone(180)).setMaxAccess("readwrite")
snDvmrpRouteExpireTime = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 2, 5, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(20,4000)).clone(200)).setMaxAccess("readwrite")
snDvmrpRouteDiscardTime = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 2, 5, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(40,8000)).clone(340)).setMaxAccess("readwrite")
snDvmrpPruneAge = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 2, 5, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(20,3600)).clone(180)).setMaxAccess("readwrite")
snDvmrpGraftRetransmitTime = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 2, 5, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(5,3600)).clone(10)).setMaxAccess("readwrite")
snDvmrpDefaultRoute = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 2, 5, 1, 12), IpAddress()).setMaxAccess("readwrite")
snDvmrpVInterfaceTable = MibTable((1, 3, 6, 1, 4, 1, 1991, 1, 2, 5, 1, 13), )
snDvmrpVInterfaceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1991, 1, 2, 5, 1, 13, 1), ).setIndexNames((0, "FOUNDRY-SN-IP-MIB", "snDvmrpVInterfaceVifIndex"))
snDvmrpVInterfaceVifIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 5, 1, 13, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1,48))).setMaxAccess("readonly")
snDvmrpVInterfaceType = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 5, 1, 13, 1, 2), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3,)).clone(namedValues=NamedValues(("tunnel", 1), ("querier", 2), ("subnet", 3),))).setMaxAccess("readwrite")
snDvmrpVInterfaceOperState = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 5, 1, 13, 1, 3), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2,)).clone(namedValues=NamedValues(("up", 1), ("down", 2),))).setMaxAccess("readonly")
snDvmrpVInterfaceLocalAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 5, 1, 13, 1, 4), IpAddress()).setMaxAccess("readwrite")
snDvmrpVInterfaceRemoteAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 5, 1, 13, 1, 5), IpAddress()).setMaxAccess("readwrite")
snDvmrpVInterfaceRemoteSubnetMask = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 5, 1, 13, 1, 6), IpAddress()).setMaxAccess("readonly")
snDvmrpVInterfaceMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 5, 1, 13, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1,31)).clone(1)).setMaxAccess("readwrite")
snDvmrpVInterfaceTtlThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 5, 1, 13, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1,254)).clone(1)).setMaxAccess("readwrite")
snDvmrpVInterfaceAdvertiseLocal = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 5, 1, 13, 1, 9), RtrStatus().clone('enabled')).setMaxAccess("readwrite")
snDvmrpVInterfaceEncapsulation = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 5, 1, 13, 1, 10), RtrStatus().clone('disabled')).setMaxAccess("readwrite")
snDvmrpVInterfaceStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 5, 1, 13, 1, 11), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3, 4, 5,)).clone(namedValues=NamedValues(("invalid", 1), ("valid", 2), ("delete", 3), ("create", 4), ("modify", 5),))).setMaxAccess("readwrite")
snDvmrpNeighborTable = MibTable((1, 3, 6, 1, 4, 1, 1991, 1, 2, 5, 1, 14), )
snDvmrpNeighborEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1991, 1, 2, 5, 1, 14, 1), ).setIndexNames((0, "FOUNDRY-SN-IP-MIB", "snDvmrpNeighborEntryIndex"))
snDvmrpNeighborEntryIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 5, 1, 14, 1, 1), Integer32()).setMaxAccess("readonly")
snDvmrpNeighborVifIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 5, 1, 14, 1, 2), Integer32()).setMaxAccess("readonly")
snDvmrpNeighborAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 5, 1, 14, 1, 3), IpAddress()).setMaxAccess("readonly")
snDvmrpNeighborUpTime = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 5, 1, 14, 1, 4), TimeTicks()).setMaxAccess("readonly")
snDvmrpNeighborExpiryTime = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 5, 1, 14, 1, 5), TimeTicks()).setMaxAccess("readonly")
snDvmrpNeighborGenerationId = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 5, 1, 14, 1, 6), Integer32()).setMaxAccess("readonly")
snDvmrpNeighborMajorVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 5, 1, 14, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0,255))).setMaxAccess("readonly")
snDvmrpNeighborMinorVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 5, 1, 14, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0,255))).setMaxAccess("readonly")
snDvmrpNeighborCapabilities = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 5, 1, 14, 1, 9), Integer32()).setMaxAccess("readonly")
snDvmrpRouteTable = MibTable((1, 3, 6, 1, 4, 1, 1991, 1, 2, 5, 1, 15), )
snDvmrpRouteEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1991, 1, 2, 5, 1, 15, 1), ).setIndexNames((0, "FOUNDRY-SN-IP-MIB", "snDvmrpRouteEntryIndex"))
snDvmrpRouteEntryIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 5, 1, 15, 1, 1), Integer32()).setMaxAccess("readonly")
snDvmrpRouteSource = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 5, 1, 15, 1, 2), IpAddress()).setMaxAccess("readonly")
snDvmrpRouteSourceMask = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 5, 1, 15, 1, 3), IpAddress()).setMaxAccess("readonly")
snDvmrpRouteUpstreamNeighbor = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 5, 1, 15, 1, 4), IpAddress()).setMaxAccess("readonly")
snDvmrpRouteVifIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 5, 1, 15, 1, 5), Integer32()).setMaxAccess("readonly")
snDvmrpRouteMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 5, 1, 15, 1, 6), Integer32()).setMaxAccess("readonly")
snDvmrpRouteExpiryTime = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 5, 1, 15, 1, 7), TimeTicks()).setMaxAccess("readonly")
snDvmrpRouteNextHopTable = MibTable((1, 3, 6, 1, 4, 1, 1991, 1, 2, 5, 1, 16), )
snDvmrpRouteNextHopEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1991, 1, 2, 5, 1, 16, 1), ).setIndexNames((0, "FOUNDRY-SN-IP-MIB", "snDvmrpRouteNextHopSource"), (0, "FOUNDRY-SN-IP-MIB", "snDvmrpRouteNextHopSourceMask"), (0, "FOUNDRY-SN-IP-MIB", "snDvmrpRouteNextHopVifIndex"))
snDvmrpRouteNextHopSource = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 5, 1, 16, 1, 1), IpAddress()).setMaxAccess("readonly")
snDvmrpRouteNextHopSourceMask = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 5, 1, 16, 1, 2), IpAddress()).setMaxAccess("readonly")
snDvmrpRouteNextHopVifIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 5, 1, 16, 1, 3), Integer32()).setMaxAccess("readonly")
snDvmrpRouteNextHopType = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 5, 1, 16, 1, 4), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2,)).clone(namedValues=NamedValues(("leaf", 1), ("branch", 2),))).setMaxAccess("readonly")
snDvmrpVIfStatTable = MibTable((1, 3, 6, 1, 4, 1, 1991, 1, 2, 5, 1, 17), )
snDvmrpVIfStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1991, 1, 2, 5, 1, 17, 1), ).setIndexNames((0, "FOUNDRY-SN-IP-MIB", "snDvmrpVIfStatVifIndex"))
snDvmrpVIfStatVifIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 5, 1, 17, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1,65535))).setMaxAccess("readonly")
snDvmrpVIfStatInPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 5, 1, 17, 1, 2), Counter32()).setMaxAccess("readonly")
snDvmrpVIfStatOutPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 5, 1, 17, 1, 3), Counter32()).setMaxAccess("readonly")
snDvmrpVIfStatInOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 5, 1, 17, 1, 4), Counter32()).setMaxAccess("readonly")
snDvmrpVIfStatOutOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 5, 1, 17, 1, 5), Counter32()).setMaxAccess("readonly")
snDvmrpVIfStatInProbePkts = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 5, 1, 17, 1, 6), Counter32()).setMaxAccess("readonly")
snDvmrpVIfStatOutProbePkts = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 5, 1, 17, 1, 7), Counter32()).setMaxAccess("readonly")
snDvmrpVIfStatDiscardProbePkts = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 5, 1, 17, 1, 8), Counter32()).setMaxAccess("readonly")
snDvmrpVIfStatInRtUpdatePkts = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 5, 1, 17, 1, 9), Counter32()).setMaxAccess("readonly")
snDvmrpVIfStatOutRtUpdatePkts = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 5, 1, 17, 1, 10), Counter32()).setMaxAccess("readonly")
snDvmrpVIfStatDiscardRtUpdatePkts = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 5, 1, 17, 1, 11), Counter32()).setMaxAccess("readonly")
snDvmrpVIfStatInGraftPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 5, 1, 17, 1, 12), Counter32()).setMaxAccess("readonly")
snDvmrpVIfStatOutGraftPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 5, 1, 17, 1, 13), Counter32()).setMaxAccess("readonly")
snDvmrpVIfStatDiscardGraftPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 5, 1, 17, 1, 14), Counter32()).setMaxAccess("readonly")
snDvmrpVIfStatInGraftAckPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 5, 1, 17, 1, 15), Counter32()).setMaxAccess("readonly")
snDvmrpVIfStatOutGraftAckPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 5, 1, 17, 1, 16), Counter32()).setMaxAccess("readonly")
snDvmrpVIfStatDiscardGraftAckPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 5, 1, 17, 1, 17), Counter32()).setMaxAccess("readonly")
snDvmrpVIfStatInPrunePkts = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 5, 1, 17, 1, 18), Counter32()).setMaxAccess("readonly")
snDvmrpVIfStatOutPrunePkts = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 5, 1, 17, 1, 19), Counter32()).setMaxAccess("readonly")
snDvmrpVIfStatDiscardPrunePkts = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 5, 1, 17, 1, 20), Counter32()).setMaxAccess("readonly")
snFsrpGlobal = MibIdentifier((1, 3, 6, 1, 4, 1, 1991, 1, 2, 7, 1))
snFsrpIntf = MibIdentifier((1, 3, 6, 1, 4, 1, 1991, 1, 2, 7, 2))
snFsrpGroupOperMode = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 2, 7, 1, 1), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1,)).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1),))).setMaxAccess("readwrite")
snFsrpIfStateChangeTrap = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 2, 7, 1, 2), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1,)).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1),)).clone('enabled')).setMaxAccess("readwrite")
snFsrpIfTable = MibTable((1, 3, 6, 1, 4, 1, 1991, 1, 2, 7, 2, 1), )
snFsrpIfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1991, 1, 2, 7, 2, 1, 1), ).setIndexNames((0, "FOUNDRY-SN-IP-MIB", "snFsrpIfPort"), (0, "FOUNDRY-SN-IP-MIB", "snFsrpIfIpAddress"))
snFsrpIfPort = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 7, 2, 1, 1, 1), Integer32()).setMaxAccess("readonly")
snFsrpIfIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 7, 2, 1, 1, 2), IpAddress()).setMaxAccess("readonly")
snFsrpIfVirRtrIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 7, 2, 1, 1, 3), IpAddress()).setMaxAccess("readwrite")
snFsrpIfOtherRtrIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 7, 2, 1, 1, 4), IpAddress()).setMaxAccess("readwrite")
snFsrpIfPreferLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 7, 2, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1,255)).clone(100)).setMaxAccess("readwrite")
snFsrpIfTrackPortMask = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 7, 2, 1, 1, 6), PortMask()).setMaxAccess("readwrite")
snFsrpIfRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 7, 2, 1, 1, 7), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3, 4, 5,)).clone(namedValues=NamedValues(("invalid", 1), ("valid", 2), ("delete", 3), ("create", 4), ("modify", 5),))).setMaxAccess("readwrite")
snFsrpIfState = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 7, 2, 1, 1, 8), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1, 2, 3,)).clone(namedValues=NamedValues(("init", 0), ("negotiating", 1), ("standby", 2), ("active", 3),))).setMaxAccess("readonly")
snFsrpIfKeepAliveTime = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 7, 2, 1, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1,120)).clone(3)).setMaxAccess("readwrite")
snFsrpIfRouterDeadTime = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 7, 2, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(3,255)).clone(9)).setMaxAccess("readwrite")
snFsrpIfChassisTrackPortMask = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 7, 2, 1, 1, 11), OctetString().subtype(subtypeSpec=ValueSizeConstraint(32,32)).setFixedLength(32)).setMaxAccess("readwrite")
snFsrpIfTrackPortList = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 7, 2, 1, 1, 12), OctetString()).setMaxAccess("readwrite")
snPimMIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 1991, 1, 2, 9, 1))
snPimSMMIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 1991, 1, 2, 9, 2))
snPimEnable = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 2, 9, 1, 1), RtrStatus().clone('disabled')).setMaxAccess("readwrite")
snPimNeighborRouterTimeout = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 2, 9, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(60,8000)).clone(180)).setMaxAccess("readwrite")
snPimHelloTime = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 2, 9, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(10,3600)).clone(60)).setMaxAccess("readwrite")
snPimPruneTime = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 2, 9, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(10,3600)).clone(60)).setMaxAccess("readwrite")
snPimGraftRetransmitTime = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 2, 9, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(10,3600)).clone(180)).setMaxAccess("readwrite")
snPimInactivityTime = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 2, 9, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(10,3600)).clone(180)).setMaxAccess("readwrite")
snPimVInterfaceTable = MibTable((1, 3, 6, 1, 4, 1, 1991, 1, 2, 9, 1, 7), )
snPimVInterfaceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1991, 1, 2, 9, 1, 7, 1), ).setIndexNames((0, "FOUNDRY-SN-IP-MIB", "snPimVInterfaceVifIndex"))
snPimVInterfaceVifIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 9, 1, 7, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1,48))).setMaxAccess("readonly")
snPimVInterfaceType = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 9, 1, 7, 1, 2), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2,)).clone(namedValues=NamedValues(("tunnel", 1), ("subnet", 2),))).setMaxAccess("readwrite")
snPimVInterfaceLocalAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 9, 1, 7, 1, 3), IpAddress()).setMaxAccess("readwrite")
snPimVInterfaceLocalSubnetMask = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 9, 1, 7, 1, 4), IpAddress()).setMaxAccess("readonly")
snPimVInterfaceRemoteAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 9, 1, 7, 1, 5), IpAddress()).setMaxAccess("readwrite")
snPimVInterfaceDR = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 9, 1, 7, 1, 6), IpAddress()).setMaxAccess("readonly")
snPimVInterfaceTtlThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 9, 1, 7, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1,31)).clone(1)).setMaxAccess("readwrite")
snPimVInterfaceStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 9, 1, 7, 1, 8), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3, 4, 5,)).clone(namedValues=NamedValues(("invalid", 1), ("valid", 2), ("delete", 3), ("create", 4), ("modify", 5),))).setMaxAccess("readwrite")
snPimVInterfaceMode = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 9, 1, 7, 1, 9), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2,)).clone(namedValues=NamedValues(("dense", 1), ("sparse", 2),)).clone('dense')).setMaxAccess("readwrite")
snPimNeighborTable = MibTable((1, 3, 6, 1, 4, 1, 1991, 1, 2, 9, 1, 8), )
snPimNeighborEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1991, 1, 2, 9, 1, 8, 1), ).setIndexNames((0, "FOUNDRY-SN-IP-MIB", "snPimNeighborEntryIndex"))
snPimNeighborEntryIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 9, 1, 8, 1, 1), Integer32()).setMaxAccess("readonly")
snPimNeighborVifIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 9, 1, 8, 1, 2), Integer32()).setMaxAccess("readonly")
snPimNeighborAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 9, 1, 8, 1, 3), IpAddress()).setMaxAccess("readonly")
snPimNeighborUpTime = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 9, 1, 8, 1, 4), TimeTicks()).setMaxAccess("readonly")
snPimNeighborExpiryTime = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 9, 1, 8, 1, 5), TimeTicks()).setMaxAccess("readonly")
snPimVIfStatTable = MibTable((1, 3, 6, 1, 4, 1, 1991, 1, 2, 9, 1, 9), )
snPimVIfStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1991, 1, 2, 9, 1, 9, 1), ).setIndexNames((0, "FOUNDRY-SN-IP-MIB", "snPimVIfStatVifIndex"))
snPimVIfStatVifIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 9, 1, 9, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1,32))).setMaxAccess("readonly")
snPimVIfStatInJoinPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 9, 1, 9, 1, 2), Counter32()).setMaxAccess("readonly")
snPimVIfStatOutJoinPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 9, 1, 9, 1, 3), Counter32()).setMaxAccess("readonly")
snPimVIfStatDiscardJoinPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 9, 1, 9, 1, 4), Counter32()).setMaxAccess("readonly")
snPimVIfStatInPrunePkts = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 9, 1, 9, 1, 5), Counter32()).setMaxAccess("readonly")
snPimVIfStatOutPrunePkts = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 9, 1, 9, 1, 6), Counter32()).setMaxAccess("readonly")
snPimVIfStatDiscardPrunePkts = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 9, 1, 9, 1, 7), Counter32()).setMaxAccess("readonly")
snPimVIfStatInAssertPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 9, 1, 9, 1, 8), Counter32()).setMaxAccess("readonly")
snPimVIfStatOutAssertPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 9, 1, 9, 1, 9), Counter32()).setMaxAccess("readonly")
snPimVIfStatDiscardAssertPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 9, 1, 9, 1, 10), Counter32()).setMaxAccess("readonly")
snPimVIfStatInHelloPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 9, 1, 9, 1, 11), Counter32()).setMaxAccess("readonly")
snPimVIfStatOutHelloPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 9, 1, 9, 1, 12), Counter32()).setMaxAccess("readonly")
snPimVIfStatDiscardHelloPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 9, 1, 9, 1, 13), Counter32()).setMaxAccess("readonly")
snPimVIfStatInGraftPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 9, 1, 9, 1, 14), Counter32()).setMaxAccess("readonly")
snPimVIfStatOutGraftPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 9, 1, 9, 1, 15), Counter32()).setMaxAccess("readonly")
snPimVIfStatDiscardGraftPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 9, 1, 9, 1, 16), Counter32()).setMaxAccess("readonly")
snPimVIfStatInGraftAckPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 9, 1, 9, 1, 17), Counter32()).setMaxAccess("readonly")
snPimVIfStatOutGraftAckPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 9, 1, 9, 1, 18), Counter32()).setMaxAccess("readonly")
snPimVIfStatDiscardGraftAckPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 9, 1, 9, 1, 19), Counter32()).setMaxAccess("readonly")
snPimJoinPruneInterval = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 2, 9, 2, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(10,3600))).setMaxAccess("readwrite")
snPimCandidateBSRTable = MibTable((1, 3, 6, 1, 4, 1, 1991, 1, 2, 9, 2, 2), )
snPimCandidateBSREntry = MibTableRow((1, 3, 6, 1, 4, 1, 1991, 1, 2, 9, 2, 2, 1), ).setIndexNames((0, "FOUNDRY-SN-IP-MIB", "snPimCandidateBSRPortID"))
snPimCandidateBSRPortID = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 9, 2, 2, 1, 1), Integer32()).setMaxAccess("readwrite")
snPimCandidateBSRIPAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 9, 2, 2, 1, 2), IpAddress()).setMaxAccess("readonly")
snPimCandidateBSRHashMaskLen = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 9, 2, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1,32))).setMaxAccess("readwrite")
snPimCandidateBSRPreference = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 9, 2, 2, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0,255)).clone(100)).setMaxAccess("readwrite")
snPimRPSetTable = MibTable((1, 3, 6, 1, 4, 1, 1991, 1, 2, 9, 2, 3), )
snPimRPSetEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1991, 1, 2, 9, 2, 3, 1), ).setIndexNames((0, "FOUNDRY-SN-IP-MIB", "snPimRPSetGroupAddress"), (0, "FOUNDRY-SN-IP-MIB", "snPimRPSetMask"), (0, "FOUNDRY-SN-IP-MIB", "snPimRPSetIPAddress"))
snPimRPSetGroupAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 9, 2, 3, 1, 1), IpAddress()).setMaxAccess("readonly")
snPimRPSetMask = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 9, 2, 3, 1, 2), IpAddress()).setMaxAccess("readonly")
snPimRPSetIPAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 9, 2, 3, 1, 3), IpAddress()).setMaxAccess("readonly")
snPimRPSetHoldTime = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 9, 2, 3, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0,255))).setMaxAccess("readonly")
snPimCandidateRPTable = MibTable((1, 3, 6, 1, 4, 1, 1991, 1, 2, 9, 2, 4), )
snPimCandidateRPEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1991, 1, 2, 9, 2, 4, 1), ).setIndexNames((0, "FOUNDRY-SN-IP-MIB", "snPimCandidateRPGroupAddress"), (0, "FOUNDRY-SN-IP-MIB", "snPimCandidateRPMask"))
snPimCandidateRPGroupAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 9, 2, 4, 1, 1), IpAddress()).setMaxAccess("readonly")
snPimCandidateRPMask = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 9, 2, 4, 1, 2), IpAddress()).setMaxAccess("readonly")
snPimCandidateRPIPAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 9, 2, 4, 1, 3), IpAddress()).setMaxAccess("readwrite")
snPimCandidateRPRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 9, 2, 4, 1, 4), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1, 2, 3, 4, 5,)).clone(namedValues=NamedValues(("noSuch", 0), ("other", 1), ("valid", 2), ("delete", 3), ("create", 4), ("modify", 5),))).setMaxAccess("readwrite")
snLoopbackIntfConfigTable = MibTable((1, 3, 6, 1, 4, 1, 1991, 1, 2, 13, 1), )
snLoopbackIntfConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1991, 1, 2, 13, 1, 1), ).setIndexNames((0, "FOUNDRY-SN-IP-MIB", "snLoopbackIntfConfigPortIndex"))
snLoopbackIntfConfigPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 13, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1,8))).setMaxAccess("readonly")
snLoopbackIntfMode = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 13, 1, 1, 2), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1,)).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1),))).setMaxAccess("readwrite")
snLoopbackIntfRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 13, 1, 1, 3), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3, 4, 5,)).clone(namedValues=NamedValues(("invalid", 1), ("valid", 2), ("delete", 3), ("create", 4), ("modify", 5),))).setMaxAccess("readwrite")
mibBuilder.exportSymbols("FOUNDRY-SN-IP-MIB", PYSNMP_MODULE_ID=snIp, snIp=snIp, snIpAsPathAccessListRowStatus=snIpAsPathAccessListRowStatus, snRtBcastFwd=snRtBcastFwd, snDvmrpGenerationId=snDvmrpGenerationId, snRtIpPortIfAccessFilters=snRtIpPortIfAccessFilters, snRtIpRipRouteFilterTable=snRtIpRipRouteFilterTable, snFsrpIfRouterDeadTime=snFsrpIfRouterDeadTime, snRtIpPortAccessFilters=snRtIpPortAccessFilters, snRtIpFwdCacheMaxEntries=snRtIpFwdCacheMaxEntries, RtrStatus=RtrStatus, snDvmrpVInterfaceRemoteSubnetMask=snDvmrpVInterfaceRemoteSubnetMask, snGblRtGeneral=snGblRtGeneral, snPimVIfStatInHelloPkts=snPimVIfStatInHelloPkts, snPimCandidateBSRPortID=snPimCandidateBSRPortID, snPimCandidateBSRPreference=snPimCandidateBSRPreference, snRtIpLoadShareNumOfPaths=snRtIpLoadShareNumOfPaths, snRtIpFilterEntry=snRtIpFilterEntry, snPimNeighborVifIndex=snPimNeighborVifIndex, Action=Action, snIpPrefixListTable=snIpPrefixListTable, RowSts=RowSts, snDvmrpRouteNextHopEntry=snDvmrpRouteNextHopEntry, snRtIpPortAddress=snRtIpPortAddress, snIpPrefixListLength=snIpPrefixListLength, snRtIpRipNbrFilterSourceIp=snRtIpRipNbrFilterSourceIp, snRtIpDirBcastFwd=snRtIpDirBcastFwd, snDvmrpVInterfaceEntry=snDvmrpVInterfaceEntry, snPimRPSetHoldTime=snPimRPSetHoldTime, snPimVInterfaceTable=snPimVInterfaceTable, snRtIpPortIfSubnetMask=snRtIpPortIfSubnetMask, snRtIpLoadShare=snRtIpLoadShare, snRtIpPortAddrTable=snRtIpPortAddrTable, snRtIpRipPortLearnDefault=snRtIpRipPortLearnDefault, snPimVIfStatDiscardHelloPkts=snPimVIfStatDiscardHelloPkts, snRtIpFwdCacheEntry=snRtIpFwdCacheEntry, snRtIpPortMtu=snRtIpPortMtu, snPimCandidateBSREntry=snPimCandidateBSREntry, agIpPortCounterRxPacket=agIpPortCounterRxPacket, snRtUdpBcastFwdPortEntry=snRtUdpBcastFwdPortEntry, snRtIpMaxStaticRouteEntries=snRtIpMaxStaticRouteEntries, snRtIpRipStatsBadRespFormat=snRtIpRipStatsBadRespFormat, snPimVInterfaceDR=snPimVInterfaceDR, snFsrpIfRowStatus=snFsrpIfRowStatus, snRtIpFilterIndex=snRtIpFilterIndex, snDvmrpVIfStatOutGraftAckPkts=snDvmrpVIfStatOutGraftAckPkts, snDvmrpVInterfaceAdvertiseLocal=snDvmrpVInterfaceAdvertiseLocal, snRtStaticArpIp=snRtStaticArpIp, snLoopbackIntfConfigEntry=snLoopbackIntfConfigEntry, snRtUdpIfHelperAddr=snRtUdpIfHelperAddr, snRtIpTraceRouteResultAddr=snRtIpTraceRouteResultAddr, snPimNeighborEntry=snPimNeighborEntry, snIpCommunityListStringNoExport=snIpCommunityListStringNoExport, snRtIpRipRouteFilterSubnetMask=snRtIpRipRouteFilterSubnetMask, agIpPortCounterTable=agIpPortCounterTable, snPimCandidateBSRIPAddress=snPimCandidateBSRIPAddress, snRtUdpBcastFwdPortIndex=snRtUdpBcastFwdPortIndex, snRtIpRipPortIfAccessPort=snRtIpRipPortIfAccessPort, snGblRtRouteOnly=snGblRtRouteOnly, snPimVInterfaceLocalSubnetMask=snPimVInterfaceLocalSubnetMask, snIpCommunityListStringName=snIpCommunityListStringName, snDvmrpVIfStatInOctets=snDvmrpVIfStatInOctets, snIpCommunityListCommNum=snIpCommunityListCommNum, snDvmrpNeighborEntryIndex=snDvmrpNeighborEntryIndex, snIpCommunityListNoExport=snIpCommunityListNoExport, snRtIpPortAccessDirection=snRtIpPortAccessDirection, snRtIpPortDirBcastFwd=snRtIpPortDirBcastFwd, snDvmrpNeighborCapabilities=snDvmrpNeighborCapabilities, snPimCandidateRPEntry=snPimCandidateRPEntry, snRtArpAge=snRtArpAge, snRtUdpHelperIndex=snRtUdpHelperIndex, snDvmrpVIfStatDiscardProbePkts=snDvmrpVIfStatDiscardProbePkts, snRtIpTraceRouteControl=snRtIpTraceRouteControl, snRtIpRipRedisSetMetric=snRtIpRipRedisSetMetric, snDvmrpVIfStatDiscardGraftPkts=snDvmrpVIfStatDiscardGraftPkts, snRtUdpHelperTable=snRtUdpHelperTable, snRtIpRipRedisRowStatus=snRtIpRipRedisRowStatus, snIpCommunityListIndex=snIpCommunityListIndex, snRtIpLoadShareMaxPaths=snRtIpLoadShareMaxPaths, snPimVInterfaceLocalAddress=snPimVInterfaceLocalAddress, snPimCandidateRPTable=snPimCandidateRPTable, snIpCommunityListStringRowStatus=snIpCommunityListStringRowStatus, snRtIpPortIfAddrType=snRtIpPortIfAddrType, snRtIpPortRowStatus=snRtIpPortRowStatus, snRtIpRipRedisProtocol=snRtIpRipRedisProtocol, snFsrpIfPreferLevel=snFsrpIfPreferLevel, snRtIpRipPortIfAccessDir=snRtIpRipPortIfAccessDir, snPimCandidateBSRHashMaskLen=snPimCandidateBSRHashMaskLen, snDvmrpVIfStatOutGraftPkts=snDvmrpVIfStatOutGraftPkts, snIpCommunityListStringNoAdvertise=snIpCommunityListStringNoAdvertise, snRtUdpIfHelperPortIndex=snRtUdpIfHelperPortIndex, snRtIpStaticRouteDest=snRtIpStaticRouteDest, snDvmrpVInterfaceMetric=snDvmrpVInterfaceMetric, snDvmrpRouteExpireTime=snDvmrpRouteExpireTime, snDvmrpVIfStatInGraftPkts=snDvmrpVIfStatInGraftPkts, snPimGraftRetransmitTime=snPimGraftRetransmitTime, snRtUdpBroadcastFwdPortTable=snRtUdpBroadcastFwdPortTable, snRtIpRipStatsBadVersion=snRtIpRipStatsBadVersion, snDvmrpVInterfaceOperState=snDvmrpVInterfaceOperState, snPimVInterfaceStatus=snPimVInterfaceStatus, snPimVIfStatDiscardJoinPkts=snPimVIfStatDiscardJoinPkts, snIpAsPathAccessListSequence=snIpAsPathAccessListSequence, snIpCommunityListTable=snIpCommunityListTable, snPimRPSetTable=snPimRPSetTable, snRtBcastFwdGeneral=snRtBcastFwdGeneral, snRtIpTraceRouteResult=snRtIpTraceRouteResult, snRtIpRipPortAccessRowStatus=snRtIpRipPortAccessRowStatus, snDvmrpVInterfaceLocalAddress=snDvmrpVInterfaceLocalAddress, snDvmrpRouteNextHopSource=snDvmrpRouteNextHopSource, snIpAsPathAccessListTable=snIpAsPathAccessListTable, snIpCommunityListStringAction=snIpCommunityListStringAction, snRtIpRipStatsPacketRejected=snRtIpRipStatsPacketRejected, snRtIpFilterQosPriority=snRtIpFilterQosPriority, snRtIpRipStatsResponseFromLoopback=snRtIpRipStatsResponseFromLoopback, snIpCommunityListStringTable=snIpCommunityListStringTable, agIpPortCounterTxPacket=agIpPortCounterTxPacket, snRtStaticArpRowStatus=snRtStaticArpRowStatus, snIpCommunityListNoAdvertise=snIpCommunityListNoAdvertise, snRtIpRipNbrFilterAction=snRtIpRipNbrFilterAction, snPimNeighborUpTime=snPimNeighborUpTime, snRtIpFilterOperand=snRtIpFilterOperand, snFsrpIfState=snFsrpIfState, snDvmrpVInterfaceVifIndex=snDvmrpVInterfaceVifIndex, snRtIpRipPortIfAccessEntry=snRtIpRipPortIfAccessEntry, snRtUdpIfHelperAddrType=snRtUdpIfHelperAddrType, snRtIpRipRedisDefMetric=snRtIpRipRedisDefMetric, snDvmrpVIfStatOutRtUpdatePkts=snDvmrpVIfStatOutRtUpdatePkts, snDvmrpVIfStatInGraftAckPkts=snDvmrpVIfStatInGraftAckPkts, snRtUdpBroadcastFwdPortRowStatus=snRtUdpBroadcastFwdPortRowStatus, snRtIpFwdCacheNextHopIp=snRtIpFwdCacheNextHopIp, snIpCommunityListEntry=snIpCommunityListEntry, snRtIpPortIfAccessTable=snRtIpPortIfAccessTable, snRtIpFilterOperator=snRtIpFilterOperator, snPimVIfStatOutJoinPkts=snPimVIfStatOutJoinPkts, snRtIpPortIfMtu=snRtIpPortIfMtu, snDvmrpNeighborVifIndex=snDvmrpNeighborVifIndex, snRtClearIpRoute=snRtClearIpRoute, snDvmrpReportInterval=snDvmrpReportInterval, snRtIpRipStatsOutRequest=snRtIpRipStatsOutRequest, snIpAsPathAccessListEntry=snIpAsPathAccessListEntry, snRtIpRarp=snRtIpRarp, snPimEnable=snPimEnable, snRtIpRipRouteFilterIpAddr=snRtIpRipRouteFilterIpAddr, snDvmrpNeighborUpTime=snDvmrpNeighborUpTime, snIpCommunityListStringInternet=snIpCommunityListStringInternet, snRtIpPortSubnetMask=snRtIpPortSubnetMask, snPimNeighborEntryIndex=snPimNeighborEntryIndex, snIpPrefixListDesc=snIpPrefixListDesc, snRtClearArpCache=snRtClearArpCache, snRtIpRipStatsInResponse=snRtIpRipStatsInResponse, snIpPrefixListLeValue=snIpPrefixListLeValue, snPimRPSetIPAddress=snPimRPSetIPAddress, snDvmrpVIfStatInRtUpdatePkts=snDvmrpVIfStatInRtUpdatePkts, snPimVIfStatOutPrunePkts=snPimVIfStatOutPrunePkts, snIpAsPathAccessListStringSequence=snIpAsPathAccessListStringSequence, agIpPortCounterTxOctet=agIpPortCounterTxOctet, snRtIpRarpIndex=snRtIpRarpIndex, snRtIpRipPortAccessDir=snRtIpRipPortAccessDir, snRtIpRipEnable=snRtIpRipEnable, snRtIpFilterAction=snRtIpFilterAction, snLoopbackIntfRowStatus=snLoopbackIntfRowStatus, snRtIpRipPortAccessTable=snRtIpRipPortAccessTable, snRtIpPortAccessEntry=snRtIpPortAccessEntry, snDvmrpVIfStatEntry=snDvmrpVIfStatEntry, snRtIpStaticRouteEntry=snRtIpStaticRouteEntry, snRtIpRipStatsBadAddrFamily=snRtIpRipStatsBadAddrFamily, snLoopbackIntfMode=snLoopbackIntfMode, snRtIpPortMetric=snRtIpPortMetric, snFsrpIfKeepAliveTime=snFsrpIfKeepAliveTime, snIpAsPathAccessListRegExpression=snIpAsPathAccessListRegExpression, snRtIpFwdCacheFragCheck=snRtIpFwdCacheFragCheck, snDvmrpNeighborRouterTimeout=snDvmrpNeighborRouterTimeout, snRtIpPortIfConfigTable=snRtIpPortIfConfigTable, snDvmrpMIBObjects=snDvmrpMIBObjects, snRtIpRipPortIfVersion=snRtIpRipPortIfVersion, snFsrpIntf=snFsrpIntf, snRtClearIpCache=snRtClearIpCache, snDvmrpTriggerInterval=snDvmrpTriggerInterval, snRtIpRarpMac=snRtIpRarpMac, snIpPrefixListAction=snIpPrefixListAction, snIpAsPathAccessListAction=snIpAsPathAccessListAction, snRtIpRipSetAllPortConfig=snRtIpRipSetAllPortConfig, snRtIpFwdCacheType=snRtIpFwdCacheType, snRtIpRipPortIfAccessRowStatus=snRtIpRipPortIfAccessRowStatus, snIpPrefixListRowStatus=snIpPrefixListRowStatus, snRtIpTraceRouteTargetAddr=snRtIpTraceRouteTargetAddr, snRtIpRipRedisIp=snRtIpRipRedisIp, snRtIpPortIfConfigEntry=snRtIpPortIfConfigEntry, snRtIpRipStatsRespFromNonRipPort=snRtIpRipStatsRespFromNonRipPort, snRtIpRipPortAccessEntry=snRtIpRipPortAccessEntry, snIpCommunityListStringSequence=snIpCommunityListStringSequence, snIpAsPathAccessListStringEntry=snIpAsPathAccessListStringEntry, snDvmrpEnable=snDvmrpEnable, snDvmrpNeighborExpiryTime=snDvmrpNeighborExpiryTime, snDvmrpVIfStatInProbePkts=snDvmrpVIfStatInProbePkts, snDvmrpRouteVifIndex=snDvmrpRouteVifIndex, snRtIpPortConfigEntry=snRtIpPortConfigEntry, snRtIpStaticRouteDistance=snRtIpStaticRouteDistance, snFsrpGroupOperMode=snFsrpGroupOperMode, snRtIpPortConfigPortIndex=snRtIpPortConfigPortIndex, snFsrpIfTrackPortMask=snFsrpIfTrackPortMask, snDvmrpRouteEntry=snDvmrpRouteEntry, snPimNeighborRouterTimeout=snPimNeighborRouterTimeout, snPimVIfStatDiscardGraftPkts=snPimVIfStatDiscardGraftPkts, snRtUdpHelper=snRtUdpHelper, snPimVInterfaceMode=snPimVInterfaceMode, snRtIpFwdCacheOutgoingPort=snRtIpFwdCacheOutgoingPort, snRtIpTraceRouteTimeOut=snRtIpTraceRouteTimeOut, agIpPortCounterRxOctet=agIpPortCounterRxOctet, snDvmrpRouteTable=snDvmrpRouteTable, snDvmrpVInterfaceEncapsulation=snDvmrpVInterfaceEncapsulation, snIpCommunityListStringCommNum=snIpCommunityListStringCommNum, snRtUdpHelperRowStatus=snRtUdpHelperRowStatus, snRtIpTraceRouteResultRoundTripTime1=snRtIpTraceRouteResultRoundTripTime1, snPimVIfStatDiscardAssertPkts=snPimVIfStatDiscardAssertPkts, snIpCommunityListSequence=snIpCommunityListSequence, snRtUdpHelperAddr=snRtUdpHelperAddr, snRtIpRipPortIfPoisonReverse=snRtIpRipPortIfPoisonReverse, snRtIpLoadShareMinPaths=snRtIpLoadShareMinPaths, snRtUdpBcastFwdPortNumber=snRtUdpBcastFwdPortNumber, snLoopbackIntfConfigTable=snLoopbackIntfConfigTable, snRtIpFwdCacheIndex=snRtIpFwdCacheIndex, snIpCommunityListStringRegExpr=snIpCommunityListStringRegExpr, snRtUdpBroadcastFwdPortNumber=snRtUdpBroadcastFwdPortNumber, snRtIpRipNbrFilterRowStatus=snRtIpRipNbrFilterRowStatus, snDvmrpVIfStatTable=snDvmrpVIfStatTable, snRtIpFilterDestIp=snRtIpFilterDestIp, snRtIpGeneral=snRtIpGeneral, snDvmrpVIfStatVifIndex=snDvmrpVIfStatVifIndex, snDvmrpVInterfaceTable=snDvmrpVInterfaceTable, snRtIpTraceRouteMinTtl=snRtIpTraceRouteMinTtl, snDvmrpVIfStatOutPrunePkts=snDvmrpVIfStatOutPrunePkts, snPimSMMIBObjects=snPimSMMIBObjects, snFsrpIfPort=snFsrpIfPort, snRtUdpBcastFwdEnable=snRtUdpBcastFwdEnable, snDvmrpGraftRetransmitTime=snDvmrpGraftRetransmitTime, snPimInactivityTime=snPimInactivityTime, snFsrpGlobal=snFsrpGlobal, snPimVIfStatInJoinPkts=snPimVIfStatInJoinPkts, snPimVIfStatInPrunePkts=snPimVIfStatInPrunePkts, snDvmrpRouteMetric=snDvmrpRouteMetric, snIpAsPathAccessListIndex=snIpAsPathAccessListIndex, snRtIpPortIfDirBcastFwd=snRtIpPortIfDirBcastFwd, snPimHelloTime=snPimHelloTime, snRtIpRarpIp=snRtIpRarpIp, snRtIpPortAccessRowStatus=snRtIpPortAccessRowStatus, snRtIpFilterTable=snRtIpFilterTable, snRtIpRipGblFiltList=snRtIpRipGblFiltList, snRtIpStaticRouteMetric=snRtIpStaticRouteMetric, snPimMIBObjects=snPimMIBObjects, snDvmrpVIfStatOutOctets=snDvmrpVIfStatOutOctets, snIpPrefixListSequence=snIpPrefixListSequence, snDvmrpVIfStatDiscardRtUpdatePkts=snDvmrpVIfStatDiscardRtUpdatePkts, agIpPortCounterIpVersion=agIpPortCounterIpVersion)
mibBuilder.exportSymbols("FOUNDRY-SN-IP-MIB", snFsrpIfTrackPortList=snFsrpIfTrackPortList, snRtUdpBcastFwdPort=snRtUdpBcastFwdPort, snRtStaticArpTable=snRtStaticArpTable, snPimCandidateRPIPAddress=snPimCandidateRPIPAddress, snRtIpRipRouteFilterId=snRtIpRipRouteFilterId, ClearStatus=ClearStatus, snRtIpPortIfAddrTable=snRtIpPortIfAddrTable, snRtIpPortIfAccessDirection=snRtIpPortIfAccessDirection, snPimVIfStatOutGraftAckPkts=snPimVIfStatOutGraftAckPkts, snDvmrpRouteUpstreamNeighbor=snDvmrpRouteUpstreamNeighbor, snRtIpTraceRouteResultTable=snRtIpTraceRouteResultTable, snRtIpRipStatsOutResponse=snRtIpRipStatsOutResponse, snRtIpTtl=snRtIpTtl, snRtUdpIfHelperTable=snRtUdpIfHelperTable, snRtIpPortIfEncap=snRtIpPortIfEncap, snIpCommunityListRowStatus=snIpCommunityListRowStatus, snPimJoinPruneInterval=snPimJoinPruneInterval, snRtIpRipPortIfAccessTable=snRtIpRipPortIfAccessTable, snPimVIfStatDiscardGraftAckPkts=snPimVIfStatDiscardGraftAckPkts, snRtIpStaticRouteNextHop=snRtIpStaticRouteNextHop, snFsrpIfTable=snFsrpIfTable, snIpCommunityListStringEntry=snIpCommunityListStringEntry, snRtIpFwdCacheAction=snRtIpFwdCacheAction, snRtIpIrdpEnable=snRtIpIrdpEnable, snRtIpRipStatsInRequest=snRtIpRipStatsInRequest, snIpAsPathAccessListStringTable=snIpAsPathAccessListStringTable, snRtIpRipGeneral=snRtIpRipGeneral, snFsrpIfIpAddress=snFsrpIfIpAddress, snRtIpRipUpdateTime=snRtIpRipUpdateTime, snRtUdpIfHelperEntry=snRtUdpIfHelperEntry, snPimVIfStatVifIndex=snPimVIfStatVifIndex, snDvmrpRouteSource=snDvmrpRouteSource, snRtIpFwdCacheTable=snRtIpFwdCacheTable, snRtIpTraceRouteMaxTtl=snRtIpTraceRouteMaxTtl, snDvmrpNeighborMajorVersion=snDvmrpNeighborMajorVersion, snDvmrpRouteExpiryTime=snDvmrpRouteExpiryTime, snDvmrpRouteNextHopSourceMask=snDvmrpRouteNextHopSourceMask, snRtIpPortAddrType=snRtIpPortAddrType, snDvmrpVInterfaceTtlThreshold=snDvmrpVInterfaceTtlThreshold, snFsrpIfEntry=snFsrpIfEntry, snRtIpFwdCacheIp=snRtIpFwdCacheIp, snIpPrefixListAddr=snIpPrefixListAddr, snRtIpPortAccessTable=snRtIpPortAccessTable, snRtIpFilterDestMask=snRtIpFilterDestMask, snPimCandidateRPMask=snPimCandidateRPMask, snPimVInterfaceRemoteAddress=snPimVInterfaceRemoteAddress, snRtIpRipPortConfigPortIndex=snRtIpRipPortConfigPortIndex, snRtIpTraceRouteResultEntry=snRtIpTraceRouteResultEntry, snDvmrpRouteSourceMask=snDvmrpRouteSourceMask, snRtIpRipRedisMatchMetric=snRtIpRipRedisMatchMetric, snRtStaticArpEntry=snRtStaticArpEntry, snRtBootpServer=snRtBootpServer, snFsrpIfChassisTrackPortMask=snFsrpIfChassisTrackPortMask, PortIndex=PortIndex, snRtIpFilterEstablished=snRtIpFilterEstablished, snLoopbackIntfConfigPortIndex=snLoopbackIntfConfigPortIndex, snIpCommunityListLocalAs=snIpCommunityListLocalAs, snPimNeighborExpiryTime=snPimNeighborExpiryTime, snRtIpRipPortIfConfigEntry=snRtIpRipPortIfConfigEntry, snRtIpFilterRowStatus=snRtIpFilterRowStatus, snRtIpRipPortPoisonReverse=snRtIpRipPortPoisonReverse, snRtIpRipNbrFilterId=snRtIpRipNbrFilterId, snRtIpSetAllPortConfig=snRtIpSetAllPortConfig, snRtIpRipPortConfigTable=snRtIpRipPortConfigTable, snRtIpPortAddrEntry=snRtIpPortAddrEntry, snIpCommunityListInternet=snIpCommunityListInternet, snRtIpPortIfConfigInterfaceIndex=snRtIpPortIfConfigInterfaceIndex, snRtIpRarpRowStatus=snRtIpRarpRowStatus, snPimVInterfaceVifIndex=snPimVInterfaceVifIndex, snPimNeighborAddress=snPimNeighborAddress, snPimCandidateRPRowStatus=snPimCandidateRPRowStatus, snRtIpStaticRouteRowStatus=snRtIpStaticRouteRowStatus, snRtIpRipPortIfConfigInterfaceIndex=snRtIpRipPortIfConfigInterfaceIndex, snRtIpFwdCacheCurEntries=snRtIpFwdCacheCurEntries, snRtIpFilterSourceMask=snRtIpFilterSourceMask, snRtIpTraceRoute=snRtIpTraceRoute, snRtIpRipPortAccessFilterList=snRtIpRipPortAccessFilterList, snIpAsPathAccessListStringAction=snIpAsPathAccessListStringAction, snRtIpRipRouteFilterEntry=snRtIpRipRouteFilterEntry, snRtIpFwdCacheOutgoingIf=snRtIpFwdCacheOutgoingIf, snIpCommunityListStringType=snIpCommunityListStringType, snIpCommunityListStringLocalAs=snIpCommunityListStringLocalAs, snPimVInterfaceTtlThreshold=snPimVInterfaceTtlThreshold, snRtUdpBroadcastFwdPortEntry=snRtUdpBroadcastFwdPortEntry, snRtBootpRelayMax=snRtBootpRelayMax, snDvmrpRouteEntryIndex=snDvmrpRouteEntryIndex, snDvmrpVIfStatInPkts=snDvmrpVIfStatInPkts, snRtIpFwdCacheMac=snRtIpFwdCacheMac, snPimVInterfaceType=snPimVInterfaceType, snRtIpRipRedisTable=snRtIpRipRedisTable, snDvmrpDefaultRoute=snDvmrpDefaultRoute, snRtIpProtocolRouterId=snRtIpProtocolRouterId, snRtIpProxyArp=snRtIpProxyArp, snFsrpIfOtherRtrIpAddr=snFsrpIfOtherRtrIpAddr, snDvmrpVIfStatOutProbePkts=snDvmrpVIfStatOutProbePkts, snIpPrefixListGeValue=snIpPrefixListGeValue, snRtIpRipPortIfAccessFilterList=snRtIpRipPortIfAccessFilterList, snRtIpPortIfAccessEntry=snRtIpPortIfAccessEntry, snRtIpRipPortConfigEntry=snRtIpRipPortConfigEntry, snRtStaticArpPort=snRtStaticArpPort, snRtIpRipStatsBadMetrics=snRtIpRipStatsBadMetrics, snPimVIfStatTable=snPimVIfStatTable, snDvmrpNeighborGenerationId=snDvmrpNeighborGenerationId, snFsrpIfVirRtrIpAddr=snFsrpIfVirRtrIpAddr, snPimCandidateBSRTable=snPimCandidateBSRTable, snDvmrpProbeInterval=snDvmrpProbeInterval, snDvmrpRouteDiscardTime=snDvmrpRouteDiscardTime, snRtIpFilterProtocol=snRtIpFilterProtocol, snDvmrpRouteNextHopTable=snDvmrpRouteNextHopTable, snRtIpPortIfAccessInterfaceIndex=snRtIpPortIfAccessInterfaceIndex, snRtStaticArpIndex=snRtStaticArpIndex, snPimVIfStatInAssertPkts=snPimVIfStatInAssertPkts, snFsrpIfStateChangeTrap=snFsrpIfStateChangeTrap, snDvmrpVIfStatDiscardGraftAckPkts=snDvmrpVIfStatDiscardGraftAckPkts, snIpPrefixListName=snIpPrefixListName, snPimVIfStatDiscardPrunePkts=snPimVIfStatDiscardPrunePkts, snRtIpTraceRouteResultRoundTripTime2=snRtIpTraceRouteResultRoundTripTime2, snRtIpPortIfAccessRowStatus=snRtIpPortIfAccessRowStatus, snRtIpFilterSourceIp=snRtIpFilterSourceIp, snPimVIfStatInGraftAckPkts=snPimVIfStatInGraftAckPkts, snRtIpRipRedisIndex=snRtIpRipRedisIndex, snPimVIfStatInGraftPkts=snPimVIfStatInGraftPkts, snRtIpPortIfAddrEntry=snRtIpPortIfAddrEntry, snRtIpPortAddrPortIndex=snRtIpPortAddrPortIndex, snRtIpRarpTable=snRtIpRarpTable, snDvmrpVIfStatDiscardPrunePkts=snDvmrpVIfStatDiscardPrunePkts, snRtIpPortIfRowStatus=snRtIpPortIfRowStatus, snRtIpTraceRouteGeneral=snRtIpTraceRouteGeneral, snRtIpFwdCacheVLanId=snRtIpFwdCacheVLanId, snRtIpSourceRoute=snRtIpSourceRoute, snRtUdpBcastFwdPortTable=snRtUdpBcastFwdPortTable, snDvmrpRouteNextHopVifIndex=snDvmrpRouteNextHopVifIndex, snRtIpRipDistance=snRtIpRipDistance, snRtIpRarpEntry=snRtIpRarpEntry, snPimVIfStatOutAssertPkts=snPimVIfStatOutAssertPkts, snRtIpRipStatsBadRequestFormat=snRtIpRipStatsBadRequestFormat, snRtIpPortEncap=snRtIpPortEncap, snRtIpRipFiltOnAllPort=snRtIpRipFiltOnAllPort, snDvmrpNeighborEntry=snDvmrpNeighborEntry, snDvmrpVInterfaceRemoteAddress=snDvmrpVInterfaceRemoteAddress, snIpAsPathAccessListStringRegExpression=snIpAsPathAccessListStringRegExpression, snPimVInterfaceEntry=snPimVInterfaceEntry, snRtUdpHelperPortIndex=snRtUdpHelperPortIndex, snRtIpPortAccessPortIndex=snRtIpPortAccessPortIndex, snRtIpRipRedisAction=snRtIpRipRedisAction, Metric=Metric, snRtIpRipPortAccessPort=snRtIpRipPortAccessPort, snDvmrpRouteNextHopType=snDvmrpRouteNextHopType, snRtIpPortIfAddress=snRtIpPortIfAddress, snRtIpRipPortIfLearnDefault=snRtIpRipPortIfLearnDefault, snDvmrpNeighborTable=snDvmrpNeighborTable, snRtIpRipNbrFilterTable=snRtIpRipNbrFilterTable, snIpPrefixListEntry=snIpPrefixListEntry, snPimVIfStatOutGraftPkts=snPimVIfStatOutGraftPkts, snRtIpRipRouteFilterRowStatus=snRtIpRipRouteFilterRowStatus, snRtIpFwdCacheSnapHdr=snRtIpFwdCacheSnapHdr, snDvmrpPruneAge=snDvmrpPruneAge, snIpPrefixListMask=snIpPrefixListMask, agIpPortCounterEntry=agIpPortCounterEntry, snPimCandidateRPGroupAddress=snPimCandidateRPGroupAddress, snIpAsPathAccessListStringRowStatus=snIpAsPathAccessListStringRowStatus, snDvmrpVInterfaceType=snDvmrpVInterfaceType, snDvmrpVInterfaceStatus=snDvmrpVInterfaceStatus, snPimRPSetGroupAddress=snPimRPSetGroupAddress, snRtIpStaticRouteTable=snRtIpStaticRouteTable, snRtIpStaticRouteMask=snRtIpStaticRouteMask, snRtUdpIfHelperRowStatus=snRtUdpIfHelperRowStatus, snPimPruneTime=snPimPruneTime, snDvmrpVIfStatInPrunePkts=snDvmrpVIfStatInPrunePkts, snIpCommunityListAction=snIpCommunityListAction, snRtIpRipRouteFilterAction=snRtIpRipRouteFilterAction, snRtUdpHelperEntry=snRtUdpHelperEntry, snRtIpPortConfigTable=snRtIpPortConfigTable, snRtIpRipStats=snRtIpRipStats, snPimRPSetMask=snPimRPSetMask, snRtIpRipRedisRouteMapName=snRtIpRipRedisRouteMapName, snDvmrpNeighborAddress=snDvmrpNeighborAddress, snPimVIfStatEntry=snPimVIfStatEntry, snRtIpRipNbrFilterEntry=snRtIpRipNbrFilterEntry, snRtIpStaticRouteIndex=snRtIpStaticRouteIndex, snRtIpRipPortVersion=snRtIpRipPortVersion, snPimVIfStatOutHelloPkts=snPimVIfStatOutHelloPkts, snRtIpTraceRouteResultIndex=snRtIpTraceRouteResultIndex, snDvmrpNeighborMinorVersion=snDvmrpNeighborMinorVersion, snDvmrpVersion=snDvmrpVersion, snIpAsPathAccessListStringName=snIpAsPathAccessListStringName, snRtIpPortIfMetric=snRtIpPortIfMetric, snRtIpRipPortIfConfigTable=snRtIpRipPortIfConfigTable, snDvmrpVIfStatOutPkts=snDvmrpVIfStatOutPkts, snRtUdpBcastFwdPortRowStatus=snRtUdpBcastFwdPortRowStatus, snPimRPSetEntry=snPimRPSetEntry, snRtIpRipStatsUnrecognized=snRtIpRipStatsUnrecognized, snRtStaticArpMac=snRtStaticArpMac, snRtIpRipRedisMask=snRtIpRipRedisMask, snPimNeighborTable=snPimNeighborTable, snRtIpRipRedisEntry=snRtIpRipRedisEntry, snRtIpRipRedisEnable=snRtIpRipRedisEnable, snRtIpPortIfAddrInterfaceIndex=snRtIpPortIfAddrInterfaceIndex)
