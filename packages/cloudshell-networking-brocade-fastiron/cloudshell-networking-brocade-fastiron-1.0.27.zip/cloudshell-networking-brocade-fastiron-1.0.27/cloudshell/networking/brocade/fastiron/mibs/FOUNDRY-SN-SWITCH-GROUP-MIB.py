#
# PySNMP MIB module FOUNDRY-SN-SWITCH-GROUP-MIB (http://pysnmp.sf.net)
# ASN.1 source file://F:\foundry\foundry.mib
# Produced by pysmi-0.0.6 at Tue Sep 20 14:02:01 2016
# On host ? platform ? version ? by user ?
# Using Python version 2.7.10 (default, May 23 2015, 09:40:32) [MSC v.1500 32 bit (Intel)]
#
( Integer, ObjectIdentifier, OctetString, ) = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
( NamedValues, ) = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
( ConstraintsUnion, SingleValueConstraint, ConstraintsIntersection, ValueSizeConstraint, ValueRangeConstraint, ) = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "SingleValueConstraint", "ConstraintsIntersection", "ValueSizeConstraint", "ValueRangeConstraint")
( DisplayString, MacAddress, ) = mibBuilder.importSymbols("FOUNDRY-SN-AGENT-MIB", "DisplayString", "MacAddress")
( switch, ) = mibBuilder.importSymbols("FOUNDRY-SN-ROOT-MIB", "switch")
( ifIndex, InterfaceIndex, ) = mibBuilder.importSymbols("IF-MIB", "ifIndex", "InterfaceIndex")
( NotificationGroup, ModuleCompliance, ) = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
( Integer32, MibScalar, MibTable, MibTableRow, MibTableColumn, NotificationType, MibIdentifier, Bits, TimeTicks, Counter64, Unsigned32, ModuleIdentity, Gauge32, iso, ObjectIdentity, IpAddress, Counter32, ) = mibBuilder.importSymbols("SNMPv2-SMI", "Integer32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "NotificationType", "MibIdentifier", "Bits", "TimeTicks", "Counter64", "Unsigned32", "ModuleIdentity", "Gauge32", "iso", "ObjectIdentity", "IpAddress", "Counter32")
( TruthValue, DisplayString, TextualConvention, ) = mibBuilder.importSymbols("SNMPv2-TC", "TruthValue", "DisplayString", "TextualConvention")
snSwitch = ModuleIdentity((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3)).setRevisions(("2009-09-30 00:00",))
class PhysAddress(OctetString, TextualConvention):
    pass

class BridgeId(OctetString, TextualConvention):
    subtypeSpec = OctetString.subtypeSpec+ValueSizeConstraint(8,8)
    fixedLength = 8

class Timeout(Integer32, TextualConvention):
    pass

class PortMask(Integer32, TextualConvention):
    pass

class InterfaceId(ObjectIdentifier, TextualConvention):
    pass

class InterfaceId2(ObjectIdentifier, TextualConvention):
    pass

class VlanTagMode(Integer32, TextualConvention):
    subtypeSpec = Integer32.subtypeSpec+SingleValueConstraint(1, 2, 3,)
    namedValues = NamedValues(("tagged", 1), ("untagged", 2), ("dual", 3),)

class FdryVlanIdOrNoneTC(Integer32, TextualConvention):
    displayHint = 'd'
    subtypeSpec = Integer32.subtypeSpec+ConstraintsUnion(ValueRangeConstraint(0,0),ValueRangeConstraint(1,4094),)
class PortQosTC(Integer32, TextualConvention):
    subtypeSpec = Integer32.subtypeSpec+SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 127,)
    namedValues = NamedValues(("level0", 0), ("level1", 1), ("level2", 2), ("level3", 3), ("level4", 4), ("level5", 5), ("level6", 6), ("level7", 7), ("invalid", 127),)

snSwInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 1))
snVLanInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 2))
snSwPortInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 3))
snFdbInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 4))
snPortStpInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 5))
snTrunkInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 6))
snSwSummary = MibIdentifier((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 7))
snDhcpGatewayListInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 8))
snDnsInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 9))
snMacFilter = MibIdentifier((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 10))
snNTP = MibIdentifier((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 11))
snRadius = MibIdentifier((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 12))
snTacacs = MibIdentifier((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 13))
snQos = MibIdentifier((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 14))
snAAA = MibIdentifier((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 15))
snCAR = MibIdentifier((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 16))
snVLanCAR = MibIdentifier((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 17))
snNetFlow = MibIdentifier((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 18))
snSFlow = MibIdentifier((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 19))
snFDP = MibIdentifier((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 20))
snVsrp = MibIdentifier((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 21))
snArpInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 22))
snWireless = MibIdentifier((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 23))
snMac = MibIdentifier((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 24))
snPortMonitor = MibIdentifier((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 25))
snSSH = MibIdentifier((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 26))
snSSL = MibIdentifier((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 27))
snMacAuth = MibIdentifier((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 28))
snMetroRing = MibIdentifier((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 29))
snStacking = MibIdentifier((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 31))
fdryMacVlanMIB = MibIdentifier((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 32))
fdryLinkAggregationGroupMIB = MibIdentifier((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 33))
fdryDns2MIB = MibIdentifier((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 34))
snSwGroupOperMode = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 1, 1), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2,)).clone(namedValues=NamedValues(("noVLan", 1), ("vlanByPort", 2),))).setMaxAccess("readwrite")
snSwGroupIpL3SwMode = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 1, 2), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1,)).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1),))).setMaxAccess("readwrite")
snSwGroupIpMcastMode = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 1, 3), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1,)).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1),))).setMaxAccess("readwrite")
snSwGroupDefaultCfgMode = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 1, 4), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2,)).clone(namedValues=NamedValues(("default", 1), ("nonDefault", 2),))).setMaxAccess("readwrite")
snSwGroupSwitchAgeTime = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 1, 5), Integer32()).setMaxAccess("readwrite")
snVLanGroupVlanCurEntry = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 1, 6), Integer32()).setMaxAccess("readonly")
snVLanGroupSetAllVLan = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 1, 7), Integer32()).setMaxAccess("readwrite")
snSwPortSetAll = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 1, 8), Integer32()).setMaxAccess("readwrite")
snFdbTableCurEntry = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 1, 9), Integer32()).setMaxAccess("readonly")
snFdbTableStationFlush = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 1, 10), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3, 4,)).clone(namedValues=NamedValues(("normal", 1), ("error", 2), ("flush", 3), ("flushing", 4),))).setMaxAccess("readwrite")
snPortStpSetAll = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 1, 11), Integer32()).setMaxAccess("readwrite")
snSwProbePortNum = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 1, 12), Integer32()).setMaxAccess("readwrite")
snSw8021qTagMode = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 1, 13), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1,)).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1),))).setMaxAccess("readwrite")
snSwGlobalStpMode = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 1, 14), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1,)).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1),))).setMaxAccess("readwrite")
snSwIpMcastQuerierMode = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 1, 15), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2,)).clone(namedValues=NamedValues(("querier", 1), ("nonQuerier", 2),))).setMaxAccess("readwrite")
snSwViolatorPortNumber = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 1, 17), Integer32()).setMaxAccess("readonly")
snSwViolatorMacAddress = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 1, 18), MacAddress()).setMaxAccess("readonly")
snVLanGroupVlanMaxEntry = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 1, 19), Integer32()).setMaxAccess("readwrite")
snSwEosBufferSize = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 1, 20), Integer32()).setMaxAccess("readonly")
snVLanByPortEntrySize = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 1, 21), Integer32()).setMaxAccess("readonly")
snSwPortEntrySize = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 1, 22), Integer32()).setMaxAccess("readonly")
snFdbStationEntrySize = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 1, 23), Integer32()).setMaxAccess("readonly")
snPortStpEntrySize = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 1, 24), Integer32()).setMaxAccess("readonly")
snSwEnableBridgeNewRootTrap = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 1, 25), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1,)).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1),)).clone('enabled')).setMaxAccess("readwrite")
snSwEnableBridgeTopoChangeTrap = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 1, 26), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1,)).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1),)).clone('enabled')).setMaxAccess("readwrite")
snSwEnableLockedAddrViolationTrap = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 1, 27), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1,)).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1),)).clone('enabled')).setMaxAccess("readwrite")
snSwIpxL3SwMode = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 1, 28), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1,)).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1),))).setMaxAccess("readwrite")
snVLanByIpSubnetMaxSubnets = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 1, 29), Integer32()).setMaxAccess("readonly")
snVLanByIpxNetMaxNetworks = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 1, 30), Integer32()).setMaxAccess("readonly")
snSwProtocolVLanMode = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 1, 31), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1,)).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1),))).setMaxAccess("readwrite")
snMacStationVLanId = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 1, 32), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0,4095))).setMaxAccess("readwrite")
snSwClearCounters = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 1, 33), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1,)).clone(namedValues=NamedValues(("valid", 0), ("clear", 1),))).setMaxAccess("readwrite")
snSw8021qTagType = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 1, 34), Integer32().clone(33024)).setMaxAccess("readwrite")
snSwBroadcastLimit = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 1, 35), Integer32()).setMaxAccess("readwrite")
snSwMaxMacFilterPerSystem = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 1, 36), Integer32()).setMaxAccess("readonly")
snSwMaxMacFilterPerPort = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 1, 37), Integer32()).setMaxAccess("readonly")
snSwDefaultVLanId = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 1, 38), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1,4095))).setMaxAccess("readwrite")
snSwGlobalAutoNegotiate = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 1, 39), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1, 2, 3,)).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1), ("negFullAuto", 2), ("other", 3),)).clone('negFullAuto')).setMaxAccess("readwrite")
snSwQosMechanism = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 1, 40), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1,)).clone(namedValues=NamedValues(("strict", 0), ("weighted", 1),)).clone('weighted')).setMaxAccess("readwrite")
snSwSingleStpMode = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 1, 41), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1, 2,)).clone(namedValues=NamedValues(("disable", 0), ("enableStp", 1), ("enableRstp", 2),))).setMaxAccess("readwrite")
snSwFastStpMode = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 1, 42), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1,)).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1),))).setMaxAccess("readwrite")
snSwViolatorIfIndex = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 1, 43), Integer32()).setMaxAccess("readonly")
snSwSingleStpVLanId = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 1, 44), Integer32()).setMaxAccess("readonly")
snVLanByPortTable = MibTable((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 2, 1), )
snVLanByPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 2, 1, 1), ).setIndexNames((0, "FOUNDRY-SN-SWITCH-GROUP-MIB", "snVLanByPortVLanIndex"))
snVLanByPortVLanIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1,4095))).setMaxAccess("readonly")
snVLanByPortVLanId = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1,4095))).setMaxAccess("readwrite")
snVLanByPortPortMask = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 2, 1, 1, 3), PortMask()).setMaxAccess("readwrite")
snVLanByPortQos = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 2, 1, 1, 4), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7,)).clone(namedValues=NamedValues(("level0", 0), ("level1", 1), ("level2", 2), ("level3", 3), ("level4", 4), ("level5", 5), ("level6", 6), ("level7", 7),))).setMaxAccess("readwrite")
snVLanByPortStpMode = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 2, 1, 1, 5), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1, 2,)).clone(namedValues=NamedValues(("disable", 0), ("enableStp", 1), ("enableRstp", 2),))).setMaxAccess("readwrite")
snVLanByPortStpPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 2, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0,65535))).setMaxAccess("readwrite")
snVLanByPortStpGroupMaxAge = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 2, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0,40))).setMaxAccess("readwrite")
snVLanByPortStpGroupHelloTime = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 2, 1, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0,10))).setMaxAccess("readwrite")
snVLanByPortStpGroupForwardDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 2, 1, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0,30))).setMaxAccess("readwrite")
snVLanByPortRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 2, 1, 1, 10), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3, 4, 5,)).clone(namedValues=NamedValues(("other", 1), ("valid", 2), ("delete", 3), ("create", 4), ("modify", 5),))).setMaxAccess("readwrite")
snVLanByPortOperState = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 2, 1, 1, 11), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1,)).clone(namedValues=NamedValues(("notActivated", 0), ("activated", 1),))).setMaxAccess("readonly")
snVLanByPortBaseNumPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 2, 1, 1, 12), Integer32()).setMaxAccess("readonly")
snVLanByPortBaseType = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 2, 1, 1, 13), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3, 4,)).clone(namedValues=NamedValues(("unknown", 1), ("transparentOnly", 2), ("sourcerouteOnly", 3), ("srt", 4),))).setMaxAccess("readonly")
snVLanByPortStpProtocolSpecification = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 2, 1, 1, 14), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3,)).clone(namedValues=NamedValues(("unknown", 1), ("decLb100", 2), ("ieee8021d", 3),))).setMaxAccess("readonly")
snVLanByPortStpMaxAge = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 2, 1, 1, 15), Timeout()).setMaxAccess("readonly")
snVLanByPortStpHelloTime = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 2, 1, 1, 16), Timeout()).setMaxAccess("readonly")
snVLanByPortStpHoldTime = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 2, 1, 1, 17), Integer32()).setMaxAccess("readonly")
snVLanByPortStpForwardDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 2, 1, 1, 18), Timeout()).setMaxAccess("readonly")
snVLanByPortStpTimeSinceTopologyChange = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 2, 1, 1, 19), TimeTicks()).setMaxAccess("readonly")
snVLanByPortStpTopChanges = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 2, 1, 1, 20), Counter32()).setMaxAccess("readonly")
snVLanByPortStpRootCost = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 2, 1, 1, 21), Integer32()).setMaxAccess("readonly")
snVLanByPortStpRootPort = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 2, 1, 1, 22), Integer32()).setMaxAccess("readonly")
snVLanByPortStpDesignatedRoot = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 2, 1, 1, 23), BridgeId()).setMaxAccess("readonly")
snVLanByPortBaseBridgeAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 2, 1, 1, 24), MacAddress()).setMaxAccess("readonly")
snVLanByPortVLanName = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 2, 1, 1, 25), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0,32))).setMaxAccess("readwrite")
snVLanByPortRouterIntf = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 2, 1, 1, 26), Integer32()).setMaxAccess("readwrite")
snVLanByPortChassisPortMask = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 2, 1, 1, 27), OctetString()).setMaxAccess("readwrite")
snVLanByPortPortList = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 2, 1, 1, 28), OctetString()).setMaxAccess("readwrite")
snVLanByPortMemberTable = MibTable((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 2, 6), )
snVLanByPortMemberEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 2, 6, 1), ).setIndexNames((0, "FOUNDRY-SN-SWITCH-GROUP-MIB", "snVLanByPortMemberVLanId"), (0, "FOUNDRY-SN-SWITCH-GROUP-MIB", "snVLanByPortMemberPortId"))
snVLanByPortMemberVLanId = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 2, 6, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1,4095))).setMaxAccess("readonly")
snVLanByPortMemberPortId = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 2, 6, 1, 2), InterfaceIndex()).setMaxAccess("readonly")
snVLanByPortMemberRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 2, 6, 1, 3), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3, 4,)).clone(namedValues=NamedValues(("other", 1), ("valid", 2), ("delete", 3), ("create", 4),))).setMaxAccess("readwrite")
snVLanByPortMemberTagMode = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 2, 6, 1, 4), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2,)).clone(namedValues=NamedValues(("tagged", 1), ("untagged", 2),))).setMaxAccess("readwrite")
snVLanByPortCfgTable = MibTable((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 2, 7), )
snVLanByPortCfgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 2, 7, 1), ).setIndexNames((0, "FOUNDRY-SN-SWITCH-GROUP-MIB", "snVLanByPortCfgVLanId"))
snVLanByPortCfgVLanId = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 2, 7, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1,4095))).setMaxAccess("readonly")
snVLanByPortCfgQos = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 2, 7, 1, 2), PortQosTC()).setMaxAccess("readwrite")
snVLanByPortCfgStpMode = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 2, 7, 1, 3), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1, 2,)).clone(namedValues=NamedValues(("disable", 0), ("enableStp", 1), ("enableRstp", 2),))).setMaxAccess("readwrite")
snVLanByPortCfgStpPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 2, 7, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0,65535))).setMaxAccess("readwrite")
snVLanByPortCfgStpGroupMaxAge = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 2, 7, 1, 5), Integer32()).setMaxAccess("readwrite")
snVLanByPortCfgStpGroupHelloTime = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 2, 7, 1, 6), Integer32()).setMaxAccess("readwrite")
snVLanByPortCfgStpGroupForwardDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 2, 7, 1, 7), Integer32()).setMaxAccess("readwrite")
snVLanByPortCfgBaseNumPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 2, 7, 1, 8), Integer32()).setMaxAccess("readonly")
snVLanByPortCfgBaseType = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 2, 7, 1, 9), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3, 4,)).clone(namedValues=NamedValues(("unknown", 1), ("transparentOnly", 2), ("sourcerouteOnly", 3), ("srt", 4),))).setMaxAccess("readonly")
snVLanByPortCfgStpProtocolSpecification = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 2, 7, 1, 10), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3,)).clone(namedValues=NamedValues(("unknown", 1), ("decLb100", 2), ("ieee8021d", 3),))).setMaxAccess("readonly")
snVLanByPortCfgStpMaxAge = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 2, 7, 1, 11), Timeout()).setMaxAccess("readonly")
snVLanByPortCfgStpHelloTime = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 2, 7, 1, 12), Timeout()).setMaxAccess("readonly")
snVLanByPortCfgStpHoldTime = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 2, 7, 1, 13), Integer32()).setMaxAccess("readonly")
snVLanByPortCfgStpForwardDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 2, 7, 1, 14), Timeout()).setMaxAccess("readonly")
snVLanByPortCfgStpTimeSinceTopologyChange = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 2, 7, 1, 15), TimeTicks()).setMaxAccess("readonly")
snVLanByPortCfgStpTopChanges = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 2, 7, 1, 16), Counter32()).setMaxAccess("readonly")
snVLanByPortCfgStpRootCost = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 2, 7, 1, 17), Integer32()).setMaxAccess("readonly")
snVLanByPortCfgStpRootPort = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 2, 7, 1, 18), Integer32()).setMaxAccess("readonly")
snVLanByPortCfgStpDesignatedRoot = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 2, 7, 1, 19), BridgeId()).setMaxAccess("readonly")
snVLanByPortCfgBaseBridgeAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 2, 7, 1, 20), MacAddress()).setMaxAccess("readonly")
snVLanByPortCfgVLanName = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 2, 7, 1, 21), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0,32))).setMaxAccess("readwrite")
snVLanByPortCfgRouterIntf = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 2, 7, 1, 22), Integer32()).setMaxAccess("readwrite")
snVLanByPortCfgRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 2, 7, 1, 23), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3,)).clone(namedValues=NamedValues(("other", 1), ("valid", 2), ("delete", 3),))).setMaxAccess("readwrite")
snVLanByPortCfgStpVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 2, 7, 1, 24), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 2,)).clone(namedValues=NamedValues(("stpCompatible", 0), ("rstp", 2),))).setMaxAccess("readwrite")
snVLanByPortCfgInOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 2, 7, 1, 25), Counter64()).setMaxAccess("readonly")
snVLanByProtocolTable = MibTable((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 2, 2), )
snVLanByProtocolEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 2, 2, 1), ).setIndexNames((0, "FOUNDRY-SN-SWITCH-GROUP-MIB", "snVLanByProtocolVLanId"), (0, "FOUNDRY-SN-SWITCH-GROUP-MIB", "snVLanByProtocolIndex"))
snVLanByProtocolVLanId = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 2, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1,4095))).setMaxAccess("readonly")
snVLanByProtocolIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 2, 2, 1, 2), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3, 4, 5, 6, 7,)).clone(namedValues=NamedValues(("ip", 1), ("ipx", 2), ("appleTalk", 3), ("decNet", 4), ("netBios", 5), ("others", 6), ("ipv6", 7),))).setMaxAccess("readonly")
snVLanByProtocolDynamic = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 2, 2, 1, 3), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1,)).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1),))).setMaxAccess("readwrite")
snVLanByProtocolStaticMask = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 2, 2, 1, 4), PortMask()).setMaxAccess("readwrite")
snVLanByProtocolExcludeMask = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 2, 2, 1, 5), PortMask()).setMaxAccess("readwrite")
snVLanByProtocolRouterIntf = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 2, 2, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1,60))).setMaxAccess("readwrite")
snVLanByProtocolRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 2, 2, 1, 7), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3, 4, 5,)).clone(namedValues=NamedValues(("other", 1), ("valid", 2), ("delete", 3), ("create", 4), ("modify", 5),))).setMaxAccess("readwrite")
snVLanByProtocolDynamicMask = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 2, 2, 1, 8), PortMask()).setMaxAccess("readonly")
snVLanByProtocolChassisStaticMask = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 2, 2, 1, 9), OctetString().subtype(subtypeSpec=ValueSizeConstraint(32,32)).setFixedLength(32)).setMaxAccess("readwrite")
snVLanByProtocolChassisExcludeMask = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 2, 2, 1, 10), OctetString().subtype(subtypeSpec=ValueSizeConstraint(32,32)).setFixedLength(32)).setMaxAccess("readwrite")
snVLanByProtocolChassisDynamicMask = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 2, 2, 1, 11), OctetString().subtype(subtypeSpec=ValueSizeConstraint(32,32)).setFixedLength(32)).setMaxAccess("readonly")
snVLanByProtocolVLanName = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 2, 2, 1, 12), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0,32))).setMaxAccess("readwrite")
snVLanByProtocolStaticPortList = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 2, 2, 1, 13), OctetString()).setMaxAccess("readwrite")
snVLanByProtocolExcludePortList = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 2, 2, 1, 14), OctetString()).setMaxAccess("readwrite")
snVLanByProtocolDynamicPortList = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 2, 2, 1, 15), OctetString()).setMaxAccess("readonly")
snVLanByIpSubnetTable = MibTable((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 2, 3), )
snVLanByIpSubnetEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 2, 3, 1), ).setIndexNames((0, "FOUNDRY-SN-SWITCH-GROUP-MIB", "snVLanByIpSubnetVLanId"), (0, "FOUNDRY-SN-SWITCH-GROUP-MIB", "snVLanByIpSubnetIpAddress"), (0, "FOUNDRY-SN-SWITCH-GROUP-MIB", "snVLanByIpSubnetSubnetMask"))
snVLanByIpSubnetVLanId = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 2, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1,4095))).setMaxAccess("readonly")
snVLanByIpSubnetIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 2, 3, 1, 2), IpAddress()).setMaxAccess("readonly")
snVLanByIpSubnetSubnetMask = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 2, 3, 1, 3), IpAddress()).setMaxAccess("readonly")
snVLanByIpSubnetDynamic = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 2, 3, 1, 4), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1,)).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1),))).setMaxAccess("readwrite")
snVLanByIpSubnetStaticMask = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 2, 3, 1, 5), PortMask()).setMaxAccess("readwrite")
snVLanByIpSubnetExcludeMask = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 2, 3, 1, 6), PortMask()).setMaxAccess("readwrite")
snVLanByIpSubnetRouterIntf = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 2, 3, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1,60))).setMaxAccess("readwrite")
snVLanByIpSubnetRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 2, 3, 1, 8), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3, 4, 5,)).clone(namedValues=NamedValues(("other", 1), ("valid", 2), ("delete", 3), ("create", 4), ("modify", 5),))).setMaxAccess("readwrite")
snVLanByIpSubnetDynamicMask = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 2, 3, 1, 9), PortMask()).setMaxAccess("readonly")
snVLanByIpSubnetChassisStaticMask = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 2, 3, 1, 10), OctetString().subtype(subtypeSpec=ValueSizeConstraint(32,32)).setFixedLength(32)).setMaxAccess("readwrite")
snVLanByIpSubnetChassisExcludeMask = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 2, 3, 1, 11), OctetString().subtype(subtypeSpec=ValueSizeConstraint(32,32)).setFixedLength(32)).setMaxAccess("readwrite")
snVLanByIpSubnetChassisDynamicMask = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 2, 3, 1, 12), OctetString().subtype(subtypeSpec=ValueSizeConstraint(32,32)).setFixedLength(32)).setMaxAccess("readonly")
snVLanByIpSubnetVLanName = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 2, 3, 1, 13), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0,32))).setMaxAccess("readwrite")
snVLanByIpSubnetStaticPortList = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 2, 3, 1, 14), OctetString()).setMaxAccess("readwrite")
snVLanByIpSubnetExcludePortList = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 2, 3, 1, 15), OctetString()).setMaxAccess("readwrite")
snVLanByIpSubnetDynamicPortList = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 2, 3, 1, 16), OctetString()).setMaxAccess("readonly")
snVLanByIpxNetTable = MibTable((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 2, 4), )
snVLanByIpxNetEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 2, 4, 1), ).setIndexNames((0, "FOUNDRY-SN-SWITCH-GROUP-MIB", "snVLanByIpxNetVLanId"), (0, "FOUNDRY-SN-SWITCH-GROUP-MIB", "snVLanByIpxNetNetworkNum"), (0, "FOUNDRY-SN-SWITCH-GROUP-MIB", "snVLanByIpxNetFrameType"))
snVLanByIpxNetVLanId = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 2, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1,4095))).setMaxAccess("readonly")
snVLanByIpxNetNetworkNum = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 2, 4, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4,4)).setFixedLength(4)).setMaxAccess("readonly")
snVLanByIpxNetFrameType = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 2, 4, 1, 3), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1, 2, 3, 4,)).clone(namedValues=NamedValues(("notApplicable", 0), ("ipxEthernet8022", 1), ("ipxEthernet8023", 2), ("ipxEthernetII", 3), ("ipxEthernetSnap", 4),))).setMaxAccess("readonly")
snVLanByIpxNetDynamic = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 2, 4, 1, 4), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1,)).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1),))).setMaxAccess("readwrite")
snVLanByIpxNetStaticMask = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 2, 4, 1, 5), PortMask()).setMaxAccess("readwrite")
snVLanByIpxNetExcludeMask = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 2, 4, 1, 6), PortMask()).setMaxAccess("readwrite")
snVLanByIpxNetRouterIntf = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 2, 4, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1,60))).setMaxAccess("readwrite")
snVLanByIpxNetRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 2, 4, 1, 8), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3, 4, 5,)).clone(namedValues=NamedValues(("other", 1), ("valid", 2), ("delete", 3), ("create", 4), ("modify", 5),))).setMaxAccess("readwrite")
snVLanByIpxNetDynamicMask = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 2, 4, 1, 9), PortMask()).setMaxAccess("readonly")
snVLanByIpxNetChassisStaticMask = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 2, 4, 1, 10), OctetString().subtype(subtypeSpec=ValueSizeConstraint(32,32)).setFixedLength(32)).setMaxAccess("readwrite")
snVLanByIpxNetChassisExcludeMask = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 2, 4, 1, 11), OctetString().subtype(subtypeSpec=ValueSizeConstraint(32,32)).setFixedLength(32)).setMaxAccess("readwrite")
snVLanByIpxNetChassisDynamicMask = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 2, 4, 1, 12), OctetString().subtype(subtypeSpec=ValueSizeConstraint(32,32)).setFixedLength(32)).setMaxAccess("readonly")
snVLanByIpxNetVLanName = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 2, 4, 1, 13), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0,32))).setMaxAccess("readwrite")
snVLanByIpxNetStaticPortList = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 2, 4, 1, 14), OctetString()).setMaxAccess("readwrite")
snVLanByIpxNetExcludePortList = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 2, 4, 1, 15), OctetString()).setMaxAccess("readwrite")
snVLanByIpxNetDynamicPortList = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 2, 4, 1, 16), OctetString()).setMaxAccess("readonly")
snVLanByATCableTable = MibTable((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 2, 5), )
snVLanByATCableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 2, 5, 1), ).setIndexNames((0, "FOUNDRY-SN-SWITCH-GROUP-MIB", "snVLanByATCableVLanId"), (0, "FOUNDRY-SN-SWITCH-GROUP-MIB", "snVLanByATCableIndex"))
snVLanByATCableVLanId = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 2, 5, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1,4095))).setMaxAccess("readonly")
snVLanByATCableIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 2, 5, 1, 2), Integer32()).setMaxAccess("readonly")
snVLanByATCableRouterIntf = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 2, 5, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0,60))).setMaxAccess("readwrite")
snVLanByATCableRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 2, 5, 1, 4), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3, 4, 5,)).clone(namedValues=NamedValues(("other", 1), ("valid", 2), ("delete", 3), ("create", 4), ("modify", 5),))).setMaxAccess("readwrite")
snVLanByATCableChassisStaticMask = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 2, 5, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(32,32)).setFixedLength(32)).setMaxAccess("readwrite")
snVLanByATCableVLanName = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 2, 5, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0,32))).setMaxAccess("readwrite")
snVLanByATCableStaticPortList = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 2, 5, 1, 7), OctetString()).setMaxAccess("readwrite")
snSwPortInfoTable = MibTable((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 3, 1), )
snSwPortInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 3, 1, 1), ).setIndexNames((0, "FOUNDRY-SN-SWITCH-GROUP-MIB", "snSwPortInfoPortNum"))
snSwPortInfoPortNum = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 3, 1, 1, 1), Integer32()).setMaxAccess("readonly")
snSwPortInfoMonitorMode = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 3, 1, 1, 2), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1, 2, 3,)).clone(namedValues=NamedValues(("disabled", 0), ("input", 1), ("output", 2), ("both", 3),))).setMaxAccess("readwrite")
snSwPortInfoTagMode = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 3, 1, 1, 3), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3, 4,)).clone(namedValues=NamedValues(("tagged", 1), ("untagged", 2), ("auto", 3), ("disabled", 4),))).setMaxAccess("readwrite")
snSwPortInfoChnMode = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 3, 1, 1, 4), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1, 2,)).clone(namedValues=NamedValues(("none", 0), ("halfDuplex", 1), ("fullDuplex", 2),))).setMaxAccess("readwrite")
snSwPortInfoSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 3, 1, 1, 5), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11,)).clone(namedValues=NamedValues(("none", 0), ("sAutoSense", 1), ("s10M", 2), ("s100M", 3), ("s1G", 4), ("s1GM", 5), ("s155M", 6), ("s10G", 7), ("s622M", 8), ("s2488M", 9), ("s9953M", 10), ("s16G", 11),))).setMaxAccess("readwrite")
snSwPortInfoMediaType = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 3, 1, 1, 6), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14,)).clone(namedValues=NamedValues(("other", 1), ("m100BaseTX", 2), ("m100BaseFX", 3), ("m1000BaseFX", 4), ("mT3", 5), ("m155ATM", 6), ("m1000BaseTX", 7), ("m622ATM", 8), ("m155POS", 9), ("m622POS", 10), ("m2488POS", 11), ("m10000BaseFX", 12), ("m9953POS", 13), ("m16GStacking", 14),))).setMaxAccess("readonly")
snSwPortInfoConnectorType = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 3, 1, 1, 7), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3,)).clone(namedValues=NamedValues(("other", 1), ("copper", 2), ("fiber", 3),))).setMaxAccess("readonly")
snSwPortInfoAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 3, 1, 1, 8), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3,)).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("testing", 3),))).setMaxAccess("readwrite")
snSwPortInfoLinkStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 3, 1, 1, 9), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3,)).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("testing", 3),))).setMaxAccess("readonly")
snSwPortInfoPortQos = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 3, 1, 1, 10), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7,)).clone(namedValues=NamedValues(("level0", 0), ("level1", 1), ("level2", 2), ("level3", 3), ("level4", 4), ("level5", 5), ("level6", 6), ("level7", 7),))).setMaxAccess("readwrite")
snSwPortInfoPhysAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 3, 1, 1, 11), PhysAddress()).setMaxAccess("readonly")
snSwPortStatsInFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 3, 1, 1, 12), Counter32()).setMaxAccess("readonly")
snSwPortStatsOutFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 3, 1, 1, 13), Counter32()).setMaxAccess("readonly")
snSwPortStatsAlignErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 3, 1, 1, 14), Counter32()).setMaxAccess("readonly")
snSwPortStatsFCSErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 3, 1, 1, 15), Counter32()).setMaxAccess("readonly")
snSwPortStatsMultiColliFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 3, 1, 1, 16), Counter32()).setMaxAccess("readonly")
snSwPortStatsFrameTooLongs = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 3, 1, 1, 17), Counter32()).setMaxAccess("readonly")
snSwPortStatsTxColliFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 3, 1, 1, 18), Counter32()).setMaxAccess("readonly")
snSwPortStatsRxColliFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 3, 1, 1, 19), Counter32()).setMaxAccess("readonly")
snSwPortStatsFrameTooShorts = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 3, 1, 1, 20), Counter32()).setMaxAccess("readonly")
snSwPortLockAddressCount = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 3, 1, 1, 21), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0,2048)).clone(8)).setMaxAccess("readwrite")
snSwPortStpPortEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 3, 1, 1, 22), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1,)).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1),))).setMaxAccess("readwrite")
snSwPortDhcpGateListId = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 3, 1, 1, 23), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0,32))).setMaxAccess("readwrite")
snSwPortName = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 3, 1, 1, 24), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0,255))).setMaxAccess("readwrite")
snSwPortStatsInBcastFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 3, 1, 1, 25), Counter32()).setMaxAccess("readonly")
snSwPortStatsOutBcastFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 3, 1, 1, 26), Counter32()).setMaxAccess("readonly")
snSwPortStatsInMcastFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 3, 1, 1, 27), Counter32()).setMaxAccess("readonly")
snSwPortStatsOutMcastFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 3, 1, 1, 28), Counter32()).setMaxAccess("readonly")
snSwPortStatsInDiscard = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 3, 1, 1, 29), Counter32()).setMaxAccess("readonly")
snSwPortStatsOutDiscard = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 3, 1, 1, 30), Counter32()).setMaxAccess("readonly")
snSwPortStatsMacStations = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 3, 1, 1, 31), Integer32()).setMaxAccess("readonly")
snSwPortCacheGroupId = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 3, 1, 1, 32), Integer32()).setMaxAccess("readwrite")
snSwPortTransGroupId = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 3, 1, 1, 33), Integer32()).setMaxAccess("readwrite")
snSwPortInfoAutoNegotiate = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 3, 1, 1, 34), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1, 2, 3, 4,)).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1), ("negFullAuto", 2), ("global", 3), ("other", 4),)).clone('global')).setMaxAccess("readwrite")
snSwPortInfoFlowControl = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 3, 1, 1, 35), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1,)).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1),)).clone('enabled')).setMaxAccess("readwrite")
snSwPortInfoGigType = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 3, 1, 1, 36), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 255,)).clone(namedValues=NamedValues(("m1000BaseSX", 0), ("m1000BaseLX", 1), ("m1000BaseLH", 2), ("m1000BaseLHA", 3), ("m1000BaseLHB", 4), ("m1000BaseTX", 5), ("m10000BaseSR", 6), ("m10000BaseLR", 7), ("m10000BaseER", 8), ("sfpCWDM1470nm80Km", 9), ("sfpCWDM1490nm80Km", 10), ("sfpCWDM1510nm80Km", 11), ("sfpCWDM1530nm80Km", 12), ("sfpCWDM1550nm80Km", 13), ("sfpCWDM1570nm80Km", 14), ("sfpCWDM1590nm80Km", 15), ("sfpCWDM1610nm80Km", 16), ("sfpCWDM1470nm100Km", 17), ("sfpCWDM1490nm100Km", 18), ("sfpCWDM1510nm100Km", 19), ("sfpCWDM1530nm100Km", 20), ("sfpCWDM1550nm100Km", 21), ("sfpCWDM1570nm100Km", 22), ("sfpCWDM1590nm100Km", 23), ("sfpCWDM1610nm100Km", 24), ("m1000BaseLHX", 25), ("m1000BaseSX2", 26), ("m1000BaseGBXU", 27), ("m1000BaseGBXD", 28), ("notApplicable", 255),))).setMaxAccess("readonly")
snSwPortStatsLinkChange = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 3, 1, 1, 37), Counter32()).setMaxAccess("readonly")
snSwPortIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 3, 1, 1, 38), Integer32()).setMaxAccess("readonly")
snSwPortDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 3, 1, 1, 39), DisplayString()).setMaxAccess("readonly")
snSwPortInOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 3, 1, 1, 40), OctetString().subtype(subtypeSpec=ValueSizeConstraint(8,8)).setFixedLength(8)).setMaxAccess("readonly")
snSwPortOutOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 3, 1, 1, 41), OctetString().subtype(subtypeSpec=ValueSizeConstraint(8,8)).setFixedLength(8)).setMaxAccess("readonly")
snSwPortStatsInBitsPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 3, 1, 1, 42), Gauge32()).setMaxAccess("readonly")
snSwPortStatsOutBitsPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 3, 1, 1, 43), Gauge32()).setMaxAccess("readonly")
snSwPortStatsInPktsPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 3, 1, 1, 44), Gauge32()).setMaxAccess("readonly")
snSwPortStatsOutPktsPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 3, 1, 1, 45), Gauge32()).setMaxAccess("readonly")
snSwPortStatsInUtilization = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 3, 1, 1, 46), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0,10000))).setMaxAccess("readonly")
snSwPortStatsOutUtilization = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 3, 1, 1, 47), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0,10000))).setMaxAccess("readonly")
snSwPortFastSpanPortEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 3, 1, 1, 48), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1,)).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1),))).setMaxAccess("readwrite")
snSwPortFastSpanUplinkEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 3, 1, 1, 49), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1,)).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1),))).setMaxAccess("readwrite")
snSwPortVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 3, 1, 1, 50), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0,4095))).setMaxAccess("readwrite")
snSwPortRouteOnly = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 3, 1, 1, 51), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1,)).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1),)).clone('disabled')).setMaxAccess("readwrite")
snSwPortPresent = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 3, 1, 1, 52), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1,)).clone(namedValues=NamedValues(("false", 0), ("true", 1),))).setMaxAccess("readonly")
snSwPortGBICStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 3, 1, 1, 53), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3, 4,)).clone(namedValues=NamedValues(("gbic", 1), ("miniGBIC", 2), ("empty", 3), ("other", 4),))).setMaxAccess("readonly")
snSwPortStatsInKiloBitsPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 3, 1, 1, 54), Unsigned32()).setMaxAccess("readonly")
snSwPortStatsOutKiloBitsPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 3, 1, 1, 55), Unsigned32()).setMaxAccess("readonly")
snSwPortLoadInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 3, 1, 1, 56), Integer32().subtype(subtypeSpec=ValueRangeConstraint(30,300)).clone(300)).setMaxAccess("readwrite")
snSwPortTagType = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 3, 1, 1, 57), Integer32().clone(33024)).setMaxAccess("readwrite")
snSwPortInLinePowerControl = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 3, 1, 1, 58), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3, 4,)).clone(namedValues=NamedValues(("other", 1), ("disable", 2), ("enable", 3), ("enableLegacyDevice", 4),))).setMaxAccess("readwrite")
snSwPortInLinePowerWattage = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 3, 1, 1, 59), Integer32()).setMaxAccess("readwrite")
snSwPortInLinePowerClass = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 3, 1, 1, 60), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0,3))).setMaxAccess("readwrite")
snSwPortInLinePowerPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 3, 1, 1, 61), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1, 2, 3, 4, 5,)).clone(namedValues=NamedValues(("invalid", 0), ("critical", 1), ("high", 2), ("low", 3), ("medium", 4), ("other", 5),))).setMaxAccess("readwrite")
snSwPortInfoMirrorMode = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 3, 1, 1, 62), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1,)).clone(namedValues=NamedValues(("disable", 0), ("enable", 1),))).setMaxAccess("readwrite")
snSwPortStatsInJumboFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 3, 1, 1, 63), Counter64()).setMaxAccess("readonly")
snSwPortStatsOutJumboFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 3, 1, 1, 64), Counter64()).setMaxAccess("readonly")
snSwPortInLinePowerConsumed = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 3, 1, 1, 66), Integer32()).setMaxAccess("readonly")
snSwPortInLinePowerPDType = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 3, 1, 1, 67), DisplayString()).setMaxAccess("readonly")
snSwIfInfoTable = MibTable((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 3, 5), )
snSwIfInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 3, 5, 1), ).setIndexNames((0, "FOUNDRY-SN-SWITCH-GROUP-MIB", "snSwIfInfoPortNum"))
snSwIfInfoPortNum = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 3, 5, 1, 1), InterfaceIndex()).setMaxAccess("readonly")
snSwIfInfoMonitorMode = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 3, 5, 1, 2), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1, 2, 3,)).clone(namedValues=NamedValues(("disabled", 0), ("input", 1), ("output", 2), ("both", 3),))).setMaxAccess("readwrite")
snSwIfInfoMirrorPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 3, 5, 1, 3), OctetString()).setMaxAccess("readwrite")
snSwIfInfoTagMode = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 3, 5, 1, 4), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3,)).clone(namedValues=NamedValues(("tagged", 1), ("untagged", 2), ("dual", 3),))).setMaxAccess("readwrite")
snSwIfInfoTagType = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 3, 5, 1, 5), Integer32().clone(33024)).setMaxAccess("readwrite")
snSwIfInfoChnMode = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 3, 5, 1, 6), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1, 2,)).clone(namedValues=NamedValues(("none", 0), ("halfDuplex", 1), ("fullDuplex", 2),))).setMaxAccess("readwrite")
snSwIfInfoSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 3, 5, 1, 7), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11,)).clone(namedValues=NamedValues(("none", 0), ("sAutoSense", 1), ("s10M", 2), ("s100M", 3), ("s1G", 4), ("s1GM", 5), ("s155M", 6), ("s10G", 7), ("s622M", 8), ("s2488M", 9), ("s9953M", 10), ("s16G", 11),))).setMaxAccess("readwrite")
snSwIfInfoMediaType = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 3, 5, 1, 8), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14,)).clone(namedValues=NamedValues(("other", 1), ("m100BaseTX", 2), ("m100BaseFX", 3), ("m1000BaseFX", 4), ("mT3", 5), ("m155ATM", 6), ("m1000BaseTX", 7), ("m622ATM", 8), ("m155POS", 9), ("m622POS", 10), ("m2488POS", 11), ("m10000BaseFX", 12), ("m9953POS", 13), ("m16GStacking", 14),))).setMaxAccess("readonly")
snSwIfInfoConnectorType = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 3, 5, 1, 9), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3,)).clone(namedValues=NamedValues(("other", 1), ("copper", 2), ("fiber", 3),))).setMaxAccess("readonly")
snSwIfInfoAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 3, 5, 1, 10), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3,)).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("testing", 3),))).setMaxAccess("readwrite")
snSwIfInfoLinkStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 3, 5, 1, 11), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3,)).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("testing", 3),))).setMaxAccess("readonly")
snSwIfInfoPortQos = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 3, 5, 1, 12), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7,)).clone(namedValues=NamedValues(("level0", 0), ("level1", 1), ("level2", 2), ("level3", 3), ("level4", 4), ("level5", 5), ("level6", 6), ("level7", 7),))).setMaxAccess("readwrite")
snSwIfInfoPhysAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 3, 5, 1, 13), PhysAddress()).setMaxAccess("readonly")
snSwIfLockAddressCount = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 3, 5, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0,2048)).clone(8)).setMaxAccess("readwrite")
snSwIfStpPortEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 3, 5, 1, 15), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1,)).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1),))).setMaxAccess("readwrite")
snSwIfDhcpGateListId = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 3, 5, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0,32))).setMaxAccess("readwrite")
snSwIfName = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 3, 5, 1, 17), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0,255))).setMaxAccess("readwrite")
snSwIfDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 3, 5, 1, 18), DisplayString()).setMaxAccess("readonly")
snSwIfInfoAutoNegotiate = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 3, 5, 1, 19), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1, 2, 3, 4,)).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1), ("negFullAuto", 2), ("global", 3), ("other", 4),)).clone('global')).setMaxAccess("readwrite")
snSwIfInfoFlowControl = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 3, 5, 1, 20), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1,)).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1),)).clone('enabled')).setMaxAccess("readwrite")
snSwIfInfoGigType = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 3, 5, 1, 21), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 127, 128, 129, 130, 131, 132, 133, 134, 136, 137, 138, 139, 140, 141, 142, 143, 144, 255,)).clone(namedValues=NamedValues(("m1000BaseSX", 0), ("m1000BaseLX", 1), ("m1000BaseLH", 2), ("m1000BaseLHA", 3), ("m1000BaseLHB", 4), ("m1000BaseTX", 5), ("m10000BaseSR", 6), ("m10000BaseLR", 7), ("m10000BaseER", 8), ("sfpCWDM1470nm80Km", 9), ("sfpCWDM1490nm80Km", 10), ("sfpCWDM1510nm80Km", 11), ("sfpCWDM1530nm80Km", 12), ("sfpCWDM1550nm80Km", 13), ("sfpCWDM1570nm80Km", 14), ("sfpCWDM1590nm80Km", 15), ("sfpCWDM1610nm80Km", 16), ("sfpCWDM1470nm100Km", 17), ("sfpCWDM1490nm100Km", 18), ("sfpCWDM1510nm100Km", 19), ("sfpCWDM1530nm100Km", 20), ("sfpCWDM1550nm100Km", 21), ("sfpCWDM1570nm100Km", 22), ("sfpCWDM1590nm100Km", 23), ("sfpCWDM1610nm100Km", 24), ("m1000BaseLHX", 25), ("m1000BaseSX2", 26), ("mSFP1000BaseBXU", 27), ("mSFP1000BaseBXD", 28), ("mSFP100BaseBX", 29), ("mSFP100BaseBXU", 30), ("mSFP100BaseBXD", 31), ("mSFP100BaseFX", 32), ("mSFP100BaseFXIR", 33), ("mSFP100BaseFXLR", 34), ("m1000BaseLMC", 35), ("mXFP10000BaseSR", 36), ("mXFP10000BaseLR", 37), ("mXFP10000BaseER", 38), ("mXFP10000BaseSW", 39), ("mXFP10000BaseLW", 40), ("mXFP10000BaseEW", 41), ("mXFP10000BaseCX4", 42), ("mXFP10000BaseZR", 43), ("mXFP10000BaseZRD", 44), ("m1000BaseC6553", 45), ("mXFP10000BaseSRSW", 46), ("mXFP10000BaseLRLW", 47), ("mXFP10000BaseEREW", 48), ("m1000BaseGBXU", 127), ("m1000BaseGBXD", 128), ("m1000BaseFBX", 129), ("m1000BaseFBXU", 130), ("m1000BaseFBXD", 131), ("m1000BaseFX", 132), ("m1000BaseFXIR", 133), ("m1000BaseFXLR", 134), ("m1000BaseXGSR", 136), ("m1000BaseXGLR", 137), ("m1000BaseXGER", 138), ("m1000BaseXGSW", 139), ("m1000BaseXGLW", 140), ("m1000BaseXGEW", 141), ("m1000BaseXGCX4", 142), ("m1000BaseXGZR", 143), ("m1000BaseXGZRD", 144), ("notApplicable", 255),))).setMaxAccess("readonly")
snSwIfFastSpanPortEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 3, 5, 1, 22), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1,)).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1),))).setMaxAccess("readwrite")
snSwIfFastSpanUplinkEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 3, 5, 1, 23), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1,)).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1),))).setMaxAccess("readwrite")
snSwIfVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 3, 5, 1, 24), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0,4095))).setMaxAccess("readwrite")
snSwIfRouteOnly = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 3, 5, 1, 25), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1,)).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1),)).clone('disabled')).setMaxAccess("readwrite")
snSwIfPresent = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 3, 5, 1, 26), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1,)).clone(namedValues=NamedValues(("false", 0), ("true", 1),))).setMaxAccess("readonly")
snSwIfGBICStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 3, 5, 1, 27), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3, 4,)).clone(namedValues=NamedValues(("gbic", 1), ("miniGBIC", 2), ("empty", 3), ("other", 4),))).setMaxAccess("readonly")
snSwIfLoadInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 3, 5, 1, 28), Integer32().subtype(subtypeSpec=ValueRangeConstraint(30,300)).clone(300)).setMaxAccess("readwrite")
snSwIfStatsInFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 3, 5, 1, 29), Counter32()).setMaxAccess("readonly")
snSwIfStatsOutFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 3, 5, 1, 30), Counter32()).setMaxAccess("readonly")
snSwIfStatsAlignErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 3, 5, 1, 31), Counter32()).setMaxAccess("readonly")
snSwIfStatsFCSErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 3, 5, 1, 32), Counter32()).setMaxAccess("readonly")
snSwIfStatsMultiColliFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 3, 5, 1, 33), Counter32()).setMaxAccess("readonly")
snSwIfStatsTxColliFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 3, 5, 1, 34), Counter32()).setMaxAccess("readonly")
snSwIfStatsRxColliFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 3, 5, 1, 35), Counter32()).setMaxAccess("readonly")
snSwIfStatsFrameTooLongs = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 3, 5, 1, 36), Counter32()).setMaxAccess("readonly")
snSwIfStatsFrameTooShorts = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 3, 5, 1, 37), Counter32()).setMaxAccess("readonly")
snSwIfStatsInBcastFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 3, 5, 1, 38), Counter32()).setMaxAccess("readonly")
snSwIfStatsOutBcastFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 3, 5, 1, 39), Counter32()).setMaxAccess("readonly")
snSwIfStatsInMcastFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 3, 5, 1, 40), Counter32()).setMaxAccess("readonly")
snSwIfStatsOutMcastFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 3, 5, 1, 41), Counter32()).setMaxAccess("readonly")
snSwIfStatsInDiscard = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 3, 5, 1, 42), Counter32()).setMaxAccess("readonly")
snSwIfStatsOutDiscard = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 3, 5, 1, 43), Counter32()).setMaxAccess("readonly")
snSwIfStatsMacStations = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 3, 5, 1, 44), Integer32()).setMaxAccess("readonly")
snSwIfStatsLinkChange = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 3, 5, 1, 45), Counter32()).setMaxAccess("readonly")
snSwIfInOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 3, 5, 1, 46), Counter64()).setMaxAccess("readonly")
snSwIfOutOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 3, 5, 1, 47), Counter64()).setMaxAccess("readonly")
snSwIfStatsInBitsPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 3, 5, 1, 48), Gauge32()).setMaxAccess("readonly")
snSwIfStatsOutBitsPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 3, 5, 1, 49), Gauge32()).setMaxAccess("readonly")
snSwIfStatsInPktsPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 3, 5, 1, 50), Gauge32()).setMaxAccess("readonly")
snSwIfStatsOutPktsPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 3, 5, 1, 51), Gauge32()).setMaxAccess("readonly")
snSwIfStatsInUtilization = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 3, 5, 1, 52), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0,10000))).setMaxAccess("readonly")
snSwIfStatsOutUtilization = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 3, 5, 1, 53), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0,10000))).setMaxAccess("readonly")
snSwIfStatsInKiloBitsPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 3, 5, 1, 54), Unsigned32()).setMaxAccess("readonly")
snSwIfStatsOutKiloBitsPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 3, 5, 1, 55), Unsigned32()).setMaxAccess("readonly")
snSwIfStatsInJumboFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 3, 5, 1, 56), Counter64()).setMaxAccess("readonly")
snSwIfStatsOutJumboFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 3, 5, 1, 57), Counter64()).setMaxAccess("readonly")
snSwIfInfoMirrorMode = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 3, 5, 1, 58), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1,)).clone(namedValues=NamedValues(("disable", 0), ("enable", 1),))).setMaxAccess("readwrite")
snSwIfMacLearningDisable = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 3, 5, 1, 59), TruthValue().clone('false')).setMaxAccess("readwrite")
snInterfaceId = MibIdentifier((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 3, 2))
snEthernetInterface = MibIdentifier((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 3, 2, 1))
snPosInterface = MibIdentifier((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 3, 2, 2))
snAtmInterface = MibIdentifier((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 3, 2, 3))
snVirtualInterface = MibIdentifier((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 3, 2, 4))
snLoopbackInterface = MibIdentifier((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 3, 2, 5))
snGreTunnelInterface = MibIdentifier((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 3, 2, 6))
snSubInterface = MibIdentifier((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 3, 2, 7))
snMplsTunnelInterface = MibIdentifier((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 3, 2, 8))
snPvcInterface = MibIdentifier((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 3, 2, 9))
snMgmtEthernetInterface = MibIdentifier((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 3, 2, 10))
snTrunkInterface = MibIdentifier((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 3, 2, 11))
snVirtualMgmtInterface = MibIdentifier((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 3, 2, 12))
sn6to4TunnelInterface = MibIdentifier((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 3, 2, 13))
snInterfaceLookupTable = MibTable((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 3, 3), )
snInterfaceLookupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 3, 3, 1), ).setIndexNames((0, "FOUNDRY-SN-SWITCH-GROUP-MIB", "snInterfaceLookupInterfaceId"))
snInterfaceLookupInterfaceId = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 3, 3, 1, 1), InterfaceId()).setMaxAccess("readonly")
snInterfaceLookupIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 3, 3, 1, 2), Integer32()).setMaxAccess("readonly")
snIfIndexLookupTable = MibTable((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 3, 4), )
snIfIndexLookupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 3, 4, 1), ).setIndexNames((0, "FOUNDRY-SN-SWITCH-GROUP-MIB", "snIfIndexLookupIfIndex"))
snIfIndexLookupIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 3, 4, 1, 1), Integer32()).setMaxAccess("readonly")
snIfIndexLookupInterfaceId = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 3, 4, 1, 2), InterfaceId()).setMaxAccess("readonly")
snInterfaceLookup2Table = MibTable((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 3, 7), )
snInterfaceLookup2Entry = MibTableRow((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 3, 7, 1), ).setIndexNames((0, "FOUNDRY-SN-SWITCH-GROUP-MIB", "snInterfaceLookup2InterfaceId"))
snInterfaceLookup2InterfaceId = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 3, 7, 1, 1), InterfaceId2())
snInterfaceLookup2IfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 3, 7, 1, 2), Integer32()).setMaxAccess("readonly")
snIfIndexLookup2Table = MibTable((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 3, 8), )
snIfIndexLookup2Entry = MibTableRow((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 3, 8, 1), ).setIndexNames((0, "FOUNDRY-SN-SWITCH-GROUP-MIB", "snIfIndexLookup2IfIndex"))
snIfIndexLookup2IfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 3, 8, 1, 1), Integer32())
snIfIndexLookup2InterfaceId = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 3, 8, 1, 2), InterfaceId2()).setMaxAccess("readonly")
snIfOpticalMonitoringInfoTable = MibTable((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 3, 6), )
snIfOpticalMonitoringInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 3, 6, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
snIfOpticalMonitoringTemperature = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 3, 6, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0,32))).setMaxAccess("readonly")
snIfOpticalMonitoringTxPower = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 3, 6, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0,32))).setMaxAccess("readonly")
snIfOpticalMonitoringRxPower = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 3, 6, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0,32))).setMaxAccess("readonly")
snIfOpticalMonitoringTxBiasCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 3, 6, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0,32))).setMaxAccess("readonly")
snIfMediaInfoTable = MibTable((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 3, 9), )
snIfMediaInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 3, 9, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
snIfMediaType = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 3, 9, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0,128))).setMaxAccess("readonly")
snIfMediaVendorName = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 3, 9, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0,128))).setMaxAccess("readonly")
snIfMediaVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 3, 9, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0,128))).setMaxAccess("readonly")
snIfMediaPartNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 3, 9, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0,128))).setMaxAccess("readonly")
snIfMediaSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 3, 9, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0,128))).setMaxAccess("readonly")
snFdbTable = MibTable((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 4, 1), )
snFdbEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 4, 1, 1), ).setIndexNames((0, "FOUNDRY-SN-SWITCH-GROUP-MIB", "snFdbStationIndex"))
snFdbStationIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 4, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1,256))).setMaxAccess("readonly")
snFdbStationAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 4, 1, 1, 2), PhysAddress()).setMaxAccess("readwrite")
snFdbStationPort = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 4, 1, 1, 3), Integer32()).setMaxAccess("readwrite")
snFdbVLanId = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 4, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1,65535))).setMaxAccess("readwrite")
snFdbStationQos = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 4, 1, 1, 5), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7,)).clone(namedValues=NamedValues(("level0", 0), ("level1", 1), ("level2", 2), ("level3", 3), ("level4", 4), ("level5", 5), ("level6", 6), ("level7", 7),))).setMaxAccess("readwrite")
snFdbStationType = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 4, 1, 1, 6), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1, 2,)).clone(namedValues=NamedValues(("notSupported", 0), ("host", 1), ("router", 2),))).setMaxAccess("readwrite")
snFdbRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 4, 1, 1, 7), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3, 4,)).clone(namedValues=NamedValues(("other", 1), ("valid", 2), ("delete", 3), ("create", 4),))).setMaxAccess("readwrite")
snFdbStationIf = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 4, 1, 1, 8), InterfaceIndex()).setMaxAccess("readwrite")
snPortStpTable = MibTable((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 5, 1), )
snPortStpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 5, 1, 1), ).setIndexNames((0, "FOUNDRY-SN-SWITCH-GROUP-MIB", "snPortStpVLanId"), (0, "FOUNDRY-SN-SWITCH-GROUP-MIB", "snPortStpPortNum"))
snPortStpVLanId = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 5, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1,65535))).setMaxAccess("readonly")
snPortStpPortNum = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 5, 1, 1, 2), Integer32()).setMaxAccess("readonly")
snPortStpPortPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 5, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0,255))).setMaxAccess("readwrite")
snPortStpPathCost = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 5, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0,65535))).setMaxAccess("readwrite")
snPortStpOperState = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 5, 1, 1, 5), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1,)).clone(namedValues=NamedValues(("notActivated", 0), ("activated", 1),))).setMaxAccess("readonly")
snPortStpPortEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 5, 1, 1, 6), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2,)).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2),)))
snPortStpPortForwardTransitions = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 5, 1, 1, 7), Counter32())
snPortStpPortState = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 5, 1, 1, 8), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3, 4, 5, 6, 7,)).clone(namedValues=NamedValues(("disabled", 1), ("blocking", 2), ("listening", 3), ("learning", 4), ("forwarding", 5), ("broken", 6), ("preforwarding", 7),))).setMaxAccess("readonly")
snPortStpPortDesignatedCost = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 5, 1, 1, 9), Integer32()).setMaxAccess("readonly")
snPortStpPortDesignatedRoot = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 5, 1, 1, 10), BridgeId()).setMaxAccess("readonly")
snPortStpPortDesignatedBridge = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 5, 1, 1, 11), BridgeId()).setMaxAccess("readonly")
snPortStpPortDesignatedPort = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 5, 1, 1, 12), OctetString().subtype(subtypeSpec=ValueSizeConstraint(2,2)).setFixedLength(2)).setMaxAccess("readonly")
snPortStpPortAdminRstp = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 5, 1, 1, 13), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2,)).clone(namedValues=NamedValues(("true", 1), ("false", 2),))).setMaxAccess("readwrite")
snPortStpPortProtocolMigration = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 5, 1, 1, 14), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2,)).clone(namedValues=NamedValues(("true", 1), ("false", 2),))).setMaxAccess("readwrite")
snPortStpPortAdminEdgePort = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 5, 1, 1, 15), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2,)).clone(namedValues=NamedValues(("true", 1), ("false", 2),))).setMaxAccess("readwrite")
snPortStpPortAdminPointToPoint = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 5, 1, 1, 16), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2,)).clone(namedValues=NamedValues(("true", 1), ("false", 2),))).setMaxAccess("readwrite")
snIfStpTable = MibTable((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 5, 2), )
snIfStpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 5, 2, 1), ).setIndexNames((0, "FOUNDRY-SN-SWITCH-GROUP-MIB", "snIfStpVLanId"), (0, "FOUNDRY-SN-SWITCH-GROUP-MIB", "snIfStpPortNum"))
snIfStpVLanId = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 5, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1,65535))).setMaxAccess("readonly")
snIfStpPortNum = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 5, 2, 1, 2), InterfaceIndex()).setMaxAccess("readonly")
snIfStpPortPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 5, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0,255))).setMaxAccess("readwrite")
snIfStpCfgPathCost = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 5, 2, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0,200000000))).setMaxAccess("readwrite")
snIfStpOperState = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 5, 2, 1, 5), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1,)).clone(namedValues=NamedValues(("notActivated", 0), ("activated", 1),))).setMaxAccess("readonly")
snIfStpPortState = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 5, 2, 1, 8), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3, 4, 5, 6, 7,)).clone(namedValues=NamedValues(("disabled", 1), ("blocking", 2), ("listening", 3), ("learning", 4), ("forwarding", 5), ("broken", 6), ("preforwarding", 7),))).setMaxAccess("readonly")
snIfStpPortDesignatedCost = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 5, 2, 1, 9), Integer32()).setMaxAccess("readonly")
snIfStpPortDesignatedRoot = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 5, 2, 1, 10), BridgeId()).setMaxAccess("readonly")
snIfStpPortDesignatedBridge = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 5, 2, 1, 11), BridgeId()).setMaxAccess("readonly")
snIfStpPortDesignatedPort = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 5, 2, 1, 12), OctetString().subtype(subtypeSpec=ValueSizeConstraint(2,2)).setFixedLength(2)).setMaxAccess("readonly")
snIfStpPortAdminRstp = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 5, 2, 1, 13), TruthValue()).setMaxAccess("readwrite")
snIfStpPortProtocolMigration = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 5, 2, 1, 14), TruthValue()).setMaxAccess("readwrite")
snIfStpPortAdminEdgePort = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 5, 2, 1, 15), TruthValue()).setMaxAccess("readwrite")
snIfStpPortAdminPointToPoint = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 5, 2, 1, 16), TruthValue()).setMaxAccess("readwrite")
snIfStpOperPathCost = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 5, 2, 1, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0,200000000))).setMaxAccess("readonly")
snIfStpPortRole = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 5, 2, 1, 18), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1, 2, 3, 4, 5,)).clone(namedValues=NamedValues(("unknown", 0), ("alternate", 1), ("root", 2), ("designated", 3), ("backupRole", 4), ("disabledRole", 5),))).setMaxAccess("readonly")
snIfStpBPDUTransmitted = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 5, 2, 1, 19), Counter32()).setMaxAccess("readonly")
snIfStpBPDUReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 5, 2, 1, 20), Counter32()).setMaxAccess("readonly")
snIfRstpConfigBPDUReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 5, 2, 1, 21), Counter32()).setMaxAccess("readonly")
snIfRstpTCNBPDUReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 5, 2, 1, 22), Counter32()).setMaxAccess("readonly")
snIfRstpConfigBPDUTransmitted = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 5, 2, 1, 23), Counter32()).setMaxAccess("readonly")
snIfRstpTCNBPDUTransmitted = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 5, 2, 1, 24), Counter32()).setMaxAccess("readonly")
snTrunkTable = MibTable((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 6, 1), )
snTrunkEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 6, 1, 1), ).setIndexNames((0, "FOUNDRY-SN-SWITCH-GROUP-MIB", "snTrunkIndex"))
snTrunkIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 6, 1, 1, 1), Integer32()).setMaxAccess("readonly")
snTrunkPortMask = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 6, 1, 1, 2), PortMask()).setMaxAccess("readwrite")
snTrunkType = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 6, 1, 1, 3), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2,)).clone(namedValues=NamedValues(("switch", 1), ("server", 2),))).setMaxAccess("readwrite")
snMSTrunkTable = MibTable((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 6, 2), )
snMSTrunkEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 6, 2, 1), ).setIndexNames((0, "FOUNDRY-SN-SWITCH-GROUP-MIB", "snMSTrunkPortIndex"))
snMSTrunkPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 6, 2, 1, 1), Integer32()).setMaxAccess("readonly")
snMSTrunkPortList = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 6, 2, 1, 2), OctetString()).setMaxAccess("readwrite")
snMSTrunkType = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 6, 2, 1, 3), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2,)).clone(namedValues=NamedValues(("switch", 1), ("server", 2),))).setMaxAccess("readwrite")
snMSTrunkRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 6, 2, 1, 4), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3, 4, 5,)).clone(namedValues=NamedValues(("invalid", 1), ("valid", 2), ("delete", 3), ("create", 4), ("modify", 5),))).setMaxAccess("readwrite")
snMSTrunkIfTable = MibTable((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 6, 3), )
snMSTrunkIfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 6, 3, 1), ).setIndexNames((0, "FOUNDRY-SN-SWITCH-GROUP-MIB", "snMSTrunkIfIndex"))
snMSTrunkIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 6, 3, 1, 1), Integer32()).setMaxAccess("readonly")
snMSTrunkIfList = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 6, 3, 1, 2), OctetString()).setMaxAccess("readwrite")
snMSTrunkIfType = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 6, 3, 1, 3), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2,)).clone(namedValues=NamedValues(("switch", 1), ("server", 2),))).setMaxAccess("readwrite")
snMSTrunkIfRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 6, 3, 1, 4), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3, 4, 5,)).clone(namedValues=NamedValues(("invalid", 1), ("valid", 2), ("delete", 3), ("create", 4), ("modify", 5),))).setMaxAccess("readwrite")
snSwSummaryMode = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 7, 1), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1,)).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1),))).setMaxAccess("readwrite")
snDhcpGatewayListTable = MibTable((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 8, 1), )
snDhcpGatewayListEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 8, 1, 1), ).setIndexNames((0, "FOUNDRY-SN-SWITCH-GROUP-MIB", "snDhcpGatewayListId"))
snDhcpGatewayListId = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 8, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1,32))).setMaxAccess("readonly")
snDhcpGatewayListAddrList = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 8, 1, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4,32))).setMaxAccess("readwrite")
snDhcpGatewayListRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 8, 1, 1, 3), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3, 4,)).clone(namedValues=NamedValues(("other", 1), ("valid", 2), ("delete", 3), ("create", 4),))).setMaxAccess("readwrite")
snDnsDomainName = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 9, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0,80))).setMaxAccess("readwrite")
snDnsGatewayIpAddrList = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 9, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(16,16)).setFixedLength(16)).setMaxAccess("readwrite")
snMacFilterTable = MibTable((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 10, 1), )
snMacFilterEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 10, 1, 1), ).setIndexNames((0, "FOUNDRY-SN-SWITCH-GROUP-MIB", "snMacFilterIndex"))
snMacFilterIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 10, 1, 1, 1), Integer32()).setMaxAccess("readonly")
snMacFilterAction = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 10, 1, 1, 2), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1,)).clone(namedValues=NamedValues(("deny", 0), ("permit", 1),))).setMaxAccess("readwrite")
snMacFilterSourceMac = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 10, 1, 1, 3), MacAddress()).setMaxAccess("readwrite")
snMacFilterSourceMask = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 10, 1, 1, 4), MacAddress()).setMaxAccess("readwrite")
snMacFilterDestMac = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 10, 1, 1, 5), MacAddress()).setMaxAccess("readwrite")
snMacFilterDestMask = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 10, 1, 1, 6), MacAddress()).setMaxAccess("readwrite")
snMacFilterOperator = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 10, 1, 1, 7), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1, 2, 3,)).clone(namedValues=NamedValues(("equal", 0), ("notEqual", 1), ("less", 2), ("greater", 3),))).setMaxAccess("readwrite")
snMacFilterFrameType = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 10, 1, 1, 8), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1, 2, 3,)).clone(namedValues=NamedValues(("notUsed", 0), ("ethernet", 1), ("llc", 2), ("snap", 3),))).setMaxAccess("readwrite")
snMacFilterFrameTypeNum = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 10, 1, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0,65535))).setMaxAccess("readwrite")
snMacFilterRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 10, 1, 1, 10), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3, 4, 5,)).clone(namedValues=NamedValues(("invalid", 1), ("valid", 2), ("delete", 3), ("create", 4), ("modify", 5),))).setMaxAccess("readwrite")
snMacFilterPortAccessTable = MibTable((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 10, 2), )
snMacFilterPortAccessEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 10, 2, 1), ).setIndexNames((0, "FOUNDRY-SN-SWITCH-GROUP-MIB", "snMacFilterPortAccessPortIndex"))
snMacFilterPortAccessPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 10, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1,3900))).setMaxAccess("readonly")
snMacFilterPortAccessFilters = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 10, 2, 1, 2), OctetString()).setMaxAccess("readwrite")
snMacFilterPortAccessRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 10, 2, 1, 3), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3, 4,)).clone(namedValues=NamedValues(("invalid", 1), ("valid", 2), ("delete", 3), ("create", 4),))).setMaxAccess("readwrite")
snMacFilterIfAccessTable = MibTable((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 10, 3), )
snMacFilterIfAccessEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 10, 3, 1), ).setIndexNames((0, "FOUNDRY-SN-SWITCH-GROUP-MIB", "snMacFilterIfAccessPortIndex"))
snMacFilterIfAccessPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 10, 3, 1, 1), InterfaceIndex()).setMaxAccess("readonly")
snMacFilterIfAccessFilters = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 10, 3, 1, 2), OctetString()).setMaxAccess("readwrite")
snMacFilterIfAccessRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 10, 3, 1, 3), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3, 4,)).clone(namedValues=NamedValues(("invalid", 1), ("valid", 2), ("delete", 3), ("create", 4),))).setMaxAccess("readwrite")
snNTPGeneral = MibIdentifier((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 11, 1))
snNTPPollInterval = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 11, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1,65535)).clone(1800)).setMaxAccess("readwrite")
snNTPTimeZone = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 11, 1, 2), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45,)).clone(namedValues=NamedValues(("alaska", 0), ("aleutian", 1), ("arizona", 2), ("central", 3), ("eastIndiana", 4), ("eastern", 5), ("hawaii", 6), ("michigan", 7), ("mountain", 8), ("pacific", 9), ("samoa", 10), ("gmtPlus1200", 11), ("gmtPlus1100", 12), ("gmtPlus1000", 13), ("gmtPlus0900", 14), ("gmtPlus0800", 15), ("gmtPlus0700", 16), ("gmtPlus0600", 17), ("gmtPlus0500", 18), ("gmtPlus0400", 19), ("gmtPlus0300", 20), ("gmtPlus0200", 21), ("gmtPlus0100", 22), ("gmt", 23), ("gmtMinus0100", 24), ("gmtMinus0200", 25), ("gmtMinus0300", 26), ("gmtMinus0400", 27), ("gmtMinus0500", 28), ("gmtMinus0600", 29), ("gmtMinus0700", 30), ("gmtMinus0800", 31), ("gmtMinus0900", 32), ("gmtMinus1000", 33), ("gmtMinus1100", 34), ("gmtMinus1200", 35), ("gmtPlus1130", 36), ("gmtPlus1030", 37), ("gmtPlus0930", 38), ("gmtPlus0630", 39), ("gmtPlus0530", 40), ("gmtPlus0430", 41), ("gmtPlus0330", 42), ("gmtMinus0330", 43), ("gmtMinus0830", 44), ("gmtMinus0930", 45),)).clone('gmt')).setMaxAccess("readwrite")
snNTPSummerTimeEnable = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 11, 1, 3), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1,)).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1),)).clone('disabled')).setMaxAccess("readwrite")
snNTPSystemClock = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 11, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(7,7)).setFixedLength(7)).setMaxAccess("readwrite")
snNTPSync = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 11, 1, 5), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2,)).clone(namedValues=NamedValues(("other", 1), ("synchronize", 2),))).setMaxAccess("readwrite")
snNTPServerTable = MibTable((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 11, 2), )
snNTPServerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 11, 2, 1), ).setIndexNames((0, "FOUNDRY-SN-SWITCH-GROUP-MIB", "snNTPServerIp"))
snNTPServerIp = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 11, 2, 1, 1), IpAddress()).setMaxAccess("readonly")
snNTPServerVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 11, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1,4)).clone(1)).setMaxAccess("readwrite")
snNTPServerRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 11, 2, 1, 3), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3, 4,)).clone(namedValues=NamedValues(("other", 1), ("valid", 2), ("delete", 3), ("create", 4),))).setMaxAccess("readwrite")
snRadiusGeneral = MibIdentifier((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 12, 1))
snRadiusSNMPAccess = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 12, 1, 1), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1,)).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1),)).clone('disabled')).setMaxAccess("readonly")
snRadiusEnableTelnetAuth = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 12, 1, 2), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1,)).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1),)).clone('disabled')).setMaxAccess("readwrite")
snRadiusRetransmit = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 12, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0,5)).clone(3)).setMaxAccess("readwrite")
snRadiusTimeOut = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 12, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1,60)).clone(3)).setMaxAccess("readwrite")
snRadiusDeadTime = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 12, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1,5)).clone(3)).setMaxAccess("readwrite")
snRadiusKey = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 12, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0,32))).setMaxAccess("readwrite")
snRadiusLoginMethod = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 12, 1, 7), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0,7))).setMaxAccess("readwrite")
snRadiusEnableMethod = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 12, 1, 8), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0,7))).setMaxAccess("readwrite")
snRadiusWebServerMethod = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 12, 1, 9), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0,7))).setMaxAccess("readwrite")
snRadiusSNMPServerMethod = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 12, 1, 10), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0,7))).setMaxAccess("readwrite")
snRadiusServerTable = MibTable((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 12, 2), )
snRadiusServerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 12, 2, 1), ).setIndexNames((0, "FOUNDRY-SN-SWITCH-GROUP-MIB", "snRadiusServerIp"))
snRadiusServerIp = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 12, 2, 1, 1), IpAddress()).setMaxAccess("readonly")
snRadiusServerAuthPort = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 12, 2, 1, 2), Integer32().clone(1812)).setMaxAccess("readwrite")
snRadiusServerAcctPort = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 12, 2, 1, 3), Integer32().clone(1813)).setMaxAccess("readwrite")
snRadiusServerRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 12, 2, 1, 4), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3, 4,)).clone(namedValues=NamedValues(("other", 1), ("valid", 2), ("delete", 3), ("create", 4),))).setMaxAccess("readwrite")
snRadiusServerRowKey = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 12, 2, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0,32))).setMaxAccess("readwrite")
snRadiusServerUsage = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 12, 2, 1, 6), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3, 4,)).clone(namedValues=NamedValues(("default", 1), ("authenticationOnly", 2), ("authorizationOnly", 3), ("accountingOnly", 4),))).setMaxAccess("readwrite")
snTacacsGeneral = MibIdentifier((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 13, 1))
snTacacsRetransmit = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 13, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0,5)).clone(3)).setMaxAccess("readwrite")
snTacacsTimeOut = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 13, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1,15)).clone(3)).setMaxAccess("readwrite")
snTacacsDeadTime = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 13, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1,5)).clone(3)).setMaxAccess("readwrite")
snTacacsKey = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 13, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0,32))).setMaxAccess("readwrite")
snTacacsSNMPAccess = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 13, 1, 5), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1,)).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1),)).clone('disabled')).setMaxAccess("readonly")
snTacacsServerTable = MibTable((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 13, 2), )
snTacacsServerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 13, 2, 1), ).setIndexNames((0, "FOUNDRY-SN-SWITCH-GROUP-MIB", "snTacacsServerIp"))
snTacacsServerIp = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 13, 2, 1, 1), IpAddress()).setMaxAccess("readonly")
snTacacsServerAuthPort = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 13, 2, 1, 2), Integer32().clone(49)).setMaxAccess("readwrite")
snTacacsServerRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 13, 2, 1, 3), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3, 4,)).clone(namedValues=NamedValues(("other", 1), ("valid", 2), ("delete", 3), ("create", 4),))).setMaxAccess("readwrite")
snTacacsServerRowKey = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 13, 2, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0,32))).setMaxAccess("readwrite")
snTacacsServerUsage = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 13, 2, 1, 5), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3, 4,)).clone(namedValues=NamedValues(("default", 1), ("authenticationOnly", 2), ("authorizationOnly", 3), ("accountingOnly", 4),))).setMaxAccess("readwrite")
snQosProfileTable = MibTable((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 14, 1), )
snQosProfileEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 14, 1, 1), ).setIndexNames((0, "FOUNDRY-SN-SWITCH-GROUP-MIB", "snQosProfileIndex"))
snQosProfileIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 14, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1,8))).setMaxAccess("readonly")
snQosProfileName = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 14, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0,32))).setMaxAccess("readwrite")
snQosProfileRequestedBandwidth = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 14, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0,100))).setMaxAccess("readwrite")
snQosProfileCalculatedBandwidth = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 14, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0,100))).setMaxAccess("readonly")
snQosBindTable = MibTable((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 14, 2), )
snQosBindEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 14, 2, 1), ).setIndexNames((0, "FOUNDRY-SN-SWITCH-GROUP-MIB", "snQosBindIndex"))
snQosBindIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 14, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1,8))).setMaxAccess("readonly")
snQosBindPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 14, 2, 1, 2), Integer32()).setMaxAccess("readonly")
snQosBindProfileIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 14, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1,8))).setMaxAccess("readwrite")
snDosAttack = MibIdentifier((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 14, 3))
snDosAttackGlobal = MibIdentifier((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 14, 3, 1))
snDosAttackICMPDropCount = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 14, 3, 1, 1), Counter32()).setMaxAccess("readonly")
snDosAttackICMPBlockCount = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 14, 3, 1, 2), Counter32()).setMaxAccess("readonly")
snDosAttackSYNDropCount = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 14, 3, 1, 3), Counter32()).setMaxAccess("readonly")
snDosAttackSYNBlockCount = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 14, 3, 1, 4), Counter32()).setMaxAccess("readonly")
snDosAttackPortTable = MibTable((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 14, 3, 2), )
snDosAttackPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 14, 3, 2, 1), ).setIndexNames((0, "FOUNDRY-SN-SWITCH-GROUP-MIB", "snDosAttackPort"))
snDosAttackPort = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 14, 3, 2, 1, 1), Integer32()).setMaxAccess("readonly")
snDosAttackPortICMPDropCount = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 14, 3, 2, 1, 2), Counter32()).setMaxAccess("readonly")
snDosAttackPortICMPBlockCount = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 14, 3, 2, 1, 3), Counter32()).setMaxAccess("readonly")
snDosAttackPortSYNDropCount = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 14, 3, 2, 1, 4), Counter32()).setMaxAccess("readonly")
snDosAttackPortSYNBlockCount = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 14, 3, 2, 1, 5), Counter32()).setMaxAccess("readonly")
snAuthentication = MibIdentifier((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 15, 1))
snAuthorization = MibIdentifier((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 15, 2))
snAccounting = MibIdentifier((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 15, 3))
snAuthorizationCommandMethods = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 15, 2, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0,3))).setMaxAccess("readwrite")
snAuthorizationCommandLevel = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 15, 2, 2), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 4, 5,)).clone(namedValues=NamedValues(("level0", 0), ("level4", 4), ("level5", 5),))).setMaxAccess("readwrite")
snAuthorizationExec = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 15, 2, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0,3))).setMaxAccess("readwrite")
snAccountingCommandMethods = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 15, 3, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0,3))).setMaxAccess("readwrite")
snAccountingCommandLevel = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 15, 3, 2), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 4, 5,)).clone(namedValues=NamedValues(("level0", 0), ("level4", 4), ("level5", 5),))).setMaxAccess("readwrite")
snAccountingExec = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 15, 3, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0,3))).setMaxAccess("readwrite")
snAccountingSystem = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 15, 3, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0,3))).setMaxAccess("readwrite")
snNetFlowGlb = MibIdentifier((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 18, 1))
snNetFlowGblEnable = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 18, 1, 1), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1,)).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1),)).clone('disabled')).setMaxAccess("readwrite")
snNetFlowGblVersion = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 18, 1, 2), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1, 5,)).clone(namedValues=NamedValues(("versionNotSet", 0), ("version1", 1), ("version5", 5),)).clone('version5')).setMaxAccess("readwrite")
snNetFlowGblProtocolDisable = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 18, 1, 3), Integer32()).setMaxAccess("readwrite")
snNetFlowGblActiveTimeout = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 18, 1, 4), Integer32().clone(60)).setMaxAccess("readwrite")
snNetFlowGblInactiveTimeout = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 18, 1, 5), Integer32().clone(60)).setMaxAccess("readwrite")
snNetFlowCollectorTable = MibTable((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 18, 2), )
snNetFlowCollectorEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 18, 2, 1), ).setIndexNames((0, "FOUNDRY-SN-SWITCH-GROUP-MIB", "snNetFlowCollectorIndex"))
snNetFlowCollectorIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 18, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1,10))).setMaxAccess("readonly")
snNetFlowCollectorIp = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 18, 2, 1, 2), IpAddress()).setMaxAccess("readwrite")
snNetFlowCollectorUdpPort = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 18, 2, 1, 3), Integer32()).setMaxAccess("readwrite")
snNetFlowCollectorSourceInterface = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 18, 2, 1, 4), InterfaceIndex()).setMaxAccess("readwrite")
snNetFlowCollectorRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 18, 2, 1, 5), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3, 4,)).clone(namedValues=NamedValues(("other", 1), ("valid", 2), ("delete", 3), ("create", 4),))).setMaxAccess("readwrite")
snNetFlowAggregationTable = MibTable((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 18, 3), )
snNetFlowAggregationEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 18, 3, 1), ).setIndexNames((0, "FOUNDRY-SN-SWITCH-GROUP-MIB", "snNetFlowAggregationIndex"))
snNetFlowAggregationIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 18, 3, 1, 1), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3, 4, 5,)).clone(namedValues=NamedValues(("as", 1), ("protocolPort", 2), ("destPrefix", 3), ("sourcePrefix", 4), ("prefix", 5),))).setMaxAccess("readonly")
snNetFlowAggregationIp = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 18, 3, 1, 2), IpAddress()).setMaxAccess("readwrite")
snNetFlowAggregationUdpPort = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 18, 3, 1, 3), Integer32()).setMaxAccess("readwrite")
snNetFlowAggregationSourceInterface = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 18, 3, 1, 4), InterfaceIndex()).setMaxAccess("readwrite")
snNetFlowAggregationNumberOfCacheEntries = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 18, 3, 1, 5), Integer32()).setMaxAccess("readwrite")
snNetFlowAggregationActiveTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 18, 3, 1, 6), Integer32()).setMaxAccess("readwrite")
snNetFlowAggregationInactiveTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 18, 3, 1, 7), Integer32()).setMaxAccess("readwrite")
snNetFlowAggregationEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 18, 3, 1, 8), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1,)).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1),)).clone('disabled')).setMaxAccess("readwrite")
snNetFlowAggregationRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 18, 3, 1, 9), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3, 4,)).clone(namedValues=NamedValues(("other", 1), ("valid", 2), ("delete", 3), ("create", 4),))).setMaxAccess("readwrite")
snNetFlowIfTable = MibTable((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 18, 4), )
snNetFlowIfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 18, 4, 1), ).setIndexNames((0, "FOUNDRY-SN-SWITCH-GROUP-MIB", "snNetFlowIfIndex"))
snNetFlowIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 18, 4, 1, 1), InterfaceIndex()).setMaxAccess("readonly")
snNetFlowIfFlowSwitching = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 18, 4, 1, 2), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1,)).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1),))).setMaxAccess("readwrite")
snSFlowGlb = MibIdentifier((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 19, 1))
snSflowCollectorTable = MibTable((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 19, 2), )
snSflowCollectorEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 19, 2, 1), ).setIndexNames((0, "FOUNDRY-SN-SWITCH-GROUP-MIB", "snSflowCollectorIndex"))
snSflowCollectorIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 19, 2, 1, 1), Integer32()).setMaxAccess("readonly")
snSflowCollectorIP = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 19, 2, 1, 2), IpAddress()).setMaxAccess("readwrite")
snSflowCollectorUDPPort = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 19, 2, 1, 3), Integer32()).setMaxAccess("readwrite")
snSflowCollectorRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 19, 2, 1, 4), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1, 2, 3, 4, 5,)).clone(namedValues=NamedValues(("noSuch", 0), ("other", 1), ("valid", 2), ("delete", 3), ("create", 4), ("modify", 5),))).setMaxAccess("readwrite")
snFdpMIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 20, 1))
snFdpInterface = MibIdentifier((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 20, 1, 1))
snFdpCache = MibIdentifier((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 20, 1, 2))
snFdpGlobal = MibIdentifier((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 20, 1, 3))
snFdpCachedAddr = MibIdentifier((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 20, 1, 4))
snFdpInterfaceTable = MibTable((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 20, 1, 1, 1), )
snFdpInterfaceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 20, 1, 1, 1, 1), ).setIndexNames((0, "FOUNDRY-SN-SWITCH-GROUP-MIB", "snFdpInterfaceIfIndex"))
snFdpInterfaceIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 20, 1, 1, 1, 1, 1), InterfaceIndex())
snFdpInterfaceFdpEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 20, 1, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1,)).clone(namedValues=NamedValues(("false", 0), ("true", 1),)).clone('true')).setMaxAccess("readwrite")
snFdpInterfaceCdpEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 20, 1, 1, 1, 1, 3), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1,)).clone(namedValues=NamedValues(("false", 0), ("true", 1),)).clone('true')).setMaxAccess("readwrite")
snFdpCacheTable = MibTable((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 20, 1, 2, 1), )
snFdpCacheEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 20, 1, 2, 1, 1), ).setIndexNames((0, "FOUNDRY-SN-SWITCH-GROUP-MIB", "snFdpCacheIfIndex"), (0, "FOUNDRY-SN-SWITCH-GROUP-MIB", "snFdpCacheDeviceIndex"))
snFdpCacheIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 20, 1, 2, 1, 1, 1), InterfaceIndex())
snFdpCacheDeviceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 20, 1, 2, 1, 1, 2), Integer32())
snFdpCacheDeviceId = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 20, 1, 2, 1, 1, 3), DisplayString()).setMaxAccess("readonly")
snFdpCacheAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 20, 1, 2, 1, 1, 4), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3,)).clone(namedValues=NamedValues(("ip", 1), ("ipx", 2), ("appletalk", 3),))).setMaxAccess("readonly")
snFdpCacheAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 20, 1, 2, 1, 1, 5), OctetString()).setMaxAccess("readonly")
snFdpCacheVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 20, 1, 2, 1, 1, 6), DisplayString()).setMaxAccess("readonly")
snFdpCacheDevicePort = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 20, 1, 2, 1, 1, 7), DisplayString()).setMaxAccess("readonly")
snFdpCachePlatform = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 20, 1, 2, 1, 1, 8), DisplayString()).setMaxAccess("readonly")
snFdpCacheCapabilities = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 20, 1, 2, 1, 1, 9), DisplayString()).setMaxAccess("readonly")
snFdpCacheVendorId = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 20, 1, 2, 1, 1, 10), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2,)).clone(namedValues=NamedValues(("fdp", 1), ("cdp", 2),))).setMaxAccess("readonly")
snFdpCacheIsAggregateVlan = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 20, 1, 2, 1, 1, 11), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1,)).clone(namedValues=NamedValues(("false", 0), ("true", 1),))).setMaxAccess("readonly")
snFdpCacheTagType = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 20, 1, 2, 1, 1, 12), Integer32()).setMaxAccess("readonly")
snFdpCachePortVlanMask = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 20, 1, 2, 1, 1, 13), OctetString()).setMaxAccess("readonly")
snFdpCachePortTagMode = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 20, 1, 2, 1, 1, 14), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3,)).clone(namedValues=NamedValues(("untagged", 1), ("tagged", 2), ("dual", 3),))).setMaxAccess("readonly")
snFdpCacheDefaultTrafficeVlanIdForDualMode = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 20, 1, 2, 1, 1, 15), Integer32()).setMaxAccess("readonly")
snFdpGlobalRun = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 20, 1, 3, 1), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1,)).clone(namedValues=NamedValues(("false", 0), ("true", 1),)).clone('false')).setMaxAccess("readwrite")
snFdpGlobalMessageInterval = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 20, 1, 3, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(5,900)).clone(60)).setMaxAccess("readwrite")
snFdpGlobalHoldTime = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 20, 1, 3, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(10,255)).clone(180)).setMaxAccess("readwrite")
snFdpGlobalCdpRun = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 20, 1, 3, 4), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1,)).clone(namedValues=NamedValues(("false", 0), ("true", 1),)).clone('false')).setMaxAccess("readwrite")
snFdpCachedAddressTable = MibTable((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 20, 1, 4, 1), )
snFdpCachedAddressEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 20, 1, 4, 1, 1), ).setIndexNames((0, "FOUNDRY-SN-SWITCH-GROUP-MIB", "snFdpCachedAddrIfIndex"), (0, "FOUNDRY-SN-SWITCH-GROUP-MIB", "snFdpCachedAddrDeviceIndex"), (0, "FOUNDRY-SN-SWITCH-GROUP-MIB", "snFdpCachedAddrDeviceAddrEntryIndex"))
snFdpCachedAddrIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 20, 1, 4, 1, 1, 1), InterfaceIndex())
snFdpCachedAddrDeviceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 20, 1, 4, 1, 1, 2), Integer32())
snFdpCachedAddrDeviceAddrEntryIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 20, 1, 4, 1, 1, 3), Integer32())
snFdpCachedAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 20, 1, 4, 1, 1, 4), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3,)).clone(namedValues=NamedValues(("ip", 1), ("ipx", 2), ("appletalk", 3),))).setMaxAccess("readonly")
snFdpCachedAddrValue = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 20, 1, 4, 1, 1, 5), OctetString()).setMaxAccess("readonly")
snMacSecurity = MibIdentifier((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 24, 1))
snPortMacSecurity = MibIdentifier((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 24, 1, 1))
snPortMacGlobalSecurity = MibIdentifier((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 24, 1, 2))
snPortMacSecurityTable = MibTable((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 24, 1, 1, 1), )
snPortMacSecurityEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 24, 1, 1, 1, 1), ).setIndexNames((0, "FOUNDRY-SN-SWITCH-GROUP-MIB", "snPortMacSecurityIfIndex"), (0, "FOUNDRY-SN-SWITCH-GROUP-MIB", "snPortMacSecurityResource"), (0, "FOUNDRY-SN-SWITCH-GROUP-MIB", "snPortMacSecurityQueryIndex"))
snPortMacSecurityIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 24, 1, 1, 1, 1, 1), Unsigned32()).setMaxAccess("readonly")
snPortMacSecurityResource = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 24, 1, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2,)).clone(namedValues=NamedValues(("local", 1), ("shared", 2),))).setMaxAccess("readonly")
snPortMacSecurityQueryIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 24, 1, 1, 1, 1, 3), Unsigned32()).setMaxAccess("readonly")
snPortMacSecurityMAC = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 24, 1, 1, 1, 1, 4), MacAddress()).setMaxAccess("readonly")
snPortMacSecurityAgeLeft = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 24, 1, 1, 1, 1, 5), Unsigned32()).setMaxAccess("readonly")
snPortMacSecurityShutdownStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 24, 1, 1, 1, 1, 6), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2,)).clone(namedValues=NamedValues(("up", 1), ("down", 2),))).setMaxAccess("readonly")
snPortMacSecurityShutdownTimeLeft = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 24, 1, 1, 1, 1, 7), Unsigned32()).setMaxAccess("readonly")
snPortMacSecurityVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 24, 1, 1, 1, 1, 8), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1,65535))).setMaxAccess("readonly")
snPortMacSecurityModuleStatTable = MibTable((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 24, 1, 1, 2), )
snPortMacSecurityModuleStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 24, 1, 1, 2, 1), ).setIndexNames((0, "FOUNDRY-SN-SWITCH-GROUP-MIB", "snPortMacSecurityModuleStatSlotNum"))
snPortMacSecurityModuleStatSlotNum = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 24, 1, 1, 2, 1, 1), Integer32()).setMaxAccess("readonly")
snPortMacSecurityModuleStatTotalSecurityPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 24, 1, 1, 2, 1, 2), Unsigned32()).setMaxAccess("readonly")
snPortMacSecurityModuleStatTotalMACs = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 24, 1, 1, 2, 1, 3), Unsigned32()).setMaxAccess("readonly")
snPortMacSecurityModuleStatViolationCounts = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 24, 1, 1, 2, 1, 4), Unsigned32()).setMaxAccess("readonly")
snPortMacSecurityModuleStatTotalShutdownPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 24, 1, 1, 2, 1, 5), Unsigned32()).setMaxAccess("readonly")
snPortMacSecurityIntfContentTable = MibTable((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 24, 1, 1, 3), )
snPortMacSecurityIntfContentEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 24, 1, 1, 3, 1), ).setIndexNames((0, "FOUNDRY-SN-SWITCH-GROUP-MIB", "snPortMacSecurityIntfContentIfIndex"))
snPortMacSecurityIntfContentIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 24, 1, 1, 3, 1, 1), InterfaceIndex())
snPortMacSecurityIntfContentSecurity = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 24, 1, 1, 3, 1, 2), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1,)).clone(namedValues=NamedValues(("disable", 0), ("enable", 1),))).setMaxAccess("readwrite")
snPortMacSecurityIntfContentViolationType = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 24, 1, 1, 3, 1, 3), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1,)).clone(namedValues=NamedValues(("shutdown", 0), ("restrict", 1),))).setMaxAccess("readwrite")
snPortMacSecurityIntfContentShutdownTime = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 24, 1, 1, 3, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0,1440))).setMaxAccess("readwrite")
snPortMacSecurityIntfContentShutdownTimeLeft = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 24, 1, 1, 3, 1, 5), Unsigned32()).setMaxAccess("readonly")
snPortMacSecurityIntfContentAgeOutTime = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 24, 1, 1, 3, 1, 6), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0,1440))).setMaxAccess("readwrite")
snPortMacSecurityIntfContentMaxLockedMacAllowed = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 24, 1, 1, 3, 1, 7), Unsigned32()).setMaxAccess("readwrite")
snPortMacSecurityIntfContentTotalMACs = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 24, 1, 1, 3, 1, 8), Unsigned32()).setMaxAccess("readonly")
snPortMacSecurityIntfContentViolationCounts = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 24, 1, 1, 3, 1, 9), Unsigned32()).setMaxAccess("readonly")
snPortMacSecurityIntfMacTable = MibTable((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 24, 1, 1, 4), )
snPortMacSecurityIntfMacEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 24, 1, 1, 4, 1), ).setIndexNames((0, "FOUNDRY-SN-SWITCH-GROUP-MIB", "snPortMacSecurityIntfMacIfIndex"), (0, "FOUNDRY-SN-SWITCH-GROUP-MIB", "snPortMacSecurityIntfMacAddress"))
snPortMacSecurityIntfMacIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 24, 1, 1, 4, 1, 1), Integer32()).setMaxAccess("readonly")
snPortMacSecurityIntfMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 24, 1, 1, 4, 1, 2), MacAddress()).setMaxAccess("readonly")
snPortMacSecurityIntfMacVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 24, 1, 1, 4, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0,65535))).setMaxAccess("readwrite")
snPortMacSecurityIntfMacRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 24, 1, 1, 4, 1, 4), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3, 4,)).clone(namedValues=NamedValues(("other", 1), ("valid", 2), ("delete", 3), ("create", 4),))).setMaxAccess("readwrite")
snPortMacSecurityAutosaveMacTable = MibTable((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 24, 1, 1, 5), )
snPortMacSecurityAutosaveMacEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 24, 1, 1, 5, 1), ).setIndexNames((0, "FOUNDRY-SN-SWITCH-GROUP-MIB", "snPortMacSecurityAutosaveMacIfIndex"), (0, "FOUNDRY-SN-SWITCH-GROUP-MIB", "snPortMacSecurityAutosaveMacResource"), (0, "FOUNDRY-SN-SWITCH-GROUP-MIB", "snPortMacSecurityAutosaveMacQueryIndex"))
snPortMacSecurityAutosaveMacIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 24, 1, 1, 5, 1, 1), Integer32()).setMaxAccess("readonly")
snPortMacSecurityAutosaveMacResource = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 24, 1, 1, 5, 1, 2), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2,)).clone(namedValues=NamedValues(("local", 1), ("shared", 2),))).setMaxAccess("readonly")
snPortMacSecurityAutosaveMacQueryIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 24, 1, 1, 5, 1, 3), Unsigned32()).setMaxAccess("readonly")
snPortMacSecurityAutosaveMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 24, 1, 1, 5, 1, 4), MacAddress()).setMaxAccess("readonly")
snPortMacGlobalSecurityFeature = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 24, 1, 2, 1), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1,)).clone(namedValues=NamedValues(("disable", 0), ("enable", 1),))).setMaxAccess("readwrite")
snPortMacGlobalSecurityAgeOutTime = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 24, 1, 2, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0,1440))).setMaxAccess("readwrite")
snPortMacGlobalSecurityAutosave = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 24, 1, 2, 3), Unsigned32()).setMaxAccess("readwrite")
snPortMonitorTable = MibTable((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 25, 1), )
snPortMonitorEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 25, 1, 1), ).setIndexNames((0, "FOUNDRY-SN-SWITCH-GROUP-MIB", "snPortMonitorIfIndex"))
snPortMonitorIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 25, 1, 1, 1), InterfaceIndex())
snPortMonitorMirrorList = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 25, 1, 1, 2), DisplayString()).setMaxAccess("readwrite")
mibBuilder.exportSymbols("FOUNDRY-SN-SWITCH-GROUP-MIB", snSwIfInfoMediaType=snSwIfInfoMediaType, snMacFilterTable=snMacFilterTable, snQosProfileCalculatedBandwidth=snQosProfileCalculatedBandwidth, snPortMacSecurityAgeLeft=snPortMacSecurityAgeLeft, snVLanByPortQos=snVLanByPortQos, snSwIfVlanId=snSwIfVlanId, snSwBroadcastLimit=snSwBroadcastLimit, snMSTrunkIfTable=snMSTrunkIfTable, snIfStpPortPriority=snIfStpPortPriority, snPortStpInfo=snPortStpInfo, fdryLinkAggregationGroupMIB=fdryLinkAggregationGroupMIB, snIfStpTable=snIfStpTable, snInterfaceLookup2IfIndex=snInterfaceLookup2IfIndex, snTacacsRetransmit=snTacacsRetransmit, snFdpCachedAddr=snFdpCachedAddr, snIfIndexLookupIfIndex=snIfIndexLookupIfIndex, snPosInterface=snPosInterface, snSwIfInfoGigType=snSwIfInfoGigType, snGreTunnelInterface=snGreTunnelInterface, snVLanByPortStpRootPort=snVLanByPortStpRootPort, snVLanByIpSubnetSubnetMask=snVLanByIpSubnetSubnetMask, PYSNMP_MODULE_ID=snSwitch, snSwIfInfoLinkStatus=snSwIfInfoLinkStatus, snSwEnableBridgeNewRootTrap=snSwEnableBridgeNewRootTrap, snVLanByIpxNetTable=snVLanByIpxNetTable, snVLanByIpxNetMaxNetworks=snVLanByIpxNetMaxNetworks, snFdpCacheDefaultTrafficeVlanIdForDualMode=snFdpCacheDefaultTrafficeVlanIdForDualMode, snDosAttackSYNBlockCount=snDosAttackSYNBlockCount, snSwIfName=snSwIfName, snRadiusTimeOut=snRadiusTimeOut, snAuthorizationCommandLevel=snAuthorizationCommandLevel, snSFlow=snSFlow, snVLanByProtocolRowStatus=snVLanByProtocolRowStatus, snSwIfStatsOutPktsPerSec=snSwIfStatsOutPktsPerSec, snPortMacSecurityAutosaveMacIfIndex=snPortMacSecurityAutosaveMacIfIndex, snFdbStationIndex=snFdbStationIndex, snFdpCachedAddrIfIndex=snFdpCachedAddrIfIndex, snVLanByPortStpRootCost=snVLanByPortStpRootCost, snPortStpEntrySize=snPortStpEntrySize, snSwIfStatsOutUtilization=snSwIfStatsOutUtilization, snVLanByIpxNetDynamic=snVLanByIpxNetDynamic, snNetFlowAggregationIp=snNetFlowAggregationIp, snNetFlowAggregationInactiveTimeout=snNetFlowAggregationInactiveTimeout, snTrunkPortMask=snTrunkPortMask, snSwViolatorPortNumber=snSwViolatorPortNumber, snVLanByPortCfgBaseNumPorts=snVLanByPortCfgBaseNumPorts, snVLanByPortCfgStpTimeSinceTopologyChange=snVLanByPortCfgStpTimeSinceTopologyChange, snVLanByATCableRowStatus=snVLanByATCableRowStatus, snTacacsServerEntry=snTacacsServerEntry, snSwIfInfoMirrorPorts=snSwIfInfoMirrorPorts, snSwPortInfoPortNum=snSwPortInfoPortNum, snRadiusSNMPAccess=snRadiusSNMPAccess, snSwPortOutOctets=snSwPortOutOctets, snSwPortStatsOutBitsPerSec=snSwPortStatsOutBitsPerSec, snSwPortFastSpanPortEnable=snSwPortFastSpanPortEnable, snVLanByPortCfgStpMode=snVLanByPortCfgStpMode, snQosBindPriority=snQosBindPriority, snPvcInterface=snPvcInterface, snSwPortInLinePowerPDType=snSwPortInLinePowerPDType, snSwQosMechanism=snSwQosMechanism, snFdpInterface=snFdpInterface, snSwIfInfoPortNum=snSwIfInfoPortNum, snFdpInterfaceIfIndex=snFdpInterfaceIfIndex, snIfStpBPDUTransmitted=snIfStpBPDUTransmitted, snSwIfInfoMirrorMode=snSwIfInfoMirrorMode, snFdbEntry=snFdbEntry, snTacacsTimeOut=snTacacsTimeOut, snRadiusServerRowKey=snRadiusServerRowKey, snSwPortEntrySize=snSwPortEntrySize, snMacFilterIfAccessTable=snMacFilterIfAccessTable, snSwPortStatsInBitsPerSec=snSwPortStatsInBitsPerSec, snSwPortInfoEntry=snSwPortInfoEntry, snPortStpTable=snPortStpTable, snSwPortStatsInPktsPerSec=snSwPortStatsInPktsPerSec, snFdpCacheEntry=snFdpCacheEntry, snPortMacSecurityAutosaveMacTable=snPortMacSecurityAutosaveMacTable, snSwPortInLinePowerConsumed=snSwPortInLinePowerConsumed, snMacFilterIfAccessPortIndex=snMacFilterIfAccessPortIndex, snSwIfInfoSpeed=snSwIfInfoSpeed, snPortMacSecurityIntfContentIfIndex=snPortMacSecurityIntfContentIfIndex, snPortStpPortState=snPortStpPortState, snCAR=snCAR, snTrunkIndex=snTrunkIndex, snFDP=snFDP, snPortMacSecurityIntfContentShutdownTimeLeft=snPortMacSecurityIntfContentShutdownTimeLeft, snRadiusEnableTelnetAuth=snRadiusEnableTelnetAuth, snSwDefaultVLanId=snSwDefaultVLanId, snDosAttackPortEntry=snDosAttackPortEntry, snPortStpPortEnable=snPortStpPortEnable, snPortMacSecurityModuleStatTotalSecurityPorts=snPortMacSecurityModuleStatTotalSecurityPorts, snVLanByPortEntrySize=snVLanByPortEntrySize, snSwGroupOperMode=snSwGroupOperMode, snSwClearCounters=snSwClearCounters, snNTPTimeZone=snNTPTimeZone, snSwPortInfoFlowControl=snSwPortInfoFlowControl, snPortMonitor=snPortMonitor, snPortMacSecurityEntry=snPortMacSecurityEntry, snSwPortInLinePowerControl=snSwPortInLinePowerControl, snSwPortStatsOutJumboFrames=snSwPortStatsOutJumboFrames, snIfStpVLanId=snIfStpVLanId, snSwPortStatsFCSErrors=snSwPortStatsFCSErrors, snDosAttackGlobal=snDosAttackGlobal, snPortMacSecurityIntfMacRowStatus=snPortMacSecurityIntfMacRowStatus, snSwPortInfoMirrorMode=snSwPortInfoMirrorMode, snMacFilterRowStatus=snMacFilterRowStatus, snPortStpSetAll=snPortStpSetAll, snFdpMIBObjects=snFdpMIBObjects, snPortMacSecurityIntfContentTotalMACs=snPortMacSecurityIntfContentTotalMACs, snPortStpPortProtocolMigration=snPortStpPortProtocolMigration, snSwIfGBICStatus=snSwIfGBICStatus, snDhcpGatewayListEntry=snDhcpGatewayListEntry, snVLanByProtocolDynamicMask=snVLanByProtocolDynamicMask, snNetFlowCollectorUdpPort=snNetFlowCollectorUdpPort, snFdpGlobal=snFdpGlobal, snAccounting=snAccounting, snPortStpPortPriority=snPortStpPortPriority, snIfStpEntry=snIfStpEntry, snDhcpGatewayListInfo=snDhcpGatewayListInfo, snPortMacSecurityVlanId=snPortMacSecurityVlanId, snVLanByIpxNetVLanName=snVLanByIpxNetVLanName, snVLanByProtocolChassisExcludeMask=snVLanByProtocolChassisExcludeMask, snIfIndexLookup2Entry=snIfIndexLookup2Entry, snQosProfileIndex=snQosProfileIndex, snPortMacGlobalSecurityAgeOutTime=snPortMacGlobalSecurityAgeOutTime, snDosAttackPortSYNBlockCount=snDosAttackPortSYNBlockCount, snRadius=snRadius, snSwIfOutOctets=snSwIfOutOctets, snIfIndexLookupTable=snIfIndexLookupTable, snSwPortStatsFrameTooLongs=snSwPortStatsFrameTooLongs, snSwProtocolVLanMode=snSwProtocolVLanMode, snMac=snMac, snTacacs=snTacacs, snSwIfStatsOutJumboFrames=snSwIfStatsOutJumboFrames, snFdbStationType=snFdbStationType, snNetFlowAggregationIndex=snNetFlowAggregationIndex, snVLanByPortCfgRouterIntf=snVLanByPortCfgRouterIntf, snStacking=snStacking, snSwPortStatsInUtilization=snSwPortStatsInUtilization, snVLanByPortCfgStpVersion=snVLanByPortCfgStpVersion, snMSTrunkIfEntry=snMSTrunkIfEntry, snSwPortInfoAdminStatus=snSwPortInfoAdminStatus, snSwIfFastSpanPortEnable=snSwIfFastSpanPortEnable, snVLanByPortEntry=snVLanByPortEntry, snVLanByPortCfgTable=snVLanByPortCfgTable, snSwPortInfoChnMode=snSwPortInfoChnMode, snMSTrunkType=snMSTrunkType, snNetFlowAggregationRowStatus=snNetFlowAggregationRowStatus, snSwPortInfoAutoNegotiate=snSwPortInfoAutoNegotiate, snSwIfStatsInJumboFrames=snSwIfStatsInJumboFrames, snPortMacGlobalSecurityAutosave=snPortMacGlobalSecurityAutosave, BridgeId=BridgeId, snPortMacSecurityIntfMacEntry=snPortMacSecurityIntfMacEntry, snVLanByProtocolStaticMask=snVLanByProtocolStaticMask, snAuthorization=snAuthorization, snPortMacSecurityModuleStatTable=snPortMacSecurityModuleStatTable, snVLanByIpxNetNetworkNum=snVLanByIpxNetNetworkNum, snSwIfStatsRxColliFrames=snSwIfStatsRxColliFrames, snVLanByIpxNetRouterIntf=snVLanByIpxNetRouterIntf, snVLanByPortMemberTable=snVLanByPortMemberTable, snSwPortInfoConnectorType=snSwPortInfoConnectorType, snPortStpPortAdminPointToPoint=snPortStpPortAdminPointToPoint, snTacacsServerRowKey=snTacacsServerRowKey, snSwIpxL3SwMode=snSwIpxL3SwMode, snVLanByProtocolExcludeMask=snVLanByProtocolExcludeMask, snRadiusLoginMethod=snRadiusLoginMethod, snMacFilterPortAccessRowStatus=snMacFilterPortAccessRowStatus, snSwMaxMacFilterPerSystem=snSwMaxMacFilterPerSystem, snSwIfInOctets=snSwIfInOctets, snVLanByProtocolEntry=snVLanByProtocolEntry, snSwViolatorIfIndex=snSwViolatorIfIndex, snAccountingSystem=snAccountingSystem, snNTPServerVersion=snNTPServerVersion, snQosBindTable=snQosBindTable, snSwIfStatsInMcastFrames=snSwIfStatsInMcastFrames, snRadiusServerAcctPort=snRadiusServerAcctPort, snMacAuth=snMacAuth, snSwIfStpPortEnable=snSwIfStpPortEnable, snDhcpGatewayListRowStatus=snDhcpGatewayListRowStatus, snSwIfStatsMultiColliFrames=snSwIfStatsMultiColliFrames, snQosBindIndex=snQosBindIndex, snSwPortStatsAlignErrors=snSwPortStatsAlignErrors, snSwEnableBridgeTopoChangeTrap=snSwEnableBridgeTopoChangeTrap, snVLanByPortBaseNumPorts=snVLanByPortBaseNumPorts, snNTPSync=snNTPSync, snVLanByIpSubnetDynamicMask=snVLanByIpSubnetDynamicMask, snSwPortLockAddressCount=snSwPortLockAddressCount, snTacacsGeneral=snTacacsGeneral, snSwGlobalAutoNegotiate=snSwGlobalAutoNegotiate, snEthernetInterface=snEthernetInterface, snNetFlowAggregationEntry=snNetFlowAggregationEntry, snVLanByPortMemberVLanId=snVLanByPortMemberVLanId, snVLanByProtocolVLanName=snVLanByProtocolVLanName, snVLanByPortMemberEntry=snVLanByPortMemberEntry, snDhcpGatewayListId=snDhcpGatewayListId, snPortMacSecurityIntfMacIfIndex=snPortMacSecurityIntfMacIfIndex, snMacStationVLanId=snMacStationVLanId, snSwPortStatsOutMcastFrames=snSwPortStatsOutMcastFrames, snSwIfStatsOutFrames=snSwIfStatsOutFrames, snTacacsServerRowStatus=snTacacsServerRowStatus, snMacFilterAction=snMacFilterAction, snMacFilterIfAccessFilters=snMacFilterIfAccessFilters, snSwPortStatsInDiscard=snSwPortStatsInDiscard, snQosBindProfileIndex=snQosBindProfileIndex, snVLanByIpxNetStaticPortList=snVLanByIpxNetStaticPortList, snFdpCacheAddress=snFdpCacheAddress, snVLanByPortStpProtocolSpecification=snVLanByPortStpProtocolSpecification, snVLanByIpSubnetChassisExcludeMask=snVLanByIpSubnetChassisExcludeMask, snQosProfileTable=snQosProfileTable, snVLanByPortMemberTagMode=snVLanByPortMemberTagMode, snVLanByPortStpForwardDelay=snVLanByPortStpForwardDelay, snSwInfo=snSwInfo, snVLanByIpxNetDynamicMask=snVLanByIpxNetDynamicMask, snVLanByProtocolExcludePortList=snVLanByProtocolExcludePortList, snVLanByIpSubnetRouterIntf=snVLanByIpSubnetRouterIntf, snIfMediaVersion=snIfMediaVersion, FdryVlanIdOrNoneTC=FdryVlanIdOrNoneTC, snMSTrunkPortIndex=snMSTrunkPortIndex, snVLanGroupVlanMaxEntry=snVLanGroupVlanMaxEntry, snSflowCollectorIP=snSflowCollectorIP, snVLanByIpxNetDynamicPortList=snVLanByIpxNetDynamicPortList, snRadiusServerTable=snRadiusServerTable, snNetFlowGblVersion=snNetFlowGblVersion, snInterfaceLookupIfIndex=snInterfaceLookupIfIndex, snVLanByProtocolIndex=snVLanByProtocolIndex, snNTPGeneral=snNTPGeneral, snSwIfInfoPhysAddress=snSwIfInfoPhysAddress, snRadiusKey=snRadiusKey, snSwPortInLinePowerWattage=snSwPortInLinePowerWattage, snVLanByPortCfgStpGroupMaxAge=snVLanByPortCfgStpGroupMaxAge, snSwPortStatsOutDiscard=snSwPortStatsOutDiscard, snFdpCacheIsAggregateVlan=snFdpCacheIsAggregateVlan, snPortMacSecurityQueryIndex=snPortMacSecurityQueryIndex, snVLanByIpSubnetDynamicPortList=snVLanByIpSubnetDynamicPortList, snQosProfileRequestedBandwidth=snQosProfileRequestedBandwidth, snVLanByPortBaseBridgeAddress=snVLanByPortBaseBridgeAddress, snTacacsDeadTime=snTacacsDeadTime, snFdpCacheIfIndex=snFdpCacheIfIndex, snSwIfLoadInterval=snSwIfLoadInterval, snPortMacSecurityIfIndex=snPortMacSecurityIfIndex, snVLanByPortCfgStpMaxAge=snVLanByPortCfgStpMaxAge, snPortStpEntry=snPortStpEntry, snArpInfo=snArpInfo, snPortMacSecurityResource=snPortMacSecurityResource, snVLanByATCableTable=snVLanByATCableTable, snVLanByPortCfgBaseType=snVLanByPortCfgBaseType, snVLanGroupVlanCurEntry=snVLanGroupVlanCurEntry, snNetFlowIfFlowSwitching=snNetFlowIfFlowSwitching, snSwPortStatsInJumboFrames=snSwPortStatsInJumboFrames, snPortMacSecurityShutdownTimeLeft=snPortMacSecurityShutdownTimeLeft, snMSTrunkIfIndex=snMSTrunkIfIndex, snVLanByPortCfgStpProtocolSpecification=snVLanByPortCfgStpProtocolSpecification, snIfIndexLookup2InterfaceId=snIfIndexLookup2InterfaceId, snSwIfStatsInBcastFrames=snSwIfStatsInBcastFrames, snPortStpPortDesignatedPort=snPortStpPortDesignatedPort)
mibBuilder.exportSymbols("FOUNDRY-SN-SWITCH-GROUP-MIB", snPortMacSecurityAutosaveMacAddress=snPortMacSecurityAutosaveMacAddress, snTacacsServerIp=snTacacsServerIp, snFdbStationEntrySize=snFdbStationEntrySize, snIfStpPortNum=snIfStpPortNum, snSwPortInfoTagMode=snSwPortInfoTagMode, snRadiusDeadTime=snRadiusDeadTime, fdryDns2MIB=fdryDns2MIB, snTrunkEntry=snTrunkEntry, snDosAttackPortSYNDropCount=snDosAttackPortSYNDropCount, snMplsTunnelInterface=snMplsTunnelInterface, snAtmInterface=snAtmInterface, snFdbStationPort=snFdbStationPort, snSwSummary=snSwSummary, snVLanByPortPortMask=snVLanByPortPortMask, snVLanByIpSubnetStaticMask=snVLanByIpSubnetStaticMask, snIfOpticalMonitoringInfoTable=snIfOpticalMonitoringInfoTable, snVLanByPortRouterIntf=snVLanByPortRouterIntf, snSwPortLoadInterval=snSwPortLoadInterval, snSwViolatorMacAddress=snSwViolatorMacAddress, snSwGlobalStpMode=snSwGlobalStpMode, snVLanByPortCfgStpPriority=snVLanByPortCfgStpPriority, snPortStpPortForwardTransitions=snPortStpPortForwardTransitions, snPortMacSecurityShutdownStatus=snPortMacSecurityShutdownStatus, snSwIfStatsOutBitsPerSec=snSwIfStatsOutBitsPerSec, snVLanByPortCfgBaseBridgeAddress=snVLanByPortCfgBaseBridgeAddress, snInterfaceId=snInterfaceId, snVLanByIpSubnetExcludeMask=snVLanByIpSubnetExcludeMask, snVLanByIpSubnetMaxSubnets=snVLanByIpSubnetMaxSubnets, snPortMacSecurityIntfContentTable=snPortMacSecurityIntfContentTable, snSflowCollectorIndex=snSflowCollectorIndex, snIfStpPortDesignatedBridge=snIfStpPortDesignatedBridge, snSwPortInfo=snSwPortInfo, snSwPortStatsInBcastFrames=snSwPortStatsInBcastFrames, snIfStpPortState=snIfStpPortState, snMacFilterEntry=snMacFilterEntry, snNetFlowGblEnable=snNetFlowGblEnable, snDosAttackPortICMPBlockCount=snDosAttackPortICMPBlockCount, snNetFlowAggregationUdpPort=snNetFlowAggregationUdpPort, snSflowCollectorEntry=snSflowCollectorEntry, snVLanByPortCfgStpRootPort=snVLanByPortCfgStpRootPort, snVLanByIpSubnetIpAddress=snVLanByIpSubnetIpAddress, snSwIfStatsFrameTooShorts=snSwIfStatsFrameTooShorts, snSwPortInLinePowerClass=snSwPortInLinePowerClass, snTacacsServerTable=snTacacsServerTable, snSwSingleStpMode=snSwSingleStpMode, snSw8021qTagType=snSw8021qTagType, snSwIpMcastQuerierMode=snSwIpMcastQuerierMode, snNetFlowCollectorIndex=snNetFlowCollectorIndex, snVirtualMgmtInterface=snVirtualMgmtInterface, snSwPortStatsOutUtilization=snSwPortStatsOutUtilization, snFdpCacheVendorId=snFdpCacheVendorId, snDosAttackSYNDropCount=snDosAttackSYNDropCount, snSwIfStatsOutMcastFrames=snSwIfStatsOutMcastFrames, snMSTrunkIfType=snMSTrunkIfType, snSubInterface=snSubInterface, snVLanByProtocolDynamic=snVLanByProtocolDynamic, snFdbTable=snFdbTable, snIfOpticalMonitoringTxBiasCurrent=snIfOpticalMonitoringTxBiasCurrent, snNetFlowCollectorSourceInterface=snNetFlowCollectorSourceInterface, snNetFlowCollectorIp=snNetFlowCollectorIp, snSflowCollectorUDPPort=snSflowCollectorUDPPort, snVsrp=snVsrp, snFdpCache=snFdpCache, snPortMacSecurityModuleStatTotalShutdownPorts=snPortMacSecurityModuleStatTotalShutdownPorts, snVLanByPortCfgStpGroupHelloTime=snVLanByPortCfgStpGroupHelloTime, snRadiusGeneral=snRadiusGeneral, snVLanByPortCfgStpForwardDelay=snVLanByPortCfgStpForwardDelay, snPortMacSecurityModuleStatEntry=snPortMacSecurityModuleStatEntry, snVLanByIpSubnetEntry=snVLanByIpSubnetEntry, snPortMacSecurityMAC=snPortMacSecurityMAC, snSwPortStatsOutPktsPerSec=snSwPortStatsOutPktsPerSec, snSwIfStatsInBitsPerSec=snSwIfStatsInBitsPerSec, snFdbStationAddr=snFdbStationAddr, snVLanByProtocolVLanId=snVLanByProtocolVLanId, snFdpCachePortTagMode=snFdpCachePortTagMode, snDosAttackICMPDropCount=snDosAttackICMPDropCount, snFdpGlobalHoldTime=snFdpGlobalHoldTime, snVLanByIpSubnetVLanId=snVLanByIpSubnetVLanId, snFdpInterfaceCdpEnable=snFdpInterfaceCdpEnable, snPortStpPathCost=snPortStpPathCost, snNetFlowGlb=snNetFlowGlb, snVLanByPortRowStatus=snVLanByPortRowStatus, snRadiusServerRowStatus=snRadiusServerRowStatus, snFdpCacheTagType=snFdpCacheTagType, snInterfaceLookupInterfaceId=snInterfaceLookupInterfaceId, snVLanByIpxNetEntry=snVLanByIpxNetEntry, snMetroRing=snMetroRing, snIfStpPortRole=snIfStpPortRole, snFdbInfo=snFdbInfo, snVLanByPortStpMode=snVLanByPortStpMode, snTrunkTable=snTrunkTable, snSwGroupIpL3SwMode=snSwGroupIpL3SwMode, snNetFlowCollectorRowStatus=snNetFlowCollectorRowStatus, snPortMacSecurityTable=snPortMacSecurityTable, snFdpCacheTable=snFdpCacheTable, snTacacsServerAuthPort=snTacacsServerAuthPort, snSwitch=snSwitch, snSwPortTransGroupId=snSwPortTransGroupId, snPortStpOperState=snPortStpOperState, snRadiusWebServerMethod=snRadiusWebServerMethod, snMacFilter=snMacFilter, snVLanByPortCfgInOctets=snVLanByPortCfgInOctets, snVLanByPortCfgStpGroupForwardDelay=snVLanByPortCfgStpGroupForwardDelay, snIfStpPortDesignatedRoot=snIfStpPortDesignatedRoot, snVLanByIpSubnetTable=snVLanByIpSubnetTable, snSwIfLockAddressCount=snSwIfLockAddressCount, snIfIndexLookup2Table=snIfIndexLookup2Table, snFdbRowStatus=snFdbRowStatus, snVLanByIpSubnetChassisStaticMask=snVLanByIpSubnetChassisStaticMask, snSwFastStpMode=snSwFastStpMode, snMgmtEthernetInterface=snMgmtEthernetInterface, snVLanByIpxNetChassisDynamicMask=snVLanByIpxNetChassisDynamicMask, snAuthorizationCommandMethods=snAuthorizationCommandMethods, snDhcpGatewayListAddrList=snDhcpGatewayListAddrList, snInterfaceLookupTable=snInterfaceLookupTable, snVLanInfo=snVLanInfo, snFdbVLanId=snFdbVLanId, snSwEnableLockedAddrViolationTrap=snSwEnableLockedAddrViolationTrap, snVLanByPortCfgStpTopChanges=snVLanByPortCfgStpTopChanges, snVirtualInterface=snVirtualInterface, snVLanByIpxNetExcludeMask=snVLanByIpxNetExcludeMask, snSwIfStatsOutDiscard=snSwIfStatsOutDiscard, snSwPortCacheGroupId=snSwPortCacheGroupId, snIfRstpConfigBPDUReceived=snIfRstpConfigBPDUReceived, snFdbStationQos=snFdbStationQos, snSwIfInfoTagMode=snSwIfInfoTagMode, snIfOpticalMonitoringRxPower=snIfOpticalMonitoringRxPower, snSw8021qTagMode=snSw8021qTagMode, snVLanByProtocolChassisStaticMask=snVLanByProtocolChassisStaticMask, snFdbTableCurEntry=snFdbTableCurEntry, snVLanByProtocolChassisDynamicMask=snVLanByProtocolChassisDynamicMask, snIfRstpTCNBPDUTransmitted=snIfRstpTCNBPDUTransmitted, snFdpCacheCapabilities=snFdpCacheCapabilities, snSwEosBufferSize=snSwEosBufferSize, snMacFilterDestMac=snMacFilterDestMac, snPortMacSecurityIntfContentEntry=snPortMacSecurityIntfContentEntry, snNTPSummerTimeEnable=snNTPSummerTimeEnable, Timeout=Timeout, snIfStpPortAdminPointToPoint=snIfStpPortAdminPointToPoint, snDosAttackPortICMPDropCount=snDosAttackPortICMPDropCount, snTrunkType=snTrunkType, snVLanByPortCfgQos=snVLanByPortCfgQos, snVLanByPortCfgRowStatus=snVLanByPortCfgRowStatus, snSwIfPresent=snSwIfPresent, snPortMacSecurityIntfContentViolationType=snPortMacSecurityIntfContentViolationType, snVLanByATCableRouterIntf=snVLanByATCableRouterIntf, snSwIfStatsInFrames=snSwIfStatsInFrames, snDhcpGatewayListTable=snDhcpGatewayListTable, snPortMacSecurityIntfContentAgeOutTime=snPortMacSecurityIntfContentAgeOutTime, snFdpGlobalMessageInterval=snFdpGlobalMessageInterval, snSwPortStatsMacStations=snSwPortStatsMacStations, snSwIfInfoFlowControl=snSwIfInfoFlowControl, snVLanByPortOperState=snVLanByPortOperState, snVLanByATCableVLanName=snVLanByATCableVLanName, snNetFlowCollectorEntry=snNetFlowCollectorEntry, snSwPortName=snSwPortName, snIfMediaVendorName=snIfMediaVendorName, snVLanCAR=snVLanCAR, snFdpCachePortVlanMask=snFdpCachePortVlanMask, snPortMonitorTable=snPortMonitorTable, snVLanByPortCfgStpHoldTime=snVLanByPortCfgStpHoldTime, snMacFilterSourceMask=snMacFilterSourceMask, snFdpCachedAddressEntry=snFdpCachedAddressEntry, snTacacsServerUsage=snTacacsServerUsage, snSwPortDescr=snSwPortDescr, snVLanByProtocolTable=snVLanByProtocolTable, snSwIfStatsFrameTooLongs=snSwIfStatsFrameTooLongs, snNetFlowGblProtocolDisable=snNetFlowGblProtocolDisable, snSwPortRouteOnly=snSwPortRouteOnly, snVLanByProtocolDynamicPortList=snVLanByProtocolDynamicPortList, snFdpCacheDevicePort=snFdpCacheDevicePort, snVLanByIpxNetVLanId=snVLanByIpxNetVLanId, snVLanByPortStpGroupForwardDelay=snVLanByPortStpGroupForwardDelay, snMacFilterSourceMac=snMacFilterSourceMac, snMacSecurity=snMacSecurity, snIfOpticalMonitoringInfoEntry=snIfOpticalMonitoringInfoEntry, snPortStpPortDesignatedRoot=snPortStpPortDesignatedRoot, snPortStpPortDesignatedBridge=snPortStpPortDesignatedBridge, snMacFilterPortAccessPortIndex=snMacFilterPortAccessPortIndex, snSwPortStatsInKiloBitsPerSec=snSwPortStatsInKiloBitsPerSec, snVLanByIpSubnetExcludePortList=snVLanByIpSubnetExcludePortList, snSwIfInfoPortQos=snSwIfInfoPortQos, snVLanByIpxNetExcludePortList=snVLanByIpxNetExcludePortList, snSwProbePortNum=snSwProbePortNum, snNetFlowAggregationActiveTimeout=snNetFlowAggregationActiveTimeout, snVLanByIpxNetFrameType=snVLanByIpxNetFrameType, snMSTrunkEntry=snMSTrunkEntry, snVLanGroupSetAllVLan=snVLanGroupSetAllVLan, snPortMacSecurityModuleStatTotalMACs=snPortMacSecurityModuleStatTotalMACs, snLoopbackInterface=snLoopbackInterface, snSwPortStatsRxColliFrames=snSwPortStatsRxColliFrames, snSwIfStatsFCSErrors=snSwIfStatsFCSErrors, snSwIfInfoTagType=snSwIfInfoTagType, snPortMacSecurityIntfMacAddress=snPortMacSecurityIntfMacAddress, snPortMacSecurityIntfMacVlanId=snPortMacSecurityIntfMacVlanId, snRadiusServerIp=snRadiusServerIp, snNTPServerRowStatus=snNTPServerRowStatus, snQos=snQos, snAuthentication=snAuthentication, snIfMediaInfoEntry=snIfMediaInfoEntry, snPortMacSecurityModuleStatViolationCounts=snPortMacSecurityModuleStatViolationCounts, snNetFlowGblInactiveTimeout=snNetFlowGblInactiveTimeout, snFdpInterfaceEntry=snFdpInterfaceEntry, snFdpCachedAddrValue=snFdpCachedAddrValue, snSwIfInfoChnMode=snSwIfInfoChnMode, snVLanByIpxNetChassisStaticMask=snVLanByIpxNetChassisStaticMask, snWireless=snWireless, snIfIndexLookup2IfIndex=snIfIndexLookup2IfIndex, snNetFlow=snNetFlow, snPortMacGlobalSecurityFeature=snPortMacGlobalSecurityFeature, snSwPortStatsInFrames=snSwPortStatsInFrames, snMacFilterDestMask=snMacFilterDestMask, snDnsDomainName=snDnsDomainName, snSflowCollectorRowStatus=snSflowCollectorRowStatus, snSwPortStatsMultiColliFrames=snSwPortStatsMultiColliFrames, snMSTrunkPortList=snMSTrunkPortList, snVLanByATCableEntry=snVLanByATCableEntry, snNTPPollInterval=snNTPPollInterval, snSwIfMacLearningDisable=snSwIfMacLearningDisable, snTacacsSNMPAccess=snTacacsSNMPAccess, snIfIndexLookupInterfaceId=snIfIndexLookupInterfaceId, snSwSingleStpVLanId=snSwSingleStpVLanId, sn6to4TunnelInterface=sn6to4TunnelInterface, snVLanByProtocolStaticPortList=snVLanByProtocolStaticPortList, snPortMacSecurityAutosaveMacQueryIndex=snPortMacSecurityAutosaveMacQueryIndex, snSwGroupDefaultCfgMode=snSwGroupDefaultCfgMode, snAccountingCommandLevel=snAccountingCommandLevel, snMSTrunkIfRowStatus=snMSTrunkIfRowStatus, snSwPortVlanId=snSwPortVlanId, snIfStpCfgPathCost=snIfStpCfgPathCost, snIfStpPortDesignatedCost=snIfStpPortDesignatedCost, snMacFilterFrameTypeNum=snMacFilterFrameTypeNum, snIfOpticalMonitoringTemperature=snIfOpticalMonitoringTemperature, snFdpInterfaceTable=snFdpInterfaceTable, snMacFilterPortAccessTable=snMacFilterPortAccessTable, snIfIndexLookupEntry=snIfIndexLookupEntry, snRadiusSNMPServerMethod=snRadiusSNMPServerMethod, snAccountingExec=snAccountingExec, snIfStpPortAdminRstp=snIfStpPortAdminRstp, snNetFlowAggregationEnable=snNetFlowAggregationEnable, snIfMediaPartNumber=snIfMediaPartNumber, snRadiusServerAuthPort=snRadiusServerAuthPort, snSwIfStatsLinkChange=snSwIfStatsLinkChange, snNetFlowAggregationSourceInterface=snNetFlowAggregationSourceInterface, snSwPortInfoPhysAddress=snSwPortInfoPhysAddress, snPortMonitorMirrorList=snPortMonitorMirrorList, snSwIfStatsInPktsPerSec=snSwIfStatsInPktsPerSec, snSwPortDhcpGateListId=snSwPortDhcpGateListId, snSwPortStatsFrameTooShorts=snSwPortStatsFrameTooShorts, snVLanByPortCfgStpHelloTime=snVLanByPortCfgStpHelloTime, snAccountingCommandMethods=snAccountingCommandMethods, snPortMacSecurityModuleStatSlotNum=snPortMacSecurityModuleStatSlotNum, snIfMediaType=snIfMediaType, snFdpGlobalCdpRun=snFdpGlobalCdpRun)
mibBuilder.exportSymbols("FOUNDRY-SN-SWITCH-GROUP-MIB", snIfMediaSerialNumber=snIfMediaSerialNumber, snSSH=snSSH, snQosProfileName=snQosProfileName, snNTPServerEntry=snNTPServerEntry, snFdpCacheVersion=snFdpCacheVersion, snDosAttackPort=snDosAttackPort, snFdbStationIf=snFdbStationIf, snVLanByPortStpHoldTime=snVLanByPortStpHoldTime, snSwGroupIpMcastMode=snSwGroupIpMcastMode, snVLanByPortCfgStpRootCost=snVLanByPortCfgStpRootCost, snPortMacSecurityIntfContentSecurity=snPortMacSecurityIntfContentSecurity, PortQosTC=PortQosTC, snIfStpOperPathCost=snIfStpOperPathCost, snQosBindEntry=snQosBindEntry, snVLanByPortStpHelloTime=snVLanByPortStpHelloTime, snPortMonitorEntry=snPortMonitorEntry, snSwMaxMacFilterPerPort=snSwMaxMacFilterPerPort, snPortMacSecurityIntfContentMaxLockedMacAllowed=snPortMacSecurityIntfContentMaxLockedMacAllowed, snSwIfInfoAdminStatus=snSwIfInfoAdminStatus, snMSTrunkIfList=snMSTrunkIfList, snSwPortStatsOutFrames=snSwPortStatsOutFrames, snSwPortSetAll=snSwPortSetAll, snIfMediaInfoTable=snIfMediaInfoTable, snVLanByPortStpGroupMaxAge=snVLanByPortStpGroupMaxAge, snNTP=snNTP, snSwPortPresent=snSwPortPresent, snMacFilterPortAccessFilters=snMacFilterPortAccessFilters, snSwIfInfoConnectorType=snSwIfInfoConnectorType, snIfStpBPDUReceived=snIfStpBPDUReceived, snFdpCachedAddressTable=snFdpCachedAddressTable, snPortMacGlobalSecurity=snPortMacGlobalSecurity, snPortStpPortDesignatedCost=snPortStpPortDesignatedCost, fdryMacVlanMIB=fdryMacVlanMIB, snVLanByPortVLanIndex=snVLanByPortVLanIndex, snVLanByIpSubnetChassisDynamicMask=snVLanByIpSubnetChassisDynamicMask, snSwPortStatsOutBcastFrames=snSwPortStatsOutBcastFrames, snInterfaceLookup2InterfaceId=snInterfaceLookup2InterfaceId, snInterfaceLookup2Entry=snInterfaceLookup2Entry, snMacFilterIfAccessRowStatus=snMacFilterIfAccessRowStatus, snSwIfStatsInKiloBitsPerSec=snSwIfStatsInKiloBitsPerSec, snDosAttackICMPBlockCount=snDosAttackICMPBlockCount, snVLanByPortPortList=snVLanByPortPortList, snPortMacSecurityIntfMacTable=snPortMacSecurityIntfMacTable, snFdpCachePlatform=snFdpCachePlatform, snVLanByPortCfgEntry=snVLanByPortCfgEntry, snVLanByATCableVLanId=snVLanByATCableVLanId, snSwPortInfoSpeed=snSwPortInfoSpeed, snNTPServerTable=snNTPServerTable, snIfStpOperState=snIfStpOperState, InterfaceId2=InterfaceId2, PortMask=PortMask, snSwIfStatsMacStations=snSwIfStatsMacStations, snSwIfInfoMonitorMode=snSwIfInfoMonitorMode, snSwPortInLinePowerPriority=snSwPortInLinePowerPriority, snRadiusServerUsage=snRadiusServerUsage, snVLanByPortMemberRowStatus=snVLanByPortMemberRowStatus, snPortStpPortAdminEdgePort=snPortStpPortAdminEdgePort, snVLanByIpxNetRowStatus=snVLanByIpxNetRowStatus, snSflowCollectorTable=snSflowCollectorTable, snIfStpPortAdminEdgePort=snIfStpPortAdminEdgePort, snSwPortStatsOutKiloBitsPerSec=snSwPortStatsOutKiloBitsPerSec, snVLanByIpSubnetRowStatus=snVLanByIpSubnetRowStatus, snSwGroupSwitchAgeTime=snSwGroupSwitchAgeTime, snSwIfDhcpGateListId=snSwIfDhcpGateListId, snMacFilterIndex=snMacFilterIndex, snPortMacSecurity=snPortMacSecurity, snSwPortStpPortEnable=snSwPortStpPortEnable, snSwSummaryMode=snSwSummaryMode, snIfRstpTCNBPDUReceived=snIfRstpTCNBPDUReceived, snQosProfileEntry=snQosProfileEntry, snNTPServerIp=snNTPServerIp, snNetFlowGblActiveTimeout=snNetFlowGblActiveTimeout, snVLanByPortTable=snVLanByPortTable, snInterfaceLookupEntry=snInterfaceLookupEntry, snSwPortInOctets=snSwPortInOctets, snVLanByPortVLanId=snVLanByPortVLanId, snVLanByPortStpDesignatedRoot=snVLanByPortStpDesignatedRoot, snVLanByPortStpTimeSinceTopologyChange=snVLanByPortStpTimeSinceTopologyChange, snVLanByATCableIndex=snVLanByATCableIndex, snNetFlowAggregationNumberOfCacheEntries=snNetFlowAggregationNumberOfCacheEntries, snDosAttack=snDosAttack, snVLanByPortVLanName=snVLanByPortVLanName, snRadiusEnableMethod=snRadiusEnableMethod, snSwPortInfoTable=snSwPortInfoTable, snSwPortTagType=snSwPortTagType, PhysAddress=PhysAddress, snSwIfStatsOutBcastFrames=snSwIfStatsOutBcastFrames, snMSTrunkRowStatus=snMSTrunkRowStatus, snInterfaceLookup2Table=snInterfaceLookup2Table, snRadiusServerEntry=snRadiusServerEntry, snFdpCachedAddrDeviceIndex=snFdpCachedAddrDeviceIndex, InterfaceId=InterfaceId, snAuthorizationExec=snAuthorizationExec, snSwPortInfoMediaType=snSwPortInfoMediaType, snMacFilterFrameType=snMacFilterFrameType, snNetFlowIfTable=snNetFlowIfTable, snVLanByATCableStaticPortList=snVLanByATCableStaticPortList, snSwPortInfoMonitorMode=snSwPortInfoMonitorMode, snSwIfStatsTxColliFrames=snSwIfStatsTxColliFrames, snSwIfInfoTable=snSwIfInfoTable, snNetFlowIfEntry=snNetFlowIfEntry, snSwPortInfoGigType=snSwPortInfoGigType, snPortStpPortAdminRstp=snPortStpPortAdminRstp, snPortMacSecurityAutosaveMacEntry=snPortMacSecurityAutosaveMacEntry, snSwPortStatsLinkChange=snSwPortStatsLinkChange, snSwPortInfoLinkStatus=snSwPortInfoLinkStatus, snIfStpPortDesignatedPort=snIfStpPortDesignatedPort, snFdpGlobalRun=snFdpGlobalRun, snVLanByPortMemberPortId=snVLanByPortMemberPortId, snDnsInfo=snDnsInfo, snVLanByPortStpPriority=snVLanByPortStpPriority, snVLanByPortStpTopChanges=snVLanByPortStpTopChanges, snVLanByPortStpGroupHelloTime=snVLanByPortStpGroupHelloTime, snDnsGatewayIpAddrList=snDnsGatewayIpAddrList, snSFlowGlb=snSFlowGlb, snVLanByIpSubnetStaticPortList=snVLanByIpSubnetStaticPortList, snVLanByIpxNetChassisExcludeMask=snVLanByIpxNetChassisExcludeMask, snVLanByPortChassisPortMask=snVLanByPortChassisPortMask, snIfOpticalMonitoringTxPower=snIfOpticalMonitoringTxPower, snTrunkInfo=snTrunkInfo, snTacacsKey=snTacacsKey, snNetFlowAggregationTable=snNetFlowAggregationTable, snMacFilterOperator=snMacFilterOperator, snDosAttackPortTable=snDosAttackPortTable, snFdpCacheDeviceId=snFdpCacheDeviceId, snFdpInterfaceFdpEnable=snFdpInterfaceFdpEnable, snVLanByPortStpMaxAge=snVLanByPortStpMaxAge, snVLanByPortCfgVLanName=snVLanByPortCfgVLanName, snIfRstpConfigBPDUTransmitted=snIfRstpConfigBPDUTransmitted, snMacFilterPortAccessEntry=snMacFilterPortAccessEntry, snPortMacSecurityIntfContentShutdownTime=snPortMacSecurityIntfContentShutdownTime, snFdpCacheAddressType=snFdpCacheAddressType, snSwIfStatsInUtilization=snSwIfStatsInUtilization, snSwPortStatsInMcastFrames=snSwPortStatsInMcastFrames, snVLanByPortBaseType=snVLanByPortBaseType, snSwPortStatsTxColliFrames=snSwPortStatsTxColliFrames, snSwPortIfIndex=snSwPortIfIndex, snFdpCachedAddrDeviceAddrEntryIndex=snFdpCachedAddrDeviceAddrEntryIndex, snRadiusRetransmit=snRadiusRetransmit, snSwPortGBICStatus=snSwPortGBICStatus, snAAA=snAAA, snFdpCacheDeviceIndex=snFdpCacheDeviceIndex, snSwPortInfoPortQos=snSwPortInfoPortQos, snNTPSystemClock=snNTPSystemClock, VlanTagMode=VlanTagMode, snMSTrunkTable=snMSTrunkTable, snPortStpPortNum=snPortStpPortNum, snVLanByIpSubnetDynamic=snVLanByIpSubnetDynamic, snSwIfInfoEntry=snSwIfInfoEntry, snVLanByIpxNetStaticMask=snVLanByIpxNetStaticMask, snVLanByPortCfgVLanId=snVLanByPortCfgVLanId, snSwIfInfoAutoNegotiate=snSwIfInfoAutoNegotiate, snPortMacSecurityAutosaveMacResource=snPortMacSecurityAutosaveMacResource, snSwIfFastSpanUplinkEnable=snSwIfFastSpanUplinkEnable, snPortMacSecurityIntfContentViolationCounts=snPortMacSecurityIntfContentViolationCounts, snSwIfRouteOnly=snSwIfRouteOnly, snVLanByProtocolRouterIntf=snVLanByProtocolRouterIntf, snMacFilterIfAccessEntry=snMacFilterIfAccessEntry, snSwPortFastSpanUplinkEnable=snSwPortFastSpanUplinkEnable, snVLanByPortCfgStpDesignatedRoot=snVLanByPortCfgStpDesignatedRoot, snSwIfStatsOutKiloBitsPerSec=snSwIfStatsOutKiloBitsPerSec, snPortMonitorIfIndex=snPortMonitorIfIndex, snIfStpPortProtocolMigration=snIfStpPortProtocolMigration, snTrunkInterface=snTrunkInterface, snNetFlowIfIndex=snNetFlowIfIndex, snFdpCachedAddrType=snFdpCachedAddrType, snVLanByATCableChassisStaticMask=snVLanByATCableChassisStaticMask, snSwIfDescr=snSwIfDescr, snSwIfStatsAlignErrors=snSwIfStatsAlignErrors, snNetFlowCollectorTable=snNetFlowCollectorTable, snPortStpVLanId=snPortStpVLanId, snVLanByIpSubnetVLanName=snVLanByIpSubnetVLanName, snSSL=snSSL, snSwIfStatsInDiscard=snSwIfStatsInDiscard, snFdbTableStationFlush=snFdbTableStationFlush)
