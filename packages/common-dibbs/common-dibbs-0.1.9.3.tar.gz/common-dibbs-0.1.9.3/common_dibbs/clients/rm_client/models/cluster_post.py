# coding: utf-8

"""
    Resource manager API

    Manage Cloud Computing resources via API.

    OpenAPI spec version: 0.1.12
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from pprint import pformat
from six import iteritems
import re


class ClusterPost(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, name=None, appliance=None, targeted_slaves_count=None):
        """
        ClusterPost - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'name': 'str',
            'appliance': 'str',
            'targeted_slaves_count': 'int'
        }

        self.attribute_map = {
            'name': 'name',
            'appliance': 'appliance',
            'targeted_slaves_count': 'targeted_slaves_count'
        }

        self._name = name
        self._appliance = appliance
        self._targeted_slaves_count = targeted_slaves_count


    @property
    def name(self):
        """
        Gets the name of this ClusterPost.
        Name given to the cluster

        :return: The name of this ClusterPost.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this ClusterPost.
        Name given to the cluster

        :param name: The name of this ClusterPost.
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def appliance(self):
        """
        Gets the appliance of this ClusterPost.
        Appliance of the cluster

        :return: The appliance of this ClusterPost.
        :rtype: str
        """
        return self._appliance

    @appliance.setter
    def appliance(self, appliance):
        """
        Sets the appliance of this ClusterPost.
        Appliance of the cluster

        :param appliance: The appliance of this ClusterPost.
        :type: str
        """
        if appliance is None:
            raise ValueError("Invalid value for `appliance`, must not be `None`")

        self._appliance = appliance

    @property
    def targeted_slaves_count(self):
        """
        Gets the targeted_slaves_count of this ClusterPost.
        Number of slaves in the cluster

        :return: The targeted_slaves_count of this ClusterPost.
        :rtype: int
        """
        return self._targeted_slaves_count

    @targeted_slaves_count.setter
    def targeted_slaves_count(self, targeted_slaves_count):
        """
        Sets the targeted_slaves_count of this ClusterPost.
        Number of slaves in the cluster

        :param targeted_slaves_count: The targeted_slaves_count of this ClusterPost.
        :type: int
        """
        if targeted_slaves_count is None:
            raise ValueError("Invalid value for `targeted_slaves_count`, must not be `None`")

        self._targeted_slaves_count = targeted_slaves_count

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
