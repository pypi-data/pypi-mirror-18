# Copyright (c) 2016 Anki, Inc.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License in the file LICENSE.txt or at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

"""
Autogenerated python message buffer code.
Source: clad/externalInterface/keyWordRecognized.clad
Full command line: ../tools/message-buffers/emitters/Python_emitter.py -C ./src/ -I ../robot/clad/src/ ../coretech/vision/clad/src/ ../coretech/common/clad/src/ -o ../generated/cladPython// clad/externalInterface/keyWordRecognized.clad
"""

from __future__ import absolute_import
from __future__ import print_function

def _modify_path():
  import inspect, os, sys
  search_paths = [
    '../..',
    '../../../../tools/message-buffers/support/python',
  ]
  currentpath = os.path.abspath(os.path.dirname(inspect.getfile(inspect.currentframe())))
  for search_path in search_paths:
    search_path = os.path.normpath(os.path.abspath(os.path.realpath(os.path.join(currentpath, search_path))))
    if search_path not in sys.path:
      sys.path.insert(0, search_path)
_modify_path()

import msgbuffers

Anki = msgbuffers.Namespace()
Anki.Cozmo = msgbuffers.Namespace()
Anki.Cozmo.ExternalInterface = msgbuffers.Namespace()

from clad.types.keyWords import Anki as _Anki
Anki.update(_Anki.deep_clone())

class KeyWordRecognized(object):
  "Generated message-passing message."

  __slots__ = (
    '_keyWord', # Anki.Cozmo.KeyWord
    '_score',   # int_32
  )

  @property
  def keyWord(self):
    "Anki.Cozmo.KeyWord keyWord struct property."
    return self._keyWord

  @keyWord.setter
  def keyWord(self, value):
    self._keyWord = msgbuffers.validate_integer(
      'KeyWordRecognized.keyWord', value, 0, 255)

  @property
  def score(self):
    "int_32 score struct property."
    return self._score

  @score.setter
  def score(self, value):
    self._score = msgbuffers.validate_integer(
      'KeyWordRecognized.score', value, -2147483648, 2147483647)

  def __init__(self, keyWord=Anki.Cozmo.KeyWord.WatchMe, score=0):
    self.keyWord = keyWord
    self.score = score

  @classmethod
  def unpack(cls, buffer):
    "Reads a new KeyWordRecognized from the given buffer."
    reader = msgbuffers.BinaryReader(buffer)
    value = cls.unpack_from(reader)
    if reader.tell() != len(reader):
      raise msgbuffers.ReadError(
        ('KeyWordRecognized.unpack received a buffer of length {length}, ' +
        'but only {position} bytes were read.').format(
        length=len(reader), position=reader.tell()))
    return value

  @classmethod
  def unpack_from(cls, reader):
    "Reads a new KeyWordRecognized from the given BinaryReader."
    _keyWord = reader.read('B')
    _score = reader.read('i')
    return cls(_keyWord, _score)

  def pack(self):
    "Writes the current KeyWordRecognized, returning bytes."
    writer = msgbuffers.BinaryWriter()
    self.pack_to(writer)
    return writer.dumps()

  def pack_to(self, writer):
    "Writes the current KeyWordRecognized to the given BinaryWriter."
    writer.write(self._keyWord, 'B')
    writer.write(self._score, 'i')

  def __eq__(self, other):
    if type(self) is type(other):
      return (self._keyWord == other._keyWord and
        self._score == other._score)
    else:
      return NotImplemented

  def __ne__(self, other):
    if type(self) is type(other):
      return not self.__eq__(other)
    else:
      return NotImplemented

  def __len__(self):
    return (msgbuffers.size(self._keyWord, 'B') +
      msgbuffers.size(self._score, 'i'))

  def __str__(self):
    return '{type}(keyWord={keyWord}, score={score})'.format(
      type=type(self).__name__,
      keyWord=self._keyWord,
      score=self._score)

  def __repr__(self):
    return '{type}(keyWord={keyWord}, score={score})'.format(
      type=type(self).__name__,
      keyWord=repr(self._keyWord),
      score=repr(self._score))

Anki.Cozmo.ExternalInterface.KeyWordRecognized = KeyWordRecognized
del KeyWordRecognized


