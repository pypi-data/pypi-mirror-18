<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"
  "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">


<html xmlns="http://www.w3.org/1999/xhtml">
  <head>
    <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
    
    <title>dunshire.errors &mdash; Dunshire 0.1.1 documentation</title>
    
    <link rel="stylesheet" href="../../_static/alabaster.css" type="text/css" />
    <link rel="stylesheet" href="../../_static/pygments.css" type="text/css" />
    
    <script type="text/javascript">
      var DOCUMENTATION_OPTIONS = {
        URL_ROOT:    '../../',
        VERSION:     '0.1.1',
        COLLAPSE_INDEX: false,
        FILE_SUFFIX: '.xhtml',
        HAS_SOURCE:  true
      };
    </script>
    <script type="text/javascript" src="../../_static/jquery.js"></script>
    <script type="text/javascript" src="../../_static/underscore.js"></script>
    <script type="text/javascript" src="../../_static/doctools.js"></script>
    <script type="text/javascript" src="https://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML"></script>
    <link rel="top" title="Dunshire 0.1.1 documentation" href="../../index.xhtml" />
    <link rel="up" title="Module code" href="../index.xhtml" />
   
  <link rel="stylesheet" href="../../_static/custom.css" type="text/css" />
  
  
  <meta name="viewport" content="width=device-width, initial-scale=0.9, maximum-scale=0.9" />

  </head>
  <body role="document">
  

    <div class="document">
      <div class="documentwrapper">
        <div class="bodywrapper">
          <div class="body" role="main">
            
  <h1>Source code for dunshire.errors</h1><div class="highlight"><pre>
<span></span><span class="sd">&quot;&quot;&quot;</span>
<span class="sd">Errors that can occur when solving a linear game.</span>
<span class="sd">&quot;&quot;&quot;</span>

<span class="kn">from</span> <span class="nn">cvxopt</span> <span class="kn">import</span> <span class="n">matrix</span>


<span class="k">def</span> <span class="nf">_pretty_format_dict</span><span class="p">(</span><span class="n">dictionary</span><span class="p">):</span>
    <span class="sd">&quot;&quot;&quot;</span>
<span class="sd">    Return a pretty-formatted string representation of a dictionary</span>
<span class="sd">    containing CVXOPT matrices.</span>

<span class="sd">    The dictionary is also sorted so that it can be tested repeatably.</span>

<span class="sd">    Examples</span>
<span class="sd">    --------</span>

<span class="sd">        &gt;&gt;&gt; d = {&#39;foo&#39;: 1.234, &#39;bar&#39;: matrix([1,2,3])}</span>
<span class="sd">        &gt;&gt;&gt; print(_pretty_format_dict(d))</span>
<span class="sd">        bar:</span>
<span class="sd">          [ 1]</span>
<span class="sd">          [ 2]</span>
<span class="sd">          [ 3]</span>
<span class="sd">        foo: 1.234</span>

<span class="sd">    &quot;&quot;&quot;</span>
    <span class="n">result</span> <span class="o">=</span> <span class="s1">&#39;&#39;</span>
    <span class="k">for</span> <span class="p">(</span><span class="n">key</span><span class="p">,</span> <span class="n">value</span><span class="p">)</span> <span class="ow">in</span> <span class="nb">sorted</span><span class="p">(</span><span class="n">dictionary</span><span class="o">.</span><span class="n">items</span><span class="p">()):</span>
        <span class="k">if</span> <span class="nb">isinstance</span><span class="p">(</span><span class="n">value</span><span class="p">,</span> <span class="n">matrix</span><span class="p">):</span>
            <span class="c1"># Display matrices on their own lines, indented.</span>
            <span class="n">result</span> <span class="o">+=</span> <span class="s1">&#39;{:s}:&#39;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="n">key</span><span class="p">)</span>
            <span class="n">colvec</span> <span class="o">=</span> <span class="s1">&#39;</span><span class="se">\n</span><span class="s1">{!s}&#39;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="n">value</span><span class="p">)</span>
            <span class="n">result</span> <span class="o">+=</span> <span class="s1">&#39;</span><span class="se">\n</span><span class="s1">  &#39;</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="n">colvec</span><span class="o">.</span><span class="n">splitlines</span><span class="p">())</span>
            <span class="n">result</span> <span class="o">+=</span> <span class="s1">&#39;</span><span class="se">\n</span><span class="s1">&#39;</span>
        <span class="k">else</span><span class="p">:</span>
            <span class="n">result</span> <span class="o">+=</span> <span class="s1">&#39;{:s}: {!s}</span><span class="se">\n</span><span class="s1">&#39;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="n">key</span><span class="p">,</span> <span class="n">value</span><span class="p">)</span>

    <span class="k">return</span> <span class="n">result</span><span class="o">.</span><span class="n">rstrip</span><span class="p">(</span><span class="s1">&#39;</span><span class="se">\n</span><span class="s1">&#39;</span><span class="p">)</span> <span class="c1"># Kills trailing newlines on matrices.</span>


<div class="viewcode-block" id="GameUnsolvableException"><a class="viewcode-back" href="../../developer-api.xhtml#dunshire.errors.GameUnsolvableException">[docs]</a><span class="k">class</span> <span class="nc">GameUnsolvableException</span><span class="p">(</span><span class="ne">Exception</span><span class="p">):</span>
    <span class="sd">&quot;&quot;&quot;</span>
<span class="sd">    An exception raised when a game cannot be solved.</span>

<span class="sd">    Every linear game has a solution. If we can&#39;t solve the conic</span>
<span class="sd">    program associated with a linear game, then something is wrong with</span>
<span class="sd">    either the model or the input, and this exception should be raised.</span>

<span class="sd">    Parameters</span>
<span class="sd">    ----------</span>

<span class="sd">    game : SymmetricLinearGame</span>
<span class="sd">        A copy of the game whose solution failed.</span>

<span class="sd">    solution_dict : dict</span>
<span class="sd">        The solution dictionary returned from the failed cone program.</span>

<span class="sd">    Examples</span>
<span class="sd">    --------</span>

<span class="sd">       &gt;&gt;&gt; from dunshire import *</span>
<span class="sd">       &gt;&gt;&gt; K = IceCream(2)</span>
<span class="sd">       &gt;&gt;&gt; L = [[1,2],[3,4]]</span>
<span class="sd">       &gt;&gt;&gt; e1 = [1, 0.1]</span>
<span class="sd">       &gt;&gt;&gt; e2 = [3, 0.1]</span>
<span class="sd">       &gt;&gt;&gt; G = SymmetricLinearGame(L,K,e1,e2)</span>
<span class="sd">       &gt;&gt;&gt; d = {&#39;residual as dual infeasibility certificate&#39;: None,</span>
<span class="sd">       ...      &#39;y&#39;: matrix([1,1]),</span>
<span class="sd">       ...      &#39;dual slack&#39;: 8.779496368228267e-10,</span>
<span class="sd">       ...      &#39;z&#39;: matrix([1,1,0,0]),</span>
<span class="sd">       ...      &#39;s&#39;: None,</span>
<span class="sd">       ...      &#39;primal infeasibility&#39;: None,</span>
<span class="sd">       ...      &#39;status&#39;: &#39;primal infeasible&#39;,</span>
<span class="sd">       ...      &#39;dual infeasibility&#39;: None,</span>
<span class="sd">       ...      &#39;relative gap&#39;: None,</span>
<span class="sd">       ...      &#39;iterations&#39;: 5,</span>
<span class="sd">       ...      &#39;primal slack&#39;: None,</span>
<span class="sd">       ...      &#39;x&#39;: None,</span>
<span class="sd">       ...      &#39;dual objective&#39;: 1.0,</span>
<span class="sd">       ...      &#39;primal objective&#39;: None,</span>
<span class="sd">       ...      &#39;gap&#39;: None,</span>
<span class="sd">       ...      &#39;residual as primal infeasibility certificate&#39;:</span>
<span class="sd">       ...          3.986246886102996e-09}</span>
<span class="sd">       &gt;&gt;&gt; print(GameUnsolvableException(G,d))</span>
<span class="sd">       Solution failed with result &quot;primal infeasible.&quot;</span>
<span class="sd">       The linear game (L, K, e1, e2) where</span>
<span class="sd">         L = [ 1  2]</span>
<span class="sd">             [ 3  4],</span>
<span class="sd">         K = Lorentz &quot;ice cream&quot; cone in the real 2-space,</span>
<span class="sd">         e1 = [1.0000000]</span>
<span class="sd">              [0.1000000],</span>
<span class="sd">         e2 = [3.0000000]</span>
<span class="sd">              [0.1000000]</span>
<span class="sd">       CVXOPT returned:</span>
<span class="sd">         dual infeasibility: None</span>
<span class="sd">         dual objective: 1.0</span>
<span class="sd">         dual slack: 8.779496368228267e-10</span>
<span class="sd">         gap: None</span>
<span class="sd">         iterations: 5</span>
<span class="sd">         primal infeasibility: None</span>
<span class="sd">         primal objective: None</span>
<span class="sd">         primal slack: None</span>
<span class="sd">         relative gap: None</span>
<span class="sd">         residual as dual infeasibility certificate: None</span>
<span class="sd">         residual as primal infeasibility certificate: 3.986246886102996e-09</span>
<span class="sd">         s: None</span>
<span class="sd">         status: primal infeasible</span>
<span class="sd">         x: None</span>
<span class="sd">         y:</span>
<span class="sd">           [ 1]</span>
<span class="sd">           [ 1]</span>
<span class="sd">         z:</span>
<span class="sd">           [ 1]</span>
<span class="sd">           [ 1]</span>
<span class="sd">           [ 0]</span>
<span class="sd">           [ 0]</span>
<span class="sd">    &quot;&quot;&quot;</span>
    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">game</span><span class="p">,</span> <span class="n">solution_dict</span><span class="p">):</span>
        <span class="sd">&quot;&quot;&quot;</span>
<span class="sd">        Create a new :class:`GameUnsolvableException` object.</span>
<span class="sd">        &quot;&quot;&quot;</span>
        <span class="nb">super</span><span class="p">()</span><span class="o">.</span><span class="n">__init__</span><span class="p">()</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">_game</span> <span class="o">=</span> <span class="n">game</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">_solution_dict</span> <span class="o">=</span> <span class="n">solution_dict</span>


<div class="viewcode-block" id="GameUnsolvableException.__str__"><a class="viewcode-back" href="../../developer-api.xhtml#dunshire.errors.GameUnsolvableException.__str__">[docs]</a>    <span class="k">def</span> <span class="nf">__str__</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="sd">&quot;&quot;&quot;</span>
<span class="sd">        Return a string representation of this exception.</span>

<span class="sd">        The returned representation highlights the &quot;status&quot; field of the</span>
<span class="sd">        CVXOPT dictionary, since that should explain what went</span>
<span class="sd">        wrong. The game details and full CVXOPT solution dictionary are</span>
<span class="sd">        included after the status.</span>
<span class="sd">        &quot;&quot;&quot;</span>
        <span class="n">tpl</span> <span class="o">=</span> <span class="s1">&#39;Solution failed with result &quot;{:s}.&quot;</span><span class="se">\n</span><span class="s1">&#39;</span> \
              <span class="s1">&#39;{!s}</span><span class="se">\n</span><span class="s1">&#39;</span> \
              <span class="s1">&#39;CVXOPT returned:</span><span class="se">\n</span><span class="s1">  {!s}&#39;</span>
        <span class="n">cvx_lines</span> <span class="o">=</span> <span class="n">_pretty_format_dict</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">_solution_dict</span><span class="p">)</span><span class="o">.</span><span class="n">splitlines</span><span class="p">()</span>
        <span class="c1"># Indent the whole dict by two spaces.</span>
        <span class="n">cvx_str</span> <span class="o">=</span> <span class="s1">&#39;</span><span class="se">\n</span><span class="s1">  &#39;</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="n">cvx_lines</span><span class="p">)</span>
        <span class="k">return</span> <span class="n">tpl</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">_solution_dict</span><span class="p">[</span><span class="s1">&#39;status&#39;</span><span class="p">],</span> <span class="bp">self</span><span class="o">.</span><span class="n">_game</span><span class="p">,</span> <span class="n">cvx_str</span><span class="p">)</span>

</div></div>
<div class="viewcode-block" id="PoorScalingException"><a class="viewcode-back" href="../../developer-api.xhtml#dunshire.errors.PoorScalingException">[docs]</a><span class="k">class</span> <span class="nc">PoorScalingException</span><span class="p">(</span><span class="ne">Exception</span><span class="p">):</span>
    <span class="sd">&quot;&quot;&quot;</span>
<span class="sd">    An exception raised when poor scaling leads to solution errors.</span>

<span class="sd">    Under certain circumstances, a problem that should be solvable can</span>
<span class="sd">    trigger errors in CVXOPT. The end result is the following</span>
<span class="sd">    :class:`ValueError`::</span>

<span class="sd">        Traceback (most recent call last):</span>
<span class="sd">        ...</span>
<span class="sd">          return math.sqrt(x[offset] - a) * math.sqrt(x[offset] + a)</span>
<span class="sd">        ValueError: math domain error</span>

<span class="sd">    This happens when one of the arguments to :func:`math.sqrt` is</span>
<span class="sd">    negative, but the underlying cause is elusive. We&#39;re blaming it on</span>
<span class="sd">    &quot;poor scaling,&quot; whatever that means.</span>

<span class="sd">    Similar issues have been discussed a few times on the CVXOPT mailing</span>
<span class="sd">    list; for example,</span>

<span class="sd">    1. https://groups.google.com/forum/#!msg/cvxopt/TeQGdc2b4Xc/j5_mQME_rvUJ</span>
<span class="sd">    2. https://groups.google.com/forum/#!topic/cvxopt/HZrRfaoM0pk</span>
<span class="sd">    3. https://groups.google.com/forum/#!topic/cvxopt/riFSxB31zU4</span>

<span class="sd">    Parameters</span>
<span class="sd">    ----------</span>

<span class="sd">    game : SymmetricLinearGame</span>
<span class="sd">        A copy of the game whose solution failed.</span>

<span class="sd">    Examples</span>
<span class="sd">    --------</span>

<span class="sd">       &gt;&gt;&gt; from dunshire import *</span>
<span class="sd">       &gt;&gt;&gt; K = IceCream(2)</span>
<span class="sd">       &gt;&gt;&gt; L = [[1,2],[3,4]]</span>
<span class="sd">       &gt;&gt;&gt; e1 = [1, 0.1]</span>
<span class="sd">       &gt;&gt;&gt; e2 = [3, 0.1]</span>
<span class="sd">       &gt;&gt;&gt; G = SymmetricLinearGame(L,K,e1,e2)</span>
<span class="sd">       &gt;&gt;&gt; print(PoorScalingException(G))</span>
<span class="sd">       Solution failed due to poor scaling.</span>
<span class="sd">       The linear game (L, K, e1, e2) where</span>
<span class="sd">         L = [ 1  2]</span>
<span class="sd">             [ 3  4],</span>
<span class="sd">         K = Lorentz &quot;ice cream&quot; cone in the real 2-space,</span>
<span class="sd">         e1 = [1.0000000]</span>
<span class="sd">              [0.1000000],</span>
<span class="sd">         e2 = [3.0000000]</span>
<span class="sd">              [0.1000000]</span>
<span class="sd">       &lt;BLANKLINE&gt;</span>
<span class="sd">    &quot;&quot;&quot;</span>
    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">game</span><span class="p">):</span>
        <span class="sd">&quot;&quot;&quot;</span>
<span class="sd">        Create a new :class:`PoorScalingException` object.</span>
<span class="sd">        &quot;&quot;&quot;</span>
        <span class="nb">super</span><span class="p">()</span><span class="o">.</span><span class="n">__init__</span><span class="p">()</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">_game</span> <span class="o">=</span> <span class="n">game</span>


<div class="viewcode-block" id="PoorScalingException.__str__"><a class="viewcode-back" href="../../developer-api.xhtml#dunshire.errors.PoorScalingException.__str__">[docs]</a>    <span class="k">def</span> <span class="nf">__str__</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="sd">&quot;&quot;&quot;</span>
<span class="sd">        Return a string representation of this exception.</span>

<span class="sd">        Pretty much all we can say is that there was poor scaling; that</span>
<span class="sd">        is, that CVXOPT failed. The game details are included after</span>
<span class="sd">        that.</span>
<span class="sd">        &quot;&quot;&quot;</span>
        <span class="n">tpl</span> <span class="o">=</span> <span class="s1">&#39;Solution failed due to poor scaling.</span><span class="se">\n</span><span class="s1">&#39;</span> \
              <span class="s1">&#39;{!s}</span><span class="se">\n</span><span class="s1">&#39;</span>
        <span class="k">return</span> <span class="n">tpl</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">_game</span><span class="p">)</span></div></div>
</pre></div>

          </div>
        </div>
      </div>
      <div class="sphinxsidebar" role="navigation" aria-label="main navigation">
        <div class="sphinxsidebarwrapper">
<h1 class="logo"><a href="../../index.xhtml">Dunshire</a></h1>








<h3>Navigation</h3>
<ul>
<li class="toctree-l1"><a class="reference internal" href="../../overview.xhtml">Overview</a></li>
<li class="toctree-l1"><a class="reference internal" href="../../requirements.xhtml">Requirements</a></li>
<li class="toctree-l1"><a class="reference internal" href="../../user-api.xhtml">User API Documentation</a></li>
<li class="toctree-l1"><a class="reference internal" href="../../background.xhtml">Background</a></li>
<li class="toctree-l1"><a class="reference internal" href="../../references.xhtml">References</a></li>
<li class="toctree-l1"><a class="reference internal" href="../../developer-api.xhtml">Developer API Documentation</a></li>
</ul>


        </div>
      </div>
      <div class="clearer"></div>
    </div>
    <div class="footer">
      
      
    </div>

    

    
  </body>
</html>