<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"
  "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">


<html xmlns="http://www.w3.org/1999/xhtml">
  <head>
    <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
    
    <title>Developer API Documentation &mdash; Dunshire 0.1.1 documentation</title>
    
    <link rel="stylesheet" href="_static/alabaster.css" type="text/css" />
    <link rel="stylesheet" href="_static/pygments.css" type="text/css" />
    
    <script type="text/javascript">
      var DOCUMENTATION_OPTIONS = {
        URL_ROOT:    './',
        VERSION:     '0.1.1',
        COLLAPSE_INDEX: false,
        FILE_SUFFIX: '.xhtml',
        HAS_SOURCE:  true
      };
    </script>
    <script type="text/javascript" src="_static/jquery.js"></script>
    <script type="text/javascript" src="_static/underscore.js"></script>
    <script type="text/javascript" src="_static/doctools.js"></script>
    <script type="text/javascript" src="https://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML"></script>
    <link rel="top" title="Dunshire 0.1.1 documentation" href="index.xhtml" />
    <link rel="prev" title="References" href="references.xhtml" />
   
  <link rel="stylesheet" href="_static/custom.css" type="text/css" />
  
  
  <meta name="viewport" content="width=device-width, initial-scale=0.9, maximum-scale=0.9" />

  </head>
  <body role="document">
  

    <div class="document">
      <div class="documentwrapper">
        <div class="bodywrapper">
          <div class="body" role="main">
            
  <div class="section" id="developer-api-documentation">
<h1>Developer API Documentation<a class="headerlink" href="#developer-api-documentation" title="Permalink to this headline">¶</a></h1>
<p>This section contains API documentation that is of interest to
developers, but not so much to end users. It documents our internal
modules, exceptions, the test suite, and supporting code.</p>
<div class="section" id="module-dunshire.errors">
<span id="dunshire-errors-module"></span><h2>dunshire.errors module<a class="headerlink" href="#module-dunshire.errors" title="Permalink to this headline">¶</a></h2>
<p>Errors that can occur when solving a linear game.</p>
<dl class="exception">
<dt id="dunshire.errors.GameUnsolvableException">
<em class="property">exception </em><code class="descname">GameUnsolvableException</code><span class="sig-paren">(</span><em>game</em>, <em>solution_dict</em><span class="sig-paren">)</span><a class="reference internal" href="_modules/dunshire/errors.xhtml#GameUnsolvableException"><span class="viewcode-link">[source]</span></a><a class="headerlink" href="#dunshire.errors.GameUnsolvableException" title="Permalink to this definition">¶</a></dt>
<dd><p>Bases: <code class="xref py py-class docutils literal"><span class="pre">Exception</span></code></p>
<p>An exception raised when a game cannot be solved.</p>
<p>Every linear game has a solution. If we can&#8217;t solve the conic
program associated with a linear game, then something is wrong with
either the model or the input, and this exception should be raised.</p>
<table class="docutils field-list" frame="void" rules="none">
<col class="field-name" />
<col class="field-body" />
<tbody valign="top">
<tr class="field-odd field"><th class="field-name">Parameters:</th><td class="field-body"><ul class="first last simple">
<li><strong>game</strong> (<a class="reference internal" href="user-api.xhtml#dunshire.games.SymmetricLinearGame" title="dunshire.games.SymmetricLinearGame"><em>SymmetricLinearGame</em></a>) &#8211; A copy of the game whose solution failed.</li>
<li><strong>solution_dict</strong> (<em>dict</em>) &#8211; The solution dictionary returned from the failed cone program.</li>
</ul>
</td>
</tr>
</tbody>
</table>
<p class="rubric">Examples</p>
<div class="highlight-python"><div class="highlight"><pre><span></span><span class="gp">&gt;&gt;&gt; </span><span class="kn">from</span> <span class="nn">dunshire</span> <span class="kn">import</span> <span class="o">*</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">K</span> <span class="o">=</span> <span class="n">IceCream</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">L</span> <span class="o">=</span> <span class="p">[[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">],[</span><span class="mi">3</span><span class="p">,</span><span class="mi">4</span><span class="p">]]</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">e1</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mf">0.1</span><span class="p">]</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">e2</span> <span class="o">=</span> <span class="p">[</span><span class="mi">3</span><span class="p">,</span> <span class="mf">0.1</span><span class="p">]</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">G</span> <span class="o">=</span> <span class="n">SymmetricLinearGame</span><span class="p">(</span><span class="n">L</span><span class="p">,</span><span class="n">K</span><span class="p">,</span><span class="n">e1</span><span class="p">,</span><span class="n">e2</span><span class="p">)</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">d</span> <span class="o">=</span> <span class="p">{</span><span class="s1">&#39;residual as dual infeasibility certificate&#39;</span><span class="p">:</span> <span class="bp">None</span><span class="p">,</span>
<span class="gp">... </span>     <span class="s1">&#39;y&#39;</span><span class="p">:</span> <span class="n">matrix</span><span class="p">([</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">]),</span>
<span class="gp">... </span>     <span class="s1">&#39;dual slack&#39;</span><span class="p">:</span> <span class="mf">8.779496368228267e-10</span><span class="p">,</span>
<span class="gp">... </span>     <span class="s1">&#39;z&#39;</span><span class="p">:</span> <span class="n">matrix</span><span class="p">([</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">]),</span>
<span class="gp">... </span>     <span class="s1">&#39;s&#39;</span><span class="p">:</span> <span class="bp">None</span><span class="p">,</span>
<span class="gp">... </span>     <span class="s1">&#39;primal infeasibility&#39;</span><span class="p">:</span> <span class="bp">None</span><span class="p">,</span>
<span class="gp">... </span>     <span class="s1">&#39;status&#39;</span><span class="p">:</span> <span class="s1">&#39;primal infeasible&#39;</span><span class="p">,</span>
<span class="gp">... </span>     <span class="s1">&#39;dual infeasibility&#39;</span><span class="p">:</span> <span class="bp">None</span><span class="p">,</span>
<span class="gp">... </span>     <span class="s1">&#39;relative gap&#39;</span><span class="p">:</span> <span class="bp">None</span><span class="p">,</span>
<span class="gp">... </span>     <span class="s1">&#39;iterations&#39;</span><span class="p">:</span> <span class="mi">5</span><span class="p">,</span>
<span class="gp">... </span>     <span class="s1">&#39;primal slack&#39;</span><span class="p">:</span> <span class="bp">None</span><span class="p">,</span>
<span class="gp">... </span>     <span class="s1">&#39;x&#39;</span><span class="p">:</span> <span class="bp">None</span><span class="p">,</span>
<span class="gp">... </span>     <span class="s1">&#39;dual objective&#39;</span><span class="p">:</span> <span class="mf">1.0</span><span class="p">,</span>
<span class="gp">... </span>     <span class="s1">&#39;primal objective&#39;</span><span class="p">:</span> <span class="bp">None</span><span class="p">,</span>
<span class="gp">... </span>     <span class="s1">&#39;gap&#39;</span><span class="p">:</span> <span class="bp">None</span><span class="p">,</span>
<span class="gp">... </span>     <span class="s1">&#39;residual as primal infeasibility certificate&#39;</span><span class="p">:</span>
<span class="gp">... </span>         <span class="mf">3.986246886102996e-09</span><span class="p">}</span>
<span class="gp">&gt;&gt;&gt; </span><span class="k">print</span><span class="p">(</span><span class="n">GameUnsolvableException</span><span class="p">(</span><span class="n">G</span><span class="p">,</span><span class="n">d</span><span class="p">))</span>
<span class="go">Solution failed with result &quot;primal infeasible.&quot;</span>
<span class="go">The linear game (L, K, e1, e2) where</span>
<span class="go">  L = [ 1  2]</span>
<span class="go">      [ 3  4],</span>
<span class="go">  K = Lorentz &quot;ice cream&quot; cone in the real 2-space,</span>
<span class="go">  e1 = [1.0000000]</span>
<span class="go">       [0.1000000],</span>
<span class="go">  e2 = [3.0000000]</span>
<span class="go">       [0.1000000]</span>
<span class="go">CVXOPT returned:</span>
<span class="go">  dual infeasibility: None</span>
<span class="go">  dual objective: 1.0</span>
<span class="go">  dual slack: 8.779496368228267e-10</span>
<span class="go">  gap: None</span>
<span class="go">  iterations: 5</span>
<span class="go">  primal infeasibility: None</span>
<span class="go">  primal objective: None</span>
<span class="go">  primal slack: None</span>
<span class="go">  relative gap: None</span>
<span class="go">  residual as dual infeasibility certificate: None</span>
<span class="go">  residual as primal infeasibility certificate: 3.986246886102996e-09</span>
<span class="go">  s: None</span>
<span class="go">  status: primal infeasible</span>
<span class="go">  x: None</span>
<span class="go">  y:</span>
<span class="go">    [ 1]</span>
<span class="go">    [ 1]</span>
<span class="go">  z:</span>
<span class="go">    [ 1]</span>
<span class="go">    [ 1]</span>
<span class="go">    [ 0]</span>
<span class="go">    [ 0]</span>
</pre></div>
</div>
<dl class="method">
<dt id="dunshire.errors.GameUnsolvableException.__str__">
<code class="descname">__str__</code><span class="sig-paren">(</span><span class="sig-paren">)</span><a class="reference internal" href="_modules/dunshire/errors.xhtml#GameUnsolvableException.__str__"><span class="viewcode-link">[source]</span></a><a class="headerlink" href="#dunshire.errors.GameUnsolvableException.__str__" title="Permalink to this definition">¶</a></dt>
<dd><p>Return a string representation of this exception.</p>
<p>The returned representation highlights the &#8220;status&#8221; field of the
CVXOPT dictionary, since that should explain what went
wrong. The game details and full CVXOPT solution dictionary are
included after the status.</p>
</dd></dl>

</dd></dl>

<dl class="exception">
<dt id="dunshire.errors.PoorScalingException">
<em class="property">exception </em><code class="descname">PoorScalingException</code><span class="sig-paren">(</span><em>game</em><span class="sig-paren">)</span><a class="reference internal" href="_modules/dunshire/errors.xhtml#PoorScalingException"><span class="viewcode-link">[source]</span></a><a class="headerlink" href="#dunshire.errors.PoorScalingException" title="Permalink to this definition">¶</a></dt>
<dd><p>Bases: <code class="xref py py-class docutils literal"><span class="pre">Exception</span></code></p>
<p>An exception raised when poor scaling leads to solution errors.</p>
<p>Under certain circumstances, a problem that should be solvable can
trigger errors in CVXOPT. The end result is the following
<code class="xref py py-class docutils literal"><span class="pre">ValueError</span></code>:</p>
<div class="highlight-python"><div class="highlight"><pre><span></span>Traceback (most recent call last):
...
  return math.sqrt(x[offset] - a) * math.sqrt(x[offset] + a)
ValueError: math domain error
</pre></div>
</div>
<p>This happens when one of the arguments to <code class="xref py py-func docutils literal"><span class="pre">math.sqrt()</span></code> is
negative, but the underlying cause is elusive. We&#8217;re blaming it on
&#8220;poor scaling,&#8221; whatever that means.</p>
<p>Similar issues have been discussed a few times on the CVXOPT mailing
list; for example,</p>
<ol class="arabic simple">
<li><a class="reference external" href="https://groups.google.com/forum/#!msg/cvxopt/TeQGdc2b4Xc/j5_mQME_rvUJ">https://groups.google.com/forum/#!msg/cvxopt/TeQGdc2b4Xc/j5_mQME_rvUJ</a></li>
<li><a class="reference external" href="https://groups.google.com/forum/#!topic/cvxopt/HZrRfaoM0pk">https://groups.google.com/forum/#!topic/cvxopt/HZrRfaoM0pk</a></li>
<li><a class="reference external" href="https://groups.google.com/forum/#!topic/cvxopt/riFSxB31zU4">https://groups.google.com/forum/#!topic/cvxopt/riFSxB31zU4</a></li>
</ol>
<table class="docutils field-list" frame="void" rules="none">
<col class="field-name" />
<col class="field-body" />
<tbody valign="top">
<tr class="field-odd field"><th class="field-name">Parameters:</th><td class="field-body"><strong>game</strong> (<a class="reference internal" href="user-api.xhtml#dunshire.games.SymmetricLinearGame" title="dunshire.games.SymmetricLinearGame"><em>SymmetricLinearGame</em></a>) &#8211; A copy of the game whose solution failed.</td>
</tr>
</tbody>
</table>
<p class="rubric">Examples</p>
<div class="highlight-python"><div class="highlight"><pre><span></span><span class="gp">&gt;&gt;&gt; </span><span class="kn">from</span> <span class="nn">dunshire</span> <span class="kn">import</span> <span class="o">*</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">K</span> <span class="o">=</span> <span class="n">IceCream</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">L</span> <span class="o">=</span> <span class="p">[[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">],[</span><span class="mi">3</span><span class="p">,</span><span class="mi">4</span><span class="p">]]</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">e1</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mf">0.1</span><span class="p">]</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">e2</span> <span class="o">=</span> <span class="p">[</span><span class="mi">3</span><span class="p">,</span> <span class="mf">0.1</span><span class="p">]</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">G</span> <span class="o">=</span> <span class="n">SymmetricLinearGame</span><span class="p">(</span><span class="n">L</span><span class="p">,</span><span class="n">K</span><span class="p">,</span><span class="n">e1</span><span class="p">,</span><span class="n">e2</span><span class="p">)</span>
<span class="gp">&gt;&gt;&gt; </span><span class="k">print</span><span class="p">(</span><span class="n">PoorScalingException</span><span class="p">(</span><span class="n">G</span><span class="p">))</span>
<span class="go">Solution failed due to poor scaling.</span>
<span class="go">The linear game (L, K, e1, e2) where</span>
<span class="go">  L = [ 1  2]</span>
<span class="go">      [ 3  4],</span>
<span class="go">  K = Lorentz &quot;ice cream&quot; cone in the real 2-space,</span>
<span class="go">  e1 = [1.0000000]</span>
<span class="go">       [0.1000000],</span>
<span class="go">  e2 = [3.0000000]</span>
<span class="go">       [0.1000000]</span>
</pre></div>
</div>
<dl class="method">
<dt id="dunshire.errors.PoorScalingException.__str__">
<code class="descname">__str__</code><span class="sig-paren">(</span><span class="sig-paren">)</span><a class="reference internal" href="_modules/dunshire/errors.xhtml#PoorScalingException.__str__"><span class="viewcode-link">[source]</span></a><a class="headerlink" href="#dunshire.errors.PoorScalingException.__str__" title="Permalink to this definition">¶</a></dt>
<dd><p>Return a string representation of this exception.</p>
<p>Pretty much all we can say is that there was poor scaling; that
is, that CVXOPT failed. The game details are included after
that.</p>
</dd></dl>

</dd></dl>

</div>
<div class="section" id="module-dunshire.matrices">
<span id="dunshire-matrices-module"></span><h2>dunshire.matrices module<a class="headerlink" href="#module-dunshire.matrices" title="Permalink to this headline">¶</a></h2>
<p>Utility functions for working with CVXOPT matrices (instances of the
class:<cite>cvxopt.base.matrix</cite> class).</p>
<dl class="function">
<dt id="dunshire.matrices.append_col">
<code class="descname">append_col</code><span class="sig-paren">(</span><em>left</em>, <em>right</em><span class="sig-paren">)</span><a class="reference internal" href="_modules/dunshire/matrices.xhtml#append_col"><span class="viewcode-link">[source]</span></a><a class="headerlink" href="#dunshire.matrices.append_col" title="Permalink to this definition">¶</a></dt>
<dd><p>Append two matrices side-by-side.</p>
<table class="docutils field-list" frame="void" rules="none">
<col class="field-name" />
<col class="field-body" />
<tbody valign="top">
<tr class="field-odd field"><th class="field-name">Parameters:</th><td class="field-body"><ul class="first simple">
<li><strong>left</strong> (<em>matrix</em>) &#8211; The &#8220;original&#8221; matrix, the one that will wind up on the left.</li>
<li><strong>right</strong> (<em>matrix</em>) &#8211; The matrix to be appended on the right of <code class="docutils literal"><span class="pre">left</span></code>.</li>
</ul>
</td>
</tr>
<tr class="field-even field"><th class="field-name">Returns:</th><td class="field-body"><p class="first">A new matrix consisting of <code class="docutils literal"><span class="pre">right</span></code> appended to the right
of <code class="docutils literal"><span class="pre">left</span></code>.</p>
</td>
</tr>
<tr class="field-odd field"><th class="field-name">Return type:</th><td class="field-body"><p class="first last">matrix</p>
</td>
</tr>
</tbody>
</table>
<p class="rubric">Examples</p>
<div class="highlight-python"><div class="highlight"><pre><span></span><span class="gp">&gt;&gt;&gt; </span><span class="n">A</span> <span class="o">=</span> <span class="n">matrix</span><span class="p">([</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">4</span><span class="p">],</span> <span class="p">(</span><span class="mi">2</span><span class="p">,</span><span class="mi">2</span><span class="p">))</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">B</span> <span class="o">=</span> <span class="n">matrix</span><span class="p">([</span><span class="mi">5</span><span class="p">,</span><span class="mi">6</span><span class="p">,</span><span class="mi">7</span><span class="p">,</span><span class="mi">8</span><span class="p">,</span><span class="mi">9</span><span class="p">,</span><span class="mi">10</span><span class="p">],</span> <span class="p">(</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">))</span>
<span class="gp">&gt;&gt;&gt; </span><span class="k">print</span><span class="p">(</span><span class="n">A</span><span class="p">)</span>
<span class="go">[ 1  3]</span>
<span class="go">[ 2  4]</span>

<span class="gp">&gt;&gt;&gt; </span><span class="k">print</span><span class="p">(</span><span class="n">B</span><span class="p">)</span>
<span class="go">[  5   7   9]</span>
<span class="go">[  6   8  10]</span>

<span class="gp">&gt;&gt;&gt; </span><span class="k">print</span><span class="p">(</span><span class="n">append_col</span><span class="p">(</span><span class="n">A</span><span class="p">,</span><span class="n">B</span><span class="p">))</span>
<span class="go">[  1   3   5   7   9]</span>
<span class="go">[  2   4   6   8  10]</span>
</pre></div>
</div>
</dd></dl>

<dl class="function">
<dt id="dunshire.matrices.append_row">
<code class="descname">append_row</code><span class="sig-paren">(</span><em>top</em>, <em>bottom</em><span class="sig-paren">)</span><a class="reference internal" href="_modules/dunshire/matrices.xhtml#append_row"><span class="viewcode-link">[source]</span></a><a class="headerlink" href="#dunshire.matrices.append_row" title="Permalink to this definition">¶</a></dt>
<dd><p>Append two matrices top-to-bottom.</p>
<table class="docutils field-list" frame="void" rules="none">
<col class="field-name" />
<col class="field-body" />
<tbody valign="top">
<tr class="field-odd field"><th class="field-name">Parameters:</th><td class="field-body"><ul class="first simple">
<li><strong>top</strong> (<em>matrix</em>) &#8211; The &#8220;original&#8221; matrix, the one that will wind up on top.</li>
<li><strong>bottom</strong> (<em>matrix</em>) &#8211; The matrix to be appended below <code class="docutils literal"><span class="pre">top</span></code>.</li>
</ul>
</td>
</tr>
<tr class="field-even field"><th class="field-name">Returns:</th><td class="field-body"><p class="first">A new matrix consisting of <code class="docutils literal"><span class="pre">bottom</span></code> appended below <code class="docutils literal"><span class="pre">top</span></code>.</p>
</td>
</tr>
<tr class="field-odd field"><th class="field-name">Return type:</th><td class="field-body"><p class="first last">matrix</p>
</td>
</tr>
</tbody>
</table>
<p class="rubric">Examples</p>
<div class="highlight-python"><div class="highlight"><pre><span></span><span class="gp">&gt;&gt;&gt; </span><span class="n">A</span> <span class="o">=</span> <span class="n">matrix</span><span class="p">([</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">4</span><span class="p">],</span> <span class="p">(</span><span class="mi">2</span><span class="p">,</span><span class="mi">2</span><span class="p">))</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">B</span> <span class="o">=</span> <span class="n">matrix</span><span class="p">([</span><span class="mi">5</span><span class="p">,</span><span class="mi">6</span><span class="p">,</span><span class="mi">7</span><span class="p">,</span><span class="mi">8</span><span class="p">,</span><span class="mi">9</span><span class="p">,</span><span class="mi">10</span><span class="p">],</span> <span class="p">(</span><span class="mi">3</span><span class="p">,</span><span class="mi">2</span><span class="p">))</span>
<span class="gp">&gt;&gt;&gt; </span><span class="k">print</span><span class="p">(</span><span class="n">A</span><span class="p">)</span>
<span class="go">[ 1  3]</span>
<span class="go">[ 2  4]</span>

<span class="gp">&gt;&gt;&gt; </span><span class="k">print</span><span class="p">(</span><span class="n">B</span><span class="p">)</span>
<span class="go">[  5   8]</span>
<span class="go">[  6   9]</span>
<span class="go">[  7  10]</span>

<span class="gp">&gt;&gt;&gt; </span><span class="k">print</span><span class="p">(</span><span class="n">append_row</span><span class="p">(</span><span class="n">A</span><span class="p">,</span><span class="n">B</span><span class="p">))</span>
<span class="go">[  1   3]</span>
<span class="go">[  2   4]</span>
<span class="go">[  5   8]</span>
<span class="go">[  6   9]</span>
<span class="go">[  7  10]</span>
</pre></div>
</div>
</dd></dl>

<dl class="function">
<dt id="dunshire.matrices.condition_number">
<code class="descname">condition_number</code><span class="sig-paren">(</span><em>mat</em><span class="sig-paren">)</span><a class="reference internal" href="_modules/dunshire/matrices.xhtml#condition_number"><span class="viewcode-link">[source]</span></a><a class="headerlink" href="#dunshire.matrices.condition_number" title="Permalink to this definition">¶</a></dt>
<dd><p>Return the condition number of the given matrix.</p>
<p>The condition number of a matrix quantifies how hard it is to do
numerical computation with that matrix. It is usually defined as
the ratio of the norm of the matrix to the norm of its inverse, and
therefore depends on the norm used. One way to compute the condition
number with respect to the 2-norm is as the ratio of the matrix&#8217;s
largest and smallest singular values. Since we have easy access to
those singular values, that is the algorithm we use.</p>
<p>The larger the condition number is, the worse the matrix is.</p>
<table class="docutils field-list" frame="void" rules="none">
<col class="field-name" />
<col class="field-body" />
<tbody valign="top">
<tr class="field-odd field"><th class="field-name">Parameters:</th><td class="field-body"><strong>mat</strong> (<em>matrix</em>) &#8211; The matrix whose condition number you want.</td>
</tr>
<tr class="field-even field"><th class="field-name">Returns:</th><td class="field-body">The nonnegative condition number of <code class="docutils literal"><span class="pre">mat</span></code>.</td>
</tr>
<tr class="field-odd field"><th class="field-name">Return type:</th><td class="field-body">float</td>
</tr>
</tbody>
</table>
<p class="rubric">Examples</p>
<div class="highlight-python"><div class="highlight"><pre><span></span><span class="gp">&gt;&gt;&gt; </span><span class="n">condition_number</span><span class="p">(</span><span class="n">identity</span><span class="p">(</span><span class="mi">3</span><span class="p">))</span>
<span class="go">1.0</span>
</pre></div>
</div>
<div class="highlight-python"><div class="highlight"><pre><span></span><span class="gp">&gt;&gt;&gt; </span><span class="n">A</span> <span class="o">=</span> <span class="n">matrix</span><span class="p">([[</span><span class="mi">2</span><span class="p">,</span><span class="mi">1</span><span class="p">],[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">]])</span>
<span class="gp">&gt;&gt;&gt; </span><span class="nb">abs</span><span class="p">(</span><span class="n">condition_number</span><span class="p">(</span><span class="n">A</span><span class="p">)</span> <span class="o">-</span> <span class="mf">3.0</span><span class="p">)</span> <span class="o">&lt;</span> <span class="n">options</span><span class="o">.</span><span class="n">ABS_TOL</span>
<span class="go">True</span>
</pre></div>
</div>
<div class="highlight-python"><div class="highlight"><pre><span></span><span class="gp">&gt;&gt;&gt; </span><span class="n">A</span> <span class="o">=</span> <span class="n">matrix</span><span class="p">([[</span><span class="mi">2</span><span class="p">,</span><span class="mi">1j</span><span class="p">],[</span><span class="o">-</span><span class="mi">1j</span><span class="p">,</span><span class="mi">2</span><span class="p">]])</span>
<span class="gp">&gt;&gt;&gt; </span><span class="nb">abs</span><span class="p">(</span><span class="n">condition_number</span><span class="p">(</span><span class="n">A</span><span class="p">)</span> <span class="o">-</span> <span class="mf">3.0</span><span class="p">)</span> <span class="o">&lt;</span> <span class="n">options</span><span class="o">.</span><span class="n">ABS_TOL</span>
<span class="go">True</span>
</pre></div>
</div>
</dd></dl>

<dl class="function">
<dt id="dunshire.matrices.eigenvalues">
<code class="descname">eigenvalues</code><span class="sig-paren">(</span><em>symmat</em><span class="sig-paren">)</span><a class="reference internal" href="_modules/dunshire/matrices.xhtml#eigenvalues"><span class="viewcode-link">[source]</span></a><a class="headerlink" href="#dunshire.matrices.eigenvalues" title="Permalink to this definition">¶</a></dt>
<dd><p>Return the eigenvalues of the given symmetric real matrix.</p>
<p>On the surface, this appears redundant to the <a class="reference internal" href="#dunshire.matrices.eigenvalues_re" title="dunshire.matrices.eigenvalues_re"><code class="xref py py-func docutils literal"><span class="pre">eigenvalues_re()</span></code></a>
function. However, if we know in advance that our input is
symmetric, a better algorithm can be used.</p>
<table class="docutils field-list" frame="void" rules="none">
<col class="field-name" />
<col class="field-body" />
<tbody valign="top">
<tr class="field-odd field"><th class="field-name">Parameters:</th><td class="field-body"><strong>symmat</strong> (<em>matrix</em>) &#8211; The real symmetric matrix whose eigenvalues you want.</td>
</tr>
<tr class="field-even field"><th class="field-name">Returns:</th><td class="field-body">A list of the eigenvalues (in no particular order) of <code class="docutils literal"><span class="pre">symmat</span></code>.</td>
</tr>
<tr class="field-odd field"><th class="field-name">Return type:</th><td class="field-body">list of float</td>
</tr>
<tr class="field-even field"><th class="field-name">Raises:</th><td class="field-body"><code class="xref py py-exc docutils literal"><span class="pre">TypeError</span></code> &#8211;
If the input matrix is not symmetric.</td>
</tr>
</tbody>
</table>
<p class="rubric">Examples</p>
<div class="highlight-python"><div class="highlight"><pre><span></span><span class="gp">&gt;&gt;&gt; </span><span class="n">A</span> <span class="o">=</span> <span class="n">matrix</span><span class="p">([[</span><span class="mi">2</span><span class="p">,</span><span class="mi">1</span><span class="p">],[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">]],</span> <span class="n">tc</span><span class="o">=</span><span class="s1">&#39;d&#39;</span><span class="p">)</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">eigenvalues</span><span class="p">(</span><span class="n">A</span><span class="p">)</span>
<span class="go">[1.0, 3.0]</span>
</pre></div>
</div>
<p>If the input matrix is not symmetric, it may not have real
eigenvalues, and we don&#8217;t know what to do:</p>
<div class="highlight-python"><div class="highlight"><pre><span></span><span class="gp">&gt;&gt;&gt; </span><span class="n">A</span> <span class="o">=</span> <span class="n">matrix</span><span class="p">([[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">],[</span><span class="mi">3</span><span class="p">,</span><span class="mi">4</span><span class="p">]])</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">eigenvalues</span><span class="p">(</span><span class="n">A</span><span class="p">)</span>
<span class="gt">Traceback (most recent call last):</span>
<span class="c">...</span>
<span class="gr">TypeError</span>: <span class="n">input must be a symmetric real matrix</span>
</pre></div>
</div>
</dd></dl>

<dl class="function">
<dt id="dunshire.matrices.eigenvalues_re">
<code class="descname">eigenvalues_re</code><span class="sig-paren">(</span><em>anymat</em><span class="sig-paren">)</span><a class="reference internal" href="_modules/dunshire/matrices.xhtml#eigenvalues_re"><span class="viewcode-link">[source]</span></a><a class="headerlink" href="#dunshire.matrices.eigenvalues_re" title="Permalink to this definition">¶</a></dt>
<dd><p>Return the real parts of the eigenvalues of the given square matrix.</p>
<table class="docutils field-list" frame="void" rules="none">
<col class="field-name" />
<col class="field-body" />
<tbody valign="top">
<tr class="field-odd field"><th class="field-name">Parameters:</th><td class="field-body"><strong>anymat</strong> (<em>matrix</em>) &#8211; The square matrix whose eigenvalues you want.</td>
</tr>
<tr class="field-even field"><th class="field-name">Returns:</th><td class="field-body">A list of the real parts (in no particular order) of the
eigenvalues of <code class="docutils literal"><span class="pre">anymat</span></code>.</td>
</tr>
<tr class="field-odd field"><th class="field-name">Return type:</th><td class="field-body">list of float</td>
</tr>
<tr class="field-even field"><th class="field-name">Raises:</th><td class="field-body"><code class="xref py py-exc docutils literal"><span class="pre">TypeError</span></code> &#8211;
If the input matrix is not square.</td>
</tr>
</tbody>
</table>
<p class="rubric">Examples</p>
<p>This is symmetric and has two real eigenvalues:</p>
<div class="highlight-python"><div class="highlight"><pre><span></span><span class="gp">&gt;&gt;&gt; </span><span class="n">A</span> <span class="o">=</span> <span class="n">matrix</span><span class="p">([[</span><span class="mi">2</span><span class="p">,</span><span class="mi">1</span><span class="p">],[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">]],</span> <span class="n">tc</span><span class="o">=</span><span class="s1">&#39;d&#39;</span><span class="p">)</span>
<span class="gp">&gt;&gt;&gt; </span><span class="nb">sorted</span><span class="p">(</span><span class="n">eigenvalues_re</span><span class="p">(</span><span class="n">A</span><span class="p">))</span>
<span class="go">[1.0, 3.0]</span>
</pre></div>
</div>
<p>But this rotation matrix has eigenvalues <cite>i</cite> and <cite>-i</cite>, both of whose
real parts are zero:</p>
<div class="highlight-python"><div class="highlight"><pre><span></span><span class="gp">&gt;&gt;&gt; </span><span class="n">A</span> <span class="o">=</span> <span class="n">matrix</span><span class="p">([[</span><span class="mi">0</span><span class="p">,</span><span class="o">-</span><span class="mi">1</span><span class="p">],[</span><span class="mi">1</span><span class="p">,</span><span class="mi">0</span><span class="p">]])</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">eigenvalues_re</span><span class="p">(</span><span class="n">A</span><span class="p">)</span>
<span class="go">[0.0, 0.0]</span>
</pre></div>
</div>
<p>If the input matrix is not square, it doesn&#8217;t have eigenvalues:</p>
<div class="highlight-python"><div class="highlight"><pre><span></span><span class="gp">&gt;&gt;&gt; </span><span class="n">A</span> <span class="o">=</span> <span class="n">matrix</span><span class="p">([[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">],[</span><span class="mi">3</span><span class="p">,</span><span class="mi">4</span><span class="p">],[</span><span class="mi">5</span><span class="p">,</span><span class="mi">6</span><span class="p">]])</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">eigenvalues_re</span><span class="p">(</span><span class="n">A</span><span class="p">)</span>
<span class="gt">Traceback (most recent call last):</span>
<span class="c">...</span>
<span class="gr">TypeError</span>: <span class="n">input matrix must be square</span>
</pre></div>
</div>
</dd></dl>

<dl class="function">
<dt id="dunshire.matrices.identity">
<code class="descname">identity</code><span class="sig-paren">(</span><em>domain_dim</em>, <em>typecode='i'</em><span class="sig-paren">)</span><a class="reference internal" href="_modules/dunshire/matrices.xhtml#identity"><span class="viewcode-link">[source]</span></a><a class="headerlink" href="#dunshire.matrices.identity" title="Permalink to this definition">¶</a></dt>
<dd><p>Create an identity matrix of the given dimensions.</p>
<table class="docutils field-list" frame="void" rules="none">
<col class="field-name" />
<col class="field-body" />
<tbody valign="top">
<tr class="field-odd field"><th class="field-name">Parameters:</th><td class="field-body"><ul class="first simple">
<li><strong>domain_dim</strong> (<em>int</em>) &#8211; The dimension of the vector space on which the identity will act.</li>
<li><strong>typecode</strong> (<em>{&#8216;i&#8217;, &#8216;d&#8217;, &#8216;z&#8217;}, optional</em>) &#8211; The type code for the returned matrix, defaults to &#8216;i&#8217; for integers.
Can also be &#8216;d&#8217; for real double, or &#8216;z&#8217; for complex double.</li>
</ul>
</td>
</tr>
<tr class="field-even field"><th class="field-name">Returns:</th><td class="field-body"><p class="first">A <code class="docutils literal"><span class="pre">domain_dim</span></code>-by-<code class="docutils literal"><span class="pre">domain_dim</span></code> dense integer identity matrix.</p>
</td>
</tr>
<tr class="field-odd field"><th class="field-name">Return type:</th><td class="field-body"><p class="first">matrix</p>
</td>
</tr>
<tr class="field-even field"><th class="field-name">Raises:</th><td class="field-body"><p class="first last"><code class="xref py py-exc docutils literal"><span class="pre">ValueError</span></code> &#8211;
If you ask for the identity on zero or fewer dimensions.</p>
</td>
</tr>
</tbody>
</table>
<p class="rubric">Examples</p>
<div class="highlight-python"><div class="highlight"><pre><span></span><span class="gp">&gt;&gt;&gt; </span><span class="k">print</span><span class="p">(</span><span class="n">identity</span><span class="p">(</span><span class="mi">3</span><span class="p">))</span>
<span class="go">[ 1  0  0]</span>
<span class="go">[ 0  1  0]</span>
<span class="go">[ 0  0  1]</span>
</pre></div>
</div>
</dd></dl>

<dl class="function">
<dt id="dunshire.matrices.inner_product">
<code class="descname">inner_product</code><span class="sig-paren">(</span><em>vec1</em>, <em>vec2</em><span class="sig-paren">)</span><a class="reference internal" href="_modules/dunshire/matrices.xhtml#inner_product"><span class="viewcode-link">[source]</span></a><a class="headerlink" href="#dunshire.matrices.inner_product" title="Permalink to this definition">¶</a></dt>
<dd><p>Compute the Euclidean inner product of two vectors.</p>
<table class="docutils field-list" frame="void" rules="none">
<col class="field-name" />
<col class="field-body" />
<tbody valign="top">
<tr class="field-odd field"><th class="field-name">Parameters:</th><td class="field-body"><ul class="first simple">
<li><strong>vec1</strong> (<em>matrix</em>) &#8211; The first vector, whose inner product with <code class="docutils literal"><span class="pre">vec2</span></code> you want.</li>
<li><strong>vec2</strong> (<em>matrix</em>) &#8211; The second vector, whose inner product with <code class="docutils literal"><span class="pre">vec1</span></code> you want.</li>
</ul>
</td>
</tr>
<tr class="field-even field"><th class="field-name">Returns:</th><td class="field-body"><p class="first">The inner product of <code class="docutils literal"><span class="pre">vec1</span></code> and <code class="docutils literal"><span class="pre">vec2</span></code>.</p>
</td>
</tr>
<tr class="field-odd field"><th class="field-name">Return type:</th><td class="field-body"><p class="first">float</p>
</td>
</tr>
<tr class="field-even field"><th class="field-name">Raises:</th><td class="field-body"><p class="first last"><code class="xref py py-exc docutils literal"><span class="pre">TypeError</span></code> &#8211;
If the lengths of <code class="docutils literal"><span class="pre">vec1</span></code> and <code class="docutils literal"><span class="pre">vec2</span></code> differ.</p>
</td>
</tr>
</tbody>
</table>
<p class="rubric">Examples</p>
<div class="highlight-python"><div class="highlight"><pre><span></span><span class="gp">&gt;&gt;&gt; </span><span class="n">x</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">]</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">y</span> <span class="o">=</span> <span class="p">[</span><span class="mi">3</span><span class="p">,</span><span class="mi">4</span><span class="p">,</span><span class="mi">1</span><span class="p">]</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">inner_product</span><span class="p">(</span><span class="n">x</span><span class="p">,</span><span class="n">y</span><span class="p">)</span>
<span class="go">14</span>
</pre></div>
</div>
<div class="highlight-python"><div class="highlight"><pre><span></span><span class="gp">&gt;&gt;&gt; </span><span class="n">x</span> <span class="o">=</span> <span class="n">matrix</span><span class="p">([</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">])</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">y</span> <span class="o">=</span> <span class="n">matrix</span><span class="p">([</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">4</span><span class="p">],</span> <span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="mi">3</span><span class="p">))</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">inner_product</span><span class="p">(</span><span class="n">x</span><span class="p">,</span><span class="n">y</span><span class="p">)</span>
<span class="go">9</span>
</pre></div>
</div>
<div class="highlight-python"><div class="highlight"><pre><span></span><span class="gp">&gt;&gt;&gt; </span><span class="n">x</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">]</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">y</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">]</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">inner_product</span><span class="p">(</span><span class="n">x</span><span class="p">,</span><span class="n">y</span><span class="p">)</span>
<span class="gt">Traceback (most recent call last):</span>
<span class="c">...</span>
<span class="gr">TypeError</span>: <span class="n">the lengths of vec1 and vec2 must match</span>
</pre></div>
</div>
</dd></dl>

<dl class="function">
<dt id="dunshire.matrices.norm">
<code class="descname">norm</code><span class="sig-paren">(</span><em>matrix_or_vector</em><span class="sig-paren">)</span><a class="reference internal" href="_modules/dunshire/matrices.xhtml#norm"><span class="viewcode-link">[source]</span></a><a class="headerlink" href="#dunshire.matrices.norm" title="Permalink to this definition">¶</a></dt>
<dd><p>Return the Frobenius norm of a matrix or vector.</p>
<p>When the input is a vector, its matrix-Frobenius norm is the same
thing as its vector-Euclidean norm.</p>
<table class="docutils field-list" frame="void" rules="none">
<col class="field-name" />
<col class="field-body" />
<tbody valign="top">
<tr class="field-odd field"><th class="field-name">Parameters:</th><td class="field-body"><strong>matrix_or_vector</strong> (<em>matrix</em>) &#8211; The matrix or vector whose norm you want.</td>
</tr>
<tr class="field-even field"><th class="field-name">Returns:</th><td class="field-body">The norm of <code class="docutils literal"><span class="pre">matrix_or_vector</span></code>.</td>
</tr>
<tr class="field-odd field"><th class="field-name">Return type:</th><td class="field-body">float</td>
</tr>
</tbody>
</table>
<p class="rubric">Examples</p>
<div class="highlight-python"><div class="highlight"><pre><span></span><span class="gp">&gt;&gt;&gt; </span><span class="n">v</span> <span class="o">=</span> <span class="n">matrix</span><span class="p">([</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">])</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">norm</span><span class="p">(</span><span class="n">v</span><span class="p">)</span>
<span class="go">1.414...</span>
</pre></div>
</div>
<div class="highlight-python"><div class="highlight"><pre><span></span><span class="gp">&gt;&gt;&gt; </span><span class="n">A</span> <span class="o">=</span> <span class="n">matrix</span><span class="p">([</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">],</span> <span class="p">(</span><span class="mi">2</span><span class="p">,</span><span class="mi">2</span><span class="p">))</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">norm</span><span class="p">(</span><span class="n">A</span><span class="p">)</span>
<span class="go">2.0...</span>
</pre></div>
</div>
</dd></dl>

<dl class="function">
<dt id="dunshire.matrices.specnorm">
<code class="descname">specnorm</code><span class="sig-paren">(</span><em>mat</em><span class="sig-paren">)</span><a class="reference internal" href="_modules/dunshire/matrices.xhtml#specnorm"><span class="viewcode-link">[source]</span></a><a class="headerlink" href="#dunshire.matrices.specnorm" title="Permalink to this definition">¶</a></dt>
<dd><p>Return the spectral norm of a matrix.</p>
<p>The spectral norm of a matrix is its largest singular value, and it
corresponds to the operator norm induced by the vector Euclidean norm.</p>
<table class="docutils field-list" frame="void" rules="none">
<col class="field-name" />
<col class="field-body" />
<tbody valign="top">
<tr class="field-odd field"><th class="field-name">Parameters:</th><td class="field-body"><ul class="first last simple">
<li><strong>mat</strong> (<em>matrix</em>) &#8211; The matrix whose spectral norm you want.</li>
<li><strong>Examples</strong> &#8211; <div class="highlight-python"><div class="highlight"><pre><span></span><span class="gp">&gt;&gt;&gt; </span><span class="n">specnorm</span><span class="p">(</span><span class="n">identity</span><span class="p">(</span><span class="mi">3</span><span class="p">))</span>
<span class="go">1.0</span>
</pre></div>
</div>
<div class="highlight-python"><div class="highlight"><pre><span></span><span class="gp">&gt;&gt;&gt; </span><span class="n">specnorm</span><span class="p">(</span><span class="mi">5</span><span class="o">*</span><span class="n">identity</span><span class="p">(</span><span class="mi">4</span><span class="p">))</span>
<span class="go">5.0</span>
</pre></div>
</div>
</li>
</ul>
</td>
</tr>
</tbody>
</table>
</dd></dl>

<dl class="function">
<dt id="dunshire.matrices.vec">
<code class="descname">vec</code><span class="sig-paren">(</span><em>mat</em><span class="sig-paren">)</span><a class="reference internal" href="_modules/dunshire/matrices.xhtml#vec"><span class="viewcode-link">[source]</span></a><a class="headerlink" href="#dunshire.matrices.vec" title="Permalink to this definition">¶</a></dt>
<dd><p>Create a long vector in column-major order from <code class="docutils literal"><span class="pre">mat</span></code>.</p>
<table class="docutils field-list" frame="void" rules="none">
<col class="field-name" />
<col class="field-body" />
<tbody valign="top">
<tr class="field-odd field"><th class="field-name">Parameters:</th><td class="field-body"><strong>mat</strong> (<em>matrix</em>) &#8211; Any sort of real matrix that you want written as a long vector.</td>
</tr>
<tr class="field-even field"><th class="field-name">Returns:</th><td class="field-body">An <code class="docutils literal"><span class="pre">len(mat)</span></code>-by-<code class="docutils literal"><span class="pre">1</span></code> long column vector containign the
entries of <code class="docutils literal"><span class="pre">mat</span></code> in column major order.</td>
</tr>
<tr class="field-odd field"><th class="field-name">Return type:</th><td class="field-body">matrix</td>
</tr>
</tbody>
</table>
<p class="rubric">Examples</p>
<div class="highlight-python"><div class="highlight"><pre><span></span><span class="gp">&gt;&gt;&gt; </span><span class="n">A</span> <span class="o">=</span> <span class="n">matrix</span><span class="p">([[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">],[</span><span class="mi">3</span><span class="p">,</span><span class="mi">4</span><span class="p">]])</span>
<span class="gp">&gt;&gt;&gt; </span><span class="k">print</span><span class="p">(</span><span class="n">A</span><span class="p">)</span>
<span class="go">[ 1  3]</span>
<span class="go">[ 2  4]</span>
</pre></div>
</div>
<div class="highlight-python"><div class="highlight"><pre><span></span><span class="gp">&gt;&gt;&gt; </span><span class="k">print</span><span class="p">(</span><span class="n">vec</span><span class="p">(</span><span class="n">A</span><span class="p">))</span>
<span class="go">[ 1]</span>
<span class="go">[ 2]</span>
<span class="go">[ 3]</span>
<span class="go">[ 4]</span>
</pre></div>
</div>
<p>Note that if <code class="docutils literal"><span class="pre">mat</span></code> is a vector, this function is a no-op:</p>
<div class="highlight-python"><div class="highlight"><pre><span></span><span class="gp">&gt;&gt;&gt; </span><span class="n">v</span> <span class="o">=</span> <span class="n">matrix</span><span class="p">([</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">4</span><span class="p">],</span> <span class="p">(</span><span class="mi">4</span><span class="p">,</span><span class="mi">1</span><span class="p">))</span>
<span class="gp">&gt;&gt;&gt; </span><span class="k">print</span><span class="p">(</span><span class="n">v</span><span class="p">)</span>
<span class="go">[ 1]</span>
<span class="go">[ 2]</span>
<span class="go">[ 3]</span>
<span class="go">[ 4]</span>

<span class="gp">&gt;&gt;&gt; </span><span class="k">print</span><span class="p">(</span><span class="n">vec</span><span class="p">(</span><span class="n">v</span><span class="p">))</span>
<span class="go">[ 1]</span>
<span class="go">[ 2]</span>
<span class="go">[ 3]</span>
<span class="go">[ 4]</span>
</pre></div>
</div>
</dd></dl>

</div>
<div class="section" id="module-dunshire.options">
<span id="dunshire-options-module"></span><h2>dunshire.options module<a class="headerlink" href="#module-dunshire.options" title="Permalink to this headline">¶</a></h2>
<p>A place to collect the various options that &#8220;can be passed to the
underlying engine.&#8221; Just kidding, they&#8217;re constants and you can&#8217;t
change them. But this makes the user interface real simple.</p>
<dl class="data">
<dt id="dunshire.options.ABS_TOL">
<code class="descname">ABS_TOL</code><em class="property"> = 1e-06</em><a class="headerlink" href="#dunshire.options.ABS_TOL" title="Permalink to this definition">¶</a></dt>
<dd><p>The absolute tolerance used in all &#8220;are these numbers equal&#8221; and &#8220;is
this number less than (or equal to) that other number&#8221; tests. The CVXOPT
default is <code class="docutils literal"><span class="pre">1e-7</span></code>, but loosening that a little reduces the number of
&#8220;unknown&#8221; solutions that we get during random testing. Whether or not it
improves the solubility of real problems is a question for the
philosophers.</p>
</dd></dl>

<dl class="data">
<dt id="dunshire.options.DEBUG_FLOAT_FORMAT">
<code class="descname">DEBUG_FLOAT_FORMAT</code><em class="property"> = '%.20f'</em><a class="headerlink" href="#dunshire.options.DEBUG_FLOAT_FORMAT" title="Permalink to this definition">¶</a></dt>
<dd><p>The float output format to use when something goes wrong. If we need to
reproduce a random test case, for example, then we need all of the digits
of the things involved. If we try to recreate the problem using only,
say, the first seven digits of each number, then the resulting game
might not reproduce the failure.</p>
</dd></dl>

<dl class="data">
<dt id="dunshire.options.FLOAT_FORMAT">
<code class="descname">FLOAT_FORMAT</code><em class="property"> = '%.7f'</em><a class="headerlink" href="#dunshire.options.FLOAT_FORMAT" title="Permalink to this definition">¶</a></dt>
<dd><p>The default output format for floating point numbers.</p>
</dd></dl>

</div>
<div class="section" id="module-test">
<span id="test-module"></span><h2>test module<a class="headerlink" href="#module-test" title="Permalink to this headline">¶</a></h2>
<p>The whole test suite.</p>
<p>This module compiles the doctests and unittests from the rest of the
codebase into one big TestSuite() and the runs it. It also provides a
function <a class="reference internal" href="#test.build_suite" title="test.build_suite"><code class="xref py py-func docutils literal"><span class="pre">build_suite()</span></code></a> that merely builds the suite; the result
can be used by setuptools.</p>
<dl class="function">
<dt id="test.build_suite">
<code class="descname">build_suite</code><span class="sig-paren">(</span><em>doctests=True</em><span class="sig-paren">)</span><a class="reference internal" href="_modules/test.xhtml#build_suite"><span class="viewcode-link">[source]</span></a><a class="headerlink" href="#test.build_suite" title="Permalink to this definition">¶</a></dt>
<dd><p>Build our test suite, separately from running it.</p>
<table class="docutils field-list" frame="void" rules="none">
<col class="field-name" />
<col class="field-body" />
<tbody valign="top">
<tr class="field-odd field"><th class="field-name">Parameters:</th><td class="field-body"><strong>doctests</strong> (<em>bool</em>) &#8211; Do you want to build the doctests, too? During random testing,
the answer may be &#8220;no.&#8221;</td>
</tr>
</tbody>
</table>
</dd></dl>

<dl class="function">
<dt id="test.run_suite">
<code class="descname">run_suite</code><span class="sig-paren">(</span><em>suite</em><span class="sig-paren">)</span><a class="reference internal" href="_modules/test.xhtml#run_suite"><span class="viewcode-link">[source]</span></a><a class="headerlink" href="#test.run_suite" title="Permalink to this definition">¶</a></dt>
<dd><p>Run all of the unit and doctests for the <code class="xref py py-mod docutils literal"><span class="pre">dunshire</span></code> and
<a class="reference internal" href="#module-test" title="test"><code class="xref py py-mod docutils literal"><span class="pre">test</span></code></a> packages.</p>
</dd></dl>

</div>
<div class="section" id="module-test.matrices_test">
<span id="test-matrices-test"></span><h2>test.matrices_test<a class="headerlink" href="#module-test.matrices_test" title="Permalink to this headline">¶</a></h2>
<p>Unit tests for the functions in the <a class="reference internal" href="#module-dunshire.matrices" title="dunshire.matrices"><code class="xref py py-mod docutils literal"><span class="pre">dunshire.matrices</span></code></a> module.</p>
<dl class="class">
<dt id="test.matrices_test.AppendColTest">
<em class="property">class </em><code class="descname">AppendColTest</code><span class="sig-paren">(</span><em>methodName='runTest'</em><span class="sig-paren">)</span><a class="reference internal" href="_modules/test/matrices_test.xhtml#AppendColTest"><span class="viewcode-link">[source]</span></a><a class="headerlink" href="#test.matrices_test.AppendColTest" title="Permalink to this definition">¶</a></dt>
<dd><p>Bases: <code class="xref py py-class docutils literal"><span class="pre">unittest.case.TestCase</span></code></p>
<p>Tests for the <code class="xref py py-func docutils literal"><span class="pre">append_col()</span></code> function.</p>
<dl class="method">
<dt id="test.matrices_test.AppendColTest.test_new_dimensions">
<code class="descname">test_new_dimensions</code><span class="sig-paren">(</span><span class="sig-paren">)</span><a class="reference internal" href="_modules/test/matrices_test.xhtml#AppendColTest.test_new_dimensions"><span class="viewcode-link">[source]</span></a><a class="headerlink" href="#test.matrices_test.AppendColTest.test_new_dimensions" title="Permalink to this definition">¶</a></dt>
<dd><p>If we append one matrix to another side-by-side, then the result
should have the same number of rows as the two original
matrices. However, the number of their columns should add up to
the number of columns in the new combined matrix.</p>
</dd></dl>

</dd></dl>

<dl class="class">
<dt id="test.matrices_test.AppendRowTest">
<em class="property">class </em><code class="descname">AppendRowTest</code><span class="sig-paren">(</span><em>methodName='runTest'</em><span class="sig-paren">)</span><a class="reference internal" href="_modules/test/matrices_test.xhtml#AppendRowTest"><span class="viewcode-link">[source]</span></a><a class="headerlink" href="#test.matrices_test.AppendRowTest" title="Permalink to this definition">¶</a></dt>
<dd><p>Bases: <code class="xref py py-class docutils literal"><span class="pre">unittest.case.TestCase</span></code></p>
<p>Tests for the <a class="reference internal" href="#dunshire.matrices.append_row" title="dunshire.matrices.append_row"><code class="xref py py-func docutils literal"><span class="pre">dunshire.matrices.append_row()</span></code></a> function.</p>
<dl class="method">
<dt id="test.matrices_test.AppendRowTest.test_new_dimensions">
<code class="descname">test_new_dimensions</code><span class="sig-paren">(</span><span class="sig-paren">)</span><a class="reference internal" href="_modules/test/matrices_test.xhtml#AppendRowTest.test_new_dimensions"><span class="viewcode-link">[source]</span></a><a class="headerlink" href="#test.matrices_test.AppendRowTest.test_new_dimensions" title="Permalink to this definition">¶</a></dt>
<dd><p>If we append one matrix to another top-to-bottom, then
the result should have the same number of columns as the two
original matrices. However, the number of their rows should add
up to the number of rows in the the new combined matrix.</p>
</dd></dl>

</dd></dl>

<dl class="class">
<dt id="test.matrices_test.ConditionNumberTest">
<em class="property">class </em><code class="descname">ConditionNumberTest</code><span class="sig-paren">(</span><em>methodName='runTest'</em><span class="sig-paren">)</span><a class="reference internal" href="_modules/test/matrices_test.xhtml#ConditionNumberTest"><span class="viewcode-link">[source]</span></a><a class="headerlink" href="#test.matrices_test.ConditionNumberTest" title="Permalink to this definition">¶</a></dt>
<dd><p>Bases: <code class="xref py py-class docutils literal"><span class="pre">unittest.case.TestCase</span></code></p>
<p>Tests for the <a class="reference internal" href="#dunshire.matrices.condition_number" title="dunshire.matrices.condition_number"><code class="xref py py-func docutils literal"><span class="pre">dunshire.matrices.condition_number()</span></code></a> function.</p>
<dl class="method">
<dt id="test.matrices_test.ConditionNumberTest.test_condition_number_ge_one">
<code class="descname">test_condition_number_ge_one</code><span class="sig-paren">(</span><span class="sig-paren">)</span><a class="reference internal" href="_modules/test/matrices_test.xhtml#ConditionNumberTest.test_condition_number_ge_one"><span class="viewcode-link">[source]</span></a><a class="headerlink" href="#test.matrices_test.ConditionNumberTest.test_condition_number_ge_one" title="Permalink to this definition">¶</a></dt>
<dd><p>From the way that it is defined, the condition number should
always be greater than or equal to one.</p>
</dd></dl>

</dd></dl>

<dl class="class">
<dt id="test.matrices_test.EigenvaluesRealPartTest">
<em class="property">class </em><code class="descname">EigenvaluesRealPartTest</code><span class="sig-paren">(</span><em>methodName='runTest'</em><span class="sig-paren">)</span><a class="reference internal" href="_modules/test/matrices_test.xhtml#EigenvaluesRealPartTest"><span class="viewcode-link">[source]</span></a><a class="headerlink" href="#test.matrices_test.EigenvaluesRealPartTest" title="Permalink to this definition">¶</a></dt>
<dd><p>Bases: <code class="xref py py-class docutils literal"><span class="pre">unittest.case.TestCase</span></code></p>
<p>Tests for the <a class="reference internal" href="#dunshire.matrices.eigenvalues_re" title="dunshire.matrices.eigenvalues_re"><code class="xref py py-func docutils literal"><span class="pre">dunshire.matrices.eigenvalues_re()</span></code></a> function.</p>
<dl class="method">
<dt id="test.matrices_test.EigenvaluesRealPartTest.test_eigenvalues_re_input_not_clobbered">
<code class="descname">test_eigenvalues_re_input_not_clobbered</code><span class="sig-paren">(</span><span class="sig-paren">)</span><a class="reference internal" href="_modules/test/matrices_test.xhtml#EigenvaluesRealPartTest.test_eigenvalues_re_input_not_clobbered"><span class="viewcode-link">[source]</span></a><a class="headerlink" href="#test.matrices_test.EigenvaluesRealPartTest.test_eigenvalues_re_input_not_clobbered" title="Permalink to this definition">¶</a></dt>
<dd><p>The eigenvalue functions provided by CVXOPT/LAPACK like
to overwrite the matrices that you pass into them as
arguments. This test makes sure that our
<a class="reference internal" href="#dunshire.matrices.eigenvalues_re" title="dunshire.matrices.eigenvalues_re"><code class="xref py py-func docutils literal"><span class="pre">dunshire.matrices.eigenvalues_re()</span></code></a> function does not do
the same.</p>
<p>We use a <code class="docutils literal"><span class="pre">deepcopy</span></code> here in case the <code class="docutils literal"><span class="pre">copy</span></code> used in the
<a class="reference internal" href="#dunshire.matrices.eigenvalues_re" title="dunshire.matrices.eigenvalues_re"><code class="xref py py-func docutils literal"><span class="pre">dunshire.matrices.eigenvalues_re()</span></code></a> function is
insufficient. If <code class="docutils literal"><span class="pre">copy</span></code> didn&#8217;t work and this test used it too,
then this test would pass when it shouldn&#8217;t.</p>
</dd></dl>

<dl class="method">
<dt id="test.matrices_test.EigenvaluesRealPartTest.test_eigenvalues_re_of_identity">
<code class="descname">test_eigenvalues_re_of_identity</code><span class="sig-paren">(</span><span class="sig-paren">)</span><a class="reference internal" href="_modules/test/matrices_test.xhtml#EigenvaluesRealPartTest.test_eigenvalues_re_of_identity"><span class="viewcode-link">[source]</span></a><a class="headerlink" href="#test.matrices_test.EigenvaluesRealPartTest.test_eigenvalues_re_of_identity" title="Permalink to this definition">¶</a></dt>
<dd><p>All eigenvalues of the identity matrix should be one.</p>
</dd></dl>

</dd></dl>

<dl class="class">
<dt id="test.matrices_test.EigenvaluesTest">
<em class="property">class </em><code class="descname">EigenvaluesTest</code><span class="sig-paren">(</span><em>methodName='runTest'</em><span class="sig-paren">)</span><a class="reference internal" href="_modules/test/matrices_test.xhtml#EigenvaluesTest"><span class="viewcode-link">[source]</span></a><a class="headerlink" href="#test.matrices_test.EigenvaluesTest" title="Permalink to this definition">¶</a></dt>
<dd><p>Bases: <code class="xref py py-class docutils literal"><span class="pre">unittest.case.TestCase</span></code></p>
<p>Tests for the <a class="reference internal" href="#dunshire.matrices.eigenvalues" title="dunshire.matrices.eigenvalues"><code class="xref py py-func docutils literal"><span class="pre">dunshire.matrices.eigenvalues()</span></code></a> function.</p>
<dl class="method">
<dt id="test.matrices_test.EigenvaluesTest.test_eigenvalues_input_not_clobbered">
<code class="descname">test_eigenvalues_input_not_clobbered</code><span class="sig-paren">(</span><span class="sig-paren">)</span><a class="reference internal" href="_modules/test/matrices_test.xhtml#EigenvaluesTest.test_eigenvalues_input_not_clobbered"><span class="viewcode-link">[source]</span></a><a class="headerlink" href="#test.matrices_test.EigenvaluesTest.test_eigenvalues_input_not_clobbered" title="Permalink to this definition">¶</a></dt>
<dd><p>The eigenvalue functions provided by CVXOPT/LAPACK like to
overwrite the matrices that you pass into them as
arguments. This test makes sure that our <code class="xref py py-func docutils literal"><span class="pre">eigenvalues()</span></code>
function does not do the same.</p>
<p>We use a <code class="docutils literal"><span class="pre">deepcopy</span></code> here in case the <code class="docutils literal"><span class="pre">copy</span></code> used in the
<code class="xref py py-func docutils literal"><span class="pre">eigenvalues()</span></code> function is insufficient. If <code class="docutils literal"><span class="pre">copy</span></code> didn&#8217;t
work and this test used it too, then this test would pass when
it shouldn&#8217;t.</p>
</dd></dl>

<dl class="method">
<dt id="test.matrices_test.EigenvaluesTest.test_eigenvalues_of_identity">
<code class="descname">test_eigenvalues_of_identity</code><span class="sig-paren">(</span><span class="sig-paren">)</span><a class="reference internal" href="_modules/test/matrices_test.xhtml#EigenvaluesTest.test_eigenvalues_of_identity"><span class="viewcode-link">[source]</span></a><a class="headerlink" href="#test.matrices_test.EigenvaluesTest.test_eigenvalues_of_identity" title="Permalink to this definition">¶</a></dt>
<dd><p>All eigenvalues of the identity matrix should be one.</p>
</dd></dl>

<dl class="method">
<dt id="test.matrices_test.EigenvaluesTest.test_eigenvalues_of_symmat_are_real">
<code class="descname">test_eigenvalues_of_symmat_are_real</code><span class="sig-paren">(</span><span class="sig-paren">)</span><a class="reference internal" href="_modules/test/matrices_test.xhtml#EigenvaluesTest.test_eigenvalues_of_symmat_are_real"><span class="viewcode-link">[source]</span></a><a class="headerlink" href="#test.matrices_test.EigenvaluesTest.test_eigenvalues_of_symmat_are_real" title="Permalink to this definition">¶</a></dt>
<dd><p>A real symmetric matrix has real eigenvalues, so if we start
with a symmetric matrix, then the two functions
<a class="reference internal" href="#dunshire.matrices.eigenvalues" title="dunshire.matrices.eigenvalues"><code class="xref py py-func docutils literal"><span class="pre">dunshire.matrices.eigenvalues()</span></code></a> and
<a class="reference internal" href="#dunshire.matrices.eigenvalues_re" title="dunshire.matrices.eigenvalues_re"><code class="xref py py-func docutils literal"><span class="pre">dunshire.matrices.eigenvalues_re()</span></code></a> should agree on it.</p>
</dd></dl>

</dd></dl>

<dl class="class">
<dt id="test.matrices_test.InnerProductTest">
<em class="property">class </em><code class="descname">InnerProductTest</code><span class="sig-paren">(</span><em>methodName='runTest'</em><span class="sig-paren">)</span><a class="reference internal" href="_modules/test/matrices_test.xhtml#InnerProductTest"><span class="viewcode-link">[source]</span></a><a class="headerlink" href="#test.matrices_test.InnerProductTest" title="Permalink to this definition">¶</a></dt>
<dd><p>Bases: <code class="xref py py-class docutils literal"><span class="pre">unittest.case.TestCase</span></code></p>
<p>Tests for the <a class="reference internal" href="#dunshire.matrices.inner_product" title="dunshire.matrices.inner_product"><code class="xref py py-func docutils literal"><span class="pre">dunshire.matrices.inner_product()</span></code></a> function.</p>
<dl class="method">
<dt id="test.matrices_test.InnerProductTest.test_inner_product_with_self_is_norm_squared">
<code class="descname">test_inner_product_with_self_is_norm_squared</code><span class="sig-paren">(</span><span class="sig-paren">)</span><a class="reference internal" href="_modules/test/matrices_test.xhtml#InnerProductTest.test_inner_product_with_self_is_norm_squared"><span class="viewcode-link">[source]</span></a><a class="headerlink" href="#test.matrices_test.InnerProductTest.test_inner_product_with_self_is_norm_squared" title="Permalink to this definition">¶</a></dt>
<dd><p>Ensure that the func:<cite>dunshire.matrices.inner_product</cite> and
<a class="reference internal" href="#dunshire.matrices.norm" title="dunshire.matrices.norm"><code class="xref py py-func docutils literal"><span class="pre">dunshire.matrices.norm()</span></code></a> functions are compatible by
checking that the square of the norm of a vector is its inner
product with itself.</p>
</dd></dl>

</dd></dl>

<dl class="class">
<dt id="test.matrices_test.NormTest">
<em class="property">class </em><code class="descname">NormTest</code><span class="sig-paren">(</span><em>methodName='runTest'</em><span class="sig-paren">)</span><a class="reference internal" href="_modules/test/matrices_test.xhtml#NormTest"><span class="viewcode-link">[source]</span></a><a class="headerlink" href="#test.matrices_test.NormTest" title="Permalink to this definition">¶</a></dt>
<dd><p>Bases: <code class="xref py py-class docutils literal"><span class="pre">unittest.case.TestCase</span></code></p>
<p>Tests for the <a class="reference internal" href="#dunshire.matrices.norm" title="dunshire.matrices.norm"><code class="xref py py-func docutils literal"><span class="pre">dunshire.matrices.norm()</span></code></a> function.</p>
<dl class="method">
<dt id="test.matrices_test.NormTest.test_norm_is_nonnegative">
<code class="descname">test_norm_is_nonnegative</code><span class="sig-paren">(</span><span class="sig-paren">)</span><a class="reference internal" href="_modules/test/matrices_test.xhtml#NormTest.test_norm_is_nonnegative"><span class="viewcode-link">[source]</span></a><a class="headerlink" href="#test.matrices_test.NormTest.test_norm_is_nonnegative" title="Permalink to this definition">¶</a></dt>
<dd><p>Test one of the properties of a norm, that it is nonnegative.</p>
</dd></dl>

</dd></dl>

</div>
<div class="section" id="module-test.randomgen">
<span id="test-randomgen"></span><h2>test.randomgen<a class="headerlink" href="#module-test.randomgen" title="Permalink to this headline">¶</a></h2>
<p>Random thing generators used in the rest of the test suite.</p>
<dl class="data">
<dt id="test.randomgen.MAX_COND">
<code class="descname">MAX_COND</code><em class="property"> = 125</em><a class="headerlink" href="#test.randomgen.MAX_COND" title="Permalink to this definition">¶</a></dt>
<dd><p>The maximum condition number of a randomly-generated game. When the
condition number of the games gets too high, we start to see
<code class="xref py py-class docutils literal"><span class="pre">PoorScalingException</span></code> being thrown. There&#8217;s no science to
choosing the upper bound &#8211; it got lowered until those exceptions
stopped popping up. It&#8217;s at <code class="docutils literal"><span class="pre">125</span></code> because <code class="docutils literal"><span class="pre">129</span></code> doesn&#8217;t work.</p>
</dd></dl>

<dl class="data">
<dt id="test.randomgen.RANDOM_MAX">
<code class="descname">RANDOM_MAX</code><em class="property"> = 10</em><a class="headerlink" href="#test.randomgen.RANDOM_MAX" title="Permalink to this definition">¶</a></dt>
<dd><p>When generating random real numbers or integers, this is used as the
largest allowed magnitude. It keeps our condition numbers down and other
properties within reason.</p>
</dd></dl>

<dl class="function">
<dt id="test.randomgen.random_diagonal_matrix">
<code class="descname">random_diagonal_matrix</code><span class="sig-paren">(</span><em>dims</em><span class="sig-paren">)</span><a class="reference internal" href="_modules/test/randomgen.xhtml#random_diagonal_matrix"><span class="viewcode-link">[source]</span></a><a class="headerlink" href="#test.randomgen.random_diagonal_matrix" title="Permalink to this definition">¶</a></dt>
<dd><p>Generate a random square matrix with zero off-diagonal entries.</p>
<p>These matrices are Lyapunov-like on the nonnegative orthant, as is
fairly easy to see.</p>
<table class="docutils field-list" frame="void" rules="none">
<col class="field-name" />
<col class="field-body" />
<tbody valign="top">
<tr class="field-odd field"><th class="field-name">Parameters:</th><td class="field-body"><strong>dims</strong> (<em>int</em>) &#8211; The number of rows/columns you want in the returned matrix.</td>
</tr>
<tr class="field-even field"><th class="field-name">Returns:</th><td class="field-body">A new matrix whose diagonal entries are random floats chosen
using <a class="reference internal" href="#test.randomgen.random_scalar" title="test.randomgen.random_scalar"><code class="xref py py-func docutils literal"><span class="pre">random_scalar()</span></code></a> and whose off-diagonal entries are
zero.</td>
</tr>
<tr class="field-odd field"><th class="field-name">Return type:</th><td class="field-body">matrix</td>
</tr>
</tbody>
</table>
<p class="rubric">Examples</p>
<div class="highlight-python"><div class="highlight"><pre><span></span><span class="gp">&gt;&gt;&gt; </span><span class="n">A</span> <span class="o">=</span> <span class="n">random_diagonal_matrix</span><span class="p">(</span><span class="mi">3</span><span class="p">)</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">A</span><span class="o">.</span><span class="n">size</span>
<span class="go">(3, 3)</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">A</span><span class="p">[</span><span class="mi">0</span><span class="p">,</span><span class="mi">1</span><span class="p">]</span> <span class="o">==</span> <span class="n">A</span><span class="p">[</span><span class="mi">0</span><span class="p">,</span><span class="mi">2</span><span class="p">]</span> <span class="o">==</span> <span class="n">A</span><span class="p">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">0</span><span class="p">]</span> <span class="o">==</span> <span class="n">A</span><span class="p">[</span><span class="mi">2</span><span class="p">,</span><span class="mi">0</span><span class="p">]</span> <span class="o">==</span> <span class="n">A</span><span class="p">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">]</span> <span class="o">==</span> <span class="n">A</span><span class="p">[</span><span class="mi">2</span><span class="p">,</span><span class="mi">1</span><span class="p">]</span> <span class="o">==</span> <span class="mi">0</span>
<span class="go">True</span>
</pre></div>
</div>
</dd></dl>

<dl class="function">
<dt id="test.randomgen.random_icecream_game">
<code class="descname">random_icecream_game</code><span class="sig-paren">(</span><span class="sig-paren">)</span><a class="reference internal" href="_modules/test/randomgen.xhtml#random_icecream_game"><span class="viewcode-link">[source]</span></a><a class="headerlink" href="#test.randomgen.random_icecream_game" title="Permalink to this definition">¶</a></dt>
<dd><p>Generate a random game over the ice-cream cone.</p>
<p>We generate each of <code class="docutils literal"><span class="pre">L</span></code>, <code class="docutils literal"><span class="pre">K</span></code>, <code class="docutils literal"><span class="pre">e1</span></code>, and <code class="docutils literal"><span class="pre">e2</span></code> randomly within
the constraints of the ice-cream cone, and then construct a game
from them. The process is repeated until we generate a game with a
condition number under <a class="reference internal" href="#test.randomgen.MAX_COND" title="test.randomgen.MAX_COND"><code class="xref py py-const docutils literal"><span class="pre">MAX_COND</span></code></a>.</p>
<table class="docutils field-list" frame="void" rules="none">
<col class="field-name" />
<col class="field-body" />
<tbody valign="top">
<tr class="field-odd field"><th class="field-name">Returns:</th><td class="field-body">A random game over some ice-cream cone.</td>
</tr>
<tr class="field-even field"><th class="field-name">Return type:</th><td class="field-body"><a class="reference internal" href="user-api.xhtml#dunshire.games.SymmetricLinearGame" title="dunshire.games.SymmetricLinearGame">SymmetricLinearGame</a></td>
</tr>
</tbody>
</table>
<p class="rubric">Examples</p>
<div class="highlight-python"><div class="highlight"><pre><span></span><span class="gp">&gt;&gt;&gt; </span><span class="n">random_icecream_game</span><span class="p">()</span>
<span class="go">&lt;dunshire.games.SymmetricLinearGame object at 0x...&gt;</span>
</pre></div>
</div>
</dd></dl>

<dl class="function">
<dt id="test.randomgen.random_ll_icecream_game">
<code class="descname">random_ll_icecream_game</code><span class="sig-paren">(</span><span class="sig-paren">)</span><a class="reference internal" href="_modules/test/randomgen.xhtml#random_ll_icecream_game"><span class="viewcode-link">[source]</span></a><a class="headerlink" href="#test.randomgen.random_ll_icecream_game" title="Permalink to this definition">¶</a></dt>
<dd><p>Return a random Lyapunov game over some ice-cream cone.</p>
<p>We first construct a <a class="reference internal" href="#test.randomgen.random_icecream_game" title="test.randomgen.random_icecream_game"><code class="xref py py-func docutils literal"><span class="pre">random_icecream_game()</span></code></a> and then modify it
to have a <a class="reference internal" href="#test.randomgen.random_lyapunov_like_icecream" title="test.randomgen.random_lyapunov_like_icecream"><code class="xref py py-func docutils literal"><span class="pre">random_lyapunov_like_icecream()</span></code></a> operator. That
process is repeated until the condition number of the resulting game
is within <a class="reference internal" href="#test.randomgen.MAX_COND" title="test.randomgen.MAX_COND"><code class="xref py py-const docutils literal"><span class="pre">MAX_COND</span></code></a>.</p>
<table class="docutils field-list" frame="void" rules="none">
<col class="field-name" />
<col class="field-body" />
<tbody valign="top">
<tr class="field-odd field"><th class="field-name">Returns:</th><td class="field-body">A random game over some ice-cream cone whose
<a class="reference internal" href="user-api.xhtml#dunshire.games.SymmetricLinearGame.payoff" title="dunshire.games.SymmetricLinearGame.payoff"><code class="xref py py-meth docutils literal"><span class="pre">dunshire.games.SymmetricLinearGame.payoff()</span></code></a> method
is based on a Lyapunov-like
<a class="reference internal" href="user-api.xhtml#dunshire.games.SymmetricLinearGame.L" title="dunshire.games.SymmetricLinearGame.L"><code class="xref py py-meth docutils literal"><span class="pre">dunshire.games.SymmetricLinearGame.L()</span></code></a> operator.</td>
</tr>
<tr class="field-even field"><th class="field-name">Return type:</th><td class="field-body"><a class="reference internal" href="user-api.xhtml#dunshire.games.SymmetricLinearGame" title="dunshire.games.SymmetricLinearGame">SymmetricLinearGame</a></td>
</tr>
</tbody>
</table>
<p class="rubric">Examples</p>
<div class="highlight-python"><div class="highlight"><pre><span></span><span class="gp">&gt;&gt;&gt; </span><span class="n">random_ll_icecream_game</span><span class="p">()</span>
<span class="go">&lt;dunshire.games.SymmetricLinearGame object at 0x...&gt;</span>
</pre></div>
</div>
</dd></dl>

<dl class="function">
<dt id="test.randomgen.random_ll_orthant_game">
<code class="descname">random_ll_orthant_game</code><span class="sig-paren">(</span><span class="sig-paren">)</span><a class="reference internal" href="_modules/test/randomgen.xhtml#random_ll_orthant_game"><span class="viewcode-link">[source]</span></a><a class="headerlink" href="#test.randomgen.random_ll_orthant_game" title="Permalink to this definition">¶</a></dt>
<dd><p>Return a random Lyapunov game over some nonnegative orthant.</p>
<p>We first construct a <a class="reference internal" href="#test.randomgen.random_orthant_game" title="test.randomgen.random_orthant_game"><code class="xref py py-func docutils literal"><span class="pre">random_orthant_game()</span></code></a> and then modify it
to have a <a class="reference internal" href="#test.randomgen.random_diagonal_matrix" title="test.randomgen.random_diagonal_matrix"><code class="xref py py-func docutils literal"><span class="pre">random_diagonal_matrix()</span></code></a> as its operator. Such
things are Lyapunov-like on the nonnegative orthant. That process is
repeated until the condition number of the resulting game is within
<a class="reference internal" href="#test.randomgen.MAX_COND" title="test.randomgen.MAX_COND"><code class="xref py py-const docutils literal"><span class="pre">MAX_COND</span></code></a>.</p>
<table class="docutils field-list" frame="void" rules="none">
<col class="field-name" />
<col class="field-body" />
<tbody valign="top">
<tr class="field-odd field"><th class="field-name">Returns:</th><td class="field-body">A random game over some nonnegative orthant whose
<a class="reference internal" href="user-api.xhtml#dunshire.games.SymmetricLinearGame.payoff" title="dunshire.games.SymmetricLinearGame.payoff"><code class="xref py py-meth docutils literal"><span class="pre">dunshire.games.SymmetricLinearGame.payoff()</span></code></a> method is
based on a Lyapunov-like
<a class="reference internal" href="user-api.xhtml#dunshire.games.SymmetricLinearGame.L" title="dunshire.games.SymmetricLinearGame.L"><code class="xref py py-meth docutils literal"><span class="pre">dunshire.games.SymmetricLinearGame.L()</span></code></a> operator.</td>
</tr>
<tr class="field-even field"><th class="field-name">Return type:</th><td class="field-body"><a class="reference internal" href="user-api.xhtml#dunshire.games.SymmetricLinearGame" title="dunshire.games.SymmetricLinearGame">SymmetricLinearGame</a></td>
</tr>
</tbody>
</table>
<p class="rubric">Examples</p>
<div class="highlight-python"><div class="highlight"><pre><span></span><span class="gp">&gt;&gt;&gt; </span><span class="n">random_ll_orthant_game</span><span class="p">()</span>
<span class="go">&lt;dunshire.games.SymmetricLinearGame object at 0x...&gt;</span>
</pre></div>
</div>
</dd></dl>

<dl class="function">
<dt id="test.randomgen.random_lyapunov_like_icecream">
<code class="descname">random_lyapunov_like_icecream</code><span class="sig-paren">(</span><em>dims</em><span class="sig-paren">)</span><a class="reference internal" href="_modules/test/randomgen.xhtml#random_lyapunov_like_icecream"><span class="viewcode-link">[source]</span></a><a class="headerlink" href="#test.randomgen.random_lyapunov_like_icecream" title="Permalink to this definition">¶</a></dt>
<dd><p>Generate a random matrix Lyapunov-like on the ice-cream cone.</p>
<p>The form of these matrices is cited in Gowda and Tao
<a class="reference internal" href="#gowdatao" id="id1">[GowdaTao]</a>. The scalar <code class="docutils literal"><span class="pre">a</span></code> and the vector <code class="docutils literal"><span class="pre">b</span></code> (using their
notation) are easy to generate. The submatrix <code class="docutils literal"><span class="pre">D</span></code> is a little
trickier, but it can be found noticing that <span class="math">\(C + C^{T} = 0\)</span>
for a skew-symmetric matrix <span class="math">\(C\)</span> implying that <span class="math">\(C + C^{T}
+ \left(2a\right)I = \left(2a\right)I\)</span>. Thus we can stick an
<span class="math">\(aI\)</span> with each of <span class="math">\(C,C^{T}\)</span> and let those be our
<span class="math">\(D,D^{T}\)</span>.</p>
<table class="docutils field-list" frame="void" rules="none">
<col class="field-name" />
<col class="field-body" />
<tbody valign="top">
<tr class="field-odd field"><th class="field-name">Parameters:</th><td class="field-body"><strong>dims</strong> (<em>int</em>) &#8211; The dimension of the ice-cream cone (not of the matrix you want!)
on which the returned matrix should be Lyapunov-like.</td>
</tr>
<tr class="field-even field"><th class="field-name">Returns:</th><td class="field-body">A new matrix, Lyapunov-like on the ice-cream cone in <code class="docutils literal"><span class="pre">dims</span></code>
dimensions, whose free entries are random floats chosen uniformly
between negative and positive <a class="reference internal" href="#test.randomgen.RANDOM_MAX" title="test.randomgen.RANDOM_MAX"><code class="xref py py-const docutils literal"><span class="pre">RANDOM_MAX</span></code></a>.</td>
</tr>
<tr class="field-odd field"><th class="field-name">Return type:</th><td class="field-body">matrix</td>
</tr>
</tbody>
</table>
<p class="rubric">References</p>
<table class="docutils citation" frame="void" id="gowdatao" rules="none">
<colgroup><col class="label" /><col /></colgroup>
<tbody valign="top">
<tr><td class="label"><a class="fn-backref" href="#id1">[GowdaTao]</a></td><td>M. S. Gowda and J. Tao. On the bilinearity rank of a
proper cone and Lyapunov-like transformations. Mathematical
Programming, 147:155-170, 2014.</td></tr>
</tbody>
</table>
<p class="rubric">Examples</p>
<div class="highlight-python"><div class="highlight"><pre><span></span><span class="gp">&gt;&gt;&gt; </span><span class="n">L</span> <span class="o">=</span> <span class="n">random_lyapunov_like_icecream</span><span class="p">(</span><span class="mi">3</span><span class="p">)</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">L</span><span class="o">.</span><span class="n">size</span>
<span class="go">(3, 3)</span>
</pre></div>
</div>
<div class="highlight-python"><div class="highlight"><pre><span></span><span class="gp">&gt;&gt;&gt; </span><span class="kn">from</span> <span class="nn">dunshire.options</span> <span class="kn">import</span> <span class="n">ABS_TOL</span>
<span class="gp">&gt;&gt;&gt; </span><span class="kn">from</span> <span class="nn">dunshire.matrices</span> <span class="kn">import</span> <span class="n">inner_product</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">x</span> <span class="o">=</span> <span class="n">matrix</span><span class="p">([</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">0</span><span class="p">])</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">s</span> <span class="o">=</span> <span class="n">matrix</span><span class="p">([</span><span class="mi">1</span><span class="p">,</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span><span class="mi">0</span><span class="p">])</span>
<span class="gp">&gt;&gt;&gt; </span><span class="nb">abs</span><span class="p">(</span><span class="n">inner_product</span><span class="p">(</span><span class="n">L</span><span class="o">*</span><span class="n">x</span><span class="p">,</span> <span class="n">s</span><span class="p">))</span> <span class="o">&lt;</span> <span class="n">ABS_TOL</span>
<span class="go">True</span>
</pre></div>
</div>
</dd></dl>

<dl class="function">
<dt id="test.randomgen.random_matrix">
<code class="descname">random_matrix</code><span class="sig-paren">(</span><em>row_count</em>, <em>column_count=None</em><span class="sig-paren">)</span><a class="reference internal" href="_modules/test/randomgen.xhtml#random_matrix"><span class="viewcode-link">[source]</span></a><a class="headerlink" href="#test.randomgen.random_matrix" title="Permalink to this definition">¶</a></dt>
<dd><p>Generate a random matrix.</p>
<table class="docutils field-list" frame="void" rules="none">
<col class="field-name" />
<col class="field-body" />
<tbody valign="top">
<tr class="field-odd field"><th class="field-name">Parameters:</th><td class="field-body"><ul class="first simple">
<li><strong>row_count</strong> (<em>int</em>) &#8211; The number of rows you want in the returned matrix.</li>
<li><strong>column_count</strong> (<em>int</em>) &#8211; The number of columns you want in the returned matrix (default:
the same as <code class="docutils literal"><span class="pre">row_count</span></code>).</li>
</ul>
</td>
</tr>
<tr class="field-even field"><th class="field-name">Returns:</th><td class="field-body"><p class="first">A new matrix whose entries are random floats chosen uniformly
between negative and positive <a class="reference internal" href="#test.randomgen.RANDOM_MAX" title="test.randomgen.RANDOM_MAX"><code class="xref py py-const docutils literal"><span class="pre">RANDOM_MAX</span></code></a>.</p>
</td>
</tr>
<tr class="field-odd field"><th class="field-name">Return type:</th><td class="field-body"><p class="first last">matrix</p>
</td>
</tr>
</tbody>
</table>
<p class="rubric">Examples</p>
<div class="highlight-python"><div class="highlight"><pre><span></span><span class="gp">&gt;&gt;&gt; </span><span class="n">A</span> <span class="o">=</span> <span class="n">random_matrix</span><span class="p">(</span><span class="mi">3</span><span class="p">)</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">A</span><span class="o">.</span><span class="n">size</span>
<span class="go">(3, 3)</span>
</pre></div>
</div>
<div class="highlight-python"><div class="highlight"><pre><span></span><span class="gp">&gt;&gt;&gt; </span><span class="n">A</span> <span class="o">=</span> <span class="n">random_matrix</span><span class="p">(</span><span class="mi">3</span><span class="p">,</span><span class="mi">2</span><span class="p">)</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">A</span><span class="o">.</span><span class="n">size</span>
<span class="go">(3, 2)</span>
</pre></div>
</div>
</dd></dl>

<dl class="function">
<dt id="test.randomgen.random_natural">
<code class="descname">random_natural</code><span class="sig-paren">(</span><span class="sig-paren">)</span><a class="reference internal" href="_modules/test/randomgen.xhtml#random_natural"><span class="viewcode-link">[source]</span></a><a class="headerlink" href="#test.randomgen.random_natural" title="Permalink to this definition">¶</a></dt>
<dd><p>Generate a random natural number.</p>
<table class="docutils field-list" frame="void" rules="none">
<col class="field-name" />
<col class="field-body" />
<tbody valign="top">
<tr class="field-odd field"><th class="field-name">Returns:</th><td class="field-body">A random natural number between <code class="docutils literal"><span class="pre">1</span></code> and <a class="reference internal" href="#test.randomgen.RANDOM_MAX" title="test.randomgen.RANDOM_MAX"><code class="xref py py-const docutils literal"><span class="pre">RANDOM_MAX</span></code></a>,
inclusive.</td>
</tr>
<tr class="field-even field"><th class="field-name">Return type:</th><td class="field-body">int</td>
</tr>
</tbody>
</table>
<p class="rubric">Examples</p>
<div class="highlight-python"><div class="highlight"><pre><span></span><span class="gp">&gt;&gt;&gt; </span><span class="mi">1</span> <span class="o">&lt;=</span> <span class="n">random_natural</span><span class="p">()</span> <span class="o">&lt;=</span> <span class="n">RANDOM_MAX</span>
<span class="go">True</span>
</pre></div>
</div>
</dd></dl>

<dl class="function">
<dt id="test.randomgen.random_nn_scalar">
<code class="descname">random_nn_scalar</code><span class="sig-paren">(</span><span class="sig-paren">)</span><a class="reference internal" href="_modules/test/randomgen.xhtml#random_nn_scalar"><span class="viewcode-link">[source]</span></a><a class="headerlink" href="#test.randomgen.random_nn_scalar" title="Permalink to this definition">¶</a></dt>
<dd><p>Generate a random nonnegative scalar.</p>
<table class="docutils field-list" frame="void" rules="none">
<col class="field-name" />
<col class="field-body" />
<tbody valign="top">
<tr class="field-odd field"><th class="field-name">Returns:</th><td class="field-body">A random nonnegative real number between zero and
<a class="reference internal" href="#test.randomgen.RANDOM_MAX" title="test.randomgen.RANDOM_MAX"><code class="xref py py-const docutils literal"><span class="pre">RANDOM_MAX</span></code></a>, inclusive.</td>
</tr>
<tr class="field-even field"><th class="field-name">Return type:</th><td class="field-body">float</td>
</tr>
</tbody>
</table>
<p class="rubric">Examples</p>
<div class="highlight-python"><div class="highlight"><pre><span></span><span class="gp">&gt;&gt;&gt; </span><span class="mi">0</span> <span class="o">&lt;=</span> <span class="n">random_nn_scalar</span><span class="p">()</span> <span class="o">&lt;=</span> <span class="n">RANDOM_MAX</span>
<span class="go">True</span>
</pre></div>
</div>
</dd></dl>

<dl class="function">
<dt id="test.randomgen.random_nn_scaling">
<code class="descname">random_nn_scaling</code><span class="sig-paren">(</span><em>G</em><span class="sig-paren">)</span><a class="reference internal" href="_modules/test/randomgen.xhtml#random_nn_scaling"><span class="viewcode-link">[source]</span></a><a class="headerlink" href="#test.randomgen.random_nn_scaling" title="Permalink to this definition">¶</a></dt>
<dd><p>Scale the given game by a random nonnegative amount.</p>
<p>We re-attempt the scaling with a new random number until the
resulting scaled game has an acceptable condition number.</p>
<table class="docutils field-list" frame="void" rules="none">
<col class="field-name" />
<col class="field-body" />
<tbody valign="top">
<tr class="field-odd field"><th class="field-name">Parameters:</th><td class="field-body"><strong>G</strong> (<a class="reference internal" href="user-api.xhtml#dunshire.games.SymmetricLinearGame" title="dunshire.games.SymmetricLinearGame"><em>SymmetricLinearGame</em></a>) &#8211; The game that you would like to scale.</td>
</tr>
<tr class="field-even field"><th class="field-name">Returns:</th><td class="field-body">A pair containing the both the scaling factor and the new scaled game.</td>
</tr>
<tr class="field-odd field"><th class="field-name">Return type:</th><td class="field-body">(float, SymmetricLinearGame)</td>
</tr>
</tbody>
</table>
<p class="rubric">Examples</p>
<div class="highlight-python"><div class="highlight"><pre><span></span><span class="gp">&gt;&gt;&gt; </span><span class="kn">from</span> <span class="nn">dunshire.matrices</span> <span class="kn">import</span> <span class="n">norm</span>
<span class="gp">&gt;&gt;&gt; </span><span class="kn">from</span> <span class="nn">dunshire.options</span> <span class="kn">import</span> <span class="n">ABS_TOL</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">G</span> <span class="o">=</span> <span class="n">random_orthant_game</span><span class="p">()</span>
<span class="gp">&gt;&gt;&gt; </span><span class="p">(</span><span class="n">alpha</span><span class="p">,</span> <span class="n">H</span><span class="p">)</span> <span class="o">=</span> <span class="n">random_nn_scaling</span><span class="p">(</span><span class="n">G</span><span class="p">)</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">alpha</span> <span class="o">&gt;=</span> <span class="mi">0</span>
<span class="go">True</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">G</span><span class="o">.</span><span class="n">K</span><span class="p">()</span> <span class="o">==</span> <span class="n">H</span><span class="o">.</span><span class="n">K</span><span class="p">()</span>
<span class="go">True</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">norm</span><span class="p">(</span><span class="n">G</span><span class="o">.</span><span class="n">e1</span><span class="p">()</span> <span class="o">-</span> <span class="n">H</span><span class="o">.</span><span class="n">e1</span><span class="p">())</span> <span class="o">&lt;</span> <span class="n">ABS_TOL</span>
<span class="go">True</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">norm</span><span class="p">(</span><span class="n">G</span><span class="o">.</span><span class="n">e2</span><span class="p">()</span> <span class="o">-</span> <span class="n">H</span><span class="o">.</span><span class="n">e2</span><span class="p">())</span> <span class="o">&lt;</span> <span class="n">ABS_TOL</span>
<span class="go">True</span>
</pre></div>
</div>
</dd></dl>

<dl class="function">
<dt id="test.randomgen.random_nonnegative_matrix">
<code class="descname">random_nonnegative_matrix</code><span class="sig-paren">(</span><em>row_count</em>, <em>column_count=None</em><span class="sig-paren">)</span><a class="reference internal" href="_modules/test/randomgen.xhtml#random_nonnegative_matrix"><span class="viewcode-link">[source]</span></a><a class="headerlink" href="#test.randomgen.random_nonnegative_matrix" title="Permalink to this definition">¶</a></dt>
<dd><p>Generate a random matrix with nonnegative entries.</p>
<table class="docutils field-list" frame="void" rules="none">
<col class="field-name" />
<col class="field-body" />
<tbody valign="top">
<tr class="field-odd field"><th class="field-name">Parameters:</th><td class="field-body"><ul class="first simple">
<li><strong>row_count</strong> (<em>int</em>) &#8211; The number of rows you want in the returned matrix.</li>
<li><strong>column_count</strong> (<em>int</em>) &#8211; The number of columns you want in the returned matrix (default:
the same as <code class="docutils literal"><span class="pre">row_count</span></code>).</li>
</ul>
</td>
</tr>
<tr class="field-even field"><th class="field-name">Returns:</th><td class="field-body"><p class="first">A new matrix whose entries are chosen by <a class="reference internal" href="#test.randomgen.random_nn_scalar" title="test.randomgen.random_nn_scalar"><code class="xref py py-func docutils literal"><span class="pre">random_nn_scalar()</span></code></a>.</p>
</td>
</tr>
<tr class="field-odd field"><th class="field-name">Return type:</th><td class="field-body"><p class="first last">matrix</p>
</td>
</tr>
</tbody>
</table>
<p class="rubric">Examples</p>
<div class="highlight-python"><div class="highlight"><pre><span></span><span class="gp">&gt;&gt;&gt; </span><span class="n">A</span> <span class="o">=</span> <span class="n">random_nonnegative_matrix</span><span class="p">(</span><span class="mi">3</span><span class="p">)</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">A</span><span class="o">.</span><span class="n">size</span>
<span class="go">(3, 3)</span>
<span class="gp">&gt;&gt;&gt; </span><span class="nb">all</span><span class="p">([</span><span class="n">entry</span> <span class="o">&gt;=</span> <span class="mi">0</span> <span class="k">for</span> <span class="n">entry</span> <span class="ow">in</span> <span class="n">A</span><span class="p">])</span>
<span class="go">True</span>
</pre></div>
</div>
<div class="highlight-python"><div class="highlight"><pre><span></span><span class="gp">&gt;&gt;&gt; </span><span class="n">A</span> <span class="o">=</span> <span class="n">random_nonnegative_matrix</span><span class="p">(</span><span class="mi">3</span><span class="p">,</span><span class="mi">2</span><span class="p">)</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">A</span><span class="o">.</span><span class="n">size</span>
<span class="go">(3, 2)</span>
<span class="gp">&gt;&gt;&gt; </span><span class="nb">all</span><span class="p">([</span><span class="n">entry</span> <span class="o">&gt;=</span> <span class="mi">0</span> <span class="k">for</span> <span class="n">entry</span> <span class="ow">in</span> <span class="n">A</span><span class="p">])</span>
<span class="go">True</span>
</pre></div>
</div>
</dd></dl>

<dl class="function">
<dt id="test.randomgen.random_orthant_game">
<code class="descname">random_orthant_game</code><span class="sig-paren">(</span><span class="sig-paren">)</span><a class="reference internal" href="_modules/test/randomgen.xhtml#random_orthant_game"><span class="viewcode-link">[source]</span></a><a class="headerlink" href="#test.randomgen.random_orthant_game" title="Permalink to this definition">¶</a></dt>
<dd><p>Generate a random game over the nonnegative orthant.</p>
<p>We generate each of <code class="docutils literal"><span class="pre">L</span></code>, <code class="docutils literal"><span class="pre">K</span></code>, <code class="docutils literal"><span class="pre">e1</span></code>, and <code class="docutils literal"><span class="pre">e2</span></code> randomly within
the constraints of the nonnegative orthant, and then construct a
game from them. The process is repeated until we generate a game with
a condition number under <a class="reference internal" href="#test.randomgen.MAX_COND" title="test.randomgen.MAX_COND"><code class="xref py py-const docutils literal"><span class="pre">MAX_COND</span></code></a>.</p>
<table class="docutils field-list" frame="void" rules="none">
<col class="field-name" />
<col class="field-body" />
<tbody valign="top">
<tr class="field-odd field"><th class="field-name">Returns:</th><td class="field-body">A random game over some nonnegative orthant.</td>
</tr>
<tr class="field-even field"><th class="field-name">Return type:</th><td class="field-body"><a class="reference internal" href="user-api.xhtml#dunshire.games.SymmetricLinearGame" title="dunshire.games.SymmetricLinearGame">SymmetricLinearGame</a></td>
</tr>
</tbody>
</table>
<p class="rubric">Examples</p>
<div class="highlight-python"><div class="highlight"><pre><span></span><span class="gp">&gt;&gt;&gt; </span><span class="n">random_orthant_game</span><span class="p">()</span>
<span class="go">&lt;dunshire.games.SymmetricLinearGame object at 0x...&gt;</span>
</pre></div>
</div>
</dd></dl>

<dl class="function">
<dt id="test.randomgen.random_positive_orthant_game">
<code class="descname">random_positive_orthant_game</code><span class="sig-paren">(</span><span class="sig-paren">)</span><a class="reference internal" href="_modules/test/randomgen.xhtml#random_positive_orthant_game"><span class="viewcode-link">[source]</span></a><a class="headerlink" href="#test.randomgen.random_positive_orthant_game" title="Permalink to this definition">¶</a></dt>
<dd><p>Return a random game over the nonnegative orthant with a positive
operator.</p>
<p>We first construct a <a class="reference internal" href="#test.randomgen.random_orthant_game" title="test.randomgen.random_orthant_game"><code class="xref py py-func docutils literal"><span class="pre">random_orthant_game()</span></code></a> and then modify it
to have a <a class="reference internal" href="#test.randomgen.random_nonnegative_matrix" title="test.randomgen.random_nonnegative_matrix"><code class="xref py py-func docutils literal"><span class="pre">random_nonnegative_matrix()</span></code></a> as its operator. That
process is repeated until the condition number of the resulting game
is within <a class="reference internal" href="#test.randomgen.MAX_COND" title="test.randomgen.MAX_COND"><code class="xref py py-const docutils literal"><span class="pre">MAX_COND</span></code></a>.</p>
<table class="docutils field-list" frame="void" rules="none">
<col class="field-name" />
<col class="field-body" />
<tbody valign="top">
<tr class="field-odd field"><th class="field-name">Returns:</th><td class="field-body">A random game over some nonnegative orthant whose
<a class="reference internal" href="user-api.xhtml#dunshire.games.SymmetricLinearGame.payoff" title="dunshire.games.SymmetricLinearGame.payoff"><code class="xref py py-meth docutils literal"><span class="pre">dunshire.games.SymmetricLinearGame.payoff()</span></code></a> method
is based on a positive
<a class="reference internal" href="user-api.xhtml#dunshire.games.SymmetricLinearGame.L" title="dunshire.games.SymmetricLinearGame.L"><code class="xref py py-meth docutils literal"><span class="pre">dunshire.games.SymmetricLinearGame.L()</span></code></a> operator.</td>
</tr>
<tr class="field-even field"><th class="field-name">Return type:</th><td class="field-body"><a class="reference internal" href="user-api.xhtml#dunshire.games.SymmetricLinearGame" title="dunshire.games.SymmetricLinearGame">SymmetricLinearGame</a></td>
</tr>
</tbody>
</table>
<p class="rubric">Examples</p>
<div class="highlight-python"><div class="highlight"><pre><span></span><span class="gp">&gt;&gt;&gt; </span><span class="n">random_positive_orthant_game</span><span class="p">()</span>
<span class="go">&lt;dunshire.games.SymmetricLinearGame object at 0x...&gt;</span>
</pre></div>
</div>
</dd></dl>

<dl class="function">
<dt id="test.randomgen.random_scalar">
<code class="descname">random_scalar</code><span class="sig-paren">(</span><span class="sig-paren">)</span><a class="reference internal" href="_modules/test/randomgen.xhtml#random_scalar"><span class="viewcode-link">[source]</span></a><a class="headerlink" href="#test.randomgen.random_scalar" title="Permalink to this definition">¶</a></dt>
<dd><p>Generate a random scalar.</p>
<table class="docutils field-list" frame="void" rules="none">
<col class="field-name" />
<col class="field-body" />
<tbody valign="top">
<tr class="field-odd field"><th class="field-name">Returns:</th><td class="field-body">A random real number between negative and positive
<a class="reference internal" href="#test.randomgen.RANDOM_MAX" title="test.randomgen.RANDOM_MAX"><code class="xref py py-const docutils literal"><span class="pre">RANDOM_MAX</span></code></a>, inclusive.</td>
</tr>
<tr class="field-even field"><th class="field-name">Return type:</th><td class="field-body">float</td>
</tr>
</tbody>
</table>
<p class="rubric">Examples</p>
<div class="highlight-python"><div class="highlight"><pre><span></span><span class="gp">&gt;&gt;&gt; </span><span class="nb">abs</span><span class="p">(</span><span class="n">random_scalar</span><span class="p">())</span> <span class="o">&lt;=</span> <span class="n">RANDOM_MAX</span>
<span class="go">True</span>
</pre></div>
</div>
</dd></dl>

<dl class="function">
<dt id="test.randomgen.random_skew_symmetric_matrix">
<code class="descname">random_skew_symmetric_matrix</code><span class="sig-paren">(</span><em>dims</em><span class="sig-paren">)</span><a class="reference internal" href="_modules/test/randomgen.xhtml#random_skew_symmetric_matrix"><span class="viewcode-link">[source]</span></a><a class="headerlink" href="#test.randomgen.random_skew_symmetric_matrix" title="Permalink to this definition">¶</a></dt>
<dd><p>Generate a random skew-symmetrix matrix.</p>
<table class="docutils field-list" frame="void" rules="none">
<col class="field-name" />
<col class="field-body" />
<tbody valign="top">
<tr class="field-odd field"><th class="field-name">Parameters:</th><td class="field-body"><strong>dims</strong> (<em>int</em>) &#8211; The number of rows/columns you want in the returned matrix.</td>
</tr>
<tr class="field-even field"><th class="field-name">Returns:</th><td class="field-body">A new skew-matrix whose strictly above-diagonal entries are
random floats chosen with <a class="reference internal" href="#test.randomgen.random_scalar" title="test.randomgen.random_scalar"><code class="xref py py-func docutils literal"><span class="pre">random_scalar()</span></code></a>.</td>
</tr>
<tr class="field-odd field"><th class="field-name">Return type:</th><td class="field-body">matrix</td>
</tr>
</tbody>
</table>
<p class="rubric">Examples</p>
<div class="highlight-python"><div class="highlight"><pre><span></span><span class="gp">&gt;&gt;&gt; </span><span class="n">A</span> <span class="o">=</span> <span class="n">random_skew_symmetric_matrix</span><span class="p">(</span><span class="mi">3</span><span class="p">)</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">A</span><span class="o">.</span><span class="n">size</span>
<span class="go">(3, 3)</span>
</pre></div>
</div>
<div class="highlight-python"><div class="highlight"><pre><span></span><span class="gp">&gt;&gt;&gt; </span><span class="kn">from</span> <span class="nn">dunshire.options</span> <span class="kn">import</span> <span class="n">ABS_TOL</span>
<span class="gp">&gt;&gt;&gt; </span><span class="kn">from</span> <span class="nn">dunshire.matrices</span> <span class="kn">import</span> <span class="n">norm</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">A</span> <span class="o">=</span> <span class="n">random_skew_symmetric_matrix</span><span class="p">(</span><span class="n">random_natural</span><span class="p">())</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">norm</span><span class="p">(</span><span class="n">A</span> <span class="o">+</span> <span class="n">A</span><span class="o">.</span><span class="n">trans</span><span class="p">())</span> <span class="o">&lt;</span> <span class="n">ABS_TOL</span>
<span class="go">True</span>
</pre></div>
</div>
</dd></dl>

<dl class="function">
<dt id="test.randomgen.random_translation">
<code class="descname">random_translation</code><span class="sig-paren">(</span><em>G</em><span class="sig-paren">)</span><a class="reference internal" href="_modules/test/randomgen.xhtml#random_translation"><span class="viewcode-link">[source]</span></a><a class="headerlink" href="#test.randomgen.random_translation" title="Permalink to this definition">¶</a></dt>
<dd><p>Translate the given game by a random amount.</p>
<p>We re-attempt the translation with new random scalars until the
resulting translated game has an acceptable condition number.</p>
<table class="docutils field-list" frame="void" rules="none">
<col class="field-name" />
<col class="field-body" />
<tbody valign="top">
<tr class="field-odd field"><th class="field-name">Parameters:</th><td class="field-body"><strong>G</strong> (<a class="reference internal" href="user-api.xhtml#dunshire.games.SymmetricLinearGame" title="dunshire.games.SymmetricLinearGame"><em>SymmetricLinearGame</em></a>) &#8211; The game that you would like to translate.</td>
</tr>
<tr class="field-even field"><th class="field-name">Returns:</th><td class="field-body">A pair containing the both the translation distance and the new
scaled game.</td>
</tr>
<tr class="field-odd field"><th class="field-name">Return type:</th><td class="field-body">(float, SymmetricLinearGame)</td>
</tr>
</tbody>
</table>
<p class="rubric">Examples</p>
<div class="highlight-python"><div class="highlight"><pre><span></span><span class="gp">&gt;&gt;&gt; </span><span class="kn">from</span> <span class="nn">dunshire.matrices</span> <span class="kn">import</span> <span class="n">norm</span>
<span class="gp">&gt;&gt;&gt; </span><span class="kn">from</span> <span class="nn">dunshire.options</span> <span class="kn">import</span> <span class="n">ABS_TOL</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">G</span> <span class="o">=</span> <span class="n">random_orthant_game</span><span class="p">()</span>
<span class="gp">&gt;&gt;&gt; </span><span class="p">(</span><span class="n">alpha</span><span class="p">,</span> <span class="n">H</span><span class="p">)</span> <span class="o">=</span> <span class="n">random_translation</span><span class="p">(</span><span class="n">G</span><span class="p">)</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">G</span><span class="o">.</span><span class="n">K</span><span class="p">()</span> <span class="o">==</span> <span class="n">H</span><span class="o">.</span><span class="n">K</span><span class="p">()</span>
<span class="go">True</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">norm</span><span class="p">(</span><span class="n">G</span><span class="o">.</span><span class="n">e1</span><span class="p">()</span> <span class="o">-</span> <span class="n">H</span><span class="o">.</span><span class="n">e1</span><span class="p">())</span> <span class="o">&lt;</span> <span class="n">ABS_TOL</span>
<span class="go">True</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">norm</span><span class="p">(</span><span class="n">G</span><span class="o">.</span><span class="n">e2</span><span class="p">()</span> <span class="o">-</span> <span class="n">H</span><span class="o">.</span><span class="n">e2</span><span class="p">())</span> <span class="o">&lt;</span> <span class="n">ABS_TOL</span>
<span class="go">True</span>
</pre></div>
</div>
</dd></dl>

</div>
<div class="section" id="module-test.symmetric_linear_game_test">
<span id="test-symmetric-linear-game-test-module"></span><h2>test.symmetric_linear_game_test module<a class="headerlink" href="#module-test.symmetric_linear_game_test" title="Permalink to this headline">¶</a></h2>
<p>Unit tests for the <code class="xref py py-class docutils literal"><span class="pre">SymmetricLinearGame</span></code> class.</p>
<dl class="class">
<dt id="test.symmetric_linear_game_test.SymmetricLinearGameTest">
<em class="property">class </em><code class="descname">SymmetricLinearGameTest</code><span class="sig-paren">(</span><em>methodName='runTest'</em><span class="sig-paren">)</span><a class="reference internal" href="_modules/test/symmetric_linear_game_test.xhtml#SymmetricLinearGameTest"><span class="viewcode-link">[source]</span></a><a class="headerlink" href="#test.symmetric_linear_game_test.SymmetricLinearGameTest" title="Permalink to this definition">¶</a></dt>
<dd><p>Bases: <code class="xref py py-class docutils literal"><span class="pre">unittest.case.TestCase</span></code></p>
<p>Tests for the SymmetricLinearGame and Solution classes.</p>
<dl class="method">
<dt id="test.symmetric_linear_game_test.SymmetricLinearGameTest.assert_lyapunov_works">
<code class="descname">assert_lyapunov_works</code><span class="sig-paren">(</span><em>G</em><span class="sig-paren">)</span><a class="reference internal" href="_modules/test/symmetric_linear_game_test.xhtml#SymmetricLinearGameTest.assert_lyapunov_works"><span class="viewcode-link">[source]</span></a><a class="headerlink" href="#test.symmetric_linear_game_test.SymmetricLinearGameTest.assert_lyapunov_works" title="Permalink to this definition">¶</a></dt>
<dd><p>Check that Lyapunov games act the way we expect.</p>
</dd></dl>

<dl class="method">
<dt id="test.symmetric_linear_game_test.SymmetricLinearGameTest.assert_opposite_game_works">
<code class="descname">assert_opposite_game_works</code><span class="sig-paren">(</span><em>G</em><span class="sig-paren">)</span><a class="reference internal" href="_modules/test/symmetric_linear_game_test.xhtml#SymmetricLinearGameTest.assert_opposite_game_works"><span class="viewcode-link">[source]</span></a><a class="headerlink" href="#test.symmetric_linear_game_test.SymmetricLinearGameTest.assert_opposite_game_works" title="Permalink to this definition">¶</a></dt>
<dd><p>Check the value of the &#8220;opposite&#8221; game that gives rise to a
value that is the negation of the original game. Comes from
some corollary.</p>
</dd></dl>

<dl class="method">
<dt id="test.symmetric_linear_game_test.SymmetricLinearGameTest.assert_orthogonality">
<code class="descname">assert_orthogonality</code><span class="sig-paren">(</span><em>G</em><span class="sig-paren">)</span><a class="reference internal" href="_modules/test/symmetric_linear_game_test.xhtml#SymmetricLinearGameTest.assert_orthogonality"><span class="viewcode-link">[source]</span></a><a class="headerlink" href="#test.symmetric_linear_game_test.SymmetricLinearGameTest.assert_orthogonality" title="Permalink to this definition">¶</a></dt>
<dd><p>Two orthogonality relations hold at an optimal solution, and we
check them here.</p>
</dd></dl>

<dl class="method">
<dt id="test.symmetric_linear_game_test.SymmetricLinearGameTest.assert_player1_start_valid">
<code class="descname">assert_player1_start_valid</code><span class="sig-paren">(</span><em>G</em><span class="sig-paren">)</span><a class="reference internal" href="_modules/test/symmetric_linear_game_test.xhtml#SymmetricLinearGameTest.assert_player1_start_valid"><span class="viewcode-link">[source]</span></a><a class="headerlink" href="#test.symmetric_linear_game_test.SymmetricLinearGameTest.assert_player1_start_valid" title="Permalink to this definition">¶</a></dt>
<dd><p>Ensure that player one&#8217;s starting point satisfies both the
equality and cone inequality in the CVXOPT primal problem.</p>
</dd></dl>

<dl class="method">
<dt id="test.symmetric_linear_game_test.SymmetricLinearGameTest.assert_player2_start_valid">
<code class="descname">assert_player2_start_valid</code><span class="sig-paren">(</span><em>G</em><span class="sig-paren">)</span><a class="reference internal" href="_modules/test/symmetric_linear_game_test.xhtml#SymmetricLinearGameTest.assert_player2_start_valid"><span class="viewcode-link">[source]</span></a><a class="headerlink" href="#test.symmetric_linear_game_test.SymmetricLinearGameTest.assert_player2_start_valid" title="Permalink to this definition">¶</a></dt>
<dd><p>Check that player two&#8217;s starting point satisfies both the
cone inequality in the CVXOPT dual problem.</p>
</dd></dl>

<dl class="method">
<dt id="test.symmetric_linear_game_test.SymmetricLinearGameTest.assert_scaling_works">
<code class="descname">assert_scaling_works</code><span class="sig-paren">(</span><em>G</em><span class="sig-paren">)</span><a class="reference internal" href="_modules/test/symmetric_linear_game_test.xhtml#SymmetricLinearGameTest.assert_scaling_works"><span class="viewcode-link">[source]</span></a><a class="headerlink" href="#test.symmetric_linear_game_test.SymmetricLinearGameTest.assert_scaling_works" title="Permalink to this definition">¶</a></dt>
<dd><p>Test that scaling <code class="docutils literal"><span class="pre">L</span></code> by a nonnegative number scales the value
of the game by the same number.</p>
</dd></dl>

<dl class="method">
<dt id="test.symmetric_linear_game_test.SymmetricLinearGameTest.assert_solutions_dont_change">
<code class="descname">assert_solutions_dont_change</code><span class="sig-paren">(</span><em>G</em><span class="sig-paren">)</span><a class="reference internal" href="_modules/test/symmetric_linear_game_test.xhtml#SymmetricLinearGameTest.assert_solutions_dont_change"><span class="viewcode-link">[source]</span></a><a class="headerlink" href="#test.symmetric_linear_game_test.SymmetricLinearGameTest.assert_solutions_dont_change" title="Permalink to this definition">¶</a></dt>
<dd><p>Solve <code class="docutils literal"><span class="pre">G</span></code> twice and check that the solutions agree.</p>
</dd></dl>

<dl class="method">
<dt id="test.symmetric_linear_game_test.SymmetricLinearGameTest.assert_translation_works">
<code class="descname">assert_translation_works</code><span class="sig-paren">(</span><em>G</em><span class="sig-paren">)</span><a class="reference internal" href="_modules/test/symmetric_linear_game_test.xhtml#SymmetricLinearGameTest.assert_translation_works"><span class="viewcode-link">[source]</span></a><a class="headerlink" href="#test.symmetric_linear_game_test.SymmetricLinearGameTest.assert_translation_works" title="Permalink to this definition">¶</a></dt>
<dd><p>Check that translating <code class="docutils literal"><span class="pre">L</span></code> by alpha*(e1*e2.trans()) increases
the value of the associated game by alpha.</p>
</dd></dl>

<dl class="method">
<dt id="test.symmetric_linear_game_test.SymmetricLinearGameTest.assert_within_tol">
<code class="descname">assert_within_tol</code><span class="sig-paren">(</span><em>first</em>, <em>second</em>, <em>modifier=1</em><span class="sig-paren">)</span><a class="reference internal" href="_modules/test/symmetric_linear_game_test.xhtml#SymmetricLinearGameTest.assert_within_tol"><span class="viewcode-link">[source]</span></a><a class="headerlink" href="#test.symmetric_linear_game_test.SymmetricLinearGameTest.assert_within_tol" title="Permalink to this definition">¶</a></dt>
<dd><p>Test that <code class="docutils literal"><span class="pre">first</span></code> and <code class="docutils literal"><span class="pre">second</span></code> are equal within a multiple of
our default tolerances.</p>
<table class="docutils field-list" frame="void" rules="none">
<col class="field-name" />
<col class="field-body" />
<tbody valign="top">
<tr class="field-odd field"><th class="field-name">Parameters:</th><td class="field-body"><ul class="first last simple">
<li><strong>first</strong> (<em>float</em>) &#8211; The first number to compare.</li>
<li><strong>second</strong> (<em>float</em>) &#8211; The second number to compare.</li>
<li><strong>modifier</strong> (<em>float</em>) &#8211; A scaling factor (default: 1) applied to the default
tolerance for this comparison. If you have a poorly-
conditioned matrix, for example, you may want to set this
greater than one.</li>
</ul>
</td>
</tr>
</tbody>
</table>
</dd></dl>

<dl class="method">
<dt id="test.symmetric_linear_game_test.SymmetricLinearGameTest.test_condition_lower_bound">
<code class="descname">test_condition_lower_bound</code><span class="sig-paren">(</span><span class="sig-paren">)</span><a class="reference internal" href="_modules/test/symmetric_linear_game_test.xhtml#SymmetricLinearGameTest.test_condition_lower_bound"><span class="viewcode-link">[source]</span></a><a class="headerlink" href="#test.symmetric_linear_game_test.SymmetricLinearGameTest.test_condition_lower_bound" title="Permalink to this definition">¶</a></dt>
<dd><p>Ensure that the condition number of a game is greater than or
equal to one.</p>
<p>It should be safe to compare these floats directly: we compute
the condition number as the ratio of one nonnegative real number
to a smaller nonnegative real number.</p>
</dd></dl>

<dl class="method">
<dt id="test.symmetric_linear_game_test.SymmetricLinearGameTest.test_lyapunov_icecream">
<code class="descname">test_lyapunov_icecream</code><span class="sig-paren">(</span><span class="sig-paren">)</span><a class="reference internal" href="_modules/test/symmetric_linear_game_test.xhtml#SymmetricLinearGameTest.test_lyapunov_icecream"><span class="viewcode-link">[source]</span></a><a class="headerlink" href="#test.symmetric_linear_game_test.SymmetricLinearGameTest.test_lyapunov_icecream" title="Permalink to this definition">¶</a></dt>
<dd><p>Test that a Lyapunov game on the ice-cream cone works.</p>
</dd></dl>

<dl class="method">
<dt id="test.symmetric_linear_game_test.SymmetricLinearGameTest.test_lyapunov_orthant">
<code class="descname">test_lyapunov_orthant</code><span class="sig-paren">(</span><span class="sig-paren">)</span><a class="reference internal" href="_modules/test/symmetric_linear_game_test.xhtml#SymmetricLinearGameTest.test_lyapunov_orthant"><span class="viewcode-link">[source]</span></a><a class="headerlink" href="#test.symmetric_linear_game_test.SymmetricLinearGameTest.test_lyapunov_orthant" title="Permalink to this definition">¶</a></dt>
<dd><p>Test that a Lyapunov game on the nonnegative orthant works.</p>
</dd></dl>

<dl class="method">
<dt id="test.symmetric_linear_game_test.SymmetricLinearGameTest.test_opposite_game_icecream">
<code class="descname">test_opposite_game_icecream</code><span class="sig-paren">(</span><span class="sig-paren">)</span><a class="reference internal" href="_modules/test/symmetric_linear_game_test.xhtml#SymmetricLinearGameTest.test_opposite_game_icecream"><span class="viewcode-link">[source]</span></a><a class="headerlink" href="#test.symmetric_linear_game_test.SymmetricLinearGameTest.test_opposite_game_icecream" title="Permalink to this definition">¶</a></dt>
<dd><p>Like <a class="reference internal" href="#test.symmetric_linear_game_test.SymmetricLinearGameTest.test_opposite_game_orthant" title="test.symmetric_linear_game_test.SymmetricLinearGameTest.test_opposite_game_orthant"><code class="xref py py-meth docutils literal"><span class="pre">test_opposite_game_orthant()</span></code></a>, except over the
ice-cream cone.</p>
</dd></dl>

<dl class="method">
<dt id="test.symmetric_linear_game_test.SymmetricLinearGameTest.test_opposite_game_orthant">
<code class="descname">test_opposite_game_orthant</code><span class="sig-paren">(</span><span class="sig-paren">)</span><a class="reference internal" href="_modules/test/symmetric_linear_game_test.xhtml#SymmetricLinearGameTest.test_opposite_game_orthant"><span class="viewcode-link">[source]</span></a><a class="headerlink" href="#test.symmetric_linear_game_test.SymmetricLinearGameTest.test_opposite_game_orthant" title="Permalink to this definition">¶</a></dt>
<dd><p>Test the value of the &#8220;opposite&#8221; game over the nonnegative
orthant.</p>
</dd></dl>

<dl class="method">
<dt id="test.symmetric_linear_game_test.SymmetricLinearGameTest.test_orthogonality_icecream">
<code class="descname">test_orthogonality_icecream</code><span class="sig-paren">(</span><span class="sig-paren">)</span><a class="reference internal" href="_modules/test/symmetric_linear_game_test.xhtml#SymmetricLinearGameTest.test_orthogonality_icecream"><span class="viewcode-link">[source]</span></a><a class="headerlink" href="#test.symmetric_linear_game_test.SymmetricLinearGameTest.test_orthogonality_icecream" title="Permalink to this definition">¶</a></dt>
<dd><p>Check the orthgonality relationships that hold for a solution
over the ice-cream cone.</p>
</dd></dl>

<dl class="method">
<dt id="test.symmetric_linear_game_test.SymmetricLinearGameTest.test_orthogonality_orthant">
<code class="descname">test_orthogonality_orthant</code><span class="sig-paren">(</span><span class="sig-paren">)</span><a class="reference internal" href="_modules/test/symmetric_linear_game_test.xhtml#SymmetricLinearGameTest.test_orthogonality_orthant"><span class="viewcode-link">[source]</span></a><a class="headerlink" href="#test.symmetric_linear_game_test.SymmetricLinearGameTest.test_orthogonality_orthant" title="Permalink to this definition">¶</a></dt>
<dd><p>Check the orthgonality relationships that hold for a solution
over the nonnegative orthant.</p>
</dd></dl>

<dl class="method">
<dt id="test.symmetric_linear_game_test.SymmetricLinearGameTest.test_player1_start_valid_icecream">
<code class="descname">test_player1_start_valid_icecream</code><span class="sig-paren">(</span><span class="sig-paren">)</span><a class="reference internal" href="_modules/test/symmetric_linear_game_test.xhtml#SymmetricLinearGameTest.test_player1_start_valid_icecream"><span class="viewcode-link">[source]</span></a><a class="headerlink" href="#test.symmetric_linear_game_test.SymmetricLinearGameTest.test_player1_start_valid_icecream" title="Permalink to this definition">¶</a></dt>
<dd><p>Ensure that player one&#8217;s starting point is feasible over the
ice-cream cone.</p>
</dd></dl>

<dl class="method">
<dt id="test.symmetric_linear_game_test.SymmetricLinearGameTest.test_player1_start_valid_orthant">
<code class="descname">test_player1_start_valid_orthant</code><span class="sig-paren">(</span><span class="sig-paren">)</span><a class="reference internal" href="_modules/test/symmetric_linear_game_test.xhtml#SymmetricLinearGameTest.test_player1_start_valid_orthant"><span class="viewcode-link">[source]</span></a><a class="headerlink" href="#test.symmetric_linear_game_test.SymmetricLinearGameTest.test_player1_start_valid_orthant" title="Permalink to this definition">¶</a></dt>
<dd><p>Ensure that player one&#8217;s starting point is feasible over the
nonnegative orthant.</p>
</dd></dl>

<dl class="method">
<dt id="test.symmetric_linear_game_test.SymmetricLinearGameTest.test_player2_start_valid_icecream">
<code class="descname">test_player2_start_valid_icecream</code><span class="sig-paren">(</span><span class="sig-paren">)</span><a class="reference internal" href="_modules/test/symmetric_linear_game_test.xhtml#SymmetricLinearGameTest.test_player2_start_valid_icecream"><span class="viewcode-link">[source]</span></a><a class="headerlink" href="#test.symmetric_linear_game_test.SymmetricLinearGameTest.test_player2_start_valid_icecream" title="Permalink to this definition">¶</a></dt>
<dd><p>Ensure that player two&#8217;s starting point is feasible over the
ice-cream cone.</p>
</dd></dl>

<dl class="method">
<dt id="test.symmetric_linear_game_test.SymmetricLinearGameTest.test_player2_start_valid_orthant">
<code class="descname">test_player2_start_valid_orthant</code><span class="sig-paren">(</span><span class="sig-paren">)</span><a class="reference internal" href="_modules/test/symmetric_linear_game_test.xhtml#SymmetricLinearGameTest.test_player2_start_valid_orthant"><span class="viewcode-link">[source]</span></a><a class="headerlink" href="#test.symmetric_linear_game_test.SymmetricLinearGameTest.test_player2_start_valid_orthant" title="Permalink to this definition">¶</a></dt>
<dd><p>Ensure that player two&#8217;s starting point is feasible over the
nonnegative orthant.</p>
</dd></dl>

<dl class="method">
<dt id="test.symmetric_linear_game_test.SymmetricLinearGameTest.test_positive_operator_value">
<code class="descname">test_positive_operator_value</code><span class="sig-paren">(</span><span class="sig-paren">)</span><a class="reference internal" href="_modules/test/symmetric_linear_game_test.xhtml#SymmetricLinearGameTest.test_positive_operator_value"><span class="viewcode-link">[source]</span></a><a class="headerlink" href="#test.symmetric_linear_game_test.SymmetricLinearGameTest.test_positive_operator_value" title="Permalink to this definition">¶</a></dt>
<dd><p>Test that a positive operator on the nonnegative orthant gives
rise to a a game with a nonnegative value.</p>
<p>This test theoretically applies to the ice-cream cone as well,
but we don&#8217;t know how to make positive operators on that cone.</p>
</dd></dl>

<dl class="method">
<dt id="test.symmetric_linear_game_test.SymmetricLinearGameTest.test_scaling_icecream">
<code class="descname">test_scaling_icecream</code><span class="sig-paren">(</span><span class="sig-paren">)</span><a class="reference internal" href="_modules/test/symmetric_linear_game_test.xhtml#SymmetricLinearGameTest.test_scaling_icecream"><span class="viewcode-link">[source]</span></a><a class="headerlink" href="#test.symmetric_linear_game_test.SymmetricLinearGameTest.test_scaling_icecream" title="Permalink to this definition">¶</a></dt>
<dd><p>The same test as <code class="xref py py-meth docutils literal"><span class="pre">test_nonnegative_scaling_orthant()</span></code>,
except over the ice cream cone.</p>
</dd></dl>

<dl class="method">
<dt id="test.symmetric_linear_game_test.SymmetricLinearGameTest.test_scaling_orthant">
<code class="descname">test_scaling_orthant</code><span class="sig-paren">(</span><span class="sig-paren">)</span><a class="reference internal" href="_modules/test/symmetric_linear_game_test.xhtml#SymmetricLinearGameTest.test_scaling_orthant"><span class="viewcode-link">[source]</span></a><a class="headerlink" href="#test.symmetric_linear_game_test.SymmetricLinearGameTest.test_scaling_orthant" title="Permalink to this definition">¶</a></dt>
<dd><p>Test that scaling <code class="docutils literal"><span class="pre">L</span></code> by a nonnegative number scales the value
of the game by the same number over the nonnegative orthant.</p>
</dd></dl>

<dl class="method">
<dt id="test.symmetric_linear_game_test.SymmetricLinearGameTest.test_solutions_dont_change_icecream">
<code class="descname">test_solutions_dont_change_icecream</code><span class="sig-paren">(</span><span class="sig-paren">)</span><a class="reference internal" href="_modules/test/symmetric_linear_game_test.xhtml#SymmetricLinearGameTest.test_solutions_dont_change_icecream"><span class="viewcode-link">[source]</span></a><a class="headerlink" href="#test.symmetric_linear_game_test.SymmetricLinearGameTest.test_solutions_dont_change_icecream" title="Permalink to this definition">¶</a></dt>
<dd><p>If we solve the same game twice over the ice-cream cone, then we
should get the same solution both times. The solution to a game
is not unique, but the process we use is (as far as we know)
deterministic.</p>
</dd></dl>

<dl class="method">
<dt id="test.symmetric_linear_game_test.SymmetricLinearGameTest.test_solutions_dont_change_orthant">
<code class="descname">test_solutions_dont_change_orthant</code><span class="sig-paren">(</span><span class="sig-paren">)</span><a class="reference internal" href="_modules/test/symmetric_linear_game_test.xhtml#SymmetricLinearGameTest.test_solutions_dont_change_orthant"><span class="viewcode-link">[source]</span></a><a class="headerlink" href="#test.symmetric_linear_game_test.SymmetricLinearGameTest.test_solutions_dont_change_orthant" title="Permalink to this definition">¶</a></dt>
<dd><p>If we solve the same game twice over the nonnegative orthant,
then we should get the same solution both times. The solution to
a game is not unique, but the process we use is (as far as we
know) deterministic.</p>
</dd></dl>

<dl class="method">
<dt id="test.symmetric_linear_game_test.SymmetricLinearGameTest.test_translation_icecream">
<code class="descname">test_translation_icecream</code><span class="sig-paren">(</span><span class="sig-paren">)</span><a class="reference internal" href="_modules/test/symmetric_linear_game_test.xhtml#SymmetricLinearGameTest.test_translation_icecream"><span class="viewcode-link">[source]</span></a><a class="headerlink" href="#test.symmetric_linear_game_test.SymmetricLinearGameTest.test_translation_icecream" title="Permalink to this definition">¶</a></dt>
<dd><p>The same as <a class="reference internal" href="#test.symmetric_linear_game_test.SymmetricLinearGameTest.test_translation_orthant" title="test.symmetric_linear_game_test.SymmetricLinearGameTest.test_translation_orthant"><code class="xref py py-meth docutils literal"><span class="pre">test_translation_orthant()</span></code></a>, except over the
ice cream cone.</p>
</dd></dl>

<dl class="method">
<dt id="test.symmetric_linear_game_test.SymmetricLinearGameTest.test_translation_orthant">
<code class="descname">test_translation_orthant</code><span class="sig-paren">(</span><span class="sig-paren">)</span><a class="reference internal" href="_modules/test/symmetric_linear_game_test.xhtml#SymmetricLinearGameTest.test_translation_orthant"><span class="viewcode-link">[source]</span></a><a class="headerlink" href="#test.symmetric_linear_game_test.SymmetricLinearGameTest.test_translation_orthant" title="Permalink to this definition">¶</a></dt>
<dd><p>Test that translation works over the nonnegative orthant.</p>
</dd></dl>

</dd></dl>

</div>
</div>


          </div>
        </div>
      </div>
      <div class="sphinxsidebar" role="navigation" aria-label="main navigation">
        <div class="sphinxsidebarwrapper">
<h1 class="logo"><a href="index.xhtml">Dunshire</a></h1>








<h3>Navigation</h3>
<ul class="current">
<li class="toctree-l1"><a class="reference internal" href="overview.xhtml">Overview</a></li>
<li class="toctree-l1"><a class="reference internal" href="requirements.xhtml">Requirements</a></li>
<li class="toctree-l1"><a class="reference internal" href="user-api.xhtml">User API Documentation</a></li>
<li class="toctree-l1"><a class="reference internal" href="background.xhtml">Background</a></li>
<li class="toctree-l1"><a class="reference internal" href="references.xhtml">References</a></li>
<li class="toctree-l1 current"><a class="current reference internal" href="">Developer API Documentation</a><ul>
<li class="toctree-l2"><a class="reference internal" href="#module-dunshire.errors">dunshire.errors module</a></li>
<li class="toctree-l2"><a class="reference internal" href="#module-dunshire.matrices">dunshire.matrices module</a></li>
<li class="toctree-l2"><a class="reference internal" href="#module-dunshire.options">dunshire.options module</a></li>
<li class="toctree-l2"><a class="reference internal" href="#module-test">test module</a></li>
<li class="toctree-l2"><a class="reference internal" href="#module-test.matrices_test">test.matrices_test</a></li>
<li class="toctree-l2"><a class="reference internal" href="#module-test.randomgen">test.randomgen</a></li>
<li class="toctree-l2"><a class="reference internal" href="#module-test.symmetric_linear_game_test">test.symmetric_linear_game_test module</a></li>
</ul>
</li>
</ul>


        </div>
      </div>
      <div class="clearer"></div>
    </div>
    <div class="footer">
      
      
    </div>

    

    
  </body>
</html>