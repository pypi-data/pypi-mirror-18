<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"
  "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">


<html xmlns="http://www.w3.org/1999/xhtml">
  <head>
    <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
    
    <title>User API Documentation &mdash; Dunshire 0.1.1 documentation</title>
    
    <link rel="stylesheet" href="_static/alabaster.css" type="text/css" />
    <link rel="stylesheet" href="_static/pygments.css" type="text/css" />
    
    <script type="text/javascript">
      var DOCUMENTATION_OPTIONS = {
        URL_ROOT:    './',
        VERSION:     '0.1.1',
        COLLAPSE_INDEX: false,
        FILE_SUFFIX: '.xhtml',
        HAS_SOURCE:  true
      };
    </script>
    <script type="text/javascript" src="_static/jquery.js"></script>
    <script type="text/javascript" src="_static/underscore.js"></script>
    <script type="text/javascript" src="_static/doctools.js"></script>
    <script type="text/javascript" src="https://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML"></script>
    <link rel="top" title="Dunshire 0.1.1 documentation" href="index.xhtml" />
    <link rel="next" title="Background" href="background.xhtml" />
    <link rel="prev" title="Requirements" href="requirements.xhtml" />
   
  <link rel="stylesheet" href="_static/custom.css" type="text/css" />
  
  
  <meta name="viewport" content="width=device-width, initial-scale=0.9, maximum-scale=0.9" />

  </head>
  <body role="document">
  

    <div class="document">
      <div class="documentwrapper">
        <div class="bodywrapper">
          <div class="body" role="main">
            
  <div class="section" id="user-api-documentation">
<h1>User API Documentation<a class="headerlink" href="#user-api-documentation" title="Permalink to this headline">¶</a></h1>
<p>You should only need to work with two modules, <a class="reference internal" href="#module-dunshire.cones" title="dunshire.cones"><code class="xref py py-mod docutils literal"><span class="pre">dunshire.cones</span></code></a> and
<a class="reference internal" href="#module-dunshire.games" title="dunshire.games"><code class="xref py py-mod docutils literal"><span class="pre">dunshire.games</span></code></a>. For convenience, you can import everything from
the <code class="xref py py-mod docutils literal"><span class="pre">dunshire</span></code> package, and it will re-export what you need. For
example,</p>
<div class="highlight-python"><div class="highlight"><pre><span></span><span class="kn">from</span> <span class="nn">dunshire</span> <span class="kn">import</span> <span class="o">*</span>
<span class="n">K</span> <span class="o">=</span> <span class="n">IceCream</span><span class="p">(</span><span class="mi">3</span><span class="p">)</span>
<span class="n">L</span> <span class="o">=</span> <span class="p">[[</span><span class="mi">1</span><span class="p">,</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span><span class="mi">12</span><span class="p">],[</span><span class="mi">0</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">22</span><span class="p">],[</span><span class="o">-</span><span class="mi">17</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">0</span><span class="p">]]</span>
<span class="n">e1</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span><span class="mf">0.5</span><span class="p">,</span><span class="mf">0.25</span><span class="p">]</span>
<span class="n">e2</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span><span class="mf">0.25</span><span class="p">,</span><span class="mf">0.5</span><span class="p">]</span>
<span class="n">G</span> <span class="o">=</span> <span class="n">SymmetricLinearGame</span><span class="p">(</span><span class="n">L</span><span class="p">,</span><span class="n">K</span><span class="p">,</span><span class="n">e1</span><span class="p">,</span><span class="n">e2</span><span class="p">)</span>
<span class="n">G</span><span class="o">.</span><span class="n">solution</span><span class="p">()</span>
</pre></div>
</div>
<div class="section" id="module-dunshire.cones">
<span id="dunshire-cones-module"></span><h2>dunshire.cones module<a class="headerlink" href="#module-dunshire.cones" title="Permalink to this headline">¶</a></h2>
<p>Class definitions for all of the symmetric cones (and their superclass,
<a class="reference internal" href="#dunshire.cones.SymmetricCone" title="dunshire.cones.SymmetricCone"><code class="xref py py-class docutils literal"><span class="pre">SymmetricCone</span></code></a>) supported by CVXOPT.</p>
<dl class="class">
<dt id="dunshire.cones.CartesianProduct">
<em class="property">class </em><code class="descname">CartesianProduct</code><span class="sig-paren">(</span><em>*factors</em><span class="sig-paren">)</span><a class="reference internal" href="_modules/dunshire/cones.xhtml#CartesianProduct"><span class="viewcode-link">[source]</span></a><a class="headerlink" href="#dunshire.cones.CartesianProduct" title="Permalink to this definition">¶</a></dt>
<dd><p>Bases: <a class="reference internal" href="#dunshire.cones.SymmetricCone" title="dunshire.cones.SymmetricCone"><code class="xref py py-class docutils literal"><span class="pre">dunshire.cones.SymmetricCone</span></code></a></p>
<p>A cartesian product of symmetric cones, which is itself a symmetric
cone.</p>
<p class="rubric">Examples</p>
<div class="highlight-python"><div class="highlight"><pre><span></span><span class="gp">&gt;&gt;&gt; </span><span class="n">K</span> <span class="o">=</span> <span class="n">CartesianProduct</span><span class="p">(</span><span class="n">NonnegativeOrthant</span><span class="p">(</span><span class="mi">3</span><span class="p">),</span> <span class="n">IceCream</span><span class="p">(</span><span class="mi">2</span><span class="p">))</span>
<span class="gp">&gt;&gt;&gt; </span><span class="k">print</span><span class="p">(</span><span class="n">K</span><span class="p">)</span>
<span class="go">Cartesian product of dimension 5 with 2 factors:</span>
<span class="go">  * Nonnegative orthant in the real 3-space</span>
<span class="go">  * Lorentz &quot;ice cream&quot; cone in the real 2-space</span>
</pre></div>
</div>
<dl class="method">
<dt id="dunshire.cones.CartesianProduct.__contains__">
<code class="descname">__contains__</code><span class="sig-paren">(</span><em>point</em><span class="sig-paren">)</span><a class="reference internal" href="_modules/dunshire/cones.xhtml#CartesianProduct.__contains__"><span class="viewcode-link">[source]</span></a><a class="headerlink" href="#dunshire.cones.CartesianProduct.__contains__" title="Permalink to this definition">¶</a></dt>
<dd><p>Return whether or not <code class="docutils literal"><span class="pre">point</span></code> belongs to this cone.</p>
<p>The <code class="docutils literal"><span class="pre">point</span></code> is expected to be a tuple of points which will be
tested for membership in this cone&#8217;s factors. If each point in
the tuple belongs to its corresponding factor, then the whole
point belongs to this cone. Otherwise, it doesn&#8217;t.</p>
<table class="docutils field-list" frame="void" rules="none">
<col class="field-name" />
<col class="field-body" />
<tbody valign="top">
<tr class="field-odd field"><th class="field-name">Parameters:</th><td class="field-body"><p class="first"><strong>point</strong> (<em>tuple of matrix</em>) &#8211; A tuple of <code class="xref py py-class docutils literal"><span class="pre">cvxopt.base.matrix</span></code> corresponding to the
<a class="reference internal" href="#dunshire.cones.CartesianProduct.factors" title="dunshire.cones.CartesianProduct.factors"><code class="xref py py-meth docutils literal"><span class="pre">factors()</span></code></a> of this cartesian product.</p>
</td>
</tr>
<tr class="field-even field"><th class="field-name">Returns:</th><td class="field-body"><p class="first"><code class="docutils literal"><span class="pre">True</span></code> if <code class="docutils literal"><span class="pre">point</span></code> belongs to this cone, <code class="docutils literal"><span class="pre">False</span></code> otherwise.</p>
</td>
</tr>
<tr class="field-odd field"><th class="field-name">Return type:</th><td class="field-body"><p class="first">bool</p>
</td>
</tr>
<tr class="field-even field"><th class="field-name">Raises:</th><td class="field-body"><ul class="first last simple">
<li><code class="xref py py-exc docutils literal"><span class="pre">TypeError</span></code> &#8211;
If <code class="docutils literal"><span class="pre">point</span></code> is not a tuple of <code class="xref py py-class docutils literal"><span class="pre">cvxopt.base.matrix</span></code>.</li>
<li><code class="xref py py-exc docutils literal"><span class="pre">TypeError</span></code> &#8211;
If any element of <code class="docutils literal"><span class="pre">point</span></code> has the wrong dimensions.</li>
</ul>
</td>
</tr>
</tbody>
</table>
<p class="rubric">Examples</p>
<p>The result depends on how containment is defined for our factors:</p>
<div class="highlight-python"><div class="highlight"><pre><span></span><span class="gp">&gt;&gt;&gt; </span><span class="n">K</span> <span class="o">=</span> <span class="n">CartesianProduct</span><span class="p">(</span><span class="n">NonnegativeOrthant</span><span class="p">(</span><span class="mi">3</span><span class="p">),</span> <span class="n">IceCream</span><span class="p">(</span><span class="mi">3</span><span class="p">))</span>
<span class="gp">&gt;&gt;&gt; </span><span class="p">(</span><span class="n">matrix</span><span class="p">([</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">]),</span> <span class="n">matrix</span><span class="p">([</span><span class="mi">1</span><span class="p">,</span><span class="mf">0.5</span><span class="p">,</span><span class="mf">0.5</span><span class="p">]))</span> <span class="ow">in</span> <span class="n">K</span>
<span class="go">True</span>
</pre></div>
</div>
<div class="highlight-python"><div class="highlight"><pre><span></span><span class="gp">&gt;&gt;&gt; </span><span class="n">K</span> <span class="o">=</span> <span class="n">CartesianProduct</span><span class="p">(</span><span class="n">NonnegativeOrthant</span><span class="p">(</span><span class="mi">3</span><span class="p">),</span> <span class="n">IceCream</span><span class="p">(</span><span class="mi">3</span><span class="p">))</span>
<span class="gp">&gt;&gt;&gt; </span><span class="p">(</span><span class="n">matrix</span><span class="p">([</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">]),</span> <span class="n">matrix</span><span class="p">([</span><span class="mi">1</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">1</span><span class="p">]))</span> <span class="ow">in</span> <span class="n">K</span>
<span class="go">True</span>
</pre></div>
</div>
<div class="highlight-python"><div class="highlight"><pre><span></span><span class="gp">&gt;&gt;&gt; </span><span class="n">K</span> <span class="o">=</span> <span class="n">CartesianProduct</span><span class="p">(</span><span class="n">NonnegativeOrthant</span><span class="p">(</span><span class="mi">3</span><span class="p">),</span> <span class="n">IceCream</span><span class="p">(</span><span class="mi">3</span><span class="p">))</span>
<span class="gp">&gt;&gt;&gt; </span><span class="p">(</span><span class="n">matrix</span><span class="p">([</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">]),</span> <span class="n">matrix</span><span class="p">([</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">]))</span> <span class="ow">in</span> <span class="n">K</span>
<span class="go">False</span>
</pre></div>
</div>
<div class="highlight-python"><div class="highlight"><pre><span></span><span class="gp">&gt;&gt;&gt; </span><span class="n">K</span> <span class="o">=</span> <span class="n">CartesianProduct</span><span class="p">(</span><span class="n">NonnegativeOrthant</span><span class="p">(</span><span class="mi">3</span><span class="p">),</span> <span class="n">IceCream</span><span class="p">(</span><span class="mi">3</span><span class="p">))</span>
<span class="gp">&gt;&gt;&gt; </span><span class="p">(</span><span class="n">matrix</span><span class="p">([</span><span class="mi">1</span><span class="p">,</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">]),</span> <span class="n">matrix</span><span class="p">([</span><span class="mi">1</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">1</span><span class="p">]))</span> <span class="ow">in</span> <span class="n">K</span>
<span class="go">False</span>
</pre></div>
</div>
<p>Junk arguments don&#8217;t work:</p>
<div class="highlight-python"><div class="highlight"><pre><span></span><span class="gp">&gt;&gt;&gt; </span><span class="n">K</span> <span class="o">=</span> <span class="n">CartesianProduct</span><span class="p">(</span><span class="n">NonnegativeOrthant</span><span class="p">(</span><span class="mi">3</span><span class="p">),</span> <span class="n">IceCream</span><span class="p">(</span><span class="mi">3</span><span class="p">))</span>
<span class="gp">&gt;&gt;&gt; </span><span class="p">[[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">],[</span><span class="mi">4</span><span class="p">,</span><span class="mi">5</span><span class="p">,</span><span class="mi">6</span><span class="p">]]</span> <span class="ow">in</span> <span class="n">K</span>
<span class="gt">Traceback (most recent call last):</span>
<span class="c">...</span>
<span class="gr">TypeError</span>: <span class="n">the given point is not a cvxopt.base.matrix</span>
</pre></div>
</div>
<div class="highlight-python"><div class="highlight"><pre><span></span><span class="gp">&gt;&gt;&gt; </span><span class="n">K</span> <span class="o">=</span> <span class="n">CartesianProduct</span><span class="p">(</span><span class="n">NonnegativeOrthant</span><span class="p">(</span><span class="mi">3</span><span class="p">),</span> <span class="n">IceCream</span><span class="p">(</span><span class="mi">3</span><span class="p">))</span>
<span class="gp">&gt;&gt;&gt; </span><span class="p">(</span><span class="n">matrix</span><span class="p">([</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">]),</span> <span class="n">matrix</span><span class="p">([</span><span class="mi">3</span><span class="p">,</span><span class="mi">4</span><span class="p">,</span><span class="mi">5</span><span class="p">,</span><span class="mi">6</span><span class="p">]))</span> <span class="ow">in</span> <span class="n">K</span>
<span class="gt">Traceback (most recent call last):</span>
<span class="c">...</span>
<span class="gr">TypeError</span>: <span class="n">the given point has the wrong dimensions</span>
</pre></div>
</div>
</dd></dl>

<dl class="method">
<dt id="dunshire.cones.CartesianProduct.__str__">
<code class="descname">__str__</code><span class="sig-paren">(</span><span class="sig-paren">)</span><a class="reference internal" href="_modules/dunshire/cones.xhtml#CartesianProduct.__str__"><span class="viewcode-link">[source]</span></a><a class="headerlink" href="#dunshire.cones.CartesianProduct.__str__" title="Permalink to this definition">¶</a></dt>
<dd><p>Output a human-readable description of myself.</p>
</dd></dl>

<dl class="method">
<dt id="dunshire.cones.CartesianProduct.cvxopt_dims">
<code class="descname">cvxopt_dims</code><span class="sig-paren">(</span><span class="sig-paren">)</span><a class="reference internal" href="_modules/dunshire/cones.xhtml#CartesianProduct.cvxopt_dims"><span class="viewcode-link">[source]</span></a><a class="headerlink" href="#dunshire.cones.CartesianProduct.cvxopt_dims" title="Permalink to this definition">¶</a></dt>
<dd><p>Return a dictionary of dimensions corresponding to the
factors of this cartesian product. The format of this dictionary
is described in the <a class="reference external" href="http://cvxopt.org/userguide/coneprog.html#linear-cone-programs">CVXOPT user&#8217;s guide</a>.</p>
<table class="docutils field-list" frame="void" rules="none">
<col class="field-name" />
<col class="field-body" />
<tbody valign="top">
<tr class="field-odd field"><th class="field-name">Returns:</th><td class="field-body">A dimension dictionary suitable to feed to CVXOPT.</td>
</tr>
<tr class="field-even field"><th class="field-name">Return type:</th><td class="field-body">dict</td>
</tr>
</tbody>
</table>
<p class="rubric">Examples</p>
<div class="highlight-python"><div class="highlight"><pre><span></span><span class="gp">&gt;&gt;&gt; </span><span class="n">K</span> <span class="o">=</span> <span class="n">CartesianProduct</span><span class="p">(</span><span class="n">NonnegativeOrthant</span><span class="p">(</span><span class="mi">3</span><span class="p">),</span>
<span class="gp">... </span>                     <span class="n">IceCream</span><span class="p">(</span><span class="mi">2</span><span class="p">),</span>
<span class="gp">... </span>                     <span class="n">IceCream</span><span class="p">(</span><span class="mi">3</span><span class="p">))</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">d</span> <span class="o">=</span> <span class="n">K</span><span class="o">.</span><span class="n">cvxopt_dims</span><span class="p">()</span>
<span class="gp">&gt;&gt;&gt; </span><span class="p">(</span><span class="n">d</span><span class="p">[</span><span class="s1">&#39;l&#39;</span><span class="p">],</span> <span class="n">d</span><span class="p">[</span><span class="s1">&#39;q&#39;</span><span class="p">],</span> <span class="n">d</span><span class="p">[</span><span class="s1">&#39;s&#39;</span><span class="p">])</span>
<span class="go">(3, [2, 3], [])</span>
</pre></div>
</div>
</dd></dl>

<dl class="method">
<dt id="dunshire.cones.CartesianProduct.factors">
<code class="descname">factors</code><span class="sig-paren">(</span><span class="sig-paren">)</span><a class="reference internal" href="_modules/dunshire/cones.xhtml#CartesianProduct.factors"><span class="viewcode-link">[source]</span></a><a class="headerlink" href="#dunshire.cones.CartesianProduct.factors" title="Permalink to this definition">¶</a></dt>
<dd><p>Return a tuple containing the factors (in order) of this
cartesian product.</p>
<table class="docutils field-list" frame="void" rules="none">
<col class="field-name" />
<col class="field-body" />
<tbody valign="top">
<tr class="field-odd field"><th class="field-name">Returns:</th><td class="field-body">The factors of this cartesian product.</td>
</tr>
<tr class="field-even field"><th class="field-name">Return type:</th><td class="field-body">tuple of SymmetricCone.</td>
</tr>
</tbody>
</table>
<p class="rubric">Examples</p>
<div class="highlight-python"><div class="highlight"><pre><span></span><span class="gp">&gt;&gt;&gt; </span><span class="n">K</span> <span class="o">=</span> <span class="n">CartesianProduct</span><span class="p">(</span><span class="n">NonnegativeOrthant</span><span class="p">(</span><span class="mi">3</span><span class="p">),</span> <span class="n">IceCream</span><span class="p">(</span><span class="mi">2</span><span class="p">))</span>
<span class="gp">&gt;&gt;&gt; </span><span class="nb">len</span><span class="p">(</span><span class="n">K</span><span class="o">.</span><span class="n">factors</span><span class="p">())</span>
<span class="go">2</span>
</pre></div>
</div>
</dd></dl>

</dd></dl>

<dl class="class">
<dt id="dunshire.cones.IceCream">
<em class="property">class </em><code class="descname">IceCream</code><span class="sig-paren">(</span><em>dimension</em><span class="sig-paren">)</span><a class="reference internal" href="_modules/dunshire/cones.xhtml#IceCream"><span class="viewcode-link">[source]</span></a><a class="headerlink" href="#dunshire.cones.IceCream" title="Permalink to this definition">¶</a></dt>
<dd><p>Bases: <a class="reference internal" href="#dunshire.cones.SymmetricCone" title="dunshire.cones.SymmetricCone"><code class="xref py py-class docutils literal"><span class="pre">dunshire.cones.SymmetricCone</span></code></a></p>
<p>The Lorentz &#8220;ice cream&#8221; cone in the given number of dimensions.</p>
<p class="rubric">Examples</p>
<div class="highlight-python"><div class="highlight"><pre><span></span><span class="gp">&gt;&gt;&gt; </span><span class="n">K</span> <span class="o">=</span> <span class="n">IceCream</span><span class="p">(</span><span class="mi">3</span><span class="p">)</span>
<span class="gp">&gt;&gt;&gt; </span><span class="k">print</span><span class="p">(</span><span class="n">K</span><span class="p">)</span>
<span class="go">Lorentz &quot;ice cream&quot; cone in the real 3-space</span>
</pre></div>
</div>
<dl class="method">
<dt id="dunshire.cones.IceCream.__contains__">
<code class="descname">__contains__</code><span class="sig-paren">(</span><em>point</em><span class="sig-paren">)</span><a class="reference internal" href="_modules/dunshire/cones.xhtml#IceCream.__contains__"><span class="viewcode-link">[source]</span></a><a class="headerlink" href="#dunshire.cones.IceCream.__contains__" title="Permalink to this definition">¶</a></dt>
<dd><p>Return whether or not <code class="docutils literal"><span class="pre">point</span></code> belongs to this cone.</p>
<p>Since this test is expected to work on points whose components
are floating point numbers, it doesn&#8217;t make any sense to
distinguish between strict and non-strict containment &#8211; the
test uses a tolerance parameter.</p>
<table class="docutils field-list" frame="void" rules="none">
<col class="field-name" />
<col class="field-body" />
<tbody valign="top">
<tr class="field-odd field"><th class="field-name">Parameters:</th><td class="field-body"><p class="first"><strong>point</strong> (<em>matrix</em>) &#8211; A <code class="xref py py-class docutils literal"><span class="pre">cvxopt.base.matrix</span></code> having dimensions <code class="docutils literal"><span class="pre">(n,1)</span></code>
where <code class="docutils literal"><span class="pre">n</span></code> is the <code class="xref py py-meth docutils literal"><span class="pre">dimension()</span></code> of this cone.</p>
</td>
</tr>
<tr class="field-even field"><th class="field-name">Returns:</th><td class="field-body"><p class="first"><code class="docutils literal"><span class="pre">True</span></code> if <code class="docutils literal"><span class="pre">point</span></code> belongs to this cone, <code class="docutils literal"><span class="pre">False</span></code> otherwise.</p>
</td>
</tr>
<tr class="field-odd field"><th class="field-name">Return type:</th><td class="field-body"><p class="first">bool</p>
</td>
</tr>
<tr class="field-even field"><th class="field-name">Raises:</th><td class="field-body"><ul class="first last simple">
<li><code class="xref py py-exc docutils literal"><span class="pre">TypeError</span></code> &#8211;
If <code class="docutils literal"><span class="pre">point</span></code> is not a <code class="xref py py-class docutils literal"><span class="pre">cvxopt.base.matrix</span></code>.</li>
<li><code class="xref py py-exc docutils literal"><span class="pre">TypeError</span></code> &#8211;
If <code class="docutils literal"><span class="pre">point</span></code> has the wrong dimensions.</li>
</ul>
</td>
</tr>
</tbody>
</table>
<p class="rubric">Examples</p>
<p>This point lies well within the ice cream cone:</p>
<div class="highlight-python"><div class="highlight"><pre><span></span><span class="gp">&gt;&gt;&gt; </span><span class="n">K</span> <span class="o">=</span> <span class="n">IceCream</span><span class="p">(</span><span class="mi">3</span><span class="p">)</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">matrix</span><span class="p">([</span><span class="mi">1</span><span class="p">,</span><span class="mf">0.5</span><span class="p">,</span><span class="mf">0.5</span><span class="p">])</span> <span class="ow">in</span> <span class="n">K</span>
<span class="go">True</span>
</pre></div>
</div>
<p>This one lies on its boundary:</p>
<div class="highlight-python"><div class="highlight"><pre><span></span><span class="gp">&gt;&gt;&gt; </span><span class="n">K</span> <span class="o">=</span> <span class="n">IceCream</span><span class="p">(</span><span class="mi">3</span><span class="p">)</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">matrix</span><span class="p">([</span><span class="mi">1</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">1</span><span class="p">])</span> <span class="ow">in</span> <span class="n">K</span>
<span class="go">True</span>
</pre></div>
</div>
<p>This point lies entirely outside of the ice cream cone:</p>
<div class="highlight-python"><div class="highlight"><pre><span></span><span class="gp">&gt;&gt;&gt; </span><span class="n">K</span> <span class="o">=</span> <span class="n">IceCream</span><span class="p">(</span><span class="mi">3</span><span class="p">)</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">matrix</span><span class="p">([</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">])</span> <span class="ow">in</span> <span class="n">K</span>
<span class="go">False</span>
</pre></div>
</div>
<p>Junk arguments don&#8217;t work:</p>
<div class="highlight-python"><div class="highlight"><pre><span></span><span class="gp">&gt;&gt;&gt; </span><span class="n">K</span> <span class="o">=</span> <span class="n">IceCream</span><span class="p">(</span><span class="mi">3</span><span class="p">)</span>
<span class="gp">&gt;&gt;&gt; </span><span class="p">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">]</span> <span class="ow">in</span> <span class="n">K</span>
<span class="gt">Traceback (most recent call last):</span>
<span class="c">...</span>
<span class="gr">TypeError</span>: <span class="n">the given point is not a cvxopt.base.matrix</span>
</pre></div>
</div>
<div class="highlight-python"><div class="highlight"><pre><span></span><span class="gp">&gt;&gt;&gt; </span><span class="n">K</span> <span class="o">=</span> <span class="n">IceCream</span><span class="p">(</span><span class="mi">3</span><span class="p">)</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">matrix</span><span class="p">([</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">])</span> <span class="ow">in</span> <span class="n">K</span>
<span class="gt">Traceback (most recent call last):</span>
<span class="c">...</span>
<span class="gr">TypeError</span>: <span class="n">the given point has the wrong dimensions</span>
</pre></div>
</div>
</dd></dl>

<dl class="method">
<dt id="dunshire.cones.IceCream.__str__">
<code class="descname">__str__</code><span class="sig-paren">(</span><span class="sig-paren">)</span><a class="reference internal" href="_modules/dunshire/cones.xhtml#IceCream.__str__"><span class="viewcode-link">[source]</span></a><a class="headerlink" href="#dunshire.cones.IceCream.__str__" title="Permalink to this definition">¶</a></dt>
<dd><p>Output a human-readable description of myself.</p>
</dd></dl>

<dl class="method">
<dt id="dunshire.cones.IceCream.ball_radius">
<code class="descname">ball_radius</code><span class="sig-paren">(</span><em>point</em><span class="sig-paren">)</span><a class="reference internal" href="_modules/dunshire/cones.xhtml#IceCream.ball_radius"><span class="viewcode-link">[source]</span></a><a class="headerlink" href="#dunshire.cones.IceCream.ball_radius" title="Permalink to this definition">¶</a></dt>
<dd><p>Return the radius of a ball around <code class="docutils literal"><span class="pre">point</span></code> in this cone.</p>
<p>Since a radius cannot be negative, the <code class="docutils literal"><span class="pre">point</span></code> must be
contained in this cone; otherwise, an error is raised.</p>
<p>The minimum distance from <code class="docutils literal"><span class="pre">point</span></code> to the complement of this
cone will always occur at its projection onto that set. It is
not hard to see that the projection is at a &#8220;down and out&#8221; angle
of <span class="math">\(\pi/4\)</span> towards the outside of the cone. If one draws a
right triangle involving the <code class="docutils literal"><span class="pre">point</span></code> and that projection, it
becomes clear that the distance between <code class="docutils literal"><span class="pre">point</span></code> and its
projection is a factor of <span class="math">\(1/\sqrt(2)\)</span> times the &#8220;horizontal&#8221;
distance from <code class="docutils literal"><span class="pre">point</span></code> to boundary of this cone. For simplicity
we take <span class="math">\(1/2\)</span> instead.</p>
<table class="docutils field-list" frame="void" rules="none">
<col class="field-name" />
<col class="field-body" />
<tbody valign="top">
<tr class="field-odd field"><th class="field-name">Parameters:</th><td class="field-body"><p class="first"><strong>point</strong> (<em>matrix</em>) &#8211; A point contained in this cone.</p>
</td>
</tr>
<tr class="field-even field"><th class="field-name">Returns:</th><td class="field-body"><p class="first">A radius <code class="docutils literal"><span class="pre">r</span></code> such that the ball of radius <code class="docutils literal"><span class="pre">r</span></code> centered at
<code class="docutils literal"><span class="pre">point</span></code> is contained entirely within this cone.</p>
</td>
</tr>
<tr class="field-odd field"><th class="field-name">Return type:</th><td class="field-body"><p class="first">float</p>
</td>
</tr>
<tr class="field-even field"><th class="field-name">Raises:</th><td class="field-body"><ul class="first last simple">
<li><code class="xref py py-exc docutils literal"><span class="pre">TypeError</span></code> &#8211;
If <code class="docutils literal"><span class="pre">point</span></code> is not a <code class="xref py py-class docutils literal"><span class="pre">cvxopt.base.matrix</span></code>.</li>
<li><code class="xref py py-exc docutils literal"><span class="pre">TypeError</span></code> &#8211;
If <code class="docutils literal"><span class="pre">point</span></code> has the wrong dimensions.</li>
<li><code class="xref py py-exc docutils literal"><span class="pre">ValueError</span></code> &#8211;
if <code class="docutils literal"><span class="pre">point</span></code> is not contained in this cone.</li>
</ul>
</td>
</tr>
</tbody>
</table>
<p class="rubric">Examples</p>
<p>The height of <code class="docutils literal"><span class="pre">x</span></code> below is one (its first coordinate), and so
the radius of the circle obtained from a height-one cross
section is also one. Note that the last two coordinates of <code class="docutils literal"><span class="pre">x</span></code>
are half of the way to the boundary of the cone, and in the
direction of a 30-60-90 triangle. If one follows those
coordinates, they hit at <span class="math">\(\left(1, \frac{\sqrt(3)}{2},
\frac{1}{2}\right)\)</span> having unit norm. Thus the &#8220;horizontal&#8221;
distance to the boundary of the cone is <span class="math">\(1 - \left\lVert x
\right\rVert\)</span>, which simplifies to <span class="math">\(1/2\)</span>. And rather than
involve a square root, we divide by two for a final safe radius
of <span class="math">\(1/4\)</span>.</p>
<div class="highlight-python"><div class="highlight"><pre><span></span><span class="gp">&gt;&gt;&gt; </span><span class="kn">from</span> <span class="nn">math</span> <span class="kn">import</span> <span class="n">sqrt</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">K</span> <span class="o">=</span> <span class="n">IceCream</span><span class="p">(</span><span class="mi">3</span><span class="p">)</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">x</span> <span class="o">=</span> <span class="n">matrix</span><span class="p">([</span><span class="mi">1</span><span class="p">,</span> <span class="n">sqrt</span><span class="p">(</span><span class="mi">3</span><span class="p">)</span><span class="o">/</span><span class="mf">4.0</span><span class="p">,</span> <span class="mi">1</span><span class="o">/</span><span class="mf">4.0</span><span class="p">])</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">K</span><span class="o">.</span><span class="n">ball_radius</span><span class="p">(</span><span class="n">x</span><span class="p">)</span>
<span class="go">0.25</span>
</pre></div>
</div>
</dd></dl>

</dd></dl>

<dl class="class">
<dt id="dunshire.cones.NonnegativeOrthant">
<em class="property">class </em><code class="descname">NonnegativeOrthant</code><span class="sig-paren">(</span><em>dimension</em><span class="sig-paren">)</span><a class="reference internal" href="_modules/dunshire/cones.xhtml#NonnegativeOrthant"><span class="viewcode-link">[source]</span></a><a class="headerlink" href="#dunshire.cones.NonnegativeOrthant" title="Permalink to this definition">¶</a></dt>
<dd><p>Bases: <a class="reference internal" href="#dunshire.cones.SymmetricCone" title="dunshire.cones.SymmetricCone"><code class="xref py py-class docutils literal"><span class="pre">dunshire.cones.SymmetricCone</span></code></a></p>
<p>The nonnegative orthant in the given number of dimensions.</p>
<p class="rubric">Examples</p>
<div class="highlight-python"><div class="highlight"><pre><span></span><span class="gp">&gt;&gt;&gt; </span><span class="n">K</span> <span class="o">=</span> <span class="n">NonnegativeOrthant</span><span class="p">(</span><span class="mi">3</span><span class="p">)</span>
<span class="gp">&gt;&gt;&gt; </span><span class="k">print</span><span class="p">(</span><span class="n">K</span><span class="p">)</span>
<span class="go">Nonnegative orthant in the real 3-space</span>
</pre></div>
</div>
<dl class="method">
<dt id="dunshire.cones.NonnegativeOrthant.__contains__">
<code class="descname">__contains__</code><span class="sig-paren">(</span><em>point</em><span class="sig-paren">)</span><a class="reference internal" href="_modules/dunshire/cones.xhtml#NonnegativeOrthant.__contains__"><span class="viewcode-link">[source]</span></a><a class="headerlink" href="#dunshire.cones.NonnegativeOrthant.__contains__" title="Permalink to this definition">¶</a></dt>
<dd><p>Return whether or not <code class="docutils literal"><span class="pre">point</span></code> belongs to this cone.</p>
<p>Since this test is expected to work on points whose components
are floating point numbers, it doesn&#8217;t make any sense to
distinguish between strict and non-strict containment &#8211; the
test uses a tolerance parameter.</p>
<table class="docutils field-list" frame="void" rules="none">
<col class="field-name" />
<col class="field-body" />
<tbody valign="top">
<tr class="field-odd field"><th class="field-name">Parameters:</th><td class="field-body"><p class="first"><strong>point</strong> (<em>matrix</em>) &#8211; A <code class="xref py py-class docutils literal"><span class="pre">cvxopt.base.matrix</span></code> having dimensions <code class="docutils literal"><span class="pre">(n,1)</span></code>
where <code class="docutils literal"><span class="pre">n</span></code> is the <code class="xref py py-meth docutils literal"><span class="pre">dimension()</span></code> of this cone.</p>
</td>
</tr>
<tr class="field-even field"><th class="field-name">Returns:</th><td class="field-body"><p class="first"><code class="docutils literal"><span class="pre">True</span></code> if <code class="docutils literal"><span class="pre">point</span></code> belongs to this cone, <code class="docutils literal"><span class="pre">False</span></code> otherwise.</p>
</td>
</tr>
<tr class="field-odd field"><th class="field-name">Return type:</th><td class="field-body"><p class="first">bool</p>
</td>
</tr>
<tr class="field-even field"><th class="field-name">Raises:</th><td class="field-body"><ul class="first last simple">
<li><code class="xref py py-exc docutils literal"><span class="pre">TypeError</span></code> &#8211;
If <code class="docutils literal"><span class="pre">point</span></code> is not a <code class="xref py py-class docutils literal"><span class="pre">cvxopt.base.matrix</span></code>.</li>
<li><code class="xref py py-exc docutils literal"><span class="pre">TypeError</span></code> &#8211;
If <code class="docutils literal"><span class="pre">point</span></code> has the wrong dimensions.</li>
</ul>
</td>
</tr>
</tbody>
</table>
<p class="rubric">Examples</p>
<p>All of these coordinates are positive enough:</p>
<div class="highlight-python"><div class="highlight"><pre><span></span><span class="gp">&gt;&gt;&gt; </span><span class="n">K</span> <span class="o">=</span> <span class="n">NonnegativeOrthant</span><span class="p">(</span><span class="mi">3</span><span class="p">)</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">matrix</span><span class="p">([</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">])</span> <span class="ow">in</span> <span class="n">K</span>
<span class="go">True</span>
</pre></div>
</div>
<p>The one negative coordinate pushes this point outside of <code class="docutils literal"><span class="pre">K</span></code>:</p>
<div class="highlight-python"><div class="highlight"><pre><span></span><span class="gp">&gt;&gt;&gt; </span><span class="n">K</span> <span class="o">=</span> <span class="n">NonnegativeOrthant</span><span class="p">(</span><span class="mi">3</span><span class="p">)</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">matrix</span><span class="p">([</span><span class="mi">1</span><span class="p">,</span><span class="o">-</span><span class="mf">0.1</span><span class="p">,</span><span class="mi">3</span><span class="p">])</span> <span class="ow">in</span> <span class="n">K</span>
<span class="go">False</span>
</pre></div>
</div>
<dl class="docutils">
<dt>A boundary point is considered inside of <code class="docutils literal"><span class="pre">K</span></code>:</dt>
<dd><div class="first last highlight-python"><div class="highlight"><pre><span></span><span class="gp">&gt;&gt;&gt; </span><span class="n">K</span> <span class="o">=</span> <span class="n">NonnegativeOrthant</span><span class="p">(</span><span class="mi">3</span><span class="p">)</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">matrix</span><span class="p">([</span><span class="mi">1</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">3</span><span class="p">])</span> <span class="ow">in</span> <span class="n">K</span>
<span class="go">True</span>
</pre></div>
</div>
</dd>
</dl>
<p>Junk arguments don&#8217;t work:</p>
<div class="highlight-python"><div class="highlight"><pre><span></span><span class="gp">&gt;&gt;&gt; </span><span class="n">K</span> <span class="o">=</span> <span class="n">NonnegativeOrthant</span><span class="p">(</span><span class="mi">3</span><span class="p">)</span>
<span class="gp">&gt;&gt;&gt; </span><span class="p">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">]</span> <span class="ow">in</span> <span class="n">K</span>
<span class="gt">Traceback (most recent call last):</span>
<span class="c">...</span>
<span class="gr">TypeError</span>: <span class="n">the given point is not a cvxopt.base.matrix</span>
</pre></div>
</div>
<div class="highlight-python"><div class="highlight"><pre><span></span><span class="gp">&gt;&gt;&gt; </span><span class="n">K</span> <span class="o">=</span> <span class="n">NonnegativeOrthant</span><span class="p">(</span><span class="mi">3</span><span class="p">)</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">matrix</span><span class="p">([</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">])</span> <span class="ow">in</span> <span class="n">K</span>
<span class="gt">Traceback (most recent call last):</span>
<span class="c">...</span>
<span class="gr">TypeError</span>: <span class="n">the given point has the wrong dimensions</span>
</pre></div>
</div>
</dd></dl>

<dl class="method">
<dt id="dunshire.cones.NonnegativeOrthant.__str__">
<code class="descname">__str__</code><span class="sig-paren">(</span><span class="sig-paren">)</span><a class="reference internal" href="_modules/dunshire/cones.xhtml#NonnegativeOrthant.__str__"><span class="viewcode-link">[source]</span></a><a class="headerlink" href="#dunshire.cones.NonnegativeOrthant.__str__" title="Permalink to this definition">¶</a></dt>
<dd><p>Output a human-readable description of myself.</p>
</dd></dl>

<dl class="method">
<dt id="dunshire.cones.NonnegativeOrthant.ball_radius">
<code class="descname">ball_radius</code><span class="sig-paren">(</span><em>point</em><span class="sig-paren">)</span><a class="reference internal" href="_modules/dunshire/cones.xhtml#NonnegativeOrthant.ball_radius"><span class="viewcode-link">[source]</span></a><a class="headerlink" href="#dunshire.cones.NonnegativeOrthant.ball_radius" title="Permalink to this definition">¶</a></dt>
<dd><p>Return the radius of a ball around <code class="docutils literal"><span class="pre">point</span></code> in this cone.</p>
<p>Since a radius cannot be negative, the <code class="docutils literal"><span class="pre">point</span></code> must be
contained in this cone; otherwise, an error is raised.</p>
<p>The minimum distance from <code class="docutils literal"><span class="pre">point</span></code> to the complement of this
cone will always occur at its projection onto that set. It is
not hard to see that the projection is directly along one of the
coordinates, and so the minimum distance from <code class="docutils literal"><span class="pre">point</span></code> to the
boundary of this cone is the smallest coordinate of
<code class="docutils literal"><span class="pre">point</span></code>. Therefore any radius less than that will work; we
divide it in half somewhat arbitrarily.</p>
<table class="docutils field-list" frame="void" rules="none">
<col class="field-name" />
<col class="field-body" />
<tbody valign="top">
<tr class="field-odd field"><th class="field-name">Parameters:</th><td class="field-body"><p class="first"><strong>point</strong> (<em>matrix</em>) &#8211; A point contained in this cone.</p>
</td>
</tr>
<tr class="field-even field"><th class="field-name">Returns:</th><td class="field-body"><p class="first">A radius <code class="docutils literal"><span class="pre">r</span></code> such that the ball of radius <code class="docutils literal"><span class="pre">r</span></code> centered at
<code class="docutils literal"><span class="pre">point</span></code> is contained entirely within this cone.</p>
</td>
</tr>
<tr class="field-odd field"><th class="field-name">Return type:</th><td class="field-body"><p class="first">float</p>
</td>
</tr>
<tr class="field-even field"><th class="field-name">Raises:</th><td class="field-body"><ul class="first last simple">
<li><code class="xref py py-exc docutils literal"><span class="pre">TypeError</span></code> &#8211;
If <code class="docutils literal"><span class="pre">point</span></code> is not a <code class="xref py py-class docutils literal"><span class="pre">cvxopt.base.matrix</span></code>.</li>
<li><code class="xref py py-exc docutils literal"><span class="pre">TypeError</span></code> &#8211;
If <code class="docutils literal"><span class="pre">point</span></code> has the wrong dimensions.</li>
<li><code class="xref py py-exc docutils literal"><span class="pre">ValueError</span></code> &#8211;
if <code class="docutils literal"><span class="pre">point</span></code> is not contained in this cone.</li>
</ul>
</td>
</tr>
</tbody>
</table>
<p class="rubric">Examples</p>
<div class="highlight-python"><div class="highlight"><pre><span></span><span class="gp">&gt;&gt;&gt; </span><span class="n">K</span> <span class="o">=</span> <span class="n">NonnegativeOrthant</span><span class="p">(</span><span class="mi">5</span><span class="p">)</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">K</span><span class="o">.</span><span class="n">ball_radius</span><span class="p">(</span><span class="n">matrix</span><span class="p">([</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">4</span><span class="p">,</span><span class="mi">5</span><span class="p">]))</span>
<span class="go">0.5</span>
</pre></div>
</div>
</dd></dl>

</dd></dl>

<dl class="class">
<dt id="dunshire.cones.SymmetricCone">
<em class="property">class </em><code class="descname">SymmetricCone</code><span class="sig-paren">(</span><em>dimension</em><span class="sig-paren">)</span><a class="reference internal" href="_modules/dunshire/cones.xhtml#SymmetricCone"><span class="viewcode-link">[source]</span></a><a class="headerlink" href="#dunshire.cones.SymmetricCone" title="Permalink to this definition">¶</a></dt>
<dd><p>Bases: <code class="xref py py-class docutils literal"><span class="pre">object</span></code></p>
<p>An instance of a symmetric (self-dual and homogeneous) cone.</p>
<p>There are three types of symmetric cones supported by CVXOPT:</p>
<blockquote>
<div><ol class="arabic simple">
<li>The nonnegative orthant in the real n-space.</li>
<li>The Lorentz &#8220;ice cream&#8221; cone, or the second-order cone.</li>
<li>The cone of symmetric positive-semidefinite matrices.</li>
</ol>
</div></blockquote>
<p>This class is intended to encompass them all.</p>
<p>When constructing a single symmetric cone (i.e. not a
<a class="reference internal" href="#dunshire.cones.CartesianProduct" title="dunshire.cones.CartesianProduct"><code class="xref py py-class docutils literal"><span class="pre">CartesianProduct</span></code></a> of them), the only information that we
need is its dimension. We take that dimension as a parameter, and
store it for later.</p>
<table class="docutils field-list" frame="void" rules="none">
<col class="field-name" />
<col class="field-body" />
<tbody valign="top">
<tr class="field-odd field"><th class="field-name">Parameters:</th><td class="field-body"><strong>dimension</strong> (<em>int</em>) &#8211; The dimension of this cone.</td>
</tr>
<tr class="field-even field"><th class="field-name">Raises:</th><td class="field-body"><code class="xref py py-exc docutils literal"><span class="pre">ValueError</span></code> &#8211;
If you try to create a cone with dimension zero or less.</td>
</tr>
</tbody>
</table>
<dl class="method">
<dt id="dunshire.cones.SymmetricCone.__contains__">
<code class="descname">__contains__</code><span class="sig-paren">(</span><em>point</em><span class="sig-paren">)</span><a class="reference internal" href="_modules/dunshire/cones.xhtml#SymmetricCone.__contains__"><span class="viewcode-link">[source]</span></a><a class="headerlink" href="#dunshire.cones.SymmetricCone.__contains__" title="Permalink to this definition">¶</a></dt>
<dd><p>Return whether or not <code class="docutils literal"><span class="pre">point</span></code> belongs to this cone.</p>
<table class="docutils field-list" frame="void" rules="none">
<col class="field-name" />
<col class="field-body" />
<tbody valign="top">
<tr class="field-odd field"><th class="field-name">Parameters:</th><td class="field-body"><strong>point</strong> (<em>matrix</em>) &#8211; The point to test for membership in this cone.</td>
</tr>
<tr class="field-even field"><th class="field-name">Raises:</th><td class="field-body"><code class="xref py py-exc docutils literal"><span class="pre">NotImplementedError</span></code> &#8211;
Always, this method must be implemented in subclasses.</td>
</tr>
</tbody>
</table>
<p class="rubric">Examples</p>
<div class="highlight-python"><div class="highlight"><pre><span></span><span class="gp">&gt;&gt;&gt; </span><span class="n">K</span> <span class="o">=</span> <span class="n">SymmetricCone</span><span class="p">(</span><span class="mi">5</span><span class="p">)</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">matrix</span><span class="p">([</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">])</span> <span class="ow">in</span> <span class="n">K</span>
<span class="gt">Traceback (most recent call last):</span>
<span class="c">...</span>
<span class="gr">NotImplementedError</span>
</pre></div>
</div>
</dd></dl>

<dl class="method">
<dt id="dunshire.cones.SymmetricCone.ball_radius">
<code class="descname">ball_radius</code><span class="sig-paren">(</span><em>point</em><span class="sig-paren">)</span><a class="reference internal" href="_modules/dunshire/cones.xhtml#SymmetricCone.ball_radius"><span class="viewcode-link">[source]</span></a><a class="headerlink" href="#dunshire.cones.SymmetricCone.ball_radius" title="Permalink to this definition">¶</a></dt>
<dd><p>Return the radius of a ball around <code class="docutils literal"><span class="pre">point</span></code> in this cone.</p>
<p>Since a radius cannot be negative, the <code class="docutils literal"><span class="pre">point</span></code> must be
contained in this cone; otherwise, an error is raised.</p>
<table class="docutils field-list" frame="void" rules="none">
<col class="field-name" />
<col class="field-body" />
<tbody valign="top">
<tr class="field-odd field"><th class="field-name">Parameters:</th><td class="field-body"><strong>point</strong> (<em>matrix</em>) &#8211; A point contained in this cone.</td>
</tr>
<tr class="field-even field"><th class="field-name">Returns:</th><td class="field-body">A radius <code class="docutils literal"><span class="pre">r</span></code> such that the ball of radius <code class="docutils literal"><span class="pre">r</span></code> centered at
<code class="docutils literal"><span class="pre">point</span></code> is contained entirely within this cone.</td>
</tr>
<tr class="field-odd field"><th class="field-name">Return type:</th><td class="field-body">float</td>
</tr>
<tr class="field-even field"><th class="field-name">Raises:</th><td class="field-body"><code class="xref py py-exc docutils literal"><span class="pre">NotImplementedError</span></code> &#8211;
Always, this method must be implemented in subclasses.</td>
</tr>
</tbody>
</table>
<p class="rubric">Examples</p>
<div class="highlight-python"><div class="highlight"><pre><span></span><span class="gp">&gt;&gt;&gt; </span><span class="n">K</span> <span class="o">=</span> <span class="n">SymmetricCone</span><span class="p">(</span><span class="mi">5</span><span class="p">)</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">K</span><span class="o">.</span><span class="n">ball_radius</span><span class="p">(</span><span class="n">matrix</span><span class="p">([</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">]))</span>
<span class="gt">Traceback (most recent call last):</span>
<span class="c">...</span>
<span class="gr">NotImplementedError</span>
</pre></div>
</div>
</dd></dl>

<dl class="method">
<dt id="dunshire.cones.SymmetricCone.dimension">
<code class="descname">dimension</code><span class="sig-paren">(</span><span class="sig-paren">)</span><a class="reference internal" href="_modules/dunshire/cones.xhtml#SymmetricCone.dimension"><span class="viewcode-link">[source]</span></a><a class="headerlink" href="#dunshire.cones.SymmetricCone.dimension" title="Permalink to this definition">¶</a></dt>
<dd><p>Return the dimension of this symmetric cone.</p>
<p>The dimension of this symmetric cone is recorded during its
creation. This method simply returns the recorded value, and
should not need to be overridden in subclasses. We prefer to do
any special computation in <code class="docutils literal"><span class="pre">__init__()</span></code> and record the result
in <code class="docutils literal"><span class="pre">self._dimension</span></code>.</p>
<table class="docutils field-list" frame="void" rules="none">
<col class="field-name" />
<col class="field-body" />
<tbody valign="top">
<tr class="field-odd field"><th class="field-name">Returns:</th><td class="field-body">The stored dimension (from when this cone was constructed)
of this cone.</td>
</tr>
<tr class="field-even field"><th class="field-name">Return type:</th><td class="field-body">int</td>
</tr>
</tbody>
</table>
<p class="rubric">Examples</p>
<div class="highlight-python"><div class="highlight"><pre><span></span><span class="gp">&gt;&gt;&gt; </span><span class="n">K</span> <span class="o">=</span> <span class="n">SymmetricCone</span><span class="p">(</span><span class="mi">5</span><span class="p">)</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">K</span><span class="o">.</span><span class="n">dimension</span><span class="p">()</span>
<span class="go">5</span>
</pre></div>
</div>
</dd></dl>

</dd></dl>

<dl class="class">
<dt id="dunshire.cones.SymmetricPSD">
<em class="property">class </em><code class="descname">SymmetricPSD</code><span class="sig-paren">(</span><em>dimension</em><span class="sig-paren">)</span><a class="reference internal" href="_modules/dunshire/cones.xhtml#SymmetricPSD"><span class="viewcode-link">[source]</span></a><a class="headerlink" href="#dunshire.cones.SymmetricPSD" title="Permalink to this definition">¶</a></dt>
<dd><p>Bases: <a class="reference internal" href="#dunshire.cones.SymmetricCone" title="dunshire.cones.SymmetricCone"><code class="xref py py-class docutils literal"><span class="pre">dunshire.cones.SymmetricCone</span></code></a></p>
<p>The cone of real symmetric positive-semidefinite matrices.</p>
<p>This cone has a dimension <code class="docutils literal"><span class="pre">n</span></code> associated with it, but we let <code class="docutils literal"><span class="pre">n</span></code>
refer to the dimension of the domain of our matrices and not the
dimension of the (much larger) space in which the matrices
themselves live. In other words, our <code class="docutils literal"><span class="pre">n</span></code> is the <code class="docutils literal"><span class="pre">n</span></code> that appears
in the usual notation <span class="math">\(S^{n}\)</span> for symmetric matrices.</p>
<p>As a result, the cone <code class="docutils literal"><span class="pre">SymmetricPSD(n)</span></code> lives in a space of dimension
<span class="math">\(\left(n^{2} + n\right)/2)\)</span>.</p>
<p class="rubric">Examples</p>
<div class="highlight-python"><div class="highlight"><pre><span></span><span class="gp">&gt;&gt;&gt; </span><span class="n">K</span> <span class="o">=</span> <span class="n">SymmetricPSD</span><span class="p">(</span><span class="mi">3</span><span class="p">)</span>
<span class="gp">&gt;&gt;&gt; </span><span class="k">print</span><span class="p">(</span><span class="n">K</span><span class="p">)</span>
<span class="go">Cone of symmetric positive-semidefinite matrices on the real 3-space</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">K</span><span class="o">.</span><span class="n">dimension</span><span class="p">()</span>
<span class="go">3</span>
</pre></div>
</div>
<dl class="method">
<dt id="dunshire.cones.SymmetricPSD.__contains__">
<code class="descname">__contains__</code><span class="sig-paren">(</span><em>point</em><span class="sig-paren">)</span><a class="reference internal" href="_modules/dunshire/cones.xhtml#SymmetricPSD.__contains__"><span class="viewcode-link">[source]</span></a><a class="headerlink" href="#dunshire.cones.SymmetricPSD.__contains__" title="Permalink to this definition">¶</a></dt>
<dd><p>Return whether or not <code class="docutils literal"><span class="pre">point</span></code> belongs to this cone.</p>
<p>Since this test is expected to work on points whose components
are floating point numbers, it doesn&#8217;t make any sense to
distinguish between strict and non-strict containment &#8211; the
test uses a tolerance parameter.</p>
<table class="docutils field-list" frame="void" rules="none">
<col class="field-name" />
<col class="field-body" />
<tbody valign="top">
<tr class="field-odd field"><th class="field-name">Parameters:</th><td class="field-body"><p class="first"><strong>point</strong> (<em>matrix</em>) &#8211; A <code class="xref py py-class docutils literal"><span class="pre">cvxopt.base.matrix</span></code> having dimensions <code class="docutils literal"><span class="pre">(n,n)</span></code>
where <code class="docutils literal"><span class="pre">n</span></code> is the <code class="xref py py-meth docutils literal"><span class="pre">dimension()</span></code> of this cone.</p>
</td>
</tr>
<tr class="field-even field"><th class="field-name">Returns:</th><td class="field-body"><p class="first"><code class="docutils literal"><span class="pre">True</span></code> if <code class="docutils literal"><span class="pre">point</span></code> belongs to this cone, <code class="docutils literal"><span class="pre">False</span></code> otherwise.</p>
</td>
</tr>
<tr class="field-odd field"><th class="field-name">Return type:</th><td class="field-body"><p class="first">bool</p>
</td>
</tr>
<tr class="field-even field"><th class="field-name">Raises:</th><td class="field-body"><ul class="first last simple">
<li><code class="xref py py-exc docutils literal"><span class="pre">TypeError</span></code> &#8211;
If <code class="docutils literal"><span class="pre">point</span></code> is not a <code class="xref py py-class docutils literal"><span class="pre">cvxopt.base.matrix</span></code>.</li>
<li><code class="xref py py-exc docutils literal"><span class="pre">TypeError</span></code> &#8211;
If <code class="docutils literal"><span class="pre">point</span></code> has the wrong dimensions.</li>
</ul>
</td>
</tr>
</tbody>
</table>
<p class="rubric">Examples</p>
<p>These all lie in the interior of the Symmetric PSD cone:</p>
<div class="highlight-python"><div class="highlight"><pre><span></span><span class="gp">&gt;&gt;&gt; </span><span class="n">K</span> <span class="o">=</span> <span class="n">SymmetricPSD</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">matrix</span><span class="p">([[</span><span class="mi">1</span><span class="p">,</span><span class="mi">0</span><span class="p">],[</span><span class="mi">0</span><span class="p">,</span><span class="mi">1</span><span class="p">]])</span> <span class="ow">in</span> <span class="n">K</span>
<span class="go">True</span>
</pre></div>
</div>
<div class="highlight-python"><div class="highlight"><pre><span></span><span class="gp">&gt;&gt;&gt; </span><span class="n">K</span> <span class="o">=</span> <span class="n">SymmetricPSD</span><span class="p">(</span><span class="mi">3</span><span class="p">)</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">matrix</span><span class="p">([[</span><span class="mi">2</span><span class="p">,</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span><span class="mi">0</span><span class="p">],[</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="o">-</span><span class="mi">1</span><span class="p">],[</span><span class="mi">0</span><span class="p">,</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">]])</span> <span class="ow">in</span> <span class="n">K</span>
<span class="go">True</span>
</pre></div>
</div>
<div class="highlight-python"><div class="highlight"><pre><span></span><span class="gp">&gt;&gt;&gt; </span><span class="n">K</span> <span class="o">=</span> <span class="n">SymmetricPSD</span><span class="p">(</span><span class="mi">5</span><span class="p">)</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">A</span> <span class="o">=</span> <span class="n">matrix</span><span class="p">([[</span><span class="mi">5</span><span class="p">,</span><span class="mi">4</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">1</span><span class="p">],</span>
<span class="gp">... </span>            <span class="p">[</span><span class="mi">4</span><span class="p">,</span><span class="mi">5</span><span class="p">,</span><span class="mi">4</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">2</span><span class="p">],</span>
<span class="gp">... </span>            <span class="p">[</span><span class="mi">3</span><span class="p">,</span><span class="mi">4</span><span class="p">,</span><span class="mi">5</span><span class="p">,</span><span class="mi">4</span><span class="p">,</span><span class="mi">3</span><span class="p">],</span>
<span class="gp">... </span>            <span class="p">[</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">4</span><span class="p">,</span><span class="mi">5</span><span class="p">,</span><span class="mi">4</span><span class="p">],</span>
<span class="gp">... </span>            <span class="p">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">4</span><span class="p">,</span><span class="mi">5</span><span class="p">]])</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">A</span> <span class="ow">in</span> <span class="n">K</span>
<span class="go">True</span>
</pre></div>
</div>
<p>Boundary points lie in the cone as well:</p>
<div class="highlight-python"><div class="highlight"><pre><span></span><span class="gp">&gt;&gt;&gt; </span><span class="n">K</span> <span class="o">=</span> <span class="n">SymmetricPSD</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">matrix</span><span class="p">([[</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">],[</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">]])</span> <span class="ow">in</span> <span class="n">K</span>
<span class="go">True</span>
</pre></div>
</div>
<div class="highlight-python"><div class="highlight"><pre><span></span><span class="gp">&gt;&gt;&gt; </span><span class="n">K</span> <span class="o">=</span> <span class="n">SymmetricPSD</span><span class="p">(</span><span class="mi">5</span><span class="p">)</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">A</span> <span class="o">=</span> <span class="n">matrix</span><span class="p">([[</span><span class="mi">1</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">],</span>
<span class="gp">... </span>            <span class="p">[</span><span class="mi">0</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">],</span>
<span class="gp">... </span>            <span class="p">[</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">],</span>
<span class="gp">... </span>            <span class="p">[</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">0</span><span class="p">],</span>
<span class="gp">... </span>            <span class="p">[</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">1</span><span class="p">]])</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">A</span> <span class="ow">in</span> <span class="n">K</span>
<span class="go">True</span>
</pre></div>
</div>
<p>However, this matrix has a negative eigenvalue:</p>
<div class="highlight-python"><div class="highlight"><pre><span></span><span class="gp">&gt;&gt;&gt; </span><span class="n">K</span> <span class="o">=</span> <span class="n">SymmetricPSD</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">A</span> <span class="o">=</span> <span class="n">matrix</span><span class="p">([[</span> <span class="mi">1</span><span class="p">,</span> <span class="o">-</span><span class="mi">2</span><span class="p">],</span>
<span class="gp">... </span>            <span class="p">[</span><span class="o">-</span><span class="mi">2</span><span class="p">,</span>  <span class="mi">1</span><span class="p">]])</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">A</span> <span class="ow">in</span> <span class="n">K</span>
<span class="go">False</span>
</pre></div>
</div>
<p>An asymmetric cone with positive eigenvalues is not in the cone:</p>
<div class="highlight-python"><div class="highlight"><pre><span></span><span class="gp">&gt;&gt;&gt; </span><span class="n">K</span> <span class="o">=</span> <span class="n">SymmetricPSD</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">A</span> <span class="o">=</span> <span class="n">matrix</span><span class="p">([[</span><span class="mi">10</span><span class="p">,</span> <span class="mi">2</span><span class="p">],</span>
<span class="gp">... </span>            <span class="p">[</span><span class="mi">4</span><span class="p">,</span>  <span class="mi">8</span><span class="p">]])</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">A</span> <span class="ow">in</span> <span class="n">K</span>
<span class="go">False</span>
</pre></div>
</div>
<p>Junk arguments don&#8217;t work:</p>
<div class="highlight-python"><div class="highlight"><pre><span></span><span class="gp">&gt;&gt;&gt; </span><span class="n">K</span> <span class="o">=</span> <span class="n">SymmetricPSD</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span>
<span class="gp">&gt;&gt;&gt; </span><span class="p">[[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">],[</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">]]</span> <span class="ow">in</span> <span class="n">K</span>
<span class="gt">Traceback (most recent call last):</span>
<span class="c">...</span>
<span class="gr">TypeError</span>: <span class="n">the given point is not a cvxopt.base.matrix</span>
</pre></div>
</div>
<div class="highlight-python"><div class="highlight"><pre><span></span><span class="gp">&gt;&gt;&gt; </span><span class="n">K</span> <span class="o">=</span> <span class="n">SymmetricPSD</span><span class="p">(</span><span class="mi">3</span><span class="p">)</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">matrix</span><span class="p">([[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">],[</span><span class="mi">3</span><span class="p">,</span><span class="mi">4</span><span class="p">]])</span> <span class="ow">in</span> <span class="n">K</span>
<span class="gt">Traceback (most recent call last):</span>
<span class="c">...</span>
<span class="gr">TypeError</span>: <span class="n">the given point has the wrong dimensions</span>
</pre></div>
</div>
</dd></dl>

<dl class="method">
<dt id="dunshire.cones.SymmetricPSD.__str__">
<code class="descname">__str__</code><span class="sig-paren">(</span><span class="sig-paren">)</span><a class="reference internal" href="_modules/dunshire/cones.xhtml#SymmetricPSD.__str__"><span class="viewcode-link">[source]</span></a><a class="headerlink" href="#dunshire.cones.SymmetricPSD.__str__" title="Permalink to this definition">¶</a></dt>
<dd><p>Output a human-readable description of myself.</p>
</dd></dl>

</dd></dl>

</div>
<div class="section" id="module-dunshire.games">
<span id="dunshire-games-module"></span><h2>dunshire.games module<a class="headerlink" href="#module-dunshire.games" title="Permalink to this headline">¶</a></h2>
<p>Symmetric linear games and their solutions.</p>
<p>This module contains the main <a class="reference internal" href="#dunshire.games.SymmetricLinearGame" title="dunshire.games.SymmetricLinearGame"><code class="xref py py-class docutils literal"><span class="pre">SymmetricLinearGame</span></code></a> class that
knows how to solve a linear game.</p>
<dl class="class">
<dt id="dunshire.games.Solution">
<em class="property">class </em><code class="descname">Solution</code><span class="sig-paren">(</span><em>game_value</em>, <em>p1_optimal</em>, <em>p2_optimal</em><span class="sig-paren">)</span><a class="reference internal" href="_modules/dunshire/games.xhtml#Solution"><span class="viewcode-link">[source]</span></a><a class="headerlink" href="#dunshire.games.Solution" title="Permalink to this definition">¶</a></dt>
<dd><p>Bases: <code class="xref py py-class docutils literal"><span class="pre">object</span></code></p>
<p>A representation of the solution of a linear game. It should contain
the value of the game, and both players&#8217; strategies.</p>
<p class="rubric">Examples</p>
<div class="highlight-python"><div class="highlight"><pre><span></span><span class="gp">&gt;&gt;&gt; </span><span class="k">print</span><span class="p">(</span><span class="n">Solution</span><span class="p">(</span><span class="mi">10</span><span class="p">,</span> <span class="n">matrix</span><span class="p">([</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">]),</span> <span class="n">matrix</span><span class="p">([</span><span class="mi">3</span><span class="p">,</span><span class="mi">4</span><span class="p">])))</span>
<span class="go">Game value: 10.000...</span>
<span class="go">Player 1 optimal:</span>
<span class="go">  [ 1]</span>
<span class="go">  [ 2]</span>
<span class="go">Player 2 optimal:</span>
<span class="go">  [ 3]</span>
<span class="go">  [ 4]</span>
</pre></div>
</div>
<dl class="method">
<dt id="dunshire.games.Solution.__str__">
<code class="descname">__str__</code><span class="sig-paren">(</span><span class="sig-paren">)</span><a class="reference internal" href="_modules/dunshire/games.xhtml#Solution.__str__"><span class="viewcode-link">[source]</span></a><a class="headerlink" href="#dunshire.games.Solution.__str__" title="Permalink to this definition">¶</a></dt>
<dd><p>Return a string describing the solution of a linear game.</p>
<p>The three data that are described are,</p>
<blockquote>
<div><ul class="simple">
<li>The value of the game.</li>
<li>The optimal strategy of player one.</li>
<li>The optimal strategy of player two.</li>
</ul>
</div></blockquote>
<p>The two optimal strategy vectors are indented by two spaces.</p>
</dd></dl>

<dl class="method">
<dt id="dunshire.games.Solution.game_value">
<code class="descname">game_value</code><span class="sig-paren">(</span><span class="sig-paren">)</span><a class="reference internal" href="_modules/dunshire/games.xhtml#Solution.game_value"><span class="viewcode-link">[source]</span></a><a class="headerlink" href="#dunshire.games.Solution.game_value" title="Permalink to this definition">¶</a></dt>
<dd><p>Return the game value for this solution.</p>
<p class="rubric">Examples</p>
<div class="highlight-python"><div class="highlight"><pre><span></span><span class="gp">&gt;&gt;&gt; </span><span class="n">s</span> <span class="o">=</span> <span class="n">Solution</span><span class="p">(</span><span class="mi">10</span><span class="p">,</span> <span class="n">matrix</span><span class="p">([</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">]),</span> <span class="n">matrix</span><span class="p">([</span><span class="mi">3</span><span class="p">,</span><span class="mi">4</span><span class="p">]))</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">s</span><span class="o">.</span><span class="n">game_value</span><span class="p">()</span>
<span class="go">10</span>
</pre></div>
</div>
</dd></dl>

<dl class="method">
<dt id="dunshire.games.Solution.player1_optimal">
<code class="descname">player1_optimal</code><span class="sig-paren">(</span><span class="sig-paren">)</span><a class="reference internal" href="_modules/dunshire/games.xhtml#Solution.player1_optimal"><span class="viewcode-link">[source]</span></a><a class="headerlink" href="#dunshire.games.Solution.player1_optimal" title="Permalink to this definition">¶</a></dt>
<dd><p>Return player one&#8217;s optimal strategy in this solution.</p>
<p class="rubric">Examples</p>
<div class="highlight-python"><div class="highlight"><pre><span></span><span class="gp">&gt;&gt;&gt; </span><span class="n">s</span> <span class="o">=</span> <span class="n">Solution</span><span class="p">(</span><span class="mi">10</span><span class="p">,</span> <span class="n">matrix</span><span class="p">([</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">]),</span> <span class="n">matrix</span><span class="p">([</span><span class="mi">3</span><span class="p">,</span><span class="mi">4</span><span class="p">]))</span>
<span class="gp">&gt;&gt;&gt; </span><span class="k">print</span><span class="p">(</span><span class="n">s</span><span class="o">.</span><span class="n">player1_optimal</span><span class="p">())</span>
<span class="go">[ 1]</span>
<span class="go">[ 2]</span>
</pre></div>
</div>
</dd></dl>

<dl class="method">
<dt id="dunshire.games.Solution.player2_optimal">
<code class="descname">player2_optimal</code><span class="sig-paren">(</span><span class="sig-paren">)</span><a class="reference internal" href="_modules/dunshire/games.xhtml#Solution.player2_optimal"><span class="viewcode-link">[source]</span></a><a class="headerlink" href="#dunshire.games.Solution.player2_optimal" title="Permalink to this definition">¶</a></dt>
<dd><p>Return player two&#8217;s optimal strategy in this solution.</p>
<p class="rubric">Examples</p>
<div class="highlight-python"><div class="highlight"><pre><span></span><span class="gp">&gt;&gt;&gt; </span><span class="n">s</span> <span class="o">=</span> <span class="n">Solution</span><span class="p">(</span><span class="mi">10</span><span class="p">,</span> <span class="n">matrix</span><span class="p">([</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">]),</span> <span class="n">matrix</span><span class="p">([</span><span class="mi">3</span><span class="p">,</span><span class="mi">4</span><span class="p">]))</span>
<span class="gp">&gt;&gt;&gt; </span><span class="k">print</span><span class="p">(</span><span class="n">s</span><span class="o">.</span><span class="n">player2_optimal</span><span class="p">())</span>
<span class="go">[ 3]</span>
<span class="go">[ 4]</span>
</pre></div>
</div>
</dd></dl>

</dd></dl>

<dl class="class">
<dt id="dunshire.games.SymmetricLinearGame">
<em class="property">class </em><code class="descname">SymmetricLinearGame</code><span class="sig-paren">(</span><em>L</em>, <em>K</em>, <em>e1</em>, <em>e2</em><span class="sig-paren">)</span><a class="reference internal" href="_modules/dunshire/games.xhtml#SymmetricLinearGame"><span class="viewcode-link">[source]</span></a><a class="headerlink" href="#dunshire.games.SymmetricLinearGame" title="Permalink to this definition">¶</a></dt>
<dd><p>Bases: <code class="xref py py-class docutils literal"><span class="pre">object</span></code></p>
<p>A representation of a symmetric linear game.</p>
<p>The data for a symmetric linear game are,</p>
<blockquote>
<div><ul class="simple">
<li>A &#8220;payoff&#8221; operator <code class="docutils literal"><span class="pre">L</span></code>.</li>
<li>A symmetric cone <code class="docutils literal"><span class="pre">K</span></code>.</li>
<li>Two points <code class="docutils literal"><span class="pre">e1</span></code> and <code class="docutils literal"><span class="pre">e2</span></code> in the interior of <code class="docutils literal"><span class="pre">K</span></code>.</li>
</ul>
</div></blockquote>
<p>The ambient space is assumed to be the span of <code class="docutils literal"><span class="pre">K</span></code>.</p>
<p>With those data understood, the game is played as follows. Players
one and two choose points <span class="math">\(x\)</span> and <span class="math">\(y\)</span> respectively, from
their respective strategy sets,</p>
<div class="math">
\[\begin{split}\begin{aligned}
    \Delta_{1}
    &amp;=
    \left\{
      x \in K \ \middle|\ \left\langle x, e_{2} \right\rangle = 1
    \right\}\\
    \Delta_{2}
    &amp;=
    \left\{
      y \in K \ \middle|\ \left\langle y, e_{1} \right\rangle = 1
    \right\}.
\end{aligned}\end{split}\]</div>
<p>Afterwards, a &#8220;payout&#8221; is computed as <span class="math">\(\left\langle
L\left(x\right), y \right\rangle\)</span> and is paid to player one out of
player two&#8217;s pocket. The game is therefore zero sum, and we suppose
that player one would like to guarantee himself the largest minimum
payout possible. That is, player one wishes to,</p>
<div class="math">
\[\begin{split}\begin{aligned}
    \text{maximize }
      &amp;\underset{y \in \Delta_{2}}{\min}\left(
        \left\langle L\left(x\right), y \right\rangle
      \right)\\
    \text{subject to } &amp; x \in \Delta_{1}.
\end{aligned}\end{split}\]</div>
<p>Player two has the simultaneous goal to,</p>
<div class="math">
\[\begin{split}\begin{aligned}
    \text{minimize }
      &amp;\underset{x \in \Delta_{1}}{\max}\left(
        \left\langle L\left(x\right), y \right\rangle
      \right)\\
    \text{subject to } &amp; y \in \Delta_{2}.
\end{aligned}\end{split}\]</div>
<p>These goals obviously conflict (the game is zero sum), but an
existence theorem guarantees at least one optimal min-max solution
from which neither player would like to deviate. This class is
able to find such a solution.</p>
<table class="docutils field-list" frame="void" rules="none">
<col class="field-name" />
<col class="field-body" />
<tbody valign="top">
<tr class="field-odd field"><th class="field-name">Parameters:</th><td class="field-body"><ul class="first simple">
<li><strong>L</strong> (<em>list of list of float</em>) &#8211; A matrix represented as a list of <strong>rows</strong>. This representation
agrees with (for example) <a class="reference external" href="http://www.sagemath.org/">SageMath</a>
and <a class="reference external" href="http://www.numpy.org/">NumPy</a>, but not with CVXOPT (whose
matrix constructor accepts a list of columns). In reality, <code class="docutils literal"><span class="pre">L</span></code>
can be any iterable type of the correct length; however, you
should be extremely wary of the way we interpret anything other
than a list of rows.</li>
<li><strong>K</strong> (<a class="reference internal" href="#dunshire.cones.SymmetricCone" title="dunshire.cones.SymmetricCone"><em>dunshire.cones.SymmetricCone</em></a>) &#8211; The symmetric cone instance over which the game is played.</li>
<li><strong>e1</strong> (<em>iterable float</em>) &#8211; The interior point of <code class="docutils literal"><span class="pre">K</span></code> belonging to player one; it
can be of any iterable type having the correct length.</li>
<li><strong>e2</strong> (<em>iterable float</em>) &#8211; The interior point of <code class="docutils literal"><span class="pre">K</span></code> belonging to player two; it
can be of any enumerable type having the correct length.</li>
</ul>
</td>
</tr>
<tr class="field-even field"><th class="field-name">Raises:</th><td class="field-body"><p class="first last"><code class="xref py py-exc docutils literal"><span class="pre">ValueError</span></code> &#8211;
If either <code class="docutils literal"><span class="pre">e1</span></code> or <code class="docutils literal"><span class="pre">e2</span></code> lie outside of the cone <code class="docutils literal"><span class="pre">K</span></code>.</p>
</td>
</tr>
</tbody>
</table>
<p class="rubric">Examples</p>
<div class="highlight-python"><div class="highlight"><pre><span></span><span class="gp">&gt;&gt;&gt; </span><span class="kn">from</span> <span class="nn">dunshire</span> <span class="kn">import</span> <span class="o">*</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">K</span> <span class="o">=</span> <span class="n">NonnegativeOrthant</span><span class="p">(</span><span class="mi">3</span><span class="p">)</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">L</span> <span class="o">=</span> <span class="p">[[</span><span class="mi">1</span><span class="p">,</span><span class="o">-</span><span class="mi">5</span><span class="p">,</span><span class="o">-</span><span class="mi">15</span><span class="p">],[</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="o">-</span><span class="mi">3</span><span class="p">],[</span><span class="o">-</span><span class="mi">12</span><span class="p">,</span><span class="o">-</span><span class="mi">15</span><span class="p">,</span><span class="mi">1</span><span class="p">]]</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">e1</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">]</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">e2</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">]</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">SLG</span> <span class="o">=</span> <span class="n">SymmetricLinearGame</span><span class="p">(</span><span class="n">L</span><span class="p">,</span> <span class="n">K</span><span class="p">,</span> <span class="n">e1</span><span class="p">,</span> <span class="n">e2</span><span class="p">)</span>
<span class="gp">&gt;&gt;&gt; </span><span class="k">print</span><span class="p">(</span><span class="n">SLG</span><span class="p">)</span>
<span class="go">The linear game (L, K, e1, e2) where</span>
<span class="go">  L = [  1  -5 -15]</span>
<span class="go">      [ -1   2  -3]</span>
<span class="go">      [-12 -15   1],</span>
<span class="go">  K = Nonnegative orthant in the real 3-space,</span>
<span class="go">  e1 = [ 1]</span>
<span class="go">       [ 1]</span>
<span class="go">       [ 1],</span>
<span class="go">  e2 = [ 1]</span>
<span class="go">       [ 2]</span>
<span class="go">       [ 3]</span>
</pre></div>
</div>
<p>Lists can (and probably should) be used for every argument:</p>
<div class="highlight-python"><div class="highlight"><pre><span></span><span class="gp">&gt;&gt;&gt; </span><span class="kn">from</span> <span class="nn">dunshire</span> <span class="kn">import</span> <span class="o">*</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">K</span> <span class="o">=</span> <span class="n">NonnegativeOrthant</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">L</span> <span class="o">=</span> <span class="p">[[</span><span class="mi">1</span><span class="p">,</span><span class="mi">0</span><span class="p">],[</span><span class="mi">0</span><span class="p">,</span><span class="mi">1</span><span class="p">]]</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">e1</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">]</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">e2</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">]</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">G</span> <span class="o">=</span> <span class="n">SymmetricLinearGame</span><span class="p">(</span><span class="n">L</span><span class="p">,</span> <span class="n">K</span><span class="p">,</span> <span class="n">e1</span><span class="p">,</span> <span class="n">e2</span><span class="p">)</span>
<span class="gp">&gt;&gt;&gt; </span><span class="k">print</span><span class="p">(</span><span class="n">G</span><span class="p">)</span>
<span class="go">The linear game (L, K, e1, e2) where</span>
<span class="go">  L = [ 1  0]</span>
<span class="go">      [ 0  1],</span>
<span class="go">  K = Nonnegative orthant in the real 2-space,</span>
<span class="go">  e1 = [ 1]</span>
<span class="go">       [ 1],</span>
<span class="go">  e2 = [ 1]</span>
<span class="go">       [ 1]</span>
</pre></div>
</div>
<p>The points <code class="docutils literal"><span class="pre">e1</span></code> and <code class="docutils literal"><span class="pre">e2</span></code> can also be passed as some other
enumerable type (of the correct length) without much harm, since
there is no row/column ambiguity:</p>
<div class="highlight-python"><div class="highlight"><pre><span></span><span class="gp">&gt;&gt;&gt; </span><span class="kn">import</span> <span class="nn">cvxopt</span>
<span class="gp">&gt;&gt;&gt; </span><span class="kn">import</span> <span class="nn">numpy</span>
<span class="gp">&gt;&gt;&gt; </span><span class="kn">from</span> <span class="nn">dunshire</span> <span class="kn">import</span> <span class="o">*</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">K</span> <span class="o">=</span> <span class="n">NonnegativeOrthant</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">L</span> <span class="o">=</span> <span class="p">[[</span><span class="mi">1</span><span class="p">,</span><span class="mi">0</span><span class="p">],[</span><span class="mi">0</span><span class="p">,</span><span class="mi">1</span><span class="p">]]</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">e1</span> <span class="o">=</span> <span class="n">cvxopt</span><span class="o">.</span><span class="n">matrix</span><span class="p">([</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">])</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">e2</span> <span class="o">=</span> <span class="n">numpy</span><span class="o">.</span><span class="n">matrix</span><span class="p">([</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">])</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">G</span> <span class="o">=</span> <span class="n">SymmetricLinearGame</span><span class="p">(</span><span class="n">L</span><span class="p">,</span> <span class="n">K</span><span class="p">,</span> <span class="n">e1</span><span class="p">,</span> <span class="n">e2</span><span class="p">)</span>
<span class="gp">&gt;&gt;&gt; </span><span class="k">print</span><span class="p">(</span><span class="n">G</span><span class="p">)</span>
<span class="go">The linear game (L, K, e1, e2) where</span>
<span class="go">  L = [ 1  0]</span>
<span class="go">      [ 0  1],</span>
<span class="go">  K = Nonnegative orthant in the real 2-space,</span>
<span class="go">  e1 = [ 1]</span>
<span class="go">       [ 1],</span>
<span class="go">  e2 = [ 1]</span>
<span class="go">       [ 1]</span>
</pre></div>
</div>
<p>However, <code class="docutils literal"><span class="pre">L</span></code> will always be intepreted as a list of rows, even
if it is passed as a <code class="xref py py-class docutils literal"><span class="pre">cvxopt.base.matrix</span></code> which is
otherwise indexed by columns:</p>
<div class="highlight-python"><div class="highlight"><pre><span></span><span class="gp">&gt;&gt;&gt; </span><span class="kn">import</span> <span class="nn">cvxopt</span>
<span class="gp">&gt;&gt;&gt; </span><span class="kn">from</span> <span class="nn">dunshire</span> <span class="kn">import</span> <span class="o">*</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">K</span> <span class="o">=</span> <span class="n">NonnegativeOrthant</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">L</span> <span class="o">=</span> <span class="p">[[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">],[</span><span class="mi">3</span><span class="p">,</span><span class="mi">4</span><span class="p">]]</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">e1</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">]</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">e2</span> <span class="o">=</span> <span class="n">e1</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">G</span> <span class="o">=</span> <span class="n">SymmetricLinearGame</span><span class="p">(</span><span class="n">L</span><span class="p">,</span> <span class="n">K</span><span class="p">,</span> <span class="n">e1</span><span class="p">,</span> <span class="n">e2</span><span class="p">)</span>
<span class="gp">&gt;&gt;&gt; </span><span class="k">print</span><span class="p">(</span><span class="n">G</span><span class="p">)</span>
<span class="go">The linear game (L, K, e1, e2) where</span>
<span class="go">  L = [ 1  2]</span>
<span class="go">      [ 3  4],</span>
<span class="go">  K = Nonnegative orthant in the real 2-space,</span>
<span class="go">  e1 = [ 1]</span>
<span class="go">       [ 1],</span>
<span class="go">  e2 = [ 1]</span>
<span class="go">       [ 1]</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">L</span> <span class="o">=</span> <span class="n">cvxopt</span><span class="o">.</span><span class="n">matrix</span><span class="p">(</span><span class="n">L</span><span class="p">)</span>
<span class="gp">&gt;&gt;&gt; </span><span class="k">print</span><span class="p">(</span><span class="n">L</span><span class="p">)</span>
<span class="go">[ 1  3]</span>
<span class="go">[ 2  4]</span>

<span class="gp">&gt;&gt;&gt; </span><span class="n">G</span> <span class="o">=</span> <span class="n">SymmetricLinearGame</span><span class="p">(</span><span class="n">L</span><span class="p">,</span> <span class="n">K</span><span class="p">,</span> <span class="n">e1</span><span class="p">,</span> <span class="n">e2</span><span class="p">)</span>
<span class="gp">&gt;&gt;&gt; </span><span class="k">print</span><span class="p">(</span><span class="n">G</span><span class="p">)</span>
<span class="go">The linear game (L, K, e1, e2) where</span>
<span class="go">  L = [ 1  2]</span>
<span class="go">      [ 3  4],</span>
<span class="go">  K = Nonnegative orthant in the real 2-space,</span>
<span class="go">  e1 = [ 1]</span>
<span class="go">       [ 1],</span>
<span class="go">  e2 = [ 1]</span>
<span class="go">       [ 1]</span>
</pre></div>
</div>
<dl class="method">
<dt id="dunshire.games.SymmetricLinearGame.A">
<code class="descname">A</code><span class="sig-paren">(</span><span class="sig-paren">)</span><a class="reference internal" href="_modules/dunshire/games.xhtml#SymmetricLinearGame.A"><span class="viewcode-link">[source]</span></a><a class="headerlink" href="#dunshire.games.SymmetricLinearGame.A" title="Permalink to this definition">¶</a></dt>
<dd><p>Return the matrix <code class="docutils literal"><span class="pre">A</span></code> used in our CVXOPT construction.</p>
<p>This matrix <span class="math">\(A\)</span> appears on the right-hand side of
<span class="math">\(Ax = b\)</span> in the <a class="reference external" href="http://cvxopt.org/userguide/coneprog.html#linear-cone-programs">statement of the CVXOPT conelp program</a>.</p>
<div class="admonition warning">
<p class="first admonition-title">Warning</p>
<p class="last">It is not safe to cache any of the matrices passed to
CVXOPT, because it can clobber them.</p>
</div>
<table class="docutils field-list" frame="void" rules="none">
<col class="field-name" />
<col class="field-body" />
<tbody valign="top">
<tr class="field-odd field"><th class="field-name">Returns:</th><td class="field-body">A <code class="docutils literal"><span class="pre">1</span></code>-by-<code class="docutils literal"><span class="pre">(1</span> <span class="pre">+</span> <span class="pre">self.dimension())</span></code> row vector. Its first
entry is zero, and the rest are the entries of <a class="reference internal" href="#dunshire.games.SymmetricLinearGame.e2" title="dunshire.games.SymmetricLinearGame.e2"><code class="xref py py-meth docutils literal"><span class="pre">e2()</span></code></a>.</td>
</tr>
<tr class="field-even field"><th class="field-name">Return type:</th><td class="field-body">matrix</td>
</tr>
</tbody>
</table>
<p class="rubric">Examples</p>
<div class="highlight-python"><div class="highlight"><pre><span></span><span class="gp">&gt;&gt;&gt; </span><span class="kn">from</span> <span class="nn">dunshire</span> <span class="kn">import</span> <span class="o">*</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">K</span> <span class="o">=</span> <span class="n">NonnegativeOrthant</span><span class="p">(</span><span class="mi">3</span><span class="p">)</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">L</span> <span class="o">=</span> <span class="p">[[</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">],[</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">],[</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">]]</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">e1</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">]</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">e2</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">]</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">SLG</span> <span class="o">=</span> <span class="n">SymmetricLinearGame</span><span class="p">(</span><span class="n">L</span><span class="p">,</span> <span class="n">K</span><span class="p">,</span> <span class="n">e1</span><span class="p">,</span> <span class="n">e2</span><span class="p">)</span>
<span class="gp">&gt;&gt;&gt; </span><span class="k">print</span><span class="p">(</span><span class="n">SLG</span><span class="o">.</span><span class="n">A</span><span class="p">())</span>
<span class="go">[0.0000000 1.0000000 2.0000000 3.0000000]</span>
</pre></div>
</div>
</dd></dl>

<dl class="method">
<dt id="dunshire.games.SymmetricLinearGame.C">
<code class="descname">C</code><span class="sig-paren">(</span><span class="sig-paren">)</span><a class="reference internal" href="_modules/dunshire/games.xhtml#SymmetricLinearGame.C"><span class="viewcode-link">[source]</span></a><a class="headerlink" href="#dunshire.games.SymmetricLinearGame.C" title="Permalink to this definition">¶</a></dt>
<dd><p>Return the cone <code class="docutils literal"><span class="pre">C</span></code> used in our CVXOPT construction.</p>
<p>This is the cone over which the <a class="reference external" href="http://cvxopt.org/userguide/coneprog.html#linear-cone-programs">CVXOPT conelp program</a>
takes place.</p>
<table class="docutils field-list" frame="void" rules="none">
<col class="field-name" />
<col class="field-body" />
<tbody valign="top">
<tr class="field-odd field"><th class="field-name">Returns:</th><td class="field-body">The cartesian product of <code class="docutils literal"><span class="pre">K</span></code> with itself.</td>
</tr>
<tr class="field-even field"><th class="field-name">Return type:</th><td class="field-body"><a class="reference internal" href="#dunshire.cones.CartesianProduct" title="dunshire.cones.CartesianProduct">CartesianProduct</a></td>
</tr>
</tbody>
</table>
<p class="rubric">Examples</p>
<div class="highlight-python"><div class="highlight"><pre><span></span><span class="gp">&gt;&gt;&gt; </span><span class="kn">from</span> <span class="nn">dunshire</span> <span class="kn">import</span> <span class="o">*</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">K</span> <span class="o">=</span> <span class="n">NonnegativeOrthant</span><span class="p">(</span><span class="mi">3</span><span class="p">)</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">L</span> <span class="o">=</span> <span class="p">[[</span><span class="mi">4</span><span class="p">,</span><span class="mi">5</span><span class="p">,</span><span class="mi">6</span><span class="p">],[</span><span class="mi">7</span><span class="p">,</span><span class="mi">8</span><span class="p">,</span><span class="mi">9</span><span class="p">],[</span><span class="mi">10</span><span class="p">,</span><span class="mi">11</span><span class="p">,</span><span class="mi">12</span><span class="p">]]</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">e1</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">]</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">e2</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">]</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">SLG</span> <span class="o">=</span> <span class="n">SymmetricLinearGame</span><span class="p">(</span><span class="n">L</span><span class="p">,</span> <span class="n">K</span><span class="p">,</span> <span class="n">e1</span><span class="p">,</span> <span class="n">e2</span><span class="p">)</span>
<span class="gp">&gt;&gt;&gt; </span><span class="k">print</span><span class="p">(</span><span class="n">SLG</span><span class="o">.</span><span class="n">C</span><span class="p">())</span>
<span class="go">Cartesian product of dimension 6 with 2 factors:</span>
<span class="go">  * Nonnegative orthant in the real 3-space</span>
<span class="go">  * Nonnegative orthant in the real 3-space</span>
</pre></div>
</div>
</dd></dl>

<dl class="method">
<dt id="dunshire.games.SymmetricLinearGame.G">
<code class="descname">G</code><span class="sig-paren">(</span><span class="sig-paren">)</span><a class="reference internal" href="_modules/dunshire/games.xhtml#SymmetricLinearGame.G"><span class="viewcode-link">[source]</span></a><a class="headerlink" href="#dunshire.games.SymmetricLinearGame.G" title="Permalink to this definition">¶</a></dt>
<dd><p>Return the matrix <code class="docutils literal"><span class="pre">G</span></code> used in our CVXOPT construction.</p>
<p>Thus matrix <span class="math">\(G\)</span> appears on the left-hand side of <span class="math">\(Gx
+ s = h\)</span> in the <a class="reference external" href="http://cvxopt.org/userguide/coneprog.html#linear-cone-programs">statement of the CVXOPT conelp program</a>.</p>
<div class="admonition warning">
<p class="first admonition-title">Warning</p>
<p class="last">It is not safe to cache any of the matrices passed to
CVXOPT, because it can clobber them.</p>
</div>
<table class="docutils field-list" frame="void" rules="none">
<col class="field-name" />
<col class="field-body" />
<tbody valign="top">
<tr class="field-odd field"><th class="field-name">Returns:</th><td class="field-body">A <code class="docutils literal"><span class="pre">2*self.dimension()</span></code>-by-<code class="docutils literal"><span class="pre">(1</span> <span class="pre">+</span> <span class="pre">self.dimension())</span></code> matrix.</td>
</tr>
<tr class="field-even field"><th class="field-name">Return type:</th><td class="field-body">matrix</td>
</tr>
</tbody>
</table>
<p class="rubric">Examples</p>
<div class="highlight-python"><div class="highlight"><pre><span></span><span class="gp">&gt;&gt;&gt; </span><span class="kn">from</span> <span class="nn">dunshire</span> <span class="kn">import</span> <span class="o">*</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">K</span> <span class="o">=</span> <span class="n">NonnegativeOrthant</span><span class="p">(</span><span class="mi">3</span><span class="p">)</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">L</span> <span class="o">=</span> <span class="p">[[</span><span class="mi">4</span><span class="p">,</span><span class="mi">5</span><span class="p">,</span><span class="mi">6</span><span class="p">],[</span><span class="mi">7</span><span class="p">,</span><span class="mi">8</span><span class="p">,</span><span class="mi">9</span><span class="p">],[</span><span class="mi">10</span><span class="p">,</span><span class="mi">11</span><span class="p">,</span><span class="mi">12</span><span class="p">]]</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">e1</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">]</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">e2</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">]</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">SLG</span> <span class="o">=</span> <span class="n">SymmetricLinearGame</span><span class="p">(</span><span class="n">L</span><span class="p">,</span> <span class="n">K</span><span class="p">,</span> <span class="n">e1</span><span class="p">,</span> <span class="n">e2</span><span class="p">)</span>
<span class="gp">&gt;&gt;&gt; </span><span class="k">print</span><span class="p">(</span><span class="n">SLG</span><span class="o">.</span><span class="n">G</span><span class="p">())</span>
<span class="go">[  0.0000000  -1.0000000   0.0000000   0.0000000]</span>
<span class="go">[  0.0000000   0.0000000  -1.0000000   0.0000000]</span>
<span class="go">[  0.0000000   0.0000000   0.0000000  -1.0000000]</span>
<span class="go">[  1.0000000  -4.0000000  -5.0000000  -6.0000000]</span>
<span class="go">[  2.0000000  -7.0000000  -8.0000000  -9.0000000]</span>
<span class="go">[  3.0000000 -10.0000000 -11.0000000 -12.0000000]</span>
</pre></div>
</div>
</dd></dl>

<dl class="method">
<dt id="dunshire.games.SymmetricLinearGame.K">
<code class="descname">K</code><span class="sig-paren">(</span><span class="sig-paren">)</span><a class="reference internal" href="_modules/dunshire/games.xhtml#SymmetricLinearGame.K"><span class="viewcode-link">[source]</span></a><a class="headerlink" href="#dunshire.games.SymmetricLinearGame.K" title="Permalink to this definition">¶</a></dt>
<dd><p>Return the cone over which this game is played.</p>
<table class="docutils field-list" frame="void" rules="none">
<col class="field-name" />
<col class="field-body" />
<tbody valign="top">
<tr class="field-odd field"><th class="field-name">Returns:</th><td class="field-body">The <code class="xref py py-class docutils literal"><span class="pre">SymmetricCone</span></code> over which this game is played.</td>
</tr>
<tr class="field-even field"><th class="field-name">Return type:</th><td class="field-body"><a class="reference internal" href="#dunshire.cones.SymmetricCone" title="dunshire.cones.SymmetricCone">SymmetricCone</a></td>
</tr>
</tbody>
</table>
<p class="rubric">Examples</p>
<div class="highlight-python"><div class="highlight"><pre><span></span><span class="gp">&gt;&gt;&gt; </span><span class="kn">from</span> <span class="nn">dunshire</span> <span class="kn">import</span> <span class="o">*</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">K</span> <span class="o">=</span> <span class="n">NonnegativeOrthant</span><span class="p">(</span><span class="mi">3</span><span class="p">)</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">L</span> <span class="o">=</span> <span class="p">[[</span><span class="mi">1</span><span class="p">,</span><span class="o">-</span><span class="mi">5</span><span class="p">,</span><span class="o">-</span><span class="mi">15</span><span class="p">],[</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="o">-</span><span class="mi">3</span><span class="p">],[</span><span class="o">-</span><span class="mi">12</span><span class="p">,</span><span class="o">-</span><span class="mi">15</span><span class="p">,</span><span class="mi">1</span><span class="p">]]</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">e1</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">]</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">e2</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">]</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">SLG</span> <span class="o">=</span> <span class="n">SymmetricLinearGame</span><span class="p">(</span><span class="n">L</span><span class="p">,</span> <span class="n">K</span><span class="p">,</span> <span class="n">e1</span><span class="p">,</span> <span class="n">e2</span><span class="p">)</span>
<span class="gp">&gt;&gt;&gt; </span><span class="k">print</span><span class="p">(</span><span class="n">SLG</span><span class="o">.</span><span class="n">K</span><span class="p">())</span>
<span class="go">Nonnegative orthant in the real 3-space</span>
</pre></div>
</div>
</dd></dl>

<dl class="method">
<dt id="dunshire.games.SymmetricLinearGame.L">
<code class="descname">L</code><span class="sig-paren">(</span><span class="sig-paren">)</span><a class="reference internal" href="_modules/dunshire/games.xhtml#SymmetricLinearGame.L"><span class="viewcode-link">[source]</span></a><a class="headerlink" href="#dunshire.games.SymmetricLinearGame.L" title="Permalink to this definition">¶</a></dt>
<dd><p>Return the matrix <code class="docutils literal"><span class="pre">L</span></code> passed to the constructor.</p>
<table class="docutils field-list" frame="void" rules="none">
<col class="field-name" />
<col class="field-body" />
<tbody valign="top">
<tr class="field-odd field"><th class="field-name">Returns:</th><td class="field-body">The matrix that defines this game&#8217;s <a class="reference internal" href="#dunshire.games.SymmetricLinearGame.payoff" title="dunshire.games.SymmetricLinearGame.payoff"><code class="xref py py-meth docutils literal"><span class="pre">payoff()</span></code></a> operator.</td>
</tr>
<tr class="field-even field"><th class="field-name">Return type:</th><td class="field-body">matrix</td>
</tr>
</tbody>
</table>
<p class="rubric">Examples</p>
<div class="highlight-python"><div class="highlight"><pre><span></span><span class="gp">&gt;&gt;&gt; </span><span class="kn">from</span> <span class="nn">dunshire</span> <span class="kn">import</span> <span class="o">*</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">K</span> <span class="o">=</span> <span class="n">NonnegativeOrthant</span><span class="p">(</span><span class="mi">3</span><span class="p">)</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">L</span> <span class="o">=</span> <span class="p">[[</span><span class="mi">1</span><span class="p">,</span><span class="o">-</span><span class="mi">5</span><span class="p">,</span><span class="o">-</span><span class="mi">15</span><span class="p">],[</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="o">-</span><span class="mi">3</span><span class="p">],[</span><span class="o">-</span><span class="mi">12</span><span class="p">,</span><span class="o">-</span><span class="mi">15</span><span class="p">,</span><span class="mi">1</span><span class="p">]]</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">e1</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">]</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">e2</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">]</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">SLG</span> <span class="o">=</span> <span class="n">SymmetricLinearGame</span><span class="p">(</span><span class="n">L</span><span class="p">,</span> <span class="n">K</span><span class="p">,</span> <span class="n">e1</span><span class="p">,</span> <span class="n">e2</span><span class="p">)</span>
<span class="gp">&gt;&gt;&gt; </span><span class="k">print</span><span class="p">(</span><span class="n">SLG</span><span class="o">.</span><span class="n">L</span><span class="p">())</span>
<span class="go">[  1  -5 -15]</span>
<span class="go">[ -1   2  -3]</span>
<span class="go">[-12 -15   1]</span>
</pre></div>
</div>
</dd></dl>

<dl class="method">
<dt id="dunshire.games.SymmetricLinearGame.__str__">
<code class="descname">__str__</code><span class="sig-paren">(</span><span class="sig-paren">)</span><a class="reference internal" href="_modules/dunshire/games.xhtml#SymmetricLinearGame.__str__"><span class="viewcode-link">[source]</span></a><a class="headerlink" href="#dunshire.games.SymmetricLinearGame.__str__" title="Permalink to this definition">¶</a></dt>
<dd><p>Return a string representation of this game.</p>
</dd></dl>

<dl class="staticmethod">
<dt id="dunshire.games.SymmetricLinearGame.b">
<em class="property">static </em><code class="descname">b</code><span class="sig-paren">(</span><span class="sig-paren">)</span><a class="reference internal" href="_modules/dunshire/games.xhtml#SymmetricLinearGame.b"><span class="viewcode-link">[source]</span></a><a class="headerlink" href="#dunshire.games.SymmetricLinearGame.b" title="Permalink to this definition">¶</a></dt>
<dd><p>Return the <code class="docutils literal"><span class="pre">b</span></code> vector used in our CVXOPT construction.</p>
<p>The vector <span class="math">\(b\)</span> appears on the right-hand side of <span class="math">\(Ax
= b\)</span> in the <a class="reference external" href="http://cvxopt.org/userguide/coneprog.html#linear-cone-programs">statement of the CVXOPT conelp program</a>.</p>
<p>This method is static because the dimensions and entries of
<code class="docutils literal"><span class="pre">b</span></code> are known beforehand, and don&#8217;t depend on any other
properties of the game.</p>
<div class="admonition warning">
<p class="first admonition-title">Warning</p>
<p class="last">It is not safe to cache any of the matrices passed to
CVXOPT, because it can clobber them.</p>
</div>
<table class="docutils field-list" frame="void" rules="none">
<col class="field-name" />
<col class="field-body" />
<tbody valign="top">
<tr class="field-odd field"><th class="field-name">Returns:</th><td class="field-body">A <code class="docutils literal"><span class="pre">1</span></code>-by-<code class="docutils literal"><span class="pre">1</span></code> matrix containing a single entry <code class="docutils literal"><span class="pre">1</span></code>.</td>
</tr>
<tr class="field-even field"><th class="field-name">Return type:</th><td class="field-body">matrix</td>
</tr>
</tbody>
</table>
<p class="rubric">Examples</p>
<div class="highlight-python"><div class="highlight"><pre><span></span><span class="gp">&gt;&gt;&gt; </span><span class="kn">from</span> <span class="nn">dunshire</span> <span class="kn">import</span> <span class="o">*</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">K</span> <span class="o">=</span> <span class="n">NonnegativeOrthant</span><span class="p">(</span><span class="mi">3</span><span class="p">)</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">L</span> <span class="o">=</span> <span class="p">[[</span><span class="mi">4</span><span class="p">,</span><span class="mi">5</span><span class="p">,</span><span class="mi">6</span><span class="p">],[</span><span class="mi">7</span><span class="p">,</span><span class="mi">8</span><span class="p">,</span><span class="mi">9</span><span class="p">],[</span><span class="mi">10</span><span class="p">,</span><span class="mi">11</span><span class="p">,</span><span class="mi">12</span><span class="p">]]</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">e1</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">]</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">e2</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">]</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">SLG</span> <span class="o">=</span> <span class="n">SymmetricLinearGame</span><span class="p">(</span><span class="n">L</span><span class="p">,</span> <span class="n">K</span><span class="p">,</span> <span class="n">e1</span><span class="p">,</span> <span class="n">e2</span><span class="p">)</span>
<span class="gp">&gt;&gt;&gt; </span><span class="k">print</span><span class="p">(</span><span class="n">SLG</span><span class="o">.</span><span class="n">b</span><span class="p">())</span>
<span class="go">[1.0000000]</span>
</pre></div>
</div>
</dd></dl>

<dl class="method">
<dt id="dunshire.games.SymmetricLinearGame.c">
<code class="descname">c</code><span class="sig-paren">(</span><span class="sig-paren">)</span><a class="reference internal" href="_modules/dunshire/games.xhtml#SymmetricLinearGame.c"><span class="viewcode-link">[source]</span></a><a class="headerlink" href="#dunshire.games.SymmetricLinearGame.c" title="Permalink to this definition">¶</a></dt>
<dd><p>Return the vector <code class="docutils literal"><span class="pre">c</span></code> used in our CVXOPT construction.</p>
<p>The column vector <span class="math">\(c\)</span> appears in the objective function
value <span class="math">\(\left\langle c,x \right\rangle\)</span> in the <a class="reference external" href="http://cvxopt.org/userguide/coneprog.html#linear-cone-programs">statement
of the CVXOPT conelp program</a>.</p>
<div class="admonition warning">
<p class="first admonition-title">Warning</p>
<p class="last">It is not safe to cache any of the matrices passed to
CVXOPT, because it can clobber them.</p>
</div>
<table class="docutils field-list" frame="void" rules="none">
<col class="field-name" />
<col class="field-body" />
<tbody valign="top">
<tr class="field-odd field"><th class="field-name">Returns:</th><td class="field-body">A <a class="reference internal" href="#dunshire.games.SymmetricLinearGame.dimension" title="dunshire.games.SymmetricLinearGame.dimension"><code class="xref py py-meth docutils literal"><span class="pre">dimension()</span></code></a>-by-<code class="docutils literal"><span class="pre">1</span></code> column vector.</td>
</tr>
<tr class="field-even field"><th class="field-name">Return type:</th><td class="field-body">matrix</td>
</tr>
</tbody>
</table>
<p class="rubric">Examples</p>
<div class="highlight-python"><div class="highlight"><pre><span></span><span class="gp">&gt;&gt;&gt; </span><span class="kn">from</span> <span class="nn">dunshire</span> <span class="kn">import</span> <span class="o">*</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">K</span> <span class="o">=</span> <span class="n">NonnegativeOrthant</span><span class="p">(</span><span class="mi">3</span><span class="p">)</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">L</span> <span class="o">=</span> <span class="p">[[</span><span class="mi">4</span><span class="p">,</span><span class="mi">5</span><span class="p">,</span><span class="mi">6</span><span class="p">],[</span><span class="mi">7</span><span class="p">,</span><span class="mi">8</span><span class="p">,</span><span class="mi">9</span><span class="p">],[</span><span class="mi">10</span><span class="p">,</span><span class="mi">11</span><span class="p">,</span><span class="mi">12</span><span class="p">]]</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">e1</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">]</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">e2</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">]</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">SLG</span> <span class="o">=</span> <span class="n">SymmetricLinearGame</span><span class="p">(</span><span class="n">L</span><span class="p">,</span> <span class="n">K</span><span class="p">,</span> <span class="n">e1</span><span class="p">,</span> <span class="n">e2</span><span class="p">)</span>
<span class="gp">&gt;&gt;&gt; </span><span class="k">print</span><span class="p">(</span><span class="n">SLG</span><span class="o">.</span><span class="n">c</span><span class="p">())</span>
<span class="go">[-1.0000000]</span>
<span class="go">[ 0.0000000]</span>
<span class="go">[ 0.0000000]</span>
<span class="go">[ 0.0000000]</span>
</pre></div>
</div>
</dd></dl>

<dl class="method">
<dt id="dunshire.games.SymmetricLinearGame.condition">
<code class="descname">condition</code><span class="sig-paren">(</span><span class="sig-paren">)</span><a class="reference internal" href="_modules/dunshire/games.xhtml#SymmetricLinearGame.condition"><span class="viewcode-link">[source]</span></a><a class="headerlink" href="#dunshire.games.SymmetricLinearGame.condition" title="Permalink to this definition">¶</a></dt>
<dd><p>Return the condition number of this game.</p>
<p>In the CVXOPT construction of this game, two matrices <code class="docutils literal"><span class="pre">G</span></code> and
<code class="docutils literal"><span class="pre">A</span></code> appear. When those matrices are nasty, numerical problems
can show up. We define the condition number of this game to be
the average of the condition numbers of <code class="docutils literal"><span class="pre">G</span></code> and <code class="docutils literal"><span class="pre">A</span></code> in the
CVXOPT construction. If the condition number of this game is
high, you can problems like <code class="xref py py-class docutils literal"><span class="pre">PoorScalingException</span></code>.</p>
<p>Random testing shows that a condition number of around <code class="docutils literal"><span class="pre">125</span></code>
is about the best that we can solve reliably. However, the
failures are intermittent, and you may get lucky with an
ill-conditioned game.</p>
<table class="docutils field-list" frame="void" rules="none">
<col class="field-name" />
<col class="field-body" />
<tbody valign="top">
<tr class="field-odd field"><th class="field-name">Returns:</th><td class="field-body">A real number greater than or equal to one that measures how
bad this game is numerically.</td>
</tr>
<tr class="field-even field"><th class="field-name">Return type:</th><td class="field-body">float</td>
</tr>
</tbody>
</table>
<p class="rubric">Examples</p>
<div class="highlight-python"><div class="highlight"><pre><span></span><span class="gp">&gt;&gt;&gt; </span><span class="kn">from</span> <span class="nn">dunshire</span> <span class="kn">import</span> <span class="o">*</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">K</span> <span class="o">=</span> <span class="n">NonnegativeOrthant</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">L</span> <span class="o">=</span> <span class="p">[[</span><span class="mi">1</span><span class="p">]]</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">e1</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">]</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">e2</span> <span class="o">=</span> <span class="n">e1</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">SLG</span> <span class="o">=</span> <span class="n">SymmetricLinearGame</span><span class="p">(</span><span class="n">L</span><span class="p">,</span> <span class="n">K</span><span class="p">,</span> <span class="n">e1</span><span class="p">,</span> <span class="n">e2</span><span class="p">)</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">SLG</span><span class="o">.</span><span class="n">condition</span><span class="p">()</span>
<span class="go">1.809...</span>
</pre></div>
</div>
</dd></dl>

<dl class="method">
<dt id="dunshire.games.SymmetricLinearGame.dimension">
<code class="descname">dimension</code><span class="sig-paren">(</span><span class="sig-paren">)</span><a class="reference internal" href="_modules/dunshire/games.xhtml#SymmetricLinearGame.dimension"><span class="viewcode-link">[source]</span></a><a class="headerlink" href="#dunshire.games.SymmetricLinearGame.dimension" title="Permalink to this definition">¶</a></dt>
<dd><p>Return the dimension of this game.</p>
<p>The dimension of a game is not needed for the theory, but it is
useful for the implementation. We define the dimension of a game
to be the dimension of its underlying cone. Or what is the same,
the dimension of the space from which the strategies are chosen.</p>
<table class="docutils field-list" frame="void" rules="none">
<col class="field-name" />
<col class="field-body" />
<tbody valign="top">
<tr class="field-odd field"><th class="field-name">Returns:</th><td class="field-body">The dimension of the cone <a class="reference internal" href="#dunshire.games.SymmetricLinearGame.K" title="dunshire.games.SymmetricLinearGame.K"><code class="xref py py-meth docutils literal"><span class="pre">K()</span></code></a>, or of the space where
this game is played.</td>
</tr>
<tr class="field-even field"><th class="field-name">Return type:</th><td class="field-body">int</td>
</tr>
</tbody>
</table>
<p class="rubric">Examples</p>
<p>The dimension of a game over the nonnegative quadrant in the
plane should be two (the dimension of the plane):</p>
<div class="highlight-python"><div class="highlight"><pre><span></span><span class="gp">&gt;&gt;&gt; </span><span class="kn">from</span> <span class="nn">dunshire</span> <span class="kn">import</span> <span class="o">*</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">K</span> <span class="o">=</span> <span class="n">NonnegativeOrthant</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">L</span> <span class="o">=</span> <span class="p">[[</span><span class="mi">1</span><span class="p">,</span><span class="o">-</span><span class="mi">5</span><span class="p">],[</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">]]</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">e1</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">]</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">e2</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">4</span><span class="p">]</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">SLG</span> <span class="o">=</span> <span class="n">SymmetricLinearGame</span><span class="p">(</span><span class="n">L</span><span class="p">,</span> <span class="n">K</span><span class="p">,</span> <span class="n">e1</span><span class="p">,</span> <span class="n">e2</span><span class="p">)</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">SLG</span><span class="o">.</span><span class="n">dimension</span><span class="p">()</span>
<span class="go">2</span>
</pre></div>
</div>
</dd></dl>

<dl class="method">
<dt id="dunshire.games.SymmetricLinearGame.dual">
<code class="descname">dual</code><span class="sig-paren">(</span><span class="sig-paren">)</span><a class="reference internal" href="_modules/dunshire/games.xhtml#SymmetricLinearGame.dual"><span class="viewcode-link">[source]</span></a><a class="headerlink" href="#dunshire.games.SymmetricLinearGame.dual" title="Permalink to this definition">¶</a></dt>
<dd><p>Return the dual game to this game.</p>
<p>If <span class="math">\(G = \left(L,K,e_{1},e_{2}\right)\)</span> is a linear game,
then its dual is <span class="math">\(G^{*} =
\left(L^{*},K^{*},e_{2},e_{1}\right)\)</span>. However, since this cone
is symmetric, <span class="math">\(K^{*} = K\)</span>.</p>
<p class="rubric">Examples</p>
<div class="highlight-python"><div class="highlight"><pre><span></span><span class="gp">&gt;&gt;&gt; </span><span class="kn">from</span> <span class="nn">dunshire</span> <span class="kn">import</span> <span class="o">*</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">K</span> <span class="o">=</span> <span class="n">NonnegativeOrthant</span><span class="p">(</span><span class="mi">3</span><span class="p">)</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">L</span> <span class="o">=</span> <span class="p">[[</span><span class="mi">1</span><span class="p">,</span><span class="o">-</span><span class="mi">5</span><span class="p">,</span><span class="o">-</span><span class="mi">15</span><span class="p">],[</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="o">-</span><span class="mi">3</span><span class="p">],[</span><span class="o">-</span><span class="mi">12</span><span class="p">,</span><span class="o">-</span><span class="mi">15</span><span class="p">,</span><span class="mi">1</span><span class="p">]]</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">e1</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">]</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">e2</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">]</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">SLG</span> <span class="o">=</span> <span class="n">SymmetricLinearGame</span><span class="p">(</span><span class="n">L</span><span class="p">,</span> <span class="n">K</span><span class="p">,</span> <span class="n">e1</span><span class="p">,</span> <span class="n">e2</span><span class="p">)</span>
<span class="gp">&gt;&gt;&gt; </span><span class="k">print</span><span class="p">(</span><span class="n">SLG</span><span class="o">.</span><span class="n">dual</span><span class="p">())</span>
<span class="go">The linear game (L, K, e1, e2) where</span>
<span class="go">  L = [  1  -1 -12]</span>
<span class="go">      [ -5   2 -15]</span>
<span class="go">      [-15  -3   1],</span>
<span class="go">  K = Nonnegative orthant in the real 3-space,</span>
<span class="go">  e1 = [ 1]</span>
<span class="go">       [ 2]</span>
<span class="go">       [ 3],</span>
<span class="go">  e2 = [ 1]</span>
<span class="go">       [ 1]</span>
<span class="go">       [ 1]</span>
</pre></div>
</div>
</dd></dl>

<dl class="method">
<dt id="dunshire.games.SymmetricLinearGame.e1">
<code class="descname">e1</code><span class="sig-paren">(</span><span class="sig-paren">)</span><a class="reference internal" href="_modules/dunshire/games.xhtml#SymmetricLinearGame.e1"><span class="viewcode-link">[source]</span></a><a class="headerlink" href="#dunshire.games.SymmetricLinearGame.e1" title="Permalink to this definition">¶</a></dt>
<dd><p>Return player one&#8217;s interior point.</p>
<table class="docutils field-list" frame="void" rules="none">
<col class="field-name" />
<col class="field-body" />
<tbody valign="top">
<tr class="field-odd field"><th class="field-name">Returns:</th><td class="field-body">The point interior to <a class="reference internal" href="#dunshire.games.SymmetricLinearGame.K" title="dunshire.games.SymmetricLinearGame.K"><code class="xref py py-meth docutils literal"><span class="pre">K()</span></code></a> affiliated with player one.</td>
</tr>
<tr class="field-even field"><th class="field-name">Return type:</th><td class="field-body">matrix</td>
</tr>
</tbody>
</table>
<p class="rubric">Examples</p>
<div class="highlight-python"><div class="highlight"><pre><span></span><span class="gp">&gt;&gt;&gt; </span><span class="kn">from</span> <span class="nn">dunshire</span> <span class="kn">import</span> <span class="o">*</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">K</span> <span class="o">=</span> <span class="n">NonnegativeOrthant</span><span class="p">(</span><span class="mi">3</span><span class="p">)</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">L</span> <span class="o">=</span> <span class="p">[[</span><span class="mi">1</span><span class="p">,</span><span class="o">-</span><span class="mi">5</span><span class="p">,</span><span class="o">-</span><span class="mi">15</span><span class="p">],[</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="o">-</span><span class="mi">3</span><span class="p">],[</span><span class="o">-</span><span class="mi">12</span><span class="p">,</span><span class="o">-</span><span class="mi">15</span><span class="p">,</span><span class="mi">1</span><span class="p">]]</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">e1</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">]</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">e2</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">]</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">SLG</span> <span class="o">=</span> <span class="n">SymmetricLinearGame</span><span class="p">(</span><span class="n">L</span><span class="p">,</span> <span class="n">K</span><span class="p">,</span> <span class="n">e1</span><span class="p">,</span> <span class="n">e2</span><span class="p">)</span>
<span class="gp">&gt;&gt;&gt; </span><span class="k">print</span><span class="p">(</span><span class="n">SLG</span><span class="o">.</span><span class="n">e1</span><span class="p">())</span>
<span class="go">[ 1]</span>
<span class="go">[ 1]</span>
<span class="go">[ 1]</span>
</pre></div>
</div>
</dd></dl>

<dl class="method">
<dt id="dunshire.games.SymmetricLinearGame.e2">
<code class="descname">e2</code><span class="sig-paren">(</span><span class="sig-paren">)</span><a class="reference internal" href="_modules/dunshire/games.xhtml#SymmetricLinearGame.e2"><span class="viewcode-link">[source]</span></a><a class="headerlink" href="#dunshire.games.SymmetricLinearGame.e2" title="Permalink to this definition">¶</a></dt>
<dd><p>Return player two&#8217;s interior point.</p>
<table class="docutils field-list" frame="void" rules="none">
<col class="field-name" />
<col class="field-body" />
<tbody valign="top">
<tr class="field-odd field"><th class="field-name">Returns:</th><td class="field-body">The point interior to <a class="reference internal" href="#dunshire.games.SymmetricLinearGame.K" title="dunshire.games.SymmetricLinearGame.K"><code class="xref py py-meth docutils literal"><span class="pre">K()</span></code></a> affiliated with player one.</td>
</tr>
<tr class="field-even field"><th class="field-name">Return type:</th><td class="field-body">matrix</td>
</tr>
</tbody>
</table>
<p class="rubric">Examples</p>
<div class="highlight-python"><div class="highlight"><pre><span></span><span class="gp">&gt;&gt;&gt; </span><span class="kn">from</span> <span class="nn">dunshire</span> <span class="kn">import</span> <span class="o">*</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">K</span> <span class="o">=</span> <span class="n">NonnegativeOrthant</span><span class="p">(</span><span class="mi">3</span><span class="p">)</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">L</span> <span class="o">=</span> <span class="p">[[</span><span class="mi">1</span><span class="p">,</span><span class="o">-</span><span class="mi">5</span><span class="p">,</span><span class="o">-</span><span class="mi">15</span><span class="p">],[</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="o">-</span><span class="mi">3</span><span class="p">],[</span><span class="o">-</span><span class="mi">12</span><span class="p">,</span><span class="o">-</span><span class="mi">15</span><span class="p">,</span><span class="mi">1</span><span class="p">]]</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">e1</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">]</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">e2</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">]</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">SLG</span> <span class="o">=</span> <span class="n">SymmetricLinearGame</span><span class="p">(</span><span class="n">L</span><span class="p">,</span> <span class="n">K</span><span class="p">,</span> <span class="n">e1</span><span class="p">,</span> <span class="n">e2</span><span class="p">)</span>
<span class="gp">&gt;&gt;&gt; </span><span class="k">print</span><span class="p">(</span><span class="n">SLG</span><span class="o">.</span><span class="n">e2</span><span class="p">())</span>
<span class="go">[ 1]</span>
<span class="go">[ 2]</span>
<span class="go">[ 3]</span>
</pre></div>
</div>
</dd></dl>

<dl class="method">
<dt id="dunshire.games.SymmetricLinearGame.h">
<code class="descname">h</code><span class="sig-paren">(</span><span class="sig-paren">)</span><a class="reference internal" href="_modules/dunshire/games.xhtml#SymmetricLinearGame.h"><span class="viewcode-link">[source]</span></a><a class="headerlink" href="#dunshire.games.SymmetricLinearGame.h" title="Permalink to this definition">¶</a></dt>
<dd><p>Return the <code class="docutils literal"><span class="pre">h</span></code> vector used in our CVXOPT construction.</p>
<p>The <span class="math">\(h\)</span> vector appears on the right-hand side of <span class="math">\(Gx
+ s = h\)</span> in the <a class="reference external" href="http://cvxopt.org/userguide/coneprog.html#linear-cone-programs">statement of the CVXOPT conelp program</a>.</p>
<div class="admonition warning">
<p class="first admonition-title">Warning</p>
<p class="last">It is not safe to cache any of the matrices passed to
CVXOPT, because it can clobber them.</p>
</div>
<table class="docutils field-list" frame="void" rules="none">
<col class="field-name" />
<col class="field-body" />
<tbody valign="top">
<tr class="field-odd field"><th class="field-name">Returns:</th><td class="field-body">A <code class="docutils literal"><span class="pre">2*self.dimension()</span></code>-by-<code class="docutils literal"><span class="pre">1</span></code> column vector of zeros.</td>
</tr>
<tr class="field-even field"><th class="field-name">Return type:</th><td class="field-body">matrix</td>
</tr>
</tbody>
</table>
<p class="rubric">Examples</p>
<div class="highlight-python"><div class="highlight"><pre><span></span><span class="gp">&gt;&gt;&gt; </span><span class="kn">from</span> <span class="nn">dunshire</span> <span class="kn">import</span> <span class="o">*</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">K</span> <span class="o">=</span> <span class="n">NonnegativeOrthant</span><span class="p">(</span><span class="mi">3</span><span class="p">)</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">L</span> <span class="o">=</span> <span class="p">[[</span><span class="mi">4</span><span class="p">,</span><span class="mi">5</span><span class="p">,</span><span class="mi">6</span><span class="p">],[</span><span class="mi">7</span><span class="p">,</span><span class="mi">8</span><span class="p">,</span><span class="mi">9</span><span class="p">],[</span><span class="mi">10</span><span class="p">,</span><span class="mi">11</span><span class="p">,</span><span class="mi">12</span><span class="p">]]</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">e1</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">]</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">e2</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">]</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">SLG</span> <span class="o">=</span> <span class="n">SymmetricLinearGame</span><span class="p">(</span><span class="n">L</span><span class="p">,</span> <span class="n">K</span><span class="p">,</span> <span class="n">e1</span><span class="p">,</span> <span class="n">e2</span><span class="p">)</span>
<span class="gp">&gt;&gt;&gt; </span><span class="k">print</span><span class="p">(</span><span class="n">SLG</span><span class="o">.</span><span class="n">h</span><span class="p">())</span>
<span class="go">[0.0000000]</span>
<span class="go">[0.0000000]</span>
<span class="go">[0.0000000]</span>
<span class="go">[0.0000000]</span>
<span class="go">[0.0000000]</span>
<span class="go">[0.0000000]</span>
</pre></div>
</div>
</dd></dl>

<dl class="method">
<dt id="dunshire.games.SymmetricLinearGame.payoff">
<code class="descname">payoff</code><span class="sig-paren">(</span><em>strategy1</em>, <em>strategy2</em><span class="sig-paren">)</span><a class="reference internal" href="_modules/dunshire/games.xhtml#SymmetricLinearGame.payoff"><span class="viewcode-link">[source]</span></a><a class="headerlink" href="#dunshire.games.SymmetricLinearGame.payoff" title="Permalink to this definition">¶</a></dt>
<dd><p>Return the payoff associated with <code class="docutils literal"><span class="pre">strategy1</span></code> and <code class="docutils literal"><span class="pre">strategy2</span></code>.</p>
<p>The payoff operator takes pairs of strategies to a real
number. For example, if player one&#8217;s strategy is <span class="math">\(x\)</span> and
player two&#8217;s strategy is <span class="math">\(y\)</span>, then the associated payoff
is <span class="math">\(\left\langle L\left(x\right),y \right\rangle \in
\mathbb{R}\)</span>. Here, <span class="math">\(L\)</span> denotes the same linear operator as
<a class="reference internal" href="#dunshire.games.SymmetricLinearGame.L" title="dunshire.games.SymmetricLinearGame.L"><code class="xref py py-meth docutils literal"><span class="pre">L()</span></code></a>. This method computes the payoff given the two
players&#8217; strategies.</p>
<table class="docutils field-list" frame="void" rules="none">
<col class="field-name" />
<col class="field-body" />
<tbody valign="top">
<tr class="field-odd field"><th class="field-name">Parameters:</th><td class="field-body"><ul class="first simple">
<li><strong>strategy1</strong> (<em>matrix</em>) &#8211; Player one&#8217;s strategy.</li>
<li><strong>strategy2</strong> (<em>matrix</em>) &#8211; Player two&#8217;s strategy.</li>
</ul>
</td>
</tr>
<tr class="field-even field"><th class="field-name">Returns:</th><td class="field-body"><p class="first">The payoff for the game when player one plays <code class="docutils literal"><span class="pre">strategy1</span></code>
and player two plays <code class="docutils literal"><span class="pre">strategy2</span></code>.</p>
</td>
</tr>
<tr class="field-odd field"><th class="field-name">Return type:</th><td class="field-body"><p class="first last">float</p>
</td>
</tr>
</tbody>
</table>
<p class="rubric">Examples</p>
<p>The value of the game should be the payoff at the optimal
strategies:</p>
<div class="highlight-python"><div class="highlight"><pre><span></span><span class="gp">&gt;&gt;&gt; </span><span class="kn">from</span> <span class="nn">dunshire</span> <span class="kn">import</span> <span class="o">*</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">K</span> <span class="o">=</span> <span class="n">NonnegativeOrthant</span><span class="p">(</span><span class="mi">3</span><span class="p">)</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">L</span> <span class="o">=</span> <span class="p">[[</span><span class="mi">1</span><span class="p">,</span><span class="o">-</span><span class="mi">5</span><span class="p">,</span><span class="o">-</span><span class="mi">15</span><span class="p">],[</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="o">-</span><span class="mi">3</span><span class="p">],[</span><span class="o">-</span><span class="mi">12</span><span class="p">,</span><span class="o">-</span><span class="mi">15</span><span class="p">,</span><span class="mi">1</span><span class="p">]]</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">e1</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">]</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">e2</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">]</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">SLG</span> <span class="o">=</span> <span class="n">SymmetricLinearGame</span><span class="p">(</span><span class="n">L</span><span class="p">,</span> <span class="n">K</span><span class="p">,</span> <span class="n">e1</span><span class="p">,</span> <span class="n">e2</span><span class="p">)</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">soln</span> <span class="o">=</span> <span class="n">SLG</span><span class="o">.</span><span class="n">solution</span><span class="p">()</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">x_bar</span> <span class="o">=</span> <span class="n">soln</span><span class="o">.</span><span class="n">player1_optimal</span><span class="p">()</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">y_bar</span> <span class="o">=</span> <span class="n">soln</span><span class="o">.</span><span class="n">player2_optimal</span><span class="p">()</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">SLG</span><span class="o">.</span><span class="n">payoff</span><span class="p">(</span><span class="n">x_bar</span><span class="p">,</span> <span class="n">y_bar</span><span class="p">)</span> <span class="o">==</span> <span class="n">soln</span><span class="o">.</span><span class="n">game_value</span><span class="p">()</span>
<span class="go">True</span>
</pre></div>
</div>
</dd></dl>

<dl class="method">
<dt id="dunshire.games.SymmetricLinearGame.player1_start">
<code class="descname">player1_start</code><span class="sig-paren">(</span><span class="sig-paren">)</span><a class="reference internal" href="_modules/dunshire/games.xhtml#SymmetricLinearGame.player1_start"><span class="viewcode-link">[source]</span></a><a class="headerlink" href="#dunshire.games.SymmetricLinearGame.player1_start" title="Permalink to this definition">¶</a></dt>
<dd><p>Return a feasible starting point for player one.</p>
<p>This starting point is for the CVXOPT formulation and not for
the original game. The basic premise is that if you scale
<a class="reference internal" href="#dunshire.games.SymmetricLinearGame.e2" title="dunshire.games.SymmetricLinearGame.e2"><code class="xref py py-meth docutils literal"><span class="pre">e2()</span></code></a> by the reciprocal of its squared norm, then you get a
point in <a class="reference internal" href="#dunshire.games.SymmetricLinearGame.K" title="dunshire.games.SymmetricLinearGame.K"><code class="xref py py-meth docutils literal"><span class="pre">K()</span></code></a> that makes a unit inner product with
<a class="reference internal" href="#dunshire.games.SymmetricLinearGame.e2" title="dunshire.games.SymmetricLinearGame.e2"><code class="xref py py-meth docutils literal"><span class="pre">e2()</span></code></a>. We then get to choose the primal objective function
value such that the constraint involving <a class="reference internal" href="#dunshire.games.SymmetricLinearGame.L" title="dunshire.games.SymmetricLinearGame.L"><code class="xref py py-meth docutils literal"><span class="pre">L()</span></code></a> is satisfied.</p>
<table class="docutils field-list" frame="void" rules="none">
<col class="field-name" />
<col class="field-body" />
<tbody valign="top">
<tr class="field-odd field"><th class="field-name">Returns:</th><td class="field-body">A dictionary with two keys, <code class="docutils literal"><span class="pre">'x'</span></code> and <code class="docutils literal"><span class="pre">'s'</span></code>, which
contain the vectors of the same name in the CVXOPT primal
problem formulation.<p>The vector <code class="docutils literal"><span class="pre">x</span></code> consists of the primal objective function
value concatenated with the strategy (for player one) that
achieves it. The vector <code class="docutils literal"><span class="pre">s</span></code> is essentially a dummy
variable, and is computed from the equality constraing in
the CVXOPT primal problem.</p>
</td>
</tr>
<tr class="field-even field"><th class="field-name">Return type:</th><td class="field-body">dict</td>
</tr>
</tbody>
</table>
</dd></dl>

<dl class="method">
<dt id="dunshire.games.SymmetricLinearGame.player2_start">
<code class="descname">player2_start</code><span class="sig-paren">(</span><span class="sig-paren">)</span><a class="reference internal" href="_modules/dunshire/games.xhtml#SymmetricLinearGame.player2_start"><span class="viewcode-link">[source]</span></a><a class="headerlink" href="#dunshire.games.SymmetricLinearGame.player2_start" title="Permalink to this definition">¶</a></dt>
<dd><p>Return a feasible starting point for player two.</p>
<p>This starting point is for the CVXOPT formulation and not for
the original game. The basic premise is that if you scale
<a class="reference internal" href="#dunshire.games.SymmetricLinearGame.e1" title="dunshire.games.SymmetricLinearGame.e1"><code class="xref py py-meth docutils literal"><span class="pre">e1()</span></code></a> by the reciprocal of its squared norm, then you get a
point in <a class="reference internal" href="#dunshire.games.SymmetricLinearGame.K" title="dunshire.games.SymmetricLinearGame.K"><code class="xref py py-meth docutils literal"><span class="pre">K()</span></code></a> that makes a unit inner product with
<a class="reference internal" href="#dunshire.games.SymmetricLinearGame.e1" title="dunshire.games.SymmetricLinearGame.e1"><code class="xref py py-meth docutils literal"><span class="pre">e1()</span></code></a>. We then get to choose the dual objective function
value such that the constraint involving <a class="reference internal" href="#dunshire.games.SymmetricLinearGame.L" title="dunshire.games.SymmetricLinearGame.L"><code class="xref py py-meth docutils literal"><span class="pre">L()</span></code></a> is satisfied.</p>
<table class="docutils field-list" frame="void" rules="none">
<col class="field-name" />
<col class="field-body" />
<tbody valign="top">
<tr class="field-odd field"><th class="field-name">Returns:</th><td class="field-body">A dictionary with two keys, <code class="docutils literal"><span class="pre">'y'</span></code> and <code class="docutils literal"><span class="pre">'z'</span></code>, which
contain the vectors of the same name in the CVXOPT dual
problem formulation.<p>The <code class="docutils literal"><span class="pre">1</span></code>-by-<code class="docutils literal"><span class="pre">1</span></code> vector <code class="docutils literal"><span class="pre">y</span></code> consists of the dual
objective function value. The last <a class="reference internal" href="#dunshire.games.SymmetricLinearGame.dimension" title="dunshire.games.SymmetricLinearGame.dimension"><code class="xref py py-meth docutils literal"><span class="pre">dimension()</span></code></a> entries
of the vector <code class="docutils literal"><span class="pre">z</span></code> contain the strategy (for player two)
that achieves it. The remaining entries of <code class="docutils literal"><span class="pre">z</span></code> are
essentially dummy variables, computed from the equality
constraint in the CVXOPT dual problem.</p>
</td>
</tr>
<tr class="field-even field"><th class="field-name">Return type:</th><td class="field-body">dict</td>
</tr>
</tbody>
</table>
</dd></dl>

<dl class="method">
<dt id="dunshire.games.SymmetricLinearGame.solution">
<code class="descname">solution</code><span class="sig-paren">(</span><span class="sig-paren">)</span><a class="reference internal" href="_modules/dunshire/games.xhtml#SymmetricLinearGame.solution"><span class="viewcode-link">[source]</span></a><a class="headerlink" href="#dunshire.games.SymmetricLinearGame.solution" title="Permalink to this definition">¶</a></dt>
<dd><p>Solve this linear game and return a <a class="reference internal" href="#dunshire.games.Solution" title="dunshire.games.Solution"><code class="xref py py-class docutils literal"><span class="pre">Solution</span></code></a>.</p>
<table class="docutils field-list" frame="void" rules="none">
<col class="field-name" />
<col class="field-body" />
<tbody valign="top">
<tr class="field-odd field"><th class="field-name">Returns:</th><td class="field-body"><p class="first">A <a class="reference internal" href="#dunshire.games.Solution" title="dunshire.games.Solution"><code class="xref py py-class docutils literal"><span class="pre">Solution</span></code></a> object describing the game&#8217;s value and
the optimal strategies of both players.</p>
</td>
</tr>
<tr class="field-even field"><th class="field-name">Return type:</th><td class="field-body"><p class="first"><a class="reference internal" href="#dunshire.games.Solution" title="dunshire.games.Solution">Solution</a></p>
</td>
</tr>
<tr class="field-odd field"><th class="field-name">Raises:</th><td class="field-body"><ul class="first last simple">
<li><code class="xref py py-exc docutils literal"><span class="pre">GameUnsolvableException</span></code> &#8211;
If the game could not be solved (if an optimal solution to its
associated cone program was not found).</li>
<li><code class="xref py py-exc docutils literal"><span class="pre">PoorScalingException</span></code> &#8211;
If the game could not be solved because CVXOPT crashed while
trying to take the square root of a negative number.</li>
</ul>
</td>
</tr>
</tbody>
</table>
<p class="rubric">Examples</p>
<p>This example is computed in Gowda and Ravindran in the section
&#8220;The value of a Z-transformation&#8221;:</p>
<div class="highlight-python"><div class="highlight"><pre><span></span><span class="gp">&gt;&gt;&gt; </span><span class="kn">from</span> <span class="nn">dunshire</span> <span class="kn">import</span> <span class="o">*</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">K</span> <span class="o">=</span> <span class="n">NonnegativeOrthant</span><span class="p">(</span><span class="mi">3</span><span class="p">)</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">L</span> <span class="o">=</span> <span class="p">[[</span><span class="mi">1</span><span class="p">,</span><span class="o">-</span><span class="mi">5</span><span class="p">,</span><span class="o">-</span><span class="mi">15</span><span class="p">],[</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="o">-</span><span class="mi">3</span><span class="p">],[</span><span class="o">-</span><span class="mi">12</span><span class="p">,</span><span class="o">-</span><span class="mi">15</span><span class="p">,</span><span class="mi">1</span><span class="p">]]</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">e1</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">]</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">e2</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">]</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">SLG</span> <span class="o">=</span> <span class="n">SymmetricLinearGame</span><span class="p">(</span><span class="n">L</span><span class="p">,</span> <span class="n">K</span><span class="p">,</span> <span class="n">e1</span><span class="p">,</span> <span class="n">e2</span><span class="p">)</span>
<span class="gp">&gt;&gt;&gt; </span><span class="k">print</span><span class="p">(</span><span class="n">SLG</span><span class="o">.</span><span class="n">solution</span><span class="p">())</span>
<span class="go">Game value: -6.172...</span>
<span class="go">Player 1 optimal:</span>
<span class="go">  [0.551...]</span>
<span class="go">  [0.000...]</span>
<span class="go">  [0.448...]</span>
<span class="go">Player 2 optimal:</span>
<span class="go">  [0.448...]</span>
<span class="go">  [0.000...]</span>
<span class="go">  [0.551...]</span>
</pre></div>
</div>
<p>The value of the following game can be computed using the fact
that the identity is invertible:</p>
<div class="highlight-python"><div class="highlight"><pre><span></span><span class="gp">&gt;&gt;&gt; </span><span class="kn">from</span> <span class="nn">dunshire</span> <span class="kn">import</span> <span class="o">*</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">K</span> <span class="o">=</span> <span class="n">NonnegativeOrthant</span><span class="p">(</span><span class="mi">3</span><span class="p">)</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">L</span> <span class="o">=</span> <span class="p">[[</span><span class="mi">1</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">],[</span><span class="mi">0</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">0</span><span class="p">],[</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">1</span><span class="p">]]</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">e1</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">]</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">e2</span> <span class="o">=</span> <span class="p">[</span><span class="mi">4</span><span class="p">,</span><span class="mi">5</span><span class="p">,</span><span class="mi">6</span><span class="p">]</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">SLG</span> <span class="o">=</span> <span class="n">SymmetricLinearGame</span><span class="p">(</span><span class="n">L</span><span class="p">,</span> <span class="n">K</span><span class="p">,</span> <span class="n">e1</span><span class="p">,</span> <span class="n">e2</span><span class="p">)</span>
<span class="gp">&gt;&gt;&gt; </span><span class="k">print</span><span class="p">(</span><span class="n">SLG</span><span class="o">.</span><span class="n">solution</span><span class="p">())</span>
<span class="go">Game value: 0.031...</span>
<span class="go">Player 1 optimal:</span>
<span class="go">  [0.031...]</span>
<span class="go">  [0.062...]</span>
<span class="go">  [0.093...]</span>
<span class="go">Player 2 optimal:</span>
<span class="go">  [0.125...]</span>
<span class="go">  [0.156...]</span>
<span class="go">  [0.187...]</span>
</pre></div>
</div>
<p>This is another Gowda/Ravindran example that is supposed to have
a negative game value:</p>
<div class="highlight-python"><div class="highlight"><pre><span></span><span class="gp">&gt;&gt;&gt; </span><span class="kn">from</span> <span class="nn">dunshire</span> <span class="kn">import</span> <span class="o">*</span>
<span class="gp">&gt;&gt;&gt; </span><span class="kn">from</span> <span class="nn">dunshire.options</span> <span class="kn">import</span> <span class="n">ABS_TOL</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">L</span> <span class="o">=</span> <span class="p">[[</span><span class="mi">1</span><span class="p">,</span> <span class="o">-</span><span class="mi">2</span><span class="p">],</span> <span class="p">[</span><span class="o">-</span><span class="mi">2</span><span class="p">,</span> <span class="mi">1</span><span class="p">]]</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">K</span> <span class="o">=</span> <span class="n">NonnegativeOrthant</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">e1</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">]</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">e2</span> <span class="o">=</span> <span class="n">e1</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">SLG</span> <span class="o">=</span> <span class="n">SymmetricLinearGame</span><span class="p">(</span><span class="n">L</span><span class="p">,</span> <span class="n">K</span><span class="p">,</span> <span class="n">e1</span><span class="p">,</span> <span class="n">e2</span><span class="p">)</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">SLG</span><span class="o">.</span><span class="n">solution</span><span class="p">()</span><span class="o">.</span><span class="n">game_value</span><span class="p">()</span> <span class="o">&lt;</span> <span class="o">-</span><span class="n">ABS_TOL</span>
<span class="go">True</span>
</pre></div>
</div>
<p>The following two games are problematic numerically, but we
should be able to solve them:</p>
<div class="highlight-python"><div class="highlight"><pre><span></span><span class="gp">&gt;&gt;&gt; </span><span class="kn">from</span> <span class="nn">dunshire</span> <span class="kn">import</span> <span class="o">*</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">L</span> <span class="o">=</span> <span class="p">[[</span><span class="o">-</span><span class="mf">0.95237953890954685221</span><span class="p">,</span> <span class="mf">1.83474556206462535712</span><span class="p">],</span>
<span class="gp">... </span>     <span class="p">[</span> <span class="mf">1.30481749924621448500</span><span class="p">,</span> <span class="mf">1.65278664543326403447</span><span class="p">]]</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">K</span> <span class="o">=</span> <span class="n">NonnegativeOrthant</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">e1</span> <span class="o">=</span> <span class="p">[</span><span class="mf">0.95477167524644313001</span><span class="p">,</span> <span class="mf">0.63270781756540095397</span><span class="p">]</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">e2</span> <span class="o">=</span> <span class="p">[</span><span class="mf">0.39633793037154141370</span><span class="p">,</span> <span class="mf">0.10239281495640320530</span><span class="p">]</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">SLG</span> <span class="o">=</span> <span class="n">SymmetricLinearGame</span><span class="p">(</span><span class="n">L</span><span class="p">,</span> <span class="n">K</span><span class="p">,</span> <span class="n">e1</span><span class="p">,</span> <span class="n">e2</span><span class="p">)</span>
<span class="gp">&gt;&gt;&gt; </span><span class="k">print</span><span class="p">(</span><span class="n">SLG</span><span class="o">.</span><span class="n">solution</span><span class="p">())</span>
<span class="go">Game value: 18.767...</span>
<span class="go">Player 1 optimal:</span>
<span class="go">  [0.000...]</span>
<span class="go">  [9.766...]</span>
<span class="go">Player 2 optimal:</span>
<span class="go">  [1.047...]</span>
<span class="go">  [0.000...]</span>
</pre></div>
</div>
<div class="highlight-python"><div class="highlight"><pre><span></span><span class="gp">&gt;&gt;&gt; </span><span class="kn">from</span> <span class="nn">dunshire</span> <span class="kn">import</span> <span class="o">*</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">L</span> <span class="o">=</span> <span class="p">[[</span><span class="mf">1.54159395026049472754</span><span class="p">,</span> <span class="mf">2.21344728574316684799</span><span class="p">],</span>
<span class="gp">... </span>     <span class="p">[</span><span class="mf">1.33147433507846657541</span><span class="p">,</span> <span class="mf">1.17913616272988108769</span><span class="p">]]</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">K</span> <span class="o">=</span> <span class="n">NonnegativeOrthant</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">e1</span> <span class="o">=</span> <span class="p">[</span><span class="mf">0.39903040089404784307</span><span class="p">,</span> <span class="mf">0.12377403622479113410</span><span class="p">]</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">e2</span> <span class="o">=</span> <span class="p">[</span><span class="mf">0.15695181142215544612</span><span class="p">,</span> <span class="mf">0.85527381344651265405</span><span class="p">]</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">SLG</span> <span class="o">=</span> <span class="n">SymmetricLinearGame</span><span class="p">(</span><span class="n">L</span><span class="p">,</span> <span class="n">K</span><span class="p">,</span> <span class="n">e1</span><span class="p">,</span> <span class="n">e2</span><span class="p">)</span>
<span class="gp">&gt;&gt;&gt; </span><span class="k">print</span><span class="p">(</span><span class="n">SLG</span><span class="o">.</span><span class="n">solution</span><span class="p">())</span>
<span class="go">Game value: 24.614...</span>
<span class="go">Player 1 optimal:</span>
<span class="go">  [6.371...]</span>
<span class="go">  [0.000...]</span>
<span class="go">Player 2 optimal:</span>
<span class="go">  [2.506...]</span>
<span class="go">  [0.000...]</span>
</pre></div>
</div>
<p>This is another one that was difficult numerically, and caused
trouble even after we fixed the first two:</p>
<div class="highlight-python"><div class="highlight"><pre><span></span><span class="gp">&gt;&gt;&gt; </span><span class="kn">from</span> <span class="nn">dunshire</span> <span class="kn">import</span> <span class="o">*</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">L</span> <span class="o">=</span> <span class="p">[[</span><span class="mf">57.22233908627052301199</span><span class="p">,</span> <span class="mf">41.70631373437460354126</span><span class="p">],</span>
<span class="gp">... </span>     <span class="p">[</span><span class="mf">83.04512571985074487202</span><span class="p">,</span> <span class="mf">57.82581810406928468637</span><span class="p">]]</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">K</span> <span class="o">=</span> <span class="n">NonnegativeOrthant</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">e1</span> <span class="o">=</span> <span class="p">[</span><span class="mf">7.31887017043399268346</span><span class="p">,</span> <span class="mf">0.89744171905822367474</span><span class="p">]</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">e2</span> <span class="o">=</span> <span class="p">[</span><span class="mf">0.11099824781179848388</span><span class="p">,</span> <span class="mf">6.12564670639315345113</span><span class="p">]</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">SLG</span> <span class="o">=</span> <span class="n">SymmetricLinearGame</span><span class="p">(</span><span class="n">L</span><span class="p">,</span><span class="n">K</span><span class="p">,</span><span class="n">e1</span><span class="p">,</span><span class="n">e2</span><span class="p">)</span>
<span class="gp">&gt;&gt;&gt; </span><span class="k">print</span><span class="p">(</span><span class="n">SLG</span><span class="o">.</span><span class="n">solution</span><span class="p">())</span>
<span class="go">Game value: 70.437...</span>
<span class="go">Player 1 optimal:</span>
<span class="go">  [9.009...]</span>
<span class="go">  [0.000...]</span>
<span class="go">Player 2 optimal:</span>
<span class="go">  [0.136...]</span>
<span class="go">  [0.000...]</span>
</pre></div>
</div>
<p>And finally, here&#8217;s one that returns an &#8220;optimal&#8221; solution, but
whose primal/dual objective function values are far apart:</p>
<div class="highlight-python"><div class="highlight"><pre><span></span><span class="gp">&gt;&gt;&gt; </span><span class="kn">from</span> <span class="nn">dunshire</span> <span class="kn">import</span> <span class="o">*</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">L</span> <span class="o">=</span> <span class="p">[[</span> <span class="mf">6.49260076597376212248</span><span class="p">,</span> <span class="o">-</span><span class="mf">0.60528030227678542019</span><span class="p">],</span>
<span class="gp">... </span>     <span class="p">[</span> <span class="mf">2.59896077096751731972</span><span class="p">,</span> <span class="o">-</span><span class="mf">0.97685530240286766457</span><span class="p">]]</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">K</span> <span class="o">=</span> <span class="n">IceCream</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">e1</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mf">0.43749513972645248661</span><span class="p">]</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">e2</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mf">0.46008379832200291260</span><span class="p">]</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">SLG</span> <span class="o">=</span> <span class="n">SymmetricLinearGame</span><span class="p">(</span><span class="n">L</span><span class="p">,</span> <span class="n">K</span><span class="p">,</span> <span class="n">e1</span><span class="p">,</span> <span class="n">e2</span><span class="p">)</span>
<span class="gp">&gt;&gt;&gt; </span><span class="k">print</span><span class="p">(</span><span class="n">SLG</span><span class="o">.</span><span class="n">solution</span><span class="p">())</span>
<span class="go">Game value: 11.596...</span>
<span class="go">Player 1 optimal:</span>
<span class="go">  [ 1.852...]</span>
<span class="go">  [-1.852...]</span>
<span class="go">Player 2 optimal:</span>
<span class="go">  [ 1.777...]</span>
<span class="go">  [-1.777...]</span>
</pre></div>
</div>
</dd></dl>

<dl class="method">
<dt id="dunshire.games.SymmetricLinearGame.tolerance_scale">
<code class="descname">tolerance_scale</code><span class="sig-paren">(</span><em>solution</em><span class="sig-paren">)</span><a class="reference internal" href="_modules/dunshire/games.xhtml#SymmetricLinearGame.tolerance_scale"><span class="viewcode-link">[source]</span></a><a class="headerlink" href="#dunshire.games.SymmetricLinearGame.tolerance_scale" title="Permalink to this definition">¶</a></dt>
<dd><p>Return a scaling factor that should be applied to
<a class="reference internal" href="developer-api.xhtml#dunshire.options.ABS_TOL" title="dunshire.options.ABS_TOL"><code class="xref py py-const docutils literal"><span class="pre">dunshire.options.ABS_TOL</span></code></a> for this game.</p>
<p>When performing certain comparisons, the default tolerance
<a class="reference internal" href="developer-api.xhtml#dunshire.options.ABS_TOL" title="dunshire.options.ABS_TOL"><code class="xref py py-const docutils literal"><span class="pre">dunshire.options.ABS_TOL</span></code></a> may not be appropriate. For
example, if we expect <code class="docutils literal"><span class="pre">x</span></code> and <code class="docutils literal"><span class="pre">y</span></code> to be within
<a class="reference internal" href="developer-api.xhtml#dunshire.options.ABS_TOL" title="dunshire.options.ABS_TOL"><code class="xref py py-const docutils literal"><span class="pre">dunshire.options.ABS_TOL</span></code></a> of each other, than the inner
product of <code class="docutils literal"><span class="pre">L*x</span></code> and <code class="docutils literal"><span class="pre">y</span></code> can be as far apart as the spectral
norm of <code class="docutils literal"><span class="pre">L</span></code> times the sum of the norms of <code class="docutils literal"><span class="pre">x</span></code> and
<code class="docutils literal"><span class="pre">y</span></code>. Such a comparison is made in <a class="reference internal" href="#dunshire.games.SymmetricLinearGame.solution" title="dunshire.games.SymmetricLinearGame.solution"><code class="xref py py-meth docutils literal"><span class="pre">solution()</span></code></a>, and in
many of our unit tests.</p>
<p>The returned scaling factor found from the inner product
mentioned above is</p>
<div class="math">
\[\left\lVert L \right\rVert_{2}
\left( \left\lVert \bar{x} \right\rVert
       + \left\lVert \bar{y} \right\rVert
\right),\]</div>
<p>where <span class="math">\(\bar{x}\)</span> and <span class="math">\(\bar{y}\)</span> are optimal solutions
for players one and two respectively. This scaling factor is not
formally justified, but attempting anything smaller leads to
test failures.</p>
<div class="admonition warning">
<p class="first admonition-title">Warning</p>
<p class="last">Optimal solutions are not unique, so the scaling factor
obtained from <code class="docutils literal"><span class="pre">solution</span></code> may not work when comparing other
solutions.</p>
</div>
<table class="docutils field-list" frame="void" rules="none">
<col class="field-name" />
<col class="field-body" />
<tbody valign="top">
<tr class="field-odd field"><th class="field-name">Parameters:</th><td class="field-body"><strong>solution</strong> (<a class="reference internal" href="#dunshire.games.Solution" title="dunshire.games.Solution"><em>Solution</em></a>) &#8211; A solution of this game, used to obtain the norms of the
optimal strategies.</td>
</tr>
<tr class="field-even field"><th class="field-name">Returns:</th><td class="field-body">A scaling factor to be multiplied by
<a class="reference internal" href="developer-api.xhtml#dunshire.options.ABS_TOL" title="dunshire.options.ABS_TOL"><code class="xref py py-const docutils literal"><span class="pre">dunshire.options.ABS_TOL</span></code></a> when
making comparisons involving solutions of this game.</td>
</tr>
<tr class="field-odd field"><th class="field-name">Return type:</th><td class="field-body">float</td>
</tr>
</tbody>
</table>
<p class="rubric">Examples</p>
<p>The spectral norm of <code class="docutils literal"><span class="pre">L</span></code> in this case is around <code class="docutils literal"><span class="pre">5.464</span></code>, and
the optimal strategies both have norm one, so we expect the
tolerance scale to be somewhere around <code class="docutils literal"><span class="pre">2</span> <span class="pre">*</span> <span class="pre">5.464</span></code>, or
<code class="docutils literal"><span class="pre">10.929</span></code>:</p>
<div class="highlight-python"><div class="highlight"><pre><span></span><span class="gp">&gt;&gt;&gt; </span><span class="kn">from</span> <span class="nn">dunshire</span> <span class="kn">import</span> <span class="o">*</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">L</span> <span class="o">=</span> <span class="p">[[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">],[</span><span class="mi">3</span><span class="p">,</span><span class="mi">4</span><span class="p">]]</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">K</span> <span class="o">=</span> <span class="n">NonnegativeOrthant</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">e1</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">]</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">e2</span> <span class="o">=</span> <span class="n">e1</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">SLG</span> <span class="o">=</span> <span class="n">SymmetricLinearGame</span><span class="p">(</span><span class="n">L</span><span class="p">,</span><span class="n">K</span><span class="p">,</span><span class="n">e1</span><span class="p">,</span><span class="n">e2</span><span class="p">)</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">SLG</span><span class="o">.</span><span class="n">tolerance_scale</span><span class="p">(</span><span class="n">SLG</span><span class="o">.</span><span class="n">solution</span><span class="p">())</span>
<span class="go">10.929...</span>
</pre></div>
</div>
</dd></dl>

</dd></dl>

</div>
</div>


          </div>
        </div>
      </div>
      <div class="sphinxsidebar" role="navigation" aria-label="main navigation">
        <div class="sphinxsidebarwrapper">
<h1 class="logo"><a href="index.xhtml">Dunshire</a></h1>








<h3>Navigation</h3>
<ul class="current">
<li class="toctree-l1"><a class="reference internal" href="overview.xhtml">Overview</a></li>
<li class="toctree-l1"><a class="reference internal" href="requirements.xhtml">Requirements</a></li>
<li class="toctree-l1 current"><a class="current reference internal" href="">User API Documentation</a><ul>
<li class="toctree-l2"><a class="reference internal" href="#module-dunshire.cones">dunshire.cones module</a></li>
<li class="toctree-l2"><a class="reference internal" href="#module-dunshire.games">dunshire.games module</a></li>
</ul>
</li>
<li class="toctree-l1"><a class="reference internal" href="background.xhtml">Background</a></li>
<li class="toctree-l1"><a class="reference internal" href="references.xhtml">References</a></li>
<li class="toctree-l1"><a class="reference internal" href="developer-api.xhtml">Developer API Documentation</a></li>
</ul>


        </div>
      </div>
      <div class="clearer"></div>
    </div>
    <div class="footer">
      
      
    </div>

    

    
  </body>
</html>