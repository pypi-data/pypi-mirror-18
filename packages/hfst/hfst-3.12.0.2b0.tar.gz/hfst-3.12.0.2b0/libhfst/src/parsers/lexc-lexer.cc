#line 2 "lexc-lexer.cc"

#line 4 "lexc-lexer.cc"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define yy_create_buffer hlexc_create_buffer
#define yy_delete_buffer hlexc_delete_buffer
#define yy_flex_debug hlexc_flex_debug
#define yy_init_buffer hlexc_init_buffer
#define yy_flush_buffer hlexc_flush_buffer
#define yy_load_buffer_state hlexc_load_buffer_state
#define yy_switch_to_buffer hlexc_switch_to_buffer
#define yyin hlexcin
#define yyleng hlexcleng
#define yylex hlexclex
#define yylineno hlexclineno
#define yyout hlexcout
#define yyrestart hlexcrestart
#define yytext hlexctext
#define yywrap hlexcwrap
#define yyalloc hlexcalloc
#define yyrealloc hlexcrealloc
#define yyfree hlexcfree

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 35
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

/* C99 requires __STDC__ to be defined as 1. */
#if defined (__STDC__)

#define YY_USE_CONST

#endif	/* defined (__STDC__) */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE hlexcrestart(hlexcin  )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

extern int hlexcleng;

extern FILE *hlexcin, *hlexcout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    #define YY_LESS_LINENO(n)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up hlexctext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up hlexctext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via hlexcrestart()), so that the user can continue scanning by
	 * just pointing hlexcin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* Stack of input buffers. */
static size_t yy_buffer_stack_top = 0; /**< index of top of stack. */
static size_t yy_buffer_stack_max = 0; /**< capacity of stack. */
static YY_BUFFER_STATE * yy_buffer_stack = 0; /**< Stack as an array. */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

/* yy_hold_char holds the character lost when hlexctext is formed. */
static char yy_hold_char;
static int yy_n_chars;		/* number of characters read into yy_ch_buf */
int hlexcleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = (char *) 0;
static int yy_init = 0;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow hlexcwrap()'s to do buffer switches
 * instead of setting up a fresh hlexcin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void hlexcrestart (FILE *input_file  );
void hlexc_switch_to_buffer (YY_BUFFER_STATE new_buffer  );
YY_BUFFER_STATE hlexc_create_buffer (FILE *file,int size  );
void hlexc_delete_buffer (YY_BUFFER_STATE b  );
void hlexc_flush_buffer (YY_BUFFER_STATE b  );
void hlexcpush_buffer_state (YY_BUFFER_STATE new_buffer  );
void hlexcpop_buffer_state (void );

static void hlexcensure_buffer_stack (void );
static void hlexc_load_buffer_state (void );
static void hlexc_init_buffer (YY_BUFFER_STATE b,FILE *file  );

#define YY_FLUSH_BUFFER hlexc_flush_buffer(YY_CURRENT_BUFFER )

YY_BUFFER_STATE hlexc_scan_buffer (char *base,yy_size_t size  );
YY_BUFFER_STATE hlexc_scan_string (yyconst char *yy_str  );
YY_BUFFER_STATE hlexc_scan_bytes (yyconst char *bytes,int len  );

void *hlexcalloc (yy_size_t  );
void *hlexcrealloc (void *,yy_size_t  );
void hlexcfree (void *  );

#define yy_new_buffer hlexc_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        hlexcensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            hlexc_create_buffer(hlexcin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        hlexcensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            hlexc_create_buffer(hlexcin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

#define hlexcwrap(n) 1
#define YY_SKIP_YYWRAP

typedef unsigned char YY_CHAR;

FILE *hlexcin = (FILE *) 0, *hlexcout = (FILE *) 0;

typedef int yy_state_type;

extern int hlexclineno;

int hlexclineno = 1;

extern char *hlexctext;
#define yytext_ptr hlexctext

static yy_state_type yy_get_previous_state (void );
static yy_state_type yy_try_NUL_trans (yy_state_type current_state  );
static int yy_get_next_buffer (void );
static void yy_fatal_error (yyconst char msg[]  );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up hlexctext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
	hlexcleng = (size_t) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
	(yy_c_buf_p) = yy_cp;

#define YY_NUM_RULES 35
#define YY_END_OF_BUFFER 36
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_acclist[451] =
    {   0,
       36,   34,   35,    8,   34,   35,    8,   35,    8,   34,
       35,    7,   34,   35,   34,   35,   33,   34,   35,    8,
       34,   35,   34,   35,   34,   35,   34,   35,   34,   35,
       11,   34,   35,   11,   35,   11,   34,   35,   10,   34,
       35,    9,   34,   35,   34,   35,    9,   34,   35,   33,
       34,   35,   33,   34,   35,   33,   34,   35,   33,   34,
       35,   33,   34,   35,   33,   34,   35,   33,   34,   35,
       33,   34,   35,   11,   34,   35,    9,   34,   35,    9,
       34,   35,    9,   34,   35,   19,   34,   35,   19,   35,
       19,   34,   35,   18,   34,   35,   34,   35,   34,   35,

       34,   35,   34,   35,   33,   34,   35,   33,   34,   35,
       33,   34,   35,   33,   34,   35,   33,   34,   35,   33,
       34,   35,   33,   34,   35,   33,   34,   35,   19,   34,
       35,   34,   35,   14,   34,   35,   14,   35,   14,   34,
       35,   13,   34,   35,   12,   34,   35,   34,   35,   15,
       34,   35,   12,   34,   35,   33,   34,   35,   33,   34,
       35,   33,   34,   35,   33,   34,   35,   33,   34,   35,
       33,   34,   35,   33,   34,   35,   33,   34,   35,   14,
       34,   35,   12,   34,   35,   12,   34,   35,   30,   34,
       35,   30,   35,   30,   34,   35,   29,   34,   35,   34,

       35,   22,   34,   35,16408,   34,   35,   28,   34,   35,
       27,   34,   35,   34,   35,   22,   34,   35,16408,   33,
       34,   35,   33,   34,   35,   33,   34,   35,   33,   34,
       35,   33,   34,   35,   33,   34,   35,   33,   34,   35,
       33,   34,   35,   30,   34,   35,   22,   34,   35,16408,
       22,   34,   35,16408,   31,   34,   35,   31,   32,   34,
       35,   32,   35,   31,   33,   34,   35,    7,   10,    9,
        9,    9,    9,    9,    9,    9,    9,    9,   18,   16,
       16,   13,   12,   12,   12,   12,   12,   12,   12,   29,
       25, 8216,   22,16408,   22,16408,   22,16408,   22,16408,

       22,16408,    9,    9,    9,    9,    9,    9,    9,    9,
        9,   16,   17,   16,   12,   12,   12,   12,   12,   12,
       12,   23,   23,   22,16408,   22,16408,   22,16408,    6,
        9,    9,    9,    9,    9,    9,    9,    9,    6,   12,
       12,   12,   12,   12,   12,   22,16408,   26,   26,   22,
    16408,    9,    9,    9,    9,    9,    9,    9,    9,   17,
       12,   12,   12,   12,   12,   12,   22,16408,   22,16408,
        9,    9,    9,    9,    9,    9,    9,    9,   12,   12,
       12,   12,   12,   12,   22,16408,   22,16408,    9,    9,
        9,    9,    9,    9,    9,   12,   12,   12,   12,   12,

       12,   22,16408,   22,16408,    2,    9,    9,    9,    9,
       12,   12,   12,   12,    4,    5,    9,    9,    9,    9,
        4,   16,    5,   16,   12,   12,   12,   12,   20,   21,
        4,    5,    9,    9,    9,    9,   12,   12,   12,   12,
       20,   21,    9,    9,    9,   12,   12,   12,    3,    1
    } ;

static yyconst flex_int16_t yy_accept[989] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    2,    4,    7,    9,   12,   15,   17,
       20,   23,   25,   27,   29,   31,   34,   36,   39,   42,
       45,   47,   50,   53,   56,   59,   62,   65,   68,   71,
       74,   77,   80,   83,   86,   89,   91,   94,   97,   99,
      101,  103,  105,  108,  111,  114,  117,  120,  123,  126,
      129,  132,  134,  137,  139,  142,  145,  148,  150,  153,
      156,  159,  162,  165,  168,  171,  174,  177,  180,  183,
      186,  189,  192,  194,  197,  200,  202,  206,  208,  211,
      214,  216,  220,  223,  226,  229,  232,  235,  238,  241,

      244,  247,  251,  255,  258,  262,  264,  268,  268,  268,
      269,  269,  269,  269,  269,  269,  269,  269,  269,  269,
      269,  269,  269,  269,  269,  270,  271,  271,  271,  271,
      271,  271,  271,  271,  271,  271,  272,  272,  272,  272,
      272,  272,  272,  272,  272,  273,  274,  274,  274,  274,
      274,  274,  274,  274,  274,  275,  276,  277,  278,  279,
      280,  280,  280,  280,  281,  281,  281,  281,  281,  281,
      281,  281,  281,  281,  281,  281,  281,  281,  281,  281,
      281,  281,  281,  281,  281,  281,  281,  281,  281,  281,
      281,  281,  281,  282,  282,  282,  282,  282,  282,  282,

      282,  282,  282,  282,  282,  282,  282,  282,  282,  282,
      282,  282,  282,  282,  283,  284,  284,  284,  284,  284,
      284,  284,  284,  284,  284,  285,  285,  285,  285,  285,
      285,  285,  285,  285,  286,  287,  287,  287,  287,  287,
      287,  287,  287,  287,  288,  289,  290,  290,  290,  291,
      291,  292,  292,  293,  295,  295,  295,  295,  295,  295,
      295,  295,  295,  295,  297,  297,  297,  297,  297,  297,
      297,  297,  297,  297,  297,  297,  297,  297,  297,  297,
      297,  297,  297,  297,  297,  297,  297,  297,  297,  297,
      297,  299,  299,  299,  299,  299,  299,  299,  299,  299,

      299,  299,  301,  303,  303,  303,  303,  303,  303,  303,
      303,  303,  303,  303,  303,  303,  303,  303,  303,  303,
      303,  303,  304,  305,  305,  305,  305,  306,  307,  308,
      309,  310,  311,  312,  313,  313,  313,  313,  313,  313,
      313,  313,  313,  313,  313,  313,  314,  315,  315,  315,
      315,  315,  315,  315,  315,  315,  315,  315,  315,  315,
      315,  315,  315,  315,  315,  315,  315,  315,  315,  315,
      315,  315,  315,  315,  315,  315,  315,  315,  315,  315,
      315,  315,  315,  315,  315,  315,  315,  315,  315,  315,
      315,  315,  315,  315,  315,  315,  315,  315,  315,  315,

      315,  315,  315,  315,  315,  315,  315,  315,  315,  316,
      317,  317,  317,  317,  318,  319,  320,  321,  322,  322,
      322,  322,  322,  322,  322,  322,  322,  322,  323,  323,
      323,  323,  323,  323,  323,  323,  323,  323,  323,  323,
      324,  324,  324,  324,  324,  324,  324,  324,  324,  324,
      324,  324,  324,  324,  324,  324,  324,  324,  324,  324,
      324,  324,  324,  324,  324,  324,  324,  324,  324,  324,
      324,  326,  326,  326,  326,  326,  326,  328,  330,  330,
      330,  330,  330,  330,  330,  331,  331,  331,  331,  331,
      331,  331,  331,  332,  333,  334,  335,  336,  337,  338,

      339,  339,  339,  339,  339,  339,  339,  339,  339,  339,
      339,  339,  339,  339,  339,  339,  339,  339,  339,  339,
      339,  339,  339,  339,  339,  339,  339,  339,  339,  339,
      339,  339,  339,  339,  339,  339,  339,  339,  339,  339,
      339,  339,  339,  339,  339,  339,  339,  339,  339,  339,
      339,  339,  339,  339,  339,  339,  339,  339,  339,  339,
      339,  339,  340,  340,  340,  340,  341,  342,  343,  344,
      345,  346,  346,  346,  346,  346,  346,  346,  346,  346,
      346,  346,  346,  346,  346,  346,  346,  346,  346,  346,
      346,  346,  346,  346,  346,  346,  346,  346,  346,  346,

      346,  346,  346,  346,  346,  346,  346,  346,  346,  346,
      346,  346,  348,  348,  348,  349,  350,  352,  352,  352,
      352,  352,  352,  352,  352,  352,  352,  352,  353,  354,
      355,  356,  357,  358,  359,  360,  360,  360,  360,  360,
      360,  360,  360,  360,  360,  360,  361,  361,  361,  361,
      361,  361,  361,  361,  361,  361,  361,  361,  361,  361,
      361,  361,  362,  363,  364,  365,  366,  367,  367,  367,
      367,  367,  367,  367,  367,  367,  367,  367,  367,  367,
      367,  367,  369,  369,  371,  371,  371,  371,  371,  371,
      371,  371,  371,  371,  371,  372,  373,  374,  375,  376,

      377,  378,  379,  379,  379,  379,  379,  379,  379,  379,
      379,  380,  381,  382,  383,  384,  385,  385,  385,  385,
      385,  387,  387,  389,  389,  389,  389,  389,  389,  389,
      389,  389,  389,  390,  391,  392,  393,  394,  395,  396,
      396,  396,  397,  398,  399,  400,  401,  402,  402,  404,
      404,  406,  406,  406,  406,  406,  406,  406,  406,  406,
      407,  408,  409,  410,  411,  411,  411,  412,  413,  414,
      415,  415,  415,  415,  415,  416,  416,  416,  416,  416,
      416,  416,  416,  416,  416,  417,  417,  417,  417,  417,
      417,  417,  417,  417,  417,  417,  417,  417,  417,  417,

      417,  418,  419,  420,  421,  423,  425,  426,  427,  428,
      429,  429,  430,  430,  430,  430,  430,  430,  430,  430,
      430,  430,  430,  431,  431,  431,  431,  431,  431,  431,
      431,  431,  431,  432,  432,  432,  432,  432,  432,  432,
      432,  432,  432,  432,  432,  432,  432,  432,  432,  433,
      433,  433,  433,  433,  433,  433,  433,  433,  433,  433,
      433,  433,  433,  433,  433,  433,  433,  433,  433,  433,
      433,  434,  435,  436,  437,  438,  439,  440,  441,  442,
      442,  442,  442,  442,  442,  442,  442,  442,  442,  442,
      442,  442,  442,  442,  442,  443,  443,  443,  443,  443,

      443,  443,  443,  443,  443,  443,  443,  443,  443,  443,
      443,  443,  443,  443,  443,  443,  443,  443,  443,  443,
      443,  443,  443,  443,  443,  443,  443,  443,  443,  443,
      443,  443,  443,  443,  443,  443,  444,  445,  446,  447,
      448,  449,  449,  449,  449,  449,  449,  449,  449,  449,
      449,  449,  449,  449,  449,  449,  449,  449,  449,  449,
      449,  449,  449,  449,  449,  449,  449,  449,  450,  450,
      450,  450,  450,  450,  450,  450,  450,  450,  450,  450,
      450,  450,  450,  450,  450,  450,  451,  451
    } ;

static yyconst flex_int32_t yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    4,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    5,    6,    7,    8,    9,   10,   11,   12,   13,
       13,   11,   11,   12,   11,   14,   15,   11,   12,   12,
       12,   12,   12,   12,   12,   12,   12,   16,   17,   18,
       19,   20,   21,   22,   23,   24,   25,   26,   27,   28,
       29,   30,   31,   12,   12,   32,   33,   34,   35,   12,
       12,   36,   37,   38,   39,   12,   12,   40,   41,   12,
       11,   42,   11,   12,   43,   12,   44,   45,   46,   12,

       47,   48,   49,   50,   51,   12,   12,   52,   53,   54,
       55,   12,   12,   56,   57,   58,   59,   12,   12,   60,
       61,   12,   11,   13,   11,   11,    1,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   63,   63,   63,   63,   63,   63,   63,
       63,   63,   63,   63,   63,   63,   63,   63,   63,   64,
       64,   64,   64,   64,   64,   64,   64,   64,   64,   64,
       64,   64,   64,   64,   64,   64,   64,   64,   64,   64,
       64,   64,   64,   64,   64,   64,   64,   64,   64,   64,
       64,   65,   65,   66,   66,   66,   66,   66,   66,   66,

       66,   66,   66,   66,   66,   66,   66,   66,   66,   66,
       66,   66,   66,   66,   66,   66,   66,   66,   66,   66,
       66,   66,   66,   67,   68,   68,   68,   68,   68,   68,
       68,   68,   68,   68,   68,   68,   69,   70,   70,   71,
       72,   72,   72,   73,   65,   65,   65,   65,   65,   65,
       65,   65,   65,   65,   65
    } ;

static yyconst flex_int32_t yy_meta[74] =
    {   0,
        1,    2,    3,    1,    4,    5,    6,    7,    7,    7,
        7,    7,    7,    7,    7,    8,    9,    8,    7,    5,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    1,    1,    1,    1,    7,    7,    7,    7,    7,
        7,    7,    7
    } ;

static yyconst flex_int16_t yy_base[1026] =
    {   0,
        0,   72,  145,  218,  291,  364,  437,  510,  583,  656,
      728,  800, 2894, 4181,    5, 4181, 4181,    0,    0, 4181,
        7,    1, 2857,   20,    0,    6, 4181, 4181,    0,   14,
       22,  864,   38, 2826,   45,   34,   48,   50,   53, 2799,
       17,  928,  119,  992,   13, 4181, 4181,    0, 1064,   52,
     1136, 1208,   64, 2793,   68,   94,   96,  103,  106, 2785,
      169,  146,   18, 4181, 4181,    0,  187,  195, 4181, 1272,
      119, 2779,  136,  113,  140,  115,  167, 2768,  244, 1336,
      265,   24, 4181, 4181,    0, 2822, 1408,  246, 4181, 4181,
     1480, 1552,  177, 2756,  210,  132,  215,  142,  240, 2747,

      319,   19, 2757, 4181, 4181, 4181, 4181,  320,  137,    0,
     2760, 2738,  371,  200, 2763,  261,  271,   29,   12, 2764,
     2756, 2734, 2749, 2744,    0,  340,  348,  265, 2703,  277,
      170,  280,  179,  285, 2695,  392,  315, 2681,  323,  326,
      330,  336,  360, 2667,  478,  550,  386,  404,  408,  411,
      414,  417,  420,  527, 1616, 1680,  668,  676,  685,    0,
       11,  348,  423,  398,  423, 2637,  459,  389,  471,  434,
      476, 2629,  516,  493, 2621,  502,  462,  505,  507,  532,
     2622, 1752, 1824, 1897, 1969,    0,  558,    0,    0,  583,
        0, 2660,    0,  585,  542, 2612,  545,  551,  574,  577,

      605, 2610,  637,  638,  617,  627,  637,  643,  646,  652,
      697,  779,  670,    0,  701,  746,  700, 2592,  713,  581,
      716,  607,  723, 2593,  755,  745, 2588,  767,  630,  770,
      639,  773, 2588,  810,  828,  777,  780,  783,  789,  792,
      795,  822,  887, 2033, 2097,  877,  888, 2621,    0, 2640,
     4181,  900, 4181, 2616,  855,  846, 2575,  877,  720,  889,
      725,  894, 2573, 2601,  897, 2563,  900,  786,  903,  797,
      906, 2561, 2169,  246, 2242,  969,  937,  910,  971,  977,
     2599, 2608,  924, 2549,  949,  915,  952,  917,  955, 2547,
      889,  958,  961,  968,  975,  978,  981,  986, 1049, 2557,

      999, 1008,  492, 2559, 2536, 2551, 2551, 2517, 2502, 1068,
     2514, 2482, 2490, 2468,  993, 1015, 1022, 1025, 1028, 1031,
     1034, 1093, 1102, 1037, 1042, 1045, 1116, 1170, 1180, 1218,
     2314, 1112, 1192, 4181, 1056, 1059, 1065, 1129, 1136, 1152,
     1157,  661, 1190,    0, 1214, 4181,    0, 2512, 1161, 2452,
     1230,  990, 1233, 1004, 1238, 2451, 1261,    0,    0,    0,
      970, 2387,    0, 1296, 1307, 1308, 2505, 1314, 1315, 1322,
     1326, 1359, 1384, 1388, 1355, 1384,    0,    0, 1243, 2446,
     1246, 1048, 1296, 1113, 1308, 2442, 2487, 2485, 1311, 1318,
     1365, 1369, 1375, 1382, 1391, 1304, 1369, 1394, 1397, 1400,

     1465, 1409, 1441, 1444, 1447, 1451, 1454, 1457, 1514, 1522,
     1463, 1466, 1471, 1531, 1565, 1595, 1603, 2459, 2455, 1474,
     1480, 1502, 1508, 1514, 1544, 1547,    0, 4181, 1228, 1607,
        0,    0,    0, 1061, 2532,    0,    0, 1640, 1636, 1635,
     1687, 2484, 1713, 1694, 1786, 1790, 1794, 1801, 1820, 1698,
     1729, 1229, 1262, 1565, 2375, 1588, 1149, 1595, 1249, 1617,
     2362, 1553, 1693, 1647, 1650, 1653, 1679, 1720, 1727, 1743,
      531, 1750, 1753, 1797, 2386, 2319, 1990,  891, 2342, 2316,
     2336, 2320, 2308, 2282, 1866, 2295, 2208, 2211, 2185, 1810,
     1813, 1816, 1994, 1998, 2002, 2011, 2018, 2024, 2028, 2044,

     1823, 1946, 1990, 2057,    0,    0, 1993, 2141, 2004, 1291,
     2007, 1348, 2011, 2138, 2167, 2163, 2017, 2020, 2023, 2027,
     2030, 2033, 2048, 2107, 1693, 2142,    0,    0,    0, 2156,
     2145, 2144, 1714, 2313, 2330, 2336, 2146, 2353, 2113, 2107,
     2084,    0, 2359, 2363, 2403, 2426, 2430, 2434, 2493, 2063,
     2066, 2069, 2072, 2075, 2078, 2084, 2096, 2133, 2140, 2300,
     1692, 2211, 2155, 2158, 2161, 2326, 2475, 2330, 2404, 2479,
     2504, 2045, 2164, 2169, 2286, 2354, 2332, 2509,    0,    0,
     1318, 2047, 2052, 2508, 2495, 2544, 2504, 2568, 2570, 2574,
     2531, 2036, 2020,    0, 2578, 2582, 2607, 2611, 2615, 2619,

     2644, 2294, 2340, 2356, 2368, 2384, 2411, 2423, 2481, 2485,
     2500,  879, 2660, 1973, 2685, 2691,   15, 1983, 1934, 1945,
     1946, 1919, 1922, 1856, 1817, 1822, 1715, 2695, 2707, 2711,
     2715, 2719, 2723, 2729, 2733, 2596, 2604, 2641, 2677, 2680,
     2686, 2689, 2692, 2697, 2701, 2569, 2759, 2763, 2769, 2773,
     2777, 2782, 2786, 2792, 2796, 2800, 2750, 2754, 2789, 1698,
     1387, 2863, 2867, 2871, 2875, 2879, 2883, 1707, 2882, 2886,
     2890, 2894, 2898, 2905, 2909, 2913, 2923, 2932, 2847, 2863,
     2916, 1299, 1676, 1190, 1684, 1652, 1679, 1655, 1616, 1595,
     1600, 1566, 1537, 1511, 2979, 2986, 2995, 2999, 3003, 3007,

     3012, 3017, 2961, 2964, 2967, 3025, 3029, 3034, 1745, 2145,
     3048, 3052, 3056, 3081, 3097, 3105, 1521, 3062, 3070, 3104,
     1303, 1476,  318, 1385, 1481, 1461, 1457, 1426, 1398, 1418,
     1380, 3113, 3118, 3125, 3133, 3145, 3140, 3149, 3153, 2916,
     3043, 3157, 3170, 3175, 3179, 3183, 3187, 1385, 2117, 1346,
     2363, 3240, 3312, 1362, 1332, 1310, 1273, 1280, 1242, 3191,
     3199, 3204, 3212, 3216, 3384, 3456, 3220, 3224, 3229, 3244,
     1495, 3528, 1610, 3600, 2058, 3206, 3000, 1219, 3173, 1403,
     3190, 1476, 3193, 1210, 2409, 3215, 3198, 1190, 3202, 1498,
     3205, 1576, 3227, 1164, 1146, 1133, 1101, 1088, 1097, 1082,

     3290, 3298, 3316, 3333, 2766, 2776, 3324, 3338, 3342, 3346,
     3672, 1725, 3294, 3234, 1049, 3290, 1724, 3293, 1735, 3306,
     1040, 3744, 1842, 3338, 3311, 1016, 3328, 1740, 3350, 1746,
     3353,  931, 2789, 3356,  925, 3359, 1792, 3362, 1825, 3365,
      910, 3368, 3371, 3374, 3377, 3380, 3383, 3400, 2912, 3405,
      890, 3408, 2099, 3414, 2258, 3417,  813, 3420, 3423, 3426,
     3429, 3432, 3435, 3438,  776,  729,  696,  655,  650,  596,
     3502, 3506, 3510, 3514, 3544, 3537, 3549, 3554, 2113, 3498,
      547, 3503, 2282, 3506, 2371, 3513,  540, 3517, 3520, 3523,
     3526, 3529, 3550, 3556, 2336, 3559,  533, 3562, 2380, 3565,

     2407, 3568,  479, 3571, 3574, 3577, 3580, 3583, 3586, 3589,
     3592, 3595, 3598, 3601, 3621, 3624, 3628, 3631, 3634, 3637,
     3640, 3643, 3646, 3649, 3652, 3655, 3658, 3661, 3664, 3667,
      494, 3730,  399,  405,  340, 3753, 3760, 3764, 3768, 3772,
     3776, 3720, 3723, 3729, 3732, 3735, 3738, 3744, 3756, 3760,
     3763, 3766, 3772, 3775, 3778, 3781, 3784, 3787, 3790, 3793,
     3796, 3799, 3802, 3805, 3808, 3811, 3814, 3877,  357,  277,
     3821, 3824, 3827, 3830, 3833, 3836,  281,  224,  202,  171,
      140,  102,   96,   46, 3899, 3903, 4181, 3908, 3917, 3926,
     3935, 3944, 3953, 3962, 3971,   18, 3977, 3986, 3994, 3998,

     4006, 4014,   10, 4020, 4029, 4038, 4046, 4052, 4060, 4067,
     4073, 4079, 4085, 4094, 4102, 4111, 4119, 4127, 4133, 4139,
     4147, 4153, 4159, 4165, 4171
    } ;

static yyconst flex_int16_t yy_def[1026] =
    {   0,
      988,  988,  989,  989,  990,  990,  991,  991,  992,  992,
      993,  993,  987,  987,  987,  987,  987,  994,  987,  987,
      987,  987,  987,  987,  987,  987,  987,  987,  995,  996,
      997,  996,  987,  987,  987,  987,  987,  987,  987,  987,
      987,  996,  996,  996,  987,  987,  987,  998,  999, 1000,
     1001,  999,  987,  987,  987,  987,  987,  987,  987,  987,
      987,   52,  987,  987,  987, 1002, 1003, 1004,  987, 1003,
      987,  987,  987,  987,  987,  987,  987,  987,  987, 1003,
     1003,  987,  987,  987, 1005, 1006, 1007, 1008,  987,  987,
     1009, 1007,  987,  987,  987,  987,  987,  987,  987,  987,

      987,   92,   92,  987,  987,  987,  987,  987,  987,  994,
      987,  987,  987,  987,  987,  987,  987,  987,  987,  987,
      987,  987,  987,  987,  995,  996,  997,  987,  987,  987,
      987,  987,  987,  987,  987,  996,  987,  987,  987,  987,
      987,  987,  987,  987,  996,  996,  987,  987,  987,  987,
      987,  987,  987,  987,  996,  996,  996,  996,  996,  998,
      987,   52, 1000,   52,  987,  987,  987,  987,  987,  987,
      987,  987,   52,  987,  987,  987,  987,  987,  987,  987,
      987, 1010, 1010,  987, 1001,  185, 1011,  185,  185,  185,
      183,  987,  185,   52,  987,  987,  987,  987,  987,  987,

      987,  987,   52,   52,  987,  987,  987,  987,  987,  987,
      987,  987,   52, 1002, 1003, 1004,  987,  987,  987,  987,
      987,  987,  987,  987, 1003,  987,  987,  987,  987,  987,
      987,  987,  987, 1003, 1003,  987,  987,  987,  987,  987,
      987,  987,  987, 1003, 1003, 1003,  987,  987, 1005, 1006,
      987,  987,  987,   92, 1008,  987,  987,  987,  987,  987,
      987,  987,  987,   92,  987,  987,  987,  987,  987,  987,
      987,  987, 1009,  273,  987,  273, 1012,  273,  273,  273,
      987,  987,  987,  987,  987,  987,  987,  987,  987,  987,
       92,  987,  987,  987,  987,  987,  987,  987,  987,  987,

      987,   92,   92,  987,  987,  987,  987,  987,  987,  987,
      987,  987,  987,  987,  987,  987,  987,  987,  987,  987,
      987,  996,  996,  987,  987,  987,  996,  996,  996,  996,
      996,  331,  331,  987,  987,  987,  987,  987,  987,  987,
      987,  183, 1013,  183,  183,  987,  183,  987,  987,  987,
      987,  987,  987,  987,  987,  987, 1014,  184,  184,  184,
      184, 1015,  184,  184, 1014, 1014,  184, 1014, 1014, 1014,
     1014, 1014, 1014, 1014, 1014,  185,  185,  185,  987,  987,
      987,  987,  987,  987,  987,  987,  185,  185,  987,  987,
      987,  987,  987,  987,  987,   52,   52,  987,  987,  987,

       52,  987,  987,  987,  987,  987,  987,  987, 1003, 1003,
      987,  987,  987, 1003, 1003, 1003, 1003, 1003,  987,  987,
      987,  987,  987,  987,  987,  987,  273,  987,  273, 1016,
      275,  275,  275,  275, 1017,  275,  275,  275, 1016, 1016,
     1016,  275, 1016, 1016, 1016, 1016, 1016, 1016, 1016, 1016,
      273,  273,  273,  987,  987,  987,  987,  987,  987,  987,
      987,  273,  273,  987,  987,  987,  987,  987,  987,  987,
       92,  987,  987,  987,  987,  987,   92,   92,  987,  987,
      987,  987,  987,  987,  987,  987,  987,  987,  987,  987,
      987,  987,  331,  331,  331,  331,  331,  331,  331,  331,

      987,  987,  987,  183,  183,  183,  987,  987,  987,  987,
      987,  987,  987,  987,  183,  183,  987,  987,  987,  987,
      987,  987,  987, 1014, 1014,  184,  184,  184,  183,  184,
      184, 1014, 1014, 1014, 1014, 1014, 1014, 1014, 1014,  184,
      184,  184, 1014, 1014, 1014, 1014, 1014, 1014, 1014,  987,
      987,  987,  987,  987,  987,  987,  987,  987,  987,   52,
       52,  987,  987,  987,  987,  418,  418,  418,  418,  418,
      418,  987,  987,  987,  987, 1016, 1016,  275,  275,  275,
      273,  275,  275, 1016, 1016, 1016, 1016, 1016, 1016, 1016,
     1016,  275,  275,  275, 1016, 1016, 1016, 1016, 1016, 1016,

     1016,  987,  987,  987,  987,  987,  987,  987,  987,  987,
      987,   92,  987,  987,  987,  987,   92,  987,  987,  987,
      987,  987,  987,  987,  987,  987,  987,  331,  331,  331,
      331,  331,  331,  331,  331,  987,  987,  987,  987,  987,
      987,  987,  987,  987,  987, 1014, 1014, 1014, 1014, 1014,
     1014, 1014, 1014, 1014, 1014, 1014,  987,  987,  987,   52,
       52,  418,  418,  418,  418,  418,  418,  987, 1016, 1016,
     1016, 1016, 1016, 1016, 1016, 1016, 1016, 1016,  987,  987,
      987,   92,  987,   92,  987,  987,  987,  987,  987,  987,
      987,  987,  987,  987,  331,  331,  331,  331,  331,  331,

      331,  331,  987,  987,  987, 1014, 1014, 1014,   52,   52,
      418,  418,  418,  418,  418,  418,  987, 1016, 1016, 1016,
       92,  987,   92,  987,  987,  987,  987,  987,  987,  987,
      987,  987,  331,  331,  331,  331,  331,  331,  331,   52,
       52,  418,  418,  418,  418,  418,  418,  987,   92,  987,
       92, 1018, 1019,  987,  987,  987,  987,  987,  987,  987,
      331,  331,  331,  331, 1018, 1019,  418,  418,  418,  418,
      987, 1020,  987, 1021,  765, 1022,  987,  987,  987,  987,
      987,  987,  987,  987,  766, 1023,  987,  987,  987,  987,
      987,  987,  987,  987,  987,  987,  987,  987,  987,  987,

      331,  331,  331,  331,  765,  766,  418,  418,  418,  418,
     1020,  811, 1024,  987,  987,  987,  987,  987,  987,  987,
      987, 1021,  822, 1025,  987,  987,  987,  987,  987,  987,
      987,  987,  765,  987,  987,  987,  987,  987,  987,  987,
      987,  987,  987,  987,  987,  987,  987,  987,  766,  987,
      987,  987,  987,  987,  987,  987,  987,  987,  987,  987,
      987,  987,  987,  987,  987,  987,  987,  987,  987,  987,
      331,  331,  331,  331,  418,  418,  418,  418,  811,  987,
      987,  987,  987,  987,  987,  987,  987,  987,  987,  987,
      987,  987,  987,  987,  822,  987,  987,  987,  987,  987,

      987,  987,  987,  987,  987,  987,  987,  987,  987,  987,
      987,  987,  987,  987,  987,  987,  987,  987,  987,  987,
      987,  987,  987,  987,  987,  987,  987,  987,  987,  987,
      987,  987,  987,  987,  987,  331,  331,  331,  418,  418,
      418,  987,  987,  987,  987,  987,  987,  987,  987,  987,
      987,  987,  987,  987,  987,  987,  987,  987,  987,  987,
      987,  987,  987,  987,  987,  987,  987,  987,  987,  987,
      987,  987,  987,  987,  987,  987,  987,  987,  987,  987,
      987,  987,  987,  987,  987,  987,    0,  987,  987,  987,
      987,  987,  987,  987,  987,  987,  987,  987,  987,  987,

      987,  987,  987,  987,  987,  987,  987,  987,  987,  987,
      987,  987,  987,  987,  987,  987,  987,  987,  987,  987,
      987,  987,  987,  987,  987
    } ;

static yyconst flex_int16_t yy_nxt[4255] =
    {   0,
      987,   15,   16,   17,   15,   18,  108,  108,  113,  108,
      108,  113,  161,  376,  108,  161,  215,  108,  154,  108,
      377,  154,  108,  127,  126,  247,  111,  118,  247,  334,
      987,   19,  114,  115,  123,  987,  109,  109,  109,  116,
      117,  254,  114,  115,  109,  254,  112,  119,  109,  109,
      117,  987,  302,  306,  124,  248,  307,  308,  121,  309,
      684,   20,   20,   20,   20,   20,   20,   20,   20,   20,
       20,   20,   20,   21,   16,   17,   21,   18,  122,  128,
      129,  130,  131,  132,  133,  134,  135,  137,  138,  139,
      140,  141,  142,  143,  144,  149,  149,   22,   23,  126,

      126,  126,  985,   19,   24,   25,  148,  148,  148,  150,
      150,  150,  151,  151,  152,  152,  152,  174,  175,  176,
      177,  178,  179,  180,  181,  162,  162,  162,  127,  206,
      206,  206,  985,   20,   20,   20,   20,   20,   20,   20,
       20,   20,   20,   20,   20,   14,   26,   27,   28,   26,
       29,   14,  157,  984,   31,  207,  207,  208,  208,  208,
       14,   14,   14,  111,   14,  209,  209,  210,  210,  210,
      212,  983,  162,  212,  238,  238,   32,  240,  240,  213,
      215,  215,  215,  112,  128,  129,  130,  131,  132,  133,
      134,  135,  162,  294,  294,  115,  216,  237,  237,  237,

      109,  239,  239,  239,  296,  296,   20,   20,   20,   20,
       33,   34,   35,   36,   37,   38,   39,   40,   14,   41,
       27,   28,   41,   29,   14,  982,  118,   31,  241,  241,
      241,  149,  149,   14,   14,   14,  981,   14,  254,  254,
      254,  151,  151,   42,   43,  243,  119,  429,  243,   32,
      429,   44,  217,  218,  219,  220,  221,  222,  223,  224,
      226,  227,  228,  229,  230,  231,  232,  233,  980,  114,
      115,  293,  293,  293,  216,  109,  295,  295,  295,   20,
       20,   20,   20,   33,   34,   35,   36,   37,   38,   39,
       40,   14,   45,   46,   47,   45,   48,   14,  246,  121,

       50,  297,  297,  297,  979,  123,   14,   14,   14,   51,
       14,  265,  266,  267,  268,  269,  270,  271,  272,  122,
      299,  108,   52,  299,  108,  124,  126,  126,  126,  978,
      217,  218,  219,  220,  221,  222,  223,  224,  148,  148,
      148,  150,  150,  150,  254,  300,  152,  152,  152,  127,
      301,  109,   20,   20,   20,   20,   53,   54,   55,   56,
       57,   58,   59,   60,   14,   61,   46,   47,   61,   48,
       14,  751,  113,   50,  162,  113,  136,  136,  136,   14,
       14,   14,   51,   14,  316,  316,  316,  317,  317,  977,
       62,  318,  318,  318,  162,   52,  114,  115,  319,  319,

      970,  127,  109,  116,  117,  128,  129,  130,  131,  132,
      133,  134,  135,  137,  138,  139,  140,  141,  142,  143,
      144,  320,  320,  320,  162,   20,   20,   20,   20,   53,
       54,   55,   56,   57,   58,   59,   60,   14,   63,   64,
       65,   63,   66,   14,  162,  969,   68,  126,  126,  126,
      207,  207,   14,   69,   14,  932,   14,  128,  129,  130,
      131,  132,  133,  134,  135,  126,  126,  126,   70,  126,
      126,  126,  126,  126,  126,  324,  324,  324,  325,  325,
      325,  326,  326,  326,  162,  162,  162,  127,  174,  175,
      176,  177,  178,  179,  180,  181,  209,  209,   20,   20,

       20,   20,   71,   72,   73,   74,   75,   76,   77,   78,
       14,   79,   64,   65,   79,   66,   14,  322,  254,   68,
      206,  206,  206,  337,  337,   14,   69,   14,  154,   14,
      932,  154,  208,  208,  208,   80,   81,  210,  210,  210,
      958,   70,  162,  128,  129,  130,  131,  132,  133,  134,
      135,  478,  114,  115,  173,  173,  173,  254,  109,  127,
      117,  612,  162,  336,  336,  336,  338,  338,  338,  339,
      339,   20,   20,   20,   20,   71,   72,   73,   74,   75,
       76,   77,   78,   14,   82,   83,   84,   82,   85,   86,
      387,  191,   88,  340,  340,  340,  952,  388,   89,   90,

       91,  948,   14,  185,  185,  185,  390,  390,  390,  323,
      942,  162,  391,  391,   92,  128,  129,  130,  131,  132,
      133,  134,  135,  379,  380,  381,  382,  383,  384,  385,
      386,  162,  935,  189,  189,  392,  392,  392,  189,  393,
      393,  189,  238,  238,   20,   20,   20,   20,   93,   94,
       95,   96,   97,   98,   99,  100,   14,  101,   83,   84,
      101,   85,   86,  162,  162,   88,  394,  394,  394,  240,
      240,   89,   90,   91,  504,   14,  396,  127,  162,  162,
      162,  505,  102,  162,  162,  127,  934,  103,  162,  162,
      162,  404,  404,  331,  127,  401,  162,  397,  162,  162,

      162,  406,  406,  332,  162,  162,  162,  398,  398,  398,
      216,  932,  333,  399,  399,  399,  162,   20,   20,   20,
       20,   93,   94,   95,   96,   97,   98,   99,  100,  105,
      106,  105,  105,  128,  129,  130,  131,  132,  133,  134,
      135,  128,  129,  130,  131,  132,  133,  134,  135,  933,
      128,  129,  130,  131,  132,  133,  134,  135,  400,  400,
      400,  215,  215,  215,  216,  932,  217,  218,  219,  220,
      221,  222,  223,  224,  237,  237,  237,  239,  239,  239,
      212,  294,  294,  212,  241,  241,  241,  296,  296,  107,
      107,  107,  107,  107,  107,  107,  107,  107,  107,  107,

      107,  105,  106,  105,  105,  115,  225,  225,  225,  931,
      109,  226,  227,  228,  229,  230,  231,  232,  233,  216,
      217,  218,  219,  220,  221,  222,  223,  224,  403,  403,
      403,  405,  405,  405,  407,  407,  407,  216,  215,  215,
      215,  215,  215,  215,  215,  215,  215,  422,  422,  409,
      215,  215,  215,  411,  411,  411,  412,  412,  412,  424,
      424,  107,  107,  107,  107,  107,  107,  107,  107,  107,
      107,  107,  107,  127,  927,  217,  218,  219,  220,  221,
      222,  223,  224,  413,  413,  413,  216,  410,  243,  247,
      145,  243,  247,  217,  218,  219,  220,  221,  222,  223,

      224,  252,  418,  682,  252,  254,  253,  254,  254,  254,
      146,  429,  114,  115,  429,  254,  253,  254,  109,  248,
      265,  266,  267,  268,  269,  270,  271,  272,  471,  128,
      129,  130,  131,  132,  133,  134,  135,  127,  293,  293,
      293,  617,  217,  218,  219,  220,  221,  222,  223,  224,
      295,  295,  295,  921,  155,  297,  297,  297,  264,  264,
      264,  421,  421,  421,  423,  423,  423,  425,  425,  425,
      429,  917,  429,  429,  156,  429,  466,  466,  429,  468,
      468,  429,  451,  526,  462,  274,  274,  274,  911,  452,
      527,  463,  910,  128,  129,  130,  131,  132,  133,  134,

      135,  127,  454,  455,  456,  457,  458,  459,  460,  461,
      465,  465,  465,  467,  467,  467,  469,  469,  469,  254,
      254,  254,  254,  254,  254,  419,  158,  279,  279,  254,
      254,  254,  279,  477,  254,  279,  254,  254,  254,  472,
      472,  472,  473,  473,  473,  476,  159,  474,  474,  474,
      299,  519,  519,  299,  136,  136,  136,  128,  129,  130,
      131,  132,  133,  134,  135,  161,  521,  521,  161,  485,
      485,  485,  485,  163,  578,  300,  136,  136,  136,  904,
      301,  579,  164,  136,  136,  136,  136,  136,  136,  490,
      490,  490,  491,  491,  491,  492,  492,  492,  126,  126,

      126,  894,  127,  126,  126,  126,  126,  126,  126,  552,
      552,  127,  888,  987,  987,  987,  987,  173,  173,  173,
      173,  173,  173,  493,  870,  127,  173,  173,  173,  165,
      166,  167,  168,  169,  170,  171,  172,  182,  183,  869,
      182,  868,  184,  499,  186,  187,  188,  495,  189,  190,
      188,  191,  494,  192,  193,  867,  188,  194,  128,  129,
      130,  131,  132,  133,  134,  135,  866,  128,  129,  130,
      131,  132,  133,  134,  135,  554,  554,  188,  188,  127,
      865,  128,  129,  130,  131,  132,  133,  134,  135,  127,
      173,  173,  173,  987,  987,  987,  987,  501,  501,  501,

      496,  195,  196,  197,  198,  199,  200,  201,  202,  161,
      604,  604,  161,  502,  502,  502,  254,  163,  503,  503,
      503,  515,  183,  183,  183,  864,  164,  127,  516,  429,
      429,  497,  429,  429,  203,  128,  129,  130,  131,  132,
      133,  134,  135,  500,  723,  128,  129,  130,  131,  132,
      133,  134,  135,  858,  204,  507,  508,  509,  510,  511,
      512,  513,  514,  429,  344,  344,  429,  191,  498,  344,
      524,  848,  344,  165,  166,  167,  168,  169,  170,  171,
      172,  216,  842,  128,  129,  130,  131,  132,  133,  134,
      135,  518,  518,  518,  520,  520,  520,  800,  234,  522,

      522,  522,  525,  540,  378,  378,  378,  551,  551,  551,
      541,  606,  606,  191,  505,  799,  524,  524,  235,  429,
      191,  191,  429,  524,  524,  254,  358,  798,  191,  254,
      162,  524,  191,  721,  560,  524,  749,  217,  218,  219,
      220,  221,  222,  223,  224,  216,  363,  363,  525,  525,
      162,  363,  638,  638,  363,  525,  525,  553,  553,  553,
      797,  191,  244,  525,  524,  191,  796,  525,  524,  555,
      555,  555,  185,  185,  185,  360,  360,  360,  543,  185,
      185,  185,  245,  544,  544,  544,  752,  545,  545,  752,
      191,  387,  795,  524,  191,  162,  525,  524,  388,  773,

      525,  217,  218,  219,  220,  221,  222,  223,  224,  252,
      640,  640,  252,  162,  253,  162,  549,  255,  771,  561,
      546,  546,  546,  759,  253,  525,  185,  185,  185,  525,
      185,  185,  185,  162,  189,  189,  557,  557,  557,  189,
      758,  710,  189,  558,  558,  558,  547,  547,  757,  548,
      548,  548,  559,  559,  559,  162,  162,  162,  162,  162,
      162,  162,  162,  162,  844,  844,  562,  485,  485,  562,
      225,  225,  225,  256,  257,  258,  259,  260,  261,  262,
      263,  273,  753,  756,  273,  753,  275,  755,  276,  277,
      278,  162,  279,  280,  278,  278,  811,  281,  754,  811,

      278,  282,  225,  225,  225,  225,  225,  225,  225,  225,
      225,  162,  563,  563,  563,  564,  564,  564,  565,  565,
      565,  278,  278,  216,  215,  215,  215,  215,  215,  215,
      750,  216,  215,  215,  215,  264,  264,  264,  846,  846,
      216,  264,  264,  264,  566,  283,  284,  285,  286,  287,
      288,  289,  290,  252,  429,  748,  252,  429,  253,  860,
      860,  255,  568,  264,  264,  264,  451,  732,  253,  264,
      264,  264,  567,  732,  216,  573,  573,  573,  291,  217,
      218,  219,  220,  221,  222,  223,  224,  217,  218,  219,
      220,  221,  222,  223,  224,  569,  217,  218,  219,  220,

      221,  222,  223,  224,  216,  574,  574,  574,  575,  575,
      575,  822,  216,  278,  822,  731,  576,  256,  257,  258,
      259,  260,  261,  262,  263,  127,  453,  453,  453,  730,
      217,  218,  219,  220,  221,  222,  223,  224,  862,  862,
      327,  278,  278,  328,  576,  576,  570,  592,  577,  603,
      603,  603,  729,  571,  593,  436,  605,  605,  605,  728,
      217,  218,  219,  220,  221,  222,  223,  224,  217,  218,
      219,  220,  221,  222,  223,  224,  577,  577,  607,  607,
      607,  128,  129,  130,  131,  132,  133,  134,  135,  127,
      437,  437,  727,  452,  429,  437,  576,  429,  437,  358,

      278,  726,  524,  576,  278,  725,  451,  576,  274,  274,
      274,  274,  274,  274,  274,  274,  274,  724,  162,  278,
      191,  722,  576,  524,  162,  329,  987,  330,  577,  987,
      429,  717,  709,  429,  525,  577,  462,  661,  162,  577,
      274,  274,  274,  463,  162,  128,  129,  130,  131,  132,
      133,  134,  135,  182,  577,  525,  182,  595,  184,  601,
      342,  343,  191,  694,  344,  345,  191,  191,  346,  192,
      347,  162,  191,  348,  433,  433,  433,  647,  740,  279,
      279,  609,  609,  609,  279,  890,  890,  279,  610,  610,
      610,  162,  278,  191,  191,  576,  278,  892,  892,  576,

      278,  906,  906,  576,  611,  611,  611,  278,  908,  908,
      576,  254,  254,  254,  254,  254,  254,  349,  350,  351,
      352,  353,  354,  355,  356,  191,  278,  577,  191,  576,
      184,  577,  342,  343,  191,  577,  344,  345,  191,  191,
      346,  192,  577,  987,  191,  348,  987,  596,  596,  596,
      693,  597,  597,  913,  913,  598,  598,  598,  254,  254,
      254,  577,  692,  599,  599,  191,  191,  485,  485,  485,
      485,  136,  136,  136,  136,  136,  136,  136,  136,  136,
      691,  600,  600,  600,  173,  173,  173,  915,  915,  349,
      350,  351,  352,  353,  354,  355,  356,  357,  358,  183,

      357,  358,  357,  359,  360,  361,  362,  358,  360,  363,
      364,  358,  358,  346,  365,  360,  357,  358,  366,  360,
      360,  360,  360,  360,  360,  360,  360,  360,  360,  360,
      360,  360,  360,  360,  360,  360,  360,  360,  367,  358,
      360,  360,  360,  360,  360,  360,  360,  360,  360,  360,
      360,  360,  360,  360,  360,  360,  360,  360,  357,  357,
      357,  357,  368,  369,  370,  371,  372,  373,  374,  375,
      182,  183,  690,  182,  689,  184,  688,  186,  187,  188,
      687,  189,  190,  188,  191,  346,  192,  193,  686,  188,
      194,  615,  616,  616,  615,  987,  987,  987,  987,  987,

      987,  987,  987,  987,  987,  987,  987,  173,  173,  173,
      188,  188,  987,  987,  987,  987,  254,  685,  628,  987,
      987,  987,  987,  683,  630,  987,  987,  987,  987,  987,
      987,  987,  987,  578,  195,  196,  197,  198,  199,  200,
      201,  202,  216,  629,  631,  987,  987,  987,  987,  578,
      634,  173,  173,  173,  506,  506,  506,  414,  594,  987,
      415,  632,  987,  430,  515,  637,  637,  637,  639,  639,
      639,  516,  641,  641,  641,  668,  775,  633,  183,  183,
      183,  183,  183,  183,  183,  183,  183,  635,  183,  183,
      183,  643,  643,  643,  644,  644,  644,  526,  217,  218,

      219,  220,  221,  222,  223,  224,  216,  344,  344,  645,
      645,  645,  344,  191,  987,  344,  524,  987,  772,  191,
      526,  772,  524,  357,  378,  378,  378,  378,  378,  378,
      378,  378,  378,  378,  378,  378,  657,  657,  657,  658,
      658,  658,  416,  254,  417,  659,  659,  659,  525,  540,
      191,  542,  191,  524,  525,  524,  541,  185,  185,  185,
      923,  923,  217,  218,  219,  220,  221,  222,  223,  224,
      427,  162,  646,  427,  653,  275,  504,  276,  277,  278,
      504,  279,  280,  278,  278,  525,  281,  525,  428,  278,
      282,  162,  363,  363,  185,  185,  185,  363,  741,  642,

      363,  185,  185,  185,  636,  528,  528,  528,  651,  651,
      278,  278,  562,  485,  485,  562,  225,  225,  225,  225,
      225,  225,  225,  225,  225,  264,  264,  264,  627,  334,
      264,  264,  264,  626,  283,  284,  285,  286,  287,  288,
      289,  290,  430,  431,  274,  430,  431,  430,  432,  433,
      434,  435,  436,  433,  437,  438,  436,  436,  625,  439,
      433,  440,  436,  441,  433,  433,  433,  433,  433,  433,
      433,  433,  433,  433,  433,  433,  433,  433,  433,  433,
      433,  433,  433,  442,  436,  433,  433,  433,  433,  433,
      433,  433,  433,  433,  433,  433,  433,  433,  433,  433,

      433,  433,  433,  430,  430,  430,  430,  443,  444,  445,
      446,  447,  448,  449,  450,  485,  485,  485,  485,  191,
      925,  925,  524,  127,  660,  624,  162,  987,  987,  987,
      987,  987,  987,  987,  987,  623,  191,  987,  436,  524,
      987,  576,  191,  944,  944,  524,  162,  264,  264,  264,
      662,  622,  664,  621,  525,  453,  453,  453,  620,  191,
      278,  619,  524,  576,  774,  191,  618,  774,  524,  191,
      430,  525,  524,  577,  648,  648,  648,  525,  614,  128,
      129,  130,  131,  132,  133,  134,  135,  357,  357,  254,
      357,  649,  649,  529,  525,  577,  530,  650,  650,  650,

      525,  453,  453,  453,  525,  987,  987,  987,  987,  191,
      987,  613,  524,  987,  652,  652,  652,  453,  453,  453,
      360,  360,  360,  608,  360,  360,  360,  785,  531,  453,
      453,  453,  191,  946,  946,  524,  191,  665,  602,  524,
      191,  954,  954,  524,  525,  679,  679,  679,  357,  357,
      357,  357,  532,  533,  534,  535,  536,  537,  538,  539,
      485,  485,  485,  485,  360,  360,  360,  525,  216,  956,
      956,  525,  680,  680,  680,  525,  987,  987,  987,  987,
      987,  987,  987,  987,  681,  681,  681,  360,  360,  360,
      594,  654,  654,  654,  572,  655,  655,  655,  376,  191,

      376,  278,  524,  556,  576,  987,  987,  987,  987,  550,
      278,  542,  523,  576,  278,  517,  592,  576,  191,  489,
      663,  488,  666,  593,  217,  218,  219,  220,  221,  222,
      223,  224,  430,  430,  525,  430,  577,  278,  581,  487,
      576,  582,  274,  274,  274,  577,  274,  274,  274,  577,
      278,  486,  484,  576,  656,  656,  656,  667,  669,  437,
      437,  274,  274,  274,  437,  671,  671,  437,  483,  580,
      580,  580,  577,  583,  278,  191,  278,  576,  524,  576,
      278,  482,  481,  576,  278,  577,  480,  576,  278,  479,
      475,  576,  675,  430,  430,  430,  430,  584,  585,  586,

      587,  588,  589,  590,  591,  670,  670,  670,  470,  577,
      525,  577,  464,  278,  278,  577,  576,  278,  278,  577,
      576,  278,  426,  577,  576,  278,  420,  254,  576,  672,
      672,  672,  673,  673,  298,  674,  674,  674,  292,  433,
      433,  433,  254,  433,  433,  433,  251,  419,  577,  408,
      278,  402,  577,  576,  242,  236,  577,  506,  506,  506,
      577,  616,  616,  616,  616,  506,  506,  506,  433,  433,
      433,  395,  433,  433,  433,  389,  676,  676,  676,  191,
      677,  677,  677,  341,  335,  577,  615,  616,  616,  615,
      211,  253,  616,  616,  616,  616,  987,  987,  987,  987,

      205,  253,  506,  506,  506,  678,  678,  678,  987,  987,
      987,  987,  987,  987,  987,  987,  987,  987,  987,  987,
      987,  987,  987,  987,  987,  987,  987,  987,  321,  695,
      987,  987,  987,  987,  987,  987,  987,  987,  506,  506,
      506,  703,  703,  703,  315,  698,  697,  704,  704,  704,
      705,  705,  705,  183,  183,  183,  153,  701,  183,  183,
      183,  696,  183,  183,  183,  191,  147,  987,  524,  191,
      987,  314,  524,  700,  699,  191,  313,  987,  524,  191,
      987,  702,  524,  191,  775,  312,  524,  311,  191,  310,
      987,  524,  191,  987,  785,  524,  120,  305,  191,  304,

      525,  524,  191,  303,  525,  524,  191,  775,  298,  524,
      525,  378,  378,  378,  525,  378,  378,  378,  525,  292,
      528,  528,  528,  525,  528,  528,  528,  525,  251,  242,
      528,  528,  528,  525,  528,  528,  528,  525,  706,  706,
      706,  525,  236,  707,  707,  707,  211,  708,  708,  708,
      378,  378,  378,  360,  360,  360,  205,  360,  360,  360,
      153,  360,  360,  360,  987,  987,  987,  987,  987,  987,
      987,  987,  987,  987,  987,  987,  987,  987,  987,  987,
      987,  987,  987,  987,  987,  987,  987,  987,  278,  147,
      120,  576,  278,  987,  987,  576,  278,  711,  987,  576,

      278,  987,  987,  576,  278,  714,  713,  576,  453,  453,
      453,  278,  987,  987,  576,  278,  987,  765,  576,  278,
      765,  712,  576,  577,  453,  453,  453,  577,  987,  278,
      785,  577,  576,  716,  715,  577,  987,  987,  278,  577,
      987,  576,  162,  580,  580,  580,  577,  580,  580,  580,
      577,  580,  580,  580,  577,  580,  580,  580,  987,  718,
      718,  718,  162,  987,  577,  987,  719,  719,  719,  987,
      720,  720,  720,  577,  433,  433,  433,  453,  453,  453,
      987,  987,  987,  987,  433,  433,  433,  987,  987,  987,
      987,  987,  987,  433,  433,  433,  987,  987,  987,  987,

      987,  987,  987,  987,  987,  987,  987,  987,  987,  987,
      987,  987,  733,  987,  987,  987,  987,  735,  987,  987,
      987,  987,  506,  506,  506,  506,  506,  506,  506,  506,
      506,  191,  987,  987,  524,  191,  736,  987,  524,  734,
      191,  987,  987,  524,  766,  987,  737,  766,  739,  987,
      987,  987,  987,  987,  987,  987,  987,  987,  987,  987,
      987,  775,  775,  775,  738,  987,  525,  987,  278,  162,
      525,  576,  987,  739,  987,  525,  278,  987,  744,  576,
      987,  742,  987,  987,  987,  987,  528,  528,  528,  162,
      528,  528,  528,  987,  987,  528,  528,  528,  987,  987,

      987,  987,  987,  577,  987,  743,  987,  987,  987,  987,
      278,  577,  987,  576,  760,  760,  760,  760,  745,  752,
      987,  987,  752,  580,  580,  580,  753,  987,  987,  753,
      987,  580,  580,  580,  987,  987,  987,  987,  987,  987,
      746,  987,  987,  987,  987,  577,  987,  987,  987,  987,
      987,  987,  987,  987,  760,  760,  760,  760,  752,  987,
      987,  752,  747,  987,  987,  580,  580,  580,  987,  987,
      761,  753,  987,  987,  753,  762,  987,  987,  987,  987,
      987,  987,  987,  987,  987,  987,  987,  987,  987,  987,
      987,  987,  760,  760,  760,  760,  987,  763,  987,  764,

      987,  987,  987,  987,  987,  987,  987,  987,  987,  768,
      987,  987,  767,  987,  987,  987,  987,  987,  987,  987,
      987,  987,  987,  987,  987,  987,  987,  987,  987,  801,
      987,  987,  987,  987,  843,  843,  843,  770,  802,  987,
      769,  752,  987,  987,  752,  987,  987,  987,  987,  776,
      807,  845,  845,  845,  847,  847,  847,  987,  808,  785,
      785,  785,  803,  859,  859,  859,  861,  861,  861,  987,
      804,  834,  835,  836,  837,  838,  839,  840,  841,  809,
      850,  851,  852,  853,  854,  855,  856,  857,  863,  863,
      863,  987,  987,  987,  987,  812,  812,  812,  810,  987,

      987,  987,  987,  987,  987,  777,  778,  779,  780,  781,
      782,  783,  784,  753,  987,  987,  753,  987,  987,  987,
      987,  786,  987,  987,  871,  987,  987,  987,  987,  987,
      987,  872,  987,  987,  987,  987,  987,  987,  987,  987,
      987,  987,  987,  987,  987,  987,  987,  987,  987,  987,
      987,  889,  889,  889,  891,  891,  891,  987,  875,  880,
      881,  882,  883,  884,  885,  886,  887,  893,  893,  893,
      873,  876,  823,  823,  823,  987,  987,  787,  788,  789,
      790,  791,  792,  793,  794,  765,  874,  987,  765,  905,
      905,  905,  987,  776,  987,  987,  877,  987,  987,  878,

      987,  987,  805,  896,  897,  898,  899,  900,  901,  902,
      903,  907,  907,  907,  909,  909,  909,  833,  833,  833,
      912,  912,  912,  914,  914,  914,  916,  916,  916,  775,
      775,  775,  775,  775,  775,  775,  775,  775,  775,  775,
      775,  918,  918,  918,  919,  919,  919,  987,  987,  777,
      778,  779,  780,  781,  782,  783,  784,  766,  987,  987,
      766,  920,  920,  920,  987,  786,  849,  849,  849,  922,
      922,  922,  987,  987,  806,  924,  924,  924,  926,  926,
      926,  785,  785,  785,  785,  785,  785,  785,  785,  785,
      785,  785,  785,  928,  928,  928,  929,  929,  929,  930,

      930,  930,  987,  987,  987,  987,  987,  987,  987,  987,
      987,  987,  987,  987,  987,  987,  987,  987,  987,  987,
      987,  787,  788,  789,  790,  791,  792,  793,  794,  772,
      987,  987,  772,  987,  253,  936,  987,  813,  987,  987,
      987,  987,  937,  987,  253,  987,  987,  987,  987,  987,
      987,  987,  987,  987,  987,  987,  987,  987,  987,  879,
      879,  879,  987,  938,  943,  943,  943,  945,  945,  945,
      937,  987,  987,  940,  947,  947,  947,  939,  812,  812,
      812,  812,  812,  812,  812,  812,  812,  812,  812,  812,
      949,  949,  949,  814,  815,  816,  817,  818,  819,  820,

      821,  774,  941,  987,  774,  987,  253,  987,  987,  824,
      940,  950,  950,  950,  987,  987,  253,  951,  951,  951,
      895,  895,  895,  953,  953,  953,  955,  955,  955,  957,
      957,  957,  823,  823,  823,  823,  823,  823,  823,  823,
      823,  823,  823,  823,  959,  959,  959,  960,  960,  960,
      961,  961,  961,  833,  833,  833,  833,  833,  833,  833,
      833,  833,  833,  833,  833,  825,  826,  827,  828,  829,
      830,  831,  832,  811,  987,  987,  811,  987,  987,  987,
      987,  813,  962,  962,  962,  963,  963,  963,  987,  964,
      964,  964,  775,  775,  775,  775,  775,  775,  775,  775,

      775,  849,  849,  849,  849,  849,  849,  849,  849,  849,
      849,  849,  849,  965,  965,  965,  966,  966,  966,  967,
      967,  967,  785,  785,  785,  785,  785,  785,  785,  785,
      785,  968,  968,  968,  968,  987,  987,  814,  815,  816,
      817,  818,  819,  820,  821,  822,  987,  987,  822,  987,
      987,  987,  987,  824,  987,  987,  987,  987,  987,  987,
      987,  968,  968,  968,  968,  987,  987,  987,  987,  987,
      987,  987,  987,  968,  968,  968,  968,  987,  987,  987,
      987,  879,  879,  879,  879,  879,  879,  987,  987,  937,
      879,  879,  879,  879,  879,  879,  971,  971,  971,  972,

      972,  972,  987,  987,  940,  973,  973,  973,  987,  825,
      826,  827,  828,  829,  830,  831,  832,  812,  812,  812,
      937,  812,  812,  812,  812,  812,  812,  895,  895,  895,
      987,  987,  940,  895,  895,  895,  895,  895,  895,  895,
      895,  895,  974,  974,  974,  975,  975,  975,  976,  976,
      976,  823,  823,  823,  823,  823,  823,  823,  823,  823,
      833,  833,  833,  833,  833,  833,  833,  833,  833,  849,
      849,  849,  849,  849,  849,  849,  849,  849,  968,  968,
      968,  968,  879,  879,  879,  879,  879,  879,  879,  879,
      879,  895,  895,  895,  895,  895,  895,  895,  895,  895,

      986,  986,  986,  986,  986,  986,  986,  986,   14,   14,
       14,   14,   14,   14,   14,   14,   14,   30,   30,   30,
       30,   30,   30,   30,   30,   30,   49,   49,   49,   49,
       49,   49,   49,   49,   49,   67,   67,   67,   67,   67,
       67,   67,   67,   67,   87,   87,   87,   87,   87,   87,
       87,   87,   87,  104,  104,  104,  104,  104,  104,  104,
      104,  104,  110,  110,  987,  110,  110,  110,  110,  110,
      110,  125,  125,  987,  125,  125,  125,  125,  125,  125,
      136,  136,  136,  136,  136,  136,  160,  160,  987,  160,
      160,  160,  160,  160,  160,  162,  987,  162,  987,  987,

      162,  173,  173,  173,  173,  173,  173,  185,  185,  185,
      987,  185,  185,  185,  214,  214,  987,  214,  214,  214,
      214,  214,  214,  225,  225,  225,  225,  225,  225,  249,
      249,  987,  249,  249,  249,  249,  249,  249,  250,  987,
      987,  250,  250,  250,  250,  250,  250,  254,  987,  254,
      987,  254,  254,  987,  254,  264,  264,  264,  264,  264,
      264,  274,  274,  274,  987,  274,  274,  274,  183,  183,
      183,  987,  183,  183,  183,  183,  378,  378,  378,  378,
      378,  378,  453,  453,  453,  453,  453,  453,  506,  506,
      506,  506,  506,  506,  357,  357,  987,  357,  357,  357,

      357,  357,  528,  528,  987,  528,  528,  528,  528,  528,
      528,  430,  430,  987,  430,  430,  430,  430,  430,  580,
      580,  987,  580,  580,  580,  580,  580,  580,  775,  987,
      775,  987,  987,  775,  785,  987,  785,  987,  987,  785,
      812,  987,  812,  987,  812,  812,  987,  812,  823,  987,
      823,  987,  823,  823,  987,  823,  833,  833,  833,  833,
      833,  833,  849,  849,  849,  849,  849,  849,  879,  879,
      879,  879,  879,  879,  895,  895,  895,  895,  895,  895,
       13,  987,  987,  987,  987,  987,  987,  987,  987,  987,
      987,  987,  987,  987,  987,  987,  987,  987,  987,  987,

      987,  987,  987,  987,  987,  987,  987,  987,  987,  987,
      987,  987,  987,  987,  987,  987,  987,  987,  987,  987,
      987,  987,  987,  987,  987,  987,  987,  987,  987,  987,
      987,  987,  987,  987,  987,  987,  987,  987,  987,  987,
      987,  987,  987,  987,  987,  987,  987,  987,  987,  987,
      987,  987,  987,  987
    } ;

static yyconst flex_int16_t yy_chk[4255] =
    {   0,
        0,    1,    1,    1,    1,    1,   15,   26,   21,   15,
       26,   21,  161,  186,   45,  161, 1003,   45,   41,   63,
      186,   41,   63,   30,  996,   82,   19,   22,   82,  161,
        0,    1,   21,   21,   25,    0,   15,   26,   21,   21,
       21,  617,   41,   41,   45,  102,   19,   22,   41,   63,
       41,    0,  102,  118,   25,   82,  118,  119,   24,  119,
      617,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    2,    2,    2,    2,    2,   24,   30,
       30,   30,   30,   30,   30,   30,   30,   31,   31,   31,
       31,   31,   31,   31,   31,   36,   36,    2,    2,   33,

       33,   33,  984,    2,    2,    2,   35,   35,   35,   37,
       37,   37,   38,   38,   39,   39,   39,   50,   50,   50,
       50,   50,   50,   50,   50,   53,   53,   53,   43,   55,
       55,   55,  983,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    3,    3,    3,    3,    3,
        3,    3,   43,  982,    3,   56,   56,   57,   57,   57,
        3,    3,    3,  109,    3,   58,   58,   59,   59,   59,
       61,  981,   62,   61,   74,   74,    3,   76,   76,   62,
       71,   71,   71,  109,   43,   43,   43,   43,   43,   43,
       43,   43,   62,   96,   96,   61,   67,   73,   73,   73,

       61,   75,   75,   75,   98,   98,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    4,    4,
        4,    4,    4,    4,    4,  980,  114,    4,   77,   77,
       77,  131,  131,    4,    4,    4,  979,    4,   93,   93,
       93,  133,  133,    4,    4,   79,  114,  274,   79,    4,
      274,    4,   67,   67,   67,   67,   67,   67,   67,   67,
       68,   68,   68,   68,   68,   68,   68,   68,  978,   79,
       79,   95,   95,   95,   81,   79,   97,   97,   97,    4,
        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    5,    5,    5,    5,    5,    5,    5,   81,  116,

        5,   99,   99,   99,  977,  117,    5,    5,    5,    5,
        5,   88,   88,   88,   88,   88,   88,   88,   88,  116,
      101,  108,    5,  101,  108,  117,  128,  128,  128,  970,
       81,   81,   81,   81,   81,   81,   81,   81,  130,  130,
      130,  132,  132,  132,  723,  101,  134,  134,  134,  126,
      101,  108,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    6,    6,    6,    6,    6,    6,
        6,  723,  113,    6,  162,  113,  137,  137,  137,    6,
        6,    6,    6,    6,  139,  139,  139,  140,  140,  969,
        6,  141,  141,  141,  162,    6,  113,  113,  142,  142,

      935,  136,  113,  113,  113,  126,  126,  126,  126,  126,
      126,  126,  126,  127,  127,  127,  127,  127,  127,  127,
      127,  143,  143,  143,  164,    6,    6,    6,    6,    6,
        6,    6,    6,    6,    6,    6,    6,    7,    7,    7,
        7,    7,    7,    7,  164,  934,    7,  147,  147,  147,
      168,  168,    7,    7,    7,  933,    7,  136,  136,  136,
      136,  136,  136,  136,  136,  148,  148,  148,    7,  149,
      149,  149,  150,  150,  150,  151,  151,  151,  152,  152,
      152,  153,  153,  153,  165,  165,  165,  145,  163,  163,
      163,  163,  163,  163,  163,  163,  170,  170,    7,    7,

        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        8,    8,    8,    8,    8,    8,    8,  145,  303,    8,
      167,  167,  167,  177,  177,    8,    8,    8,  154,    8,
      931,  154,  169,  169,  169,    8,    8,  171,  171,  171,
      903,    8,  173,  145,  145,  145,  145,  145,  145,  145,
      145,  303,  154,  154,  174,  174,  174,  471,  154,  146,
      154,  471,  173,  176,  176,  176,  178,  178,  178,  179,
      179,    8,    8,    8,    8,    8,    8,    8,    8,    8,
        8,    8,    8,    9,    9,    9,    9,    9,    9,    9,
      190,  194,    9,  180,  180,  180,  897,  190,    9,    9,

        9,  887,    9,  195,  195,  195,  197,  197,  197,  146,
      881,  194,  198,  198,    9,  146,  146,  146,  146,  146,
      146,  146,  146,  187,  187,  187,  187,  187,  187,  187,
      187,  194,  870,  190,  190,  199,  199,  199,  190,  200,
      200,  190,  220,  220,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,   10,   10,   10,   10,
       10,   10,   10,  203,  204,   10,  201,  201,  201,  222,
      222,   10,   10,   10,  342,   10,  203,  157,  205,  205,
      205,  342,   10,  203,  204,  158,  869,   10,  206,  206,
      206,  229,  229,  157,  159,  213,  213,  204,  207,  207,

      207,  231,  231,  158,  208,  208,  208,  209,  209,  209,
      215,  868,  159,  210,  210,  210,  213,   10,   10,   10,
       10,   10,   10,   10,   10,   10,   10,   10,   10,   11,
       11,   11,   11,  157,  157,  157,  157,  157,  157,  157,
      157,  158,  158,  158,  158,  158,  158,  158,  158,  867,
      159,  159,  159,  159,  159,  159,  159,  159,  211,  211,
      211,  217,  217,  217,  225,  866,  215,  215,  215,  215,
      215,  215,  215,  215,  219,  219,  219,  221,  221,  221,
      212,  259,  259,  212,  223,  223,  223,  261,  261,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,

       11,   12,   12,   12,   12,  212,  226,  226,  226,  865,
      212,  216,  216,  216,  216,  216,  216,  216,  216,  234,
      225,  225,  225,  225,  225,  225,  225,  225,  228,  228,
      228,  230,  230,  230,  232,  232,  232,  235,  236,  236,
      236,  237,  237,  237,  238,  238,  238,  268,  268,  234,
      239,  239,  239,  240,  240,  240,  241,  241,  241,  270,
      270,   12,   12,   12,   12,   12,   12,   12,   12,   12,
       12,   12,   12,   32,  857,  234,  234,  234,  234,  234,
      234,  234,  234,  242,  242,  242,  246,  235,  243,  247,
       32,  243,  247,  235,  235,  235,  235,  235,  235,  235,

      235,  252,  246,  612,  252,  612,  252,  256,  256,  256,
       32,  278,  243,  243,  278,  291,  252,  478,  243,  247,
      255,  255,  255,  255,  255,  255,  255,  255,  291,   32,
       32,   32,   32,   32,   32,   32,   32,   42,  258,  258,
      258,  478,  246,  246,  246,  246,  246,  246,  246,  246,
      260,  260,  260,  851,   42,  262,  262,  262,  265,  265,
      265,  267,  267,  267,  269,  269,  269,  271,  271,  271,
      276,  841,  279,  276,   42,  279,  286,  286,  280,  288,
      288,  280,  276,  361,  280,  283,  283,  283,  835,  276,
      361,  280,  832,   42,   42,   42,   42,   42,   42,   42,

       42,   44,  277,  277,  277,  277,  277,  277,  277,  277,
      285,  285,  285,  287,  287,  287,  289,  289,  289,  292,
      292,  292,  293,  293,  293,  301,   44,  280,  280,  294,
      294,  294,  280,  302,  302,  280,  295,  295,  295,  296,
      296,  296,  297,  297,  297,  301,   44,  298,  298,  298,
      299,  352,  352,  299,  315,  315,  315,   44,   44,   44,
       44,   44,   44,   44,   44,   49,  354,  354,   49,  310,
      310,  310,  310,   49,  434,  299,  316,  316,  316,  826,
      299,  434,   49,  317,  317,  317,  318,  318,  318,  319,
      319,  319,  320,  320,  320,  321,  321,  321,  324,  324,

      324,  821,  322,  325,  325,  325,  326,  326,  326,  382,
      382,  323,  815,  332,  332,  332,  332,  335,  335,  335,
      336,  336,  336,  322,  800,  327,  337,  337,  337,   49,
       49,   49,   49,   49,   49,   49,   49,   51,   51,  799,
       51,  798,   51,  332,   51,   51,   51,  327,   51,   51,
       51,   51,  323,   51,   51,  797,   51,   51,  322,  322,
      322,  322,  322,  322,  322,  322,  796,  323,  323,  323,
      323,  323,  323,  323,  323,  384,  384,   51,   51,  328,
      795,  327,  327,  327,  327,  327,  327,  327,  327,  329,
      338,  338,  338,  333,  333,  333,  333,  339,  339,  339,

      328,   51,   51,   51,   51,   51,   51,   51,   51,   52,
      457,  457,   52,  340,  340,  340,  684,   52,  341,  341,
      341,  345,  349,  349,  349,  794,   52,  330,  345,  429,
      452,  329,  429,  452,   52,  328,  328,  328,  328,  328,
      328,  328,  328,  333,  684,  329,  329,  329,  329,  329,
      329,  329,  329,  788,   52,  343,  343,  343,  343,  343,
      343,  343,  343,  453,  345,  345,  453,  357,  330,  345,
      357,  784,  345,   52,   52,   52,   52,   52,   52,   52,
       52,   70,  778,  330,  330,  330,  330,  330,  330,  330,
      330,  351,  351,  351,  353,  353,  353,  759,   70,  355,

      355,  355,  357,  364,  379,  379,  379,  381,  381,  381,
      364,  459,  459,  365,  366,  758,  365,  366,   70,  581,
      368,  369,  581,  368,  369,  682,  365,  757,  370,  721,
      396,  370,  371,  682,  396,  371,  721,   70,   70,   70,
       70,   70,   70,   70,   70,   80,  364,  364,  365,  366,
      396,  364,  510,  510,  364,  368,  369,  383,  383,  383,
      756,  375,   80,  370,  375,  372,  755,  371,  372,  385,
      385,  385,  389,  389,  389,  368,  368,  368,  369,  390,
      390,  390,   80,  370,  370,  370,  724,  371,  371,  724,
      373,  376,  754,  373,  374,  397,  375,  374,  376,  750,

      372,   80,   80,   80,   80,   80,   80,   80,   80,   87,
      512,  512,   87,  661,   87,  397,  375,   87,  748,  397,
      372,  372,  372,  731,   87,  373,  391,  391,  391,  374,
      392,  392,  392,  661,  376,  376,  393,  393,  393,  376,
      730,  661,  376,  394,  394,  394,  373,  373,  729,  374,
      374,  374,  395,  395,  395,  398,  398,  398,  399,  399,
      399,  400,  400,  400,  780,  780,  401,  401,  401,  401,
      402,  402,  402,   87,   87,   87,   87,   87,   87,   87,
       87,   91,  725,  728,   91,  725,   91,  727,   91,   91,
       91,  401,   91,   91,   91,   91,  771,   91,  726,  771,

       91,   91,  403,  403,  403,  404,  404,  404,  405,  405,
      405,  401,  406,  406,  406,  407,  407,  407,  408,  408,
      408,   91,   91,  409,  411,  411,  411,  412,  412,  412,
      722,  410,  413,  413,  413,  420,  420,  420,  782,  782,
      414,  421,  421,  421,  409,   91,   91,   91,   91,   91,
       91,   91,   91,   92,  462,  717,   92,  462,   92,  790,
      790,   92,  414,  422,  422,  422,  462,  694,   92,  423,
      423,  423,  410,  693,  415,  424,  424,  424,   92,  409,
      409,  409,  409,  409,  409,  409,  409,  410,  410,  410,
      410,  410,  410,  410,  410,  415,  414,  414,  414,  414,

      414,  414,  414,  414,  416,  425,  425,  425,  426,  426,
      426,  773,  417,  430,  773,  692,  430,   92,   92,   92,
       92,   92,   92,   92,   92,  155,  454,  454,  454,  691,
      415,  415,  415,  415,  415,  415,  415,  415,  792,  792,
      155,  440,  439,  155,  440,  439,  416,  438,  430,  456,
      456,  456,  690,  417,  438,  439,  458,  458,  458,  689,
      416,  416,  416,  416,  416,  416,  416,  416,  417,  417,
      417,  417,  417,  417,  417,  417,  440,  439,  460,  460,
      460,  155,  155,  155,  155,  155,  155,  155,  155,  156,
      438,  438,  688,  441,  463,  438,  441,  463,  438,  525,

      444,  687,  525,  444,  450,  686,  463,  450,  464,  464,
      464,  465,  465,  465,  466,  466,  466,  685,  561,  443,
      533,  683,  443,  533,  660,  156,  812,  156,  441,  812,
      451,  668,  660,  451,  525,  444,  451,  561,  561,  450,
      467,  467,  467,  451,  660,  156,  156,  156,  156,  156,
      156,  156,  156,  182,  443,  533,  182,  444,  182,  450,
      182,  182,  182,  627,  182,  182,  182,  182,  182,  182,
      182,  709,  182,  182,  443,  443,  443,  533,  709,  451,
      451,  468,  468,  468,  451,  817,  817,  451,  469,  469,
      469,  709,  445,  182,  182,  445,  446,  819,  819,  446,

      447,  828,  828,  447,  470,  470,  470,  448,  830,  830,
      448,  472,  472,  472,  473,  473,  473,  182,  182,  182,
      182,  182,  182,  182,  182,  183,  449,  445,  183,  449,
      183,  446,  183,  183,  183,  447,  183,  183,  183,  183,
      183,  183,  448,  823,  183,  183,  823,  445,  445,  445,
      626,  446,  446,  837,  837,  447,  447,  447,  474,  474,
      474,  449,  625,  448,  448,  183,  183,  485,  485,  485,
      485,  490,  490,  490,  491,  491,  491,  492,  492,  492,
      624,  449,  449,  449,  501,  501,  501,  839,  839,  183,
      183,  183,  183,  183,  183,  183,  183,  184,  184,  184,

      184,  184,  184,  184,  184,  184,  184,  184,  184,  184,
      184,  184,  184,  184,  184,  184,  184,  184,  184,  184,
      184,  184,  184,  184,  184,  184,  184,  184,  184,  184,
      184,  184,  184,  184,  184,  184,  184,  184,  184,  184,
      184,  184,  184,  184,  184,  184,  184,  184,  184,  184,
      184,  184,  184,  184,  184,  184,  184,  184,  184,  184,
      184,  184,  184,  184,  184,  184,  184,  184,  184,  184,
      185,  185,  623,  185,  622,  185,  621,  185,  185,  185,
      620,  185,  185,  185,  185,  185,  185,  185,  619,  185,
      185,  477,  477,  477,  477,  493,  493,  493,  493,  494,

      494,  494,  494,  495,  495,  495,  495,  502,  502,  502,
      185,  185,  496,  496,  496,  496,  477,  618,  493,  497,
      497,  497,  497,  614,  495,  498,  498,  498,  498,  499,
      499,  499,  499,  593,  185,  185,  185,  185,  185,  185,
      185,  185,  244,  494,  496,  500,  500,  500,  500,  592,
      499,  503,  503,  503,  507,  507,  507,  244,  583,  775,
      244,  497,  775,  582,  504,  509,  509,  509,  511,  511,
      511,  504,  513,  513,  513,  572,  775,  498,  517,  517,
      517,  518,  518,  518,  519,  519,  519,  500,  520,  520,
      520,  521,  521,  521,  522,  522,  522,  541,  244,  244,

      244,  244,  244,  244,  244,  244,  245,  504,  504,  523,
      523,  523,  504,  524,  879,  504,  524,  879,  749,  539,
      540,  749,  539,  524,  550,  550,  550,  551,  551,  551,
      552,  552,  552,  553,  553,  553,  554,  554,  554,  555,
      555,  555,  245,  749,  245,  556,  556,  556,  524,  526,
      532,  531,  537,  532,  539,  537,  526,  557,  557,  557,
      853,  853,  245,  245,  245,  245,  245,  245,  245,  245,
      273,  710,  530,  273,  539,  273,  516,  273,  273,  273,
      515,  273,  273,  273,  273,  532,  273,  537,  273,  273,
      273,  710,  526,  526,  558,  558,  558,  526,  710,  514,

      526,  559,  559,  559,  508,  532,  532,  532,  537,  537,
      273,  273,  562,  562,  562,  562,  563,  563,  563,  564,
      564,  564,  565,  565,  565,  573,  573,  573,  489,  562,
      574,  574,  574,  488,  273,  273,  273,  273,  273,  273,
      273,  273,  275,  275,  275,  275,  275,  275,  275,  275,
      275,  275,  275,  275,  275,  275,  275,  275,  487,  275,
      275,  275,  275,  275,  275,  275,  275,  275,  275,  275,
      275,  275,  275,  275,  275,  275,  275,  275,  275,  275,
      275,  275,  275,  275,  275,  275,  275,  275,  275,  275,
      275,  275,  275,  275,  275,  275,  275,  275,  275,  275,

      275,  275,  275,  275,  275,  275,  275,  275,  275,  275,
      275,  275,  275,  275,  275,  331,  331,  331,  331,  534,
      855,  855,  534,  331,  560,  486,  560,  566,  566,  566,
      566,  568,  568,  568,  568,  484,  535,  895,  577,  535,
      895,  577,  536,  883,  883,  536,  560,  575,  575,  575,
      566,  483,  568,  482,  534,  602,  602,  602,  481,  538,
      576,  480,  538,  576,  751,  543,  479,  751,  543,  544,
      576,  535,  544,  577,  534,  534,  534,  536,  476,  331,
      331,  331,  331,  331,  331,  331,  331,  362,  362,  751,
      362,  535,  535,  362,  538,  576,  362,  536,  536,  536,

      543,  603,  603,  603,  544,  569,  569,  569,  569,  545,
      785,  475,  545,  785,  538,  538,  538,  604,  604,  604,
      543,  543,  543,  461,  544,  544,  544,  785,  362,  605,
      605,  605,  546,  885,  885,  546,  547,  569,  455,  547,
      548,  899,  899,  548,  545,  606,  606,  606,  362,  362,
      362,  362,  362,  362,  362,  362,  362,  362,  362,  362,
      418,  418,  418,  418,  545,  545,  545,  546,  418,  901,
      901,  547,  607,  607,  607,  548,  567,  567,  567,  567,
      570,  570,  570,  570,  608,  608,  608,  546,  546,  546,
      442,  547,  547,  547,  419,  548,  548,  548,  388,  549,

      387,  585,  549,  386,  585,  571,  571,  571,  571,  380,
      587,  367,  356,  587,  584,  350,  578,  584,  348,  314,
      567,  313,  570,  578,  418,  418,  418,  418,  418,  418,
      418,  418,  435,  435,  549,  435,  585,  591,  435,  312,
      591,  435,  609,  609,  609,  587,  610,  610,  610,  584,
      586,  311,  309,  586,  549,  549,  549,  571,  585,  578,
      578,  611,  611,  611,  578,  587,  587,  578,  308,  584,
      584,  584,  591,  435,  588,  646,  589,  588,  646,  589,
      590,  307,  306,  590,  595,  586,  305,  595,  596,  304,
      300,  596,  591,  435,  435,  435,  435,  435,  435,  435,

      435,  435,  435,  435,  435,  586,  586,  586,  290,  588,
      646,  589,  284,  597,  282,  590,  597,  598,  281,  595,
      598,  599,  272,  596,  599,  600,  266,  264,  600,  588,
      588,  588,  589,  589,  263,  590,  590,  590,  257,  595,
      595,  595,  254,  596,  596,  596,  250,  248,  597,  233,
      601,  227,  598,  601,  224,  218,  599,  636,  636,  636,
      600,  613,  613,  613,  613,  637,  637,  637,  597,  597,
      597,  202,  598,  598,  598,  196,  599,  599,  599,  192,
      600,  600,  600,  181,  175,  601,  615,  615,  615,  615,
      172,  615,  616,  616,  616,  616,  628,  628,  628,  628,

      166,  615,  638,  638,  638,  601,  601,  601,  629,  629,
      629,  629,  630,  630,  630,  630,  631,  631,  631,  631,
      632,  632,  632,  632,  633,  633,  633,  633,  144,  628,
      634,  634,  634,  634,  635,  635,  635,  635,  639,  639,
      639,  640,  640,  640,  138,  631,  630,  641,  641,  641,
      642,  642,  642,  643,  643,  643,  135,  634,  644,  644,
      644,  629,  645,  645,  645,  647,  129,  805,  647,  648,
      805,  124,  648,  633,  632,  649,  123,  806,  649,  650,
      806,  635,  650,  651,  805,  122,  651,  121,  652,  120,
      833,  652,  653,  833,  806,  653,  115,  112,  654,  111,

      647,  654,  655,  103,  648,  655,  656,  833,  100,  656,
      649,  657,  657,  657,  650,  658,  658,  658,  651,   94,
      647,  647,  647,  652,  648,  648,  648,  653,   86,   78,
      649,  649,  649,  654,  650,  650,  650,  655,  651,  651,
      651,  656,   72,  652,  652,  652,   60,  653,  653,  653,
      659,  659,  659,  654,  654,  654,   54,  655,  655,  655,
       40,  656,  656,  656,  662,  662,  662,  662,  663,  663,
      663,  663,  664,  664,  664,  664,  665,  665,  665,  665,
      666,  666,  666,  666,  667,  667,  667,  667,  669,   34,
       23,  669,  670,   13,    0,  670,  671,  662,    0,  671,

      672,    0,    0,  672,  673,  665,  664,  673,  679,  679,
      679,  674,    0,  849,  674,  675,  849,  740,  675,  676,
      740,  663,  676,  669,  680,  680,  680,  670,    0,  677,
      849,  671,  677,  667,  666,  672,    0,    0,  678,  673,
        0,  678,  740,  669,  669,  669,  674,  670,  670,  670,
      675,  671,  671,  671,  676,  672,  672,  672,    0,  673,
      673,  673,  740,    0,  677,    0,  674,  674,  674,    0,
      675,  675,  675,  678,  676,  676,  676,  681,  681,  681,
      695,  695,  695,  695,  677,  677,  677,  696,  696,  696,
      696,    0,    0,  678,  678,  678,  697,  697,  697,  697,

      698,  698,  698,  698,  699,  699,  699,  699,  700,  700,
      700,  700,  695,  701,  701,  701,  701,  697,  702,  702,
      702,  702,  703,  703,  703,  704,  704,  704,  705,  705,
      705,  706,    0,    0,  706,  707,  698,    0,  707,  696,
      708,    0,    0,  708,  741,    0,  699,  741,  701,  711,
      711,  711,  711,  712,  712,  712,  712,  713,  713,  713,
      713,  777,  777,  777,  700,    0,  706,    0,  718,  741,
      707,  718,    0,  702,    0,  708,  719,    0,  713,  719,
        0,  711,  714,  714,  714,  714,  706,  706,  706,  741,
      707,  707,  707,    0,    0,  708,  708,  708,  715,  715,

      715,  715,    0,  718,    0,  712,  716,  716,  716,  716,
      720,  719,    0,  720,  732,  732,  732,  732,  714,  733,
      733,  733,  733,  718,  718,  718,  734,  734,  734,  734,
        0,  719,  719,  719,  735,  735,  735,  735,    0,    0,
      715,  737,  737,  737,  737,  720,  736,  736,  736,  736,
      738,  738,  738,  738,  739,  739,  739,  739,  742,  742,
      742,  742,  716,    0,    0,  720,  720,  720,    0,    0,
      735,  743,  743,  743,  743,  736,  744,  744,  744,  744,
      745,  745,  745,  745,  746,  746,  746,  746,  747,  747,
      747,  747,  760,  760,  760,  760,    0,  737,    0,  738,

      761,  761,  761,  761,    0,  762,  762,  762,  762,  745,
        0,    0,  744,  763,  763,  763,  763,  764,  764,  764,
      764,  767,  767,  767,  767,  768,  768,  768,  768,  761,
      769,  769,  769,  769,  779,  779,  779,  747,  762,    0,
      746,  752,    0,    0,  752,  770,  770,  770,  770,  752,
      767,  781,  781,  781,  783,  783,  783,    0,  768,  787,
      787,  787,  763,  789,  789,  789,  791,  791,  791,    0,
      764,  776,  776,  776,  776,  776,  776,  776,  776,  769,
      786,  786,  786,  786,  786,  786,  786,  786,  793,  793,
      793,  801,  801,  801,  801,  814,  814,  814,  770,  802,

      802,  802,  802,    0,    0,  752,  752,  752,  752,  752,
      752,  752,  752,  753,    0,    0,  753,  803,  803,  803,
      803,  753,    0,    0,  801,  807,  807,  807,  807,    0,
        0,  802,    0,    0,  804,  804,  804,  804,    0,  808,
      808,  808,  808,  809,  809,  809,  809,  810,  810,  810,
      810,  816,  816,  816,  818,  818,  818,    0,  807,  813,
      813,  813,  813,  813,  813,  813,  813,  820,  820,  820,
      803,  808,  825,  825,  825,    0,    0,  753,  753,  753,
      753,  753,  753,  753,  753,  765,  804,    0,  765,  827,
      827,  827,    0,  765,    0,    0,  809,    0,    0,  810,

        0,    0,  765,  824,  824,  824,  824,  824,  824,  824,
      824,  829,  829,  829,  831,  831,  831,  834,  834,  834,
      836,  836,  836,  838,  838,  838,  840,  840,  840,  842,
      842,  842,  843,  843,  843,  844,  844,  844,  845,  845,
      845,  846,  846,  846,  847,  847,  847,    0,    0,  765,
      765,  765,  765,  765,  765,  765,  765,  766,    0,    0,
      766,  848,  848,  848,    0,  766,  850,  850,  850,  852,
      852,  852,    0,    0,  766,  854,  854,  854,  856,  856,
      856,  858,  858,  858,  859,  859,  859,  860,  860,  860,
      861,  861,  861,  862,  862,  862,  863,  863,  863,  864,

      864,  864,    0,  871,  871,  871,  871,  872,  872,  872,
      872,  873,  873,  873,  873,  874,  874,  874,  874,    0,
        0,  766,  766,  766,  766,  766,  766,  766,  766,  772,
        0,    0,  772,    0,  772,  871,    0,  772,  876,  876,
      876,  876,  872,    0,  772,  875,  875,  875,  875,    0,
      877,  877,  877,  877,    0,  878,  878,  878,  878,  880,
      880,  880,    0,  873,  882,  882,  882,  884,  884,  884,
      874,    0,    0,  876,  886,  886,  886,  875,  888,  888,
      888,  889,  889,  889,  890,  890,  890,  891,  891,  891,
      892,  892,  892,  772,  772,  772,  772,  772,  772,  772,

      772,  774,  877,    0,  774,    0,  774,    0,    0,  774,
      878,  893,  893,  893,    0,    0,  774,  894,  894,  894,
      896,  896,  896,  898,  898,  898,  900,  900,  900,  902,
      902,  902,  904,  904,  904,  905,  905,  905,  906,  906,
      906,  907,  907,  907,  908,  908,  908,  909,  909,  909,
      910,  910,  910,  911,  911,  911,  912,  912,  912,  913,
      913,  913,  914,  914,  914,  774,  774,  774,  774,  774,
      774,  774,  774,  811,    0,    0,  811,    0,  811,    0,
        0,  811,  915,  915,  915,  916,  916,  916,  811,  917,
      917,  917,  918,  918,  918,  919,  919,  919,  920,  920,

      920,  921,  921,  921,  922,  922,  922,  923,  923,  923,
      924,  924,  924,  925,  925,  925,  926,  926,  926,  927,
      927,  927,  928,  928,  928,  929,  929,  929,  930,  930,
      930,  932,  932,  932,  932,    0,    0,  811,  811,  811,
      811,  811,  811,  811,  811,  822,    0,    0,  822,    0,
      822,    0,    0,  822,  936,  936,  936,  936,    0,    0,
      822,  937,  937,  937,  937,  938,  938,  938,  938,  939,
      939,  939,  939,  940,  940,  940,  940,  941,  941,  941,
      941,  942,  942,  942,  943,  943,  943,    0,    0,  936,
      944,  944,  944,  945,  945,  945,  946,  946,  946,  947,

      947,  947,    0,    0,  939,  948,  948,  948,    0,  822,
      822,  822,  822,  822,  822,  822,  822,  949,  949,  949,
      938,  950,  950,  950,  951,  951,  951,  952,  952,  952,
        0,    0,  941,  953,  953,  953,  954,  954,  954,  955,
      955,  955,  956,  956,  956,  957,  957,  957,  958,  958,
      958,  959,  959,  959,  960,  960,  960,  961,  961,  961,
      962,  962,  962,  963,  963,  963,  964,  964,  964,  965,
      965,  965,  966,  966,  966,  967,  967,  967,  968,  968,
      968,  968,  971,  971,  971,  972,  972,  972,  973,  973,
      973,  974,  974,  974,  975,  975,  975,  976,  976,  976,

      985,  985,  985,  985,  986,  986,  986,  986,  988,  988,
      988,  988,  988,  988,  988,  988,  988,  989,  989,  989,
      989,  989,  989,  989,  989,  989,  990,  990,  990,  990,
      990,  990,  990,  990,  990,  991,  991,  991,  991,  991,
      991,  991,  991,  991,  992,  992,  992,  992,  992,  992,
      992,  992,  992,  993,  993,  993,  993,  993,  993,  993,
      993,  993,  994,  994,    0,  994,  994,  994,  994,  994,
      994,  995,  995,    0,  995,  995,  995,  995,  995,  995,
      997,  997,  997,  997,  997,  997,  998,  998,    0,  998,
      998,  998,  998,  998,  998,  999,    0,  999,    0,    0,

      999, 1000, 1000, 1000, 1000, 1000, 1000, 1001, 1001, 1001,
        0, 1001, 1001, 1001, 1002, 1002,    0, 1002, 1002, 1002,
     1002, 1002, 1002, 1004, 1004, 1004, 1004, 1004, 1004, 1005,
     1005,    0, 1005, 1005, 1005, 1005, 1005, 1005, 1006,    0,
        0, 1006, 1006, 1006, 1006, 1006, 1006, 1007,    0, 1007,
        0, 1007, 1007,    0, 1007, 1008, 1008, 1008, 1008, 1008,
     1008, 1009, 1009, 1009,    0, 1009, 1009, 1009, 1010, 1010,
     1010,    0, 1010, 1010, 1010, 1010, 1011, 1011, 1011, 1011,
     1011, 1011, 1012, 1012, 1012, 1012, 1012, 1012, 1013, 1013,
     1013, 1013, 1013, 1013, 1014, 1014,    0, 1014, 1014, 1014,

     1014, 1014, 1015, 1015,    0, 1015, 1015, 1015, 1015, 1015,
     1015, 1016, 1016,    0, 1016, 1016, 1016, 1016, 1016, 1017,
     1017,    0, 1017, 1017, 1017, 1017, 1017, 1017, 1018,    0,
     1018,    0,    0, 1018, 1019,    0, 1019,    0,    0, 1019,
     1020,    0, 1020,    0, 1020, 1020,    0, 1020, 1021,    0,
     1021,    0, 1021, 1021,    0, 1021, 1022, 1022, 1022, 1022,
     1022, 1022, 1023, 1023, 1023, 1023, 1023, 1023, 1024, 1024,
     1024, 1024, 1024, 1024, 1025, 1025, 1025, 1025, 1025, 1025,
      987,  987,  987,  987,  987,  987,  987,  987,  987,  987,
      987,  987,  987,  987,  987,  987,  987,  987,  987,  987,

      987,  987,  987,  987,  987,  987,  987,  987,  987,  987,
      987,  987,  987,  987,  987,  987,  987,  987,  987,  987,
      987,  987,  987,  987,  987,  987,  987,  987,  987,  987,
      987,  987,  987,  987,  987,  987,  987,  987,  987,  987,
      987,  987,  987,  987,  987,  987,  987,  987,  987,  987,
      987,  987,  987,  987
    } ;

extern int hlexc_flex_debug;
int hlexc_flex_debug = 0;

static yy_state_type *yy_state_buf=0, *yy_state_ptr=0;
static char *yy_full_match;
static int yy_lp;
static int yy_looking_for_trail_begin = 0;
static int yy_full_lp;
static int *yy_full_state;
#define YY_TRAILING_MASK 0x2000
#define YY_TRAILING_HEAD_MASK 0x4000
#define REJECT \
{ \
*yy_cp = (yy_hold_char); /* undo effects of setting up hlexctext */ \
yy_cp = (yy_full_match); /* restore poss. backed-over text */ \
(yy_lp) = (yy_full_lp); /* restore orig. accepting pos. */ \
(yy_state_ptr) = (yy_full_state); /* restore orig. state */ \
yy_current_state = *(yy_state_ptr); /* restore curr. state */ \
++(yy_lp); \
goto find_rule; \
}

#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
char *hlexctext;
#line 1 "lexc-lexer.ll"
#line 4 "lexc-lexer.ll"
// Copyright (c) 2016 University of Helsinki
//
// This library is free software; you can redistribute it and/or
// modify it under the terms of the GNU Lesser General Public
// License as published by the Free Software Foundation; either
// version 3 of the License, or (at your option) any later version.
// See the file COPYING included with this distribution for more
// information.

//! @file lexc-lexer.cc
//!
//! @brief a lexer for lexc
//!
//! @author Tommi A. Pirinen

#if HAVE_CONFIG_H
#  include <config.h>
#endif

#ifdef YACC_USE_PARSER_H_EXTENSION
  #include "lexc-parser.h"
#else
  #include "lexc-parser.hh"
#endif

#include "lexc-utils.h"
#include "HfstDataTypes.h"

#include <assert.h>


extern void hlexcerror(const char *text);
/* c.f. Unicode Standard 5.1 D92 Table 3-7 */
/* non US-ASCII */
/* any UTF-8 */
/* Escaped */
/* any ASCII */
/* special meaning in lexc */
/* non-restricted ASCII */
/* special meaning in xre */
/* non-restricted ASCII in XRE */
/* RegExp. stuff */
/* String entry part:
 * - any unrestricted ASCII-7,
 * - any high unicode codepoint (past U+007F) UTF-8-encoded
 * - any %-escaped UTF-8
 */
/* Lexicon name part */
/* White space */

#line 1869 "lexc-lexer.cc"

#define INITIAL 0
#define MULTICHARS 1
#define DEFINITIONS 2
#define NOFLAGS 3
#define LEXICONS 4
#define ENDED 5

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

static int yy_init_globals (void );

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int hlexclex_destroy (void );

int hlexcget_debug (void );

void hlexcset_debug (int debug_flag  );

YY_EXTRA_TYPE hlexcget_extra (void );

void hlexcset_extra (YY_EXTRA_TYPE user_defined  );

FILE *hlexcget_in (void );

void hlexcset_in  (FILE * in_str  );

FILE *hlexcget_out (void );

void hlexcset_out  (FILE * out_str  );

int hlexcget_leng (void );

char *hlexcget_text (void );

int hlexcget_lineno (void );

void hlexcset_lineno (int line_number  );

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int hlexcwrap (void );
#else
extern int hlexcwrap (void );
#endif
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * );
#endif

#ifndef YY_NO_INPUT

#ifdef __cplusplus
static int yyinput (void );
#else
static int input (void );
#endif

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO do { if (fwrite( hlexctext, hlexcleng, 1, hlexcout )) {} } while (0)
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		size_t n; \
		for ( n = 0; n < max_size && \
			     (c = getc( hlexcin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( hlexcin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = fread(buf, 1, max_size, hlexcin))==0 && ferror(hlexcin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(hlexcin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int hlexclex (void);

#define YY_DECL int hlexclex (void)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after hlexctext and hlexcleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	if ( hlexcleng > 0 ) \
		YY_CURRENT_BUFFER_LVALUE->yy_at_bol = \
				(hlexctext[hlexcleng - 1] == '\n'); \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;
    
#line 92 "lexc-lexer.ll"



#line 2066 "lexc-lexer.cc"

	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

        /* Create the reject buffer large enough to save one state per allowed character. */
        if ( ! (yy_state_buf) )
            (yy_state_buf) = (yy_state_type *)hlexcalloc(YY_STATE_BUF_SIZE  );
            if ( ! (yy_state_buf) )
                YY_FATAL_ERROR( "out of dynamic memory in hlexclex()" );

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! hlexcin )
			hlexcin = stdin;

		if ( ! hlexcout )
			hlexcout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			hlexcensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				hlexc_create_buffer(hlexcin,YY_BUF_SIZE );
		}

		hlexc_load_buffer_state( );
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = (yy_c_buf_p);

		/* Support of hlexctext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = (yy_start);
		yy_current_state += YY_AT_BOL();

		(yy_state_ptr) = (yy_state_buf);
		*(yy_state_ptr)++ = yy_current_state;

yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 988 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			*(yy_state_ptr)++ = yy_current_state;
			++yy_cp;
			}
		while ( yy_current_state != 987 );

yy_find_action:
		yy_current_state = *--(yy_state_ptr);
		(yy_lp) = yy_accept[yy_current_state];
find_rule: /* we branch to this label when backing up */
		for ( ; ; ) /* until we find what rule we matched */
			{
			if ( (yy_lp) && (yy_lp) < yy_accept[yy_current_state + 1] )
				{
				yy_act = yy_acclist[(yy_lp)];
				if ( yy_act & YY_TRAILING_HEAD_MASK ||
				     (yy_looking_for_trail_begin) )
					{
					if ( yy_act == (yy_looking_for_trail_begin) )
						{
						(yy_looking_for_trail_begin) = 0;
						yy_act &= ~YY_TRAILING_HEAD_MASK;
						break;
						}
					}
				else if ( yy_act & YY_TRAILING_MASK )
					{
					(yy_looking_for_trail_begin) = yy_act & ~YY_TRAILING_MASK;
					(yy_looking_for_trail_begin) |= YY_TRAILING_HEAD_MASK;
					}
				else
					{
					(yy_full_match) = yy_cp;
					(yy_full_state) = (yy_state_ptr);
					(yy_full_lp) = (yy_lp);
					break;
					}
				++(yy_lp);
				goto find_rule;
				}
			--yy_cp;
			yy_current_state = *--(yy_state_ptr);
			(yy_lp) = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
case 1:
/* rule 1 can match eol */
YY_RULE_SETUP
#line 95 "lexc-lexer.ll"
{
    BEGIN MULTICHARS;
    hfst::lexc::token_update_positions(hlexctext);
    return MULTICHARS_START;
}
	YY_BREAK
case 2:
/* rule 2 can match eol */
YY_RULE_SETUP
#line 101 "lexc-lexer.ll"
{
    BEGIN NOFLAGS;
    hfst::lexc::token_update_positions(hlexctext);
    return NOFLAGS_START;
}
	YY_BREAK
case 3:
/* rule 3 can match eol */
YY_RULE_SETUP
#line 107 "lexc-lexer.ll"
{
    BEGIN DEFINITIONS;
    hfst::lexc::token_update_positions(hlexctext);
    return DEFINITIONS_START;
}
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 113 "lexc-lexer.ll"
{
    BEGIN LEXICONS;
    hfst::lexc::token_update_positions(hlexctext);
    char* lexicon_start;
    lexicon_start = hfst::lexc::strstrip(hlexctext);
    hlexclval.name = hfst::lexc::strdup_nonconst_part(lexicon_start, "LEXICON",
                                          NULL, true);
    free(lexicon_start);
    return LEXICON_START;
}
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 124 "lexc-lexer.ll"
{
    BEGIN LEXICONS;
    hfst::lexc::token_update_positions(hlexctext);
    char* lexicon_start;
    lexicon_start = hfst::lexc::strstrip(hlexctext);
    hlexclval.name = hfst::lexc::strdup_nonconst_part(lexicon_start, "Lexicon",
                                          NULL, true);
    free(lexicon_start);
    return LEXICON_START_WRONG_CASE;
}
	YY_BREAK
case 6:
/* rule 6 can match eol */
YY_RULE_SETUP
#line 135 "lexc-lexer.ll"
{
    hfst::lexc::token_update_positions(hlexctext);
    return END_START;
}
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 140 "lexc-lexer.ll"
{
    hfst::lexc::token_update_positions(hlexctext);
}
	YY_BREAK
case 8:
/* rule 8 can match eol */
YY_RULE_SETUP
#line 144 "lexc-lexer.ll"
{
    hfst::lexc::token_update_positions(hlexctext);
}
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 148 "lexc-lexer.ll"
{
    hfst::lexc::token_update_positions(hlexctext);
    hlexclval.name = hfst::lexc::strip_percents(hlexctext, false);
    return MULTICHAR_SYMBOL;
}
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 154 "lexc-lexer.ll"
{ hfst::lexc::token_update_positions(hlexctext); }
	YY_BREAK
case 11:
/* rule 11 can match eol */
YY_RULE_SETUP
#line 156 "lexc-lexer.ll"
{ hfst::lexc::token_update_positions(hlexctext); }
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 158 "lexc-lexer.ll"
{
    hfst::lexc::token_update_positions(hlexctext);
    hlexclval.name = strdup(hlexctext);
    return LEXICON_NAME;
}
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 164 "lexc-lexer.ll"
{ hfst::lexc::token_update_positions(hlexctext); }
	YY_BREAK
case 14:
/* rule 14 can match eol */
YY_RULE_SETUP
#line 166 "lexc-lexer.ll"
{ hfst::lexc::token_update_positions(hlexctext); }
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 168 "lexc-lexer.ll"
{ BEGIN INITIAL; }
	YY_BREAK
case 16:
*yy_cp = (yy_hold_char); /* undo effects of setting up hlexctext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up hlexctext again */
YY_RULE_SETUP
#line 170 "lexc-lexer.ll"
{
    hfst::lexc::token_update_positions(hlexctext);
    hlexclval.name = hfst::lexc::strstrip(hlexctext);
    return DEFINITION_NAME;
}
	YY_BREAK
case 17:
/* rule 17 can match eol */
YY_RULE_SETUP
#line 176 "lexc-lexer.ll"
{
    hfst::lexc::token_update_positions(hlexctext);
    hlexclval.name = hfst::lexc::strdup_nonconst_part(hlexctext, "=", ";", false);
    return DEFINITION_EXPRESSION;
}
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 182 "lexc-lexer.ll"
{ hfst::lexc::token_update_positions(hlexctext); }
	YY_BREAK
case 19:
/* rule 19 can match eol */
YY_RULE_SETUP
#line 184 "lexc-lexer.ll"
{ hfst::lexc::token_update_positions(hlexctext); }
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 186 "lexc-lexer.ll"
{
    hfst::lexc::token_update_positions(hlexctext);
    char* lexicon_start;
    lexicon_start = hfst::lexc::strstrip(hlexctext);
    hlexclval.name = hfst::lexc::strdup_nonconst_part(lexicon_start, "LEXICON", 0, true);
    free(lexicon_start);
    return LEXICON_START;
}
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 195 "lexc-lexer.ll"
{
    hfst::lexc::token_update_positions(hlexctext);
    char* lexicon_start;
    lexicon_start = hfst::lexc::strstrip(hlexctext);
    hlexclval.name = hfst::lexc::strdup_nonconst_part(lexicon_start, "Lexicon", 0, true);
    free(lexicon_start);
    return LEXICON_START_WRONG_CASE;
}
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 204 "lexc-lexer.ll"
{
    hfst::lexc::token_update_positions(hlexctext);
    hlexclval.name = hfst::lexc::strip_percents(hlexctext, true);
    return ULSTRING;
}
	YY_BREAK
case 23:
/* rule 23 can match eol */
YY_RULE_SETUP
#line 210 "lexc-lexer.ll"
{
    hfst::lexc::token_update_positions(hlexctext);
    hlexclval.name = hfst::lexc::strdup_nonconst_part(hlexctext, "<", ">", false);
    return XEROX_REGEXP;
}
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 216 "lexc-lexer.ll"
{
    hfst::lexc::token_update_positions(hlexctext);
    hlexclval.name = strdup(hlexctext);
    return LEXICON_NAME;
}
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 222 "lexc-lexer.ll"
{
    hfst::lexc::token_update_positions(hlexctext);
    hlexclval.name = strdup(hlexctext);
    return ENTRY_GLOSS;
}
	YY_BREAK
case 26:
/* rule 26 can match eol */
YY_RULE_SETUP
#line 228 "lexc-lexer.ll"
{
    BEGIN ENDED;
    hfst::lexc::token_update_positions(hlexctext);
    return END_START;
}
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 234 "lexc-lexer.ll"
{
    hfst::lexc::token_update_positions(hlexctext);
    return hlexctext[0];
}
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 239 "lexc-lexer.ll"
{
    hfst::lexc::token_update_positions(hlexctext);
    return hlexctext[0];
}
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 244 "lexc-lexer.ll"
{
    hfst::lexc::token_update_positions(hlexctext);

}
	YY_BREAK
case 30:
/* rule 30 can match eol */
YY_RULE_SETUP
#line 248 "lexc-lexer.ll"
{
    hfst::lexc::token_update_positions(hlexctext);

}
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 253 "lexc-lexer.ll"
{
    hfst::lexc::token_update_positions(hlexctext);

}
	YY_BREAK
case 32:
/* rule 32 can match eol */
YY_RULE_SETUP
#line 257 "lexc-lexer.ll"
{
    hfst::lexc::token_update_positions(hlexctext);
}
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 261 "lexc-lexer.ll"
{
    hfst::lexc::token_update_positions(hlexctext);
    hlexcerror("Illegal 8-bit sequence (cannot form valid UTF-8)");
    return ERROR;
}
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 267 "lexc-lexer.ll"
{
    hfst::lexc::token_update_positions(hlexctext);
    hlexcerror("Syntax error in lexer (no valid token found at the point)");
    return ERROR;
}
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 273 "lexc-lexer.ll"
ECHO;
	YY_BREAK
#line 2482 "lexc-lexer.cc"
			case YY_STATE_EOF(INITIAL):
			case YY_STATE_EOF(MULTICHARS):
			case YY_STATE_EOF(DEFINITIONS):
			case YY_STATE_EOF(NOFLAGS):
			case YY_STATE_EOF(LEXICONS):
			case YY_STATE_EOF(ENDED):
				yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed hlexcin at a new source and called
			 * hlexclex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = hlexcin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = (yy_c_buf_p);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( hlexcwrap( ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * hlexctext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
} /* end of hlexclex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (void)
{
    	register char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	register char *source = (yytext_ptr);
	register int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr)) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			YY_FATAL_ERROR(
"input buffer overflow, can't enlarge buffer because scanner uses REJECT" );

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), (size_t) num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			hlexcrestart(hlexcin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yy_size_t) ((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		yy_size_t new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) hlexcrealloc((void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf,new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (void)
{
	register yy_state_type yy_current_state;
	register char *yy_cp;
    
	yy_current_state = (yy_start);
	yy_current_state += YY_AT_BOL();

	(yy_state_ptr) = (yy_state_buf);
	*(yy_state_ptr)++ = yy_current_state;

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 988 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		*(yy_state_ptr)++ = yy_current_state;
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state )
{
	register int yy_is_jam;
    
	register YY_CHAR yy_c = 1;
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 988 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 987);
	if ( ! yy_is_jam )
		*(yy_state_ptr)++ = yy_current_state;

	return yy_is_jam ? 0 : yy_current_state;
}

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (void)
#else
    static int input  (void)
#endif

{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			int offset = (yy_c_buf_p) - (yytext_ptr);
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					hlexcrestart(hlexcin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( hlexcwrap( ) )
						return EOF;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve hlexctext */
	(yy_hold_char) = *++(yy_c_buf_p);

	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = (c == '\n');

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void hlexcrestart  (FILE * input_file )
{
    
	if ( ! YY_CURRENT_BUFFER ){
        hlexcensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            hlexc_create_buffer(hlexcin,YY_BUF_SIZE );
	}

	hlexc_init_buffer(YY_CURRENT_BUFFER,input_file );
	hlexc_load_buffer_state( );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
    void hlexc_switch_to_buffer  (YY_BUFFER_STATE  new_buffer )
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		hlexcpop_buffer_state();
	 *		hlexcpush_buffer_state(new_buffer);
     */
	hlexcensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	hlexc_load_buffer_state( );

	/* We don't actually know whether we did this switch during
	 * EOF (hlexcwrap()) processing, but the only time this flag
	 * is looked at is after hlexcwrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

static void hlexc_load_buffer_state  (void)
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	hlexcin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE hlexc_create_buffer  (FILE * file, int  size )
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) hlexcalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in hlexc_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) hlexcalloc(b->yy_buf_size + 2  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in hlexc_create_buffer()" );

	b->yy_is_our_buffer = 1;

	hlexc_init_buffer(b,file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with hlexc_create_buffer()
 * 
 */
    void hlexc_delete_buffer (YY_BUFFER_STATE  b )
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		hlexcfree((void *) b->yy_ch_buf  );

	hlexcfree((void *) b  );
}

#ifndef __cplusplus
extern int isatty (int );
#endif /* __cplusplus */
    
/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a hlexcrestart() or at EOF.
 */
    static void hlexc_init_buffer  (YY_BUFFER_STATE  b, FILE * file )

{
	int oerrno = errno;
    
	hlexc_flush_buffer(b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then hlexc_init_buffer was _probably_
     * called from hlexcrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
    void hlexc_flush_buffer (YY_BUFFER_STATE  b )
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		hlexc_load_buffer_state( );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
void hlexcpush_buffer_state (YY_BUFFER_STATE new_buffer )
{
    	if (new_buffer == NULL)
		return;

	hlexcensure_buffer_stack();

	/* This block is copied from hlexc_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from hlexc_switch_to_buffer. */
	hlexc_load_buffer_state( );
	(yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
void hlexcpop_buffer_state (void)
{
    	if (!YY_CURRENT_BUFFER)
		return;

	hlexc_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		hlexc_load_buffer_state( );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void hlexcensure_buffer_stack (void)
{
	int num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1;
		(yy_buffer_stack) = (struct yy_buffer_state**)hlexcalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in hlexcensure_buffer_stack()" );
								  
		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		int grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)hlexcrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in hlexcensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * 
 * @return the newly allocated buffer state object. 
 */
YY_BUFFER_STATE hlexc_scan_buffer  (char * base, yy_size_t  size )
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) hlexcalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in hlexc_scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	hlexc_switch_to_buffer(b  );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to hlexclex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * 
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       hlexc_scan_bytes() instead.
 */
YY_BUFFER_STATE hlexc_scan_string (yyconst char * yystr )
{
    
	return hlexc_scan_bytes(yystr,strlen(yystr) );
}

/** Setup the input buffer state to scan the given bytes. The next call to hlexclex() will
 * scan from a @e copy of @a bytes.
 * @param yybytes the byte buffer to scan
 * @param _yybytes_len the number of bytes in the buffer pointed to by @a bytes.
 * 
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE hlexc_scan_bytes  (yyconst char * yybytes, int  _yybytes_len )
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = _yybytes_len + 2;
	buf = (char *) hlexcalloc(n  );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in hlexc_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = hlexc_scan_buffer(buf,n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in hlexc_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yy_fatal_error (yyconst char* msg )
{
    	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up hlexctext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		hlexctext[hlexcleng] = (yy_hold_char); \
		(yy_c_buf_p) = hlexctext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		hlexcleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the current line number.
 * 
 */
int hlexcget_lineno  (void)
{
        
    return hlexclineno;
}

/** Get the input stream.
 * 
 */
FILE *hlexcget_in  (void)
{
        return hlexcin;
}

/** Get the output stream.
 * 
 */
FILE *hlexcget_out  (void)
{
        return hlexcout;
}

/** Get the length of the current token.
 * 
 */
int hlexcget_leng  (void)
{
        return hlexcleng;
}

/** Get the current token.
 * 
 */

char *hlexcget_text  (void)
{
        return hlexctext;
}

/** Set the current line number.
 * @param line_number
 * 
 */
void hlexcset_lineno (int  line_number )
{
    
    hlexclineno = line_number;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param in_str A readable stream.
 * 
 * @see hlexc_switch_to_buffer
 */
void hlexcset_in (FILE *  in_str )
{
        hlexcin = in_str ;
}

void hlexcset_out (FILE *  out_str )
{
        hlexcout = out_str ;
}

int hlexcget_debug  (void)
{
        return hlexc_flex_debug;
}

void hlexcset_debug (int  bdebug )
{
        hlexc_flex_debug = bdebug ;
}

static int yy_init_globals (void)
{
        /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from hlexclex_destroy(), so don't allocate here.
     */

    (yy_buffer_stack) = 0;
    (yy_buffer_stack_top) = 0;
    (yy_buffer_stack_max) = 0;
    (yy_c_buf_p) = (char *) 0;
    (yy_init) = 0;
    (yy_start) = 0;

    (yy_state_buf) = 0;
    (yy_state_ptr) = 0;
    (yy_full_match) = 0;
    (yy_lp) = 0;

/* Defined in main.c */
#ifdef YY_STDINIT
    hlexcin = stdin;
    hlexcout = stdout;
#else
    hlexcin = (FILE *) 0;
    hlexcout = (FILE *) 0;
#endif

    /* For future reference: Set errno on error, since we are called by
     * hlexclex_init()
     */
    return 0;
}

/* hlexclex_destroy is for both reentrant and non-reentrant scanners. */
int hlexclex_destroy  (void)
{
    
    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		hlexc_delete_buffer(YY_CURRENT_BUFFER  );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		hlexcpop_buffer_state();
	}

	/* Destroy the stack itself. */
	hlexcfree((yy_buffer_stack) );
	(yy_buffer_stack) = NULL;

    hlexcfree ( (yy_state_buf) );
    (yy_state_buf)  = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * hlexclex() is called, initialization will occur. */
    yy_init_globals( );

    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n )
{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s )
{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *hlexcalloc (yy_size_t  size )
{
	return (void *) malloc( size );
}

void *hlexcrealloc  (void * ptr, yy_size_t  size )
{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void hlexcfree (void * ptr )
{
	free( (char *) ptr );	/* see hlexcrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 273 "lexc-lexer.ll"



