mapped_notunique <- 50
u_small <- 20
u_med <- 400
u_big <- 75
med_anchor <- 300
med_nanchor <- 100
nodes <- data.frame(name = c("Total", "Not in Loops", "Mapped", "Unique", "<5kb", ">2Mb", "5kb-2Mb", "In Anchors"),
g = c("a", "c", rep("a", 2), "c", "c", "a", "a"))
links <- data.frame(source = c(0,0,2,2,3,3,3,4,5,6,6), target = c(2,1,3,1,4,5,6,1,1,7,1),
value = c(total_mapped, total_unmapped, mapped_unique, mapped_notunique,
u_small, u_big, u_med,  u_small, u_big,med_anchor, med_nanchor),
g = c("b", "d", "b", "d", "b", "d", "d", "d", "b", "d", "d","b","d" ))
df <- list(nodes = nodes, links = links)
sankeyNetwork(Links = df$links, Nodes = df$nodes, Source = "source",
Target = "target", Value = "value", NodeID = "name", nodePadding = 30,
fontSize = 12, nodeWidth = 30, fontFamily = "Arial", NodeGroup = "g",
LinkGroup = "g", colourScale = JS("d3.scale.category10()"), margin = list(0,0,0,0),
width = "100%", height = "100%")
dat <- readstats[readstats[,1] == sample,3]
total <- dat[1]
total_mapped <- dat[2]/total * 100
total_unmapped <- 100 - total_mapped
mapped_unique <- dat[3]/total * 100
mapped_notunique <- 50
u_small <- 20
u_med <- 400
u_big <- 75
med_anchor <- 300
med_nanchor <- 100
nodes <- data.frame(name = c("Total", "Not in Loops", "Mapped", "Unique", "<5kb", ">2Mb", "5kb-2Mb", "In Anchors"),
g = c("a", "c", rep("a", 2), "c", "c", "a", "a"))
links <- data.frame(source = c(0,0,2,2,3,3,3,4,5,6,6), target = c(2,1,3,1,4,5,6,1,1,7,1),
value = c(total_mapped, total_unmapped, mapped_unique, mapped_notunique,
u_small, u_big, u_med,  u_small, u_big,med_anchor, med_nanchor),
g = c("b", "d", "b", "d", "d", "d", "b", "d", "d","b","d" ))
df <- list(nodes = nodes, links = links)
sankeyNetwork(Links = df$links, Nodes = df$nodes, Source = "source",
Target = "target", Value = "value", NodeID = "name", nodePadding = 30,
fontSize = 12, nodeWidth = 30, fontFamily = "Arial", NodeGroup = "g",
LinkGroup = "g", colourScale = JS("d3.scale.category10()"), margin = list(0,0,0,0),
width = "100%", height = "100%")
}
dat
readstats
dat <- readstats[readstats[,1] == sample,3]
total <- dat[1]
total_mapped <- dat[2]/total * 100
total_unmapped <- 100 - total_mapped
mapped_u <- dat[2]/total * 100
mapped_nu <- 75
u_i <- 495
u_ni <- 30
i_small <- 20
i_med <- 400
i_big <- 75
med_anchor <- 300
med_nanchor <- 100
nodes <- data.frame(name = c("Total", "Not in Loops", "HQ_Mapped", "Unique", "Intra", "<5kb", ">2Mb", "5kb-2Mb", "In Anchors"),
g = c("a", "c", rep("a", 3), "c", "c", "a", "a"))
links <- data.frame(source = c(0,0,2,2,3,3,4,4,4,5,6,7,7), target = c(2,1,3,1,4,1,5,6,7,1,1,8,1),
value = c(total_mapped, total_unmapped, mapped_u, mapped_nu, u_i, u_ni,
i_small, i_big, i_med,  i_small, i_big, med_anchor, med_nanchor),
g = c("b", "d", "b", "d", "b", "d", "d", "d", "b", "d", "d", "b", "d" ))
df <- list(nodes = nodes, links = links)
sankeyNetwork(Links = df$links, Nodes = df$nodes, Source = "source",
Target = "target", Value = "value", NodeID = "name", nodePadding = 30,
fontSize = 12, nodeWidth = 30, fontFamily = "Arial", NodeGroup = "g",
LinkGroup = "g", colourScale = JS("d3.scale.category10()"), margin = list(0,0,0,0),
width = "100%", height = "100%")
readstats
dat <- readstats[readstats[,1] == sample,3]
total <- dat[1]
total_mapped <- dat[2]/total * 100
total_unmapped <- 100 - total_mapped
mapped_u <- dat[3]/total * 100
mapped_nu <- total_mapped - mapped_u
u_i <- dat[4]/total * 100
u_ni <- mapped_u - u_i
i_small <- u_i * dat[5]/sum(dat[c(5,6,7)])
i_med <-  u_i * dat[6]/sum(dat[c(5,6,7)])
i_big <-  u_i * dat[7]/sum(dat[c(5,6,7)])
med_anchor <- 300
med_nanchor <- 100
nodes <- data.frame(name = c("Total", "Not in Loops", "HQ_Mapped", "Unique", "Intra", "<5kb", ">2Mb", "5kb-2Mb", "In Anchors"),
g = c("a", "c", rep("a", 3), "c", "c", "a", "a"))
links <- data.frame(source = c(0,0,2,2,3,3,4,4,4,5,6,7,7), target = c(2,1,3,1,4,1,5,6,7,1,1,8,1),
value = c(total_mapped, total_unmapped, mapped_u, mapped_nu, u_i, u_ni,
i_small, i_big, i_med,  i_small, i_big, med_anchor, med_nanchor),
g = c("b", "d", "b", "d", "b", "d", "d", "d", "b", "d", "d", "b", "d" ))
df <- list(nodes = nodes, links = links)
sankeyNetwork(Links = df$links, Nodes = df$nodes, Source = "source",
Target = "target", Value = "value", NodeID = "name", nodePadding = 30,
fontSize = 12, nodeWidth = 30, fontFamily = "Arial", NodeGroup = "g",
LinkGroup = "g", colourScale = JS("d3.scale.category10()"), margin = list(0,0,0,0),
width = "100%", height = "100%")
readstats
dat <- readstats[readstats[,1] == sample,3]
total <- dat[1]
total_mapped <- dat[2]/total * 100
total_unmapped <- 100 - total_mapped
mapped_u <- dat[3]/total * 100
mapped_nu <- total_mapped - mapped_u
u_i <- dat[4]/total * 100
u_ni <- mapped_u - u_i
i_small <- u_i * dat[5]/sum(dat[c(5,6,7)])
i_med <-  u_i * dat[6]/sum(dat[c(5,6,7)])
i_big <-  u_i * dat[7]/sum(dat[c(5,6,7)])
med_anchor <- dat[8]/total * 100
med_nanchor <- i_med - med_anchor
nodes <- data.frame(name = c("Total", "Not in Loops", "HQ_Mapped", "Unique", "Intra", "<5kb", ">2Mb", "5kb-2Mb", "In Anchors"),
g = c("a", "c", rep("a", 3), "c", "c", "a", "a"))
links <- data.frame(source = c(0,0,2,2,3,3,4,4,4,5,6,7,7), target = c(2,1,3,1,4,1,5,6,7,1,1,8,1),
value = c(total_mapped, total_unmapped, mapped_u, mapped_nu, u_i, u_ni,
i_small, i_big, i_med,  i_small, i_big, med_anchor, med_nanchor),
g = c("b", "d", "b", "d", "b", "d", "d", "d", "b", "d", "d", "b", "d" ))
df <- list(nodes = nodes, links = links)
sankeyNetwork(Links = df$links, Nodes = df$nodes, Source = "source",
Target = "target", Value = "value", NodeID = "name", nodePadding = 30,
fontSize = 12, nodeWidth = 30, fontFamily = "Arial", NodeGroup = "g",
LinkGroup = "g", colourScale = JS("d3.scale.category10()"), margin = list(0,0,0,0),
width = "100%", height = "100%")
foreach(sample = samples){
dat <- readstats[readstats[,1] == sample,3]
total <- dat[1]
total_mapped <- dat[2]/total * 100
total_unmapped <- 100 - total_mapped
mapped_u <- dat[3]/total * 100
mapped_nu <- total_mapped - mapped_u
u_i <- dat[4]/total * 100
u_ni <- mapped_u - u_i
i_small <- u_i * dat[5]/sum(dat[c(5,6,7)])
i_med <-  u_i * dat[6]/sum(dat[c(5,6,7)])
i_big <-  u_i * dat[7]/sum(dat[c(5,6,7)])
med_anchor <- dat[8]/total * 100
med_nanchor <- i_med - med_anchor
nodes <- data.frame(name = c("Total", "Not in Loops", "HQ_Mapped", "Unique", "Intra", "<5kb", ">2Mb", "5kb-2Mb", "In Anchors"),
g = c("a", "c", rep("a", 3), "c", "c", "a", "a"))
links <- data.frame(source = c(0,0,2,2,3,3,4,4,4,5,6,7,7), target = c(2,1,3,1,4,1,5,6,7,1,1,8,1),
value = c(total_mapped, total_unmapped, mapped_u, mapped_nu, u_i, u_ni,
i_small, i_big, i_med,  i_small, i_big, med_anchor, med_nanchor),
g = c("b", "d", "b", "d", "b", "d", "d", "d", "b", "d", "d", "b", "d" ))
df <- list(nodes = nodes, links = links)
sankeyNetwork(Links = df$links, Nodes = df$nodes, Source = "source",
Target = "target", Value = "value", NodeID = "name", nodePadding = 30,
fontSize = 12, nodeWidth = 30, fontFamily = "Arial", NodeGroup = "g",
LinkGroup = "g", colourScale = JS("d3.scale.category10()"), margin = list(0,0,0,0),
width = "100%", height = "100%")
}
for(sample in samples){
dat <- readstats[readstats[,1] == sample,3]
total <- dat[1]
total_mapped <- dat[2]/total * 100
total_unmapped <- 100 - total_mapped
mapped_u <- dat[3]/total * 100
mapped_nu <- total_mapped - mapped_u
u_i <- dat[4]/total * 100
u_ni <- mapped_u - u_i
i_small <- u_i * dat[5]/sum(dat[c(5,6,7)])
i_med <-  u_i * dat[6]/sum(dat[c(5,6,7)])
i_big <-  u_i * dat[7]/sum(dat[c(5,6,7)])
med_anchor <- dat[8]/total * 100
med_nanchor <- i_med - med_anchor
nodes <- data.frame(name = c("Total", "Not in Loops", "HQ_Mapped", "Unique", "Intra", "<5kb", ">2Mb", "5kb-2Mb", "In Anchors"),
g = c("a", "c", rep("a", 3), "c", "c", "a", "a"))
links <- data.frame(source = c(0,0,2,2,3,3,4,4,4,5,6,7,7), target = c(2,1,3,1,4,1,5,6,7,1,1,8,1),
value = c(total_mapped, total_unmapped, mapped_u, mapped_nu, u_i, u_ni,
i_small, i_big, i_med,  i_small, i_big, med_anchor, med_nanchor),
g = c("b", "d", "b", "d", "b", "d", "d", "d", "b", "d", "d", "b", "d" ))
df <- list(nodes = nodes, links = links)
sankeyNetwork(Links = df$links, Nodes = df$nodes, Source = "source",
Target = "target", Value = "value", NodeID = "name", nodePadding = 30,
fontSize = 12, nodeWidth = 30, fontFamily = "Arial", NodeGroup = "g",
LinkGroup = "g", colourScale = JS("d3.scale.category10()"), margin = list(0,0,0,0),
width = "100%", height = "100%")
}
?knit_expand
?knit
?Set
?Set
?set
?assign
sample
assign(sample, "hey")
sample
get(sample)
knit_expand(text = sprintf("```{r %s}\n .pl \n```", paste0("san", sample)))
?knit
cat(knit(text = knit_expand(text = sprintf("```{r %s}\n .pl \n```", paste0("san", sample))), quiet = TRUE))
.pl <- sankeyNetwork(Links = df$links, Nodes = df$nodes, Source = "source",
Target = "target", Value = "value", NodeID = "name", nodePadding = 30,
fontSize = 12, nodeWidth = 30, fontFamily = "Arial", NodeGroup = "g",
LinkGroup = "g", colourScale = JS("d3.scale.category10()"), margin = list(0,0,0,0),
width = "100%", height = "100%")
cat(knit(text = knit_expand(text = sprintf("```{r %s}\n .pl \n```", paste0("san", sample))), quiet = TRUE))
cat('\n')
tab_summary
tab
tab_percent[c(6,5,2),,drop = FALSE]
dim(tab)
head(tab)
tab
tab <- suppressMessages(acast(readstats, metric~sample, sum))
tab[10,] <- tab[6,] + tab[6,]
tab <- rbind(tab, tab[6,] + tab[7,])
tab
tab <- suppressMessages(acast(readstats, metric~sample, sum))
tab <- rbind(tab, "Long_Range_Interactions", tab[6,] + tab[7,])
tab
tab <- suppressMessages(acast(readstats, metric~sample, sum))
tab <- rbind(tab, Long_Range_Interactions = tab[6,] + tab[7,])
tab
tab_percent <- 100*sweep(tab, 2, tab["Total_PETs",], FUN="/")
tab_percent
dim(tab_percent)
tab <- suppressMessages(acast(readstats, metric~sample, sum))
tab <- rbind(tab, Long_Range_Interactions = tab[6,] + tab[7,])
tab_percent <- 100*sweep(tab, 2, tab["Total_PETs",], FUN="/")
tab_summary <- rbind(format(tab_percent[c(9,10,2),,drop = FALSE], digits = 2, nsmall = 2),
as.character(tab[1,,drop = FALSE]) )
rownames(tab_summary) <- c(paste0("% in Loops"),
"% Long Range Interaction",
"% HQ Mapped",
"Total PETs")
tab_summary <- tab_summary[4:1,, drop = FALSE]
tab_summary
tab
tab[c(6,7,8),]
if(dim(tab)[2] == 1){
intraSum <- sum(tab[c(5,6,7),])
}else {
intraSum <- colSums(tab[c(5,6,7),])
}
tab_summary2 <- rbind(intraSum,
format(tab[5,]/intraSum * 100, digits = 2, nsmall = 2),
format(tab[6,]/intraSum * 100, digits = 2, nsmall = 2),
format(tab[7,]/intraSum * 100, digits = 2, nsmall = 2))
r <-  paste0(round(min_length/1000), "KB-",  round(max_length/1000000), "Mb")
rownames(tab_summary2) <- c("Intra, anchor-mapped PETs",
paste0("% Long Reads in ",r),
paste0("% Long Reads < ", mincar),
paste0("% Long Reads > ", maxcar))
colnames(tab_summary2) <- colnames(tab_summary)
tab_summary
tab_summary2
intraSum
tab[c(5,6,7),]
tab_summary2 <- rbind(intraSum,
format(tab[5,]/intraSum * 100, digits = 2, nsmall = 2),
format(tab[6,]/intraSum * 100, digits = 2, nsmall = 2),
format(tab[7,]/intraSum * 100, digits = 2, nsmall = 2))
r <-  paste0(round(min_length/1000), "KB-",  round(max_length/1000000), "Mb")
rownames(tab_summary2) <- c("Intra, anchor-mapped PETs",
paste0("% Long Reads < ", mincar),
paste0("% Long Reads in ",r),
paste0("% Long Reads > ", maxcar))
colnames(tab_summary2) <- colnames(tab_summary)
tab_summary2
tab_summary2 <- rbind(intraSum,
format(tab[5,]/intraSum * 100, digits = 2, nsmall = 2),
format(tab[6,]/intraSum * 100, digits = 2, nsmall = 2),
format(tab[7,]/intraSum * 100, digits = 2, nsmall = 2))
r <-  paste0(round(min_length/1000), "KB-",  round(max_length/1000000), "Mb")
rownames(tab_summary2) <- c("Intrachromasomal PETs",
paste0("% Long Reads < ", mincar),
paste0("% Long Reads in ",r),
paste0("% Long Reads > ", maxcar))
colnames(tab_summary2) <- colnames(tab_summary)
tab_summary2
readstats
format(acast(readstats, metric~sample, sum), big.mark=",")
dim(format(acast(readstats, metric~sample, sum), big.mark=","))
format(acast(readstats, metric~sample, sum), big.mark=",")[-8,]
tab_percent
dim(tab_percent)
format(tab_percent[c(-8,-10),,drop = FALSE], digits=2, nsmall=2)
format(acast(readstats, metric~sample, sum), big.mark=",")[-8,]
dim(loop_pets)
head(v)
head(loop_pets)
datatable(anchors, class = 'cell-border stripe')
?data.table
?datatable
datatable(anchors, rownames = FALSE, class = 'cell-border stripe')
sample
sfilename <- file.path(paste0(cwd, "/",outdir, "/",sample , ".intra.loop_counts.bedpe"))
x <- suppressMessages(read_delim(sfilename, " ", col_names = FALSE))
intra <- x[,1]==x[,4]
x <- x[intra,]
loop_length <- rep(as.numeric(((x[, 5]+ x[, 6])/2 - (x[, 2] + x[, 3])/2)[[1]]), as.numeric((x[, 8])[[1]]))
df <- data.frame(loop_length = pmax(0, loop_length))
p1 <- ggplot(df, aes(loop_length)) + geom_histogram(bins = 40) + scale_x_log10(labels="loop_length", breaks=10^(3:9)) +
theme_bw()
?scale_x_log10
p1 <- ggplot(df, aes(loop_length)) + geom_histogram(bins = 40) + scale_x_log10() +
theme_bw()
p1
ggThemeAssist:::ggThemeAssistAddin()
df <- data.frame(loop_length = pmax(0, loop_length))
pl1 <- ggplot(df, aes(loop_length)) + geom_histogram(bins = 40) + scale_x_log10() +
theme_bw() +labs(title = paste0(sample, " Loop Width Distribution"), x = "Loop Length") +
cat(knit(text = knit_expand(text = sprintf("```{r %s, echo=FALSE, message=FALSE} \n pl1 \n```", paste0("hist", sample))), quiet = TRUE))
pl1 <- ggplot(df, aes(loop_length)) + geom_histogram(bins = 40) + scale_x_log10() +
theme_bw() +labs(title = paste0(sample, " Loop Width Distribution"), x = "Loop Length")
pl1
loop_length <- log10(pmax(, loop_length))
loop_length <- rep(as.numeric(((x[, 5]+ x[, 6])/2 - (x[, 2] + x[, 3])/2)[[1]]), as.numeric((x[, 8])[[1]]))
loop_length <- log10(pmax(0, loop_length))
head(loop_length)
ll <- loop_length[loop_length > 0]
head(ll)
x <- suppressMessages(read_delim(sfilename, " ", col_names = FALSE))
intra <- x[,1]==x[,4]
x <- x[intra,]
loop_length <- rep(as.numeric(((x[, 5]+ x[, 6])/2 - (x[, 2] + x[, 3])/2)[[1]]), as.numeric((x[, 8])[[1]]))
loop_length <- pmax(0, loop_length)
plot(loop_length, log="y", type='h', lwd=10, lend=2)
sfilename <- file.path(paste0(cwd, "/",outdir, "/",sample , ".intra.loop_counts.bedpe"))
x <- suppressMessages(read_delim(sfilename, " ", col_names = FALSE))
intra <- x[,1]==x[,4]
x <- x[intra,]
loop_length <- rep(as.numeric(((x[, 5]+ x[, 6])/2 - (x[, 2] + x[, 3])/2)[[1]]), as.numeric((x[, 8])[[1]]))
loop_length <- pmax(0, loop_length)
plot(loop_length, log="x", type='h', lwd=10, lend=2)
plot(loop_length, log="x", type='h')
plot(loop_length, log="x", type='h',breaks=20, main= paste0(sample, " Loop Size Distribution"))
hist(loop_length, log="x", , breaks=20, main= aste0(sample, " Loop Size Distribution"))
hist(loop_length, log="x", breaks=20, main=paste0(sample, " Loop Size Distribution"))
sfilename <- file.path(paste0(cwd, "/",outdir, "/",sample , ".intra.loop_counts.bedpe"))
x <- suppressMessages(read_delim(sfilename, " ", col_names = FALSE))
intra <- x[,1]==x[,4]
x <- x[intra,]
loop_length <- rep(as.numeric(((x[, 5]+ x[, 6])/2 - (x[, 2] + x[, 3])/2)[[1]]), as.numeric((x[, 8])[[1]]))
df <- data.frame(loop_length = pmax(0, loop_length))
pl1 <- ggplot(df, aes(loop_length)) + geom_histogram(bins = 40) + scale_x_log10() +
theme_bw() +labs(title = paste0(sample, " Loop Width Distribution"), x = "Loop Length")
cat(knit(text = knit_expand(text = sprintf("```{r %s, echo=FALSE, message=FALSE, warning=FALSE, out.width='\\textwidth', fig.width=7 } \n pl1 \n```", paste0("hist", sample))), quiet = TRUE))
pl1
samples <- "test_sample1"
min_length <- 0
max_length <- 0
anchors <- data.frame()
# Creates a dataframe of summary statistics from the individual sample log output files
readstats <- foreach(sample = samples, .combine="rbind") %do% {
sfilename <- file.path(paste0(cwd, "/", outdir, "/", sample, ".stat"))
rs <- read.table(sfilename, header=FALSE, stringsAsFactors = FALSE, sep = "=")
anchors <- rbind(anchors, data.frame(sample= sample, npeaks = rs[12,2] ))
min_length <- rs[13,2]
max_length <- rs[14,2]
rso <- cbind(sample=sample, rs[c(1:8, 10),])
colnames(rso) <- c("sample", "metric", "count")
rso
}
mincar <- paste0(round(min_length/1000), "Kb")
maxcar <- paste0(round(max_length/1000000), "Mb")
np <- paste0("Mapped_unique_intra_q30_", mincar, "-",  maxcar)
npa <- paste0("Mapped_unique_intra_q30_anchor_", mincar,"-", maxcar)
metrics <- c("Total_PETs", "Mapped_PETs_q30", "Mapped_unique_PETs_q30", "Mapped_unique_intra_q30", #1-4
paste0("Mapped_unique_intra_q30_<", mincar), np, #5,6
paste0("Mapped_unique_intra_q30_>", maxcar), #7
paste0("Mapped_unique_intra_q30_anchor"), npa) #8,9
readstats$metric <- factor(rep(metrics, length(samples)), levels=metrics)
# Organize summary tables
tab <- suppressMessages(acast(readstats, metric~sample, sum))
tab
tab <- rbind(tab, Long_Range_Interactions = tab[6,] + tab[7,])
tab_percent <- 100*sweep(tab, 2, tab["Total_PETs",], FUN="/")
tab_summary <- rbind(format(tab_percent[c(9,10,2),,drop = FALSE], digits = 2, nsmall = 2),
as.character(tab[1,,drop = FALSE]) )
rownames(tab_summary) <- c(paste0("% in Loops"),
"% Long Range Interaction",
"% HQ Mapped",
"Total PETs")
tab_summary <- tab_summary[4:1,, drop = FALSE]
if(dim(tab)[2] == 1){
intraSum <- sum(tab[c(5,6,7),])
}else {
intraSum <- colSums(tab[c(5,6,7),])
}
tab_summary2 <- rbind(intraSum,
format(tab[5,]/intraSum * 100, digits = 2, nsmall = 2),
format(tab[6,]/intraSum * 100, digits = 2, nsmall = 2),
format(tab[7,]/intraSum * 100, digits = 2, nsmall = 2))
r <-  paste0(round(min_length/1000), "KB-",  round(max_length/1000000), "Mb")
rownames(tab_summary2) <- c("Intrachromasomal PETs",
paste0("% Long Reads < ", mincar),
paste0("% Long Reads in ",r),
paste0("% Long Reads > ", maxcar))
colnames(tab_summary2) <- colnames(tab_summary)
datatable(format(acast(readstats, metric~sample, sum), big.mark=",")[-8,], class = 'cell-border stripe')
acast(readstats, metric~sample, sum)
cwd <- "/Users/lareauc/Desktop/newQC"
outdir <- "ss"
samples <- c("Small7", "Small8")
min_length <- 0
max_length <- 0
anchors <- data.frame()
# Creates a dataframe of summary statistics from the individual sample log output files
readstats <- foreach(sample = samples, .combine="rbind") %do% {
sfilename <- file.path(paste0(cwd, "/", outdir, "/", sample, ".stat"))
rs <- read.table(sfilename, header=FALSE, stringsAsFactors = FALSE, sep = "=")
anchors <- rbind(anchors, data.frame(sample= sample, npeaks = rs[12,2] ))
min_length <- rs[13,2]
max_length <- rs[14,2]
rso <- cbind(sample=sample, rs[c(1:8, 10),])
colnames(rso) <- c("sample", "metric", "count")
rso
}
mincar <- paste0(round(min_length/1000), "Kb")
maxcar <- paste0(round(max_length/1000000), "Mb")
np <- paste0("Mapped_unique_intra_q30_", mincar, "-",  maxcar)
npa <- paste0("Mapped_unique_intra_q30_anchor_", mincar,"-", maxcar)
metrics <- c("Total_PETs", "Mapped_PETs_q30", "Mapped_unique_PETs_q30", "Mapped_unique_intra_q30", #1-4
paste0("Mapped_unique_intra_q30_<", mincar), np, #5,6
paste0("Mapped_unique_intra_q30_>", maxcar), #7
paste0("Mapped_unique_intra_q30_anchor"), npa) #8,9
readstats$metric <- factor(rep(metrics, length(samples)), levels=metrics)
# Organize summary tables
tab <- suppressMessages(acast(readstats, metric~sample, sum))
tab <- rbind(tab, Long_Range_Interactions = tab[6,] + tab[7,])
tab_percent <- 100*sweep(tab, 2, tab["Total_PETs",], FUN="/")
tab_summary <- rbind(format(tab_percent[c(9,10,2),,drop = FALSE], digits = 2, nsmall = 2),
as.character(tab[1,,drop = FALSE]) )
rownames(tab_summary) <- c(paste0("% in Loops"),
"% Long Range Interaction",
"% HQ Mapped",
"Total PETs")
tab_summary <- tab_summary[4:1,, drop = FALSE]
if(dim(tab)[2] == 1){
intraSum <- sum(tab[c(5,6,7),])
}else {
intraSum <- colSums(tab[c(5,6,7),])
}
tab_summary2 <- rbind(intraSum,
format(tab[5,]/intraSum * 100, digits = 2, nsmall = 2),
format(tab[6,]/intraSum * 100, digits = 2, nsmall = 2),
format(tab[7,]/intraSum * 100, digits = 2, nsmall = 2))
r <-  paste0(round(min_length/1000), "KB-",  round(max_length/1000000), "Mb")
rownames(tab_summary2) <- c("Intrachromasomal PETs",
paste0("% Reads < ", mincar),
paste0("% Reads in ",r),
paste0("% Reads > ", maxcar))
colnames(tab_summary2) <- colnames(tab_summary)
suppressMessages(library(ggplot2))
suppressMessages(library(foreach))
suppressMessages(library(reshape2))
suppressMessages(library(readr))
suppressMessages(library(knitr))
suppressMessages(library(DT))
suppressMessages(library(networkD3))
min_length <- 0
max_length <- 0
anchors <- data.frame()
# Creates a dataframe of summary statistics from the individual sample log output files
readstats <- foreach(sample = samples, .combine="rbind") %do% {
sfilename <- file.path(paste0(cwd, "/", outdir, "/", sample, ".stat"))
rs <- read.table(sfilename, header=FALSE, stringsAsFactors = FALSE, sep = "=")
anchors <- rbind(anchors, data.frame(sample= sample, npeaks = rs[12,2] ))
min_length <- rs[13,2]
max_length <- rs[14,2]
rso <- cbind(sample=sample, rs[c(1:8, 10),])
colnames(rso) <- c("sample", "metric", "count")
rso
}
mincar <- paste0(round(min_length/1000), "Kb")
maxcar <- paste0(round(max_length/1000000), "Mb")
np <- paste0("Mapped_unique_intra_q30_", mincar, "-",  maxcar)
npa <- paste0("Mapped_unique_intra_q30_anchor_", mincar,"-", maxcar)
metrics <- c("Total_PETs", "Mapped_PETs_q30", "Mapped_unique_PETs_q30", "Mapped_unique_intra_q30", #1-4
paste0("Mapped_unique_intra_q30_<", mincar), np, #5,6
paste0("Mapped_unique_intra_q30_>", maxcar), #7
paste0("Mapped_unique_intra_q30_anchor"), npa) #8,9
readstats$metric <- factor(rep(metrics, length(samples)), levels=metrics)
# Organize summary tables
tab <- suppressMessages(acast(readstats, metric~sample, sum))
tab <- rbind(tab, Long_Range_Interactions = tab[6,] + tab[7,])
tab_percent <- 100*sweep(tab, 2, tab["Total_PETs",], FUN="/")
tab_summary <- rbind(format(tab_percent[c(9,10,2),,drop = FALSE], digits = 2, nsmall = 2),
as.character(tab[1,,drop = FALSE]) )
rownames(tab_summary) <- c(paste0("% in Loops"),
"% Long Range Interaction",
"% HQ Mapped",
"Total PETs")
tab_summary <- tab_summary[4:1,, drop = FALSE]
if(dim(tab)[2] == 1){
intraSum <- sum(tab[c(5,6,7),])
}else {
intraSum <- colSums(tab[c(5,6,7),])
}
tab_summary2 <- rbind(intraSum,
format(tab[5,]/intraSum * 100, digits = 2, nsmall = 2),
format(tab[6,]/intraSum * 100, digits = 2, nsmall = 2),
format(tab[7,]/intraSum * 100, digits = 2, nsmall = 2))
r <-  paste0(round(min_length/1000), "KB-",  round(max_length/1000000), "Mb")
rownames(tab_summary2) <- c("Intrachromasomal PETs",
paste0("% Reads < ", mincar),
paste0("% Reads in ",r),
paste0("% Reads > ", maxcar))
colnames(tab_summary2) <- colnames(tab_summary)
dat <- readstats[readstats[,1] == sample,3]
total <- dat[1]
sample
dat
readstats
?sankeyNetwork
??sankeyNetwork
rmarkdown::pandoc_available
?rmarkdown::pandoc_available
rmarkdown::pandoc_available()
rmarkdown::pandoc_available("1.12.3")
as.character(pandoc_version())
library(rmarkdown)
as.character(pandoc_version())
