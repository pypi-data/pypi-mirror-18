# coding: utf-8

"""
    IdCheck.IO API

    Check identity documents

    OpenAPI spec version: 0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from __future__ import absolute_import

import sys
import os
import re

# python 2 and python 3 compatibility library
from six import iteritems

from ..configuration import Configuration
from ..api_client import ApiClient


class AnalysisApi(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        config = Configuration()
        if api_client:
            self.api_client = api_client
        else:
            if not config.api_client:
                config.api_client = ApiClient()
            self.api_client = config.api_client

    def get_report(self, analysis_ref_uid, **kwargs):
        """
        HTTP GET report (demo)
        Get a pdf report (base64 encoded) (demo)

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_report(analysis_ref_uid, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str analysis_ref_uid: Report analysisRefUid (required)
        :param str accept_language: Accept language header
        :return: ReportResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_report_with_http_info(analysis_ref_uid, **kwargs)
        else:
            (data) = self.get_report_with_http_info(analysis_ref_uid, **kwargs)
            return data

    def get_report_with_http_info(self, analysis_ref_uid, **kwargs):
        """
        HTTP GET report (demo)
        Get a pdf report (base64 encoded) (demo)

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_report_with_http_info(analysis_ref_uid, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str analysis_ref_uid: Report analysisRefUid (required)
        :param str accept_language: Accept language header
        :return: ReportResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['analysis_ref_uid', 'accept_language']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_report" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'analysis_ref_uid' is set
        if ('analysis_ref_uid' not in params) or (params['analysis_ref_uid'] is None):
            raise ValueError("Missing the required parameter `analysis_ref_uid` when calling `get_report`")

        resource_path = '/v0/pdfreport/{analysisRefUid}'.replace('{format}', 'json')
        path_params = {}
        if 'analysis_ref_uid' in params:
            path_params['analysisRefUid'] = params['analysis_ref_uid']

        query_params = {}

        header_params = {}
        if 'accept_language' in params:
            header_params['Accept-Language'] = params['accept_language']

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json; charset=utf-8'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type([])

        # Authentication setting
        auth_settings = ['basic']

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='ReportResponse',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def get_result(self, analysis_ref_uid, **kwargs):
        """
        HTTP GET result
        Get result controls

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_result(analysis_ref_uid, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str analysis_ref_uid: Result analysisRefUid (required)
        :param str accept_language: Accept language header
        :param bool recto_image_cropped: True to obtain recto image cropped if applicable
        :param bool face_image_cropped: True to obtain face image cropped if applicable
        :param bool signature_image_cropped: True to obtain signature image cropped if applicable
        :return: ResultResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_result_with_http_info(analysis_ref_uid, **kwargs)
        else:
            (data) = self.get_result_with_http_info(analysis_ref_uid, **kwargs)
            return data

    def get_result_with_http_info(self, analysis_ref_uid, **kwargs):
        """
        HTTP GET result
        Get result controls

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_result_with_http_info(analysis_ref_uid, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str analysis_ref_uid: Result analysisRefUid (required)
        :param str accept_language: Accept language header
        :param bool recto_image_cropped: True to obtain recto image cropped if applicable
        :param bool face_image_cropped: True to obtain face image cropped if applicable
        :param bool signature_image_cropped: True to obtain signature image cropped if applicable
        :return: ResultResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['analysis_ref_uid', 'accept_language', 'recto_image_cropped', 'face_image_cropped', 'signature_image_cropped']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_result" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'analysis_ref_uid' is set
        if ('analysis_ref_uid' not in params) or (params['analysis_ref_uid'] is None):
            raise ValueError("Missing the required parameter `analysis_ref_uid` when calling `get_result`")

        resource_path = '/v0/result/{analysisRefUid}'.replace('{format}', 'json')
        path_params = {}
        if 'analysis_ref_uid' in params:
            path_params['analysisRefUid'] = params['analysis_ref_uid']

        query_params = {}
        if 'recto_image_cropped' in params:
            query_params['rectoImageCropped'] = params['recto_image_cropped']
        if 'face_image_cropped' in params:
            query_params['faceImageCropped'] = params['face_image_cropped']
        if 'signature_image_cropped' in params:
            query_params['signatureImageCropped'] = params['signature_image_cropped']

        header_params = {}
        if 'accept_language' in params:
            header_params['Accept-Language'] = params['accept_language']

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json; charset=utf-8'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type([])

        # Authentication setting
        auth_settings = ['basic']

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='ResultResponse',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def get_task(self, analysis_ref_uid, **kwargs):
        """
        HTTP GET task
        Get task status

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_task(analysis_ref_uid, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str analysis_ref_uid: Task analysisRefUid (required)
        :param str accept_language: Accept language header
        :param int wait: specify a maximum wait time in milliseconds
        :return: TaskResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_task_with_http_info(analysis_ref_uid, **kwargs)
        else:
            (data) = self.get_task_with_http_info(analysis_ref_uid, **kwargs)
            return data

    def get_task_with_http_info(self, analysis_ref_uid, **kwargs):
        """
        HTTP GET task
        Get task status

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_task_with_http_info(analysis_ref_uid, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str analysis_ref_uid: Task analysisRefUid (required)
        :param str accept_language: Accept language header
        :param int wait: specify a maximum wait time in milliseconds
        :return: TaskResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['analysis_ref_uid', 'accept_language', 'wait']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_task" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'analysis_ref_uid' is set
        if ('analysis_ref_uid' not in params) or (params['analysis_ref_uid'] is None):
            raise ValueError("Missing the required parameter `analysis_ref_uid` when calling `get_task`")

        resource_path = '/v0/task/{analysisRefUid}'.replace('{format}', 'json')
        path_params = {}
        if 'analysis_ref_uid' in params:
            path_params['analysisRefUid'] = params['analysis_ref_uid']

        query_params = {}
        if 'wait' in params:
            query_params['wait'] = params['wait']

        header_params = {}
        if 'accept_language' in params:
            header_params['Accept-Language'] = params['accept_language']

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json; charset=utf-8'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type([])

        # Authentication setting
        auth_settings = ['basic']

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='TaskResponse',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def post_image(self, body, **kwargs):
        """
        HTTP POST task image
        POST an image check task

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.post_image(body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param ImageRequest body: Image request (required)
        :param bool async_mode: true to activate asynchrone mode
        :param str accept_language: Accept language header
        :return: ResultResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.post_image_with_http_info(body, **kwargs)
        else:
            (data) = self.post_image_with_http_info(body, **kwargs)
            return data

    def post_image_with_http_info(self, body, **kwargs):
        """
        HTTP POST task image
        POST an image check task

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.post_image_with_http_info(body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param ImageRequest body: Image request (required)
        :param bool async_mode: true to activate asynchrone mode
        :param str accept_language: Accept language header
        :return: ResultResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'async_mode', 'accept_language']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_image" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params) or (params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `post_image`")

        resource_path = '/v0/task/image'.replace('{format}', 'json')
        path_params = {}

        query_params = {}
        if 'async_mode' in params:
            query_params['asyncMode'] = params['async_mode']

        header_params = {}
        if 'accept_language' in params:
            header_params['Accept-Language'] = params['accept_language']

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json; charset=utf-8'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['basic']

        return self.api_client.call_api(resource_path, 'POST',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='ResultResponse',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def post_mrz(self, body, **kwargs):
        """
        HTTP POST task mrz
        POST a mrz check task

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.post_mrz(body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param MrzRequest body: Mrz request (required)
        :param bool async_mode: true to activate asynchrone mode
        :param str accept_language: Accept language header
        :return: ResultResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.post_mrz_with_http_info(body, **kwargs)
        else:
            (data) = self.post_mrz_with_http_info(body, **kwargs)
            return data

    def post_mrz_with_http_info(self, body, **kwargs):
        """
        HTTP POST task mrz
        POST a mrz check task

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.post_mrz_with_http_info(body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param MrzRequest body: Mrz request (required)
        :param bool async_mode: true to activate asynchrone mode
        :param str accept_language: Accept language header
        :return: ResultResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'async_mode', 'accept_language']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_mrz" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params) or (params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `post_mrz`")

        resource_path = '/v0/task/mrz'.replace('{format}', 'json')
        path_params = {}

        query_params = {}
        if 'async_mode' in params:
            query_params['asyncMode'] = params['async_mode']

        header_params = {}
        if 'accept_language' in params:
            header_params['Accept-Language'] = params['accept_language']

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json; charset=utf-8'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['basic']

        return self.api_client.call_api(resource_path, 'POST',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='ResultResponse',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))
