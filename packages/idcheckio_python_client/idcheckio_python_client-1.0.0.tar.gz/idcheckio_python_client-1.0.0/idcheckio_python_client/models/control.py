# coding: utf-8

"""
    IdCheck.IO API

    Check identity documents

    OpenAPI spec version: 0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from pprint import pformat
from six import iteritems
import re


class Control(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, identifier=None, title_msg=None, result_msg=None, result=None):
        """
        Control - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'identifier': 'str',
            'title_msg': 'str',
            'result_msg': 'str',
            'result': 'str'
        }

        self.attribute_map = {
            'identifier': 'identifier',
            'title_msg': 'titleMsg',
            'result_msg': 'resultMsg',
            'result': 'result'
        }

        self._identifier = identifier
        self._title_msg = title_msg
        self._result_msg = result_msg
        self._result = result

    @property
    def identifier(self):
        """
        Gets the identifier of this Control.
        control identifier

        :return: The identifier of this Control.
        :rtype: str
        """
        return self._identifier

    @identifier.setter
    def identifier(self, identifier):
        """
        Sets the identifier of this Control.
        control identifier

        :param identifier: The identifier of this Control.
        :type: str
        """

        self._identifier = identifier

    @property
    def title_msg(self):
        """
        Gets the title_msg of this Control.
        title message

        :return: The title_msg of this Control.
        :rtype: str
        """
        return self._title_msg

    @title_msg.setter
    def title_msg(self, title_msg):
        """
        Sets the title_msg of this Control.
        title message

        :param title_msg: The title_msg of this Control.
        :type: str
        """

        self._title_msg = title_msg

    @property
    def result_msg(self):
        """
        Gets the result_msg of this Control.
        result message

        :return: The result_msg of this Control.
        :rtype: str
        """
        return self._result_msg

    @result_msg.setter
    def result_msg(self, result_msg):
        """
        Sets the result_msg of this Control.
        result message

        :param result_msg: The result_msg of this Control.
        :type: str
        """

        self._result_msg = result_msg

    @property
    def result(self):
        """
        Gets the result of this Control.
        result

        :return: The result of this Control.
        :rtype: str
        """
        return self._result

    @result.setter
    def result(self, result):
        """
        Sets the result of this Control.
        result

        :param result: The result of this Control.
        :type: str
        """
        allowed_values = ["NONE", "OK", "WARNING", "ERROR"]
        if result not in allowed_values:
            raise ValueError(
                "Invalid value for `result` ({0}), must be one of {1}"
                .format(result, allowed_values)
            )

        self._result = result

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
