# coding: utf-8

"""
    IdCheck.IO API

    Check identity documents

    OpenAPI spec version: 0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from pprint import pformat
from six import iteritems
import re


class DetailedInformationOfTheHolderOfTheSubmittedDocument(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, last_name=None, first_name=None, usage_name=None, nationality=None, gender=None, address=None, birth_date=None, birth_place=None, birth_dpt=None, extra_infos=None):
        """
        DetailedInformationOfTheHolderOfTheSubmittedDocument - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'last_name': 'list[str]',
            'first_name': 'list[str]',
            'usage_name': 'str',
            'nationality': 'str',
            'gender': 'str',
            'address': 'str',
            'birth_date': 'EventDate',
            'birth_place': 'str',
            'birth_dpt': 'str',
            'extra_infos': 'list[GenericData]'
        }

        self.attribute_map = {
            'last_name': 'lastName',
            'first_name': 'firstName',
            'usage_name': 'usageName',
            'nationality': 'nationality',
            'gender': 'gender',
            'address': 'address',
            'birth_date': 'birthDate',
            'birth_place': 'birthPlace',
            'birth_dpt': 'birthDpt',
            'extra_infos': 'extraInfos'
        }

        self._last_name = last_name
        self._first_name = first_name
        self._usage_name = usage_name
        self._nationality = nationality
        self._gender = gender
        self._address = address
        self._birth_date = birth_date
        self._birth_place = birth_place
        self._birth_dpt = birth_dpt
        self._extra_infos = extra_infos

    @property
    def last_name(self):
        """
        Gets the last_name of this DetailedInformationOfTheHolderOfTheSubmittedDocument.
        list of lastnames

        :return: The last_name of this DetailedInformationOfTheHolderOfTheSubmittedDocument.
        :rtype: list[str]
        """
        return self._last_name

    @last_name.setter
    def last_name(self, last_name):
        """
        Sets the last_name of this DetailedInformationOfTheHolderOfTheSubmittedDocument.
        list of lastnames

        :param last_name: The last_name of this DetailedInformationOfTheHolderOfTheSubmittedDocument.
        :type: list[str]
        """

        self._last_name = last_name

    @property
    def first_name(self):
        """
        Gets the first_name of this DetailedInformationOfTheHolderOfTheSubmittedDocument.
        list of firstnames

        :return: The first_name of this DetailedInformationOfTheHolderOfTheSubmittedDocument.
        :rtype: list[str]
        """
        return self._first_name

    @first_name.setter
    def first_name(self, first_name):
        """
        Sets the first_name of this DetailedInformationOfTheHolderOfTheSubmittedDocument.
        list of firstnames

        :param first_name: The first_name of this DetailedInformationOfTheHolderOfTheSubmittedDocument.
        :type: list[str]
        """

        self._first_name = first_name

    @property
    def usage_name(self):
        """
        Gets the usage_name of this DetailedInformationOfTheHolderOfTheSubmittedDocument.
        usage name

        :return: The usage_name of this DetailedInformationOfTheHolderOfTheSubmittedDocument.
        :rtype: str
        """
        return self._usage_name

    @usage_name.setter
    def usage_name(self, usage_name):
        """
        Sets the usage_name of this DetailedInformationOfTheHolderOfTheSubmittedDocument.
        usage name

        :param usage_name: The usage_name of this DetailedInformationOfTheHolderOfTheSubmittedDocument.
        :type: str
        """

        self._usage_name = usage_name

    @property
    def nationality(self):
        """
        Gets the nationality of this DetailedInformationOfTheHolderOfTheSubmittedDocument.
        nationality

        :return: The nationality of this DetailedInformationOfTheHolderOfTheSubmittedDocument.
        :rtype: str
        """
        return self._nationality

    @nationality.setter
    def nationality(self, nationality):
        """
        Sets the nationality of this DetailedInformationOfTheHolderOfTheSubmittedDocument.
        nationality

        :param nationality: The nationality of this DetailedInformationOfTheHolderOfTheSubmittedDocument.
        :type: str
        """

        self._nationality = nationality

    @property
    def gender(self):
        """
        Gets the gender of this DetailedInformationOfTheHolderOfTheSubmittedDocument.
        gender

        :return: The gender of this DetailedInformationOfTheHolderOfTheSubmittedDocument.
        :rtype: str
        """
        return self._gender

    @gender.setter
    def gender(self, gender):
        """
        Sets the gender of this DetailedInformationOfTheHolderOfTheSubmittedDocument.
        gender

        :param gender: The gender of this DetailedInformationOfTheHolderOfTheSubmittedDocument.
        :type: str
        """

        self._gender = gender

    @property
    def address(self):
        """
        Gets the address of this DetailedInformationOfTheHolderOfTheSubmittedDocument.
        address

        :return: The address of this DetailedInformationOfTheHolderOfTheSubmittedDocument.
        :rtype: str
        """
        return self._address

    @address.setter
    def address(self, address):
        """
        Sets the address of this DetailedInformationOfTheHolderOfTheSubmittedDocument.
        address

        :param address: The address of this DetailedInformationOfTheHolderOfTheSubmittedDocument.
        :type: str
        """

        self._address = address

    @property
    def birth_date(self):
        """
        Gets the birth_date of this DetailedInformationOfTheHolderOfTheSubmittedDocument.


        :return: The birth_date of this DetailedInformationOfTheHolderOfTheSubmittedDocument.
        :rtype: EventDate
        """
        return self._birth_date

    @birth_date.setter
    def birth_date(self, birth_date):
        """
        Sets the birth_date of this DetailedInformationOfTheHolderOfTheSubmittedDocument.


        :param birth_date: The birth_date of this DetailedInformationOfTheHolderOfTheSubmittedDocument.
        :type: EventDate
        """

        self._birth_date = birth_date

    @property
    def birth_place(self):
        """
        Gets the birth_place of this DetailedInformationOfTheHolderOfTheSubmittedDocument.
        birth place

        :return: The birth_place of this DetailedInformationOfTheHolderOfTheSubmittedDocument.
        :rtype: str
        """
        return self._birth_place

    @birth_place.setter
    def birth_place(self, birth_place):
        """
        Sets the birth_place of this DetailedInformationOfTheHolderOfTheSubmittedDocument.
        birth place

        :param birth_place: The birth_place of this DetailedInformationOfTheHolderOfTheSubmittedDocument.
        :type: str
        """

        self._birth_place = birth_place

    @property
    def birth_dpt(self):
        """
        Gets the birth_dpt of this DetailedInformationOfTheHolderOfTheSubmittedDocument.
        birth department

        :return: The birth_dpt of this DetailedInformationOfTheHolderOfTheSubmittedDocument.
        :rtype: str
        """
        return self._birth_dpt

    @birth_dpt.setter
    def birth_dpt(self, birth_dpt):
        """
        Sets the birth_dpt of this DetailedInformationOfTheHolderOfTheSubmittedDocument.
        birth department

        :param birth_dpt: The birth_dpt of this DetailedInformationOfTheHolderOfTheSubmittedDocument.
        :type: str
        """

        self._birth_dpt = birth_dpt

    @property
    def extra_infos(self):
        """
        Gets the extra_infos of this DetailedInformationOfTheHolderOfTheSubmittedDocument.
        additional information

        :return: The extra_infos of this DetailedInformationOfTheHolderOfTheSubmittedDocument.
        :rtype: list[GenericData]
        """
        return self._extra_infos

    @extra_infos.setter
    def extra_infos(self, extra_infos):
        """
        Sets the extra_infos of this DetailedInformationOfTheHolderOfTheSubmittedDocument.
        additional information

        :param extra_infos: The extra_infos of this DetailedInformationOfTheHolderOfTheSubmittedDocument.
        :type: list[GenericData]
        """

        self._extra_infos = extra_infos

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
