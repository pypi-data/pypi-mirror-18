# coding: utf-8

"""
    IdCheck.IO API

    Check identity documents

    OpenAPI spec version: 0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from pprint import pformat
from six import iteritems
import re


class DetailedInformationOfTheSubmittedDocument(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, emit_country=None, emit_date=None, expiration_date=None, document_number=None, extra_infos=None):
        """
        DetailedInformationOfTheSubmittedDocument - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'emit_country': 'str',
            'emit_date': 'EventDate',
            'expiration_date': 'EventDate',
            'document_number': 'str',
            'extra_infos': 'list[GenericData]'
        }

        self.attribute_map = {
            'emit_country': 'emitCountry',
            'emit_date': 'emitDate',
            'expiration_date': 'expirationDate',
            'document_number': 'documentNumber',
            'extra_infos': 'extraInfos'
        }

        self._emit_country = emit_country
        self._emit_date = emit_date
        self._expiration_date = expiration_date
        self._document_number = document_number
        self._extra_infos = extra_infos

    @property
    def emit_country(self):
        """
        Gets the emit_country of this DetailedInformationOfTheSubmittedDocument.
        emit country

        :return: The emit_country of this DetailedInformationOfTheSubmittedDocument.
        :rtype: str
        """
        return self._emit_country

    @emit_country.setter
    def emit_country(self, emit_country):
        """
        Sets the emit_country of this DetailedInformationOfTheSubmittedDocument.
        emit country

        :param emit_country: The emit_country of this DetailedInformationOfTheSubmittedDocument.
        :type: str
        """

        self._emit_country = emit_country

    @property
    def emit_date(self):
        """
        Gets the emit_date of this DetailedInformationOfTheSubmittedDocument.


        :return: The emit_date of this DetailedInformationOfTheSubmittedDocument.
        :rtype: EventDate
        """
        return self._emit_date

    @emit_date.setter
    def emit_date(self, emit_date):
        """
        Sets the emit_date of this DetailedInformationOfTheSubmittedDocument.


        :param emit_date: The emit_date of this DetailedInformationOfTheSubmittedDocument.
        :type: EventDate
        """

        self._emit_date = emit_date

    @property
    def expiration_date(self):
        """
        Gets the expiration_date of this DetailedInformationOfTheSubmittedDocument.


        :return: The expiration_date of this DetailedInformationOfTheSubmittedDocument.
        :rtype: EventDate
        """
        return self._expiration_date

    @expiration_date.setter
    def expiration_date(self, expiration_date):
        """
        Sets the expiration_date of this DetailedInformationOfTheSubmittedDocument.


        :param expiration_date: The expiration_date of this DetailedInformationOfTheSubmittedDocument.
        :type: EventDate
        """

        self._expiration_date = expiration_date

    @property
    def document_number(self):
        """
        Gets the document_number of this DetailedInformationOfTheSubmittedDocument.
        document number

        :return: The document_number of this DetailedInformationOfTheSubmittedDocument.
        :rtype: str
        """
        return self._document_number

    @document_number.setter
    def document_number(self, document_number):
        """
        Sets the document_number of this DetailedInformationOfTheSubmittedDocument.
        document number

        :param document_number: The document_number of this DetailedInformationOfTheSubmittedDocument.
        :type: str
        """

        self._document_number = document_number

    @property
    def extra_infos(self):
        """
        Gets the extra_infos of this DetailedInformationOfTheSubmittedDocument.
        additional informations

        :return: The extra_infos of this DetailedInformationOfTheSubmittedDocument.
        :rtype: list[GenericData]
        """
        return self._extra_infos

    @extra_infos.setter
    def extra_infos(self, extra_infos):
        """
        Sets the extra_infos of this DetailedInformationOfTheSubmittedDocument.
        additional informations

        :param extra_infos: The extra_infos of this DetailedInformationOfTheSubmittedDocument.
        :type: list[GenericData]
        """

        self._extra_infos = extra_infos

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
