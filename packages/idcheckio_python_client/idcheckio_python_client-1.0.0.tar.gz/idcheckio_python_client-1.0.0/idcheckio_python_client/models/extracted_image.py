# coding: utf-8

"""
    IdCheck.IO API

    Check identity documents

    OpenAPI spec version: 0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from pprint import pformat
from six import iteritems
import re


class ExtractedImage(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, type=None, image_dl=None, image_ir=None, image_uv=None, page=None, indicators=None):
        """
        ExtractedImage - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'type': 'str',
            'image_dl': 'list[str]',
            'image_ir': 'list[str]',
            'image_uv': 'list[str]',
            'page': 'int',
            'indicators': 'list[ImageIndicator]'
        }

        self.attribute_map = {
            'type': 'type',
            'image_dl': 'imageDL',
            'image_ir': 'imageIR',
            'image_uv': 'imageUV',
            'page': 'page',
            'indicators': 'indicators'
        }

        self._type = type
        self._image_dl = image_dl
        self._image_ir = image_ir
        self._image_uv = image_uv
        self._page = page
        self._indicators = indicators

    @property
    def type(self):
        """
        Gets the type of this ExtractedImage.


        :return: The type of this ExtractedImage.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """
        Sets the type of this ExtractedImage.


        :param type: The type of this ExtractedImage.
        :type: str
        """
        allowed_values = ["CROPPED_RECTO", "CROPPED_VERSO", "CROPPED_FACE", "CROPPED_SIGNATURE", "CROPPED_EMITTER_SIGNATURE"]
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def image_dl(self):
        """
        Gets the image_dl of this ExtractedImage.


        :return: The image_dl of this ExtractedImage.
        :rtype: list[str]
        """
        return self._image_dl

    @image_dl.setter
    def image_dl(self, image_dl):
        """
        Sets the image_dl of this ExtractedImage.


        :param image_dl: The image_dl of this ExtractedImage.
        :type: list[str]
        """

        self._image_dl = image_dl

    @property
    def image_ir(self):
        """
        Gets the image_ir of this ExtractedImage.


        :return: The image_ir of this ExtractedImage.
        :rtype: list[str]
        """
        return self._image_ir

    @image_ir.setter
    def image_ir(self, image_ir):
        """
        Sets the image_ir of this ExtractedImage.


        :param image_ir: The image_ir of this ExtractedImage.
        :type: list[str]
        """

        self._image_ir = image_ir

    @property
    def image_uv(self):
        """
        Gets the image_uv of this ExtractedImage.


        :return: The image_uv of this ExtractedImage.
        :rtype: list[str]
        """
        return self._image_uv

    @image_uv.setter
    def image_uv(self, image_uv):
        """
        Sets the image_uv of this ExtractedImage.


        :param image_uv: The image_uv of this ExtractedImage.
        :type: list[str]
        """

        self._image_uv = image_uv

    @property
    def page(self):
        """
        Gets the page of this ExtractedImage.


        :return: The page of this ExtractedImage.
        :rtype: int
        """
        return self._page

    @page.setter
    def page(self, page):
        """
        Sets the page of this ExtractedImage.


        :param page: The page of this ExtractedImage.
        :type: int
        """

        self._page = page

    @property
    def indicators(self):
        """
        Gets the indicators of this ExtractedImage.


        :return: The indicators of this ExtractedImage.
        :rtype: list[ImageIndicator]
        """
        return self._indicators

    @indicators.setter
    def indicators(self, indicators):
        """
        Sets the indicators of this ExtractedImage.


        :param indicators: The indicators of this ExtractedImage.
        :type: list[ImageIndicator]
        """

        self._indicators = indicators

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
