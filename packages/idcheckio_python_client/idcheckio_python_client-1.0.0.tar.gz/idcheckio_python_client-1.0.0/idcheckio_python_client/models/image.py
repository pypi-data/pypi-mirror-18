# coding: utf-8

"""
    IdCheck.IO API

    Check identity documents

    OpenAPI spec version: 0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from pprint import pformat
from six import iteritems
import re


class Image(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, doc=None, face=None, raw_type=None, light=None):
        """
        Image - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'doc': 'str',
            'face': 'str',
            'raw_type': 'str',
            'light': 'str'
        }

        self.attribute_map = {
            'doc': 'doc',
            'face': 'face',
            'raw_type': 'rawType',
            'light': 'light'
        }

        self._doc = doc
        self._face = face
        self._raw_type = raw_type
        self._light = light

    @property
    def doc(self):
        """
        Gets the doc of this Image.


        :return: The doc of this Image.
        :rtype: str
        """
        return self._doc

    @doc.setter
    def doc(self, doc):
        """
        Sets the doc of this Image.


        :param doc: The doc of this Image.
        :type: str
        """
        allowed_values = ["CNI_BE_SPECIMEN", "CNI_BE_SPECIMEN_MRZ", "PASSEPORT_FR_SPECIMEN_NATACHA", "PASSEPORT_FR_SPECIMEN_NATACHA_MRZ", "CNI_FR_SPECIMEN_BERTHIER", "CNI_FR_SPECIMEN_BERTHIER_MRZ", "PASSEPORT_FR_SPECIMEN_GRAUX_MRZ", "PASSEPORT_FR_SPECIMEN_GRAUX", "CNI_BIH_SPECIMEN", "CNI_BIH_SPECIMEN_MRZ", "PASSEPORT_USA_FALSIFIE_TRAVELER", "PASSEPORT_USA_FALSIFIE_TRAVELER_MRZ", "RP_FR_SPECIMEN_MARTIN", "RP_FR_SPECIMEN_MARTIN_MRZ", "CNI_GBR_SPECIMEN_FREEMAN", "CNI_GBR_SPECIMEN_FREEMAN_MRZ", "PASSEPORT_CHN_SPECIMEN_ZHENGJIAN", "PASSEPORT_CHN_SPECIMEN_ZHENGJIAN_MRZ", "PASSEPORT_ITA_SPECIMEN_ROSSI", "PASSEPORT_ITA_SPECIMEN_ROSSI_MRZ", "RP_GBR_SPECIMEN_IVANOVA", "RP_GBR_SPECIMEN_IVANOVA_MRZ", "DL_FR_SPECIMEN_MARTIN", "DL_FR_SPECIMEN_MARTIN_MRZ", "ELECTRICITE_FR_BERTHIER", "IMPOSITION_FR_BERTHIER", "RIB_FR_BERTHIER", "TELEPHONE_2DDOC_BERTHIER", "CARTE_GRISE_DUPONT", "SALAIRE_FR_BERTHIER"]
        if doc not in allowed_values:
            raise ValueError(
                "Invalid value for `doc` ({0}), must be one of {1}"
                .format(doc, allowed_values)
            )

        self._doc = doc

    @property
    def face(self):
        """
        Gets the face of this Image.


        :return: The face of this Image.
        :rtype: str
        """
        return self._face

    @face.setter
    def face(self, face):
        """
        Sets the face of this Image.


        :param face: The face of this Image.
        :type: str
        """
        allowed_values = ["RECTO", "VERSO"]
        if face not in allowed_values:
            raise ValueError(
                "Invalid value for `face` ({0}), must be one of {1}"
                .format(face, allowed_values)
            )

        self._face = face

    @property
    def raw_type(self):
        """
        Gets the raw_type of this Image.


        :return: The raw_type of this Image.
        :rtype: str
        """
        return self._raw_type

    @raw_type.setter
    def raw_type(self, raw_type):
        """
        Sets the raw_type of this Image.


        :param raw_type: The raw_type of this Image.
        :type: str
        """
        allowed_values = ["BASE64", "JPG"]
        if raw_type not in allowed_values:
            raise ValueError(
                "Invalid value for `raw_type` ({0}), must be one of {1}"
                .format(raw_type, allowed_values)
            )

        self._raw_type = raw_type

    @property
    def light(self):
        """
        Gets the light of this Image.


        :return: The light of this Image.
        :rtype: str
        """
        return self._light

    @light.setter
    def light(self, light):
        """
        Sets the light of this Image.


        :param light: The light of this Image.
        :type: str
        """
        allowed_values = ["DL", "IR", "UV"]
        if light not in allowed_values:
            raise ValueError(
                "Invalid value for `light` ({0}), must be one of {1}"
                .format(light, allowed_values)
            )

        self._light = light

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
