# coding: utf-8

"""
    IdCheck.IO API

    Check identity documents

    OpenAPI spec version: 0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from pprint import pformat
from six import iteritems
import re


class ImageRequest(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, api_version=None, front_image=None, front_image_ir=None, front_image_uv=None, back_image=None, back_image_ir=None, back_image_uv=None, recto_image_cropped=False, face_image_cropped=False, signature_image_cropped=False):
        """
        ImageRequest - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'api_version': 'str',
            'front_image': 'str',
            'front_image_ir': 'str',
            'front_image_uv': 'str',
            'back_image': 'str',
            'back_image_ir': 'str',
            'back_image_uv': 'str',
            'recto_image_cropped': 'bool',
            'face_image_cropped': 'bool',
            'signature_image_cropped': 'bool'
        }

        self.attribute_map = {
            'api_version': 'apiVersion',
            'front_image': 'frontImage',
            'front_image_ir': 'frontImageIr',
            'front_image_uv': 'frontImageUv',
            'back_image': 'backImage',
            'back_image_ir': 'backImageIr',
            'back_image_uv': 'backImageUv',
            'recto_image_cropped': 'rectoImageCropped',
            'face_image_cropped': 'faceImageCropped',
            'signature_image_cropped': 'signatureImageCropped'
        }

        self._api_version = api_version
        self._front_image = front_image
        self._front_image_ir = front_image_ir
        self._front_image_uv = front_image_uv
        self._back_image = back_image
        self._back_image_ir = back_image_ir
        self._back_image_uv = back_image_uv
        self._recto_image_cropped = recto_image_cropped
        self._face_image_cropped = face_image_cropped
        self._signature_image_cropped = signature_image_cropped

    @property
    def api_version(self):
        """
        Gets the api_version of this ImageRequest.
        API version (for backward compatibility purpose)

        :return: The api_version of this ImageRequest.
        :rtype: str
        """
        return self._api_version

    @api_version.setter
    def api_version(self, api_version):
        """
        Sets the api_version of this ImageRequest.
        API version (for backward compatibility purpose)

        :param api_version: The api_version of this ImageRequest.
        :type: str
        """

        self._api_version = api_version

    @property
    def front_image(self):
        """
        Gets the front_image of this ImageRequest.
        frontImage containing front daylight image of the identity document (base64 encoded, no wrap, jpg/png/tiff/pdf format)

        :return: The front_image of this ImageRequest.
        :rtype: str
        """
        return self._front_image

    @front_image.setter
    def front_image(self, front_image):
        """
        Sets the front_image of this ImageRequest.
        frontImage containing front daylight image of the identity document (base64 encoded, no wrap, jpg/png/tiff/pdf format)

        :param front_image: The front_image of this ImageRequest.
        :type: str
        """

        self._front_image = front_image

    @property
    def front_image_ir(self):
        """
        Gets the front_image_ir of this ImageRequest.
        frontImage containing front infrared image of the identity document (base64 encoded, no wrap, jpg/png/tiff/pdf format)

        :return: The front_image_ir of this ImageRequest.
        :rtype: str
        """
        return self._front_image_ir

    @front_image_ir.setter
    def front_image_ir(self, front_image_ir):
        """
        Sets the front_image_ir of this ImageRequest.
        frontImage containing front infrared image of the identity document (base64 encoded, no wrap, jpg/png/tiff/pdf format)

        :param front_image_ir: The front_image_ir of this ImageRequest.
        :type: str
        """

        self._front_image_ir = front_image_ir

    @property
    def front_image_uv(self):
        """
        Gets the front_image_uv of this ImageRequest.
        frontImage containing front ultraviolet image of the identity document (base64 encoded, no wrap, jpg/png/tiff/pdf format)

        :return: The front_image_uv of this ImageRequest.
        :rtype: str
        """
        return self._front_image_uv

    @front_image_uv.setter
    def front_image_uv(self, front_image_uv):
        """
        Sets the front_image_uv of this ImageRequest.
        frontImage containing front ultraviolet image of the identity document (base64 encoded, no wrap, jpg/png/tiff/pdf format)

        :param front_image_uv: The front_image_uv of this ImageRequest.
        :type: str
        """

        self._front_image_uv = front_image_uv

    @property
    def back_image(self):
        """
        Gets the back_image of this ImageRequest.
        backImage containing daylight back image of the identity document (base64 encoded, no wrap, jpg/png/tiff/pdf format)

        :return: The back_image of this ImageRequest.
        :rtype: str
        """
        return self._back_image

    @back_image.setter
    def back_image(self, back_image):
        """
        Sets the back_image of this ImageRequest.
        backImage containing daylight back image of the identity document (base64 encoded, no wrap, jpg/png/tiff/pdf format)

        :param back_image: The back_image of this ImageRequest.
        :type: str
        """

        self._back_image = back_image

    @property
    def back_image_ir(self):
        """
        Gets the back_image_ir of this ImageRequest.
        backImage containing infrared back image of the identity document (base64 encoded, no wrap, jpg/png/tiff/pdf format)

        :return: The back_image_ir of this ImageRequest.
        :rtype: str
        """
        return self._back_image_ir

    @back_image_ir.setter
    def back_image_ir(self, back_image_ir):
        """
        Sets the back_image_ir of this ImageRequest.
        backImage containing infrared back image of the identity document (base64 encoded, no wrap, jpg/png/tiff/pdf format)

        :param back_image_ir: The back_image_ir of this ImageRequest.
        :type: str
        """

        self._back_image_ir = back_image_ir

    @property
    def back_image_uv(self):
        """
        Gets the back_image_uv of this ImageRequest.
        backImage containing ultraviolet back image of the identity document (base64 encoded, no wrap, jpg/png/tiff/pdf format)

        :return: The back_image_uv of this ImageRequest.
        :rtype: str
        """
        return self._back_image_uv

    @back_image_uv.setter
    def back_image_uv(self, back_image_uv):
        """
        Sets the back_image_uv of this ImageRequest.
        backImage containing ultraviolet back image of the identity document (base64 encoded, no wrap, jpg/png/tiff/pdf format)

        :param back_image_uv: The back_image_uv of this ImageRequest.
        :type: str
        """

        self._back_image_uv = back_image_uv

    @property
    def recto_image_cropped(self):
        """
        Gets the recto_image_cropped of this ImageRequest.
        rectoImageCropped true to obtain recto image cropped if applicable

        :return: The recto_image_cropped of this ImageRequest.
        :rtype: bool
        """
        return self._recto_image_cropped

    @recto_image_cropped.setter
    def recto_image_cropped(self, recto_image_cropped):
        """
        Sets the recto_image_cropped of this ImageRequest.
        rectoImageCropped true to obtain recto image cropped if applicable

        :param recto_image_cropped: The recto_image_cropped of this ImageRequest.
        :type: bool
        """

        self._recto_image_cropped = recto_image_cropped

    @property
    def face_image_cropped(self):
        """
        Gets the face_image_cropped of this ImageRequest.
        faceImageCropped true to obtain recto image cropped if applicable

        :return: The face_image_cropped of this ImageRequest.
        :rtype: bool
        """
        return self._face_image_cropped

    @face_image_cropped.setter
    def face_image_cropped(self, face_image_cropped):
        """
        Sets the face_image_cropped of this ImageRequest.
        faceImageCropped true to obtain recto image cropped if applicable

        :param face_image_cropped: The face_image_cropped of this ImageRequest.
        :type: bool
        """

        self._face_image_cropped = face_image_cropped

    @property
    def signature_image_cropped(self):
        """
        Gets the signature_image_cropped of this ImageRequest.
        signatureImageCropped true to obtain recto image cropped if applicable

        :return: The signature_image_cropped of this ImageRequest.
        :rtype: bool
        """
        return self._signature_image_cropped

    @signature_image_cropped.setter
    def signature_image_cropped(self, signature_image_cropped):
        """
        Sets the signature_image_cropped of this ImageRequest.
        signatureImageCropped true to obtain recto image cropped if applicable

        :param signature_image_cropped: The signature_image_cropped of this ImageRequest.
        :type: bool
        """

        self._signature_image_cropped = signature_image_cropped

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
