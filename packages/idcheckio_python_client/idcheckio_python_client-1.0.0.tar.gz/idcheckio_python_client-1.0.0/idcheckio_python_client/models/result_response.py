# coding: utf-8

"""
    IdCheck.IO API

    Check identity documents

    OpenAPI spec version: 0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from pprint import pformat
from six import iteritems
import re


class ResultResponse(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, uid=None, analysis_ref_uid=None, check_report_summary=None, document_classification=None, document_detail=None, holder_detail=None, mrz=None, controls=None, image=None):
        """
        ResultResponse - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'uid': 'str',
            'analysis_ref_uid': 'str',
            'check_report_summary': 'CheckSummaryOfTheSubmittedDocument',
            'document_classification': 'ClassificationOfTheSubmittedDocument',
            'document_detail': 'DetailedInformationOfTheSubmittedDocument',
            'holder_detail': 'DetailedInformationOfTheHolderOfTheSubmittedDocument',
            'mrz': 'Mrz',
            'controls': 'list[ControlGroup]',
            'image': 'list[ExtractedImage]'
        }

        self.attribute_map = {
            'uid': 'uid',
            'analysis_ref_uid': 'analysisRefUid',
            'check_report_summary': 'checkReportSummary',
            'document_classification': 'documentClassification',
            'document_detail': 'documentDetail',
            'holder_detail': 'holderDetail',
            'mrz': 'mrz',
            'controls': 'controls',
            'image': 'image'
        }

        self._uid = uid
        self._analysis_ref_uid = analysis_ref_uid
        self._check_report_summary = check_report_summary
        self._document_classification = document_classification
        self._document_detail = document_detail
        self._holder_detail = holder_detail
        self._mrz = mrz
        self._controls = controls
        self._image = image

    @property
    def uid(self):
        """
        Gets the uid of this ResultResponse.
        uid

        :return: The uid of this ResultResponse.
        :rtype: str
        """
        return self._uid

    @uid.setter
    def uid(self, uid):
        """
        Sets the uid of this ResultResponse.
        uid

        :param uid: The uid of this ResultResponse.
        :type: str
        """

        self._uid = uid

    @property
    def analysis_ref_uid(self):
        """
        Gets the analysis_ref_uid of this ResultResponse.
        analysisRefUid

        :return: The analysis_ref_uid of this ResultResponse.
        :rtype: str
        """
        return self._analysis_ref_uid

    @analysis_ref_uid.setter
    def analysis_ref_uid(self, analysis_ref_uid):
        """
        Sets the analysis_ref_uid of this ResultResponse.
        analysisRefUid

        :param analysis_ref_uid: The analysis_ref_uid of this ResultResponse.
        :type: str
        """

        self._analysis_ref_uid = analysis_ref_uid

    @property
    def check_report_summary(self):
        """
        Gets the check_report_summary of this ResultResponse.


        :return: The check_report_summary of this ResultResponse.
        :rtype: CheckSummaryOfTheSubmittedDocument
        """
        return self._check_report_summary

    @check_report_summary.setter
    def check_report_summary(self, check_report_summary):
        """
        Sets the check_report_summary of this ResultResponse.


        :param check_report_summary: The check_report_summary of this ResultResponse.
        :type: CheckSummaryOfTheSubmittedDocument
        """

        self._check_report_summary = check_report_summary

    @property
    def document_classification(self):
        """
        Gets the document_classification of this ResultResponse.


        :return: The document_classification of this ResultResponse.
        :rtype: ClassificationOfTheSubmittedDocument
        """
        return self._document_classification

    @document_classification.setter
    def document_classification(self, document_classification):
        """
        Sets the document_classification of this ResultResponse.


        :param document_classification: The document_classification of this ResultResponse.
        :type: ClassificationOfTheSubmittedDocument
        """

        self._document_classification = document_classification

    @property
    def document_detail(self):
        """
        Gets the document_detail of this ResultResponse.


        :return: The document_detail of this ResultResponse.
        :rtype: DetailedInformationOfTheSubmittedDocument
        """
        return self._document_detail

    @document_detail.setter
    def document_detail(self, document_detail):
        """
        Sets the document_detail of this ResultResponse.


        :param document_detail: The document_detail of this ResultResponse.
        :type: DetailedInformationOfTheSubmittedDocument
        """

        self._document_detail = document_detail

    @property
    def holder_detail(self):
        """
        Gets the holder_detail of this ResultResponse.


        :return: The holder_detail of this ResultResponse.
        :rtype: DetailedInformationOfTheHolderOfTheSubmittedDocument
        """
        return self._holder_detail

    @holder_detail.setter
    def holder_detail(self, holder_detail):
        """
        Sets the holder_detail of this ResultResponse.


        :param holder_detail: The holder_detail of this ResultResponse.
        :type: DetailedInformationOfTheHolderOfTheSubmittedDocument
        """

        self._holder_detail = holder_detail

    @property
    def mrz(self):
        """
        Gets the mrz of this ResultResponse.


        :return: The mrz of this ResultResponse.
        :rtype: Mrz
        """
        return self._mrz

    @mrz.setter
    def mrz(self, mrz):
        """
        Sets the mrz of this ResultResponse.


        :param mrz: The mrz of this ResultResponse.
        :type: Mrz
        """

        self._mrz = mrz

    @property
    def controls(self):
        """
        Gets the controls of this ResultResponse.
        Performed controls on the submitted document

        :return: The controls of this ResultResponse.
        :rtype: list[ControlGroup]
        """
        return self._controls

    @controls.setter
    def controls(self, controls):
        """
        Sets the controls of this ResultResponse.
        Performed controls on the submitted document

        :param controls: The controls of this ResultResponse.
        :type: list[ControlGroup]
        """

        self._controls = controls

    @property
    def image(self):
        """
        Gets the image of this ResultResponse.
        Cropped image of the submitted document according request

        :return: The image of this ResultResponse.
        :rtype: list[ExtractedImage]
        """
        return self._image

    @image.setter
    def image(self, image):
        """
        Sets the image of this ResultResponse.
        Cropped image of the submitted document according request

        :param image: The image of this ResultResponse.
        :type: list[ExtractedImage]
        """

        self._image = image

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
