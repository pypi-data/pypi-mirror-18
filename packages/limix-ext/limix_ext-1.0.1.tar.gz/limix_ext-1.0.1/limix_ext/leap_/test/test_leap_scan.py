# import numpy as np
# import unittest
# from limix_ext.leap_.scan import scan
#
# class TestScan(unittest.TestCase):
#     def setUp(self):
#         pass
#
#     def test_bernoulli(self):
#         random = np.random.RandomState(981)
#         n = 500
#         p = n+4
#
#         M = np.ones((n, 1)) * 0.4
#         Ginit = random.randint(3, size=(n, p))
#         G = np.asarray(Ginit, dtype=float)
#         G -= G.mean(axis=0)
#         G /= G.std(axis=0)
#         G /= np.sqrt(p)
#         K_nsnps = G.shape[1]
#
#         K = np.dot(G, G.T)
#         Kg = K / K.diagonal().mean()
#         K = 0.5*Kg + 0.5*np.eye(n)
#         K = K / K.diagonal().mean()
#
#         z = random.multivariate_normal(M.ravel(), K)
#         y = np.zeros_like(z)
#         y[z>0] = 1.
#         prevalence = 0.5
#
#         X = Ginit[:,:int(Ginit.shape[1]/2)]
#
#         (stats, pvals) = scan(y, M, X, Kg, K_nsnps, prevalence)
#         opvals = [ 0.451066, 0.426365, 0.408062, 0.915992, 0.732097, 0.053328,
#                    0.361699, 0.283354, 0.620856, 0.746104, 0.824283, 0.865038,
#                    0.251931, 0.412815, 0.759132, 0.91902 , 0.529719, 0.582175,
#                    0.13717 , 0.432958,
#                    0.024859, 0.348404, 0.135129, 0.449024, 0.96527 , 0.065091,
#                    0.092659, 0.786387, 0.20151 , 0.918779, 0.519554, 0.051409,
#                    0.986684, 0.439856, 0.27194 , 0.003699, 0.295417, 0.519103,
#                    0.081095, 0.987504,
#                    0.559851, 0.56421 , 0.181054, 0.01976 , 0.522527, 0.057947,
#                    0.703954, 0.001132, 0.520976, 0.469681, 0.065736, 0.105049,
#                    0.362642, 0.780904, 0.0362 , 0.413423, 0.051046, 0.822452,
#                    0.808392, 0.602132,
#                    0.127838, 0.987533, 0.520586, 0.39769 , 0.002088, 0.082427,
#                    0.010595, 0.742645, 0.139445, 0.423165, 0.06181 , 0.146563,
#                    0.290718, 0.550126, 0.744267, 0.284129, 0.79134 , 0.040408,
#                    0.597223, 0.174248,
#                    0.122726, 0.432185, 0.407043, 0.011816, 0.056927, 0.860611,
#                    0.38214 , 0.244009, 0.492259, 0.086012, 0.346062, 0.009195,
#                    0.717563, 0.094156, 0.60219 , 0.229791, 0.452202, 0.18579,
#                    0.247643, 0.902433,
#                    0.916718, 0.045813, 0.113554, 0.985813, 0.018212, 0.176724,
#                    0.099103, 0.871925, 0.241738, 0.823715, 0.793428, 0.324555,
#                    0.036419, 0.24477 , 0.429684, 0.601304, 0.654114, 0.439737,
#                    0.87345 , 0.238059,
#                    0.293778, 0.19481 , 0.213248, 0.829866, 0.572048, 0.39293 ,
#                    0.00286 , 0.663423, 0.272353, 0.569412, 0.200926, 0.154111,
#                    0.09556 , 0.551526, 0.25896 , 0.125639, 0.273004, 0.132058,
#                    0.004891, 0.102727,
#                    0.979739, 0.082014, 0.826513, 0.009208, 0.390218, 0.949988,
#                    0.370368, 0.177832, 0.014939, 0.455807, 0.80956 , 0.074755,
#                    0.294575, 0.742148, 0.116037, 0.187777, 0.778857, 0.113589,
#                    0.351909, 0.913201,
#                    0.414831, 0.194959, 0.46705 , 0.229973, 0.313439, 0.012992,
#                    0.096436, 0.59417 , 0.486265, 0.036215, 0.838166, 0.043521,
#                    0.039845, 0.668794, 0.317005, 0.61061 , 0.678129, 0.968508,
#                    0.264058, 0.246585,
#                    0.61056 , 0.125189, 0.715906, 0.01204 , 0.051124, 0.433782,
#                    0.441752, 0.512519, 0.823347, 0.267909, 0.81468 , 0.201341,
#                    0.913478, 0.04813 , 0.993823, 0.676416, 0.09348 , 0.940632,
#                    0.113994, 0.14391,
#                    0.673232, 0.619691, 0.62394 , 0.044812, 0.171817 , 0.975574,
#                    0.479698, 0.684604, 0.648877, 0.312592, 0.51833 , 0.352962,
#                    0.944479, 0.633947, 0.079162, 0.126892, 0.47466 , 0.767452,
#                    0.176639, 0.765625,
#                    0.284279, 0.785255, 0.744209, 0.073209, 0.388628, 0.511304,
#                    0.527392, 0.189527, 0.909223, 0.514971, 0.229281, 0.239354,
#                    0.050845, 0.602148, 0.182099, 0.179005, 0.770827, 0.025944,
#                    0.540482, 0.344604,
#                    0.249849, 0.434274, 0.353141, 0.234715, 0.113302, 0.021249,
#                    0.260164, 0.404599, 0.944436, 0.48917 , 0.758555, 0.882622]
#
#         opvals = np.asarray(opvals, float)
#         np.testing.assert_almost_equal(pvals, opvals, decimal=4)
#
# if __name__ == '__main__':
#     import logging
#     logging.basicConfig(level=logging.DEBUG)
#     unittest.main()
