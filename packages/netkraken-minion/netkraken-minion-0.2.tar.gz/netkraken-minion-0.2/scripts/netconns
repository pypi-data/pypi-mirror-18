#!/usr/bin/env python
from __future__ import print_function

import logging
import logging.handlers
import sys
import time

from netkraken.db import fetch
from countdb.aggregators import TimeAggregator

measurements_per_minute = 3

# logging setup blatantly copied from
# http://blog.scphillips.com/posts/2013/07/getting-a-python-script-to-run-in-the-background-as-a-service-on-boot/

LOG_FILENAME = "/tmp/netconns.log"
LOG_LEVEL = logging.INFO

logger = logging.getLogger(__name__)
logger.setLevel(LOG_LEVEL)
handler = logging.handlers.TimedRotatingFileHandler(LOG_FILENAME, when="midnight", backupCount=3)
formatter = logging.Formatter('%(asctime)s %(levelname)-8s %(message)s')
handler.setFormatter(formatter)
logger.addHandler(handler)

class MyLogger(object):
    def __init__(self, logger, level):
        self.logger = logger
        self.level = level

    def write(self, message):
        if message.rstrip() != "":
            self.logger.log(self.level, message.rstrip())

sys.stdout = MyLogger(logger, logging.INFO)
sys.stderr = MyLogger(logger, logging.ERROR)


intervall_seconds = 60 / measurements_per_minute

print("starting to record connections")
print("measurements per minute: %i" % measurements_per_minute)

aggregator = TimeAggregator()

while True:
    to_sleep = intervall_seconds - (time.time() % intervall_seconds)
    time.sleep(to_sleep)

    print("fetching net connections")
    with aggregator.create_counter_now() as db:
        fetch(db)

    aggregator.aggregate()
