#!/usr/bin/env python
#
# Copyright (c) 2016, Nimbix, Inc.
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#
# 1. Redistributions of source code must retain the above copyright notice,
#    this list of conditions and the following disclaimer.
# 2. Redistributions in binary form must reproduce the above copyright notice,
#    this list of conditions and the following disclaimer in the documentation
#    and/or other materials provided with the distribution.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
# ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
# LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
# CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
# SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
# INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
# CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
# ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
# POSSIBILITY OF SUCH DAMAGE.
#
# The views and conclusions contained in the software and documentation are
# those of the authors and should not be interpreted as representing official
# policies, either expressed or implied, of Nimbix, Inc.
#
import sys
from argparse import ArgumentParser
from nimbixappdef.AppDef import AppDef

if __name__ == '__main__':
    parser = ArgumentParser(usage='%(prog)s -n <NAME> -d <DESCRIPTION>' +
                            ' -a <AUTHOR> [options] <TEMPLATE-FILE>',
                            description='Generate AppDef from template',
                            add_help=True)
    parser.add_argument('-n', '--name', dest='name', required=True,
                        help='application short name')
    parser.add_argument('-d', '--desc', dest='desc', required=True,
                        help='application description')
    parser.add_argument('-a', '--author', dest='author', required=True,
                        help='application author/vendor')
    parser.add_argument('-i', '--image', dest='imagefile', required=False,
                        help='image file name (.png or .jpg)', default=None)
    parser.add_argument('-m', '--machines', dest='machines', required=False,
                        help='comma separated list of machines/wildcards' +
                        ' (default: *)', default='*')
    parser.add_argument('-c', '--classifications', dest='classifications',
                        required=False,
                        help='comma separated list of classifications' +
                        ' (default: Uncategorized)', default='Uncategorized')
    parser.add_argument('-l', '--license-required', dest='notlicensed',
                        action='store_true', required=False,
                        help='application requires license' +
                        ' (default: includes license)')
    parser.add_argument('templatefile', nargs=1, metavar='TEMPLATE-FILE',
                        help='Template file containing valid AppDef JSON')
    options = parser.parse_args()

    appdef = AppDef()
    appdef.new(name=options.name, desc=options.desc, author=options.author,
               licensed=(not options.notlicensed),
               machines=options.machines.split(','),
               classifications=options.classifications.split(','),
               image=options.imagefile,
               templatefile=options.templatefile[0])
    appdef.dump(sys.stdout)
    sys.exit(0)
