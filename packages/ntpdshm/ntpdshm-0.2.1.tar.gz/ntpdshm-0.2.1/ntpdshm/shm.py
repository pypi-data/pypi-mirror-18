# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.8
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_shm', [dirname(__file__)])
        except ImportError:
            import _shm
            return _shm
        if fp is not None:
            try:
                _mod = imp.load_module('_shm', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _shm = swig_import_helper()
    del swig_import_helper
else:
    import _shm
del version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.


def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr_nondynamic(self, class_type, name, static=1):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    if (not static):
        return object.__getattr__(self, name)
    else:
        raise AttributeError(name)

def _swig_getattr(self, class_type, name):
    return _swig_getattr_nondynamic(self, class_type, name, 0)


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object:
        pass
    _newclass = 0



def shm_get(unit):
    return _shm.shm_get(unit)
shm_get = _shm.shm_get

def get_mode(shm_time):
    return _shm.get_mode(shm_time)
get_mode = _shm.get_mode

def set_mode(shm_time, mode):
    return _shm.set_mode(shm_time, mode)
set_mode = _shm.set_mode

def get_count(shm_time):
    return _shm.get_count(shm_time)
get_count = _shm.get_count

def set_count(shm_time, count):
    return _shm.set_count(shm_time, count)
set_count = _shm.set_count

def get_clockTimeStampSec(shm_time):
    return _shm.get_clockTimeStampSec(shm_time)
get_clockTimeStampSec = _shm.get_clockTimeStampSec

def set_clockTimeStampSec(shm_time, clockTimeStampSec):
    return _shm.set_clockTimeStampSec(shm_time, clockTimeStampSec)
set_clockTimeStampSec = _shm.set_clockTimeStampSec

def get_clockTimeStampUSec(shm_time):
    return _shm.get_clockTimeStampUSec(shm_time)
get_clockTimeStampUSec = _shm.get_clockTimeStampUSec

def set_clockTimeStampUSec(shm_time, clockTimeStampUSec):
    return _shm.set_clockTimeStampUSec(shm_time, clockTimeStampUSec)
set_clockTimeStampUSec = _shm.set_clockTimeStampUSec

def get_clockTimeStampNSec(shm_time):
    return _shm.get_clockTimeStampNSec(shm_time)
get_clockTimeStampNSec = _shm.get_clockTimeStampNSec

def set_clockTimeStampNSec(shm_time, clockTimeStampNSec):
    return _shm.set_clockTimeStampNSec(shm_time, clockTimeStampNSec)
set_clockTimeStampNSec = _shm.set_clockTimeStampNSec

def get_receiveTimeStampSec(shm_time):
    return _shm.get_receiveTimeStampSec(shm_time)
get_receiveTimeStampSec = _shm.get_receiveTimeStampSec

def set_receiveTimeStampSec(shm_time, receiveTimeStampSec):
    return _shm.set_receiveTimeStampSec(shm_time, receiveTimeStampSec)
set_receiveTimeStampSec = _shm.set_receiveTimeStampSec

def get_receiveTimeStampUSec(shm_time):
    return _shm.get_receiveTimeStampUSec(shm_time)
get_receiveTimeStampUSec = _shm.get_receiveTimeStampUSec

def set_receiveTimeStampUSec(shm_time, receiveTimeStampUSec):
    return _shm.set_receiveTimeStampUSec(shm_time, receiveTimeStampUSec)
set_receiveTimeStampUSec = _shm.set_receiveTimeStampUSec

def get_receiveTimeStampNSec(shm_time):
    return _shm.get_receiveTimeStampNSec(shm_time)
get_receiveTimeStampNSec = _shm.get_receiveTimeStampNSec

def set_receiveTimeStampNSec(shm_time, receiveTimeStampNSec):
    return _shm.set_receiveTimeStampNSec(shm_time, receiveTimeStampNSec)
set_receiveTimeStampNSec = _shm.set_receiveTimeStampNSec

def get_leap(shm_time):
    return _shm.get_leap(shm_time)
get_leap = _shm.get_leap

def set_leap(shm_time, leap):
    return _shm.set_leap(shm_time, leap)
set_leap = _shm.set_leap

def get_precision(shm_time):
    return _shm.get_precision(shm_time)
get_precision = _shm.get_precision

def set_precision(shm_time, precision):
    return _shm.set_precision(shm_time, precision)
set_precision = _shm.set_precision

def get_nsamples(shm_time):
    return _shm.get_nsamples(shm_time)
get_nsamples = _shm.get_nsamples

def set_nsamples(shm_time, nsamples):
    return _shm.set_nsamples(shm_time, nsamples)
set_nsamples = _shm.set_nsamples

def get_valid(shm_time):
    return _shm.get_valid(shm_time)
get_valid = _shm.get_valid

def set_valid(shm_time, valid):
    return _shm.set_valid(shm_time, valid)
set_valid = _shm.set_valid
# This file is compatible with both classic and new-style classes.


