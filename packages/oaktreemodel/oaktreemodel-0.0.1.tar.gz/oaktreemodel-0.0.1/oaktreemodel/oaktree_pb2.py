# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: oaktree.proto

import sys
_b=sys.version_info[0]<3 and (lambda x:x) or (lambda x:x.encode('latin1'))
from google.protobuf import descriptor as _descriptor
from google.protobuf import message as _message
from google.protobuf import reflection as _reflection
from google.protobuf import symbol_database as _symbol_database
from google.protobuf import descriptor_pb2
# @@protoc_insertion_point(imports)

_sym_db = _symbol_database.Default()


import common_pb2 as common__pb2
import flavor_pb2 as flavor__pb2
import image_pb2 as image__pb2
import security_group_pb2 as security__group__pb2


DESCRIPTOR = _descriptor.FileDescriptor(
  name='oaktree.proto',
  package='oaktree',
  syntax='proto3',
  serialized_pb=_b('\n\roaktree.proto\x12\x07oaktree\x1a\x0c\x63ommon.proto\x1a\x0c\x66lavor.proto\x1a\x0bimage.proto\x1a\x14security_group.proto2\xf5\x03\n\x07Oaktree\x12/\n\tGetFlavor\x12\x0f.oaktree.Filter\x1a\x0f.oaktree.Flavor\"\x00\x12\x37\n\rSearchFlavors\x12\x0f.oaktree.Filter\x1a\x13.oaktree.FlavorList\"\x00\x12-\n\x08GetImage\x12\x0f.oaktree.Filter\x1a\x0e.oaktree.Image\"\x00\x12\x35\n\x0cSearchImages\x12\x0f.oaktree.Filter\x1a\x12.oaktree.ImageList\"\x00\x12=\n\x10GetSecurityGroup\x12\x0f.oaktree.Filter\x1a\x16.oaktree.SecurityGroup\"\x00\x12\x45\n\x14SearchSecurityGroups\x12\x0f.oaktree.Filter\x1a\x1a.oaktree.SecurityGroupList\"\x00\x12\x45\n\x14GetSecurityGroupRule\x12\x0f.oaktree.Filter\x1a\x1a.oaktree.SecurityGroupRule\"\x00\x12M\n\x18SearchSecurityGroupRules\x12\x0f.oaktree.Filter\x1a\x1e.oaktree.SecurityGroupRuleList\"\x00\x42\x33\n\x1borg.openstack.infra.oaktreeB\x0cOaktreeProtoP\x01\xa2\x02\x03OAKb\x06proto3')
  ,
  dependencies=[common__pb2.DESCRIPTOR,flavor__pb2.DESCRIPTOR,image__pb2.DESCRIPTOR,security__group__pb2.DESCRIPTOR,])
_sym_db.RegisterFileDescriptor(DESCRIPTOR)





DESCRIPTOR.has_options = True
DESCRIPTOR._options = _descriptor._ParseOptions(descriptor_pb2.FileOptions(), _b('\n\033org.openstack.infra.oaktreeB\014OaktreeProtoP\001\242\002\003OAK'))
import grpc
from grpc.beta import implementations as beta_implementations
from grpc.beta import interfaces as beta_interfaces
from grpc.framework.common import cardinality
from grpc.framework.interfaces.face import utilities as face_utilities


class OaktreeStub(object):

  def __init__(self, channel):
    """Constructor.

    Args:
      channel: A grpc.Channel.
    """
    self.GetFlavor = channel.unary_unary(
        '/oaktree.Oaktree/GetFlavor',
        request_serializer=common__pb2.Filter.SerializeToString,
        response_deserializer=flavor__pb2.Flavor.FromString,
        )
    self.SearchFlavors = channel.unary_unary(
        '/oaktree.Oaktree/SearchFlavors',
        request_serializer=common__pb2.Filter.SerializeToString,
        response_deserializer=flavor__pb2.FlavorList.FromString,
        )
    self.GetImage = channel.unary_unary(
        '/oaktree.Oaktree/GetImage',
        request_serializer=common__pb2.Filter.SerializeToString,
        response_deserializer=image__pb2.Image.FromString,
        )
    self.SearchImages = channel.unary_unary(
        '/oaktree.Oaktree/SearchImages',
        request_serializer=common__pb2.Filter.SerializeToString,
        response_deserializer=image__pb2.ImageList.FromString,
        )
    self.GetSecurityGroup = channel.unary_unary(
        '/oaktree.Oaktree/GetSecurityGroup',
        request_serializer=common__pb2.Filter.SerializeToString,
        response_deserializer=security__group__pb2.SecurityGroup.FromString,
        )
    self.SearchSecurityGroups = channel.unary_unary(
        '/oaktree.Oaktree/SearchSecurityGroups',
        request_serializer=common__pb2.Filter.SerializeToString,
        response_deserializer=security__group__pb2.SecurityGroupList.FromString,
        )
    self.GetSecurityGroupRule = channel.unary_unary(
        '/oaktree.Oaktree/GetSecurityGroupRule',
        request_serializer=common__pb2.Filter.SerializeToString,
        response_deserializer=security__group__pb2.SecurityGroupRule.FromString,
        )
    self.SearchSecurityGroupRules = channel.unary_unary(
        '/oaktree.Oaktree/SearchSecurityGroupRules',
        request_serializer=common__pb2.Filter.SerializeToString,
        response_deserializer=security__group__pb2.SecurityGroupRuleList.FromString,
        )


class OaktreeServicer(object):

  def GetFlavor(self, request, context):
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def SearchFlavors(self, request, context):
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def GetImage(self, request, context):
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def SearchImages(self, request, context):
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def GetSecurityGroup(self, request, context):
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def SearchSecurityGroups(self, request, context):
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def GetSecurityGroupRule(self, request, context):
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def SearchSecurityGroupRules(self, request, context):
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')


def add_OaktreeServicer_to_server(servicer, server):
  rpc_method_handlers = {
      'GetFlavor': grpc.unary_unary_rpc_method_handler(
          servicer.GetFlavor,
          request_deserializer=common__pb2.Filter.FromString,
          response_serializer=flavor__pb2.Flavor.SerializeToString,
      ),
      'SearchFlavors': grpc.unary_unary_rpc_method_handler(
          servicer.SearchFlavors,
          request_deserializer=common__pb2.Filter.FromString,
          response_serializer=flavor__pb2.FlavorList.SerializeToString,
      ),
      'GetImage': grpc.unary_unary_rpc_method_handler(
          servicer.GetImage,
          request_deserializer=common__pb2.Filter.FromString,
          response_serializer=image__pb2.Image.SerializeToString,
      ),
      'SearchImages': grpc.unary_unary_rpc_method_handler(
          servicer.SearchImages,
          request_deserializer=common__pb2.Filter.FromString,
          response_serializer=image__pb2.ImageList.SerializeToString,
      ),
      'GetSecurityGroup': grpc.unary_unary_rpc_method_handler(
          servicer.GetSecurityGroup,
          request_deserializer=common__pb2.Filter.FromString,
          response_serializer=security__group__pb2.SecurityGroup.SerializeToString,
      ),
      'SearchSecurityGroups': grpc.unary_unary_rpc_method_handler(
          servicer.SearchSecurityGroups,
          request_deserializer=common__pb2.Filter.FromString,
          response_serializer=security__group__pb2.SecurityGroupList.SerializeToString,
      ),
      'GetSecurityGroupRule': grpc.unary_unary_rpc_method_handler(
          servicer.GetSecurityGroupRule,
          request_deserializer=common__pb2.Filter.FromString,
          response_serializer=security__group__pb2.SecurityGroupRule.SerializeToString,
      ),
      'SearchSecurityGroupRules': grpc.unary_unary_rpc_method_handler(
          servicer.SearchSecurityGroupRules,
          request_deserializer=common__pb2.Filter.FromString,
          response_serializer=security__group__pb2.SecurityGroupRuleList.SerializeToString,
      ),
  }
  generic_handler = grpc.method_handlers_generic_handler(
      'oaktree.Oaktree', rpc_method_handlers)
  server.add_generic_rpc_handlers((generic_handler,))


class BetaOaktreeServicer(object):
  """The Beta API is deprecated for 0.15.0 and later.

  It is recommended to use the GA API (classes and functions in this
  file not marked beta) for all further purposes. This class was generated
  only to ease transition from grpcio<0.15.0 to grpcio>=0.15.0."""
  def GetFlavor(self, request, context):
    context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)
  def SearchFlavors(self, request, context):
    context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)
  def GetImage(self, request, context):
    context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)
  def SearchImages(self, request, context):
    context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)
  def GetSecurityGroup(self, request, context):
    context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)
  def SearchSecurityGroups(self, request, context):
    context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)
  def GetSecurityGroupRule(self, request, context):
    context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)
  def SearchSecurityGroupRules(self, request, context):
    context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)


class BetaOaktreeStub(object):
  """The Beta API is deprecated for 0.15.0 and later.

  It is recommended to use the GA API (classes and functions in this
  file not marked beta) for all further purposes. This class was generated
  only to ease transition from grpcio<0.15.0 to grpcio>=0.15.0."""
  def GetFlavor(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
    raise NotImplementedError()
  GetFlavor.future = None
  def SearchFlavors(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
    raise NotImplementedError()
  SearchFlavors.future = None
  def GetImage(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
    raise NotImplementedError()
  GetImage.future = None
  def SearchImages(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
    raise NotImplementedError()
  SearchImages.future = None
  def GetSecurityGroup(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
    raise NotImplementedError()
  GetSecurityGroup.future = None
  def SearchSecurityGroups(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
    raise NotImplementedError()
  SearchSecurityGroups.future = None
  def GetSecurityGroupRule(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
    raise NotImplementedError()
  GetSecurityGroupRule.future = None
  def SearchSecurityGroupRules(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
    raise NotImplementedError()
  SearchSecurityGroupRules.future = None


def beta_create_Oaktree_server(servicer, pool=None, pool_size=None, default_timeout=None, maximum_timeout=None):
  """The Beta API is deprecated for 0.15.0 and later.

  It is recommended to use the GA API (classes and functions in this
  file not marked beta) for all further purposes. This function was
  generated only to ease transition from grpcio<0.15.0 to grpcio>=0.15.0"""
  request_deserializers = {
    ('oaktree.Oaktree', 'GetFlavor'): common__pb2.Filter.FromString,
    ('oaktree.Oaktree', 'GetImage'): common__pb2.Filter.FromString,
    ('oaktree.Oaktree', 'GetSecurityGroup'): common__pb2.Filter.FromString,
    ('oaktree.Oaktree', 'GetSecurityGroupRule'): common__pb2.Filter.FromString,
    ('oaktree.Oaktree', 'SearchFlavors'): common__pb2.Filter.FromString,
    ('oaktree.Oaktree', 'SearchImages'): common__pb2.Filter.FromString,
    ('oaktree.Oaktree', 'SearchSecurityGroupRules'): common__pb2.Filter.FromString,
    ('oaktree.Oaktree', 'SearchSecurityGroups'): common__pb2.Filter.FromString,
  }
  response_serializers = {
    ('oaktree.Oaktree', 'GetFlavor'): flavor__pb2.Flavor.SerializeToString,
    ('oaktree.Oaktree', 'GetImage'): image__pb2.Image.SerializeToString,
    ('oaktree.Oaktree', 'GetSecurityGroup'): security__group__pb2.SecurityGroup.SerializeToString,
    ('oaktree.Oaktree', 'GetSecurityGroupRule'): security__group__pb2.SecurityGroupRule.SerializeToString,
    ('oaktree.Oaktree', 'SearchFlavors'): flavor__pb2.FlavorList.SerializeToString,
    ('oaktree.Oaktree', 'SearchImages'): image__pb2.ImageList.SerializeToString,
    ('oaktree.Oaktree', 'SearchSecurityGroupRules'): security__group__pb2.SecurityGroupRuleList.SerializeToString,
    ('oaktree.Oaktree', 'SearchSecurityGroups'): security__group__pb2.SecurityGroupList.SerializeToString,
  }
  method_implementations = {
    ('oaktree.Oaktree', 'GetFlavor'): face_utilities.unary_unary_inline(servicer.GetFlavor),
    ('oaktree.Oaktree', 'GetImage'): face_utilities.unary_unary_inline(servicer.GetImage),
    ('oaktree.Oaktree', 'GetSecurityGroup'): face_utilities.unary_unary_inline(servicer.GetSecurityGroup),
    ('oaktree.Oaktree', 'GetSecurityGroupRule'): face_utilities.unary_unary_inline(servicer.GetSecurityGroupRule),
    ('oaktree.Oaktree', 'SearchFlavors'): face_utilities.unary_unary_inline(servicer.SearchFlavors),
    ('oaktree.Oaktree', 'SearchImages'): face_utilities.unary_unary_inline(servicer.SearchImages),
    ('oaktree.Oaktree', 'SearchSecurityGroupRules'): face_utilities.unary_unary_inline(servicer.SearchSecurityGroupRules),
    ('oaktree.Oaktree', 'SearchSecurityGroups'): face_utilities.unary_unary_inline(servicer.SearchSecurityGroups),
  }
  server_options = beta_implementations.server_options(request_deserializers=request_deserializers, response_serializers=response_serializers, thread_pool=pool, thread_pool_size=pool_size, default_timeout=default_timeout, maximum_timeout=maximum_timeout)
  return beta_implementations.server(method_implementations, options=server_options)


def beta_create_Oaktree_stub(channel, host=None, metadata_transformer=None, pool=None, pool_size=None):
  """The Beta API is deprecated for 0.15.0 and later.

  It is recommended to use the GA API (classes and functions in this
  file not marked beta) for all further purposes. This function was
  generated only to ease transition from grpcio<0.15.0 to grpcio>=0.15.0"""
  request_serializers = {
    ('oaktree.Oaktree', 'GetFlavor'): common__pb2.Filter.SerializeToString,
    ('oaktree.Oaktree', 'GetImage'): common__pb2.Filter.SerializeToString,
    ('oaktree.Oaktree', 'GetSecurityGroup'): common__pb2.Filter.SerializeToString,
    ('oaktree.Oaktree', 'GetSecurityGroupRule'): common__pb2.Filter.SerializeToString,
    ('oaktree.Oaktree', 'SearchFlavors'): common__pb2.Filter.SerializeToString,
    ('oaktree.Oaktree', 'SearchImages'): common__pb2.Filter.SerializeToString,
    ('oaktree.Oaktree', 'SearchSecurityGroupRules'): common__pb2.Filter.SerializeToString,
    ('oaktree.Oaktree', 'SearchSecurityGroups'): common__pb2.Filter.SerializeToString,
  }
  response_deserializers = {
    ('oaktree.Oaktree', 'GetFlavor'): flavor__pb2.Flavor.FromString,
    ('oaktree.Oaktree', 'GetImage'): image__pb2.Image.FromString,
    ('oaktree.Oaktree', 'GetSecurityGroup'): security__group__pb2.SecurityGroup.FromString,
    ('oaktree.Oaktree', 'GetSecurityGroupRule'): security__group__pb2.SecurityGroupRule.FromString,
    ('oaktree.Oaktree', 'SearchFlavors'): flavor__pb2.FlavorList.FromString,
    ('oaktree.Oaktree', 'SearchImages'): image__pb2.ImageList.FromString,
    ('oaktree.Oaktree', 'SearchSecurityGroupRules'): security__group__pb2.SecurityGroupRuleList.FromString,
    ('oaktree.Oaktree', 'SearchSecurityGroups'): security__group__pb2.SecurityGroupList.FromString,
  }
  cardinalities = {
    'GetFlavor': cardinality.Cardinality.UNARY_UNARY,
    'GetImage': cardinality.Cardinality.UNARY_UNARY,
    'GetSecurityGroup': cardinality.Cardinality.UNARY_UNARY,
    'GetSecurityGroupRule': cardinality.Cardinality.UNARY_UNARY,
    'SearchFlavors': cardinality.Cardinality.UNARY_UNARY,
    'SearchImages': cardinality.Cardinality.UNARY_UNARY,
    'SearchSecurityGroupRules': cardinality.Cardinality.UNARY_UNARY,
    'SearchSecurityGroups': cardinality.Cardinality.UNARY_UNARY,
  }
  stub_options = beta_implementations.stub_options(host=host, metadata_transformer=metadata_transformer, request_serializers=request_serializers, response_deserializers=response_deserializers, thread_pool=pool, thread_pool_size=pool_size)
  return beta_implementations.dynamic_stub(channel, 'oaktree.Oaktree', cardinalities, options=stub_options)
# @@protoc_insertion_point(module_scope)
