# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: common.proto

import sys
_b=sys.version_info[0]<3 and (lambda x:x) or (lambda x:x.encode('latin1'))
from google.protobuf import descriptor as _descriptor
from google.protobuf import message as _message
from google.protobuf import reflection as _reflection
from google.protobuf import symbol_database as _symbol_database
from google.protobuf import descriptor_pb2
# @@protoc_insertion_point(imports)

_sym_db = _symbol_database.Default()




DESCRIPTOR = _descriptor.FileDescriptor(
  name='common.proto',
  package='oaktree',
  syntax='proto3',
  serialized_pb=_b('\n\x0c\x63ommon.proto\x12\x07oaktree\"h\n\x07Project\x12\x0c\n\x02id\x18\x01 \x01(\tH\x00\x12\x0e\n\x04name\x18\x02 \x01(\tH\x00\x12\x13\n\tdomain_id\x18\x03 \x01(\tH\x01\x12\x15\n\x0b\x64omain_name\x18\x04 \x01(\tH\x01\x42\t\n\x07projectB\x08\n\x06\x64omain\"Z\n\x08Location\x12\r\n\x05\x63loud\x18\x01 \x01(\t\x12\x0e\n\x06region\x18\x02 \x01(\t\x12\x0c\n\x04zone\x18\x03 \x01(\t\x12!\n\x07project\x18\x04 \x01(\x0b\x32\x10.oaktree.Project\"S\n\x06\x46ilter\x12#\n\x08location\x18\x01 \x01(\x0b\x32\x11.oaktree.Location\x12\x12\n\nname_or_id\x18\x02 \x01(\t\x12\x10\n\x08jmespath\x18\x03 \x01(\tb\x06proto3')
)
_sym_db.RegisterFileDescriptor(DESCRIPTOR)




_PROJECT = _descriptor.Descriptor(
  name='Project',
  full_name='oaktree.Project',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='id', full_name='oaktree.Project.id', index=0,
      number=1, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='name', full_name='oaktree.Project.name', index=1,
      number=2, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='domain_id', full_name='oaktree.Project.domain_id', index=2,
      number=3, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='domain_name', full_name='oaktree.Project.domain_name', index=3,
      number=4, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
    _descriptor.OneofDescriptor(
      name='project', full_name='oaktree.Project.project',
      index=0, containing_type=None, fields=[]),
    _descriptor.OneofDescriptor(
      name='domain', full_name='oaktree.Project.domain',
      index=1, containing_type=None, fields=[]),
  ],
  serialized_start=25,
  serialized_end=129,
)


_LOCATION = _descriptor.Descriptor(
  name='Location',
  full_name='oaktree.Location',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='cloud', full_name='oaktree.Location.cloud', index=0,
      number=1, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='region', full_name='oaktree.Location.region', index=1,
      number=2, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='zone', full_name='oaktree.Location.zone', index=2,
      number=3, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='project', full_name='oaktree.Location.project', index=3,
      number=4, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=131,
  serialized_end=221,
)


_FILTER = _descriptor.Descriptor(
  name='Filter',
  full_name='oaktree.Filter',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='location', full_name='oaktree.Filter.location', index=0,
      number=1, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='name_or_id', full_name='oaktree.Filter.name_or_id', index=1,
      number=2, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='jmespath', full_name='oaktree.Filter.jmespath', index=2,
      number=3, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=223,
  serialized_end=306,
)

_PROJECT.oneofs_by_name['project'].fields.append(
  _PROJECT.fields_by_name['id'])
_PROJECT.fields_by_name['id'].containing_oneof = _PROJECT.oneofs_by_name['project']
_PROJECT.oneofs_by_name['project'].fields.append(
  _PROJECT.fields_by_name['name'])
_PROJECT.fields_by_name['name'].containing_oneof = _PROJECT.oneofs_by_name['project']
_PROJECT.oneofs_by_name['domain'].fields.append(
  _PROJECT.fields_by_name['domain_id'])
_PROJECT.fields_by_name['domain_id'].containing_oneof = _PROJECT.oneofs_by_name['domain']
_PROJECT.oneofs_by_name['domain'].fields.append(
  _PROJECT.fields_by_name['domain_name'])
_PROJECT.fields_by_name['domain_name'].containing_oneof = _PROJECT.oneofs_by_name['domain']
_LOCATION.fields_by_name['project'].message_type = _PROJECT
_FILTER.fields_by_name['location'].message_type = _LOCATION
DESCRIPTOR.message_types_by_name['Project'] = _PROJECT
DESCRIPTOR.message_types_by_name['Location'] = _LOCATION
DESCRIPTOR.message_types_by_name['Filter'] = _FILTER

Project = _reflection.GeneratedProtocolMessageType('Project', (_message.Message,), dict(
  DESCRIPTOR = _PROJECT,
  __module__ = 'common_pb2'
  # @@protoc_insertion_point(class_scope:oaktree.Project)
  ))
_sym_db.RegisterMessage(Project)

Location = _reflection.GeneratedProtocolMessageType('Location', (_message.Message,), dict(
  DESCRIPTOR = _LOCATION,
  __module__ = 'common_pb2'
  # @@protoc_insertion_point(class_scope:oaktree.Location)
  ))
_sym_db.RegisterMessage(Location)

Filter = _reflection.GeneratedProtocolMessageType('Filter', (_message.Message,), dict(
  DESCRIPTOR = _FILTER,
  __module__ = 'common_pb2'
  # @@protoc_insertion_point(class_scope:oaktree.Filter)
  ))
_sym_db.RegisterMessage(Filter)


import grpc
from grpc.beta import implementations as beta_implementations
from grpc.beta import interfaces as beta_interfaces
from grpc.framework.common import cardinality
from grpc.framework.interfaces.face import utilities as face_utilities
# @@protoc_insertion_point(module_scope)
