$=
  Copyright 2016 Dominik Madarasz
   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at
       http://www.apache.org/licenses/LICENSE-2.0
   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
=$

PROGRAM PadLang;

import datetime, math, pad.lexer, pad.parse, pad.interpreter;

class TestClass
{
    var testmember = 42;

    sub ctor(x=0);
    {
        testmember = x;
    };

    fn GetMember;
    {
        ret testmember;
    };

    sub SetMember(x);
    {
        testmember = x;
    };

    sub SetMember(x,y);
    {
        testmember = x*y;
    };

    sub SetMember;
    {
        testmember = 42;
    };
};


VAR
$=
  Here we declare global variables.
=$
   number = 89;
   a, b;
   y;
   odd;

SUB Test(&x); $ SUB's alternative: PROCEDURE $
    $=
     '&' prefix says this is a reference argument, thus. caller should provide referenced variable.
     Since there is no semantic checking yet, x can be anything, therefore it is heavily prone to undefined behavior.
     We must make sure we know when to pass reference, also we need to always prefix our argument with '&'.
    =$
    FN NestedTest; $ This function is not available outside of Test's scope. $
    {
        RET 42;
    };
{
    x = NestedTest() * x / (x + 5);
};

$=
    Factorial (ex. 6! = 720)
    Recursive function to prove support of recursive calls and
    proof of having custom environment per each function's call. (ie. x won't get replaced by callee)
    Example:
        a = Factorial(6);
=$
FN Factorial(x);
{
    VAR r = 0;

    IF x == 0 {
        r = 1;
    } ELSE {
        r = x * Factorial(x-1);
    };
    RET r;
};

fn list_test;
{
    var l = [1, 2, 3, 4, 5];
    ret l;
};

FN MultiplyTwo(x); $ FN's alternative: FUNCTION $
VAR
    t;
{
    t = 2*x;
    RET t
};
$=
    Reserved keywords are case-insensitive. (ex. ELSE yields the same as ElSe).
=$
{ $ This is the entry point of our program $
    a = number ;
    b = 10 * a + 10 * number DIV 4;
    y = 20 / 7 + 3.14;
    b = 30 / 2 / b * (a + 25 DIV 2);
    IF a > 2 { $ Simple IF-ELSE condition statement. $
        a = 3;
        y = 2;
    } ELSE {
        a = 5;
        y = 35;
    }; $ Literally every scope HAS to end with SEMI-COLON (';'), this is different from C language! $
    $ Anonymous scope. $
    {
        $ Unlike in Pascal, we can declare (and define) our variables inside of scope. $
        var inline_var, f, g, h = 42;

        a = a + a;
        $ Here we can evaluate (3 % 2) inline and compare it with right-hand side. $
        IF (3 MOD 2) == 0 THEN $= OPTIONAL: THEN keyword. =$ {
            odd = 1;
        } ELSE IF (2 + 2) == 3 {
            odd = 0;
        } ELSE {
            odd = 3;
        };
    };
    a = 6;
    CASE a {
        2,6 : {
            y = 4;
        };
        3 : {
            y = 5;
        };
        (8-2) : y = 66;
        ELSE {
            y = 0;
        };
    };
    a = MultiplyTwo(2);

    $ Declare string literal and print its content with some random number converted to string. $
    var stringTest = "hello world with utf-8: čiže toto funguje.";
    print(stringTest , " " + str(42) + " " + str(Factorial(Factorial(4))));
    print("Is 2 + 2 = 4? " + str(2+2==4));
    print("Implicit list support: ");
    eval("print('this call comes from Python!')");

    $ List support $
    var l = [42, (2 * 43), Factorial(4)] + [1, 2, 3];
    var aa = [42, (2 * 43), Factorial(4)] + [1, 2, 3];
    print(l);

    $ Index accessor $
    $=
      variable[ start, end, step ]
      Example:
        list = [1, 2, 3, 4, 5, 6] -> list[0, len(list), 2] -> [1, 3, 5]
    =$
    print(l[0, len(l), 2]);
    print([1,2,3][1]);
    print(list_test()[0,1]);
    print(aa:count(3));
    print(aa);
    var uppercase = "I AM LOWERCASE!";
    print(uppercase:lower():upper():lower());

    var testobject = new TestClass;
    print(testobject);

    print(testobject:GetMember());
    testobject:SetMember(8,2);
    print(testobject:GetMember());

    var obj2 = new TestClass(8);
    print(obj2:GetMember());

    var cool.test = 2;
    print(cool.test);

    print("The time is: " + str(datetime:now():time()));

    print("Let's count together!");

    var i = 1;
    while i < 11 {
        print("Number " + str(i));
        i = i+1;
    };

    print("Let's print the content of 'aa' now:");
    for x in aa {
        print("element: " + str(x));
    };

    for x in range(2,6) {
        print("Interval Index: " + str(x));
    };

    print("Let's print out Cos(x) for x in (0;PI> by 0.1 step:");
    var x = 0;
    while x <= pi {
        print("Cos(" + str(x) + ") = " + str(cos(x)));
        x = x + 0.1;
    };

    $ Dictionary support. $
    var dictionary = {
        a: 45,
        b: 42.25,
        name: "Test dict"
    };

    print(dictionary);

    dictionary["name"] = "Test Dict Changed";
    aa[0] = 24;
    var multil = [1, 2, 3, 4, 5];
    for x in range(0, len(multil)) {
        multil[x] = multil[x] * 2;
    };
    print(multil);

    print(dictionary["name"]);

    var pokus = fn(a) {
        ret a*2;
    };
    print(pokus(9));

    Test(&a); $ global variable 'a' will contain value '18.6~' $


    $f = Factorial(6);$
    $ NestedTest(); -- this will cause "undefined method" exception, since NestedTest is nested function from Test method. $
}.  $ Program's entry point ends with DOT at the end of the scope. Pascal-style. $

$=
    NOTE:
        Instead of using { and }; braces, we can use Pascal's BEGIN and END; keyword alternatives.
        These are here to support basic Pascal programs.
=$