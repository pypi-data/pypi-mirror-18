#!python
# -*- coding: utf-8 -*-
## @file plancton
#  Main executable for the plancton daemon.
#
#  Prepares working directories and the environment, then invokes methods from the Plancton class.
#  This script can be used in a way that resembles the `/etc/init.d` scripts.

import sys, os.path
from getopt import getopt, GetoptError
from plancton import Plancton

pidfile = '/var/run/plancton.pid'
logdir = '/var/log/plancton'
rundir = '/var/run/plancton'
confdir = '/etc/plancton'
run_as_unpriv = False

# Parse command-line arguments
try:
  opts, args = getopt(sys.argv[1:], '', [ 'user', 'logdir=', 'rundir=', 'pidfile=', 'confdir=' ])
  for o, a in opts:
    if o == '--pidfile':
      pidfile = a
    elif o == '--logdir':
      logdir = a
    elif o == '--rundir':
      rundir = a
    elif o == '--confdir':
      confdir = a
    elif o == '--user':
      run_as_unpriv = True
    else:
      assert False, 'This should not happen: o=%s a=%s' % (o, a)

except GetoptError as e:
  sys.stderr.write('plancton: %s\n' % e)
  sys.exit(1)

if run_as_unpriv or os.getuid() != 0:
  userprefix = os.path.expanduser('~/.plancton')
  logdir = '%s/log' % userprefix
  rundir = '%s/run' % userprefix
  pidfile = '%s/plancton.pid' % rundir
  confdir = '%s/conf' % userprefix
  if not os.path.isdir(userprefix):
    os.mkdir(userprefix, 0700)
  else:
    os.chmod(userprefix, 0700)

try:
  cmd = args[0]
except IndexError:
  cmd = None

for subdir in [logdir,rundir,confdir]:
  if not os.path.isdir(subdir):
    os.mkdir(subdir, 0700)
  else:
    os.chmod(subdir, 0700)

daemon_instance = Plancton('plancton', pidfile=pidfile, logdir=logdir,
                                       rundir=rundir, confdir=confdir)

def help():
  sys.stderr.write('usage: %s [start|force-start|stop|force-stop|status|nodaemon|drain|drain-stop|resume|help]\n' % \
                   os.path.basename(sys.argv[0]))

r = None
if cmd == 'start':
  r = daemon_instance.start()
elif cmd == 'force-start':
  r = daemon_instance.resume()
  r = daemon_instance.start()
elif cmd == 'stop':
  r = daemon_instance.stop(no_timeout=False)
elif cmd == 'force-stop':
  r = daemon_instance.kill()
  r = daemon_instance.stop(no_timeout=True)
elif cmd == 'status':
  r = daemon_instance.status()
elif cmd == 'drain':
  r = daemon_instance.drain()
elif cmd == 'drain-stop':
  r = daemon_instance.drain(stop=True)
elif cmd == 'resume':
  r = daemon_instance.resume()
elif cmd == 'nodaemon':
  r = daemon_instance.runForeground()
elif cmd == 'help':
  help()
  r = True
else:
  help()
  r = False

if isinstance(r, bool):
  r = 0 if r else 1
sys.exit(r)

# Invalid return code?
assert False, 'Invalid return code: %s' % r
