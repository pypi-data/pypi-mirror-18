# -*- generated by 1.0.1 -*-
import da
PatternExpr_284 = da.pat.TuplePattern([da.pat.ConstantPattern('token'), da.pat.FreePattern('Q1'), da.pat.FreePattern('LN1')])
PatternExpr_301 = da.pat.TuplePattern([da.pat.ConstantPattern('request'), da.pat.FreePattern('p'), da.pat.FreePattern('n')])
PatternExpr_348 = da.pat.TuplePattern([da.pat.ConstantPattern('token'), da.pat.FreePattern(None), da.pat.FreePattern(None)])
PatternExpr_371 = da.pat.TuplePattern([da.pat.ConstantPattern('token'), da.pat.FreePattern(None), da.pat.FreePattern('LN1')])
PatternExpr_395 = da.pat.TuplePattern([da.pat.ConstantPattern('token'), da.pat.FreePattern(None), da.pat.FreePattern('LN2')])
PatternExpr_459 = da.pat.TuplePattern([da.pat.ConstantPattern('Done')])
PatternExpr_464 = da.pat.BoundPattern('_BoundPattern465_')
PatternExpr_466 = da.pat.TuplePattern([da.pat.FreePattern(None), da.pat.TuplePattern([da.pat.FreePattern(None), da.pat.FreePattern(None), da.pat.BoundPattern('_BoundPattern472_')]), da.pat.TuplePattern([da.pat.ConstantPattern('Done')])])
_config_object = {}
import sys

class P(da.DistProcess):

    def __init__(self, procimpl, props):
        super().__init__(procimpl, props)
        self._PSentEvent_2 = []
        self._PReceivedEvent_3 = []
        self._PSentEvent_4 = []
        self._PReceivedEvent_5 = []
        self._events.extend([da.pat.EventPattern(da.pat.ReceivedEvent, '_PReceivedEvent_0', PatternExpr_284, sources=None, destinations=None, timestamps=None, record_history=None, handlers=[self._P_handler_283]), da.pat.EventPattern(da.pat.ReceivedEvent, '_PReceivedEvent_1', PatternExpr_301, sources=None, destinations=None, timestamps=None, record_history=None, handlers=[self._P_handler_300]), da.pat.EventPattern(da.pat.SentEvent, '_PSentEvent_2', PatternExpr_348, sources=None, destinations=None, timestamps=None, record_history=True, handlers=[]), da.pat.EventPattern(da.pat.ReceivedEvent, '_PReceivedEvent_3', PatternExpr_371, sources=None, destinations=None, timestamps=None, record_history=True, handlers=[]), da.pat.EventPattern(da.pat.SentEvent, '_PSentEvent_4', PatternExpr_395, sources=None, destinations=None, timestamps=None, record_history=True, handlers=[]), da.pat.EventPattern(da.pat.ReceivedEvent, '_PReceivedEvent_5', PatternExpr_459, sources=[PatternExpr_464], destinations=None, timestamps=None, record_history=True, handlers=[])])

    def setup(self, ps, orig_token, nrounds):
        self._state.ps = ps
        self._state.orig_token = orig_token
        self._state.nrounds = nrounds
        self._state.RN = dict(((p, 0) for p in self._state.ps))
        self._state.Q = []
        self._state.LN = dict(((p, 0) for p in self._state.ps))

    def run(self):

        def anounce():
            self.output('In cs!')
        if self.haveToken():
            self.output("I'm lucky!")
        for i in range(self._state.nrounds):
            self.cs(anounce)
        self.send(('Done',), self._state.ps)
        super()._label('_st_label_450', block=False)
        p = None

        def UniversalOpExpr_451():
            nonlocal p
            for p in self._state.ps:
                if (not PatternExpr_466.match_iter(self._PReceivedEvent_5, _BoundPattern472_=p, SELF_ID=self._id)):
                    return False
            return True
        _st_label_450 = 0
        while (_st_label_450 == 0):
            _st_label_450 += 1
            if UniversalOpExpr_451():
                _st_label_450 += 1
            else:
                super()._label('_st_label_450', block=True)
                _st_label_450 -= 1
        self.output('Done!')

    def cs(self, task):
        super()._label('request', block=False)
        if (not self.haveToken()):
            self._state.RN[self._id] += 1
            self.send(('request', self._id, self._state.RN[self._id]), self._state.ps)
            super()._label('_st_label_227', block=False)
            _st_label_227 = 0
            while (_st_label_227 == 0):
                _st_label_227 += 1
                if self.haveToken():
                    _st_label_227 += 1
                else:
                    super()._label('_st_label_227', block=True)
                    _st_label_227 -= 1
        task()
        self._state.LN[self._id] = self._state.RN[self._id]
        self._state.Q.extend([p for p in self._state.ps if (not (p in self._state.Q)) if (self._state.RN[p] == (self._state.LN[p] + 1))])
        if (len(self._state.Q) > 0):
            p = self._state.Q.pop()
            self.send(('token', self._state.Q, self._state.LN), p)

    def haveToken(self):

        def ExistentialOpExpr_346():
            for (_, _, (_ConstantPattern363_, _, _)) in self._PSentEvent_2:
                if (_ConstantPattern363_ == 'token'):
                    if True:
                        return True
            return False
        LN1 = LN2 = None

        def ExistentialOpExpr_369():
            nonlocal LN1, LN2
            for (_, _, (_ConstantPattern387_, _, LN1)) in self._PReceivedEvent_3:
                if (_ConstantPattern387_ == 'token'):

                    def ExistentialOpExpr_393(LN1):
                        nonlocal LN2
                        for (_, _, (_ConstantPattern411_, _, LN2)) in self._PSentEvent_4:
                            if (_ConstantPattern411_ == 'token'):
                                if (LN2[self._id] > LN1[self._id]):
                                    return True
                        return False
                    if (not ExistentialOpExpr_393(LN1=LN1)):
                        return True
            return False
        return ((self._state.orig_token and (not ExistentialOpExpr_346())) or ExistentialOpExpr_369())

    def _P_handler_283(self, Q1, LN1):
        self._state.Q = Q1
        self._state.LN = LN1
    _P_handler_283._labels = None
    _P_handler_283._notlabels = None

    def _P_handler_300(self, p, n):
        self._state.RN[p] = max((self._state.RN[p], n))
        if (self.haveToken() and (self._state.RN[p] == (self._state.LN[p] + 1))):
            self.send(('token', self._state.Q, self._state.LN), p)
    _P_handler_300._labels = None
    _P_handler_300._notlabels = None

class Node_(da.NodeProcess):

    def __init__(self, procimpl, props):
        super().__init__(procimpl, props)
        self._events.extend([])

    def run(self):
        nprocs = (int(sys.argv[1]) if (len(sys.argv) > 1) else 10)
        nrounds = (int(sys.argv[2]) if (len(sys.argv) > 2) else 1)
        ps = self.new(P, num=nprocs)
        lucky = ps.pop()
        self._setup(ps, ((ps | {lucky}), False, nrounds))
        self._setup({lucky}, ((ps | {lucky}), True, nrounds))
        self._start((ps | {lucky}))
