associativeReduceIntegers: 
    fun(valSoFar, add, merge, empty, low, high) {
        __without_stacktrace_augmentation {
            if (high - low > 1000000) {
                let mid = Int64((low + high)/2)

                return merge(
                    associativeReduceIntegers(empty, add, merge, empty, low, mid),
                    associativeReduceIntegers(empty, add, merge, empty, mid, high)
                    )
                }

            while (low < high) {
                let val = low
                low = low + 1

                let newValSoFar = add(valSoFar, val)
                
                if (`split) {
                    let computeTail = fun() {
                        __without_stacktrace_augmentation {
                            if (low >= high)
                                return empty
                            if (low + 1 >= high)
                                return associativeReduceIntegers(empty, add, merge, empty, low, high)

                            let mid = Int64((low + high)/2)

                            return merge(
                                associativeReduceIntegers(empty, add, merge, empty, low, mid),
                                associativeReduceIntegers(empty, add, merge, empty, mid, high)
                                )
                            }
                        }

                    let tail = computeTail();

                    return merge(newValSoFar, tail)
                    }

                valSoFar = newValSoFar
                }

            return valSoFar
            }
        };
