/***************************************************************************
   Copyright 2015 Ufora Inc.

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
****************************************************************************/
class {
    //this can be either a FORA string, or a FORA vector of UInt8
    member @m;
    
    //required because the AttributeError clause in the PyObjectBase mixin masks the
    //generated version of this attribute.
    ...(`Member, `@m) { @m };

    __class__: StrType;

    //helper function to allow clients to format this for writing to s3.
    //this will eventually be replaced with a more generic model of data import/export
    @pyfora_string_as_paged_vec_of_char: (
        match (@m) with ({String}) { @m.dataAsVector.paged } (...) { @m.paged }
        );

    static @string_size_limit: 100000;
    """Construct a string from a FORA string or a vector of char, ensuring that we obey 
    the constraint that strings over the @string_size_limit should be held as Vectors.
    """
    static @makestring: 
    fun({String} s) {
            if (size(s) > @string_size_limit)
                return PyString(s.dataAsVector)
            else
                return PyString(s) 
            }
        (s) {
            if (size(s) > @string_size_limit)
                return PyString(s)
            else
                return PyString(s.dataAsString)
            };

    __getitem__: PyBoundMethod(
        self,
        fun
        (@unnamed_args:(self, Slice(s)), *args) {
            if (s.step == PyInt(0))
                throw ValueError("slice step cannot be zero")

            return self[s.start.@m, s.stop.@m, s.step.@m]
            }
        (@unnamed_args:(self, PyInt(ix)), *args) {
            self[ix.@m]
            }
        (@unnamed_args:(self, *args), *otherArgs) {
            throw TypeError(PyString(
                "string indices must be integers or slice objects"
                ))
            },
        `__getitem__
        );         

    operator[]
    (PyInt(p)) {
        self[p.@m]
        }
    ({Int64} ix) {
        if (ix < -size(@m) or ix >= size(@m))
            throw IndexError(PyString("string index out of range"))        

        return PyString(`UInt8ToString(@m[ix]));
        }
    (ix1, ix2, _ ix3) {
        if (ix1 is nothing)
            ix1 = 0

        if (ix1 < 0 and ix3 is not nothing and ix3 > 1)
            ix1 = max(ix1, size(@m) * -1);

        if (ix1 > size(@m) - 1 and ix3 is not nothing and ix3 < -1)
            ix1 = size(@m) - 1

        if (ix3 is nothing)
            return @makestring(@m[ix1, ix2])
        else 
            {
            if (ix3 == 0) 
                throw ValueError(PyString("slice step cannot be zero"))
            return @makestring(@m[ix1, ix2, ix3]);
            }
        }
    
    (PyTuple(other)) {
        //Assert we're dealing with a length two tuple
        let ix1 = other.@m[0].@m
        let ix2 = other.@m[1].@m
        @makestring(@m[ix1, ix2]);
        };

    __len__: PyBoundMethod(
        self,
        fun(@unnamed_args:(self), *args) {
            PyInt(Int64(size(self.@m)))
            },
        `__len__);

    __str__: PyBoundMethod(
        self,
        fun(@unnamed_args:(self), *args) {
            self
            },
        `__str__);

    convert(Bool _) { size(self.@m) > 0 };

    operator match(PyString _) { (self,) };

    operator iterator() { 
        for ix in sequence(size(@m))
            yield self[PyInt(ix)]
        };

    __pyfora_generator__: PyBoundMethod(
        self,
        fun(@unnamed_args:(self), *args) {
            return IteratorAsGenerator(self)
            },
        `__pyfora_generator__);

    __cmp__: PyBoundMethod(
        self,
        fun(@unnamed_args:(self, PyString(other)), *args) {
            let minIx = (size(@m) <<< size(other.@m))

            let ix = 0
            while (ix < minIx) {
                let mx = @m[ix];
                let ox = other.@m[ix];
                if (mx < ox)
                    return PyInt(-1)
                else if (mx > ox)
                    return PyInt(1)
                else
                    ix = ix + 1
                }

            if (size(@m) < size(other.@m))
                return PyInt(-1)
            else if (size(@m) > size(other.@m))
                return PyInt(1)
            return PyInt(0)
            },
        `__cmp__);

    //Arithmetic operators
    __add__: PyBoundMethod(
        self,
        fun(@unnamed_args:(self, PyString(other)), *args) {
            match (@m, other.@m) with 
                ({String}, {String}) { @makestring(@m + other.@m) }
                ({String}, _) { PyString(@m.dataAsVector + other.@m) }
                (_, {String}) { PyString(@m + other.@m.dataAsVector) }
                (_, _) { PyString(@m + other.@m) }
            },
        `__add__);

    __mul__: PyBoundMethod(
        self,
        fun(@unnamed_args:(self, PyInt(other)), *args) {
            if (other.@m <= 0)
                return PyString("")
            if (other.@m == 1)
                return self
            let mid = other.@m / 2
            if (mid*2 == other.@m) {
                let half = self*PyInt(mid)
                return half + half
                }
            return self*PyInt(other.@m - 1) + self
            }, `__mul__);

    //Comparison operators
    __lt__: PyBoundMethod(
        self, 
        fun(@unnamed_args:(self, PyString(other)), *args) {
            PyBool(self.__cmp__(other).@m < 0)
            }
        (@unnamed_args:(self, _), *args) {
        PyBool(false)
        }, `__lt__);

    __gt__: PyBoundMethod(
        self,
        fun(@unnamed_args:(self, PyString(other)), *args) {
            PyBool(self.__cmp__(other).@m > 0)
            }
        (@unnamed_args:(self, _), *args) {
            PyBool(true)
            },
        `__gt__);

    //Equality operators
    __eq__: PyBoundMethod(
        self,
        fun(@unnamed_args:(self, PyString(other)), *args) {
            match (@m, other.@m) with 
                ({String}, {String}) { PyBool(@m == other.@m) }
                (...) { PyBool(self.__cmp__(other).@m == 0) }
            }
        (@unnamed_args:(self, _), *args) {
            PyBool(false)
            },
        `__eq__);

    __ne__: PyBoundMethod(
        self, 
        fun(@unnamed_args:(self, PyString(other)), *args) {
            PyBool(self.__cmp__(other).@m != 0)
            }
        (@unnamed_args:(self, _), *args) {
            PyBool(true)
            },
        `__ne__);

    capitalize: PyBoundMethod(
        self,
        fun(@unnamed_args:(self, *args), *otherArgs) {
            throw InvalidPyforaOperation("Not Implemented")
            },
        `capitalize);

    center: PyBoundMethod(
        self,
        fun(@unnamed_args:(self, *args), *otherArgs) {
            throw InvalidPyforaOperation("Not Implemented")
            },
        `center);

    count: PyBoundMethod(
        self,
        fun(@unnamed_args:(self, *args), *otherArgs) {
            throw InvalidPyforaOperation("Not Implemented")
            },
        `count);
    
    decode: PyBoundMethod(
        self,
        fun(@unnamed_args:(self, *args), *otherArgs) {
            throw InvalidPyforaOperation("Not Implemented")
            },
        `decode);
    
    encode: PyBoundMethod(
        self,
        fun(@unnamed_args:(self, *args), *otherArgs) {
            throw InvalidPyforaOperation("Not Implemented")
            },
        `encode);
    
    endswith: PyBoundMethod(
        self,
        fun(@unnamed_args:(self, *args), *otherArgs) {
            throw InvalidPyforaOperation("Not Implemented")
            },
        `endswith);
    
    expandtabs: PyBoundMethod(
        self,
        fun(@unnamed_args:(self, *args), *otherArgs) {
            throw InvalidPyforaOperation("Not Implemented")
            },
        `expandtabs);
    
    find: PyBoundMethod(
        self,
        fun(@unnamed_args:(self, *args), *otherArgs) {
            throw InvalidPyforaOperation("Not Implemented")
            },
        `find);
    
    format: PyBoundMethod(
        self,
        fun(@unnamed_args:(self, *args), *otherArgs) {
            throw InvalidPyforaOperation("Not Implemented")
            },
        `format);
    
    index: PyBoundMethod(
        self,
        fun(@unnamed_args:(self, *args), *otherArgs) {
            throw InvalidPyforaOperation("Not Implemented")
            },
        `index);
    
    isalnum: PyBoundMethod(
        self,
        fun(@unnamed_args:(self, *args), *otherArgs) {
        throw InvalidPyforaOperation("Not Implemented")
        }, `isalnum);
    
    isdigit: PyBoundMethod(
        self,
        fun(@unnamed_args:(self, *args), *otherArgs) {
        throw InvalidPyforaOperation("Not Implemented")
        }, `isdigit);
    
    islower: PyBoundMethod(
        self,
        fun(@unnamed_args:(self, *args), *otherArgs) {
            throw InvalidPyforaOperation("Not Implemented")
            },
        `islower);
    
    isspace: PyBoundMethod(
        self,
        fun(@unnamed_args:(self, *args), *otherArgs) {
            throw InvalidPyforaOperation("Not Implemented")
            }, `isspace);
    
    istitle: PyBoundMethod(
        self,
        fun(@unnamed_args:(self, *args), *otherArgs) {
            throw InvalidPyforaOperation("Not Implemented")
            },
        `istitle);
    
    isupper: PyBoundMethod(
        self,
        fun(@unnamed_args:(self, *args), *otherArgs) {
            throw InvalidPyforaOperation("Not Implemented")
            },
        `isupper);
    
    join: PyBoundMethod(
        self,
        fun(@unnamed_args:(self, *args), *otherArgs) {
            throw InvalidPyforaOperation("Not Implemented")
            },
        `join);
    
    ljust: PyBoundMethod(
        self,
        fun(@unnamed_args:(self, *args), *otherArgs) {
            throw InvalidPyforaOperation("Not Implemented")
            }, `ljust);
    
    lower: PyBoundMethod(
        self,
        fun(@unnamed_args:(self, *args), *otherArgs) {
            throw InvalidPyforaOperation("Not Implemented")
            },
        `lower);
    
    lstrip: PyBoundMethod(
        self,
        fun(@unnamed_args:(self, *args), *otherArgs) {
            throw InvalidPyforaOperation("Not Implemented")
            },
        `lstrip);
    
    partition: PyBoundMethod(
        self,
        fun(@unnamed_args:(self, *args), *otherArgs) {
            throw InvalidPyforaOperation("Not Implemented")
            },
        `partition);
    
    replace: PyBoundMethod(
        self,
        fun(@unnamed_args:(self, *args), *otherArgs) {
            throw InvalidPyforaOperation("Not Implemented")
            },
        `replace);
    
    rfind: PyBoundMethod(
        self,
        fun(@unnamed_args:(self, *args), *otherArgs) {
            throw InvalidPyforaOperation("Not Implemented")
            },
        `rfind);
    
    rindex: PyBoundMethod(
        self,
        fun(@unnamed_args:(self, *args), *otherArgs) {
            throw InvalidPyforaOperation("Not Implemented")
            },
        `rindex);
    
    rjust: PyBoundMethod(
        self,
        fun(@unnamed_args:(self, *args), *otherArgs) {
            throw InvalidPyforaOperation("Not Implemented")
            },
        `rjust);
    
    rpartition: PyBoundMethod(
        self,
        fun(@unnamed_args:(self, *args), *otherArgs) {
            throw InvalidPyforaOperation("Not Implemented")
            },
        `rpartition);
    
    rsplit: PyBoundMethod(
        self,
        fun(@unnamed_args:(self, *args), *otherArgs) {
            throw InvalidPyforaOperation("Not Implemented")
            },
        `rsplit);
    
    rstrip: PyBoundMethod(
        self,
        fun(@unnamed_args:(self, *args), *otherArgs) {
            throw InvalidPyforaOperation("Not Implemented")
            },
        `rstrip);
    
    split: PyBoundMethod(
        self,
        fun(@unnamed_args:(self, sep = PyNone(nothing), maxsplit = PyNone(nothing)),
            *args) {
            if (maxsplit is not PyNone(nothing))
                throw InvalidPyforaOperation("Not Implemented (maxsplit)")
            if (sep is PyNone(nothing))
                throw InvalidPyforaOperation("Not Implemented (sep=None)")

            if (size(sep.@m) != 1)
                throw InvalidPyforaOperation(
                    "Not Implemented (separator size greater than 1)")
        
            let sepChar = sep.@m[0]

            let indices = Vector.range(
                size(@m), {_}, fun(ix) {@m[ix] == sepChar}) :: size(@m)

            return PyList(
                Vector.range(size(indices), fun(ix) {
                    let low = 0
                    if (ix > 0)
                        low = indices[ix-1] + size(sep.@m)
                    let hi = indices[ix]
                    
                    return @makestring(@m[low,hi])
                    })
                )
            },
        `split);
    
    splitlines: PyBoundMethod(
        self, 
        fun(@unnamed_args:(self, keepends=PyBool(true)), *args) {
            let newline = "\n"[0]
            let lf = "\r"[0]
            let indexIsNewline = fun(ix) {
                let c = @m[ix]
                if (c == lf)
                    return true
                if (c == newline and (ix == 0 or @m[ix-1] != lf))
                    return true
                return false
                };

            let isTwoCharNewline = fun(ix) {
                let c = @m[ix]
                if (c == lf and (ix + 1) < size(@m) and @m[ix+1] == newline)
                    return true

                return false;
                }

            let lineIndices = Vector.range(size(@m), {_}, indexIsNewline)
            let hasTail = true;

            if (size(@m) > 0 and
                size(lineIndices) and
                (lineIndices[-1] == size(@m) - 1 or isTwoCharNewline(lineIndices[-1])
                 and lineIndices[-1] == size(@m) - 2))
                hasTail = false

            let elts = Vector.range(size(lineIndices), fun(ix) {
                let low = 0
                if (ix > 0) {
                    low = lineIndices[ix-1] + 1
                    if (isTwoCharNewline(low-1))
                        low = low + 1
                    }

                let hi = lineIndices[ix] + 1

                if (isTwoCharNewline(hi-1)) {
                    hi = hi + 1

                    if (not keepends.@m)
                        hi = hi - 2
                    }
                else {
                    if (not keepends.@m)
                        hi = hi - 1
                    }

                return @makestring(@m[low,hi])
                });

            if (hasTail) {
                if (size(lineIndices)) {
                    if (isTwoCharNewline(lineIndices[-1]))
                        elts = elts :: @makestring(@m[lineIndices[-1]+2,])
                    else
                        elts = elts :: @makestring(@m[lineIndices[-1]+1,])
                    }
                else {
                    if (size(@m))
                        elts = [self]
                    }
                }

            PyList(elts)
            },
        `splitlines);
    
    startswith: PyBoundMethod(
        self,
        fun(@unnamed_args:(self, *args), *otherArgs) {
            throw InvalidPyforaOperation("Not Implemented")
            },
        `startswith);
    
    strip: PyBoundMethod(
        self,
        fun(@unnamed_args:(self, *args), *otherArgs) {
            throw InvalidPyforaOperation("Not Implemented")
            },
        `strip);
    
    swapcase: PyBoundMethod(
        self,
        fun(@unnamed_args:(self, *args), *otherArgs) {
            throw InvalidPyforaOperation("Not Implemented")
            },
        `swapcase);
    
    title: PyBoundMethod(
        self,
        fun(@unnamed_args:(self, *args), *otherArgs) {
            throw InvalidPyforaOperation("Not Implemented")
            },
        `swapcase);
    
    translate: PyBoundMethod(
        self,
        fun(@unnamed_args:(self, *args), *otherArgs) {
            throw InvalidPyforaOperation("Not Implemented")
            },
        `swapcase);
    
    upper: PyBoundMethod(
        self,
        fun(@unnamed_args:(self, *args), *otherArgs) {
            throw InvalidPyforaOperation("Not Implemented")
            },
        `swapcase);
    
    zfill: PyBoundMethod(
        self,
        fun(@unnamed_args:(self, *args), *otherArgs) {
            throw InvalidPyforaOperation("Not Implemented")
            },
        `swapcase);

    mixin PyObjectBase;
    };

