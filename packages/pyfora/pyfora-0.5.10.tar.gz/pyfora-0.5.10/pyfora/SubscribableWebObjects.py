
"NOTE: THIS IS GENERATED CODE. DO NOT EDIT THIS FILE OR CHECK IT INTO SOURCE CONTROL!"

import json

class WebObjectBase(object):
    def __init__(self, sessionState, inArgs=None):
        self.objectId_ = None
        self.sessionState = sessionState
        self.objectDefinition_ = {
            "args": inArgs if inArgs is not None else {}
        }

    def toJSONWireFormat(self):
        self.sessionState.isConvertingToWireFormat = True
        memoizedJson = self.toMemoizedJSON()
        def encoder(obj):
            if isinstance(obj, WebObjectBase):
                return obj.toMemoizedJSON()
            return obj

        data = json.loads(json.dumps(memoizedJson, default=encoder))
        self.sessionState.isConvertingToWireFormat = False
        return data

    def toMemoizedJSON(self):
        if not self.sessionState.useObjectIds or not self.sessionState.isConvertingToWireFormat:
            return {"objectDefinition_": self.objectDefinition_}
        if self.sessionState.usableObjectId(self.objectId_):
            return {"objectId_": self.objectId_}
        self.objectId_ = self.sessionState.allocateObjectId()
        return {"objectDefinition_": self.objectDefinition_, "objectId_": self.objectId_}

    def toJSON(self, objectId):
        return {"objectDefinition_": self.objectDefinition_, "objectId_": objectId}

    def get(self, field, callbacks):
        req = {
            'objectDefinition': self.toJSONWireFormat(),
            'messageType': 'Read',
            'field': field
            }
        def responseCallback(response, callbacks):
            if response['responseType'] == 'ReadResponse':
                self.triggerSuccessCallback(
                    callbacks,
                    self.sessionState.convertJsonToObject(response['value'])
                    )
            else:
                self.triggerFailureCallback(callbacks, response)
        self.sessionState.jsonInterface.send(req, lambda response: responseCallback(response, callbacks))
        self.sessionState.updateObjectIdThreshold()

    def subscribe(self, field, callbacks):
        req = {
            'objectDefinition': self.toJSONWireFormat(),
            'messageType': 'Subscribe',
            'field': field
            }
        def responseCallback(response, callbacks):
            if response['responseType'] == 'SubscribeResponse':
                self.triggerSuccessCallback(
                    callbacks,
                    self.sessionState.convertJsonToObject(response['value'])
                    )
            elif response['responseType'] == 'ValueChanged':
                self.triggerChangedCallback(
                    callbacks,
                    self.sessionState.convertJsonToObject(response['value'])
                    )
            else:
                self.triggerFailureCallback(callbacks, response)
        self.sessionState.jsonInterface.send(req, lambda response: responseCallback(response, callbacks))
        self.sessionState.updateObjectIdThreshold()

    def set(self, attributeName, value, callbacks):
        req = {
            'objectDefinition': self.toJSONWireFormat(),
            'messageType': 'Assign',
            'field': attributeName,
            'value': value
            }
        def responseCallback(response, callbacks):
            if response['responseType'] == 'OK':
                self.triggerSuccessCallback(callbacks)
            else:
                self.triggerFailureCallback(callbacks, response)
        self.sessionState.jsonInterface.send(req, lambda response: responseCallback(response, callbacks))
        self.sessionState.updateObjectIdThreshold()

    def invoke(self, name, args, callbacks):
        req = {
            'objectDefinition': self.toJSONWireFormat(),
            'messageType': 'Execute',
            'args': args,
            'field': name
            }
        def responseCallback(response, callbacks):
            if response['responseType'] == 'ExecutionResult':
                self.triggerSuccessCallback(
                    callbacks,
                    self.sessionState.convertJsonToObject(response['result'])
                    )
            else:
                self.triggerFailureCallback(callbacks, response)
        self.sessionState.jsonInterface.send(req, lambda response: responseCallback(response, callbacks))
        self.sessionState.updateObjectIdThreshold()

    @classmethod
    def triggerSuccessCallback(cls, callbacks, *args, **kwargs):
        return cls.triggerCallback(callbacks, 'onSuccess', *args, **kwargs)

    @classmethod
    def triggerFailureCallback(cls, callbacks, *args, **kwargs):
        return cls.triggerCallback(callbacks, 'onFailure', *args, **kwargs)

    @classmethod
    def triggerChangedCallback(cls, callbacks, *args, **kwargs):
        return cls.triggerCallback(callbacks, 'onChanged', *args, **kwargs)

    @staticmethod
    def triggerCallback(callbacks, name, *args, **kwargs):
        callback = getattr(callbacks, name, None) or callbacks.get(name)
        if callback:
            return callback(*args, **kwargs)



class SessionState(object):
    def __init__(self, maxObjectIds, useObjectIds, jsonInterface):
        self.useObjectIds = useObjectIds
        self.maxObjectIds = maxObjectIds
        self.minValidObjectId = 0
        self.curObjectId = 0
        self.jsonInterface = jsonInterface
        self.isConvertingToWireFormat = False
        self.objectsById = {}
        self.objectIdsMemoized = []
        self.timesCleared = 0

    def usableObjectId(self, objId):
        if objId is None:
            return False
        return objId >= self.minValidObjectId

    def allocateObjectId(self):
        self.curObjectId = self.curObjectId + 1
        return self.curObjectId - 1

    def updateObjectIdThreshold(self, forceFlush=False):
        if self.curObjectId > self.minValidObjectId + self.maxObjectIds or forceFlush:
            self.minValidObjectId = self.curObjectId
            req = {
                'messageType': 'ServerFlushObjectIdsBelow',
                'value': self.minValidObjectId,
                'objectDefinition': {}
                }
            self.jsonInterface.send(
                req,
                lambda x: x
                )

    def clearObjectIds(self):
        return self.updateObjectIdThreshold(True)

    def convertJsonToObject(self, val):
        if val is None:
            return

        if isinstance(val, list):
            return tuple(self.convertJsonToObject(x) for x in val)

        if not isinstance(val, dict):
            return val

        objectId = val.get('objectId_')
        if objectId is None:
            return {k: self.convertJsonToObject(v) for k, v in val.iteritems()}

        definition = val.get('objectDefinition_')
        if definition is None:
            objectToReturn = self.objectsById.get(objectId)
            if objectToReturn is None:
                raise Exception("Received an undefined object id: %s from the server" % objectId)
            return objectToReturn

        objectToReturn = (classes[definition['type']])(self, self.convertJsonToObject(definition['args']))
        self.objectsById[objectId] = objectToReturn
        self.objectIdsMemoized.append(objectId)
        return objectToReturn


    def clearObjectIdsBelow(self, minValidObjectId):
        self.timesCleared += 1
        self.objectIdsMemoized.sort()

        while len(self.objectIdsMemoized) > 0 and self.objectIdsMemoized[0] < minValidObjectId:
            objId = self.objectIdsMemoized.pop(0)
            del self.objectsById[objId]

class WebObjectFactory(object):
    def constructor(self, typeName):
        def construct(*args):
            return classes[typeName](self.sessionState, *args)
        return construct

    def __init__(self, jsonInterface, maxObjectIds=10000, useObjectIds=True):
        self.jsonInterface = jsonInterface
        self.sessionState = SessionState(maxObjectIds, useObjectIds, jsonInterface)

        self.jsonInterface.on('special_message', self.onSpecialMessage)
        self.__dict__.update({cls: self.constructor(cls) for cls in classes.iterkeys()})

    def onSpecialMessage(self, msg):
        if msg["responseType"] == 'ClientFlushObjectIdsBelow':
            self.sessionState.clearObjectIdsBelow(msg["value"])

    def flushObjectIds(self):
        return self.sessionState.clearObjectIds()

    def getJsonInterface(self):
        return self.jsonInterface


class WriteToS3Task(WebObjectBase):
    def __init__(self, sessionState, inArgs=None):
        super(WriteToS3Task, self).__init__(sessionState, inArgs)
        self.objectDefinition_.update({
            "type": "WriteToS3Task",
        })

    def set_successOrError(self, value, callbacks):
        self.set('successOrError', value, callbacks)

    def get_successOrError(self, callbacks):
        self.get('successOrError', callbacks)

    def subscribe_successOrError(self, callbacks):
        self.subscribe('successOrError', callbacks)


class ComputedValueVectorFromComputedValue(WebObjectBase):
    def __init__(self, sessionState, inArgs=None):
        super(ComputedValueVectorFromComputedValue, self).__init__(sessionState, inArgs)
        self.objectDefinition_.update({
            "type": "ComputedValueVectorFromComputedValue",
        })

    def getSlice(self, args, callbacks):
        self.invoke('getSlice', args, callbacks)

    def get_elementCount(self, callbacks):
        self.get('elementCount', callbacks)

    def subscribe_elementCount(self, callbacks):
        self.subscribe('elementCount', callbacks)

    def get_computedValue(self, callbacks):
        self.get('computedValue', callbacks)

    def subscribe_computedValue(self, callbacks):
        self.subscribe('computedValue', callbacks)


class ViewOfEntireCumulusSystem(WebObjectBase):
    def __init__(self, sessionState, inArgs=None):
        super(ViewOfEntireCumulusSystem, self).__init__(sessionState, inArgs)
        self.objectDefinition_.update({
            "type": "ViewOfEntireCumulusSystem",
        })

    def clearMostRecentMessages(self, args, callbacks):
        self.invoke('clearMostRecentMessages', args, callbacks)

    def get_mostRecentMessages(self, callbacks):
        self.get('mostRecentMessages', callbacks)

    def subscribe_mostRecentMessages(self, callbacks):
        self.subscribe('mostRecentMessages', callbacks)

    def get_viewOfCumulusSystem(self, callbacks):
        self.get('viewOfCumulusSystem', callbacks)

    def subscribe_viewOfCumulusSystem(self, callbacks):
        self.subscribe('viewOfCumulusSystem', callbacks)

    def clearAndReturnMostRecentMessages(self, args, callbacks):
        self.invoke('clearAndReturnMostRecentMessages', args, callbacks)

    def pushNewGlobalUserFacingLogMessage(self, args, callbacks):
        self.invoke('pushNewGlobalUserFacingLogMessage', args, callbacks)

    def get_totalMessagesEver(self, callbacks):
        self.get('totalMessagesEver', callbacks)

    def subscribe_totalMessagesEver(self, callbacks):
        self.subscribe('totalMessagesEver', callbacks)


class PyforaObjectConverter(WebObjectBase):
    def __init__(self, sessionState, inArgs=None):
        super(PyforaObjectConverter, self).__init__(sessionState, inArgs)
        self.objectDefinition_.update({
            "type": "PyforaObjectConverter",
        })

    def convert(self, args, callbacks):
        self.invoke('convert', args, callbacks)

    def initialize(self, args, callbacks):
        self.invoke('initialize', args, callbacks)


class PyforaDictionaryElement(WebObjectBase):
    def __init__(self, sessionState, inArgs=None):
        super(PyforaDictionaryElement, self).__init__(sessionState, inArgs)
        self.objectDefinition_.update({
            "type": "PyforaDictionaryElement",
        })

    def increaseRequestCount(self, args, callbacks):
        self.invoke('increaseRequestCount', args, callbacks)

    def get_submittedComputationId(self, callbacks):
        self.get('submittedComputationId', callbacks)

    def subscribe_submittedComputationId(self, callbacks):
        self.subscribe('submittedComputationId', callbacks)

    def writeToS3(self, args, callbacks):
        self.invoke('writeToS3', args, callbacks)

    def decreaseRequestCount(self, args, callbacks):
        self.invoke('decreaseRequestCount', args, callbacks)

    def get_jsonStatusRepresentation(self, callbacks):
        self.get('jsonStatusRepresentation', callbacks)

    def subscribe_jsonStatusRepresentation(self, callbacks):
        self.subscribe('jsonStatusRepresentation', callbacks)

    def get_stats(self, callbacks):
        self.get('stats', callbacks)

    def subscribe_stats(self, callbacks):
        self.subscribe('stats', callbacks)

    def get_isFinished(self, callbacks):
        self.get('isFinished', callbacks)

    def subscribe_isFinished(self, callbacks):
        self.subscribe('isFinished', callbacks)

    def cancel(self, args, callbacks):
        self.invoke('cancel', args, callbacks)

    def triggerCompilation(self, args, callbacks):
        self.invoke('triggerCompilation', args, callbacks)

    def requestComputationCheckpoint(self, args, callbacks):
        self.invoke('requestComputationCheckpoint', args, callbacks)

    def get_isException(self, callbacks):
        self.get('isException', callbacks)

    def subscribe_isException(self, callbacks):
        self.subscribe('isException', callbacks)

    def get_totalCacheloadCount(self, callbacks):
        self.get('totalCacheloadCount', callbacks)

    def subscribe_totalCacheloadCount(self, callbacks):
        self.subscribe('totalCacheloadCount', callbacks)

    def get_asVector(self, callbacks):
        self.get('asVector', callbacks)

    def subscribe_asVector(self, callbacks):
        self.subscribe('asVector', callbacks)

    def get_baseCV(self, callbacks):
        self.get('baseCV', callbacks)

    def subscribe_baseCV(self, callbacks):
        self.subscribe('baseCV', callbacks)

    def get_pyforaTupleToTupleOfComputedValues(self, callbacks):
        self.get('pyforaTupleToTupleOfComputedValues', callbacks)

    def subscribe_pyforaTupleToTupleOfComputedValues(self, callbacks):
        self.subscribe('pyforaTupleToTupleOfComputedValues', callbacks)

    def get_totalWorkerCount(self, callbacks):
        self.get('totalWorkerCount', callbacks)

    def subscribe_totalWorkerCount(self, callbacks):
        self.subscribe('totalWorkerCount', callbacks)

    def get_jsonValueRepresentation(self, callbacks):
        self.get('jsonValueRepresentation', callbacks)

    def subscribe_jsonValueRepresentation(self, callbacks):
        self.subscribe('jsonValueRepresentation', callbacks)

    def get_keyname(self, callbacks):
        self.get('keyname', callbacks)

    def subscribe_keyname(self, callbacks):
        self.subscribe('keyname', callbacks)

    def get_pyforaDictToAssignedVarsToComputedValues(self, callbacks):
        self.get('pyforaDictToAssignedVarsToComputedValues', callbacks)

    def subscribe_pyforaDictToAssignedVarsToComputedValues(self, callbacks):
        self.subscribe('pyforaDictToAssignedVarsToComputedValues', callbacks)

    def get_unfinishedDependentCodeLocationsAsJson(self, callbacks):
        self.get('unfinishedDependentCodeLocationsAsJson', callbacks)

    def subscribe_unfinishedDependentCodeLocationsAsJson(self, callbacks):
        self.subscribe('unfinishedDependentCodeLocationsAsJson', callbacks)


class TestCGLocation(WebObjectBase):
    def __init__(self, sessionState, inArgs=None):
        super(TestCGLocation, self).__init__(sessionState, inArgs)
        self.objectDefinition_.update({
            "type": "TestCGLocation",
        })

    def get_definition(self, callbacks):
        self.get('definition', callbacks)

    def subscribe_definition(self, callbacks):
        self.subscribe('definition', callbacks)

    def set_aValue(self, value, callbacks):
        self.set('aValue', value, callbacks)

    def get_aValue(self, callbacks):
        self.get('aValue', callbacks)

    def subscribe_aValue(self, callbacks):
        self.subscribe('aValue', callbacks)

    def testFunction(self, args, callbacks):
        self.invoke('testFunction', args, callbacks)

    def aFunctionExpectingCallback(self, args, callbacks):
        self.invoke('aFunctionExpectingCallback', args, callbacks)

    def set_bValueInSharedState(self, value, callbacks):
        self.set('bValueInSharedState', value, callbacks)

    def get_bValueInSharedState(self, callbacks):
        self.get('bValueInSharedState', callbacks)

    def subscribe_bValueInSharedState(self, callbacks):
        self.subscribe('bValueInSharedState', callbacks)

    def aFunction(self, args, callbacks):
        self.invoke('aFunction', args, callbacks)

    def get_testCgLocation(self, callbacks):
        self.get('testCgLocation', callbacks)

    def subscribe_testCgLocation(self, callbacks):
        self.subscribe('testCgLocation', callbacks)

    def get_depth(self, callbacks):
        self.get('depth', callbacks)

    def subscribe_depth(self, callbacks):
        self.subscribe('depth', callbacks)

    def set_aValueInSharedState(self, value, callbacks):
        self.set('aValueInSharedState', value, callbacks)

    def get_aValueInSharedState(self, callbacks):
        self.get('aValueInSharedState', callbacks)

    def subscribe_aValueInSharedState(self, callbacks):
        self.subscribe('aValueInSharedState', callbacks)

    def set_cValueInSharedState(self, value, callbacks):
        self.set('cValueInSharedState', value, callbacks)

    def get_cValueInSharedState(self, callbacks):
        self.get('cValueInSharedState', callbacks)

    def subscribe_cValueInSharedState(self, callbacks):
        self.subscribe('cValueInSharedState', callbacks)


class Test(WebObjectBase):
    def __init__(self, sessionState, inArgs=None):
        super(Test, self).__init__(sessionState, inArgs)
        self.objectDefinition_.update({
            "type": "Test",
        })

    def set_aValueThrowingASpecificException(self, value, callbacks):
        self.set('aValueThrowingASpecificException', value, callbacks)

    def get_aValueThrowingASpecificException(self, callbacks):
        self.get('aValueThrowingASpecificException', callbacks)

    def subscribe_aValueThrowingASpecificException(self, callbacks):
        self.subscribe('aValueThrowingASpecificException', callbacks)

    def set_aValueThrowingAnArbitraryException(self, value, callbacks):
        self.set('aValueThrowingAnArbitraryException', value, callbacks)

    def get_aValueThrowingAnArbitraryException(self, callbacks):
        self.get('aValueThrowingAnArbitraryException', callbacks)

    def subscribe_aValueThrowingAnArbitraryException(self, callbacks):
        self.subscribe('aValueThrowingAnArbitraryException', callbacks)

    def aFunctionNotReturningJson(self, args, callbacks):
        self.invoke('aFunctionNotReturningJson', args, callbacks)

    def set_mutableValue(self, value, callbacks):
        self.set('mutableValue', value, callbacks)

    def get_mutableValue(self, callbacks):
        self.get('mutableValue', callbacks)

    def subscribe_mutableValue(self, callbacks):
        self.subscribe('mutableValue', callbacks)

    def set_cValueInSharedState(self, value, callbacks):
        self.set('cValueInSharedState', value, callbacks)

    def get_cValueInSharedState(self, callbacks):
        self.get('cValueInSharedState', callbacks)

    def subscribe_cValueInSharedState(self, callbacks):
        self.subscribe('cValueInSharedState', callbacks)

    def aFunctionNotAcceptingAnyArguments(self, args, callbacks):
        self.invoke('aFunctionNotAcceptingAnyArguments', args, callbacks)

    def aFunctionThrowingASpecificException(self, args, callbacks):
        self.invoke('aFunctionThrowingASpecificException', args, callbacks)

    def get_aFloat(self, callbacks):
        self.get('aFloat', callbacks)

    def subscribe_aFloat(self, callbacks):
        self.subscribe('aFloat', callbacks)

    def aFunctionThrowingAnArbitraryException(self, args, callbacks):
        self.invoke('aFunctionThrowingAnArbitraryException', args, callbacks)

    def set_aValueInSharedState(self, value, callbacks):
        self.set('aValueInSharedState', value, callbacks)

    def get_aValueInSharedState(self, callbacks):
        self.get('aValueInSharedState', callbacks)

    def subscribe_aValueInSharedState(self, callbacks):
        self.subscribe('aValueInSharedState', callbacks)

    def set_bValueInSharedState(self, value, callbacks):
        self.set('bValueInSharedState', value, callbacks)

    def get_bValueInSharedState(self, callbacks):
        self.get('bValueInSharedState', callbacks)

    def subscribe_bValueInSharedState(self, callbacks):
        self.subscribe('bValueInSharedState', callbacks)

    def get_depth(self, callbacks):
        self.get('depth', callbacks)

    def subscribe_depth(self, callbacks):
        self.subscribe('depth', callbacks)

    def aFunction(self, args, callbacks):
        self.invoke('aFunction', args, callbacks)

    def get_aFieldNotReturningJson(self, callbacks):
        self.get('aFieldNotReturningJson', callbacks)

    def subscribe_aFieldNotReturningJson(self, callbacks):
        self.subscribe('aFieldNotReturningJson', callbacks)


class ComputedValue(WebObjectBase):
    def __init__(self, sessionState, inArgs=None):
        super(ComputedValue, self).__init__(sessionState, inArgs)
        self.objectDefinition_.update({
            "type": "ComputedValue",
        })

    def increaseRequestCount(self, args, callbacks):
        self.invoke('increaseRequestCount', args, callbacks)

    def get_submittedComputationId(self, callbacks):
        self.get('submittedComputationId', callbacks)

    def subscribe_submittedComputationId(self, callbacks):
        self.subscribe('submittedComputationId', callbacks)

    def writeToS3(self, args, callbacks):
        self.invoke('writeToS3', args, callbacks)

    def decreaseRequestCount(self, args, callbacks):
        self.invoke('decreaseRequestCount', args, callbacks)

    def get_stats(self, callbacks):
        self.get('stats', callbacks)

    def subscribe_stats(self, callbacks):
        self.subscribe('stats', callbacks)

    def get_isFinished(self, callbacks):
        self.get('isFinished', callbacks)

    def subscribe_isFinished(self, callbacks):
        self.subscribe('isFinished', callbacks)

    def cancel(self, args, callbacks):
        self.invoke('cancel', args, callbacks)

    def triggerCompilation(self, args, callbacks):
        self.invoke('triggerCompilation', args, callbacks)

    def requestComputationCheckpoint(self, args, callbacks):
        self.invoke('requestComputationCheckpoint', args, callbacks)

    def get_isException(self, callbacks):
        self.get('isException', callbacks)

    def subscribe_isException(self, callbacks):
        self.subscribe('isException', callbacks)

    def get_totalCacheloadCount(self, callbacks):
        self.get('totalCacheloadCount', callbacks)

    def subscribe_totalCacheloadCount(self, callbacks):
        self.subscribe('totalCacheloadCount', callbacks)

    def get_args(self, callbacks):
        self.get('args', callbacks)

    def subscribe_args(self, callbacks):
        self.subscribe('args', callbacks)

    def get_asVector(self, callbacks):
        self.get('asVector', callbacks)

    def subscribe_asVector(self, callbacks):
        self.subscribe('asVector', callbacks)

    def get_totalWorkerCount(self, callbacks):
        self.get('totalWorkerCount', callbacks)

    def subscribe_totalWorkerCount(self, callbacks):
        self.subscribe('totalWorkerCount', callbacks)

    def get_unfinishedDependentCodeLocationsAsJson(self, callbacks):
        self.get('unfinishedDependentCodeLocationsAsJson', callbacks)

    def subscribe_unfinishedDependentCodeLocationsAsJson(self, callbacks):
        self.subscribe('unfinishedDependentCodeLocationsAsJson', callbacks)


class PyforaCluster(WebObjectBase):
    def __init__(self, sessionState, inArgs=None):
        super(PyforaCluster, self).__init__(sessionState, inArgs)
        self.objectDefinition_.update({
            "type": "PyforaCluster",
        })

    def getClusterStatus(self, args, callbacks):
        self.invoke('getClusterStatus', args, callbacks)


class PyforaTupleElement(WebObjectBase):
    def __init__(self, sessionState, inArgs=None):
        super(PyforaTupleElement, self).__init__(sessionState, inArgs)
        self.objectDefinition_.update({
            "type": "PyforaTupleElement",
        })

    def increaseRequestCount(self, args, callbacks):
        self.invoke('increaseRequestCount', args, callbacks)

    def get_submittedComputationId(self, callbacks):
        self.get('submittedComputationId', callbacks)

    def subscribe_submittedComputationId(self, callbacks):
        self.subscribe('submittedComputationId', callbacks)

    def writeToS3(self, args, callbacks):
        self.invoke('writeToS3', args, callbacks)

    def decreaseRequestCount(self, args, callbacks):
        self.invoke('decreaseRequestCount', args, callbacks)

    def get_index(self, callbacks):
        self.get('index', callbacks)

    def subscribe_index(self, callbacks):
        self.subscribe('index', callbacks)

    def get_jsonStatusRepresentation(self, callbacks):
        self.get('jsonStatusRepresentation', callbacks)

    def subscribe_jsonStatusRepresentation(self, callbacks):
        self.subscribe('jsonStatusRepresentation', callbacks)

    def get_stats(self, callbacks):
        self.get('stats', callbacks)

    def subscribe_stats(self, callbacks):
        self.subscribe('stats', callbacks)

    def get_isFinished(self, callbacks):
        self.get('isFinished', callbacks)

    def subscribe_isFinished(self, callbacks):
        self.subscribe('isFinished', callbacks)

    def cancel(self, args, callbacks):
        self.invoke('cancel', args, callbacks)

    def triggerCompilation(self, args, callbacks):
        self.invoke('triggerCompilation', args, callbacks)

    def requestComputationCheckpoint(self, args, callbacks):
        self.invoke('requestComputationCheckpoint', args, callbacks)

    def get_isException(self, callbacks):
        self.get('isException', callbacks)

    def subscribe_isException(self, callbacks):
        self.subscribe('isException', callbacks)

    def get_totalCacheloadCount(self, callbacks):
        self.get('totalCacheloadCount', callbacks)

    def subscribe_totalCacheloadCount(self, callbacks):
        self.subscribe('totalCacheloadCount', callbacks)

    def get_asVector(self, callbacks):
        self.get('asVector', callbacks)

    def subscribe_asVector(self, callbacks):
        self.subscribe('asVector', callbacks)

    def get_baseCV(self, callbacks):
        self.get('baseCV', callbacks)

    def subscribe_baseCV(self, callbacks):
        self.subscribe('baseCV', callbacks)

    def get_pyforaTupleToTupleOfComputedValues(self, callbacks):
        self.get('pyforaTupleToTupleOfComputedValues', callbacks)

    def subscribe_pyforaTupleToTupleOfComputedValues(self, callbacks):
        self.subscribe('pyforaTupleToTupleOfComputedValues', callbacks)

    def get_totalWorkerCount(self, callbacks):
        self.get('totalWorkerCount', callbacks)

    def subscribe_totalWorkerCount(self, callbacks):
        self.subscribe('totalWorkerCount', callbacks)

    def get_jsonValueRepresentation(self, callbacks):
        self.get('jsonValueRepresentation', callbacks)

    def subscribe_jsonValueRepresentation(self, callbacks):
        self.subscribe('jsonValueRepresentation', callbacks)

    def get_pyforaDictToAssignedVarsToComputedValues(self, callbacks):
        self.get('pyforaDictToAssignedVarsToComputedValues', callbacks)

    def subscribe_pyforaDictToAssignedVarsToComputedValues(self, callbacks):
        self.subscribe('pyforaDictToAssignedVarsToComputedValues', callbacks)

    def get_unfinishedDependentCodeLocationsAsJson(self, callbacks):
        self.get('unfinishedDependentCodeLocationsAsJson', callbacks)

    def subscribe_unfinishedDependentCodeLocationsAsJson(self, callbacks):
        self.subscribe('unfinishedDependentCodeLocationsAsJson', callbacks)


class PyforaResultAsJson(WebObjectBase):
    def __init__(self, sessionState, inArgs=None):
        super(PyforaResultAsJson, self).__init__(sessionState, inArgs)
        self.objectDefinition_.update({
            "type": "PyforaResultAsJson",
        })

    def get_resultIsPopulated(self, callbacks):
        self.get('resultIsPopulated', callbacks)

    def subscribe_resultIsPopulated(self, callbacks):
        self.subscribe('resultIsPopulated', callbacks)

    def getResultAsJson(self, args, callbacks):
        self.invoke('getResultAsJson', args, callbacks)


class ComputedValueForMember(WebObjectBase):
    def __init__(self, sessionState, inArgs=None):
        super(ComputedValueForMember, self).__init__(sessionState, inArgs)
        self.objectDefinition_.update({
            "type": "ComputedValueForMember",
        })

    def increaseRequestCount(self, args, callbacks):
        self.invoke('increaseRequestCount', args, callbacks)

    def get_submittedComputationId(self, callbacks):
        self.get('submittedComputationId', callbacks)

    def subscribe_submittedComputationId(self, callbacks):
        self.subscribe('submittedComputationId', callbacks)

    def writeToS3(self, args, callbacks):
        self.invoke('writeToS3', args, callbacks)

    def decreaseRequestCount(self, args, callbacks):
        self.invoke('decreaseRequestCount', args, callbacks)

    def get_stats(self, callbacks):
        self.get('stats', callbacks)

    def subscribe_stats(self, callbacks):
        self.subscribe('stats', callbacks)

    def get_isFinished(self, callbacks):
        self.get('isFinished', callbacks)

    def subscribe_isFinished(self, callbacks):
        self.subscribe('isFinished', callbacks)

    def cancel(self, args, callbacks):
        self.invoke('cancel', args, callbacks)

    def triggerCompilation(self, args, callbacks):
        self.invoke('triggerCompilation', args, callbacks)

    def requestComputationCheckpoint(self, args, callbacks):
        self.invoke('requestComputationCheckpoint', args, callbacks)

    def get_isException(self, callbacks):
        self.get('isException', callbacks)

    def subscribe_isException(self, callbacks):
        self.subscribe('isException', callbacks)

    def get_totalCacheloadCount(self, callbacks):
        self.get('totalCacheloadCount', callbacks)

    def subscribe_totalCacheloadCount(self, callbacks):
        self.subscribe('totalCacheloadCount', callbacks)

    def get_asVector(self, callbacks):
        self.get('asVector', callbacks)

    def subscribe_asVector(self, callbacks):
        self.subscribe('asVector', callbacks)

    def get_totalWorkerCount(self, callbacks):
        self.get('totalWorkerCount', callbacks)

    def subscribe_totalWorkerCount(self, callbacks):
        self.subscribe('totalWorkerCount', callbacks)

    def get_unfinishedDependentCodeLocationsAsJson(self, callbacks):
        self.get('unfinishedDependentCodeLocationsAsJson', callbacks)

    def subscribe_unfinishedDependentCodeLocationsAsJson(self, callbacks):
        self.subscribe('unfinishedDependentCodeLocationsAsJson', callbacks)


class ComputedValueVectorSlice(WebObjectBase):
    def __init__(self, sessionState, inArgs=None):
        super(ComputedValueVectorSlice, self).__init__(sessionState, inArgs)
        self.objectDefinition_.update({
            "type": "ComputedValueVectorSlice",
        })

    def decreaseRequestCount(self, args, callbacks):
        self.invoke('decreaseRequestCount', args, callbacks)

    def increaseRequestCount(self, args, callbacks):
        self.invoke('increaseRequestCount', args, callbacks)

    def getSlice(self, args, callbacks):
        self.invoke('getSlice', args, callbacks)


class PyforaComputedValue(WebObjectBase):
    def __init__(self, sessionState, inArgs=None):
        super(PyforaComputedValue, self).__init__(sessionState, inArgs)
        self.objectDefinition_.update({
            "type": "PyforaComputedValue",
        })

    def increaseRequestCount(self, args, callbacks):
        self.invoke('increaseRequestCount', args, callbacks)

    def get_submittedComputationId(self, callbacks):
        self.get('submittedComputationId', callbacks)

    def subscribe_submittedComputationId(self, callbacks):
        self.subscribe('submittedComputationId', callbacks)

    def writeToS3(self, args, callbacks):
        self.invoke('writeToS3', args, callbacks)

    def decreaseRequestCount(self, args, callbacks):
        self.invoke('decreaseRequestCount', args, callbacks)

    def get_jsonStatusRepresentation(self, callbacks):
        self.get('jsonStatusRepresentation', callbacks)

    def subscribe_jsonStatusRepresentation(self, callbacks):
        self.subscribe('jsonStatusRepresentation', callbacks)

    def get_stats(self, callbacks):
        self.get('stats', callbacks)

    def subscribe_stats(self, callbacks):
        self.subscribe('stats', callbacks)

    def get_isFinished(self, callbacks):
        self.get('isFinished', callbacks)

    def subscribe_isFinished(self, callbacks):
        self.subscribe('isFinished', callbacks)

    def cancel(self, args, callbacks):
        self.invoke('cancel', args, callbacks)

    def triggerCompilation(self, args, callbacks):
        self.invoke('triggerCompilation', args, callbacks)

    def requestComputationCheckpoint(self, args, callbacks):
        self.invoke('requestComputationCheckpoint', args, callbacks)

    def get_isException(self, callbacks):
        self.get('isException', callbacks)

    def subscribe_isException(self, callbacks):
        self.subscribe('isException', callbacks)

    def get_totalCacheloadCount(self, callbacks):
        self.get('totalCacheloadCount', callbacks)

    def subscribe_totalCacheloadCount(self, callbacks):
        self.subscribe('totalCacheloadCount', callbacks)

    def get_asVector(self, callbacks):
        self.get('asVector', callbacks)

    def subscribe_asVector(self, callbacks):
        self.subscribe('asVector', callbacks)

    def get_pyforaTupleToTupleOfComputedValues(self, callbacks):
        self.get('pyforaTupleToTupleOfComputedValues', callbacks)

    def subscribe_pyforaTupleToTupleOfComputedValues(self, callbacks):
        self.subscribe('pyforaTupleToTupleOfComputedValues', callbacks)

    def get_totalWorkerCount(self, callbacks):
        self.get('totalWorkerCount', callbacks)

    def subscribe_totalWorkerCount(self, callbacks):
        self.subscribe('totalWorkerCount', callbacks)

    def get_jsonValueRepresentation(self, callbacks):
        self.get('jsonValueRepresentation', callbacks)

    def subscribe_jsonValueRepresentation(self, callbacks):
        self.subscribe('jsonValueRepresentation', callbacks)

    def get_argIds(self, callbacks):
        self.get('argIds', callbacks)

    def subscribe_argIds(self, callbacks):
        self.subscribe('argIds', callbacks)

    def get_pyforaDictToAssignedVarsToComputedValues(self, callbacks):
        self.get('pyforaDictToAssignedVarsToComputedValues', callbacks)

    def subscribe_pyforaDictToAssignedVarsToComputedValues(self, callbacks):
        self.subscribe('pyforaDictToAssignedVarsToComputedValues', callbacks)

    def get_unfinishedDependentCodeLocationsAsJson(self, callbacks):
        self.get('unfinishedDependentCodeLocationsAsJson', callbacks)

    def subscribe_unfinishedDependentCodeLocationsAsJson(self, callbacks):
        self.subscribe('unfinishedDependentCodeLocationsAsJson', callbacks)


class PersistentCacheIndex(WebObjectBase):
    def __init__(self, sessionState, inArgs=None):
        super(PersistentCacheIndex, self).__init__(sessionState, inArgs)
        self.objectDefinition_.update({
            "type": "PersistentCacheIndex",
        })

    def setMaxBytesInCache(self, args, callbacks):
        self.invoke('setMaxBytesInCache', args, callbacks)

    def triggerGarbageCollectionImmediately(self, args, callbacks):
        self.invoke('triggerGarbageCollectionImmediately', args, callbacks)

    def get_persistentCacheState(self, callbacks):
        self.get('persistentCacheState', callbacks)

    def subscribe_persistentCacheState(self, callbacks):
        self.subscribe('persistentCacheState', callbacks)

    def get_maxBytesInCache(self, callbacks):
        self.get('maxBytesInCache', callbacks)

    def subscribe_maxBytesInCache(self, callbacks):
        self.subscribe('maxBytesInCache', callbacks)


classes = {
    'WriteToS3Task': WriteToS3Task,
    'ComputedValueVectorFromComputedValue': ComputedValueVectorFromComputedValue,
    'ViewOfEntireCumulusSystem': ViewOfEntireCumulusSystem,
    'PyforaObjectConverter': PyforaObjectConverter,
    'PyforaDictionaryElement': PyforaDictionaryElement,
    'TestCGLocation': TestCGLocation,
    'Test': Test,
    'ComputedValue': ComputedValue,
    'PyforaCluster': PyforaCluster,
    'PyforaTupleElement': PyforaTupleElement,
    'PyforaResultAsJson': PyforaResultAsJson,
    'ComputedValueForMember': ComputedValueForMember,
    'ComputedValueVectorSlice': ComputedValueVectorSlice,
    'PyforaComputedValue': PyforaComputedValue,
    'PersistentCacheIndex': PersistentCacheIndex,
    }

