/***************************************************************************
    Copyright 2015 Ufora Inc.

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
****************************************************************************/

"""The singleton object representing python's 'dict' type."""
object {
    __bases__: PyTuple((Object,));
    
    __str__: PyBoundMethod(
        self,
        fun(@unnamed_args:(self), *args) {
            PyString("<type 'dict'>")
        },
        `__str__);

    __call__: PyBoundMethod(
            self, fun
            (@unnamed_args:(self, PyDict(...) other), *args) { other }
            (@unnamed_args:(self, other), *args) {
                let res = {:}
                let counter = 0;

                for val in other {
                    let it = 
                        try {
                            val`(`Iter)
                            }
                        catch (...) {
                            throw ValueError(
                                PyString(
                                    "dictionary update value %s is not iterable"
                                    .format(counter)
                                    )
                                );
                            }
                    
                    let tooFewValuesError = 
                        ValueError(
                            PyString(
                                "dictionary update value %s has fewer than 2 elements"
                                .format(counter)
                                )
                            );

                    if (it is nothing)
                        throw tooFewValuesError;

                    let k = pull it;
                    
                    if (it is nothing)
                        throw tooFewValuesError;

                    let v = pull it;                    

                    if (it is not nothing)
                        throw ValueError(
                            PyString(
                                "dictionary update value %s has more than 2 elements"
                                .format(counter)
                                )
                            );

                    res = res.addPair(k,v)
                    counter = counter + 1;
                    }

                PyDict(res)
                },
            `__call__
            );

    mixin Type;
    };
