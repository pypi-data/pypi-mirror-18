/***************************************************************************
    Copyright 2015 Ufora Inc.

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
****************************************************************************/

"""The singleton object representing python's 'issubclass' builtin function"""
object {
    __str__: PyBoundMethod(
        self,
        fun(@unnamed_args:(self), *args) {
            PyString("<built-in function 'issubclass'>")
            },
        `__str__);

    __call__: PyBoundMethod(
        self, 
        fun
            (@unnamed_args:(self, typeToCheck, possibleTypes), *args) {
                match (possibleTypes) with 
                    (PyTuple(...)) {
                        //if it's a tuple, we check each value in turn. Note that we do this
                        //recursively with pattern matching - this will preserve type information
                        //in the current implementation of the ufora compiler.
                        match (possibleTypes.@m) with 
                            (()) { PyBool(false) }
                            ((x)) { IsSubclass(typeToCheck, x) }
                            ((x, *tail)) { 
                                PyBool(IsSubclass(typeToCheck, x).@m or 
                                       IsSubclass(typeToCheck, PyTuple(tail)).@m)
                                }
                        }
                    (...) {
                        if (typeToCheck is possibleTypes)
                            return PyBool(true)

                        let bases = nothing;
                        try {
                            bases = typeToCheck.__bases__.@m
                            }
                        catch (AttributeError(...)) {
                            throw TypeError(PyString("issubclass() arg 1 must be a class"))
                            }

                        while (bases is not ())
                            match (bases) with ((x, *tail)) {
                                if (Bool(IsSubclass(x, possibleTypes)))
                                    return PyBool(true)
                                bases = tail
                                }

                        return PyBool(false)
                        }
                },
            `__call__
            );

    mixin PyObjectBase;
    };
