/***************************************************************************
   Copyright 2015 Ufora Inc.

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
****************************************************************************/
class {
    member @m;

    ...(`Member, `@m) { @m };

    __str__: PyBoundMethod(
        self,
        fun(@unnamed_args:(self), *args) {
            let tr = match (self.@m) with 
                (true) { "True" }
                (false) { "False" }
                ;
            PyString(tr)
            },
        `__str__);

    __class__: BoolType;

    __gt__: PyBoundMethod(
        self, 
        fun(@unnamed_args:(self, PyBool(other)), *args) {
            if (self.@m == true and other.@m == false)
                return PyBool(true)
            return PyBool(false)
            }
        (@unnamed_args:(self, PyInt(other) or PyFloat(other)), *args) {
            if (other.@m >= 1)
                return PyBool(false)
            if (self.@m == true)
                return PyBool(other.@m < 1)
            else 
                return PyBool(other.@m < 0)
            }
        (@unnamed_args:(self, _), *args) {
            PyBool(false)
            }, 
        `__gt__);

    __eq__: PyBoundMethod(
        self,
        fun(@unnamed_args:(self, PyInt(other) or PyFloat(other)), *args) {
            if (self.@m) 
                return PyBool(other.@m == 1)
            else
                return PyBool(other.@m == 0)
            }
        (@unnamed_args:(self, PyBool(other)), *args) {
            PyBool(other.@m == self.@m)
            }
        (@unnamed_args:(self, _), *args) {
            PyBool(false)
            },
        `__eq__);

    __abs__: PyBoundMethod(
        self,
        fun(@unnamed_args:(self), *args) {
            if (self.@m)
                return PyInt(1)
            else
                return PyInt(0)
            },
        `__abs__);

    __neg__: PyBoundMethod(
        self,
        fun(@unnamed_args:(self), *args) {
            if (self.@m)
                return PyInt(-1)
            else
                return PyInt(0)
            },
        `__neg__);

    __pos__: PyBoundMethod(
        self,
        fun(@unnamed_args:(self), *args) {
            return PyInt(Int64(self.@m))
        },
        `__pos__);

    __invert__: PyBoundMethod(
        self,
        fun(@unnamed_args:(self), *args) {
            return PyInt(-1 - Int64(self.@m))
            },
        `__invert__);

    __lt__: PyBoundMethod(
        self,
        fun(@unnamed_args:(self, PyBool(other)), *args) {
            if (other.@m == true and self.@m == false)
                return PyBool(true)
            return PyBool(false)
            }
        (@unnamed_args:(self, PyInt(other) or PyFloat(other)), *args) {
            if (other.@m > 1)
                return PyBool(true)
            if (self.@m == true)
                return PyBool(other.@m > 1)
            else 
                return PyBool(other.@m > 0)
            }
        (@unnamed_args:(self, _), *args) {
            PyBool(true)
            },
        `__lt__);

    __mul__: PyBoundMethod(
        self,
        fun(@unnamed_args:(self, other), *args) {
            if (self.@m == true)
                other
            else
                PyInt(0)
            },
        `__mul__);

    __nonzero__: PyBoundMethod(
        self,
        fun(@unnamed_args:(self), *args) {
            self
            },
        `__nonzero__);

    __int__: PyBoundMethod(
        self,
        fun(@unnamed_args:(self), *args) {
            PyInt(Int64(@m))
            },
        `__int__);

    __float__: PyBoundMethod(
        self,
        fun(@unnamed_args:(self), *args) {
            PyFloat(Float64(@m))
            },
        `__float__);

    convert (Bool _) { return @m; };

    operator match(PyBool _) { (self,) };

    mixin PyObjectBase;
    };

