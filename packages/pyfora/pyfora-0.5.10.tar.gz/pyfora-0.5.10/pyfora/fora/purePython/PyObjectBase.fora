/***************************************************************************
   Copyright 2015 Ufora Inc.

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
****************************************************************************/
/****************
PyObjectBase

This instance is a mixin that defines the basic properties of all Pyfora python objects.

We use it to provide common hooks into the underlying FORA that all instances will implement.
****************/

object {
    __is_pyfora__: PyBool(true);

    __pyfora_builtins__: PyforaBuiltins;

    __pyfora_concat__: PyBoundMethod(
        self,
        fun(@unnamed_args:(self, other), *args) {
            let asList = [other];
            self + asList
            }, `__pyfora_concat__);

    __str__: PyBoundMethod(
        self,
        fun(@unnamed_args:(self), *args) {
            PyString("<object>")
            }, `__str__);

    __pyfora_unconvertible_code__: fun() {
            throw InvalidPyforaOperation(PyString("Pyfora can't convert this code. See http://docs.pyfora.com/en/latest/tutorials/intro.html#pure-python"))
            };

    __pyfora_print__: fun(args, hasNewline) {
            cached`(#Print(" ".joinArgs(*args..apply(fun(a) { a.__str__().@m })) + (if (hasNewline) "\n" else "")))
            return PyNone(nothing)
            };

    __pyfora_invalid_variable_access__: fun
            (`PyforaInvalidVariable, v) {
                throw InvalidPyforaOperation(
                    PyString(
                        "local variable '" + String(v) +
                        "' is invalid (probably it was overwritten by a list comprehension)"
                        )
                    )
                }
            (`PyforaUninitializedVariable, v) {
                throw UnboundLocalError(
                    PyString("local variable '" + String(v)[1,] + "' referenced before assignment")
                    )
                }
            (`PyforaUnconvertibleValue, v) {
                throw UnconvertibleValueError(
                    PyString("Pyfora didn't know how to convert " + String(v).replace("_", ".")[1,])
                    )
                }

            ;

    __pyfora_generator__: PyBoundMethod(
        self,
        fun(@unnamed_args:(self), *args) {
            return IteratorAsGenerator(self.__itFun());
            },
        `__pyfora_generator__);

    operator match((#TupleAssign, expectedSize)) {
        let resTuple = ()

        for val in self {
            resTuple = resTuple + (val,)
            if (size(resTuple) > expectedSize)
                throw ValueError(PyString("Too many values to unpack"))
            }

        if (size(resTuple) < expectedSize)
            throw ValueError(PyString("need more than " + String(size(resTuple)) + " values to unpack"))

        return resTuple
        };

    operator()(*args) {
        __without_stacktrace_augmentation { 
            let callOp = nothing;

            try {
                callOp = self.__call__
                }
            catch (self.__pyfora_builtins__.Exception.InvalidMemberAccess(...) or AttributeError(...))
                {
                throw TypeError(PyString("object " + String(self) +
                                         " is not callable"))
                }
            (self.__pyfora_builtins__.Exception.InvalidCall(...))
                {
                throw TypeError(PyString("cannot call object " + String(self) +
                                         " with arguments as given"))
                }

            callOp(*args)
            }
        };

    convert (Bool _) {
        let nz =
            try {
                self.__nonzero__
                }
            catch (...)
                {
                return true
                }
        return nz()`(`Convert, Bool);
        };

    operator iterator() {
        self.__itFun();
        };

    __itFun: fun() {
        let itFun =
            try {
                self.__iter__
                }
            catch (AttributeError(...) e) {
                let getitem_fun =
                    try {
                        self.__getitem__
                        }
                    catch (AttributeError(...) e) {
                        throw TypeError(PyString("object is not iterable."))
                        }
                    
                let ix = 0;
                while (true) {
                    try {
                        yield getitem_fun(
                            @unnamed_args:(PyInt(ix))
                            )
                        ix = ix + 1
                        }
                    catch (IndexError(...) e) {
                        break
                        }
                    (IndexError) {
                        break
                        }
                    }
                }

        return itFun();
        };

    __eq__: PyBoundMethod(
        self,
        fun(@unnamed_args:(self, other), *args) {
            PyBool(self is other)
            },
        `__eq__);

    left operator!() {
        return PyBool(not Bool(self))
        };

    left operator-() {
        self.__neg__()
        };

    left operator+() {
        self.__pos__()
        };

    left operator~() {
        self.__invert__()
        };

    operator==(other) {
        self.__eq__(other)
        };

    operator!=(other) {
        return self.__ne__(other)
        };

    operator+(other) {
        self.__add__(other)
        };

    operator-(other) {
        self.__sub__(other)
        };

    operator*(other) {
        self.__mul__(other)
        };

    operator/(other) {
        self.__div__(other)
        };

    operator<(other) {
        self.__lt__(other)
        };

    operator>(other) {
        self.__gt__(other)
        };

    operator**(other) {
        self.__pow__(other)
        };

    operator^(other) {
        self.__xor__(other)
        };

    operator%(other) {
        self.__mod__(other)
        };

    __ge__: PyBoundMethod(
        self,
        fun(@unnamed_args:(self, other), *args) {
            if (Bool(self.__eq__(other))) {
                return PyBool(true)
                }
            return self.__gt__(other)
            },
        `__ge__);

    operator>=(other) {
        self.__ge__(other)
        };

    operator<=(other) {
        self.__le__(other)
        };

    __le__: PyBoundMethod(
        self,
        fun(@unnamed_args: (self, other), *args) {
            if (Bool(self.__eq__(other))) {
                return PyBool(true)
                }
            return self.__lt__(other)
            },
        `__le__);

    ...(`Member, x) {
        throw AttributeError(PyString("object " + String(self) + " has no attribute " + String(x)))
        };
    };

