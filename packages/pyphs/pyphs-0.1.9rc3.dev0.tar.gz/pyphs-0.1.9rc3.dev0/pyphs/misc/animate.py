# -*- coding: utf-8 -*-
"""
Created on Wed Mar 23 23:55:57 2016

@author: Falaize
"""
    
    
def singletraj(trajx, trajy, label='trajectory', filename='traj_movie',\
            xlim=(-1. ,1.), ylim=(-1., 1.), durout=None, bitrate=1000,\
            styles=None, xlabel=None, ylabel=None, title=None,\
            fontsize=None, legend=False, \
            legendfontsize=None, linewidth=2, figsize=( 6., 6.), axedef=None, \
            filelabel=None, maintitle=None, loc=1, log='', linestyles=None,\
            nbinsx=4, nbinsy=4, minor=True, markersize=6, markeredgewidth=0.5):
    
    if styles is None:
        styles = ['.k', ':b', 'or']
    if axedef is None:
        axedef = [.15, .15, .75, .75]
    if linestyles is None:
        linestyles = ['-b','--r',':g','-.m']
    import os
    os.environ['PATH'] += ':/usr/local/bin'

    import matplotlib
    matplotlib.use("Agg")
    import matplotlib.animation as manimation    

    FFMpegWriter = manimation.FFMpegFileWriter
    metadata = dict(title=label, artist='Matplotlib',
            comment='Generated by pypHs python module.')

    nt = len(trajx)
    fps = 24 if durout is None else nt/float(durout)
    writer = FFMpegWriter(fps=fps, metadata=metadata, bitrate=bitrate)
    
    from matplotlib import pyplot as plt
    plt.close('all')
    plt.ion()
    fig = plt.figure(figsize=figsize)

    if fontsize is None: fontsize = int(4*figsize[0])
    if legendfontsize is None: legendfontsize = int(0.75*fontsize)

    from utils.plots import latex_preamble
    latex_preamble()

    from matplotlib.pyplot import rc
    from utils.plots import Globalfont
    rc('font', size=fontsize, **Globalfont())

    from matplotlib.pyplot import axes
    ax = axes(axedef[:4])

    plt.xlim(xlim)
    plt.ylim(ylim)
    
    ticks_properties = {'linewidth':linewidth/2.,
                        'nbinsx':nbinsx,
                        'nbinsy':nbinsy,
                        'islog':log,
                        'minor':minor,
                        'ticksfontsize':legendfontsize}
    from utils.plots import setticks
    setticks(ax, ticks_properties)
    
    label_init = r'$t_0$'
    label_traj = r'$t_0 \leq t \leq t_f$'
    label_end = r'$t_f$'
    init, = plt.plot([], [], styles[0], label=label_init, linewidth=linewidth, markeredgewidth=markeredgewidth,\
        markersize=markersize)
    traj, = plt.plot([], [], styles[1], label=label_traj, linewidth=linewidth, markeredgewidth=markeredgewidth,\
        markersize=markersize)
    point, = plt.plot([], [], styles[2], label=label_end, linewidth=linewidth, markeredgewidth=markeredgewidth,\
        markersize=markersize)
    
    xinit = trajx[0]
    yinit = trajy[0]

    plt.grid('on')
    
    i = 0

    with writer.saving(fig, filename+'.mp4', 100):
        for ex, ey in zip(trajx, trajy):            
            traj.set_data(trajx[:i+1], trajy[:i+1])
            init.set_data(xinit, yinit)
            point.set_data(ex, ey)
            if not xlabel is None: plt.xlabel(xlabel)
            if not ylabel is None: plt.ylabel(ylabel)
            if not title is None: plt.title(title)
            if legend:
                plt.legend(loc=1, fontsize=legendfontsize)
            writer.grab_frame()
            i += 1
        
def multitraj(alltrajx, alltrajy, label='trajectory', filename='traj_movie',\
            xlim=(-1. ,1.), ylim=(-1., 1.), durout=None, bitrate=1000,\
            styles=None, xlabel=None, ylabel=None, title=None, \
            fontsize=None, legend=False, \
            legendfontsize=None, linewidth=2, figsize=( 6., 6.), axedef=None,\
            maintitle=None, loc=1, log='', linestyles=None,\
            nbinsx=4, nbinsy=4, minor=True, markersize=6, markeredgewidth=0.5):
    if styles is None:
        styles = ['.k', ':b', 'or']
    if axedef is None:
        axedef = [.15, .15, .75, .75]
    if linestyles is None:
        linestyles = ['-b','--r',':g','-.m']
    import os
    os.environ['PATH'] += ':/usr/local/bin'
    import matplotlib
    matplotlib.use("Agg")

    import matplotlib.animation as manimation    
    FFMpegWriter = manimation.FFMpegFileWriter
            
    ntraj = len(alltrajx)
    assert ntraj == len(alltrajy)
    nt = len(alltrajx[0])
    
    fps = 24 if durout is None else nt/float(durout)
    metadata = dict(title=label, artist='Matplotlib',
            comment='Generated by pypHs python module.')
            
    writer = FFMpegWriter(fps=fps, metadata=metadata, bitrate=bitrate)
    from matplotlib import pyplot as plt
    plt.close('all')
    plt.ion()
    fig = plt.figure(figsize=figsize)

    if fontsize is None: fontsize = int(4*figsize[0])
    if legendfontsize is None: legendfontsize = int(0.75*fontsize)

    from utils.plots import latex_preamble
    latex_preamble()

    from matplotlib.pyplot import rc
    from utils.plots import Globalfont
    rc('font', size=fontsize, **Globalfont())

    from matplotlib.pyplot import axes
    ax = axes(axedef[:4])

    plt.xlim(xlim)
    plt.ylim(ylim)
    
    ticks_properties = {'linewidth':linewidth/2.,
                        'nbinsx':nbinsx,
                        'nbinsy':nbinsy,
                        'islog':log,
                        'minor':minor,
                        'ticksfontsize':legendfontsize}
    from utils.plots import setticks
    setticks(ax, ticks_properties)
        
    all_init = []
    all_point = []
    all_traj = []
    for i in range(ntraj):
        if i == 0:
            label_init = r'$\mathbf{x}(0)$'
            label_traj = r'$\mathbf{x}(t\leq t_f])$'
            label_end = r'$\mathbf{x}(t_f)$'
        else:
            label_init = ''
            label_traj = ''
            label_end = ''            
        all_init.append(plt.plot([], [], styles[0], label=label_init, linewidth=linewidth, markeredgewidth=markeredgewidth,\
        markersize=markersize)[0])
        all_traj.append(plt.plot([], [], styles[1], label=label_traj, linewidth=linewidth, markeredgewidth=markeredgewidth,\
        markersize=markersize)[0])
        all_point.append(plt.plot([], [], styles[2], label=label_end, linewidth=linewidth, markeredgewidth=markeredgewidth,\
        markersize=markersize)[0])
    plt.grid('on')
    
    i = 0
    with writer.saving(fig, filename+'.mp4', 100):
        import time
        for i in range(nt):
            for n in range(ntraj):
                all_traj[n].set_data(alltrajx[n][:i+1], alltrajy[n][:i+1])
            for n in range(ntraj):
                all_init[n].set_data(alltrajx[n][0], alltrajy[n][0])
            if not xlabel is None: plt.xlabel(xlabel)
            if not ylabel is None: plt.ylabel(ylabel)
            if not title is None: plt.title(title)
            time.sleep(1e-1)
            for n in range(ntraj):
                all_point[n].set_data(alltrajx[n][i], alltrajy[n][i])
            if legend:
                plt.legend(loc=1, fontsize=legendfontsize)
            writer.grab_frame()
            i += 1
    from matplotlib.pyplot import savefig
    savefig(filename + '.png')

#%% Test

if __name__ is '__main__':
    for R in [0, 0.1, 1., 10.]:
        import numpy as np
    
        M = np.matrix([[-R, -1.],[1., 0.]])
        nx = 2
        norm_M = np.sqrt(sum([sum([M[i,j]**2 for i in range(nx)]) for j in range(nx)]))
        te = 1./2./norm_M
        Miter = np.eye(2) + np.linalg.inv(np.matrix(np.eye(2))/te - M/2.) * M
        
        x0, y0 = 0., 0.
        rboule = 1.
        Nparticules = 10
        x = np.linspace(0, rboule, Nparticules)
        y = [0,]*Nparticules
        rotation_mat = lambda angle : np.matrix([[np.cos(angle), -np.sin(angle)],[np.sin(angle), np.cos(angle)]])
        
        points = [rotation_mat(np.random.uniform(0, 2*np.pi))*np.matrix([[ex],[ey]]) for (ex, ey) in zip(x, y)]
        x, y = [ep[0,0]+x0 for ep in points], [ep[1,0]+y0 for ep in points]
        vin = [np.matrix([[elx], [ely]]) for (elx, ely) in zip(x,y)]
        
        nt = 200
        allvout = []
        for n in range(nt):
            vout = [Miter*elvin for elvin in vin]
            allvout.append(vout)
            vin = vout
            
                
        movprop = {'label':'trajectory'+str(R),
                   'filename':'traj_movie_R'+str(R), 
                   'xlim':(-1. ,1.),
                   'ylim':(-1., 1.),
                   'durout':5., 
                   'bitrate':1000}
                   
        alltrajx = [[el[n][0,0] for el in allvout]for n in range(Nparticules)] 
        alltrajy = [[el[n][1,0] for el in allvout]for n in range(Nparticules)] 
        
        multitraj(alltrajx, alltrajy, **movprop)

#%% Plot 3D


#def Gen_RandLine(length, dims=2) :
#    """
#    Create a line using a random walk algorithm
#
#    length is the number of points for the line.
#    dims is the number of dimensions the line has.
#    """
#    import numpy as np
#    lineData = np.empty((dims, length))
#    lineData[:, 0] = np.random.rand(dims)
#    for index in range(1, length) :
#        # scaling the random numbers by 0.1 so
#        # movement is small compared to position.
#        # subtraction by 0.5 is to change the range to [-0.5, 0.5]
#        # to allow a line to move backwards.
#        step = ((np.random.rand(dims) - 0.5) * 0.1)
#        lineData[:, index] = lineData[:, index-1] + step
#
#    return lineData
#
#def update_lines(num, dataLines, lines) :
#    for line, data in zip(lines, dataLines) :
#        # NOTE: there is no .set_data() for 3 dim data...
#        line.set_data(data[0:2, :num])
#        line.set_3d_properties(data[2,:num])
#    return lines
#
#import matplotlib.pyplot as plt
#import mpl_toolkits.mplot3d.axes3d as p3
#import matplotlib.animation as animation
#
## Attaching 3D axis to the figure
#fig = plt.figure()
#ax = p3.Axes3D(fig)
#
## Fifty lines of random 3-D lines
#data = [Gen_RandLine(25, 3) for index in range(50)]
#
## Creating fifty line objects.
## NOTE: Can't pass empty arrays into 3d version of plot()
#lines = [ax.plot(dat[0, 0:1], dat[1, 0:1], dat[2, 0:1])[0] for dat in data]
#
## Setting the axes properties
#ax.set_xlim3d([0.0, 1.0])
#ax.set_xlabel('X')
#
#ax.set_ylim3d([0.0, 1.0])
#ax.set_ylabel('Y')
#
#ax.set_zlim3d([0.0, 1.0])
#ax.set_zlabel('Z')
#
#ax.set_title('3D Test')
#
## Creating the Animation object
#line_ani = animation.FuncAnimation(fig, update_lines, 25, fargs=(data, lines),
#                              interval=50, blit=False)
#
#plt.show()