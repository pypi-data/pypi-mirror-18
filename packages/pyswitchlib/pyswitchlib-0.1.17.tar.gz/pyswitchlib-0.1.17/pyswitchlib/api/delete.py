def acl_mirror_source_delete(self, source=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		SLXOS: 16r.1.00b    

	**This Instance Keyword Arg Tuple**:
		:param source: kwarg tuple.
		:type source: (src_interface_type, src_interface_name, destination, dst_interface_type, dst_interface_name).

		:param src_interface_type: tuple arg.
		:type src_interface_type: (unicode)
		
		.. note::
			* enum - [u'ethernet']

		:param src_interface_name: tuple arg.
		:type src_interface_name: (unicode)
		
		.. note::
			* pattern - ((([0-9]|1[0-6])/([1-9]|[1-9][0-9])(:[1-4])?)|([1-9]|[1-9][0-9]|[1-9][0-9]{2}|[1-5][0-9]{3}|6[0-1][0-4]{2}))

		:param destination: tuple arg.
		:type destination: (unicode)
		
		.. note::
			* enum - [u'destination']

		:param dst_interface_type: tuple arg.
		:type dst_interface_type: (unicode)
		
		.. note::
			* enum - [u'ethernet', u'port-channel']

		:param dst_interface_name: tuple arg.
		:type dst_interface_name: (unicode)
		
		.. note::
			* pattern - ((([0-9]|1[0-6])/([1-9]|[1-9][0-9])(:[1-4])?)|([1-9]|[1-9][0-9]|[1-9][0-9]{2}|[1-5][0-9]{3}|6[0-1][0-4]{2}))

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = []
    bindings_list = [('pybind.slxos.v16r_1_00b.acl_mirror.source', 'pybind.slxos.v16r_1_00b.brocade_ip_access_list', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = []
    bindings_keyval = {'kwargs_key_name': u'source', 'keyval': 'src_interface_type, src_interface_name, destination, dst_interface_type, dst_interface_name', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, source=source)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def acl_state_vxlan_acl_delete(self, vxlan_acl=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		SLXOS: 16r.1.00b    

	**This Instance Keyword Arg Tuple**:
		:param vxlan_acl: kwarg tuple.
		:type vxlan_acl: (overlay_acl_tr_name).

		:param overlay_acl_tr_name: tuple arg.
		:type overlay_acl_tr_name: (unicode)

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = []
    bindings_list = [('pybind.slxos.v16r_1_00b.acl_state.vxlan_acl', 'pybind.slxos.v16r_1_00b.brocade_ssm_operational', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = []
    bindings_keyval = {'kwargs_key_name': u'vxlan_acl', 'keyval': 'overlay_acl_tr_name', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, vxlan_acl=vxlan_acl)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def acl_state_vxlan_acl_extended_data_delete(self, vxlan_acl=None, extended_data=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		SLXOS: 16r.1.00b    

	**Parent Instance Keyword Arg Tuple(s)**:
		:param vxlan_acl: kwarg tuple.
		:type vxlan_acl: (overlay_acl_tr_name).

		:param overlay_acl_tr_name: tuple arg.
		:type overlay_acl_tr_name: (unicode)

	**This Instance Keyword Arg Tuple**:
		:param extended_data: kwarg tuple.
		:type extended_data: (acl_name, seq_num).

		:param acl_name: tuple arg.
		:type acl_name: (unicode)

		:param seq_num: tuple arg.
		:type seq_num: (long)
		
		.. note::
			* range - ['0..4294967295']

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = [('pybind.slxos.v16r_1_00b.acl_state.vxlan_acl', u'vxlan_acl')]
    bindings_list = [('pybind.slxos.v16r_1_00b.acl_state.vxlan_acl.extended_data', 'pybind.slxos.v16r_1_00b.brocade_ssm_operational', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'overlay_acl_tr_name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'extended_data', 'keyval': 'acl_name, seq_num', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, vxlan_acl=vxlan_acl, extended_data=extended_data)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def adj_neighbor_entries_state_adj_neighbor_delete(self, adj_neighbor=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		SLXOS: 16r.1.00b    

	**This Instance Keyword Arg Tuple**:
		:param adj_neighbor: kwarg tuple.
		:type adj_neighbor: (neighbor_id).

		:param neighbor_id: tuple arg.
		:type neighbor_id: (unicode)

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = []
    bindings_list = [('pybind.slxos.v16r_1_00b.adj_neighbor_entries_state.adj_neighbor', 'pybind.slxos.v16r_1_00b.brocade_isis_operational', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = []
    bindings_keyval = {'kwargs_key_name': u'adj_neighbor', 'keyval': 'neighbor_id', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, adj_neighbor=adj_neighbor)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def adj_neighbor_entries_state_adj_neighbor_adj_area_delete(self, adj_neighbor=None, adj_area=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		SLXOS: 16r.1.00b    

	**Parent Instance Keyword Arg Tuple(s)**:
		:param adj_neighbor: kwarg tuple.
		:type adj_neighbor: (neighbor_id).

		:param neighbor_id: tuple arg.
		:type neighbor_id: (unicode)

	**This Instance Keyword Arg Tuple**:
		:param adj_area: kwarg tuple.
		:type adj_area: (adj_asi_area_name).

		:param adj_asi_area_name: tuple arg.
		:type adj_asi_area_name: (unicode)

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = [('pybind.slxos.v16r_1_00b.adj_neighbor_entries_state.adj_neighbor', u'adj_neighbor')]
    bindings_list = [('pybind.slxos.v16r_1_00b.adj_neighbor_entries_state.adj_neighbor.adj_area', 'pybind.slxos.v16r_1_00b.brocade_isis_operational', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'neighbor_id', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'adj_area', 'keyval': 'adj_asi_area_name', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, adj_neighbor=adj_neighbor, adj_area=adj_area)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def alias_config_alias_delete(self, alias=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		NOS: 6.0.2b, 7.0.1a, 7.1.0
		SLXOS: 16r.1.00b    

	**This Instance Keyword Arg Tuple**:
		:param alias: kwarg tuple.
		:type alias: (name).

		:param name: tuple arg.
		:type name: (unicode)
		
		.. note::
			* length - [u'1..255']

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = []
    bindings_list = [('pybind.nos.v6_0_2b.alias_config.alias', 'pybind.nos.v6_0_2b.brocade_aaa', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.alias_config.alias', 'pybind.nos.v7_0_1a.brocade_aaa', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.alias_config.alias', 'pybind.nos.v7_1_0.brocade_aaa', 'pybind.nos.v7_1_0'), ('pybind.slxos.v16r_1_00b.alias_config.alias', 'pybind.slxos.v16r_1_00b.brocade_aaa', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = []
    bindings_keyval = {'kwargs_key_name': u'alias', 'keyval': 'name', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, alias=alias)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def alias_config_user_delete(self, user=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		NOS: 6.0.2b, 7.0.1a, 7.1.0
		SLXOS: 16r.1.00b    

	**This Instance Keyword Arg Tuple**:
		:param user: kwarg tuple.
		:type user: (name).

		:param name: tuple arg.
		:type name: (unicode)
		
		.. note::
			* length - [u'1..40']

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = []
    bindings_list = [('pybind.nos.v6_0_2b.alias_config.user', 'pybind.nos.v6_0_2b.brocade_aaa', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.alias_config.user', 'pybind.nos.v7_0_1a.brocade_aaa', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.alias_config.user', 'pybind.nos.v7_1_0.brocade_aaa', 'pybind.nos.v7_1_0'), ('pybind.slxos.v16r_1_00b.alias_config.user', 'pybind.slxos.v16r_1_00b.brocade_aaa', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = []
    bindings_keyval = {'kwargs_key_name': u'user', 'keyval': 'name', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, user=user)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def alias_config_user_alias_delete(self, user=None, alias=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		NOS: 6.0.2b, 7.0.1a, 7.1.0
		SLXOS: 16r.1.00b    

	**Parent Instance Keyword Arg Tuple(s)**:
		:param user: kwarg tuple.
		:type user: (name).

		:param name: tuple arg.
		:type name: (unicode)
		
		.. note::
			* length - [u'1..40']

	**This Instance Keyword Arg Tuple**:
		:param alias: kwarg tuple.
		:type alias: (name).

		:param name: tuple arg.
		:type name: (unicode)
		
		.. note::
			* length - [u'1..255']

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = [('pybind.slxos.v16r_1_00b.alias_config.user', u'user'), ('pybind.nos.v7_1_0.alias_config.user', u'user'), ('pybind.nos.v6_0_2b.alias_config.user', u'user'), ('pybind.nos.v7_0_1a.alias_config.user', u'user')]
    bindings_list = [('pybind.nos.v6_0_2b.alias_config.user.alias', 'pybind.nos.v6_0_2b.brocade_aaa', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.alias_config.user.alias', 'pybind.nos.v7_0_1a.brocade_aaa', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.alias_config.user.alias', 'pybind.nos.v7_1_0.brocade_aaa', 'pybind.nos.v7_1_0'), ('pybind.slxos.v16r_1_00b.alias_config.user.alias', 'pybind.slxos.v16r_1_00b.brocade_aaa', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'alias', 'keyval': 'name', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, user=user, alias=alias)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def arp_delete(self, arp_entry=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		NOS: 6.0.2b, 7.0.1a, 7.1.0
		SLXOS: 16r.1.00b    

	**This Instance Keyword Arg Tuple**:
		:param arp_entry: kwarg tuple.
		:type arp_entry: (arp_ip_address, mac_address_value, interfacename, GigabitEthernet, TenGigabitEthernet, FortyGigabitEthernet, HundredGigabitEthernet, Ve).

		:param arp_ip_address: A.B.C.D;; IP address of the ARP entry
		:type arp_ip_address: (unicode)
		
		.. note::
			* pattern - (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?

		:param mac_address_value: tuple arg.
		:type mac_address_value: (unicode)

		:param interfacename: tuple arg.
		:type interfacename: (unicode)
		
		.. note::
			* enum - [u'interface']

		:param GigabitEthernet: tuple arg.
		:type GigabitEthernet: (unicode)
		
		.. note::
			* length - [u'3..16']
			* pattern - ((([1-9]|[1-9][0-9]|1[0-9][0-9]|2[0-3][0-9])/)?(([0-9]|[1][0-6]))/([1-9]|[1-9][0-9]|[1-9][0-9][0-9])(:[1-4])?)

		:param TenGigabitEthernet: tuple arg.
		:type TenGigabitEthernet: (unicode)
		
		.. note::
			* length - [u'3..16']
			* pattern - ((([1-9]|[1-9][0-9]|1[0-9][0-9]|2[0-3][0-9])/)?(([0-9]|[1][0-6]))/([1-9]|[1-9][0-9]|[1-9][0-9][0-9])(:[1-4])?)

		:param FortyGigabitEthernet: tuple arg.
		:type FortyGigabitEthernet: (unicode)
		
		.. note::
			* length - [u'3..16']
			* pattern - ((([1-9]|[1-9][0-9]|1[0-9][0-9]|2[0-3][0-9])/)?(([0-9]|[1][0-6]))/([1-9]|[1-9][0-9]|[1-9][0-9][0-9])(:[1-4])?)

		:param HundredGigabitEthernet: tuple arg.
		:type HundredGigabitEthernet: (unicode)
		
		.. note::
			* length - [u'3..16']
			* pattern - ((([1-9]|[1-9][0-9]|1[0-9][0-9]|2[0-3][0-9])/)?(([0-9]|[1][0-6]))/([1-9]|[1-9][0-9]|[1-9][0-9][0-9])(:[1-4])?)

		:param Ve: tuple arg.
		:type Ve: (long)
		
		.. note::
			* range - ['0..4294967295']

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = []
    bindings_list = [('pybind.nos.v6_0_2b.hide_arp_holder.arp_entry', 'pybind.nos.v6_0_2b.brocade_arp', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.hide_arp_holder.arp_entry', 'pybind.nos.v7_0_1a.brocade_arp', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.hide_arp_holder.arp_entry', 'pybind.nos.v7_1_0.brocade_arp', 'pybind.nos.v7_1_0'), ('pybind.slxos.v16r_1_00b.arp_entry', 'pybind.slxos.v16r_1_00b.brocade_arp', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = []
    bindings_keyval = {'kwargs_key_name': u'arp_entry', 'keyval': 'arp_ip_address', 'extra_keyval': 'arp_ip_address, mac_address_value, interfacename, Port_channel, GigabitEthernet, TenGigabitEthernet, FortyGigabitEthernet, HundredGigabitEthernet, Ve'}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, arp_entry=arp_entry)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def arp_access_list_delete(self, access_list=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		NOS: 6.0.2b, 7.0.1a, 7.1.0
		SLXOS: 16r.1.00b    

	**This Instance Keyword Arg Tuple**:
		:param access_list: kwarg tuple.
		:type access_list: (acl_name).

		:param acl_name: <WORD:1-62>;;Name of ARP access-list
		:type acl_name: (unicode)
		
		.. note::
			* length - [u'1..62']
			* pattern - [a-zA-Z0-9]{1}([-a-zA-Z0-9_]{0,61})

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = []
    bindings_list = [('pybind.nos.v6_0_2b.arp.access_list', 'pybind.nos.v6_0_2b.brocade_dai', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.arp.access_list', 'pybind.nos.v7_0_1a.brocade_dai', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.arp.access_list', 'pybind.nos.v7_1_0.brocade_dai', 'pybind.nos.v7_1_0'), ('pybind.slxos.v16r_1_00b.dai_config.arp.access_list', 'pybind.slxos.v16r_1_00b.brocade_dai', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = []
    bindings_keyval = {'kwargs_key_name': u'access_list', 'keyval': 'acl_name', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, access_list=access_list)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def arp_access_list_permit_ip_delete(self, access_list=None, permit_list=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		NOS: 6.0.2b, 7.0.1a, 7.1.0
		SLXOS: 16r.1.00b    

	**Parent Instance Keyword Arg Tuple(s)**:
		:param access_list: kwarg tuple.
		:type access_list: (acl_name).

		:param acl_name: <WORD:1-62>;;Name of ARP access-list
		:type acl_name: (unicode)
		
		.. note::
			* length - [u'1..62']
			* pattern - [a-zA-Z0-9]{1}([-a-zA-Z0-9_]{0,61})

	**This Instance Keyword Arg Tuple**:
		:param permit_list: kwarg tuple.
		:type permit_list: (ip_type, host_ip, mac_type, host_mac, log).

		:param ip_type: tuple arg.
		:type ip_type: (unicode)
		
		.. note::
			* enum - [u'host']

		:param host_ip: IPv4Address;;Source IPv4 Address A.B.C.D
		:type host_ip: (unicode)
		
		.. note::
			* pattern - (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?

		:param mac_type: MAC address
		:type mac_type: (unicode)
		
		.. note::
			* enum - [u'host']

		:param host_mac: MACADDRESS;;Mac address in HHHH.HHHH.HHHH format.
		:type host_mac: (unicode)

		:param log: Log packet
		:type log: (YANGBool)

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = [('pybind.nos.v7_1_0.arp.access_list', u'access_list'), ('pybind.nos.v6_0_2b.arp.access_list', u'access_list'), ('pybind.nos.v7_0_1a.arp.access_list', u'access_list'), ('pybind.slxos.v16r_1_00b.dai_config.arp.access_list', u'access_list')]
    bindings_list = [('pybind.nos.v6_0_2b.arp.access_list.permit.permit_list', 'pybind.nos.v6_0_2b.brocade_dai', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.arp.access_list.permit.permit_list', 'pybind.nos.v7_0_1a.brocade_dai', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.arp.access_list.permit.permit_list', 'pybind.nos.v7_1_0.brocade_dai', 'pybind.nos.v7_1_0'), ('pybind.slxos.v16r_1_00b.dai_config.arp.access_list.permit.permit_list', 'pybind.slxos.v16r_1_00b.brocade_dai', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'acl_name', 'extra_keyval': ''}, {'keyval': 'acl_name', 'extra_keyval': ''}, {'keyval': 'acl_name', 'extra_keyval': ''}, {'keyval': 'acl_name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'permit_list', 'keyval': 'ip_type, host_ip, mac_type, host_mac', 'extra_keyval': 'ip_type, host_ip, mac_type, host_mac, log'}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, access_list=access_list, permit_list=permit_list)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def bd_vc_peer_state_delete(self, bd_vc_peer_state=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		SLXOS: 16r.1.00b    

	**This Instance Keyword Arg Tuple**:
		:param bd_vc_peer_state: kwarg tuple.
		:type bd_vc_peer_state: (vc_id).

		:param vc_id: tuple arg.
		:type vc_id: (long)
		
		.. note::
			* range - ['0..4294967295']

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = []
    bindings_list = [('pybind.slxos.v16r_1_00b.bd_vc_peer_state', 'pybind.slxos.v16r_1_00b.brocade_pwm_operational', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = []
    bindings_keyval = {'kwargs_key_name': 'bd_vc_peer_state', 'keyval': 'vc_id', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, bd_vc_peer_state=bd_vc_peer_state)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def bd_vc_peer_state_bd_vc_peer_data_delete(self, bd_vc_peer_state=None, bd_vc_peer_data=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		SLXOS: 16r.1.00b    

	**Parent Instance Keyword Arg Tuple(s)**:
		:param bd_vc_peer_state: kwarg tuple.
		:type bd_vc_peer_state: (vc_id).

		:param vc_id: tuple arg.
		:type vc_id: (long)
		
		.. note::
			* range - ['0..4294967295']

	**This Instance Keyword Arg Tuple**:
		:param bd_vc_peer_data: kwarg tuple.
		:type bd_vc_peer_data: (vc_peer_address).

		:param vc_peer_address: tuple arg.
		:type vc_peer_address: (unicode)
		
		.. note::
			* pattern - (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = [('pybind.slxos.v16r_1_00b.bd_vc_peer_state', 'bd_vc_peer_state')]
    bindings_list = [('pybind.slxos.v16r_1_00b.bd_vc_peer_state.bd_vc_peer_data', 'pybind.slxos.v16r_1_00b.brocade_pwm_operational', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'vc_id', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'bd_vc_peer_data', 'keyval': 'vc_peer_address', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, bd_vc_peer_state=bd_vc_peer_state, bd_vc_peer_data=bd_vc_peer_data)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def bd_vc_peer_state_bd_vc_peer_data_vc_assigned_lsp_delete(self, bd_vc_peer_state=None, bd_vc_peer_data=None, vc_assigned_lsp=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		SLXOS: 16r.1.00b    

	**Parent Instance Keyword Arg Tuple(s)**:
		:param bd_vc_peer_state: kwarg tuple.
		:type bd_vc_peer_state: (vc_id).

		:param vc_id: tuple arg.
		:type vc_id: (long)
		
		.. note::
			* range - ['0..4294967295']

		:param bd_vc_peer_data: kwarg tuple.
		:type bd_vc_peer_data: (vc_peer_address).

		:param vc_peer_address: tuple arg.
		:type vc_peer_address: (unicode)
		
		.. note::
			* pattern - (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?

	**This Instance Keyword Arg Tuple**:
		:param vc_assigned_lsp: kwarg tuple.
		:type vc_assigned_lsp: (vc_lsp_name).

		:param vc_lsp_name: tuple arg.
		:type vc_lsp_name: (unicode)

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = [('pybind.slxos.v16r_1_00b.bd_vc_peer_state', 'bd_vc_peer_state'), ('pybind.slxos.v16r_1_00b.bd_vc_peer_state.bd_vc_peer_data', u'bd_vc_peer_data')]
    bindings_list = [('pybind.slxos.v16r_1_00b.bd_vc_peer_state.bd_vc_peer_data.vc_assigned_lsp', 'pybind.slxos.v16r_1_00b.brocade_pwm_operational', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'vc_id', 'extra_keyval': ''}, {'keyval': 'vc_peer_address', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'vc_assigned_lsp', 'keyval': 'vc_lsp_name', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, bd_vc_peer_state=bd_vc_peer_state, bd_vc_peer_data=bd_vc_peer_data, vc_assigned_lsp=vc_assigned_lsp)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def bd_vc_peer_state_bd_vc_peer_data_vc_proto_tnnl_delete(self, bd_vc_peer_state=None, bd_vc_peer_data=None, vc_proto_tnnl=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		SLXOS: 16r.1.00b    

	**Parent Instance Keyword Arg Tuple(s)**:
		:param bd_vc_peer_state: kwarg tuple.
		:type bd_vc_peer_state: (vc_id).

		:param vc_id: tuple arg.
		:type vc_id: (long)
		
		.. note::
			* range - ['0..4294967295']

		:param bd_vc_peer_data: kwarg tuple.
		:type bd_vc_peer_data: (vc_peer_address).

		:param vc_peer_address: tuple arg.
		:type vc_peer_address: (unicode)
		
		.. note::
			* pattern - (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?

	**This Instance Keyword Arg Tuple**:
		:param vc_proto_tnnl: kwarg tuple.
		:type vc_proto_tnnl: (vc_proto_name).

		:param vc_proto_name: tuple arg.
		:type vc_proto_name: (unicode)

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = [('pybind.slxos.v16r_1_00b.bd_vc_peer_state', 'bd_vc_peer_state'), ('pybind.slxos.v16r_1_00b.bd_vc_peer_state.bd_vc_peer_data', u'bd_vc_peer_data')]
    bindings_list = [('pybind.slxos.v16r_1_00b.bd_vc_peer_state.bd_vc_peer_data.vc_proto_tnnl', 'pybind.slxos.v16r_1_00b.brocade_pwm_operational', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'vc_id', 'extra_keyval': ''}, {'keyval': 'vc_peer_address', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'vc_proto_tnnl', 'keyval': 'vc_proto_name', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, bd_vc_peer_state=bd_vc_peer_state, bd_vc_peer_data=bd_vc_peer_data, vc_proto_tnnl=vc_proto_tnnl)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def bridge_domain_delete(self, bridge_domain=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		SLXOS: 16r.1.00b    

	**This Instance Keyword Arg Tuple**:
		:param bridge_domain: kwarg tuple.
		:type bridge_domain: (bridge_domain_id, bridge_domain_type).

		:param bridge_domain_id: Bridge-domain ID.
		:type bridge_domain_id: (long)
		
		.. note::
			* range - ['0..4294967295']

		:param bridge_domain_type: Set the Bridge Domain Type
		:type bridge_domain_type: (unicode)
		
		.. note::
			* enum - [u'p2mp', u'p2p']

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = []
    bindings_list = [('pybind.slxos.v16r_1_00b.bridge_domain', 'pybind.slxos.v16r_1_00b.brocade_bridge_domain', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = []
    bindings_keyval = {'kwargs_key_name': 'bridge_domain', 'keyval': 'bridge_domain_id, bridge_domain_type', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, bridge_domain=bridge_domain)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def bridge_domain_logical_interface_ethernet_delete(self, bridge_domain=None, ethernet=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		SLXOS: 16r.1.00b    

	**Parent Instance Keyword Arg Tuple(s)**:
		:param bridge_domain: kwarg tuple.
		:type bridge_domain: (bridge_domain_id, bridge_domain_type).

		:param bridge_domain_id: Bridge-domain ID.
		:type bridge_domain_id: (long)
		
		.. note::
			* range - ['0..4294967295']

		:param bridge_domain_type: Set the Bridge Domain Type
		:type bridge_domain_type: (unicode)
		
		.. note::
			* enum - [u'p2mp', u'p2p']

	**This Instance Keyword Arg Tuple**:
		:param ethernet: kwarg tuple.
		:type ethernet: (lif_bind_id).

		:param lif_bind_id: Instance ID of the LIF to bind
		:type lif_bind_id: (unicode)
		
		.. note::
			* pattern - ((([0-9]|[1][0-6]))/([1-9]|[1-9][0-9])(:[1-4])?)(\.([1-9]|[1-9][0-9]||[1-9][0-9][0-9]|[1-9][0-9][0-9][0-9]|1[0-2][0-2][0-8][0-8]))

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = [('pybind.slxos.v16r_1_00b.bridge_domain', 'bridge_domain')]
    bindings_list = [('pybind.slxos.v16r_1_00b.bridge_domain.logical_interface.ethernet', 'pybind.slxos.v16r_1_00b.brocade_bridge_domain', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'bridge_domain_id, bridge_domain_type', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'ethernet', 'keyval': 'lif_bind_id', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, bridge_domain=bridge_domain, ethernet=ethernet)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def bridge_domain_logical_interface_port_channel_delete(self, bridge_domain=None, port_channel=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		SLXOS: 16r.1.00b    

	**Parent Instance Keyword Arg Tuple(s)**:
		:param bridge_domain: kwarg tuple.
		:type bridge_domain: (bridge_domain_id, bridge_domain_type).

		:param bridge_domain_id: Bridge-domain ID.
		:type bridge_domain_id: (long)
		
		.. note::
			* range - ['0..4294967295']

		:param bridge_domain_type: Set the Bridge Domain Type
		:type bridge_domain_type: (unicode)
		
		.. note::
			* enum - [u'p2mp', u'p2p']

	**This Instance Keyword Arg Tuple**:
		:param port_channel: kwarg tuple.
		:type port_channel: (pc_lif_bind_id).

		:param pc_lif_bind_id: Instance ID of the port-channel LIF to bind
		:type pc_lif_bind_id: (unicode)
		
		.. note::
			* pattern - (([1-9]|[1-9][0-9]|[1-9][0-9][0-9]|[1-6][0-9][0-9][0-9])\.([1-9]|[1-9][0-9]||[1-9][0-9][0-9]|[1-9][0-9][0-9][0-9]|1[0-2][0-2][0-8][0-8]))

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = [('pybind.slxos.v16r_1_00b.bridge_domain', 'bridge_domain')]
    bindings_list = [('pybind.slxos.v16r_1_00b.bridge_domain.logical_interface.port_channel', 'pybind.slxos.v16r_1_00b.brocade_bridge_domain', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'bridge_domain_id, bridge_domain_type', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'port_channel', 'keyval': 'pc_lif_bind_id', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, bridge_domain=bridge_domain, port_channel=port_channel)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def bridge_domain_mac_state_delete(self, bridge_domain_mac_state=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		SLXOS: 16r.1.00b    

	**This Instance Keyword Arg Tuple**:
		:param bridge_domain_mac_state: kwarg tuple.
		:type bridge_domain_mac_state: (bd_id).

		:param bd_id: tuple arg.
		:type bd_id: (long)
		
		.. note::
			* range - ['0..4294967295']

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = []
    bindings_list = [('pybind.slxos.v16r_1_00b.bridge_domain_mac_state', 'pybind.slxos.v16r_1_00b.brocade_l2sys_operational', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = []
    bindings_keyval = {'kwargs_key_name': 'bridge_domain_mac_state', 'keyval': 'bd_id', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, bridge_domain_mac_state=bridge_domain_mac_state)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def bridge_domain_peer_delete(self, bridge_domain=None, peer=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		SLXOS: 16r.1.00b    

	**Parent Instance Keyword Arg Tuple(s)**:
		:param bridge_domain: kwarg tuple.
		:type bridge_domain: (bridge_domain_id, bridge_domain_type).

		:param bridge_domain_id: Bridge-domain ID.
		:type bridge_domain_id: (long)
		
		.. note::
			* range - ['0..4294967295']

		:param bridge_domain_type: Set the Bridge Domain Type
		:type bridge_domain_type: (unicode)
		
		.. note::
			* enum - [u'p2mp', u'p2p']

	**This Instance Keyword Arg Tuple**:
		:param peer: kwarg tuple.
		:type peer: (peer_ip, load_balance, cos).

		:param peer_ip: PW Peer Ip for remote peer
		:type peer_ip: (unicode)
		
		.. note::
			* pattern - (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?

		:param load_balance: load balance
		:type load_balance: (YANGBool)

		:param cos: cos value
		:type cos: (long)
		
		.. note::
			* range - ['0..4294967295']

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = [('pybind.slxos.v16r_1_00b.bridge_domain', 'bridge_domain')]
    bindings_list = [('pybind.slxos.v16r_1_00b.bridge_domain.peer', 'pybind.slxos.v16r_1_00b.brocade_bridge_domain', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'bridge_domain_id, bridge_domain_type', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'peer', 'keyval': 'peer_ip', 'extra_keyval': 'peer_ip, load_balance, cos'}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, bridge_domain=bridge_domain, peer=peer)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def bridge_domain_state_bridge_domain_list_delete(self, bridge_domain_list=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		SLXOS: 16r.1.00b    

	**This Instance Keyword Arg Tuple**:
		:param bridge_domain_list: kwarg tuple.
		:type bridge_domain_list: (bd_id).

		:param bd_id: tuple arg.
		:type bd_id: (long)
		
		.. note::
			* range - ['0..4294967295']

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = []
    bindings_list = [('pybind.slxos.v16r_1_00b.bridge_domain_state.bridge_domain_list', 'pybind.slxos.v16r_1_00b.brocade_nsm_operational', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = []
    bindings_keyval = {'kwargs_key_name': u'bridge_domain_list', 'keyval': 'bd_id', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, bridge_domain_list=bridge_domain_list)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def bridge_domain_state_bridge_domain_list_outer_vlan_list_delete(self, bridge_domain_list=None, outer_vlan_list=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		SLXOS: 16r.1.00b    

	**Parent Instance Keyword Arg Tuple(s)**:
		:param bridge_domain_list: kwarg tuple.
		:type bridge_domain_list: (bd_id).

		:param bd_id: tuple arg.
		:type bd_id: (long)
		
		.. note::
			* range - ['0..4294967295']

	**This Instance Keyword Arg Tuple**:
		:param outer_vlan_list: kwarg tuple.
		:type outer_vlan_list: (outer_vlan).

		:param outer_vlan: tuple arg.
		:type outer_vlan: (long)
		
		.. note::
			* range - ['0..4294967295']

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = [('pybind.slxos.v16r_1_00b.bridge_domain_state.bridge_domain_list', u'bridge_domain_list')]
    bindings_list = [('pybind.slxos.v16r_1_00b.bridge_domain_state.bridge_domain_list.outer_vlan_list', 'pybind.slxos.v16r_1_00b.brocade_nsm_operational', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'bd_id', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'outer_vlan_list', 'keyval': 'outer_vlan', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, bridge_domain_list=bridge_domain_list, outer_vlan_list=outer_vlan_list)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def bridge_domain_state_bridge_domain_list_outer_vlan_list_tagged_ports_list_delete(self, bridge_domain_list=None, outer_vlan_list=None, tagged_ports_list=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		SLXOS: 16r.1.00b    

	**Parent Instance Keyword Arg Tuple(s)**:
		:param bridge_domain_list: kwarg tuple.
		:type bridge_domain_list: (bd_id).

		:param bd_id: tuple arg.
		:type bd_id: (long)
		
		.. note::
			* range - ['0..4294967295']

		:param outer_vlan_list: kwarg tuple.
		:type outer_vlan_list: (outer_vlan).

		:param outer_vlan: tuple arg.
		:type outer_vlan: (long)
		
		.. note::
			* range - ['0..4294967295']

	**This Instance Keyword Arg Tuple**:
		:param tagged_ports_list: kwarg tuple.
		:type tagged_ports_list: (lif_name).

		:param lif_name: tuple arg.
		:type lif_name: (unicode)

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = [('pybind.slxos.v16r_1_00b.bridge_domain_state.bridge_domain_list', u'bridge_domain_list'), ('pybind.slxos.v16r_1_00b.bridge_domain_state.bridge_domain_list.outer_vlan_list', u'outer_vlan_list')]
    bindings_list = [('pybind.slxos.v16r_1_00b.bridge_domain_state.bridge_domain_list.outer_vlan_list.tagged_ports_list', 'pybind.slxos.v16r_1_00b.brocade_nsm_operational', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'bd_id', 'extra_keyval': ''}, {'keyval': 'outer_vlan', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'tagged_ports_list', 'keyval': 'lif_name', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, bridge_domain_list=bridge_domain_list, outer_vlan_list=outer_vlan_list, tagged_ports_list=tagged_ports_list)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def bridge_domain_state_bridge_domain_list_outer_vlan_list_untagged_ports_list_delete(self, bridge_domain_list=None, outer_vlan_list=None, untagged_ports_list=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		SLXOS: 16r.1.00b    

	**Parent Instance Keyword Arg Tuple(s)**:
		:param bridge_domain_list: kwarg tuple.
		:type bridge_domain_list: (bd_id).

		:param bd_id: tuple arg.
		:type bd_id: (long)
		
		.. note::
			* range - ['0..4294967295']

		:param outer_vlan_list: kwarg tuple.
		:type outer_vlan_list: (outer_vlan).

		:param outer_vlan: tuple arg.
		:type outer_vlan: (long)
		
		.. note::
			* range - ['0..4294967295']

	**This Instance Keyword Arg Tuple**:
		:param untagged_ports_list: kwarg tuple.
		:type untagged_ports_list: (lif_name).

		:param lif_name: tuple arg.
		:type lif_name: (unicode)

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = [('pybind.slxos.v16r_1_00b.bridge_domain_state.bridge_domain_list', u'bridge_domain_list'), ('pybind.slxos.v16r_1_00b.bridge_domain_state.bridge_domain_list.outer_vlan_list', u'outer_vlan_list')]
    bindings_list = [('pybind.slxos.v16r_1_00b.bridge_domain_state.bridge_domain_list.outer_vlan_list.untagged_ports_list', 'pybind.slxos.v16r_1_00b.brocade_nsm_operational', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'bd_id', 'extra_keyval': ''}, {'keyval': 'outer_vlan', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'untagged_ports_list', 'keyval': 'lif_name', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, bridge_domain_list=bridge_domain_list, outer_vlan_list=outer_vlan_list, untagged_ports_list=untagged_ports_list)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def cee_map_delete(self, cee_map=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		NOS: 6.0.2b, 7.0.1a, 7.1.0
		SLXOS: 16r.1.00b    

	**This Instance Keyword Arg Tuple**:
		:param cee_map: kwarg tuple.
		:type cee_map: (name).

		:param name: tuple arg.
		:type name: (unicode)
		
		.. note::
			* pattern - [a-zA-Z]{1}([-a-zA-Z0-9\.\\\\@#\+\*\(\)=\{~\}%<>=$_\[\]\|]{0,31})

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = []
    bindings_list = [('pybind.nos.v6_0_2b.cee_map', 'pybind.nos.v6_0_2b.brocade_cee_map', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.cee_map', 'pybind.nos.v7_0_1a.brocade_cee_map', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.cee_map', 'pybind.nos.v7_1_0.brocade_cee_map', 'pybind.nos.v7_1_0'), ('pybind.slxos.v16r_1_00b.cee_map', 'pybind.slxos.v16r_1_00b.brocade_qos_cee', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = []
    bindings_keyval = {'kwargs_key_name': 'cee_map', 'keyval': 'name', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, cee_map=cee_map)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def cee_map_priority_group_table_delete(self, cee_map=None, priority_group_table=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		NOS: 6.0.2b, 7.0.1a, 7.1.0
		SLXOS: 16r.1.00b    

	**Parent Instance Keyword Arg Tuple(s)**:
		:param cee_map: kwarg tuple.
		:type cee_map: (name).

		:param name: tuple arg.
		:type name: (unicode)
		
		.. note::
			* pattern - [a-zA-Z]{1}([-a-zA-Z0-9\.\\\\@#\+\*\(\)=\{~\}%<>=$_\[\]\|]{0,31})

	**This Instance Keyword Arg Tuple**:
		:param priority_group_table: kwarg tuple.
		:type priority_group_table: (PGID, weight, pfc).

		:param PGID: ;; Configure Priority Group (PGID 0-7,15.0-15.7)
		:type PGID: (unicode)
		
		.. note::
			* pattern - [0-7]|15.[0-7]

		:param weight: Configure DWRR Priority Group (PGID 0-7) weight
		:type weight: (long)
		
		.. note::
			* range - ['-2147483648..2147483647']

		:param pfc:  Per-priority Flow Control
		:type pfc: (unicode)
		
		.. note::
			* enum - [u'on', u'off']

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = [('pybind.nos.v7_1_0.cee_map', 'cee_map'), ('pybind.nos.v7_0_1a.cee_map', 'cee_map'), ('pybind.nos.v6_0_2b.cee_map', 'cee_map'), ('pybind.slxos.v16r_1_00b.cee_map', 'cee_map')]
    bindings_list = [('pybind.nos.v6_0_2b.cee_map.priority_group_table', 'pybind.nos.v6_0_2b.brocade_cee_map', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.cee_map.priority_group_table', 'pybind.nos.v7_0_1a.brocade_cee_map', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.cee_map.priority_group_table', 'pybind.nos.v7_1_0.brocade_cee_map', 'pybind.nos.v7_1_0'), ('pybind.slxos.v16r_1_00b.cee_map.priority_group_table', 'pybind.slxos.v16r_1_00b.brocade_qos_cee', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'priority_group_table', 'keyval': 'PGID', 'extra_keyval': 'PGID, weight, pfc'}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, cee_map=cee_map, priority_group_table=priority_group_table)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def cfm_state_cfm_connectivity_domain_delete(self, domain=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		SLXOS: 16r.1.00b    

	**This Instance Keyword Arg Tuple**:
		:param domain: kwarg tuple.
		:type domain: (md_name).

		:param md_name: tuple arg.
		:type md_name: (unicode)

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = []
    bindings_list = [('pybind.slxos.v16r_1_00b.cfm_state.cfm_connectivity.domain', 'pybind.slxos.v16r_1_00b.brocade_dot1ag_operational', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = []
    bindings_keyval = {'kwargs_key_name': u'domain', 'keyval': 'md_name', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, domain=domain)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def cfm_state_cfm_connectivity_domain_ma_delete(self, domain=None, ma=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		SLXOS: 16r.1.00b    

	**Parent Instance Keyword Arg Tuple(s)**:
		:param domain: kwarg tuple.
		:type domain: (md_name).

		:param md_name: tuple arg.
		:type md_name: (unicode)

	**This Instance Keyword Arg Tuple**:
		:param ma: kwarg tuple.
		:type ma: (ma_name).

		:param ma_name: tuple arg.
		:type ma_name: (unicode)

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = [('pybind.slxos.v16r_1_00b.cfm_state.cfm_connectivity.domain', u'domain')]
    bindings_list = [('pybind.slxos.v16r_1_00b.cfm_state.cfm_connectivity.domain.ma', 'pybind.slxos.v16r_1_00b.brocade_dot1ag_operational', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'md_name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'ma', 'keyval': 'ma_name', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, domain=domain, ma=ma)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def cfm_state_cfm_connectivity_domain_ma_mep_delete(self, domain=None, ma=None, mep=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		SLXOS: 16r.1.00b    

	**Parent Instance Keyword Arg Tuple(s)**:
		:param domain: kwarg tuple.
		:type domain: (md_name).

		:param md_name: tuple arg.
		:type md_name: (unicode)

		:param ma: kwarg tuple.
		:type ma: (ma_name).

		:param ma_name: tuple arg.
		:type ma_name: (unicode)

	**This Instance Keyword Arg Tuple**:
		:param mep: kwarg tuple.
		:type mep: (mep_id).

		:param mep_id: tuple arg.
		:type mep_id: (int)
		
		.. note::
			* range - ['0..65535']

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = [('pybind.slxos.v16r_1_00b.cfm_state.cfm_connectivity.domain', u'domain'), ('pybind.slxos.v16r_1_00b.cfm_state.cfm_connectivity.domain.ma', u'ma')]
    bindings_list = [('pybind.slxos.v16r_1_00b.cfm_state.cfm_connectivity.domain.ma.mep', 'pybind.slxos.v16r_1_00b.brocade_dot1ag_operational', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'md_name', 'extra_keyval': ''}, {'keyval': 'ma_name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'mep', 'keyval': 'mep_id', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, domain=domain, ma=ma, mep=mep)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def cfm_state_cfm_connectivity_domain_ma_mep_rmep_delete(self, domain=None, ma=None, mep=None, rmep=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		SLXOS: 16r.1.00b    

	**Parent Instance Keyword Arg Tuple(s)**:
		:param domain: kwarg tuple.
		:type domain: (md_name).

		:param md_name: tuple arg.
		:type md_name: (unicode)

		:param ma: kwarg tuple.
		:type ma: (ma_name).

		:param ma_name: tuple arg.
		:type ma_name: (unicode)

		:param mep: kwarg tuple.
		:type mep: (mep_id).

		:param mep_id: tuple arg.
		:type mep_id: (int)
		
		.. note::
			* range - ['0..65535']

	**This Instance Keyword Arg Tuple**:
		:param rmep: kwarg tuple.
		:type rmep: (rmep_id).

		:param rmep_id: tuple arg.
		:type rmep_id: (int)
		
		.. note::
			* range - ['0..65535']

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = [('pybind.slxos.v16r_1_00b.cfm_state.cfm_connectivity.domain', u'domain'), ('pybind.slxos.v16r_1_00b.cfm_state.cfm_connectivity.domain.ma', u'ma'), ('pybind.slxos.v16r_1_00b.cfm_state.cfm_connectivity.domain.ma.mep', u'mep')]
    bindings_list = [('pybind.slxos.v16r_1_00b.cfm_state.cfm_connectivity.domain.ma.mep.rmep', 'pybind.slxos.v16r_1_00b.brocade_dot1ag_operational', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'md_name', 'extra_keyval': ''}, {'keyval': 'ma_name', 'extra_keyval': ''}, {'keyval': 'mep_id', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'rmep', 'keyval': 'rmep_id', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, domain=domain, ma=ma, mep=mep, rmep=rmep)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def cfm_state_cfm_connectivity_domain_ma_mip_delete(self, domain=None, ma=None, mip=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		SLXOS: 16r.1.00b    

	**Parent Instance Keyword Arg Tuple(s)**:
		:param domain: kwarg tuple.
		:type domain: (md_name).

		:param md_name: tuple arg.
		:type md_name: (unicode)

		:param ma: kwarg tuple.
		:type ma: (ma_name).

		:param ma_name: tuple arg.
		:type ma_name: (unicode)

	**This Instance Keyword Arg Tuple**:
		:param mip: kwarg tuple.
		:type mip: (vlan_id, port).

		:param vlan_id: tuple arg.
		:type vlan_id: (long)
		
		.. note::
			* range - ['0..4294967295']

		:param port: tuple arg.
		:type port: (unicode)

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = [('pybind.slxos.v16r_1_00b.cfm_state.cfm_connectivity.domain', u'domain'), ('pybind.slxos.v16r_1_00b.cfm_state.cfm_connectivity.domain.ma', u'ma')]
    bindings_list = [('pybind.slxos.v16r_1_00b.cfm_state.cfm_connectivity.domain.ma.mip', 'pybind.slxos.v16r_1_00b.brocade_dot1ag_operational', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'md_name', 'extra_keyval': ''}, {'keyval': 'ma_name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'mip', 'keyval': 'vlan_id, port', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, domain=domain, ma=ma, mip=mip)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def cfm_state_cfm_detail_domain_delete(self, domain=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		SLXOS: 16r.1.00b    

	**This Instance Keyword Arg Tuple**:
		:param domain: kwarg tuple.
		:type domain: (md_name).

		:param md_name: tuple arg.
		:type md_name: (unicode)

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = []
    bindings_list = [('pybind.slxos.v16r_1_00b.cfm_state.cfm_detail.domain', 'pybind.slxos.v16r_1_00b.brocade_dot1ag_operational', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = []
    bindings_keyval = {'kwargs_key_name': u'domain', 'keyval': 'md_name', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, domain=domain)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def cfm_state_cfm_detail_domain_ma_delete(self, domain=None, ma=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		SLXOS: 16r.1.00b    

	**Parent Instance Keyword Arg Tuple(s)**:
		:param domain: kwarg tuple.
		:type domain: (md_name).

		:param md_name: tuple arg.
		:type md_name: (unicode)

	**This Instance Keyword Arg Tuple**:
		:param ma: kwarg tuple.
		:type ma: (ma_name).

		:param ma_name: tuple arg.
		:type ma_name: (unicode)

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = [('pybind.slxos.v16r_1_00b.cfm_state.cfm_detail.domain', u'domain')]
    bindings_list = [('pybind.slxos.v16r_1_00b.cfm_state.cfm_detail.domain.ma', 'pybind.slxos.v16r_1_00b.brocade_dot1ag_operational', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'md_name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'ma', 'keyval': 'ma_name', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, domain=domain, ma=ma)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def cfm_state_cfm_detail_domain_ma_mep_delete(self, domain=None, ma=None, mep=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		SLXOS: 16r.1.00b    

	**Parent Instance Keyword Arg Tuple(s)**:
		:param domain: kwarg tuple.
		:type domain: (md_name).

		:param md_name: tuple arg.
		:type md_name: (unicode)

		:param ma: kwarg tuple.
		:type ma: (ma_name).

		:param ma_name: tuple arg.
		:type ma_name: (unicode)

	**This Instance Keyword Arg Tuple**:
		:param mep: kwarg tuple.
		:type mep: (mep_id).

		:param mep_id: tuple arg.
		:type mep_id: (int)
		
		.. note::
			* range - ['0..65535']

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = [('pybind.slxos.v16r_1_00b.cfm_state.cfm_detail.domain', u'domain'), ('pybind.slxos.v16r_1_00b.cfm_state.cfm_detail.domain.ma', u'ma')]
    bindings_list = [('pybind.slxos.v16r_1_00b.cfm_state.cfm_detail.domain.ma.mep', 'pybind.slxos.v16r_1_00b.brocade_dot1ag_operational', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'md_name', 'extra_keyval': ''}, {'keyval': 'ma_name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'mep', 'keyval': 'mep_id', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, domain=domain, ma=ma, mep=mep)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def cfm_state_cfm_detail_domain_ma_mep_rmep_delete(self, domain=None, ma=None, mep=None, rmep=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		SLXOS: 16r.1.00b    

	**Parent Instance Keyword Arg Tuple(s)**:
		:param domain: kwarg tuple.
		:type domain: (md_name).

		:param md_name: tuple arg.
		:type md_name: (unicode)

		:param ma: kwarg tuple.
		:type ma: (ma_name).

		:param ma_name: tuple arg.
		:type ma_name: (unicode)

		:param mep: kwarg tuple.
		:type mep: (mep_id).

		:param mep_id: tuple arg.
		:type mep_id: (int)
		
		.. note::
			* range - ['0..65535']

	**This Instance Keyword Arg Tuple**:
		:param rmep: kwarg tuple.
		:type rmep: (rmep_id).

		:param rmep_id: tuple arg.
		:type rmep_id: (int)
		
		.. note::
			* range - ['0..65535']

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = [('pybind.slxos.v16r_1_00b.cfm_state.cfm_detail.domain', u'domain'), ('pybind.slxos.v16r_1_00b.cfm_state.cfm_detail.domain.ma', u'ma'), ('pybind.slxos.v16r_1_00b.cfm_state.cfm_detail.domain.ma.mep', u'mep')]
    bindings_list = [('pybind.slxos.v16r_1_00b.cfm_state.cfm_detail.domain.ma.mep.rmep', 'pybind.slxos.v16r_1_00b.brocade_dot1ag_operational', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'md_name', 'extra_keyval': ''}, {'keyval': 'ma_name', 'extra_keyval': ''}, {'keyval': 'mep_id', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'rmep', 'keyval': 'rmep_id', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, domain=domain, ma=ma, mep=mep, rmep=rmep)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def cfm_state_cfm_detail_domain_ma_mip_delete(self, domain=None, ma=None, mip=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		SLXOS: 16r.1.00b    

	**Parent Instance Keyword Arg Tuple(s)**:
		:param domain: kwarg tuple.
		:type domain: (md_name).

		:param md_name: tuple arg.
		:type md_name: (unicode)

		:param ma: kwarg tuple.
		:type ma: (ma_name).

		:param ma_name: tuple arg.
		:type ma_name: (unicode)

	**This Instance Keyword Arg Tuple**:
		:param mip: kwarg tuple.
		:type mip: (vlan_id, port).

		:param vlan_id: tuple arg.
		:type vlan_id: (long)
		
		.. note::
			* range - ['0..4294967295']

		:param port: tuple arg.
		:type port: (unicode)

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = [('pybind.slxos.v16r_1_00b.cfm_state.cfm_detail.domain', u'domain'), ('pybind.slxos.v16r_1_00b.cfm_state.cfm_detail.domain.ma', u'ma')]
    bindings_list = [('pybind.slxos.v16r_1_00b.cfm_state.cfm_detail.domain.ma.mip', 'pybind.slxos.v16r_1_00b.brocade_dot1ag_operational', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'md_name', 'extra_keyval': ''}, {'keyval': 'ma_name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'mip', 'keyval': 'vlan_id, port', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, domain=domain, ma=ma, mip=mip)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def class_map_delete(self, class_map=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		NOS: 6.0.2b, 7.0.1a, 7.1.0
		SLXOS: 16r.1.00b    

	**This Instance Keyword Arg Tuple**:
		:param class_map: kwarg tuple.
		:type class_map: (name).

		:param name: Class Map Name (Max Size - 64)
		:type name: (unicode)
		
		.. note::
			* pattern - [a-zA-Z]{1}([-a-zA-Z0-9_]{0,63})

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = []
    bindings_list = [('pybind.nos.v6_0_2b.class_map', 'pybind.nos.v6_0_2b.brocade_policer', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.class_map', 'pybind.nos.v7_0_1a.brocade_policer', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.class_map', 'pybind.nos.v7_1_0.brocade_policer', 'pybind.nos.v7_1_0'), ('pybind.slxos.v16r_1_00b.class_map', 'pybind.slxos.v16r_1_00b.brocade_qos_mqc', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = []
    bindings_keyval = {'kwargs_key_name': 'class_map', 'keyval': 'name', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, class_map=class_map)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def cluster_delete(self, cluster=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		SLXOS: 16r.1.00b    

	**This Instance Keyword Arg Tuple**:
		:param cluster: kwarg tuple.
		:type cluster: (cluster_name, cluster_id).

		:param cluster_name: Name for the Cluster (MAX: 64 Characters)
		:type cluster_name: (unicode)
		
		.. note::
			* pattern - [a-zA-Z]{1}([-a-zA-Z0-9\.\\\\@#\+\*\(\)=\{~\}%<>=$_\[\]\|]{0,63})

		:param cluster_id: Id for the Cluster (Range: 1 - 65535
		:type cluster_id: (long)
		
		.. note::
			* range - ['0..4294967295']

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = []
    bindings_list = [('pybind.slxos.v16r_1_00b.cluster', 'pybind.slxos.v16r_1_00b.brocade_mct', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = []
    bindings_keyval = {'kwargs_key_name': 'cluster', 'keyval': 'cluster_name, cluster_id', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, cluster=cluster)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def cluster_client_delete(self, cluster=None, client=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		SLXOS: 16r.1.00b    

	**Parent Instance Keyword Arg Tuple(s)**:
		:param cluster: kwarg tuple.
		:type cluster: (cluster_name, cluster_id).

		:param cluster_name: Name for the Cluster (MAX: 64 Characters)
		:type cluster_name: (unicode)
		
		.. note::
			* pattern - [a-zA-Z]{1}([-a-zA-Z0-9\.\\\\@#\+\*\(\)=\{~\}%<>=$_\[\]\|]{0,63})

		:param cluster_id: Id for the Cluster (Range: 1 - 65535
		:type cluster_id: (long)
		
		.. note::
			* range - ['0..4294967295']

	**This Instance Keyword Arg Tuple**:
		:param client: kwarg tuple.
		:type client: (client_name, client_id).

		:param client_name: Name for the Cluster Client (MAX: 64 Characters)
		:type client_name: (unicode)
		
		.. note::
			* length - [u'1..64']

		:param client_id: Id for the Cluster Client (Range: 1 - 512)
		:type client_id: (long)
		
		.. note::
			* range - ['0..4294967295']

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = [('pybind.slxos.v16r_1_00b.cluster', 'cluster')]
    bindings_list = [('pybind.slxos.v16r_1_00b.cluster.client', 'pybind.slxos.v16r_1_00b.brocade_mct', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'cluster_name, cluster_id', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'client', 'keyval': 'client_name, client_id', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, cluster=cluster, client=client)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def cluster_peer_delete(self, cluster=None, peer=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		SLXOS: 16r.1.00b    

	**Parent Instance Keyword Arg Tuple(s)**:
		:param cluster: kwarg tuple.
		:type cluster: (cluster_name, cluster_id).

		:param cluster_name: Name for the Cluster (MAX: 64 Characters)
		:type cluster_name: (unicode)
		
		.. note::
			* pattern - [a-zA-Z]{1}([-a-zA-Z0-9\.\\\\@#\+\*\(\)=\{~\}%<>=$_\[\]\|]{0,63})

		:param cluster_id: Id for the Cluster (Range: 1 - 65535
		:type cluster_id: (long)
		
		.. note::
			* range - ['0..4294967295']

	**This Instance Keyword Arg Tuple**:
		:param peer: kwarg tuple.
		:type peer: (peer_ip).

		:param peer_ip: MCT Peer node IP Address
		:type peer_ip: (unicode)
		
		.. note::
			* pattern - (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = [('pybind.slxos.v16r_1_00b.cluster', 'cluster')]
    bindings_list = [('pybind.slxos.v16r_1_00b.cluster.peer', 'pybind.slxos.v16r_1_00b.brocade_mct', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'cluster_name, cluster_id', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'peer', 'keyval': 'peer_ip', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, cluster=cluster, peer=peer)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def counts_state_bad_lsp_log_delete(self, bad_lsp_log=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		SLXOS: 16r.1.00b    

	**This Instance Keyword Arg Tuple**:
		:param bad_lsp_log: kwarg tuple.
		:type bad_lsp_log: (type_index).

		:param type_index: tuple arg.
		:type type_index: (int)
		
		.. note::
			* range - ['0..255']

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = []
    bindings_list = [('pybind.slxos.v16r_1_00b.counts_state.bad_lsp_log', 'pybind.slxos.v16r_1_00b.brocade_isis_operational', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = []
    bindings_keyval = {'kwargs_key_name': u'bad_lsp_log', 'keyval': 'type_index', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, bad_lsp_log=bad_lsp_log)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def cpu_cfg_state_cpu_cfg_slot_delete(self, cpu_cfg_slot=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		SLXOS: 16r.1.00b    

	**This Instance Keyword Arg Tuple**:
		:param cpu_cfg_slot: kwarg tuple.
		:type cpu_cfg_slot: (slot_id).

		:param slot_id: tuple arg.
		:type slot_id: (int)
		
		.. note::
			* range - ['0..255']

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = []
    bindings_list = [('pybind.slxos.v16r_1_00b.cpu_cfg_state.cpu_cfg_slot', 'pybind.slxos.v16r_1_00b.brocade_qos_operational', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = []
    bindings_keyval = {'kwargs_key_name': u'cpu_cfg_slot', 'keyval': 'slot_id', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, cpu_cfg_slot=cpu_cfg_slot)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def cpu_cfg_state_cpu_cfg_slot_cpu_cfg_data_delete(self, cpu_cfg_slot=None, cpu_cfg_data=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		SLXOS: 16r.1.00b    

	**Parent Instance Keyword Arg Tuple(s)**:
		:param cpu_cfg_slot: kwarg tuple.
		:type cpu_cfg_slot: (slot_id).

		:param slot_id: tuple arg.
		:type slot_id: (int)
		
		.. note::
			* range - ['0..255']

	**This Instance Keyword Arg Tuple**:
		:param cpu_cfg_data: kwarg tuple.
		:type cpu_cfg_data: (shaper_rate).

		:param shaper_rate: tuple arg.
		:type shaper_rate: (long)
		
		.. note::
			* range - ['0..4294967295']

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = [('pybind.slxos.v16r_1_00b.cpu_cfg_state.cpu_cfg_slot', u'cpu_cfg_slot')]
    bindings_list = [('pybind.slxos.v16r_1_00b.cpu_cfg_state.cpu_cfg_slot.cpu_cfg_data', 'pybind.slxos.v16r_1_00b.brocade_qos_operational', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'slot_id', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'cpu_cfg_data', 'keyval': 'shaper_rate', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, cpu_cfg_slot=cpu_cfg_slot, cpu_cfg_data=cpu_cfg_data)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def cpu_cfg_state_cpu_cfg_slot_cpu_cfg_group_delete(self, cpu_cfg_slot=None, cpu_cfg_group=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		SLXOS: 16r.1.00b    

	**Parent Instance Keyword Arg Tuple(s)**:
		:param cpu_cfg_slot: kwarg tuple.
		:type cpu_cfg_slot: (slot_id).

		:param slot_id: tuple arg.
		:type slot_id: (int)
		
		.. note::
			* range - ['0..255']

	**This Instance Keyword Arg Tuple**:
		:param cpu_cfg_group: kwarg tuple.
		:type cpu_cfg_group: (group_id).

		:param group_id: tuple arg.
		:type group_id: (int)
		
		.. note::
			* range - ['0..255']

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = [('pybind.slxos.v16r_1_00b.cpu_cfg_state.cpu_cfg_slot', u'cpu_cfg_slot')]
    bindings_list = [('pybind.slxos.v16r_1_00b.cpu_cfg_state.cpu_cfg_slot.cpu_cfg_group', 'pybind.slxos.v16r_1_00b.brocade_qos_operational', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'slot_id', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'cpu_cfg_group', 'keyval': 'group_id', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, cpu_cfg_slot=cpu_cfg_slot, cpu_cfg_group=cpu_cfg_group)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def cpu_cfg_state_cpu_cfg_slot_cpu_cfg_group_cpu_cfg_data_delete(self, cpu_cfg_slot=None, cpu_cfg_group=None, cpu_cfg_data=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		SLXOS: 16r.1.00b    

	**Parent Instance Keyword Arg Tuple(s)**:
		:param cpu_cfg_slot: kwarg tuple.
		:type cpu_cfg_slot: (slot_id).

		:param slot_id: tuple arg.
		:type slot_id: (int)
		
		.. note::
			* range - ['0..255']

		:param cpu_cfg_group: kwarg tuple.
		:type cpu_cfg_group: (group_id).

		:param group_id: tuple arg.
		:type group_id: (int)
		
		.. note::
			* range - ['0..255']

	**This Instance Keyword Arg Tuple**:
		:param cpu_cfg_data: kwarg tuple.
		:type cpu_cfg_data: (shaper_rate).

		:param shaper_rate: tuple arg.
		:type shaper_rate: (long)
		
		.. note::
			* range - ['0..4294967295']

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = [('pybind.slxos.v16r_1_00b.cpu_cfg_state.cpu_cfg_slot', u'cpu_cfg_slot'), ('pybind.slxos.v16r_1_00b.cpu_cfg_state.cpu_cfg_slot.cpu_cfg_group', u'cpu_cfg_group')]
    bindings_list = [('pybind.slxos.v16r_1_00b.cpu_cfg_state.cpu_cfg_slot.cpu_cfg_group.cpu_cfg_data', 'pybind.slxos.v16r_1_00b.brocade_qos_operational', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'slot_id', 'extra_keyval': ''}, {'keyval': 'group_id', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'cpu_cfg_data', 'keyval': 'shaper_rate', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, cpu_cfg_slot=cpu_cfg_slot, cpu_cfg_group=cpu_cfg_group, cpu_cfg_data=cpu_cfg_data)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def cpu_cfg_state_cpu_cfg_slot_cpu_cfg_group_cpu_cfg_prio_delete(self, cpu_cfg_slot=None, cpu_cfg_group=None, cpu_cfg_prio=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		SLXOS: 16r.1.00b    

	**Parent Instance Keyword Arg Tuple(s)**:
		:param cpu_cfg_slot: kwarg tuple.
		:type cpu_cfg_slot: (slot_id).

		:param slot_id: tuple arg.
		:type slot_id: (int)
		
		.. note::
			* range - ['0..255']

		:param cpu_cfg_group: kwarg tuple.
		:type cpu_cfg_group: (group_id).

		:param group_id: tuple arg.
		:type group_id: (int)
		
		.. note::
			* range - ['0..255']

	**This Instance Keyword Arg Tuple**:
		:param cpu_cfg_prio: kwarg tuple.
		:type cpu_cfg_prio: (prio_id).

		:param prio_id: tuple arg.
		:type prio_id: (int)
		
		.. note::
			* range - ['0..255']

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = [('pybind.slxos.v16r_1_00b.cpu_cfg_state.cpu_cfg_slot', u'cpu_cfg_slot'), ('pybind.slxos.v16r_1_00b.cpu_cfg_state.cpu_cfg_slot.cpu_cfg_group', u'cpu_cfg_group')]
    bindings_list = [('pybind.slxos.v16r_1_00b.cpu_cfg_state.cpu_cfg_slot.cpu_cfg_group.cpu_cfg_prio', 'pybind.slxos.v16r_1_00b.brocade_qos_operational', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'slot_id', 'extra_keyval': ''}, {'keyval': 'group_id', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'cpu_cfg_prio', 'keyval': 'prio_id', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, cpu_cfg_slot=cpu_cfg_slot, cpu_cfg_group=cpu_cfg_group, cpu_cfg_prio=cpu_cfg_prio)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def cpu_cfg_state_cpu_cfg_slot_cpu_cfg_group_cpu_cfg_prio_cpu_cfg_data_delete(self, cpu_cfg_slot=None, cpu_cfg_group=None, cpu_cfg_prio=None, cpu_cfg_data=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		SLXOS: 16r.1.00b    

	**Parent Instance Keyword Arg Tuple(s)**:
		:param cpu_cfg_slot: kwarg tuple.
		:type cpu_cfg_slot: (slot_id).

		:param slot_id: tuple arg.
		:type slot_id: (int)
		
		.. note::
			* range - ['0..255']

		:param cpu_cfg_group: kwarg tuple.
		:type cpu_cfg_group: (group_id).

		:param group_id: tuple arg.
		:type group_id: (int)
		
		.. note::
			* range - ['0..255']

		:param cpu_cfg_prio: kwarg tuple.
		:type cpu_cfg_prio: (prio_id).

		:param prio_id: tuple arg.
		:type prio_id: (int)
		
		.. note::
			* range - ['0..255']

	**This Instance Keyword Arg Tuple**:
		:param cpu_cfg_data: kwarg tuple.
		:type cpu_cfg_data: (shaper_rate).

		:param shaper_rate: tuple arg.
		:type shaper_rate: (long)
		
		.. note::
			* range - ['0..4294967295']

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = [('pybind.slxos.v16r_1_00b.cpu_cfg_state.cpu_cfg_slot', u'cpu_cfg_slot'), ('pybind.slxos.v16r_1_00b.cpu_cfg_state.cpu_cfg_slot.cpu_cfg_group', u'cpu_cfg_group'), ('pybind.slxos.v16r_1_00b.cpu_cfg_state.cpu_cfg_slot.cpu_cfg_group.cpu_cfg_prio', u'cpu_cfg_prio')]
    bindings_list = [('pybind.slxos.v16r_1_00b.cpu_cfg_state.cpu_cfg_slot.cpu_cfg_group.cpu_cfg_prio.cpu_cfg_data', 'pybind.slxos.v16r_1_00b.brocade_qos_operational', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'slot_id', 'extra_keyval': ''}, {'keyval': 'group_id', 'extra_keyval': ''}, {'keyval': 'prio_id', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'cpu_cfg_data', 'keyval': 'shaper_rate', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, cpu_cfg_slot=cpu_cfg_slot, cpu_cfg_group=cpu_cfg_group, cpu_cfg_prio=cpu_cfg_prio, cpu_cfg_data=cpu_cfg_data)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def cpu_info_state_cpu_info_egid_delete(self, cpu_info_egid=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		SLXOS: 16r.1.00b    

	**This Instance Keyword Arg Tuple**:
		:param cpu_info_egid: kwarg tuple.
		:type cpu_info_egid: (group_id).

		:param group_id: tuple arg.
		:type group_id: (int)
		
		.. note::
			* range - ['0..255']

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = []
    bindings_list = [('pybind.slxos.v16r_1_00b.cpu_info_state.cpu_info_egid', 'pybind.slxos.v16r_1_00b.brocade_qos_operational', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = []
    bindings_keyval = {'kwargs_key_name': u'cpu_info_egid', 'keyval': 'group_id', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, cpu_info_egid=cpu_info_egid)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def cpu_interface_state_delete(self, cpu_interface_state=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		SLXOS: 16r.1.00b    

	**This Instance Keyword Arg Tuple**:
		:param cpu_interface_state: kwarg tuple.
		:type cpu_interface_state: (ifname).

		:param ifname: tuple arg.
		:type ifname: (unicode)

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = []
    bindings_list = [('pybind.slxos.v16r_1_00b.cpu_interface_state', 'pybind.slxos.v16r_1_00b.brocade_sysdiag_operational', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = []
    bindings_keyval = {'kwargs_key_name': 'cpu_interface_state', 'keyval': 'ifname', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, cpu_interface_state=cpu_interface_state)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def crypto_ca_delete(self, ca=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		SLXOS: 16r.1.00b    

	**This Instance Keyword Arg Tuple**:
		:param ca: kwarg tuple.
		:type ca: (trustpoint).

		:param trustpoint: Trustpoint name
		:type trustpoint: (unicode)
		
		.. note::
			* length - [u'1..64']

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = []
    bindings_list = [('pybind.slxos.v16r_1_00b.crypto_sa.crypto.ca', 'pybind.slxos.v16r_1_00b.brocade_crypto', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = []
    bindings_keyval = {'kwargs_key_name': u'ca', 'keyval': 'trustpoint', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, ca=ca)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def crypto_key_delete(self, key=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		SLXOS: 16r.1.00b    

	**This Instance Keyword Arg Tuple**:
		:param key: kwarg tuple.
		:type key: (label, type, modulus).

		:param label: Key Label
		:type label: (unicode)
		
		.. note::
			* length - [u'1..64']

		:param type: Key Type
		:type type: (unicode)
		
		.. note::
			* enum - [u'dsa', u'rsa', u'ecdsa']

		:param modulus: Key Size
		:type modulus: (long)
		
		.. note::
			* range - ['0..4294967295']

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = []
    bindings_list = [('pybind.slxos.v16r_1_00b.crypto_sa.crypto.key', 'pybind.slxos.v16r_1_00b.brocade_crypto', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = []
    bindings_keyval = {'kwargs_key_name': u'key', 'keyval': 'label', 'extra_keyval': 'label, type, modulus'}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, key=key)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def diag_post_rbridge_id_delete(self, rbridge_id=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		NOS: 6.0.2b, 7.0.1a, 7.1.0
		SLXOS: 16r.1.00b    

	**This Instance Keyword Arg Tuple**:
		:param rbridge_id: kwarg tuple.
		:type rbridge_id: (rbridge_id).

		:param rbridge_id: Syntax: rbridgeId [rbridgeId]
		:type rbridge_id: (long)
		
		.. note::
			* range - ['0..4294967295']

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = []
    bindings_list = [('pybind.nos.v6_0_2b.diag.post.rbridge_id', 'pybind.nos.v6_0_2b.brocade_diagnostics', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.diag.post.rbridge_id', 'pybind.nos.v7_0_1a.brocade_diagnostics', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.diag.post.rbridge_id', 'pybind.nos.v7_1_0.brocade_diagnostics', 'pybind.nos.v7_1_0'), ('pybind.slxos.v16r_1_00b.diag.post.rbridge_id', 'pybind.slxos.v16r_1_00b.brocade_diagnostics', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = []
    bindings_keyval = {'kwargs_key_name': u'rbridge_id', 'keyval': 'rbridge_id', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, rbridge_id=rbridge_id)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def dpod_delete(self, port_id=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		NOS: 6.0.2b, 7.0.1a, 7.1.0
		SLXOS: 16r.1.00b    

	**This Instance Keyword Arg Tuple**:
		:param port_id: kwarg tuple.
		:type port_id: (port_id).

		:param port_id: Syntax: [rbridge-id/slot/port]
		:type port_id: (unicode)
		
		.. note::
			* length - [u'3..16']
			* pattern - ((([1-9]|[1-9][0-9]|1[0-9][0-9]|2[0-3][0-9])/)?(([0-9]|[1][0-6]))/([1-9]|[1-9][0-9]|[1-9][0-9][0-9])(:[1-4])?)

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = []
    bindings_list = [('pybind.nos.v6_0_2b.dpod.port_id', 'pybind.nos.v6_0_2b.brocade_license', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.dpod.port_id', 'pybind.nos.v7_0_1a.brocade_license', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.dpod.port_id', 'pybind.nos.v7_1_0.brocade_license', 'pybind.nos.v7_1_0'), ('pybind.slxos.v16r_1_00b.dpod.port_id', 'pybind.slxos.v16r_1_00b.brocade_license', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = []
    bindings_keyval = {'kwargs_key_name': u'port_id', 'keyval': 'port_id', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, port_id=port_id)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def dscp_exp_state_qos_mpls_delete(self, qos_mpls=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		SLXOS: 16r.1.00b    

	**This Instance Keyword Arg Tuple**:
		:param qos_mpls: kwarg tuple.
		:type qos_mpls: (map_name).

		:param map_name: tuple arg.
		:type map_name: (unicode)

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = []
    bindings_list = [('pybind.slxos.v16r_1_00b.dscp_exp_state.qos_mpls', 'pybind.slxos.v16r_1_00b.brocade_qos_operational', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = []
    bindings_keyval = {'kwargs_key_name': u'qos_mpls', 'keyval': 'map_name', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, qos_mpls=qos_mpls)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def event_handler_delete(self, event_handler_list=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		NOS: 6.0.2b, 7.0.1a, 7.1.0
		SLXOS: 16r.1.00b    

	**This Instance Keyword Arg Tuple**:
		:param event_handler_list: kwarg tuple.
		:type event_handler_list: (name).

		:param name: Event handler name
		:type name: (unicode)
		
		.. note::
			* pattern - [a-zA-Z]{1}([-a-zA-Z0-9\.\\\\@#\+\*\(\)=\{~\}%<>=$_\[\]\|]{0,31})

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = []
    bindings_list = [('pybind.nos.v6_0_2b.event_handler.event_handler_list', 'pybind.nos.v6_0_2b.brocade_event_handler', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.event_handler.event_handler_list', 'pybind.nos.v7_0_1a.brocade_event_handler', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.event_handler.event_handler_list', 'pybind.nos.v7_1_0.brocade_event_handler', 'pybind.nos.v7_1_0'), ('pybind.slxos.v16r_1_00b.event_handler.event_handler_list', 'pybind.slxos.v16r_1_00b.brocade_event_handler', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = []
    bindings_keyval = {'kwargs_key_name': u'event_handler_list', 'keyval': 'name', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, event_handler_list=event_handler_list)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def event_handler_activate_delete(self, name=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		SLXOS: 16r.1.00b    

	**This Instance Keyword Arg Tuple**:
		:param name: kwarg tuple.
		:type name: (name).

		:param name: Event handler name
		:type name: (unicode)
		
		.. note::
			* pattern - [a-zA-Z]{1}([-a-zA-Z0-9\.\\\\@#\+\*\(\)=\{~\}%<>=$_\[\]\|]{0,31})

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = []
    bindings_list = [('pybind.slxos.v16r_1_00b.event_handler.activate.name', 'pybind.slxos.v16r_1_00b.brocade_event_handler', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = []
    bindings_keyval = {'kwargs_key_name': u'name', 'keyval': 'name', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, name=name)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def event_handler_trigger_delete(self, event_handler_list=None, trigger=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		NOS: 6.0.2b, 7.0.1a, 7.1.0
		SLXOS: 16r.1.00b    

	**Parent Instance Keyword Arg Tuple(s)**:
		:param event_handler_list: kwarg tuple.
		:type event_handler_list: (name).

		:param name: Event handler name
		:type name: (unicode)
		
		.. note::
			* pattern - [a-zA-Z]{1}([-a-zA-Z0-9\.\\\\@#\+\*\(\)=\{~\}%<>=$_\[\]\|]{0,31})

	**This Instance Keyword Arg Tuple**:
		:param trigger: kwarg tuple.
		:type trigger: (trigger_id, vcs, raslog).

		:param trigger_id: tuple arg.
		:type trigger_id: (long)
		
		.. note::
			* range - ['0..4294967295']

		:param vcs: VCS event type.
		:type vcs: (unicode)
		
		.. note::
			* enum - [u'switch-bootup', u'switch-ready-for-configuration']

		:param raslog: RASlog Id.
		:type raslog: (unicode)
		
		.. note::
			* pattern - [a-zA-Z]{1}([-a-zA-Z0-9\.\\\\@#\+\*\(\)=\{~\}%<>=$_\[\]\|]{0,31})

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = [('pybind.nos.v7_1_0.event_handler.event_handler_list', u'event_handler_list'), ('pybind.nos.v7_0_1a.event_handler.event_handler_list', u'event_handler_list'), ('pybind.slxos.v16r_1_00b.event_handler.event_handler_list', u'event_handler_list'), ('pybind.nos.v6_0_2b.event_handler.event_handler_list', u'event_handler_list')]
    bindings_list = [('pybind.nos.v6_0_2b.event_handler.event_handler_list.trigger', 'pybind.nos.v6_0_2b.brocade_event_handler', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.event_handler.event_handler_list.trigger', 'pybind.nos.v7_0_1a.brocade_event_handler', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.event_handler.event_handler_list.trigger', 'pybind.nos.v7_1_0.brocade_event_handler', 'pybind.nos.v7_1_0'), ('pybind.slxos.v16r_1_00b.event_handler.event_handler_list.trigger', 'pybind.slxos.v16r_1_00b.brocade_event_handler', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'trigger', 'keyval': 'trigger_id', 'extra_keyval': 'trigger_id, vcs, raslog'}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, event_handler_list=event_handler_list, trigger=trigger)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def exp_dscp_state_qos_mpls_delete(self, qos_mpls=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		SLXOS: 16r.1.00b    

	**This Instance Keyword Arg Tuple**:
		:param qos_mpls: kwarg tuple.
		:type qos_mpls: (map_name).

		:param map_name: tuple arg.
		:type map_name: (unicode)

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = []
    bindings_list = [('pybind.slxos.v16r_1_00b.exp_dscp_state.qos_mpls', 'pybind.slxos.v16r_1_00b.brocade_qos_operational', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = []
    bindings_keyval = {'kwargs_key_name': u'qos_mpls', 'keyval': 'map_name', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, qos_mpls=qos_mpls)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def exp_traffic_class_state_qos_mpls_delete(self, qos_mpls=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		SLXOS: 16r.1.00b    

	**This Instance Keyword Arg Tuple**:
		:param qos_mpls: kwarg tuple.
		:type qos_mpls: (map_name).

		:param map_name: tuple arg.
		:type map_name: (unicode)

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = []
    bindings_list = [('pybind.slxos.v16r_1_00b.exp_traffic_class_state.qos_mpls', 'pybind.slxos.v16r_1_00b.brocade_qos_operational', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = []
    bindings_keyval = {'kwargs_key_name': u'qos_mpls', 'keyval': 'map_name', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, qos_mpls=qos_mpls)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def fabric_route_mcast_rbridge_id_delete(self, rbridge_id=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		NOS: 6.0.2b, 7.0.1a, 7.1.0
		SLXOS: 16r.1.00b    

	**This Instance Keyword Arg Tuple**:
		:param rbridge_id: kwarg tuple.
		:type rbridge_id: (rbridge_id).

		:param rbridge_id: Syntax: rbridgeId [rbridgeId]
		:type rbridge_id: (long)
		
		.. note::
			* range - ['0..4294967295']

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = []
    bindings_list = [('pybind.nos.v6_0_2b.fabric.route.mcast.rbridge_id', 'pybind.nos.v6_0_2b.brocade_fabric_service', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.fabric.route.mcast.rbridge_id', 'pybind.nos.v7_0_1a.brocade_fabric_service', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.fabric.route.mcast.rbridge_id', 'pybind.nos.v7_1_0.brocade_fabric_service', 'pybind.nos.v7_1_0'), ('pybind.slxos.v16r_1_00b.fabric.route.mcast.rbridge_id', 'pybind.slxos.v16r_1_00b.brocade_fabric_service', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = []
    bindings_keyval = {'kwargs_key_name': u'rbridge_id', 'keyval': 'rbridge_id', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, rbridge_id=rbridge_id)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def fcoe_fabric_map_delete(self, fcoe_fabric_map=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		NOS: 6.0.2b, 7.0.1a, 7.1.0
		SLXOS: 16r.1.00b    

	**This Instance Keyword Arg Tuple**:
		:param fcoe_fabric_map: kwarg tuple.
		:type fcoe_fabric_map: (fcoe_fabric_map_name).

		:param fcoe_fabric_map_name: FCoE Fabric-map name (Max Size - 31)
		:type fcoe_fabric_map_name: (unicode)
		
		.. note::
			* length - [u'1..31']

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = []
    bindings_list = [('pybind.nos.v6_0_2b.fcoe.fcoe_fabric_map', 'pybind.nos.v6_0_2b.brocade_fcoe', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.fcoe.fcoe_fabric_map', 'pybind.nos.v7_0_1a.brocade_fcoe', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.fcoe.fcoe_fabric_map', 'pybind.nos.v7_1_0.brocade_fcoe', 'pybind.nos.v7_1_0'), ('pybind.slxos.v16r_1_00b.fcoe.fcoe_fabric_map', 'pybind.slxos.v16r_1_00b.brocade_fcoe', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = []
    bindings_keyval = {'kwargs_key_name': u'fcoe_fabric_map', 'keyval': 'fcoe_fabric_map_name', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, fcoe_fabric_map=fcoe_fabric_map)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def fcoe_fabric_map_fcf_group_delete(self, fcoe_fabric_map=None, fcoe_fcf_map=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		NOS: 6.0.2b, 7.0.1a, 7.1.0
		SLXOS: 16r.1.00b    

	**Parent Instance Keyword Arg Tuple(s)**:
		:param fcoe_fabric_map: kwarg tuple.
		:type fcoe_fabric_map: (fcoe_fabric_map_name).

		:param fcoe_fabric_map_name: FCoE Fabric-map name (Max Size - 31)
		:type fcoe_fabric_map_name: (unicode)
		
		.. note::
			* length - [u'1..31']

	**This Instance Keyword Arg Tuple**:
		:param fcoe_fcf_map: kwarg tuple.
		:type fcoe_fcf_map: (fcf_map_name).

		:param fcf_map_name: tuple arg.
		:type fcf_map_name: (unicode)
		
		.. note::
			* length - [u'1..31']

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = [('pybind.nos.v7_1_0.fcoe.fcoe_fabric_map', u'fcoe_fabric_map'), ('pybind.nos.v7_0_1a.fcoe.fcoe_fabric_map', u'fcoe_fabric_map'), ('pybind.slxos.v16r_1_00b.fcoe.fcoe_fabric_map', u'fcoe_fabric_map'), ('pybind.nos.v6_0_2b.fcoe.fcoe_fabric_map', u'fcoe_fabric_map')]
    bindings_list = [('pybind.nos.v6_0_2b.fcoe.fcoe_fabric_map.fcoe_fcf_map', 'pybind.nos.v6_0_2b.brocade_fcoe', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.fcoe.fcoe_fabric_map.fcoe_fcf_map', 'pybind.nos.v7_0_1a.brocade_fcoe', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.fcoe.fcoe_fabric_map.fcoe_fcf_map', 'pybind.nos.v7_1_0.brocade_fcoe', 'pybind.nos.v7_1_0'), ('pybind.slxos.v16r_1_00b.fcoe.fcoe_fabric_map.fcoe_fcf_map', 'pybind.slxos.v16r_1_00b.brocade_fcoe', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'fcoe_fabric_map_name', 'extra_keyval': ''}, {'keyval': 'fcoe_fabric_map_name', 'extra_keyval': ''}, {'keyval': 'fcoe_fabric_map_name', 'extra_keyval': ''}, {'keyval': 'fcoe_fabric_map_name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'fcoe_fcf_map', 'keyval': 'fcf_map_name', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, fcoe_fabric_map=fcoe_fabric_map, fcoe_fcf_map=fcoe_fcf_map)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def fcoe_fcoe_map_delete(self, fcoe_map=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		NOS: 6.0.2b, 7.0.1a, 7.1.0
		SLXOS: 16r.1.00b    

	**This Instance Keyword Arg Tuple**:
		:param fcoe_map: kwarg tuple.
		:type fcoe_map: (fcoe_map_name).

		:param fcoe_map_name: FCoE Map name (Max Size - 32)
		:type fcoe_map_name: (unicode)
		
		.. note::
			* pattern - [a-zA-Z]{1}([-a-zA-Z0-9\.\\\\@#\+\*\(\)=\{~\}%<>=$_\[\]\|]{0,31})

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = []
    bindings_list = [('pybind.nos.v6_0_2b.fcoe.fcoe_map', 'pybind.nos.v6_0_2b.brocade_fcoe', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.fcoe.fcoe_map', 'pybind.nos.v7_0_1a.brocade_fcoe', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.fcoe.fcoe_map', 'pybind.nos.v7_1_0.brocade_fcoe', 'pybind.nos.v7_1_0'), ('pybind.slxos.v16r_1_00b.fcoe.fcoe_map', 'pybind.slxos.v16r_1_00b.brocade_fcoe', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = []
    bindings_keyval = {'kwargs_key_name': u'fcoe_map', 'keyval': 'fcoe_map_name', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, fcoe_map=fcoe_map)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def filter_change_update_delay_delete(self, filter_change_update_delay=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		NOS: 6.0.2b, 7.0.1a, 7.1.0
		SLXOS: 16r.1.00b    

	**This Instance Keyword Arg Tuple**:
		:param filter_change_update_delay: kwarg tuple.
		:type filter_change_update_delay: (filter_delay_value).

		:param filter_delay_value: tuple arg.
		:type filter_delay_value: (long)
		
		.. note::
			* range - ['0..4294967295']

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = []
    bindings_list = [('pybind.nos.v6_0_2b.hide_filter_change_update_delay_holder.filter_change_update_delay', 'pybind.nos.v6_0_2b.brocade_ip_policy', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.hide_filter_change_update_delay_holder.filter_change_update_delay', 'pybind.nos.v7_0_1a.brocade_ip_policy', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.hide_filter_change_update_delay_holder.filter_change_update_delay', 'pybind.nos.v7_1_0.brocade_ip_policy', 'pybind.nos.v7_1_0'), ('pybind.slxos.v16r_1_00b.hide_filter_change_update_delay_holder.filter_change_update_delay', 'pybind.slxos.v16r_1_00b.brocade_ip_policy', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = []
    bindings_keyval = {'kwargs_key_name': u'filter_change_update_delay', 'keyval': 'filter_delay_value', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, filter_change_update_delay=filter_change_update_delay)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def hardware_connector_delete(self, connector=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		NOS: 6.0.2b, 7.0.1a, 7.1.0
		SLXOS: 16r.1.00b    

	**This Instance Keyword Arg Tuple**:
		:param connector: kwarg tuple.
		:type connector: (name).

		:param name: tuple arg.
		:type name: (unicode)
		
		.. note::
			* length - [u'3..16']
			* pattern - ((([1-9]|[1-9][0-9]|1[0-9][0-9]|2[0-3][0-9])/)?(([0-9]|[1][0-6]))/([1-9]|[1-9][0-9]|[1-9][0-9][0-9])?)

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = []
    bindings_list = [('pybind.nos.v6_0_2b.hardware.connector', 'pybind.nos.v6_0_2b.brocade_hardware', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.hardware.connector', 'pybind.nos.v7_0_1a.brocade_hardware', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.hardware.connector', 'pybind.nos.v7_1_0.brocade_hardware', 'pybind.nos.v7_1_0'), ('pybind.slxos.v16r_1_00b.hardware.connector', 'pybind.slxos.v16r_1_00b.brocade_hardware', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = []
    bindings_keyval = {'kwargs_key_name': u'connector', 'keyval': 'name', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, connector=connector)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def hardware_connector_group_delete(self, connector_group=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		NOS: 6.0.2b, 7.0.1a, 7.1.0    

	**This Instance Keyword Arg Tuple**:
		:param connector_group: kwarg tuple.
		:type connector_group: (id).

		:param id: tuple arg.
		:type id: (unicode)
		
		.. note::
			* length - [u'3..16']
			* pattern - ((([1-9]|[1-9][0-9]|1[0-9][0-9]|2[0-3][0-9])/)?(([0-9]|[1][0-6]))/([1-9]|[1-9][0-9]|[1-9][0-9][0-9])(:[1-4])?)

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = []
    bindings_list = [('pybind.nos.v6_0_2b.hardware.connector_group', 'pybind.nos.v6_0_2b.brocade_hardware', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.hardware.connector_group', 'pybind.nos.v7_0_1a.brocade_hardware', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.hardware.connector_group', 'pybind.nos.v7_1_0.brocade_hardware', 'pybind.nos.v7_1_0')]
    composed_child_list = []
    compositions_keyval_list = []
    bindings_keyval = {'kwargs_key_name': u'connector_group', 'keyval': 'id', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, connector_group=connector_group)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def hardware_custom_profile_kap_delete(self, kap_custom_profile=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		NOS: 6.0.2b, 7.0.1a, 7.1.0
		SLXOS: 16r.1.00b    

	**This Instance Keyword Arg Tuple**:
		:param kap_custom_profile: kwarg tuple.
		:type kap_custom_profile: (name).

		:param name: tuple arg.
		:type name: (unicode)
		
		.. note::
			* length - [u'1..64']

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = []
    bindings_list = [('pybind.nos.v6_0_2b.hardware.custom_profile.kap_custom_profile', 'pybind.nos.v6_0_2b.brocade_hardware', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.hardware.custom_profile.kap_custom_profile', 'pybind.nos.v7_0_1a.brocade_hardware', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.hardware.custom_profile.kap_custom_profile', 'pybind.nos.v7_1_0.brocade_hardware', 'pybind.nos.v7_1_0'), ('pybind.slxos.v16r_1_00b.hardware.custom_profile.kap_custom_profile', 'pybind.slxos.v16r_1_00b.brocade_hardware', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = []
    bindings_keyval = {'kwargs_key_name': u'kap_custom_profile', 'keyval': 'name', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, kap_custom_profile=kap_custom_profile)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def hardware_flexport_delete(self, flexport=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		NOS: 6.0.2b, 7.0.1a, 7.1.0    

	**This Instance Keyword Arg Tuple**:
		:param flexport: kwarg tuple.
		:type flexport: (id).

		:param id: tuple arg.
		:type id: (unicode)
		
		.. note::
			* length - [u'3..16']
			* pattern - ((([1-9]|[1-9][0-9]|1[0-9][0-9]|2[0-3][0-9])/)?(([0-9]|[1][0-6]))/([1-9]|[1-9][0-9]|[1-9][0-9][0-9])(:[1-4])?)

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = []
    bindings_list = [('pybind.nos.v6_0_2b.hardware.flexport', 'pybind.nos.v6_0_2b.brocade_hardware', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.hardware.flexport', 'pybind.nos.v7_0_1a.brocade_hardware', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.hardware.flexport', 'pybind.nos.v7_1_0.brocade_hardware', 'pybind.nos.v7_1_0')]
    composed_child_list = []
    compositions_keyval_list = []
    bindings_keyval = {'kwargs_key_name': u'flexport', 'keyval': 'id', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, flexport=flexport)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def hardware_port_group_delete(self, port_group=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		NOS: 6.0.2b, 7.0.1a, 7.1.0
		SLXOS: 16r.1.00b    

	**This Instance Keyword Arg Tuple**:
		:param port_group: kwarg tuple.
		:type port_group: (name).

		:param name: tuple arg.
		:type name: (unicode)
		
		.. note::
			* length - [u'3..16']
			* pattern - ((([1-9]|[1-9][0-9]|1[0-9][0-9]|2[0-3][0-9])/)?(([0-9]|[1][0-6]))/([1-9]|[1-9][0-9])(:[1-4])?)

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = []
    bindings_list = [('pybind.nos.v6_0_2b.hardware.port_group', 'pybind.nos.v6_0_2b.brocade_hardware', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.hardware.port_group', 'pybind.nos.v7_0_1a.brocade_hardware', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.hardware.port_group', 'pybind.nos.v7_1_0.brocade_hardware', 'pybind.nos.v7_1_0'), ('pybind.slxos.v16r_1_00b.hardware.port_group', 'pybind.slxos.v16r_1_00b.brocade_hardware', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = []
    bindings_keyval = {'kwargs_key_name': u'port_group', 'keyval': 'name', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, port_group=port_group)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def http_server_use_vrf_delete(self, use_vrf=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		NOS: 7.0.1a, 7.1.0
		SLXOS: 16r.1.00b    

	**This Instance Keyword Arg Tuple**:
		:param use_vrf: kwarg tuple.
		:type use_vrf: (use_vrf_name, http_vrf_shutdown).

		:param use_vrf_name: tuple arg.
		:type use_vrf_name: (unicode)
		
		.. note::
			* length - [u'0..max']

		:param http_vrf_shutdown: Shutdown HTTP/HTTPS server on the given vrf
		:type http_vrf_shutdown: (YANGBool)

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = []
    bindings_list = [('pybind.nos.v7_0_1a.http_sa.http.server.http_vrf_cont.use_vrf', 'pybind.nos.v7_0_1a.brocade_http_config', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.http_sa.http.server.http_vrf_cont.use_vrf', 'pybind.nos.v7_1_0.brocade_http_config', 'pybind.nos.v7_1_0'), ('pybind.slxos.v16r_1_00b.http_sa.http.server.http_vrf_cont.use_vrf', 'pybind.slxos.v16r_1_00b.brocade_http_config', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = []
    bindings_keyval = {'kwargs_key_name': u'use_vrf', 'keyval': 'use_vrf_name', 'extra_keyval': 'use_vrf_name, secure_and_plain, http_vrf_shutdown'}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, use_vrf=use_vrf)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def igmp_snooping_state_igmp_groups_delete(self, igmp_groups=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		SLXOS: 16r.1.00b    

	**This Instance Keyword Arg Tuple**:
		:param igmp_groups: kwarg tuple.
		:type igmp_groups: (group_addr, interface_name).

		:param group_addr: tuple arg.
		:type group_addr: (unicode)
		
		.. note::
			* pattern - (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?

		:param interface_name: tuple arg.
		:type interface_name: (unicode)

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = []
    bindings_list = [('pybind.slxos.v16r_1_00b.igmp_snooping_state.igmp_groups', 'pybind.slxos.v16r_1_00b.brocade_mc_hms_operational', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = []
    bindings_keyval = {'kwargs_key_name': u'igmp_groups', 'keyval': 'group_addr, interface_name', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, igmp_groups=igmp_groups)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def igmp_snooping_state_igmp_groups_igmp_groups_delete(self, igmp_groups=None, igmp_groups_=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		SLXOS: 16r.1.00b    

	**Parent Instance Keyword Arg Tuple(s)**:
		:param igmp_groups: kwarg tuple.
		:type igmp_groups: (group_addr, interface_name).

		:param group_addr: tuple arg.
		:type group_addr: (unicode)
		
		.. note::
			* pattern - (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?

		:param interface_name: tuple arg.
		:type interface_name: (unicode)

	**This Instance Keyword Arg Tuple**:
		:param igmp_groups_: kwarg tuple.
		:type igmp_groups_: (group_addr, interface_name).

		:param group_addr: tuple arg.
		:type group_addr: (long)
		
		.. note::
			* range - ['0..4294967295']

		:param interface_name: tuple arg.
		:type interface_name: (unicode)

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = [('pybind.slxos.v16r_1_00b.igmp_snooping_state.igmp_groups', u'igmp_groups')]
    bindings_list = [('pybind.slxos.v16r_1_00b.igmp_snooping_state.igmp_groups.igmp_groups', 'pybind.slxos.v16r_1_00b.brocade_mc_hms_operational', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'group_addr, interface_name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'igmp_groups_', 'keyval': 'group_addr, interface_name', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, igmp_groups=igmp_groups, igmp_groups_=igmp_groups_)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def igmp_snooping_state_igmp_groups_igmp_groups_expiry_time_delete(self, igmp_groups=None, expiry_time=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		SLXOS: 16r.1.00b    

	**Parent Instance Keyword Arg Tuple(s)**:
		:param igmp_groups: kwarg tuple.
		:type igmp_groups: (group_addr, interface_name).

		:param group_addr: tuple arg.
		:type group_addr: (unicode)
		
		.. note::
			* pattern - (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?

		:param interface_name: tuple arg.
		:type interface_name: (unicode)

	**This Instance Keyword Arg Tuple**:
		:param expiry_time: kwarg tuple.
		:type expiry_time: (group_addr, interface_name).

		:param group_addr: tuple arg.
		:type group_addr: (long)
		
		.. note::
			* range - ['0..4294967295']

		:param interface_name: tuple arg.
		:type interface_name: (unicode)

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = [('pybind.slxos.v16r_1_00b.igmp_snooping_state.igmp_groups', u'igmp_groups')]
    bindings_list = [('pybind.slxos.v16r_1_00b.igmp_snooping_state.igmp_groups.igmp_groups_', 'pybind.slxos.v16r_1_00b.brocade_mc_hms_operational', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'group_addr, interface_name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'expiry_time', 'keyval': 'group_addr, interface_name', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, igmp_groups=igmp_groups, expiry_time=expiry_time)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def igmp_snooping_state_igmp_groups_igmp_groups_igmpv3_sources_delete(self, igmp_groups=None, igmpv3_sources=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		SLXOS: 16r.1.00b    

	**Parent Instance Keyword Arg Tuple(s)**:
		:param igmp_groups: kwarg tuple.
		:type igmp_groups: (group_addr, interface_name).

		:param group_addr: tuple arg.
		:type group_addr: (unicode)
		
		.. note::
			* pattern - (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?

		:param interface_name: tuple arg.
		:type interface_name: (unicode)

	**This Instance Keyword Arg Tuple**:
		:param igmpv3_sources: kwarg tuple.
		:type igmpv3_sources: (interface_name).

		:param interface_name: tuple arg.
		:type interface_name: (unicode)

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = [('pybind.slxos.v16r_1_00b.igmp_snooping_state.igmp_groups', u'igmp_groups')]
    bindings_list = [('pybind.slxos.v16r_1_00b.igmp_snooping_state.igmp_groups.igmp_groups_.igmpv3_sources', 'pybind.slxos.v16r_1_00b.brocade_mc_hms_operational', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'group_addr, interface_name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'igmpv3_sources', 'keyval': 'interface_name', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, igmp_groups=igmp_groups, igmpv3_sources=igmpv3_sources)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def igmp_snooping_state_igmp_groups_igmp_groups_igmpv3_sources_excl_src_ip_delete(self, igmp_groups=None, igmpv3_sources=None, excl_src_ip=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		SLXOS: 16r.1.00b    

	**Parent Instance Keyword Arg Tuple(s)**:
		:param igmp_groups: kwarg tuple.
		:type igmp_groups: (group_addr, interface_name).

		:param group_addr: tuple arg.
		:type group_addr: (unicode)
		
		.. note::
			* pattern - (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?

		:param interface_name: tuple arg.
		:type interface_name: (unicode)

		:param igmpv3_sources: kwarg tuple.
		:type igmpv3_sources: (interface_name).

		:param interface_name: tuple arg.
		:type interface_name: (unicode)

	**This Instance Keyword Arg Tuple**:
		:param excl_src_ip: kwarg tuple.
		:type excl_src_ip: (ipv4_addr).

		:param ipv4_addr: tuple arg.
		:type ipv4_addr: (long)
		
		.. note::
			* range - ['0..4294967295']

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = [('pybind.slxos.v16r_1_00b.igmp_snooping_state.igmp_groups', u'igmp_groups'), ('pybind.slxos.v16r_1_00b.igmp_snooping_state.igmp_groups.igmp_groups_.igmpv3_sources', u'igmpv3_sources')]
    bindings_list = [('pybind.slxos.v16r_1_00b.igmp_snooping_state.igmp_groups.igmp_groups_.igmpv3_sources.excl_src_ip', 'pybind.slxos.v16r_1_00b.brocade_mc_hms_operational', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'group_addr, interface_name', 'extra_keyval': ''}, {'keyval': 'interface_name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'excl_src_ip', 'keyval': 'ipv4_addr', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, igmp_groups=igmp_groups, igmpv3_sources=igmpv3_sources, excl_src_ip=excl_src_ip)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def igmp_snooping_state_igmp_groups_igmp_groups_igmpv3_sources_incl_src_ip_delete(self, igmp_groups=None, igmpv3_sources=None, incl_src_ip=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		SLXOS: 16r.1.00b    

	**Parent Instance Keyword Arg Tuple(s)**:
		:param igmp_groups: kwarg tuple.
		:type igmp_groups: (group_addr, interface_name).

		:param group_addr: tuple arg.
		:type group_addr: (unicode)
		
		.. note::
			* pattern - (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?

		:param interface_name: tuple arg.
		:type interface_name: (unicode)

		:param igmpv3_sources: kwarg tuple.
		:type igmpv3_sources: (interface_name).

		:param interface_name: tuple arg.
		:type interface_name: (unicode)

	**This Instance Keyword Arg Tuple**:
		:param incl_src_ip: kwarg tuple.
		:type incl_src_ip: (ipv4_addr).

		:param ipv4_addr: tuple arg.
		:type ipv4_addr: (long)
		
		.. note::
			* range - ['0..4294967295']

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = [('pybind.slxos.v16r_1_00b.igmp_snooping_state.igmp_groups', u'igmp_groups'), ('pybind.slxos.v16r_1_00b.igmp_snooping_state.igmp_groups.igmp_groups_.igmpv3_sources', u'igmpv3_sources')]
    bindings_list = [('pybind.slxos.v16r_1_00b.igmp_snooping_state.igmp_groups.igmp_groups_.igmpv3_sources.incl_src_ip', 'pybind.slxos.v16r_1_00b.brocade_mc_hms_operational', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'group_addr, interface_name', 'extra_keyval': ''}, {'keyval': 'interface_name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'incl_src_ip', 'keyval': 'ipv4_addr', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, igmp_groups=igmp_groups, igmpv3_sources=igmpv3_sources, incl_src_ip=incl_src_ip)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def igmp_snooping_state_igmp_l3_interfaces_delete(self, igmp_l3_interfaces=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		SLXOS: 16r.1.00b    

	**This Instance Keyword Arg Tuple**:
		:param igmp_l3_interfaces: kwarg tuple.
		:type igmp_l3_interfaces: (interface_name).

		:param interface_name: tuple arg.
		:type interface_name: (unicode)

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = []
    bindings_list = [('pybind.slxos.v16r_1_00b.igmp_snooping_state.igmp_l3_interfaces', 'pybind.slxos.v16r_1_00b.brocade_mc_hms_operational', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = []
    bindings_keyval = {'kwargs_key_name': u'igmp_l3_interfaces', 'keyval': 'interface_name', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, igmp_l3_interfaces=igmp_l3_interfaces)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def igmp_snooping_state_igmp_l3_interfaces_igmp_l3_interfaces_delete(self, igmp_l3_interfaces=None, igmp_l3_interfaces_=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		SLXOS: 16r.1.00b    

	**Parent Instance Keyword Arg Tuple(s)**:
		:param igmp_l3_interfaces: kwarg tuple.
		:type igmp_l3_interfaces: (interface_name).

		:param interface_name: tuple arg.
		:type interface_name: (unicode)

	**This Instance Keyword Arg Tuple**:
		:param igmp_l3_interfaces_: kwarg tuple.
		:type igmp_l3_interfaces_: (interface_name).

		:param interface_name: tuple arg.
		:type interface_name: (unicode)

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = [('pybind.slxos.v16r_1_00b.igmp_snooping_state.igmp_l3_interfaces', u'igmp_l3_interfaces')]
    bindings_list = [('pybind.slxos.v16r_1_00b.igmp_snooping_state.igmp_l3_interfaces.igmp_l3_interfaces', 'pybind.slxos.v16r_1_00b.brocade_mc_hms_operational', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'interface_name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'igmp_l3_interfaces_', 'keyval': 'interface_name', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, igmp_l3_interfaces=igmp_l3_interfaces, igmp_l3_interfaces_=igmp_l3_interfaces_)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def igmp_snooping_state_igmp_l3_interfaces_igmp_l3_interfaces_igmp_querier_delete(self, igmp_l3_interfaces=None, igmp_querier=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		SLXOS: 16r.1.00b    

	**Parent Instance Keyword Arg Tuple(s)**:
		:param igmp_l3_interfaces: kwarg tuple.
		:type igmp_l3_interfaces: (interface_name).

		:param interface_name: tuple arg.
		:type interface_name: (unicode)

	**This Instance Keyword Arg Tuple**:
		:param igmp_querier: kwarg tuple.
		:type igmp_querier: (interface_name).

		:param interface_name: tuple arg.
		:type interface_name: (unicode)

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = [('pybind.slxos.v16r_1_00b.igmp_snooping_state.igmp_l3_interfaces', u'igmp_l3_interfaces')]
    bindings_list = [('pybind.slxos.v16r_1_00b.igmp_snooping_state.igmp_l3_interfaces.igmp_l3_interfaces_', 'pybind.slxos.v16r_1_00b.brocade_mc_hms_operational', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'interface_name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'igmp_querier', 'keyval': 'interface_name', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, igmp_l3_interfaces=igmp_l3_interfaces, igmp_querier=igmp_querier)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def igmp_snooping_state_igmp_multicast_snooping_vlans_delete(self, igmp_multicast_snooping_vlans=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		SLXOS: 16r.1.00b    

	**This Instance Keyword Arg Tuple**:
		:param igmp_multicast_snooping_vlans: kwarg tuple.
		:type igmp_multicast_snooping_vlans: (vlan_id).

		:param vlan_id: tuple arg.
		:type vlan_id: (long)
		
		.. note::
			* range - ['0..4294967295']

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = []
    bindings_list = [('pybind.slxos.v16r_1_00b.igmp_snooping_state.igmp_multicast_snooping_vlans', 'pybind.slxos.v16r_1_00b.brocade_mc_hms_operational', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = []
    bindings_keyval = {'kwargs_key_name': u'igmp_multicast_snooping_vlans', 'keyval': 'vlan_id', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, igmp_multicast_snooping_vlans=igmp_multicast_snooping_vlans)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def igmp_snooping_state_igmp_multicast_snooping_vlans_igmp_multicast_snooping_vlans_delete(self, igmp_multicast_snooping_vlans=None, igmp_multicast_snooping_vlans_=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		SLXOS: 16r.1.00b    

	**Parent Instance Keyword Arg Tuple(s)**:
		:param igmp_multicast_snooping_vlans: kwarg tuple.
		:type igmp_multicast_snooping_vlans: (vlan_id).

		:param vlan_id: tuple arg.
		:type vlan_id: (long)
		
		.. note::
			* range - ['0..4294967295']

	**This Instance Keyword Arg Tuple**:
		:param igmp_multicast_snooping_vlans_: kwarg tuple.
		:type igmp_multicast_snooping_vlans_: (vlan_id).

		:param vlan_id: tuple arg.
		:type vlan_id: (long)
		
		.. note::
			* range - ['0..4294967295']

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = [('pybind.slxos.v16r_1_00b.igmp_snooping_state.igmp_multicast_snooping_vlans', u'igmp_multicast_snooping_vlans')]
    bindings_list = [('pybind.slxos.v16r_1_00b.igmp_snooping_state.igmp_multicast_snooping_vlans.igmp_multicast_snooping_vlans', 'pybind.slxos.v16r_1_00b.brocade_mc_hms_operational', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'vlan_id', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'igmp_multicast_snooping_vlans_', 'keyval': 'vlan_id', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, igmp_multicast_snooping_vlans=igmp_multicast_snooping_vlans, igmp_multicast_snooping_vlans_=igmp_multicast_snooping_vlans_)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def igmp_snooping_state_igmp_multicast_snooping_vlans_igmp_multicast_snooping_vlans_igmp_sn_status_delete(self, igmp_multicast_snooping_vlans=None, igmp_sn_status=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		SLXOS: 16r.1.00b    

	**Parent Instance Keyword Arg Tuple(s)**:
		:param igmp_multicast_snooping_vlans: kwarg tuple.
		:type igmp_multicast_snooping_vlans: (vlan_id).

		:param vlan_id: tuple arg.
		:type vlan_id: (long)
		
		.. note::
			* range - ['0..4294967295']

	**This Instance Keyword Arg Tuple**:
		:param igmp_sn_status: kwarg tuple.
		:type igmp_sn_status: (vlan_id).

		:param vlan_id: tuple arg.
		:type vlan_id: (long)
		
		.. note::
			* range - ['0..4294967295']

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = [('pybind.slxos.v16r_1_00b.igmp_snooping_state.igmp_multicast_snooping_vlans', u'igmp_multicast_snooping_vlans')]
    bindings_list = [('pybind.slxos.v16r_1_00b.igmp_snooping_state.igmp_multicast_snooping_vlans.igmp_multicast_snooping_vlans_', 'pybind.slxos.v16r_1_00b.brocade_mc_hms_operational', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'vlan_id', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'igmp_sn_status', 'keyval': 'vlan_id', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, igmp_multicast_snooping_vlans=igmp_multicast_snooping_vlans, igmp_sn_status=igmp_sn_status)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def igmp_snooping_state_igmp_snooping_mrouters_delete(self, igmp_snooping_mrouters=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		SLXOS: 16r.1.00b    

	**This Instance Keyword Arg Tuple**:
		:param igmp_snooping_mrouters: kwarg tuple.
		:type igmp_snooping_mrouters: (vlan_id).

		:param vlan_id: tuple arg.
		:type vlan_id: (long)
		
		.. note::
			* range - ['0..4294967295']

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = []
    bindings_list = [('pybind.slxos.v16r_1_00b.igmp_snooping_state.igmp_snooping_mrouters', 'pybind.slxos.v16r_1_00b.brocade_mc_hms_operational', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = []
    bindings_keyval = {'kwargs_key_name': u'igmp_snooping_mrouters', 'keyval': 'vlan_id', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, igmp_snooping_mrouters=igmp_snooping_mrouters)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def igmp_snooping_state_igmp_snooping_mrouters_igmp_snooping_mrouters_delete(self, igmp_snooping_mrouters=None, igmp_snooping_mrouters_=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		SLXOS: 16r.1.00b    

	**Parent Instance Keyword Arg Tuple(s)**:
		:param igmp_snooping_mrouters: kwarg tuple.
		:type igmp_snooping_mrouters: (vlan_id).

		:param vlan_id: tuple arg.
		:type vlan_id: (long)
		
		.. note::
			* range - ['0..4294967295']

	**This Instance Keyword Arg Tuple**:
		:param igmp_snooping_mrouters_: kwarg tuple.
		:type igmp_snooping_mrouters_: (vlan_id).

		:param vlan_id: tuple arg.
		:type vlan_id: (long)
		
		.. note::
			* range - ['0..4294967295']

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = [('pybind.slxos.v16r_1_00b.igmp_snooping_state.igmp_snooping_mrouters', u'igmp_snooping_mrouters')]
    bindings_list = [('pybind.slxos.v16r_1_00b.igmp_snooping_state.igmp_snooping_mrouters.igmp_snooping_mrouters', 'pybind.slxos.v16r_1_00b.brocade_mc_hms_operational', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'vlan_id', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'igmp_snooping_mrouters_', 'keyval': 'vlan_id', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, igmp_snooping_mrouters=igmp_snooping_mrouters, igmp_snooping_mrouters_=igmp_snooping_mrouters_)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def igmp_snooping_state_igmp_snooping_mrouters_igmp_snooping_mrouters_expiry_time_delete(self, igmp_snooping_mrouters=None, expiry_time=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		SLXOS: 16r.1.00b    

	**Parent Instance Keyword Arg Tuple(s)**:
		:param igmp_snooping_mrouters: kwarg tuple.
		:type igmp_snooping_mrouters: (vlan_id).

		:param vlan_id: tuple arg.
		:type vlan_id: (long)
		
		.. note::
			* range - ['0..4294967295']

	**This Instance Keyword Arg Tuple**:
		:param expiry_time: kwarg tuple.
		:type expiry_time: (vlan_id).

		:param vlan_id: tuple arg.
		:type vlan_id: (long)
		
		.. note::
			* range - ['0..4294967295']

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = [('pybind.slxos.v16r_1_00b.igmp_snooping_state.igmp_snooping_mrouters', u'igmp_snooping_mrouters')]
    bindings_list = [('pybind.slxos.v16r_1_00b.igmp_snooping_state.igmp_snooping_mrouters.igmp_snooping_mrouters_', 'pybind.slxos.v16r_1_00b.brocade_mc_hms_operational', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'vlan_id', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'expiry_time', 'keyval': 'vlan_id', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, igmp_snooping_mrouters=igmp_snooping_mrouters, expiry_time=expiry_time)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def igmp_snooping_state_igmp_snooping_vlans_delete(self, igmp_snooping_vlans=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		SLXOS: 16r.1.00b    

	**This Instance Keyword Arg Tuple**:
		:param igmp_snooping_vlans: kwarg tuple.
		:type igmp_snooping_vlans: (vlan_id).

		:param vlan_id: tuple arg.
		:type vlan_id: (long)
		
		.. note::
			* range - ['0..4294967295']

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = []
    bindings_list = [('pybind.slxos.v16r_1_00b.igmp_snooping_state.igmp_snooping_vlans', 'pybind.slxos.v16r_1_00b.brocade_mc_hms_operational', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = []
    bindings_keyval = {'kwargs_key_name': u'igmp_snooping_vlans', 'keyval': 'vlan_id', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, igmp_snooping_vlans=igmp_snooping_vlans)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def igmp_snooping_state_igmp_snooping_vlans_igmp_snooping_vlans_delete(self, igmp_snooping_vlans=None, igmp_snooping_vlans_=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		SLXOS: 16r.1.00b    

	**Parent Instance Keyword Arg Tuple(s)**:
		:param igmp_snooping_vlans: kwarg tuple.
		:type igmp_snooping_vlans: (vlan_id).

		:param vlan_id: tuple arg.
		:type vlan_id: (long)
		
		.. note::
			* range - ['0..4294967295']

	**This Instance Keyword Arg Tuple**:
		:param igmp_snooping_vlans_: kwarg tuple.
		:type igmp_snooping_vlans_: (vlan_id).

		:param vlan_id: tuple arg.
		:type vlan_id: (long)
		
		.. note::
			* range - ['0..4294967295']

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = [('pybind.slxos.v16r_1_00b.igmp_snooping_state.igmp_snooping_vlans', u'igmp_snooping_vlans')]
    bindings_list = [('pybind.slxos.v16r_1_00b.igmp_snooping_state.igmp_snooping_vlans.igmp_snooping_vlans', 'pybind.slxos.v16r_1_00b.brocade_mc_hms_operational', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'vlan_id', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'igmp_snooping_vlans_', 'keyval': 'vlan_id', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, igmp_snooping_vlans=igmp_snooping_vlans, igmp_snooping_vlans_=igmp_snooping_vlans_)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def igmp_snooping_state_igmp_snooping_vlans_igmp_snooping_vlans_fast_leave_delete(self, igmp_snooping_vlans=None, fast_leave=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		SLXOS: 16r.1.00b    

	**Parent Instance Keyword Arg Tuple(s)**:
		:param igmp_snooping_vlans: kwarg tuple.
		:type igmp_snooping_vlans: (vlan_id).

		:param vlan_id: tuple arg.
		:type vlan_id: (long)
		
		.. note::
			* range - ['0..4294967295']

	**This Instance Keyword Arg Tuple**:
		:param fast_leave: kwarg tuple.
		:type fast_leave: (vlan_id).

		:param vlan_id: tuple arg.
		:type vlan_id: (long)
		
		.. note::
			* range - ['0..4294967295']

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = [('pybind.slxos.v16r_1_00b.igmp_snooping_state.igmp_snooping_vlans', u'igmp_snooping_vlans')]
    bindings_list = [('pybind.slxos.v16r_1_00b.igmp_snooping_state.igmp_snooping_vlans.igmp_snooping_vlans_', 'pybind.slxos.v16r_1_00b.brocade_mc_hms_operational', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'vlan_id', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'fast_leave', 'keyval': 'vlan_id', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, igmp_snooping_vlans=igmp_snooping_vlans, fast_leave=fast_leave)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def igmp_snooping_state_igmp_snooping_vlans_igmp_snooping_vlans_vlan_groups_delete(self, igmp_snooping_vlans=None, vlan_groups=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		SLXOS: 16r.1.00b    

	**Parent Instance Keyword Arg Tuple(s)**:
		:param igmp_snooping_vlans: kwarg tuple.
		:type igmp_snooping_vlans: (vlan_id).

		:param vlan_id: tuple arg.
		:type vlan_id: (long)
		
		.. note::
			* range - ['0..4294967295']

	**This Instance Keyword Arg Tuple**:
		:param vlan_groups: kwarg tuple.
		:type vlan_groups: (grp_ip_addr).

		:param grp_ip_addr: tuple arg.
		:type grp_ip_addr: (long)
		
		.. note::
			* range - ['0..4294967295']

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = [('pybind.slxos.v16r_1_00b.igmp_snooping_state.igmp_snooping_vlans', u'igmp_snooping_vlans')]
    bindings_list = [('pybind.slxos.v16r_1_00b.igmp_snooping_state.igmp_snooping_vlans.igmp_snooping_vlans_.vlan_groups', 'pybind.slxos.v16r_1_00b.brocade_mc_hms_operational', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'vlan_id', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'vlan_groups', 'keyval': 'grp_ip_addr', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, igmp_snooping_vlans=igmp_snooping_vlans, vlan_groups=vlan_groups)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def igmp_snooping_state_igmp_statistics_igmp_statistics_delete(self, igmp_statistics=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		SLXOS: 16r.1.00b    

	**This Instance Keyword Arg Tuple**:
		:param igmp_statistics: kwarg tuple.
		:type igmp_statistics: (interface_name).

		:param interface_name: tuple arg.
		:type interface_name: (unicode)

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = []
    bindings_list = [('pybind.slxos.v16r_1_00b.igmp_snooping_state.igmp_statistics.igmp_statistics', 'pybind.slxos.v16r_1_00b.brocade_mc_hms_operational', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = []
    bindings_keyval = {'kwargs_key_name': u'igmp_statistics', 'keyval': 'interface_name', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, igmp_statistics=igmp_statistics)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def igmp_snooping_state_igmp_statistics_igmp_statistics_error_bad_checksum_delete(self, error_bad_checksum=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		SLXOS: 16r.1.00b    

	**This Instance Keyword Arg Tuple**:
		:param error_bad_checksum: kwarg tuple.
		:type error_bad_checksum: (interface_name).

		:param interface_name: tuple arg.
		:type interface_name: (unicode)

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = []
    bindings_list = [('pybind.slxos.v16r_1_00b.igmp_snooping_state.igmp_statistics.igmp_statistics_', 'pybind.slxos.v16r_1_00b.brocade_mc_hms_operational', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = []
    bindings_keyval = {'kwargs_key_name': u'error_bad_checksum', 'keyval': 'interface_name', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, error_bad_checksum=error_bad_checksum)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def igmp_snooping_state_multicast_ssm_mapping_ssm_maps_delete(self, ssm_maps=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		SLXOS: 16r.1.00b    

	**This Instance Keyword Arg Tuple**:
		:param ssm_maps: kwarg tuple.
		:type ssm_maps: (prefix_list_name).

		:param prefix_list_name: tuple arg.
		:type prefix_list_name: (unicode)

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = []
    bindings_list = [('pybind.slxos.v16r_1_00b.igmp_snooping_state.multicast_ssm_mapping.ssm_maps', 'pybind.slxos.v16r_1_00b.brocade_mc_hms_operational', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = []
    bindings_keyval = {'kwargs_key_name': u'ssm_maps', 'keyval': 'prefix_list_name', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, ssm_maps=ssm_maps)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def igmp_snooping_state_pim_snp_groups_delete(self, pim_snp_groups=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		SLXOS: 16r.1.00b    

	**This Instance Keyword Arg Tuple**:
		:param pim_snp_groups: kwarg tuple.
		:type pim_snp_groups: (vlan_id).

		:param vlan_id: tuple arg.
		:type vlan_id: (long)
		
		.. note::
			* range - ['0..4294967295']

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = []
    bindings_list = [('pybind.slxos.v16r_1_00b.igmp_snooping_state.pim_snp_groups', 'pybind.slxos.v16r_1_00b.brocade_mc_hms_operational', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = []
    bindings_keyval = {'kwargs_key_name': u'pim_snp_groups', 'keyval': 'vlan_id', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, pim_snp_groups=pim_snp_groups)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def igmp_snooping_state_pim_snp_groups_pim_snp_groups_delete(self, pim_snp_groups=None, pim_snp_groups_=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		SLXOS: 16r.1.00b    

	**Parent Instance Keyword Arg Tuple(s)**:
		:param pim_snp_groups: kwarg tuple.
		:type pim_snp_groups: (vlan_id).

		:param vlan_id: tuple arg.
		:type vlan_id: (long)
		
		.. note::
			* range - ['0..4294967295']

	**This Instance Keyword Arg Tuple**:
		:param pim_snp_groups_: kwarg tuple.
		:type pim_snp_groups_: (group_addr, vlan_id).

		:param group_addr: tuple arg.
		:type group_addr: (long)
		
		.. note::
			* range - ['0..4294967295']

		:param vlan_id: tuple arg.
		:type vlan_id: (long)
		
		.. note::
			* range - ['0..4294967295']

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = [('pybind.slxos.v16r_1_00b.igmp_snooping_state.pim_snp_groups', u'pim_snp_groups')]
    bindings_list = [('pybind.slxos.v16r_1_00b.igmp_snooping_state.pim_snp_groups.pim_snp_groups', 'pybind.slxos.v16r_1_00b.brocade_mc_hms_operational', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'vlan_id', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'pim_snp_groups_', 'keyval': 'group_addr, vlan_id', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, pim_snp_groups=pim_snp_groups, pim_snp_groups_=pim_snp_groups_)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def igmp_snooping_state_pim_snp_groups_pim_snp_groups_expiry_time_delete(self, pim_snp_groups=None, expiry_time=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		SLXOS: 16r.1.00b    

	**Parent Instance Keyword Arg Tuple(s)**:
		:param pim_snp_groups: kwarg tuple.
		:type pim_snp_groups: (vlan_id).

		:param vlan_id: tuple arg.
		:type vlan_id: (long)
		
		.. note::
			* range - ['0..4294967295']

	**This Instance Keyword Arg Tuple**:
		:param expiry_time: kwarg tuple.
		:type expiry_time: (group_addr, vlan_id).

		:param group_addr: tuple arg.
		:type group_addr: (long)
		
		.. note::
			* range - ['0..4294967295']

		:param vlan_id: tuple arg.
		:type vlan_id: (long)
		
		.. note::
			* range - ['0..4294967295']

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = [('pybind.slxos.v16r_1_00b.igmp_snooping_state.pim_snp_groups', u'pim_snp_groups')]
    bindings_list = [('pybind.slxos.v16r_1_00b.igmp_snooping_state.pim_snp_groups.pim_snp_groups_', 'pybind.slxos.v16r_1_00b.brocade_mc_hms_operational', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'vlan_id', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'expiry_time', 'keyval': 'group_addr, vlan_id', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, pim_snp_groups=pim_snp_groups, expiry_time=expiry_time)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def igmp_snooping_state_pim_snp_groups_pim_snp_groups_pim_snp_sources_delete(self, pim_snp_groups=None, pim_snp_sources=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		SLXOS: 16r.1.00b    

	**Parent Instance Keyword Arg Tuple(s)**:
		:param pim_snp_groups: kwarg tuple.
		:type pim_snp_groups: (vlan_id).

		:param vlan_id: tuple arg.
		:type vlan_id: (long)
		
		.. note::
			* range - ['0..4294967295']

	**This Instance Keyword Arg Tuple**:
		:param pim_snp_sources: kwarg tuple.
		:type pim_snp_sources: (src_addr).

		:param src_addr: tuple arg.
		:type src_addr: (long)
		
		.. note::
			* range - ['0..4294967295']

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = [('pybind.slxos.v16r_1_00b.igmp_snooping_state.pim_snp_groups', u'pim_snp_groups')]
    bindings_list = [('pybind.slxos.v16r_1_00b.igmp_snooping_state.pim_snp_groups.pim_snp_groups_.pim_snp_sources', 'pybind.slxos.v16r_1_00b.brocade_mc_hms_operational', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'vlan_id', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'pim_snp_sources', 'keyval': 'src_addr', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, pim_snp_groups=pim_snp_groups, pim_snp_sources=pim_snp_sources)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def igmp_snooping_state_pim_snp_groups_pim_snp_groups_pim_snp_sources_pim_snp_sg_member_ports_delete(self, pim_snp_groups=None, pim_snp_sources=None, pim_snp_sg_member_ports=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		SLXOS: 16r.1.00b    

	**Parent Instance Keyword Arg Tuple(s)**:
		:param pim_snp_groups: kwarg tuple.
		:type pim_snp_groups: (vlan_id).

		:param vlan_id: tuple arg.
		:type vlan_id: (long)
		
		.. note::
			* range - ['0..4294967295']

		:param pim_snp_sources: kwarg tuple.
		:type pim_snp_sources: (src_addr).

		:param src_addr: tuple arg.
		:type src_addr: (long)
		
		.. note::
			* range - ['0..4294967295']

	**This Instance Keyword Arg Tuple**:
		:param pim_snp_sg_member_ports: kwarg tuple.
		:type pim_snp_sg_member_ports: (interface_name).

		:param interface_name: tuple arg.
		:type interface_name: (unicode)

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = [('pybind.slxos.v16r_1_00b.igmp_snooping_state.pim_snp_groups', u'pim_snp_groups'), ('pybind.slxos.v16r_1_00b.igmp_snooping_state.pim_snp_groups.pim_snp_groups_.pim_snp_sources', u'pim_snp_sources')]
    bindings_list = [('pybind.slxos.v16r_1_00b.igmp_snooping_state.pim_snp_groups.pim_snp_groups_.pim_snp_sources.pim_snp_sg_member_ports', 'pybind.slxos.v16r_1_00b.brocade_mc_hms_operational', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'vlan_id', 'extra_keyval': ''}, {'keyval': 'src_addr', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'pim_snp_sg_member_ports', 'keyval': 'interface_name', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, pim_snp_groups=pim_snp_groups, pim_snp_sources=pim_snp_sources, pim_snp_sg_member_ports=pim_snp_sg_member_ports)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def igmp_snooping_state_pim_snp_groups_pim_snp_groups_pim_snp_wg_member_ports_delete(self, pim_snp_groups=None, pim_snp_wg_member_ports=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		SLXOS: 16r.1.00b    

	**Parent Instance Keyword Arg Tuple(s)**:
		:param pim_snp_groups: kwarg tuple.
		:type pim_snp_groups: (vlan_id).

		:param vlan_id: tuple arg.
		:type vlan_id: (long)
		
		.. note::
			* range - ['0..4294967295']

	**This Instance Keyword Arg Tuple**:
		:param pim_snp_wg_member_ports: kwarg tuple.
		:type pim_snp_wg_member_ports: (interface_name).

		:param interface_name: tuple arg.
		:type interface_name: (unicode)

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = [('pybind.slxos.v16r_1_00b.igmp_snooping_state.pim_snp_groups', u'pim_snp_groups')]
    bindings_list = [('pybind.slxos.v16r_1_00b.igmp_snooping_state.pim_snp_groups.pim_snp_groups_.pim_snp_wg_member_ports', 'pybind.slxos.v16r_1_00b.brocade_mc_hms_operational', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'vlan_id', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'pim_snp_wg_member_ports', 'keyval': 'interface_name', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, pim_snp_groups=pim_snp_groups, pim_snp_wg_member_ports=pim_snp_wg_member_ports)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def interface_ethernet_ip_access_group_delete(self, ethernet=None, access_group=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		SLXOS: 16r.1.00b    

	**Parent Instance Keyword Arg Tuple(s)**:
		:param ethernet: kwarg tuple.
		:type ethernet: (name).

		:param name: tuple arg.
		:type name: (unicode)
		
		.. note::
			* length - [u'3..16']
			* pattern - ((([0-9]|[1][0-6]))/([1-9]|[1-9][0-9]|[1-9][0-9][0-9])(:[1-4])?)

	**This Instance Keyword Arg Tuple**:
		:param access_group: kwarg tuple.
		:type access_group: (ip_access_list, ip_direction, traffic_type).

		:param ip_access_list: ACL_NAME;; Access List Name (Max 63)
		:type ip_access_list: (unicode)
		
		.. note::
			* length - [u'1..63']
			* pattern - [a-zA-Z0-9]{1}([-a-zA-Z0-9_]{0,62})

		:param ip_direction: tuple arg.
		:type ip_direction: (unicode)
		
		.. note::
			* enum - [u'in', u'out']

		:param traffic_type: tuple arg.
		:type traffic_type: (unicode)
		
		.. note::
			* enum - [u'switched', u'routed']

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = [('pybind.slxos.v16r_1_00b.interface.ethernet', u'ethernet')]
    bindings_list = [('pybind.slxos.v16r_1_00b.interface.ethernet.ip_acl_interface.ip.access_group', 'pybind.slxos.v16r_1_00b.brocade_interface', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'access_group', 'keyval': 'ip_access_list, ip_direction', 'extra_keyval': 'ip_access_list, ip_direction, traffic_type'}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, ethernet=ethernet, access_group=access_group)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def interface_ethernet_ip_address_delete(self, ethernet=None, address=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		SLXOS: 16r.1.00b    

	**Parent Instance Keyword Arg Tuple(s)**:
		:param ethernet: kwarg tuple.
		:type ethernet: (name).

		:param name: tuple arg.
		:type name: (unicode)
		
		.. note::
			* length - [u'3..16']
			* pattern - ((([0-9]|[1][0-6]))/([1-9]|[1-9][0-9]|[1-9][0-9][0-9])(:[1-4])?)

	**This Instance Keyword Arg Tuple**:
		:param address: kwarg tuple.
		:type address: (address, secondary, ospf_passive, ospf_ignore).

		:param address: A.B.C.D/M IP address in dotted decimal/Mask
		:type address: (unicode)
		
		.. note::
			* pattern - (([1-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.)(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){2}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])/(([1-9])|([1-2][0-9])|(3[0-1]))

		:param secondary: Secondary ip address on the specific interface
		:type secondary: (YANGBool)

		:param ospf_passive: ospf pasive address on the specific interface
		:type ospf_passive: (YANGBool)

		:param ospf_ignore: ospf active address on the specific interface
		:type ospf_ignore: (YANGBool)

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = [('pybind.slxos.v16r_1_00b.interface.ethernet', u'ethernet')]
    bindings_list = [('pybind.slxos.v16r_1_00b.interface.ethernet.ip.ip_config.address', 'pybind.slxos.v16r_1_00b.brocade_interface', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'address', 'keyval': 'address', 'extra_keyval': 'address, secondary, ospf_passive, ospf_ignore'}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, ethernet=ethernet, address=address)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def interface_ethernet_ip_dhcp_relay_delete(self, ethernet=None, servers=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		SLXOS: 16r.1.00b    

	**Parent Instance Keyword Arg Tuple(s)**:
		:param ethernet: kwarg tuple.
		:type ethernet: (name).

		:param name: tuple arg.
		:type name: (unicode)
		
		.. note::
			* length - [u'3..16']
			* pattern - ((([0-9]|[1][0-6]))/([1-9]|[1-9][0-9]|[1-9][0-9][0-9])(:[1-4])?)

	**This Instance Keyword Arg Tuple**:
		:param servers: kwarg tuple.
		:type servers: (relay_ip_addr, server_vrf_name).

		:param relay_ip_addr: A.B.C.D;; IP address of the DHCP server
		:type relay_ip_addr: (unicode)
		
		.. note::
			* pattern - (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?

		:param server_vrf_name: VRF name of the DHCP server
		:type server_vrf_name: (unicode)
		
		.. note::
			* length - [u'1..32']
			* pattern - ((([a-zA-Z0-9_]([a-zA-Z0-9\-_]){0,61})?[a-zA-Z0-9]\.)*([a-zA-Z0-9_]([a-zA-Z0-9\-_]){0,61})?[a-zA-Z0-9]\.?)|\.

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = [('pybind.slxos.v16r_1_00b.interface.ethernet', u'ethernet')]
    bindings_list = [('pybind.slxos.v16r_1_00b.interface.ethernet.ip.interface_eth_dhcp_conf.dhcp.relay.servers', 'pybind.slxos.v16r_1_00b.brocade_interface', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'servers', 'keyval': 'relay_ip_addr, server_vrf_name', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, ethernet=ethernet, servers=servers)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def interface_ethernet_ip_igmp_static_group_delete(self, ethernet=None, igmpl3_static_group=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		SLXOS: 16r.1.00b    

	**Parent Instance Keyword Arg Tuple(s)**:
		:param ethernet: kwarg tuple.
		:type ethernet: (name).

		:param name: tuple arg.
		:type name: (unicode)
		
		.. note::
			* length - [u'3..16']
			* pattern - ((([0-9]|[1][0-6]))/([1-9]|[1-9][0-9]|[1-9][0-9][0-9])(:[1-4])?)

	**This Instance Keyword Arg Tuple**:
		:param igmpl3_static_group: kwarg tuple.
		:type igmpl3_static_group: (igmpl3_sg_addr).

		:param igmpl3_sg_addr: Multicast Address to be Joined in the format A.B.C.D
		:type igmpl3_sg_addr: (unicode)
		
		.. note::
			* pattern - (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = [('pybind.slxos.v16r_1_00b.interface.ethernet', u'ethernet')]
    bindings_list = [('pybind.slxos.v16r_1_00b.interface.ethernet.ip.igmp_phy_intf_cfg.igmp.igmpl3_static_group', 'pybind.slxos.v16r_1_00b.brocade_interface', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'igmpl3_static_group', 'keyval': 'igmpl3_sg_addr', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, ethernet=ethernet, igmpl3_static_group=igmpl3_static_group)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def interface_ethernet_ipv6_access_group_delete(self, ethernet=None, access_group=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		SLXOS: 16r.1.00b    

	**Parent Instance Keyword Arg Tuple(s)**:
		:param ethernet: kwarg tuple.
		:type ethernet: (name).

		:param name: tuple arg.
		:type name: (unicode)
		
		.. note::
			* length - [u'3..16']
			* pattern - ((([0-9]|[1][0-6]))/([1-9]|[1-9][0-9]|[1-9][0-9][0-9])(:[1-4])?)

	**This Instance Keyword Arg Tuple**:
		:param access_group: kwarg tuple.
		:type access_group: (ipv6_access_list, ip_direction, traffic_type).

		:param ipv6_access_list: ACL_NAME;; Access List Name (Max 63)
		:type ipv6_access_list: (unicode)
		
		.. note::
			* length - [u'1..63']
			* pattern - [a-zA-Z0-9]{1}([-a-zA-Z0-9_]{0,62})

		:param ip_direction: tuple arg.
		:type ip_direction: (unicode)
		
		.. note::
			* enum - [u'in', u'out']

		:param traffic_type: tuple arg.
		:type traffic_type: (unicode)
		
		.. note::
			* enum - [u'switched', u'routed']

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = [('pybind.slxos.v16r_1_00b.interface.ethernet', u'ethernet')]
    bindings_list = [('pybind.slxos.v16r_1_00b.interface.ethernet.ipv6.access_group', 'pybind.slxos.v16r_1_00b.brocade_interface', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'access_group', 'keyval': 'ipv6_access_list, ip_direction', 'extra_keyval': 'ipv6_access_list, ip_direction, traffic_type'}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, ethernet=ethernet, access_group=access_group)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def interface_ethernet_ipv6_address_delete(self, ethernet=None, ipv6_address=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		SLXOS: 16r.1.00b    

	**Parent Instance Keyword Arg Tuple(s)**:
		:param ethernet: kwarg tuple.
		:type ethernet: (name).

		:param name: tuple arg.
		:type name: (unicode)
		
		.. note::
			* length - [u'3..16']
			* pattern - ((([0-9]|[1][0-6]))/([1-9]|[1-9][0-9]|[1-9][0-9][0-9])(:[1-4])?)

	**This Instance Keyword Arg Tuple**:
		:param ipv6_address: kwarg tuple.
		:type ipv6_address: (address, secondary, anycast).

		:param address: A:B::C:D/LEN;; IPv6 prefix format: xxxx:xxxx/ml, xxxx:xxxx::/ml, xxxx::xx/128
		:type address: (unicode)
		
		.. note::
			* pattern - ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(/(([0-9])|([0-9]{2})|(1[0-1][0-9])|(12[0-8])))

		:param secondary: Configure Secondary ipv6 address on an interface
		:type secondary: (YANGBool)

		:param anycast: Configure ipv6 address as anycast
		:type anycast: (YANGBool)

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = [('pybind.slxos.v16r_1_00b.interface.ethernet', u'ethernet')]
    bindings_list = [('pybind.slxos.v16r_1_00b.interface.ethernet.ipv6.ipv6_config.address.ipv6_address', 'pybind.slxos.v16r_1_00b.brocade_interface', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'ipv6_address', 'keyval': 'address', 'extra_keyval': 'address, secondary, anycast'}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, ethernet=ethernet, ipv6_address=ipv6_address)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def interface_ethernet_ipv6_dhcp_relay_delete(self, ethernet=None, servers=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		SLXOS: 16r.1.00b    

	**Parent Instance Keyword Arg Tuple(s)**:
		:param ethernet: kwarg tuple.
		:type ethernet: (name).

		:param name: tuple arg.
		:type name: (unicode)
		
		.. note::
			* length - [u'3..16']
			* pattern - ((([0-9]|[1][0-6]))/([1-9]|[1-9][0-9]|[1-9][0-9][0-9])(:[1-4])?)

	**This Instance Keyword Arg Tuple**:
		:param servers: kwarg tuple.
		:type servers: (relay_ip_addr, server_vrf_name).

		:param relay_ip_addr: IPv6 address of the DHCPv6 server
		:type relay_ip_addr: (unicode)
		
		.. note::
			* pattern - ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?

		:param server_vrf_name: VRF name of the DHCPv6 server
		:type server_vrf_name: (unicode)
		
		.. note::
			* length - [u'1..32']
			* pattern - ((([a-zA-Z0-9_]([a-zA-Z0-9\-_]){0,61})?[a-zA-Z0-9]\.)*([a-zA-Z0-9_]([a-zA-Z0-9\-_]){0,61})?[a-zA-Z0-9]\.?)|\.

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = [('pybind.slxos.v16r_1_00b.interface.ethernet', u'ethernet')]
    bindings_list = [('pybind.slxos.v16r_1_00b.interface.ethernet.ipv6.interface_phy_dhcp_conf.dhcp.relay.servers', 'pybind.slxos.v16r_1_00b.brocade_interface', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'servers', 'keyval': 'relay_ip_addr', 'extra_keyval': 'relay_ip_addr, server_vrf_name'}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, ethernet=ethernet, servers=servers)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def interface_ethernet_ipv6_nd_address_delete(self, ethernet=None, suppressing_address=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		SLXOS: 16r.1.00b    

	**Parent Instance Keyword Arg Tuple(s)**:
		:param ethernet: kwarg tuple.
		:type ethernet: (name).

		:param name: tuple arg.
		:type name: (unicode)
		
		.. note::
			* length - [u'3..16']
			* pattern - ((([0-9]|[1][0-6]))/([1-9]|[1-9][0-9]|[1-9][0-9][0-9])(:[1-4])?)

	**This Instance Keyword Arg Tuple**:
		:param suppressing_address: kwarg tuple.
		:type suppressing_address: (suppress_ipv6_address, suppress_per_address).

		:param suppress_ipv6_address: tuple arg.
		:type suppress_ipv6_address: (unicode)
		
		.. note::
			* pattern - ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?

		:param suppress_per_address: Suppress all IPv6 addresses in router advertisement
		:type suppress_per_address: (YANGBool)

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = [('pybind.slxos.v16r_1_00b.interface.ethernet', u'ethernet')]
    bindings_list = [('pybind.slxos.v16r_1_00b.interface.ethernet.ipv6.ipv6_nd_ra.ipv6_intf_cmds.nd.address.suppressing_address', 'pybind.slxos.v16r_1_00b.brocade_interface', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'suppressing_address', 'keyval': 'suppress_ipv6_address', 'extra_keyval': 'suppress_ipv6_address, suppress_per_address'}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, ethernet=ethernet, suppressing_address=suppressing_address)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def interface_ethernet_ipv6_nd_prefix_delete(self, ethernet=None, prefix=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		SLXOS: 16r.1.00b    

	**Parent Instance Keyword Arg Tuple(s)**:
		:param ethernet: kwarg tuple.
		:type ethernet: (name).

		:param name: tuple arg.
		:type name: (unicode)
		
		.. note::
			* length - [u'3..16']
			* pattern - ((([0-9]|[1][0-6]))/([1-9]|[1-9][0-9]|[1-9][0-9][0-9])(:[1-4])?)

	**This Instance Keyword Arg Tuple**:
		:param prefix: kwarg tuple.
		:type prefix: (prefix_ipv6_address).

		:param prefix_ipv6_address: tuple arg.
		:type prefix_ipv6_address: (unicode)
		
		.. note::
			* pattern - ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(/(([0-9])|([0-9]{2})|(1[0-1][0-9])|(12[0-8])))

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = [('pybind.slxos.v16r_1_00b.interface.ethernet', u'ethernet')]
    bindings_list = [('pybind.slxos.v16r_1_00b.interface.ethernet.ipv6.ipv6_nd_ra.ipv6_intf_cmds.nd.prefix', 'pybind.slxos.v16r_1_00b.brocade_interface', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'prefix', 'keyval': 'prefix_ipv6_address', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, ethernet=ethernet, prefix=prefix)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def interface_ethernet_ipv6_nd_ra_dns_server_delete(self, ethernet=None, ra_dns_server=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		SLXOS: 16r.1.00b    

	**Parent Instance Keyword Arg Tuple(s)**:
		:param ethernet: kwarg tuple.
		:type ethernet: (name).

		:param name: tuple arg.
		:type name: (unicode)
		
		.. note::
			* length - [u'3..16']
			* pattern - ((([0-9]|[1][0-6]))/([1-9]|[1-9][0-9]|[1-9][0-9][0-9])(:[1-4])?)

	**This Instance Keyword Arg Tuple**:
		:param ra_dns_server: kwarg tuple.
		:type ra_dns_server: (dns_server_prefix).

		:param dns_server_prefix: tuple arg.
		:type dns_server_prefix: (unicode)
		
		.. note::
			* pattern - ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = [('pybind.slxos.v16r_1_00b.interface.ethernet', u'ethernet')]
    bindings_list = [('pybind.slxos.v16r_1_00b.interface.ethernet.ipv6.ipv6_nd_ra.ipv6_intf_cmds.nd.ra_dns_server', 'pybind.slxos.v16r_1_00b.brocade_interface', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'ra_dns_server', 'keyval': 'dns_server_prefix', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, ethernet=ethernet, ra_dns_server=ra_dns_server)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def interface_ethernet_ipv6_nd_ra_domain_name_delete(self, ethernet=None, ra_domain_name=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		SLXOS: 16r.1.00b    

	**Parent Instance Keyword Arg Tuple(s)**:
		:param ethernet: kwarg tuple.
		:type ethernet: (name).

		:param name: tuple arg.
		:type name: (unicode)
		
		.. note::
			* length - [u'3..16']
			* pattern - ((([0-9]|[1][0-6]))/([1-9]|[1-9][0-9]|[1-9][0-9][0-9])(:[1-4])?)

	**This Instance Keyword Arg Tuple**:
		:param ra_domain_name: kwarg tuple.
		:type ra_domain_name: (domain_name_string).

		:param domain_name_string: tuple arg.
		:type domain_name_string: (unicode)

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = [('pybind.slxos.v16r_1_00b.interface.ethernet', u'ethernet')]
    bindings_list = [('pybind.slxos.v16r_1_00b.interface.ethernet.ipv6.ipv6_nd_ra.ipv6_intf_cmds.nd.ra_domain_name', 'pybind.slxos.v16r_1_00b.brocade_interface', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'ra_domain_name', 'keyval': 'domain_name_string', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, ethernet=ethernet, ra_domain_name=ra_domain_name)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def interface_ethernet_ipv6_neighbor_delete(self, ethernet=None, neighbor=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		SLXOS: 16r.1.00b    

	**Parent Instance Keyword Arg Tuple(s)**:
		:param ethernet: kwarg tuple.
		:type ethernet: (name).

		:param name: tuple arg.
		:type name: (unicode)
		
		.. note::
			* length - [u'3..16']
			* pattern - ((([0-9]|[1][0-6]))/([1-9]|[1-9][0-9]|[1-9][0-9][0-9])(:[1-4])?)

	**This Instance Keyword Arg Tuple**:
		:param neighbor: kwarg tuple.
		:type neighbor: (ipv6_address).

		:param ipv6_address: tuple arg.
		:type ipv6_address: (unicode)
		
		.. note::
			* pattern - ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = [('pybind.slxos.v16r_1_00b.interface.ethernet', u'ethernet')]
    bindings_list = [('pybind.slxos.v16r_1_00b.interface.ethernet.ipv6.ipv6_nd_ra.ipv6_intf_cmds.neighbor', 'pybind.slxos.v16r_1_00b.brocade_interface', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'neighbor', 'keyval': 'ipv6_address', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, ethernet=ethernet, neighbor=neighbor)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def interface_ethernet_ipv6_vrrp_extended_group_delete(self, ethernet=None, vrrpv3e_group=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		SLXOS: 16r.1.00b    

	**Parent Instance Keyword Arg Tuple(s)**:
		:param ethernet: kwarg tuple.
		:type ethernet: (name).

		:param name: tuple arg.
		:type name: (unicode)
		
		.. note::
			* length - [u'3..16']
			* pattern - ((([0-9]|[1][0-6]))/([1-9]|[1-9][0-9]|[1-9][0-9][0-9])(:[1-4])?)

	**This Instance Keyword Arg Tuple**:
		:param vrrpv3e_group: kwarg tuple.
		:type vrrpv3e_group: (vrid).

		:param vrid: tuple arg.
		:type vrid: (int)
		
		.. note::
			* range - ['0..255']

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = [('pybind.slxos.v16r_1_00b.interface.ethernet', u'ethernet')]
    bindings_list = [('pybind.slxos.v16r_1_00b.interface.ethernet.ipv6.vrrpv3e_group', 'pybind.slxos.v16r_1_00b.brocade_interface', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'vrrpv3e_group', 'keyval': 'vrid', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, ethernet=ethernet, vrrpv3e_group=vrrpv3e_group)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def interface_ethernet_ipv6_vrrp_extended_group_track_delete(self, ethernet=None, vrrpv3e_group=None, interface=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		SLXOS: 16r.1.00b    

	**Parent Instance Keyword Arg Tuple(s)**:
		:param ethernet: kwarg tuple.
		:type ethernet: (name).

		:param name: tuple arg.
		:type name: (unicode)
		
		.. note::
			* length - [u'3..16']
			* pattern - ((([0-9]|[1][0-6]))/([1-9]|[1-9][0-9]|[1-9][0-9][0-9])(:[1-4])?)

		:param vrrpv3e_group: kwarg tuple.
		:type vrrpv3e_group: (vrid).

		:param vrid: tuple arg.
		:type vrid: (int)
		
		.. note::
			* range - ['0..255']

	**This Instance Keyword Arg Tuple**:
		:param interface: kwarg tuple.
		:type interface: (interface_type, interface_name).

		:param interface_type: tuple arg.
		:type interface_type: (unicode)
		
		.. note::
			* enum - [u'ethernet', u'port-channel']

		:param interface_name: tuple arg.
		:type interface_name: (unicode)
		
		.. note::
			* length - [u'3..16']
			* pattern - ((([0-9]|[1][0-6]))/([1-9]|[1-9][0-9]|[1-9][0-9][0-9])(:[1-4])?)

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = [('pybind.slxos.v16r_1_00b.interface.ethernet', u'ethernet'), ('pybind.slxos.v16r_1_00b.interface.ethernet.ipv6.vrrpv3e_group', u'vrrpv3e_group')]
    bindings_list = [('pybind.slxos.v16r_1_00b.interface.ethernet.ipv6.vrrpv3e_group.track.interface', 'pybind.slxos.v16r_1_00b.brocade_interface', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'vrid', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'interface', 'keyval': 'interface_type, interface_name', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, ethernet=ethernet, vrrpv3e_group=vrrpv3e_group, interface=interface)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def interface_ethernet_ipv6_vrrp_extended_group_virtual_ip_delete(self, ethernet=None, vrrpv3e_group=None, virtual_ip=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		SLXOS: 16r.1.00b    

	**Parent Instance Keyword Arg Tuple(s)**:
		:param ethernet: kwarg tuple.
		:type ethernet: (name).

		:param name: tuple arg.
		:type name: (unicode)
		
		.. note::
			* length - [u'3..16']
			* pattern - ((([0-9]|[1][0-6]))/([1-9]|[1-9][0-9]|[1-9][0-9][0-9])(:[1-4])?)

		:param vrrpv3e_group: kwarg tuple.
		:type vrrpv3e_group: (vrid).

		:param vrid: tuple arg.
		:type vrid: (int)
		
		.. note::
			* range - ['0..255']

	**This Instance Keyword Arg Tuple**:
		:param virtual_ip: kwarg tuple.
		:type virtual_ip: (virtual_ipaddr).

		:param virtual_ipaddr: Virtual IPv6 address
		:type virtual_ipaddr: (unicode)
		
		.. note::
			* pattern - ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = [('pybind.slxos.v16r_1_00b.interface.ethernet', u'ethernet'), ('pybind.slxos.v16r_1_00b.interface.ethernet.ipv6.vrrpv3e_group', u'vrrpv3e_group')]
    bindings_list = [('pybind.slxos.v16r_1_00b.interface.ethernet.ipv6.vrrpv3e_group.virtual_ip', 'pybind.slxos.v16r_1_00b.brocade_interface', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'vrid', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'virtual_ip', 'keyval': 'virtual_ipaddr', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, ethernet=ethernet, vrrpv3e_group=vrrpv3e_group, virtual_ip=virtual_ip)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def interface_ethernet_ipv6_vrrp_group_delete(self, ethernet=None, vrrpv3_group=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		SLXOS: 16r.1.00b    

	**Parent Instance Keyword Arg Tuple(s)**:
		:param ethernet: kwarg tuple.
		:type ethernet: (name).

		:param name: tuple arg.
		:type name: (unicode)
		
		.. note::
			* length - [u'3..16']
			* pattern - ((([0-9]|[1][0-6]))/([1-9]|[1-9][0-9]|[1-9][0-9][0-9])(:[1-4])?)

	**This Instance Keyword Arg Tuple**:
		:param vrrpv3_group: kwarg tuple.
		:type vrrpv3_group: (vrid).

		:param vrid: tuple arg.
		:type vrid: (int)
		
		.. note::
			* range - ['0..255']

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = [('pybind.slxos.v16r_1_00b.interface.ethernet', u'ethernet')]
    bindings_list = [('pybind.slxos.v16r_1_00b.interface.ethernet.ipv6.vrrpv3_group', 'pybind.slxos.v16r_1_00b.brocade_interface', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'vrrpv3_group', 'keyval': 'vrid', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, ethernet=ethernet, vrrpv3_group=vrrpv3_group)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def interface_ethernet_ipv6_vrrp_group_track_delete(self, ethernet=None, vrrpv3_group=None, interface=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		SLXOS: 16r.1.00b    

	**Parent Instance Keyword Arg Tuple(s)**:
		:param ethernet: kwarg tuple.
		:type ethernet: (name).

		:param name: tuple arg.
		:type name: (unicode)
		
		.. note::
			* length - [u'3..16']
			* pattern - ((([0-9]|[1][0-6]))/([1-9]|[1-9][0-9]|[1-9][0-9][0-9])(:[1-4])?)

		:param vrrpv3_group: kwarg tuple.
		:type vrrpv3_group: (vrid).

		:param vrid: tuple arg.
		:type vrid: (int)
		
		.. note::
			* range - ['0..255']

	**This Instance Keyword Arg Tuple**:
		:param interface: kwarg tuple.
		:type interface: (interface_type, interface_name).

		:param interface_type: tuple arg.
		:type interface_type: (unicode)
		
		.. note::
			* enum - [u'ethernet', u'port-channel']

		:param interface_name: tuple arg.
		:type interface_name: (unicode)
		
		.. note::
			* length - [u'3..16']
			* pattern - ((([0-9]|[1][0-6]))/([1-9]|[1-9][0-9]|[1-9][0-9][0-9])(:[1-4])?)

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = [('pybind.slxos.v16r_1_00b.interface.ethernet', u'ethernet'), ('pybind.slxos.v16r_1_00b.interface.ethernet.ipv6.vrrpv3_group', u'vrrpv3_group')]
    bindings_list = [('pybind.slxos.v16r_1_00b.interface.ethernet.ipv6.vrrpv3_group.track.interface', 'pybind.slxos.v16r_1_00b.brocade_interface', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'vrid', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'interface', 'keyval': 'interface_type, interface_name', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, ethernet=ethernet, vrrpv3_group=vrrpv3_group, interface=interface)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def interface_ethernet_ipv6_vrrp_group_virtual_ip_delete(self, ethernet=None, vrrpv3_group=None, virtual_ip=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		SLXOS: 16r.1.00b    

	**Parent Instance Keyword Arg Tuple(s)**:
		:param ethernet: kwarg tuple.
		:type ethernet: (name).

		:param name: tuple arg.
		:type name: (unicode)
		
		.. note::
			* length - [u'3..16']
			* pattern - ((([0-9]|[1][0-6]))/([1-9]|[1-9][0-9]|[1-9][0-9][0-9])(:[1-4])?)

		:param vrrpv3_group: kwarg tuple.
		:type vrrpv3_group: (vrid).

		:param vrid: tuple arg.
		:type vrid: (int)
		
		.. note::
			* range - ['0..255']

	**This Instance Keyword Arg Tuple**:
		:param virtual_ip: kwarg tuple.
		:type virtual_ip: (virtual_ipaddr).

		:param virtual_ipaddr: Virtual IPv6 address
		:type virtual_ipaddr: (unicode)
		
		.. note::
			* pattern - ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = [('pybind.slxos.v16r_1_00b.interface.ethernet', u'ethernet'), ('pybind.slxos.v16r_1_00b.interface.ethernet.ipv6.vrrpv3_group', u'vrrpv3_group')]
    bindings_list = [('pybind.slxos.v16r_1_00b.interface.ethernet.ipv6.vrrpv3_group.virtual_ip', 'pybind.slxos.v16r_1_00b.brocade_interface', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'vrid', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'virtual_ip', 'keyval': 'virtual_ipaddr', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, ethernet=ethernet, vrrpv3_group=vrrpv3_group, virtual_ip=virtual_ip)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def interface_ethernet_isis_auth_key_delete(self, ethernet=None, interface_auth_key=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		SLXOS: 16r.1.00b    

	**Parent Instance Keyword Arg Tuple(s)**:
		:param ethernet: kwarg tuple.
		:type ethernet: (name).

		:param name: tuple arg.
		:type name: (unicode)
		
		.. note::
			* length - [u'3..16']
			* pattern - ((([0-9]|[1][0-6]))/([1-9]|[1-9][0-9]|[1-9][0-9][0-9])(:[1-4])?)

	**This Instance Keyword Arg Tuple**:
		:param interface_auth_key: kwarg tuple.
		:type interface_auth_key: (interface_auth_key_level, interface_auth_key_str).

		:param interface_auth_key_level: tuple arg.
		:type interface_auth_key_level: (unicode)
		
		.. note::
			* enum - [u'level-2', u'level-1']

		:param interface_auth_key_str: tuple arg.
		:type interface_auth_key_str: (unicode)
		
		.. note::
			* length - [u'1..63']

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = [('pybind.slxos.v16r_1_00b.interface.ethernet', u'ethernet')]
    bindings_list = [('pybind.slxos.v16r_1_00b.interface.ethernet.interface_eth_isis_conf.intf_isis.interface_isis.interface_auth_key', 'pybind.slxos.v16r_1_00b.brocade_interface', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'interface_auth_key', 'keyval': 'interface_auth_key_level', 'extra_keyval': 'interface_auth_key_level, interface_auth_key_str'}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, ethernet=ethernet, interface_auth_key=interface_auth_key)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def interface_ethernet_isis_hello_interval_delete(self, ethernet=None, interface_hello_interval=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		SLXOS: 16r.1.00b    

	**Parent Instance Keyword Arg Tuple(s)**:
		:param ethernet: kwarg tuple.
		:type ethernet: (name).

		:param name: tuple arg.
		:type name: (unicode)
		
		.. note::
			* length - [u'3..16']
			* pattern - ((([0-9]|[1][0-6]))/([1-9]|[1-9][0-9]|[1-9][0-9][0-9])(:[1-4])?)

	**This Instance Keyword Arg Tuple**:
		:param interface_hello_interval: kwarg tuple.
		:type interface_hello_interval: (interface_hello_interval_level, interface_hello_interval_val).

		:param interface_hello_interval_level: tuple arg.
		:type interface_hello_interval_level: (unicode)
		
		.. note::
			* enum - [u'level-2', u'level-1']

		:param interface_hello_interval_val: tuple arg.
		:type interface_hello_interval_val: (long)
		
		.. note::
			* range - ['0..4294967295']

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = [('pybind.slxos.v16r_1_00b.interface.ethernet', u'ethernet')]
    bindings_list = [('pybind.slxos.v16r_1_00b.interface.ethernet.interface_eth_isis_conf.intf_isis.interface_isis.interface_hello_interval', 'pybind.slxos.v16r_1_00b.brocade_interface', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'interface_hello_interval', 'keyval': 'interface_hello_interval_level', 'extra_keyval': 'interface_hello_interval_level, interface_hello_interval_val'}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, ethernet=ethernet, interface_hello_interval=interface_hello_interval)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def interface_ethernet_isis_hello_multiplier_delete(self, ethernet=None, interface_hello_multiplier=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		SLXOS: 16r.1.00b    

	**Parent Instance Keyword Arg Tuple(s)**:
		:param ethernet: kwarg tuple.
		:type ethernet: (name).

		:param name: tuple arg.
		:type name: (unicode)
		
		.. note::
			* length - [u'3..16']
			* pattern - ((([0-9]|[1][0-6]))/([1-9]|[1-9][0-9]|[1-9][0-9][0-9])(:[1-4])?)

	**This Instance Keyword Arg Tuple**:
		:param interface_hello_multiplier: kwarg tuple.
		:type interface_hello_multiplier: (interface_hello_multiplier_level, interface_hello_multiplier_val).

		:param interface_hello_multiplier_level: tuple arg.
		:type interface_hello_multiplier_level: (unicode)
		
		.. note::
			* enum - [u'level-2', u'level-1']

		:param interface_hello_multiplier_val: tuple arg.
		:type interface_hello_multiplier_val: (long)
		
		.. note::
			* range - ['0..4294967295']

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = [('pybind.slxos.v16r_1_00b.interface.ethernet', u'ethernet')]
    bindings_list = [('pybind.slxos.v16r_1_00b.interface.ethernet.interface_eth_isis_conf.intf_isis.interface_isis.interface_hello_multiplier', 'pybind.slxos.v16r_1_00b.brocade_interface', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'interface_hello_multiplier', 'keyval': 'interface_hello_multiplier_level', 'extra_keyval': 'interface_hello_multiplier_level, interface_hello_multiplier_val'}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, ethernet=ethernet, interface_hello_multiplier=interface_hello_multiplier)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def interface_ethernet_isis_ipv6_metric_delete(self, ethernet=None, interface_ipv6_metric=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		SLXOS: 16r.1.00b    

	**Parent Instance Keyword Arg Tuple(s)**:
		:param ethernet: kwarg tuple.
		:type ethernet: (name).

		:param name: tuple arg.
		:type name: (unicode)
		
		.. note::
			* length - [u'3..16']
			* pattern - ((([0-9]|[1][0-6]))/([1-9]|[1-9][0-9]|[1-9][0-9][0-9])(:[1-4])?)

	**This Instance Keyword Arg Tuple**:
		:param interface_ipv6_metric: kwarg tuple.
		:type interface_ipv6_metric: (interface_ipv6_metric_level, interface_ipv6_metric_val).

		:param interface_ipv6_metric_level: tuple arg.
		:type interface_ipv6_metric_level: (unicode)
		
		.. note::
			* enum - [u'level-2', u'level-1']

		:param interface_ipv6_metric_val: tuple arg.
		:type interface_ipv6_metric_val: (long)
		
		.. note::
			* range - ['0..4294967295']

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = [('pybind.slxos.v16r_1_00b.interface.ethernet', u'ethernet')]
    bindings_list = [('pybind.slxos.v16r_1_00b.interface.ethernet.interface_eth_isis_conf.intf_isis.interface_isis.interface_ipv6.interface_ipv6_metric', 'pybind.slxos.v16r_1_00b.brocade_interface', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'interface_ipv6_metric', 'keyval': 'interface_ipv6_metric_level', 'extra_keyval': 'interface_ipv6_metric_level, interface_ipv6_metric_val'}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, ethernet=ethernet, interface_ipv6_metric=interface_ipv6_metric)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def interface_ethernet_isis_metric_delete(self, ethernet=None, interface_metric=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		SLXOS: 16r.1.00b    

	**Parent Instance Keyword Arg Tuple(s)**:
		:param ethernet: kwarg tuple.
		:type ethernet: (name).

		:param name: tuple arg.
		:type name: (unicode)
		
		.. note::
			* length - [u'3..16']
			* pattern - ((([0-9]|[1][0-6]))/([1-9]|[1-9][0-9]|[1-9][0-9][0-9])(:[1-4])?)

	**This Instance Keyword Arg Tuple**:
		:param interface_metric: kwarg tuple.
		:type interface_metric: (interface_metric_level, interface_metric_val).

		:param interface_metric_level: tuple arg.
		:type interface_metric_level: (unicode)
		
		.. note::
			* enum - [u'level-2', u'level-1']

		:param interface_metric_val: tuple arg.
		:type interface_metric_val: (long)
		
		.. note::
			* range - ['0..4294967295']

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = [('pybind.slxos.v16r_1_00b.interface.ethernet', u'ethernet')]
    bindings_list = [('pybind.slxos.v16r_1_00b.interface.ethernet.interface_eth_isis_conf.intf_isis.interface_isis.interface_metric', 'pybind.slxos.v16r_1_00b.brocade_interface', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'interface_metric', 'keyval': 'interface_metric_level', 'extra_keyval': 'interface_metric_level, interface_metric_val'}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, ethernet=ethernet, interface_metric=interface_metric)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def interface_ethernet_logical_interface_ethernet_delete(self, ethernet=None, ethernet_=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		SLXOS: 16r.1.00b    

	**Parent Instance Keyword Arg Tuple(s)**:
		:param ethernet: kwarg tuple.
		:type ethernet: (name).

		:param name: tuple arg.
		:type name: (unicode)
		
		.. note::
			* length - [u'3..16']
			* pattern - ((([0-9]|[1][0-6]))/([1-9]|[1-9][0-9]|[1-9][0-9][0-9])(:[1-4])?)

	**This Instance Keyword Arg Tuple**:
		:param ethernet_: kwarg tuple.
		:type ethernet_: (instance_id).

		:param instance_id: tuple arg.
		:type instance_id: (unicode)
		
		.. note::
			* pattern - ((([0-9]|[1][0-6]))/([1-9]|[1-9][0-9])(:[1-4])?)(\.([1-9]|[1-9][0-9]||[1-9][0-9][0-9]|[1-9][0-9][0-9][0-9]|1[0-2][0-2][0-8][0-8]))

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = [('pybind.slxos.v16r_1_00b.interface.ethernet', u'ethernet')]
    bindings_list = [('pybind.slxos.v16r_1_00b.interface.ethernet.logical_interface.ethernet', 'pybind.slxos.v16r_1_00b.brocade_interface', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'ethernet_', 'keyval': 'instance_id', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, ethernet=ethernet, ethernet_=ethernet_)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def interface_ethernet_mac_access_group_delete(self, ethernet=None, access_group=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		SLXOS: 16r.1.00b    

	**Parent Instance Keyword Arg Tuple(s)**:
		:param ethernet: kwarg tuple.
		:type ethernet: (name).

		:param name: tuple arg.
		:type name: (unicode)
		
		.. note::
			* length - [u'3..16']
			* pattern - ((([0-9]|[1][0-6]))/([1-9]|[1-9][0-9]|[1-9][0-9][0-9])(:[1-4])?)

	**This Instance Keyword Arg Tuple**:
		:param access_group: kwarg tuple.
		:type access_group: (mac_access_list, mac_direction, traffic_type).

		:param mac_access_list: ACL_NAME;; Access List Name (Max 63)
		:type mac_access_list: (unicode)
		
		.. note::
			* length - [u'1..63']
			* pattern - [a-zA-Z0-9]{1}([-a-zA-Z0-9_]{0,62})

		:param mac_direction: tuple arg.
		:type mac_direction: (unicode)
		
		.. note::
			* enum - [u'in', u'out']

		:param traffic_type: tuple arg.
		:type traffic_type: (unicode)
		
		.. note::
			* enum - [u'switched', u'routed']

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = [('pybind.slxos.v16r_1_00b.interface.ethernet', u'ethernet')]
    bindings_list = [('pybind.slxos.v16r_1_00b.interface.ethernet.mac.access_group', 'pybind.slxos.v16r_1_00b.brocade_interface', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'access_group', 'keyval': 'mac_access_list, mac_direction', 'extra_keyval': 'mac_access_list, mac_direction, traffic_type'}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, ethernet=ethernet, access_group=access_group)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def interface_ethernet_port_profile_port_profile_delete(self, ethernet=None, port_to_port_profile_associations=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		SLXOS: 16r.1.00b    

	**Parent Instance Keyword Arg Tuple(s)**:
		:param ethernet: kwarg tuple.
		:type ethernet: (name).

		:param name: tuple arg.
		:type name: (unicode)
		
		.. note::
			* length - [u'3..16']
			* pattern - ((([0-9]|[1][0-6]))/([1-9]|[1-9][0-9]|[1-9][0-9][0-9])(:[1-4])?)

	**This Instance Keyword Arg Tuple**:
		:param port_to_port_profile_associations: kwarg tuple.
		:type port_to_port_profile_associations: (port_to_port_profile_association).

		:param port_to_port_profile_association: Port-profile name (Max Size - 128)
		:type port_to_port_profile_association: (unicode)
		
		.. note::
			* pattern - [a-zA-Z]{1}([-a-zA-Z0-9\.\\\\@#\+\*\(\)=\{~\}%<>=$_\[\]\|]{0,127})

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = [('pybind.slxos.v16r_1_00b.interface.ethernet', u'ethernet')]
    bindings_list = [('pybind.slxos.v16r_1_00b.interface.ethernet.port_profile_to_interface_associations.port_profile_port.port_to_port_profile_associations', 'pybind.slxos.v16r_1_00b.brocade_interface', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'port_to_port_profile_associations', 'keyval': 'port_to_port_profile_association', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, ethernet=ethernet, port_to_port_profile_associations=port_to_port_profile_associations)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def interface_ethernet_qos_flowcontrol_pfc_delete(self, ethernet=None, pfc=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		SLXOS: 16r.1.00b    

	**Parent Instance Keyword Arg Tuple(s)**:
		:param ethernet: kwarg tuple.
		:type ethernet: (name).

		:param name: tuple arg.
		:type name: (unicode)
		
		.. note::
			* length - [u'3..16']
			* pattern - ((([0-9]|[1][0-6]))/([1-9]|[1-9][0-9]|[1-9][0-9][0-9])(:[1-4])?)

	**This Instance Keyword Arg Tuple**:
		:param pfc: kwarg tuple.
		:type pfc: (pfc_cos).

		:param pfc_cos: 0-7;;CoS value
		:type pfc_cos: (int)
		
		.. note::
			* range - ['0..255']

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = [('pybind.slxos.v16r_1_00b.interface.ethernet', u'ethernet')]
    bindings_list = [('pybind.slxos.v16r_1_00b.interface.ethernet.qos.flowcontrol.pfc', 'pybind.slxos.v16r_1_00b.brocade_interface', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'pfc', 'keyval': 'pfc_cos', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, ethernet=ethernet, pfc=pfc)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def interface_ethernet_qos_random_detect_traffic_class_delete(self, ethernet=None, traffic_class=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		SLXOS: 16r.1.00b    

	**Parent Instance Keyword Arg Tuple(s)**:
		:param ethernet: kwarg tuple.
		:type ethernet: (name).

		:param name: tuple arg.
		:type name: (unicode)
		
		.. note::
			* length - [u'3..16']
			* pattern - ((([0-9]|[1][0-6]))/([1-9]|[1-9][0-9]|[1-9][0-9][0-9])(:[1-4])?)

	**This Instance Keyword Arg Tuple**:
		:param traffic_class: kwarg tuple.
		:type traffic_class: (red_tc_value).

		:param red_tc_value: tuple arg.
		:type red_tc_value: (int)
		
		.. note::
			* range - ['0..255']

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = [('pybind.slxos.v16r_1_00b.interface.ethernet', u'ethernet')]
    bindings_list = [('pybind.slxos.v16r_1_00b.interface.ethernet.qos.random_detect.traffic_class', 'pybind.slxos.v16r_1_00b.brocade_interface', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'traffic_class', 'keyval': 'red_tc_value', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, ethernet=ethernet, traffic_class=traffic_class)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def interface_ethernet_qos_rx_queue_multicast_delete(self, ethernet=None, queue_size=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		SLXOS: 16r.1.00b    

	**Parent Instance Keyword Arg Tuple(s)**:
		:param ethernet: kwarg tuple.
		:type ethernet: (name).

		:param name: tuple arg.
		:type name: (unicode)
		
		.. note::
			* length - [u'3..16']
			* pattern - ((([0-9]|[1][0-6]))/([1-9]|[1-9][0-9]|[1-9][0-9][0-9])(:[1-4])?)

	**This Instance Keyword Arg Tuple**:
		:param queue_size: kwarg tuple.
		:type queue_size: (traffic_class, min_queue_size, max_queue_size).

		:param traffic_class: Traffic class to configure multicast queue size
		:type traffic_class: (int)
		
		.. note::
			* range - ['0..255']

		:param min_queue_size: Configure minimum queue size
		:type min_queue_size: (long)
		
		.. note::
			* range - ['0..4294967295']

		:param max_queue_size: Configure maximum queue size
		:type max_queue_size: (long)
		
		.. note::
			* range - ['0..4294967295']

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = [('pybind.slxos.v16r_1_00b.interface.ethernet', u'ethernet')]
    bindings_list = [('pybind.slxos.v16r_1_00b.interface.ethernet.qos.rx_queue.multicast.queue_size', 'pybind.slxos.v16r_1_00b.brocade_interface', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'queue_size', 'keyval': 'traffic_class', 'extra_keyval': 'traffic_class, min_queue_size, max_queue_size'}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, ethernet=ethernet, queue_size=queue_size)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def interface_ethernet_qos_rx_queue_unicast_delete(self, ethernet=None, queue_size=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		SLXOS: 16r.1.00b    

	**Parent Instance Keyword Arg Tuple(s)**:
		:param ethernet: kwarg tuple.
		:type ethernet: (name).

		:param name: tuple arg.
		:type name: (unicode)
		
		.. note::
			* length - [u'3..16']
			* pattern - ((([0-9]|[1][0-6]))/([1-9]|[1-9][0-9]|[1-9][0-9][0-9])(:[1-4])?)

	**This Instance Keyword Arg Tuple**:
		:param queue_size: kwarg tuple.
		:type queue_size: (traffic_class, min_queue_size, max_queue_size).

		:param traffic_class: Traffic class to configure unicast queue size
		:type traffic_class: (int)
		
		.. note::
			* range - ['0..255']

		:param min_queue_size: Configure minimum queue size
		:type min_queue_size: (long)
		
		.. note::
			* range - ['0..4294967295']

		:param max_queue_size: Configure maximum queue size
		:type max_queue_size: (long)
		
		.. note::
			* range - ['0..4294967295']

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = [('pybind.slxos.v16r_1_00b.interface.ethernet', u'ethernet')]
    bindings_list = [('pybind.slxos.v16r_1_00b.interface.ethernet.qos.rx_queue.unicast.queue_size', 'pybind.slxos.v16r_1_00b.brocade_interface', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'queue_size', 'keyval': 'traffic_class', 'extra_keyval': 'traffic_class, min_queue_size, max_queue_size'}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, ethernet=ethernet, queue_size=queue_size)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def interface_ethernet_rmon_collection_history_delete(self, ethernet=None, history_control_entry=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		SLXOS: 16r.1.00b    

	**Parent Instance Keyword Arg Tuple(s)**:
		:param ethernet: kwarg tuple.
		:type ethernet: (name).

		:param name: tuple arg.
		:type name: (unicode)
		
		.. note::
			* length - [u'3..16']
			* pattern - ((([0-9]|[1][0-6]))/([1-9]|[1-9][0-9]|[1-9][0-9][0-9])(:[1-4])?)

	**This Instance Keyword Arg Tuple**:
		:param history_control_entry: kwarg tuple.
		:type history_control_entry: (history_control_index, history_control_buckets_requested, history_control_interval, history_control_owner).

		:param history_control_index: tuple arg.
		:type history_control_index: (long)
		
		.. note::
			* range - ['-2147483648..2147483647']

		:param history_control_buckets_requested: Buckets (default 50)
		:type history_control_buckets_requested: (long)
		
		.. note::
			* range - ['-2147483648..2147483647']

		:param history_control_interval: Polling Interval (default 1800)
		:type history_control_interval: (long)
		
		.. note::
			* range - ['-2147483648..2147483647']

		:param history_control_owner: Owner identity
		:type history_control_owner: (unicode)
		
		.. note::
			* length - [u'1 .. 15']
			* pattern - [a-zA-Z]{1}([-a-zA-Z0-9\.\\\\@#\+\*\(\)=\{~\}%<>=$_\[\]\|]{0,14})

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = [('pybind.slxos.v16r_1_00b.interface.ethernet', u'ethernet')]
    bindings_list = [('pybind.slxos.v16r_1_00b.interface.ethernet.rmon.collection.history_control_entry', 'pybind.slxos.v16r_1_00b.brocade_interface', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'history_control_entry', 'keyval': 'history_control_index', 'extra_keyval': 'history_control_index, history_control_buckets_requested, history_control_interval, history_control_owner'}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, ethernet=ethernet, history_control_entry=history_control_entry)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def interface_ethernet_rmon_collection_stats_delete(self, ethernet=None, ether_stats_entry=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		SLXOS: 16r.1.00b    

	**Parent Instance Keyword Arg Tuple(s)**:
		:param ethernet: kwarg tuple.
		:type ethernet: (name).

		:param name: tuple arg.
		:type name: (unicode)
		
		.. note::
			* length - [u'3..16']
			* pattern - ((([0-9]|[1][0-6]))/([1-9]|[1-9][0-9]|[1-9][0-9][0-9])(:[1-4])?)

	**This Instance Keyword Arg Tuple**:
		:param ether_stats_entry: kwarg tuple.
		:type ether_stats_entry: (ether_stats_index, ether_stats_owner).

		:param ether_stats_index: tuple arg.
		:type ether_stats_index: (long)
		
		.. note::
			* range - ['-2147483648..2147483647']

		:param ether_stats_owner: Owner identity
		:type ether_stats_owner: (unicode)
		
		.. note::
			* length - [u'1 .. 15']
			* pattern - [a-zA-Z]{1}([-a-zA-Z0-9\.\\\\@#\+\*\(\)=\{~\}%<>=$_\[\]\|]{0,14})

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = [('pybind.slxos.v16r_1_00b.interface.ethernet', u'ethernet')]
    bindings_list = [('pybind.slxos.v16r_1_00b.interface.ethernet.rmon.collection.ether_stats_entry', 'pybind.slxos.v16r_1_00b.brocade_interface', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'ether_stats_entry', 'keyval': 'ether_stats_index', 'extra_keyval': 'ether_stats_index, ether_stats_owner'}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, ethernet=ethernet, ether_stats_entry=ether_stats_entry)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def interface_ethernet_spanning_tree_instance_delete(self, ethernet=None, instance=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		SLXOS: 16r.1.00b    

	**Parent Instance Keyword Arg Tuple(s)**:
		:param ethernet: kwarg tuple.
		:type ethernet: (name).

		:param name: tuple arg.
		:type name: (unicode)
		
		.. note::
			* length - [u'3..16']
			* pattern - ((([0-9]|[1][0-6]))/([1-9]|[1-9][0-9]|[1-9][0-9][0-9])(:[1-4])?)

	**This Instance Keyword Arg Tuple**:
		:param instance: kwarg tuple.
		:type instance: (id).

		:param id: tuple arg.
		:type id: (int)
		
		.. note::
			* range - ['0..255']

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = [('pybind.slxos.v16r_1_00b.interface.ethernet', u'ethernet')]
    bindings_list = [('pybind.slxos.v16r_1_00b.interface.ethernet.spanning_tree.instance', 'pybind.slxos.v16r_1_00b.brocade_interface', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'instance', 'keyval': 'id', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, ethernet=ethernet, instance=instance)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def interface_ethernet_spanning_tree_vlan_delete(self, ethernet=None, vlan=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		SLXOS: 16r.1.00b    

	**Parent Instance Keyword Arg Tuple(s)**:
		:param ethernet: kwarg tuple.
		:type ethernet: (name).

		:param name: tuple arg.
		:type name: (unicode)
		
		.. note::
			* length - [u'3..16']
			* pattern - ((([0-9]|[1][0-6]))/([1-9]|[1-9][0-9]|[1-9][0-9][0-9])(:[1-4])?)

	**This Instance Keyword Arg Tuple**:
		:param vlan: kwarg tuple.
		:type vlan: (id).

		:param id: tuple arg.
		:type id: (long)
		
		.. note::
			* range - ['0..4294967295']

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = [('pybind.slxos.v16r_1_00b.interface.ethernet', u'ethernet')]
    bindings_list = [('pybind.slxos.v16r_1_00b.interface.ethernet.spanning_tree.vlan', 'pybind.slxos.v16r_1_00b.brocade_interface', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'vlan', 'keyval': 'id', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, ethernet=ethernet, vlan=vlan)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def interface_ethernet_storm_control_ingress_delete(self, ethernet=None, ingress=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		SLXOS: 16r.1.00b    

	**Parent Instance Keyword Arg Tuple(s)**:
		:param ethernet: kwarg tuple.
		:type ethernet: (name).

		:param name: tuple arg.
		:type name: (unicode)
		
		.. note::
			* length - [u'3..16']
			* pattern - ((([0-9]|[1][0-6]))/([1-9]|[1-9][0-9]|[1-9][0-9][0-9])(:[1-4])?)

	**This Instance Keyword Arg Tuple**:
		:param ingress: kwarg tuple.
		:type ingress: (protocol_type, rate_format, rate_bps, rate_percent, bum_action).

		:param protocol_type: tuple arg.
		:type protocol_type: (unicode)
		
		.. note::
			* enum - [u'broadcast', u'unknown-unicast', u'multicast']

		:param rate_format: tuple arg.
		:type rate_format: (unicode)
		
		.. note::
			* enum - [u'limit-bps', u'limit-percent']

		:param rate_bps: tuple arg.
		:type rate_bps: (long)
		
		.. note::
			* range - ['0..18446744073709551615']

		:param rate_percent: tuple arg.
		:type rate_percent: (long)
		
		.. note::
			* range - ['0..4294967295']

		:param bum_action: tuple arg.
		:type bum_action: (unicode)
		
		.. note::
			* enum - [u'monitor', u'shutdown']

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = [('pybind.slxos.v16r_1_00b.interface.ethernet', u'ethernet')]
    bindings_list = [('pybind.slxos.v16r_1_00b.interface.ethernet.storm_control.ingress', 'pybind.slxos.v16r_1_00b.brocade_interface', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'ingress', 'keyval': 'protocol_type', 'extra_keyval': 'protocol_type, rate_format, rate_bps, rate_percent, bum_action'}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, ethernet=ethernet, ingress=ingress)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def interface_ethernet_switchport_access_mac_group_rspan_vlan_classification_access_rspan_vlan_delete(self, ethernet=None, vlan=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		SLXOS: 16r.1.00b    

	**Parent Instance Keyword Arg Tuple(s)**:
		:param ethernet: kwarg tuple.
		:type ethernet: (name).

		:param name: tuple arg.
		:type name: (unicode)
		
		.. note::
			* length - [u'3..16']
			* pattern - ((([0-9]|[1][0-6]))/([1-9]|[1-9][0-9]|[1-9][0-9][0-9])(:[1-4])?)

	**This Instance Keyword Arg Tuple**:
		:param vlan: kwarg tuple.
		:type vlan: (access_vlan_id, access_mac_group).

		:param access_vlan_id: Set the default VLAN for the interface
		:type access_vlan_id: (long)
		
		.. note::
			* range - ['0..4294967295']

		:param access_mac_group: Associate a Mac group with a vlan
		:type access_mac_group: (long)
		
		.. note::
			* range - ['0..4294967295']

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = [('pybind.slxos.v16r_1_00b.interface.ethernet', u'ethernet')]
    bindings_list = [('pybind.slxos.v16r_1_00b.interface.ethernet.switchport.access_mac_group_rspan_vlan_classification.access.vlan', 'pybind.slxos.v16r_1_00b.brocade_interface', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'vlan', 'keyval': 'access_vlan_id, access_mac_group', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, ethernet=ethernet, vlan=vlan)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def interface_ethernet_switchport_access_mac_group_vlan_classification_access_vlan_delete(self, ethernet=None, vlan=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		SLXOS: 16r.1.00b    

	**Parent Instance Keyword Arg Tuple(s)**:
		:param ethernet: kwarg tuple.
		:type ethernet: (name).

		:param name: tuple arg.
		:type name: (unicode)
		
		.. note::
			* length - [u'3..16']
			* pattern - ((([0-9]|[1][0-6]))/([1-9]|[1-9][0-9]|[1-9][0-9][0-9])(:[1-4])?)

	**This Instance Keyword Arg Tuple**:
		:param vlan: kwarg tuple.
		:type vlan: (access_vlan_id, access_mac_group).

		:param access_vlan_id: Set the default VLAN for the interface
		:type access_vlan_id: (long)
		
		.. note::
			* range - ['0..4294967295']

		:param access_mac_group: Associate a Mac group with a vlan
		:type access_mac_group: (long)
		
		.. note::
			* range - ['0..4294967295']

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = [('pybind.slxos.v16r_1_00b.interface.ethernet', u'ethernet')]
    bindings_list = [('pybind.slxos.v16r_1_00b.interface.ethernet.switchport.access_mac_group_vlan_classification.access.vlan', 'pybind.slxos.v16r_1_00b.brocade_interface', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'vlan', 'keyval': 'access_vlan_id, access_mac_group', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, ethernet=ethernet, vlan=vlan)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def interface_ethernet_switchport_access_mac_rspan_vlan_classification_access_rspan_vlan_delete(self, ethernet=None, vlan=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		SLXOS: 16r.1.00b    

	**Parent Instance Keyword Arg Tuple(s)**:
		:param ethernet: kwarg tuple.
		:type ethernet: (name).

		:param name: tuple arg.
		:type name: (unicode)
		
		.. note::
			* length - [u'3..16']
			* pattern - ((([0-9]|[1][0-6]))/([1-9]|[1-9][0-9]|[1-9][0-9][0-9])(:[1-4])?)

	**This Instance Keyword Arg Tuple**:
		:param vlan: kwarg tuple.
		:type vlan: (access_vlan_id, access_mac_address).

		:param access_vlan_id: Set the default VLAN for the interface
		:type access_vlan_id: (long)
		
		.. note::
			* range - ['0..4294967295']

		:param access_mac_address: Associate the Mac address with a vlan
		:type access_mac_address: (unicode)
		
		.. note::
			* pattern - [0-9a-fA-F]{4}(\.[0-9a-fA-F]{4}){2}

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = [('pybind.slxos.v16r_1_00b.interface.ethernet', u'ethernet')]
    bindings_list = [('pybind.slxos.v16r_1_00b.interface.ethernet.switchport.access_mac_rspan_vlan_classification.access.vlan', 'pybind.slxos.v16r_1_00b.brocade_interface', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'vlan', 'keyval': 'access_vlan_id, access_mac_address', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, ethernet=ethernet, vlan=vlan)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def interface_ethernet_switchport_access_mac_vlan_classification_access_vlan_delete(self, ethernet=None, vlan=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		SLXOS: 16r.1.00b    

	**Parent Instance Keyword Arg Tuple(s)**:
		:param ethernet: kwarg tuple.
		:type ethernet: (name).

		:param name: tuple arg.
		:type name: (unicode)
		
		.. note::
			* length - [u'3..16']
			* pattern - ((([0-9]|[1][0-6]))/([1-9]|[1-9][0-9]|[1-9][0-9][0-9])(:[1-4])?)

	**This Instance Keyword Arg Tuple**:
		:param vlan: kwarg tuple.
		:type vlan: (access_vlan_id, access_mac_address).

		:param access_vlan_id: Set the default VLAN for the interface
		:type access_vlan_id: (long)
		
		.. note::
			* range - ['0..4294967295']

		:param access_mac_address: Associate the Mac address with a vlan
		:type access_mac_address: (unicode)
		
		.. note::
			* pattern - [0-9a-fA-F]{4}(\.[0-9a-fA-F]{4}){2}

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = [('pybind.slxos.v16r_1_00b.interface.ethernet', u'ethernet')]
    bindings_list = [('pybind.slxos.v16r_1_00b.interface.ethernet.switchport.access_mac_vlan_classification.access.vlan', 'pybind.slxos.v16r_1_00b.brocade_interface', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'vlan', 'keyval': 'access_vlan_id, access_mac_address', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, ethernet=ethernet, vlan=vlan)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def interface_ethernet_switchport_port_security_delete(self, ethernet=None, port_secutiry_mac_address=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		SLXOS: 16r.1.00b    

	**Parent Instance Keyword Arg Tuple(s)**:
		:param ethernet: kwarg tuple.
		:type ethernet: (name).

		:param name: tuple arg.
		:type name: (unicode)
		
		.. note::
			* length - [u'3..16']
			* pattern - ((([0-9]|[1][0-6]))/([1-9]|[1-9][0-9]|[1-9][0-9][0-9])(:[1-4])?)

	**This Instance Keyword Arg Tuple**:
		:param port_secutiry_mac_address: kwarg tuple.
		:type port_secutiry_mac_address: (mac_address, port_sec_vlan).

		:param mac_address: Mac Address
		:type mac_address: (unicode)
		
		.. note::
			* pattern - [0-9a-fA-F]{4}(\.[0-9a-fA-F]{4}){2}

		:param port_sec_vlan: Forwarding vlan
		:type port_sec_vlan: (long)
		
		.. note::
			* range - ['0..4294967295']

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = [('pybind.slxos.v16r_1_00b.interface.ethernet', u'ethernet')]
    bindings_list = [('pybind.slxos.v16r_1_00b.interface.ethernet.switchport.port_security.port_secutiry_mac_address', 'pybind.slxos.v16r_1_00b.brocade_interface', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'port_secutiry_mac_address', 'keyval': 'mac_address, port_sec_vlan', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, ethernet=ethernet, port_secutiry_mac_address=port_secutiry_mac_address)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def interface_ethernet_switchport_port_security_sticky_delete(self, ethernet=None, port_secutiry_mac_address=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		SLXOS: 16r.1.00b    

	**Parent Instance Keyword Arg Tuple(s)**:
		:param ethernet: kwarg tuple.
		:type ethernet: (name).

		:param name: tuple arg.
		:type name: (unicode)
		
		.. note::
			* length - [u'3..16']
			* pattern - ((([0-9]|[1][0-6]))/([1-9]|[1-9][0-9]|[1-9][0-9][0-9])(:[1-4])?)

	**This Instance Keyword Arg Tuple**:
		:param port_secutiry_mac_address: kwarg tuple.
		:type port_secutiry_mac_address: (mac_address, port_sec_vlan).

		:param mac_address: Mac Address
		:type mac_address: (unicode)
		
		.. note::
			* pattern - [0-9a-fA-F]{4}(\.[0-9a-fA-F]{4}){2}

		:param port_sec_vlan: Forwarding vlan
		:type port_sec_vlan: (long)
		
		.. note::
			* range - ['0..4294967295']

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = [('pybind.slxos.v16r_1_00b.interface.ethernet', u'ethernet')]
    bindings_list = [('pybind.slxos.v16r_1_00b.interface.ethernet.switchport.port_security.sticky.port_secutiry_mac_address', 'pybind.slxos.v16r_1_00b.brocade_interface', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'port_secutiry_mac_address', 'keyval': 'mac_address, port_sec_vlan', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, ethernet=ethernet, port_secutiry_mac_address=port_secutiry_mac_address)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def interface_ethernet_switchport_trunk_allowed_trunk_rspan_vlan_classification_rspan_vlan_add_delete(self, ethernet=None, add=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		SLXOS: 16r.1.00b    

	**Parent Instance Keyword Arg Tuple(s)**:
		:param ethernet: kwarg tuple.
		:type ethernet: (name).

		:param name: tuple arg.
		:type name: (unicode)
		
		.. note::
			* length - [u'3..16']
			* pattern - ((([0-9]|[1][0-6]))/([1-9]|[1-9][0-9]|[1-9][0-9][0-9])(:[1-4])?)

	**This Instance Keyword Arg Tuple**:
		:param add: kwarg tuple.
		:type add: (trunk_vlan_id, trunk_ctag_id).

		:param trunk_vlan_id: tuple arg.
		:type trunk_vlan_id: (long)
		
		.. note::
			* range - ['0..4294967295']

		:param trunk_ctag_id: tuple arg.
		:type trunk_ctag_id: (long)
		
		.. note::
			* range - ['0..4294967295']

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = [('pybind.slxos.v16r_1_00b.interface.ethernet', u'ethernet')]
    bindings_list = [('pybind.slxos.v16r_1_00b.interface.ethernet.switchport.trunk.allowed.trunk_rspan_vlan_classification.rspan_vlan.add_', 'pybind.slxos.v16r_1_00b.brocade_interface', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'add', 'keyval': 'trunk_vlan_id, trunk_ctag_id', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, ethernet=ethernet, add=add)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def interface_ethernet_switchport_trunk_allowed_trunk_rspan_vlan_classification_rspan_vlan_remove_delete(self, ethernet=None, remove=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		SLXOS: 16r.1.00b    

	**Parent Instance Keyword Arg Tuple(s)**:
		:param ethernet: kwarg tuple.
		:type ethernet: (name).

		:param name: tuple arg.
		:type name: (unicode)
		
		.. note::
			* length - [u'3..16']
			* pattern - ((([0-9]|[1][0-6]))/([1-9]|[1-9][0-9]|[1-9][0-9][0-9])(:[1-4])?)

	**This Instance Keyword Arg Tuple**:
		:param remove: kwarg tuple.
		:type remove: (trunk_vlan_id, trunk_ctag_id).

		:param trunk_vlan_id: tuple arg.
		:type trunk_vlan_id: (long)
		
		.. note::
			* range - ['0..4294967295']

		:param trunk_ctag_id: tuple arg.
		:type trunk_ctag_id: (long)
		
		.. note::
			* range - ['0..4294967295']

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = [('pybind.slxos.v16r_1_00b.interface.ethernet', u'ethernet')]
    bindings_list = [('pybind.slxos.v16r_1_00b.interface.ethernet.switchport.trunk.allowed.trunk_rspan_vlan_classification.rspan_vlan.remove_', 'pybind.slxos.v16r_1_00b.brocade_interface', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'remove', 'keyval': 'trunk_vlan_id, trunk_ctag_id', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, ethernet=ethernet, remove=remove)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def interface_ethernet_switchport_trunk_trunk_vlan_classification_allowed_vlan_add_delete(self, ethernet=None, add=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		SLXOS: 16r.1.00b    

	**Parent Instance Keyword Arg Tuple(s)**:
		:param ethernet: kwarg tuple.
		:type ethernet: (name).

		:param name: tuple arg.
		:type name: (unicode)
		
		.. note::
			* length - [u'3..16']
			* pattern - ((([0-9]|[1][0-6]))/([1-9]|[1-9][0-9]|[1-9][0-9][0-9])(:[1-4])?)

	**This Instance Keyword Arg Tuple**:
		:param add: kwarg tuple.
		:type add: (trunk_vlan_id).

		:param trunk_vlan_id: tuple arg.
		:type trunk_vlan_id: (long)
		
		.. note::
			* range - ['0..4294967295']

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = [('pybind.slxos.v16r_1_00b.interface.ethernet', u'ethernet')]
    bindings_list = [('pybind.slxos.v16r_1_00b.interface.ethernet.switchport.trunk.trunk_vlan_classification.allowed.vlan.add_', 'pybind.slxos.v16r_1_00b.brocade_interface', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'add', 'keyval': 'trunk_vlan_id', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, ethernet=ethernet, add=add)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def interface_ethernet_switchport_trunk_trunk_vlan_classification_allowed_vlan_remove_delete(self, ethernet=None, remove=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		SLXOS: 16r.1.00b    

	**Parent Instance Keyword Arg Tuple(s)**:
		:param ethernet: kwarg tuple.
		:type ethernet: (name).

		:param name: tuple arg.
		:type name: (unicode)
		
		.. note::
			* length - [u'3..16']
			* pattern - ((([0-9]|[1][0-6]))/([1-9]|[1-9][0-9]|[1-9][0-9][0-9])(:[1-4])?)

	**This Instance Keyword Arg Tuple**:
		:param remove: kwarg tuple.
		:type remove: (trunk_vlan_id).

		:param trunk_vlan_id: tuple arg.
		:type trunk_vlan_id: (long)
		
		.. note::
			* range - ['0..4294967295']

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = [('pybind.slxos.v16r_1_00b.interface.ethernet', u'ethernet')]
    bindings_list = [('pybind.slxos.v16r_1_00b.interface.ethernet.switchport.trunk.trunk_vlan_classification.allowed.vlan.remove_', 'pybind.slxos.v16r_1_00b.brocade_interface', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'remove', 'keyval': 'trunk_vlan_id', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, ethernet=ethernet, remove=remove)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def interface_ethernet_track_interface_delete(self, ethernet=None, interface=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		SLXOS: 16r.1.00b    

	**Parent Instance Keyword Arg Tuple(s)**:
		:param ethernet: kwarg tuple.
		:type ethernet: (name).

		:param name: tuple arg.
		:type name: (unicode)
		
		.. note::
			* length - [u'3..16']
			* pattern - ((([0-9]|[1][0-6]))/([1-9]|[1-9][0-9]|[1-9][0-9][0-9])(:[1-4])?)

	**This Instance Keyword Arg Tuple**:
		:param interface: kwarg tuple.
		:type interface: (track_interface_type, track_interface_name).

		:param track_interface_type: tuple arg.
		:type track_interface_type: (unicode)
		
		.. note::
			* enum - [u'ethernet', u'port-channel']

		:param track_interface_name: Interface name
		:type track_interface_name: (unicode)
		
		.. note::
			* pattern - (((([1-9]|[1-9][0-9]|1[0-9]{2}|2[0-3][0-9])/)?(([0-9]|1[0-6]))/([1-9]|[1-9][0-9]|[1-9][0-9][0-9])(:[1-4])?)|([1-9]|[1-9][0-9]|[1-9][0-9]{2}|[1-5][0-9]{3}|6[0-1][0-4]{2}))

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = [('pybind.slxos.v16r_1_00b.interface.ethernet', u'ethernet')]
    bindings_list = [('pybind.slxos.v16r_1_00b.interface.ethernet.track.interface', 'pybind.slxos.v16r_1_00b.brocade_interface', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'interface', 'keyval': 'track_interface_type, track_interface_name', 'extra_keyval': 'track_interface_type, track_interface_name'}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, ethernet=ethernet, interface=interface)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def interface_ethernet_vrrp_group_delete(self, ethernet=None, vrrp=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		SLXOS: 16r.1.00b    

	**Parent Instance Keyword Arg Tuple(s)**:
		:param ethernet: kwarg tuple.
		:type ethernet: (name).

		:param name: tuple arg.
		:type name: (unicode)
		
		.. note::
			* length - [u'3..16']
			* pattern - ((([0-9]|[1][0-6]))/([1-9]|[1-9][0-9]|[1-9][0-9][0-9])(:[1-4])?)

	**This Instance Keyword Arg Tuple**:
		:param vrrp: kwarg tuple.
		:type vrrp: (vrid, version).

		:param vrid: tuple arg.
		:type vrid: (int)
		
		.. note::
			* range - ['0..255']

		:param version: Set VRRP version 2/3
		:type version: (int)
		
		.. note::
			* range - ['0..255']

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = [('pybind.slxos.v16r_1_00b.interface.ethernet', u'ethernet')]
    bindings_list = [('pybind.slxos.v16r_1_00b.interface.ethernet.vrrp', 'pybind.slxos.v16r_1_00b.brocade_interface', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'vrrp', 'keyval': 'vrid, version', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, ethernet=ethernet, vrrp=vrrp)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def interface_ethernet_vrrp_group_track_delete(self, ethernet=None, vrrp=None, interface=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		SLXOS: 16r.1.00b    

	**Parent Instance Keyword Arg Tuple(s)**:
		:param ethernet: kwarg tuple.
		:type ethernet: (name).

		:param name: tuple arg.
		:type name: (unicode)
		
		.. note::
			* length - [u'3..16']
			* pattern - ((([0-9]|[1][0-6]))/([1-9]|[1-9][0-9]|[1-9][0-9][0-9])(:[1-4])?)

		:param vrrp: kwarg tuple.
		:type vrrp: (vrid, version).

		:param vrid: tuple arg.
		:type vrid: (int)
		
		.. note::
			* range - ['0..255']

		:param version: Set VRRP version 2/3
		:type version: (int)
		
		.. note::
			* range - ['0..255']

	**This Instance Keyword Arg Tuple**:
		:param interface: kwarg tuple.
		:type interface: (interface_type, interface_name).

		:param interface_type: tuple arg.
		:type interface_type: (unicode)
		
		.. note::
			* enum - [u'ethernet', u'port-channel']

		:param interface_name: tuple arg.
		:type interface_name: (unicode)
		
		.. note::
			* length - [u'3..16']
			* pattern - ((([0-9]|[1][0-6]))/([1-9]|[1-9][0-9]|[1-9][0-9][0-9])(:[1-4])?)

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = [('pybind.slxos.v16r_1_00b.interface.ethernet', u'ethernet'), ('pybind.slxos.v16r_1_00b.interface.ethernet.vrrp', u'vrrp')]
    bindings_list = [('pybind.slxos.v16r_1_00b.interface.ethernet.vrrp.track.interface', 'pybind.slxos.v16r_1_00b.brocade_interface', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'vrid, version', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'interface', 'keyval': 'interface_type, interface_name', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, ethernet=ethernet, vrrp=vrrp, interface=interface)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def interface_ethernet_vrrp_group_virtual_ip_delete(self, ethernet=None, vrrp=None, virtual_ip=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		SLXOS: 16r.1.00b    

	**Parent Instance Keyword Arg Tuple(s)**:
		:param ethernet: kwarg tuple.
		:type ethernet: (name).

		:param name: tuple arg.
		:type name: (unicode)
		
		.. note::
			* length - [u'3..16']
			* pattern - ((([0-9]|[1][0-6]))/([1-9]|[1-9][0-9]|[1-9][0-9][0-9])(:[1-4])?)

		:param vrrp: kwarg tuple.
		:type vrrp: (vrid, version).

		:param vrid: tuple arg.
		:type vrid: (int)
		
		.. note::
			* range - ['0..255']

		:param version: Set VRRP version 2/3
		:type version: (int)
		
		.. note::
			* range - ['0..255']

	**This Instance Keyword Arg Tuple**:
		:param virtual_ip: kwarg tuple.
		:type virtual_ip: (virtual_ipaddr).

		:param virtual_ipaddr: Virtual IPv4 address in dotted decimal
		:type virtual_ipaddr: (unicode)
		
		.. note::
			* pattern - (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = [('pybind.slxos.v16r_1_00b.interface.ethernet', u'ethernet'), ('pybind.slxos.v16r_1_00b.interface.ethernet.vrrp', u'vrrp')]
    bindings_list = [('pybind.slxos.v16r_1_00b.interface.ethernet.vrrp.virtual_ip', 'pybind.slxos.v16r_1_00b.brocade_interface', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'vrid, version', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'virtual_ip', 'keyval': 'virtual_ipaddr', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, ethernet=ethernet, vrrp=vrrp, virtual_ip=virtual_ip)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def interface_fcoe_delete(self, fcoe=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		NOS: 6.0.2b, 7.0.1a, 7.1.0    

	**This Instance Keyword Arg Tuple**:
		:param fcoe: kwarg tuple.
		:type fcoe: (fcoe_interface_name).

		:param fcoe_interface_name: tuple arg.
		:type fcoe_interface_name: (unicode)
		
		.. note::
			* length - [u'3..32']

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = []
    bindings_list = [('pybind.nos.v6_0_2b.interface.fcoe', 'pybind.nos.v6_0_2b.brocade_interface', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.interface.fcoe', 'pybind.nos.v7_0_1a.brocade_interface', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.interface.fcoe', 'pybind.nos.v7_1_0.brocade_interface', 'pybind.nos.v7_1_0')]
    composed_child_list = []
    compositions_keyval_list = []
    bindings_keyval = {'kwargs_key_name': u'fcoe', 'keyval': 'fcoe_interface_name', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, fcoe=fcoe)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def interface_fortygigabitethernet_ip_access_group_delete(self, fortygigabitethernet=None, access_group=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		NOS: 6.0.2b, 7.0.1a, 7.1.0    

	**Parent Instance Keyword Arg Tuple(s)**:
		:param fortygigabitethernet: kwarg tuple.
		:type fortygigabitethernet: (name).

		:param name: tuple arg.
		:type name: (unicode)
		
		.. note::
			* length - [u'3..16']
			* pattern - ((([1-9]|[1-9][0-9]|1[0-9][0-9]|2[0-3][0-9])/)?(([0-9]|[1][0-6]))/([1-9]|[1-9][0-9]|[1-9][0-9][0-9])(:[1-4])?)

	**This Instance Keyword Arg Tuple**:
		:param access_group: kwarg tuple.
		:type access_group: (ip_access_list, ip_direction, traffic_type).

		:param ip_access_list: ACL_NAME;; Access List Name (Max 63)
		:type ip_access_list: (unicode)
		
		.. note::
			* length - [u'1..63']
			* pattern - [a-zA-Z0-9]{1}([-a-zA-Z0-9_]{0,62})

		:param ip_direction: tuple arg.
		:type ip_direction: (unicode)
		
		.. note::
			* enum - [u'in', u'out']

		:param traffic_type: tuple arg.
		:type traffic_type: (unicode)
		
		.. note::
			* enum - [u'switched', u'routed']

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = [('pybind.nos.v6_0_2b.interface.fortygigabitethernet', u'fortygigabitethernet'), ('pybind.nos.v7_0_1a.interface.fortygigabitethernet', u'fortygigabitethernet'), ('pybind.nos.v7_1_0.interface.fortygigabitethernet', u'fortygigabitethernet')]
    bindings_list = [('pybind.nos.v6_0_2b.interface.fortygigabitethernet.ip_acl_interface.ip.access_group', 'pybind.nos.v6_0_2b.brocade_interface', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.interface.fortygigabitethernet.ip_acl_interface.ip.access_group', 'pybind.nos.v7_0_1a.brocade_interface', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.interface.fortygigabitethernet.ip_acl_interface.ip.access_group', 'pybind.nos.v7_1_0.brocade_interface', 'pybind.nos.v7_1_0')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'access_group', 'keyval': 'ip_access_list, ip_direction', 'extra_keyval': 'ip_access_list, ip_direction, traffic_type'}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, fortygigabitethernet=fortygigabitethernet, access_group=access_group)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def interface_fortygigabitethernet_ip_address_delete(self, fortygigabitethernet=None, address=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		NOS: 6.0.2b, 7.0.1a, 7.1.0    

	**Parent Instance Keyword Arg Tuple(s)**:
		:param fortygigabitethernet: kwarg tuple.
		:type fortygigabitethernet: (name).

		:param name: tuple arg.
		:type name: (unicode)
		
		.. note::
			* length - [u'3..16']
			* pattern - ((([1-9]|[1-9][0-9]|1[0-9][0-9]|2[0-3][0-9])/)?(([0-9]|[1][0-6]))/([1-9]|[1-9][0-9]|[1-9][0-9][0-9])(:[1-4])?)

	**This Instance Keyword Arg Tuple**:
		:param address: kwarg tuple.
		:type address: (address, secondary, ospf_passive, ospf_ignore).

		:param address: A.B.C.D/M IP address in dotted decimal/Mask
		:type address: (unicode)
		
		.. note::
			* pattern - (([1-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.)(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){2}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])/(([1-9])|([1-2][0-9])|(3[0-1]))

		:param secondary: Secondary ip address on the specific interface
		:type secondary: (YANGBool)

		:param ospf_passive: ospf pasive address on the specific interface
		:type ospf_passive: (YANGBool)

		:param ospf_ignore: ospf active address on the specific interface
		:type ospf_ignore: (YANGBool)

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = [('pybind.nos.v6_0_2b.interface.fortygigabitethernet', u'fortygigabitethernet'), ('pybind.nos.v7_1_0.interface.fortygigabitethernet', u'fortygigabitethernet'), ('pybind.nos.v7_0_1a.interface.fortygigabitethernet', u'fortygigabitethernet')]
    bindings_list = [('pybind.nos.v6_0_2b.interface.fortygigabitethernet.ip.ip_config.address', 'pybind.nos.v6_0_2b.brocade_interface', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.interface.fortygigabitethernet.ip.ip_config.address', 'pybind.nos.v7_0_1a.brocade_interface', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.interface.fortygigabitethernet.ip.ip_config.address', 'pybind.nos.v7_1_0.brocade_interface', 'pybind.nos.v7_1_0')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'address', 'keyval': 'address', 'extra_keyval': 'address, secondary, ospf_passive, ospf_ignore'}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, fortygigabitethernet=fortygigabitethernet, address=address)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def interface_fortygigabitethernet_ip_dhcp_relay_delete(self, fortygigabitethernet=None, servers=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		NOS: 6.0.2b, 7.0.1a, 7.1.0    

	**Parent Instance Keyword Arg Tuple(s)**:
		:param fortygigabitethernet: kwarg tuple.
		:type fortygigabitethernet: (name).

		:param name: tuple arg.
		:type name: (unicode)
		
		.. note::
			* length - [u'3..16']
			* pattern - ((([1-9]|[1-9][0-9]|1[0-9][0-9]|2[0-3][0-9])/)?(([0-9]|[1][0-6]))/([1-9]|[1-9][0-9]|[1-9][0-9][0-9])(:[1-4])?)

	**This Instance Keyword Arg Tuple**:
		:param servers: kwarg tuple.
		:type servers: (relay_ip_addr, server_vrf_name).

		:param relay_ip_addr: A.B.C.D;; IP address of the DHCP server
		:type relay_ip_addr: (unicode)
		
		.. note::
			* pattern - (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?

		:param server_vrf_name: VRF name of the DHCP server
		:type server_vrf_name: (unicode)
		
		.. note::
			* length - [u'1..32']
			* pattern - ((([a-zA-Z0-9_]([a-zA-Z0-9\-_]){0,61})?[a-zA-Z0-9]\.)*([a-zA-Z0-9_]([a-zA-Z0-9\-_]){0,61})?[a-zA-Z0-9]\.?)|\.

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = [('pybind.nos.v7_0_1a.interface.fortygigabitethernet', u'fortygigabitethernet'), ('pybind.nos.v6_0_2b.interface.fortygigabitethernet', u'fortygigabitethernet'), ('pybind.nos.v7_1_0.interface.fortygigabitethernet', u'fortygigabitethernet')]
    bindings_list = [('pybind.nos.v6_0_2b.interface.fortygigabitethernet.ip.interface_fo_dhcp_conf.dhcp.relay.servers', 'pybind.nos.v6_0_2b.brocade_interface', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.interface.fortygigabitethernet.ip.interface_fo_dhcp_conf.dhcp.relay.servers', 'pybind.nos.v7_0_1a.brocade_interface', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.interface.fortygigabitethernet.ip.interface_fo_dhcp_conf.dhcp.relay.servers', 'pybind.nos.v7_1_0.brocade_interface', 'pybind.nos.v7_1_0')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'servers', 'keyval': 'relay_ip_addr, server_vrf_name', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, fortygigabitethernet=fortygigabitethernet, servers=servers)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def interface_fortygigabitethernet_ip_igmp_static_group_delete(self, fortygigabitethernet=None, static_group=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		NOS: 6.0.2b, 7.0.1a, 7.1.0    

	**Parent Instance Keyword Arg Tuple(s)**:
		:param fortygigabitethernet: kwarg tuple.
		:type fortygigabitethernet: (name).

		:param name: tuple arg.
		:type name: (unicode)
		
		.. note::
			* length - [u'3..16']
			* pattern - ((([1-9]|[1-9][0-9]|1[0-9][0-9]|2[0-3][0-9])/)?(([0-9]|[1][0-6]))/([1-9]|[1-9][0-9]|[1-9][0-9][0-9])(:[1-4])?)

	**This Instance Keyword Arg Tuple**:
		:param static_group: kwarg tuple.
		:type static_group: (sg_addr).

		:param sg_addr: Multicast Address to be Joined in the format A.B.C.D
		:type sg_addr: (unicode)
		
		.. note::
			* pattern - (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = [('pybind.nos.v7_0_1a.interface.fortygigabitethernet', u'fortygigabitethernet'), ('pybind.nos.v6_0_2b.interface.fortygigabitethernet', u'fortygigabitethernet'), ('pybind.nos.v7_1_0.interface.fortygigabitethernet', u'fortygigabitethernet')]
    bindings_list = [('pybind.nos.v6_0_2b.interface.fortygigabitethernet.ip.igmp_phy_intf_cfg.igmp.static_group', 'pybind.nos.v6_0_2b.brocade_interface', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.interface.fortygigabitethernet.ip.igmp_phy_intf_cfg.igmp.static_group', 'pybind.nos.v7_0_1a.brocade_interface', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.interface.fortygigabitethernet.ip.igmp_phy_intf_cfg.igmp.static_group', 'pybind.nos.v7_1_0.brocade_interface', 'pybind.nos.v7_1_0')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'static_group', 'keyval': 'sg_addr', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, fortygigabitethernet=fortygigabitethernet, static_group=static_group)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def interface_fortygigabitethernet_ipv6_access_group_delete(self, fortygigabitethernet=None, access_group=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		NOS: 6.0.2b, 7.0.1a, 7.1.0    

	**Parent Instance Keyword Arg Tuple(s)**:
		:param fortygigabitethernet: kwarg tuple.
		:type fortygigabitethernet: (name).

		:param name: tuple arg.
		:type name: (unicode)
		
		.. note::
			* length - [u'3..16']
			* pattern - ((([1-9]|[1-9][0-9]|1[0-9][0-9]|2[0-3][0-9])/)?(([0-9]|[1][0-6]))/([1-9]|[1-9][0-9]|[1-9][0-9][0-9])(:[1-4])?)

	**This Instance Keyword Arg Tuple**:
		:param access_group: kwarg tuple.
		:type access_group: (ipv6_access_list, ip_direction, traffic_type).

		:param ipv6_access_list: ACL_NAME;; Access List Name (Max 63)
		:type ipv6_access_list: (unicode)
		
		.. note::
			* length - [u'1..63']
			* pattern - [a-zA-Z0-9]{1}([-a-zA-Z0-9_]{0,62})

		:param ip_direction: tuple arg.
		:type ip_direction: (unicode)
		
		.. note::
			* enum - [u'in', u'out']

		:param traffic_type: tuple arg.
		:type traffic_type: (unicode)
		
		.. note::
			* enum - [u'switched', u'routed']

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = [('pybind.nos.v7_1_0.interface.fortygigabitethernet', u'fortygigabitethernet'), ('pybind.nos.v7_0_1a.interface.fortygigabitethernet', u'fortygigabitethernet'), ('pybind.nos.v6_0_2b.interface.fortygigabitethernet', u'fortygigabitethernet')]
    bindings_list = [('pybind.nos.v6_0_2b.interface.fortygigabitethernet.ipv6.access_group', 'pybind.nos.v6_0_2b.brocade_interface', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.interface.fortygigabitethernet.ipv6.access_group', 'pybind.nos.v7_0_1a.brocade_interface', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.interface.fortygigabitethernet.ipv6.access_group', 'pybind.nos.v7_1_0.brocade_interface', 'pybind.nos.v7_1_0')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'access_group', 'keyval': 'ipv6_access_list, ip_direction', 'extra_keyval': 'ipv6_access_list, ip_direction, traffic_type'}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, fortygigabitethernet=fortygigabitethernet, access_group=access_group)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def interface_fortygigabitethernet_ipv6_address_delete(self, fortygigabitethernet=None, ipv6_address=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		NOS: 6.0.2b, 7.0.1a, 7.1.0    

	**Parent Instance Keyword Arg Tuple(s)**:
		:param fortygigabitethernet: kwarg tuple.
		:type fortygigabitethernet: (name).

		:param name: tuple arg.
		:type name: (unicode)
		
		.. note::
			* length - [u'3..16']
			* pattern - ((([1-9]|[1-9][0-9]|1[0-9][0-9]|2[0-3][0-9])/)?(([0-9]|[1][0-6]))/([1-9]|[1-9][0-9]|[1-9][0-9][0-9])(:[1-4])?)

	**This Instance Keyword Arg Tuple**:
		:param ipv6_address: kwarg tuple.
		:type ipv6_address: (address, secondary, anycast).

		:param address: A:B::C:D/LEN;; IPv6 prefix format: xxxx:xxxx/ml, xxxx:xxxx::/ml, xxxx::xx/128
		:type address: (unicode)
		
		.. note::
			* pattern - ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(/(([0-9])|([0-9]{2})|(1[0-1][0-9])|(12[0-8])))

		:param secondary: Configure Secondary ipv6 address on an interface
		:type secondary: (YANGBool)

		:param anycast: Configure ipv6 address as anycast
		:type anycast: (YANGBool)

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = [('pybind.nos.v6_0_2b.interface.fortygigabitethernet', u'fortygigabitethernet'), ('pybind.nos.v7_1_0.interface.fortygigabitethernet', u'fortygigabitethernet'), ('pybind.nos.v7_0_1a.interface.fortygigabitethernet', u'fortygigabitethernet')]
    bindings_list = [('pybind.nos.v6_0_2b.interface.fortygigabitethernet.ipv6.ipv6_config.address.ipv6_address', 'pybind.nos.v6_0_2b.brocade_interface', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.interface.fortygigabitethernet.ipv6.ipv6_config.address.ipv6_address', 'pybind.nos.v7_0_1a.brocade_interface', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.interface.fortygigabitethernet.ipv6.ipv6_config.address.ipv6_address', 'pybind.nos.v7_1_0.brocade_interface', 'pybind.nos.v7_1_0')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'ipv6_address', 'keyval': 'address', 'extra_keyval': 'address, secondary, anycast'}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, fortygigabitethernet=fortygigabitethernet, ipv6_address=ipv6_address)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def interface_fortygigabitethernet_ipv6_dhcp_relay_delete(self, fortygigabitethernet=None, servers=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		NOS: 6.0.2b, 7.0.1a, 7.1.0    

	**Parent Instance Keyword Arg Tuple(s)**:
		:param fortygigabitethernet: kwarg tuple.
		:type fortygigabitethernet: (name).

		:param name: tuple arg.
		:type name: (unicode)
		
		.. note::
			* length - [u'3..16']
			* pattern - ((([1-9]|[1-9][0-9]|1[0-9][0-9]|2[0-3][0-9])/)?(([0-9]|[1][0-6]))/([1-9]|[1-9][0-9]|[1-9][0-9][0-9])(:[1-4])?)

	**This Instance Keyword Arg Tuple**:
		:param servers: kwarg tuple.
		:type servers: (relay_ip_addr, server_vrf_name).

		:param relay_ip_addr: IPv6 address of the DHCPv6 server
		:type relay_ip_addr: (unicode)
		
		.. note::
			* pattern - ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?

		:param server_vrf_name: VRF name of the DHCPv6 server
		:type server_vrf_name: (unicode)
		
		.. note::
			* length - [u'1..32']
			* pattern - ((([a-zA-Z0-9_]([a-zA-Z0-9\-_]){0,61})?[a-zA-Z0-9]\.)*([a-zA-Z0-9_]([a-zA-Z0-9\-_]){0,61})?[a-zA-Z0-9]\.?)|\.

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = [('pybind.nos.v6_0_2b.interface.fortygigabitethernet', u'fortygigabitethernet'), ('pybind.nos.v7_0_1a.interface.fortygigabitethernet', u'fortygigabitethernet'), ('pybind.nos.v7_1_0.interface.fortygigabitethernet', u'fortygigabitethernet')]
    bindings_list = [('pybind.nos.v6_0_2b.interface.fortygigabitethernet.ipv6.interface_phy_dhcp_conf.dhcp.relay.servers', 'pybind.nos.v6_0_2b.brocade_interface', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.interface.fortygigabitethernet.ipv6.interface_phy_dhcp_conf.dhcp.relay.servers', 'pybind.nos.v7_0_1a.brocade_interface', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.interface.fortygigabitethernet.ipv6.interface_phy_dhcp_conf.dhcp.relay.servers', 'pybind.nos.v7_1_0.brocade_interface', 'pybind.nos.v7_1_0')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'servers', 'keyval': 'relay_ip_addr', 'extra_keyval': 'relay_ip_addr, server_vrf_name'}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, fortygigabitethernet=fortygigabitethernet, servers=servers)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def interface_fortygigabitethernet_ipv6_nd_prefix_delete(self, fortygigabitethernet=None, prefix=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		NOS: 6.0.2b, 7.0.1a, 7.1.0    

	**Parent Instance Keyword Arg Tuple(s)**:
		:param fortygigabitethernet: kwarg tuple.
		:type fortygigabitethernet: (name).

		:param name: tuple arg.
		:type name: (unicode)
		
		.. note::
			* length - [u'3..16']
			* pattern - ((([1-9]|[1-9][0-9]|1[0-9][0-9]|2[0-3][0-9])/)?(([0-9]|[1][0-6]))/([1-9]|[1-9][0-9]|[1-9][0-9][0-9])(:[1-4])?)

	**This Instance Keyword Arg Tuple**:
		:param prefix: kwarg tuple.
		:type prefix: (prefix_ipv6_address).

		:param prefix_ipv6_address: tuple arg.
		:type prefix_ipv6_address: (unicode)
		
		.. note::
			* pattern - ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(/(([0-9])|([0-9]{2})|(1[0-1][0-9])|(12[0-8])))

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = [('pybind.nos.v6_0_2b.interface.fortygigabitethernet', u'fortygigabitethernet'), ('pybind.nos.v7_0_1a.interface.fortygigabitethernet', u'fortygigabitethernet'), ('pybind.nos.v7_1_0.interface.fortygigabitethernet', u'fortygigabitethernet')]
    bindings_list = [('pybind.nos.v6_0_2b.interface.fortygigabitethernet.ipv6.ipv6_nd_ra.ipv6_intf_cmds.nd.prefix', 'pybind.nos.v6_0_2b.brocade_interface', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.interface.fortygigabitethernet.ipv6.ipv6_nd_ra.ipv6_intf_cmds.nd.prefix', 'pybind.nos.v7_0_1a.brocade_interface', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.interface.fortygigabitethernet.ipv6.ipv6_nd_ra.ipv6_intf_cmds.nd.prefix', 'pybind.nos.v7_1_0.brocade_interface', 'pybind.nos.v7_1_0')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'prefix', 'keyval': 'prefix_ipv6_address', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, fortygigabitethernet=fortygigabitethernet, prefix=prefix)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def interface_fortygigabitethernet_ipv6_neighbor_delete(self, fortygigabitethernet=None, neighbor=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		NOS: 6.0.2b, 7.0.1a, 7.1.0    

	**Parent Instance Keyword Arg Tuple(s)**:
		:param fortygigabitethernet: kwarg tuple.
		:type fortygigabitethernet: (name).

		:param name: tuple arg.
		:type name: (unicode)
		
		.. note::
			* length - [u'3..16']
			* pattern - ((([1-9]|[1-9][0-9]|1[0-9][0-9]|2[0-3][0-9])/)?(([0-9]|[1][0-6]))/([1-9]|[1-9][0-9]|[1-9][0-9][0-9])(:[1-4])?)

	**This Instance Keyword Arg Tuple**:
		:param neighbor: kwarg tuple.
		:type neighbor: (ipv6_address).

		:param ipv6_address: tuple arg.
		:type ipv6_address: (unicode)
		
		.. note::
			* pattern - ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = [('pybind.nos.v7_1_0.interface.fortygigabitethernet', u'fortygigabitethernet'), ('pybind.nos.v6_0_2b.interface.fortygigabitethernet', u'fortygigabitethernet'), ('pybind.nos.v7_0_1a.interface.fortygigabitethernet', u'fortygigabitethernet')]
    bindings_list = [('pybind.nos.v6_0_2b.interface.fortygigabitethernet.ipv6.ipv6_nd_ra.ipv6_intf_cmds.neighbor', 'pybind.nos.v6_0_2b.brocade_interface', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.interface.fortygigabitethernet.ipv6.ipv6_nd_ra.ipv6_intf_cmds.neighbor', 'pybind.nos.v7_0_1a.brocade_interface', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.interface.fortygigabitethernet.ipv6.ipv6_nd_ra.ipv6_intf_cmds.neighbor', 'pybind.nos.v7_1_0.brocade_interface', 'pybind.nos.v7_1_0')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'neighbor', 'keyval': 'ipv6_address', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, fortygigabitethernet=fortygigabitethernet, neighbor=neighbor)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def interface_fortygigabitethernet_ipv6_vrrp_extended_group_delete(self, fortygigabitethernet=None, vrrpv3e_group=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		NOS: 6.0.2b, 7.0.1a, 7.1.0    

	**Parent Instance Keyword Arg Tuple(s)**:
		:param fortygigabitethernet: kwarg tuple.
		:type fortygigabitethernet: (name).

		:param name: tuple arg.
		:type name: (unicode)
		
		.. note::
			* length - [u'3..16']
			* pattern - ((([1-9]|[1-9][0-9]|1[0-9][0-9]|2[0-3][0-9])/)?(([0-9]|[1][0-6]))/([1-9]|[1-9][0-9]|[1-9][0-9][0-9])(:[1-4])?)

	**This Instance Keyword Arg Tuple**:
		:param vrrpv3e_group: kwarg tuple.
		:type vrrpv3e_group: (vrid).

		:param vrid: tuple arg.
		:type vrid: (int)
		
		.. note::
			* range - ['0..255']

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = [('pybind.nos.v7_1_0.interface.fortygigabitethernet', u'fortygigabitethernet'), ('pybind.nos.v6_0_2b.interface.fortygigabitethernet', u'fortygigabitethernet'), ('pybind.nos.v7_0_1a.interface.fortygigabitethernet', u'fortygigabitethernet')]
    bindings_list = [('pybind.nos.v6_0_2b.interface.fortygigabitethernet.ipv6.vrrpv3e_group', 'pybind.nos.v6_0_2b.brocade_interface', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.interface.fortygigabitethernet.ipv6.vrrpv3e_group', 'pybind.nos.v7_0_1a.brocade_interface', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.interface.fortygigabitethernet.ipv6.vrrpv3e_group', 'pybind.nos.v7_1_0.brocade_interface', 'pybind.nos.v7_1_0')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'vrrpv3e_group', 'keyval': 'vrid', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, fortygigabitethernet=fortygigabitethernet, vrrpv3e_group=vrrpv3e_group)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def interface_fortygigabitethernet_ipv6_vrrp_extended_group_track_delete(self, fortygigabitethernet=None, vrrpv3e_group=None, interface=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		NOS: 6.0.2b, 7.0.1a, 7.1.0    

	**Parent Instance Keyword Arg Tuple(s)**:
		:param fortygigabitethernet: kwarg tuple.
		:type fortygigabitethernet: (name).

		:param name: tuple arg.
		:type name: (unicode)
		
		.. note::
			* length - [u'3..16']
			* pattern - ((([1-9]|[1-9][0-9]|1[0-9][0-9]|2[0-3][0-9])/)?(([0-9]|[1][0-6]))/([1-9]|[1-9][0-9]|[1-9][0-9][0-9])(:[1-4])?)

		:param vrrpv3e_group: kwarg tuple.
		:type vrrpv3e_group: (vrid).

		:param vrid: tuple arg.
		:type vrid: (int)
		
		.. note::
			* range - ['0..255']

	**This Instance Keyword Arg Tuple**:
		:param interface: kwarg tuple.
		:type interface: (interface_type, interface_name).

		:param interface_type: tuple arg.
		:type interface_type: (unicode)
		
		.. note::
			* enum - [u'fortygigabitethernet', u'gigabitethernet', u'tengigabitethernet', u'hundredgigabitethernet', u'port-channel']

		:param interface_name: tuple arg.
		:type interface_name: (unicode)
		
		.. note::
			* length - [u'3..16']
			* pattern - ((([1-9]|[1-9][0-9]|1[0-9][0-9]|2[0-3][0-9])/)?(([0-9]|[1][0-6]))/([1-9]|[1-9][0-9]|[1-9][0-9][0-9])(:[1-4])?)

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = [('pybind.nos.v7_0_1a.interface.fortygigabitethernet', u'fortygigabitethernet'), ('pybind.nos.v7_0_1a.interface.fortygigabitethernet.ipv6.vrrpv3e_group', u'vrrpv3e_group'), ('pybind.nos.v7_1_0.interface.fortygigabitethernet', u'fortygigabitethernet'), ('pybind.nos.v7_1_0.interface.fortygigabitethernet.ipv6.vrrpv3e_group', u'vrrpv3e_group'), ('pybind.nos.v6_0_2b.interface.fortygigabitethernet', u'fortygigabitethernet'), ('pybind.nos.v6_0_2b.interface.fortygigabitethernet.ipv6.vrrpv3e_group', u'vrrpv3e_group')]
    bindings_list = [('pybind.nos.v6_0_2b.interface.fortygigabitethernet.ipv6.vrrpv3e_group.track.interface', 'pybind.nos.v6_0_2b.brocade_interface', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.interface.fortygigabitethernet.ipv6.vrrpv3e_group.track.interface', 'pybind.nos.v7_0_1a.brocade_interface', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.interface.fortygigabitethernet.ipv6.vrrpv3e_group.track.interface', 'pybind.nos.v7_1_0.brocade_interface', 'pybind.nos.v7_1_0')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'vrid', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'vrid', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'vrid', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'interface', 'keyval': 'interface_type, interface_name', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, fortygigabitethernet=fortygigabitethernet, vrrpv3e_group=vrrpv3e_group, interface=interface)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def interface_fortygigabitethernet_ipv6_vrrp_extended_group_virtual_ip_delete(self, fortygigabitethernet=None, vrrpv3e_group=None, virtual_ip=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		NOS: 6.0.2b, 7.0.1a, 7.1.0    

	**Parent Instance Keyword Arg Tuple(s)**:
		:param fortygigabitethernet: kwarg tuple.
		:type fortygigabitethernet: (name).

		:param name: tuple arg.
		:type name: (unicode)
		
		.. note::
			* length - [u'3..16']
			* pattern - ((([1-9]|[1-9][0-9]|1[0-9][0-9]|2[0-3][0-9])/)?(([0-9]|[1][0-6]))/([1-9]|[1-9][0-9]|[1-9][0-9][0-9])(:[1-4])?)

		:param vrrpv3e_group: kwarg tuple.
		:type vrrpv3e_group: (vrid).

		:param vrid: tuple arg.
		:type vrid: (int)
		
		.. note::
			* range - ['0..255']

	**This Instance Keyword Arg Tuple**:
		:param virtual_ip: kwarg tuple.
		:type virtual_ip: (virtual_ipaddr).

		:param virtual_ipaddr: Virtual IPv6 address
		:type virtual_ipaddr: (unicode)
		
		.. note::
			* pattern - ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = [('pybind.nos.v7_1_0.interface.fortygigabitethernet', u'fortygigabitethernet'), ('pybind.nos.v7_1_0.interface.fortygigabitethernet.ipv6.vrrpv3e_group', u'vrrpv3e_group'), ('pybind.nos.v6_0_2b.interface.fortygigabitethernet', u'fortygigabitethernet'), ('pybind.nos.v6_0_2b.interface.fortygigabitethernet.ipv6.vrrpv3e_group', u'vrrpv3e_group'), ('pybind.nos.v7_0_1a.interface.fortygigabitethernet', u'fortygigabitethernet'), ('pybind.nos.v7_0_1a.interface.fortygigabitethernet.ipv6.vrrpv3e_group', u'vrrpv3e_group')]
    bindings_list = [('pybind.nos.v6_0_2b.interface.fortygigabitethernet.ipv6.vrrpv3e_group.virtual_ip', 'pybind.nos.v6_0_2b.brocade_interface', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.interface.fortygigabitethernet.ipv6.vrrpv3e_group.virtual_ip', 'pybind.nos.v7_0_1a.brocade_interface', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.interface.fortygigabitethernet.ipv6.vrrpv3e_group.virtual_ip', 'pybind.nos.v7_1_0.brocade_interface', 'pybind.nos.v7_1_0')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'vrid', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'vrid', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'vrid', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'virtual_ip', 'keyval': 'virtual_ipaddr', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, fortygigabitethernet=fortygigabitethernet, vrrpv3e_group=vrrpv3e_group, virtual_ip=virtual_ip)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def interface_fortygigabitethernet_ipv6_vrrp_group_delete(self, fortygigabitethernet=None, vrrpv3_group=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		NOS: 6.0.2b, 7.0.1a, 7.1.0    

	**Parent Instance Keyword Arg Tuple(s)**:
		:param fortygigabitethernet: kwarg tuple.
		:type fortygigabitethernet: (name).

		:param name: tuple arg.
		:type name: (unicode)
		
		.. note::
			* length - [u'3..16']
			* pattern - ((([1-9]|[1-9][0-9]|1[0-9][0-9]|2[0-3][0-9])/)?(([0-9]|[1][0-6]))/([1-9]|[1-9][0-9]|[1-9][0-9][0-9])(:[1-4])?)

	**This Instance Keyword Arg Tuple**:
		:param vrrpv3_group: kwarg tuple.
		:type vrrpv3_group: (vrid).

		:param vrid: tuple arg.
		:type vrid: (int)
		
		.. note::
			* range - ['0..255']

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = [('pybind.nos.v7_1_0.interface.fortygigabitethernet', u'fortygigabitethernet'), ('pybind.nos.v6_0_2b.interface.fortygigabitethernet', u'fortygigabitethernet'), ('pybind.nos.v7_0_1a.interface.fortygigabitethernet', u'fortygigabitethernet')]
    bindings_list = [('pybind.nos.v6_0_2b.interface.fortygigabitethernet.ipv6.vrrpv3_group', 'pybind.nos.v6_0_2b.brocade_interface', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.interface.fortygigabitethernet.ipv6.vrrpv3_group', 'pybind.nos.v7_0_1a.brocade_interface', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.interface.fortygigabitethernet.ipv6.vrrpv3_group', 'pybind.nos.v7_1_0.brocade_interface', 'pybind.nos.v7_1_0')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'vrrpv3_group', 'keyval': 'vrid', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, fortygigabitethernet=fortygigabitethernet, vrrpv3_group=vrrpv3_group)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def interface_fortygigabitethernet_ipv6_vrrp_group_track_delete(self, fortygigabitethernet=None, vrrpv3_group=None, interface=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		NOS: 6.0.2b, 7.0.1a, 7.1.0    

	**Parent Instance Keyword Arg Tuple(s)**:
		:param fortygigabitethernet: kwarg tuple.
		:type fortygigabitethernet: (name).

		:param name: tuple arg.
		:type name: (unicode)
		
		.. note::
			* length - [u'3..16']
			* pattern - ((([1-9]|[1-9][0-9]|1[0-9][0-9]|2[0-3][0-9])/)?(([0-9]|[1][0-6]))/([1-9]|[1-9][0-9]|[1-9][0-9][0-9])(:[1-4])?)

		:param vrrpv3_group: kwarg tuple.
		:type vrrpv3_group: (vrid).

		:param vrid: tuple arg.
		:type vrid: (int)
		
		.. note::
			* range - ['0..255']

	**This Instance Keyword Arg Tuple**:
		:param interface: kwarg tuple.
		:type interface: (interface_type, interface_name).

		:param interface_type: tuple arg.
		:type interface_type: (unicode)
		
		.. note::
			* enum - [u'fortygigabitethernet', u'gigabitethernet', u'tengigabitethernet', u'hundredgigabitethernet', u'port-channel']

		:param interface_name: tuple arg.
		:type interface_name: (unicode)
		
		.. note::
			* length - [u'3..16']
			* pattern - ((([1-9]|[1-9][0-9]|1[0-9][0-9]|2[0-3][0-9])/)?(([0-9]|[1][0-6]))/([1-9]|[1-9][0-9]|[1-9][0-9][0-9])(:[1-4])?)

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = [('pybind.nos.v7_0_1a.interface.fortygigabitethernet', u'fortygigabitethernet'), ('pybind.nos.v7_0_1a.interface.fortygigabitethernet.ipv6.vrrpv3_group', u'vrrpv3_group'), ('pybind.nos.v7_1_0.interface.fortygigabitethernet', u'fortygigabitethernet'), ('pybind.nos.v7_1_0.interface.fortygigabitethernet.ipv6.vrrpv3_group', u'vrrpv3_group'), ('pybind.nos.v6_0_2b.interface.fortygigabitethernet', u'fortygigabitethernet'), ('pybind.nos.v6_0_2b.interface.fortygigabitethernet.ipv6.vrrpv3_group', u'vrrpv3_group')]
    bindings_list = [('pybind.nos.v6_0_2b.interface.fortygigabitethernet.ipv6.vrrpv3_group.track.interface', 'pybind.nos.v6_0_2b.brocade_interface', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.interface.fortygigabitethernet.ipv6.vrrpv3_group.track.interface', 'pybind.nos.v7_0_1a.brocade_interface', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.interface.fortygigabitethernet.ipv6.vrrpv3_group.track.interface', 'pybind.nos.v7_1_0.brocade_interface', 'pybind.nos.v7_1_0')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'vrid', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'vrid', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'vrid', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'interface', 'keyval': 'interface_type, interface_name', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, fortygigabitethernet=fortygigabitethernet, vrrpv3_group=vrrpv3_group, interface=interface)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def interface_fortygigabitethernet_ipv6_vrrp_group_virtual_ip_delete(self, fortygigabitethernet=None, vrrpv3_group=None, virtual_ip=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		NOS: 6.0.2b, 7.0.1a, 7.1.0    

	**Parent Instance Keyword Arg Tuple(s)**:
		:param fortygigabitethernet: kwarg tuple.
		:type fortygigabitethernet: (name).

		:param name: tuple arg.
		:type name: (unicode)
		
		.. note::
			* length - [u'3..16']
			* pattern - ((([1-9]|[1-9][0-9]|1[0-9][0-9]|2[0-3][0-9])/)?(([0-9]|[1][0-6]))/([1-9]|[1-9][0-9]|[1-9][0-9][0-9])(:[1-4])?)

		:param vrrpv3_group: kwarg tuple.
		:type vrrpv3_group: (vrid).

		:param vrid: tuple arg.
		:type vrid: (int)
		
		.. note::
			* range - ['0..255']

	**This Instance Keyword Arg Tuple**:
		:param virtual_ip: kwarg tuple.
		:type virtual_ip: (virtual_ipaddr).

		:param virtual_ipaddr: Virtual IPv6 address
		:type virtual_ipaddr: (unicode)
		
		.. note::
			* pattern - ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = [('pybind.nos.v6_0_2b.interface.fortygigabitethernet', u'fortygigabitethernet'), ('pybind.nos.v6_0_2b.interface.fortygigabitethernet.ipv6.vrrpv3_group', u'vrrpv3_group'), ('pybind.nos.v7_0_1a.interface.fortygigabitethernet', u'fortygigabitethernet'), ('pybind.nos.v7_0_1a.interface.fortygigabitethernet.ipv6.vrrpv3_group', u'vrrpv3_group'), ('pybind.nos.v7_1_0.interface.fortygigabitethernet', u'fortygigabitethernet'), ('pybind.nos.v7_1_0.interface.fortygigabitethernet.ipv6.vrrpv3_group', u'vrrpv3_group')]
    bindings_list = [('pybind.nos.v6_0_2b.interface.fortygigabitethernet.ipv6.vrrpv3_group.virtual_ip', 'pybind.nos.v6_0_2b.brocade_interface', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.interface.fortygigabitethernet.ipv6.vrrpv3_group.virtual_ip', 'pybind.nos.v7_0_1a.brocade_interface', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.interface.fortygigabitethernet.ipv6.vrrpv3_group.virtual_ip', 'pybind.nos.v7_1_0.brocade_interface', 'pybind.nos.v7_1_0')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'vrid', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'vrid', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'vrid', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'virtual_ip', 'keyval': 'virtual_ipaddr', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, fortygigabitethernet=fortygigabitethernet, vrrpv3_group=vrrpv3_group, virtual_ip=virtual_ip)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def interface_fortygigabitethernet_mac_access_group_delete(self, fortygigabitethernet=None, access_group=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		NOS: 6.0.2b, 7.0.1a, 7.1.0    

	**Parent Instance Keyword Arg Tuple(s)**:
		:param fortygigabitethernet: kwarg tuple.
		:type fortygigabitethernet: (name).

		:param name: tuple arg.
		:type name: (unicode)
		
		.. note::
			* length - [u'3..16']
			* pattern - ((([1-9]|[1-9][0-9]|1[0-9][0-9]|2[0-3][0-9])/)?(([0-9]|[1][0-6]))/([1-9]|[1-9][0-9]|[1-9][0-9][0-9])(:[1-4])?)

	**This Instance Keyword Arg Tuple**:
		:param access_group: kwarg tuple.
		:type access_group: (mac_access_list, mac_direction, traffic_type).

		:param mac_access_list: ACL_NAME;; Access List Name (Max 63)
		:type mac_access_list: (unicode)
		
		.. note::
			* length - [u'1..63']
			* pattern - [a-zA-Z0-9]{1}([-a-zA-Z0-9_]{0,62})

		:param mac_direction: tuple arg.
		:type mac_direction: (unicode)
		
		.. note::
			* enum - [u'in', u'out']

		:param traffic_type: tuple arg.
		:type traffic_type: (unicode)
		
		.. note::
			* enum - [u'switched', u'routed']

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = [('pybind.nos.v7_1_0.interface.fortygigabitethernet', u'fortygigabitethernet'), ('pybind.nos.v7_0_1a.interface.fortygigabitethernet', u'fortygigabitethernet'), ('pybind.nos.v6_0_2b.interface.fortygigabitethernet', u'fortygigabitethernet')]
    bindings_list = [('pybind.nos.v6_0_2b.interface.fortygigabitethernet.mac.access_group', 'pybind.nos.v6_0_2b.brocade_interface', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.interface.fortygigabitethernet.mac.access_group', 'pybind.nos.v7_0_1a.brocade_interface', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.interface.fortygigabitethernet.mac.access_group', 'pybind.nos.v7_1_0.brocade_interface', 'pybind.nos.v7_1_0')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'access_group', 'keyval': 'mac_access_list, mac_direction', 'extra_keyval': 'mac_access_list, mac_direction, traffic_type'}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, fortygigabitethernet=fortygigabitethernet, access_group=access_group)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def interface_fortygigabitethernet_port_profile_port_profile_delete(self, fortygigabitethernet=None, port_to_port_profile_associations=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		NOS: 6.0.2b, 7.0.1a, 7.1.0    

	**Parent Instance Keyword Arg Tuple(s)**:
		:param fortygigabitethernet: kwarg tuple.
		:type fortygigabitethernet: (name).

		:param name: tuple arg.
		:type name: (unicode)
		
		.. note::
			* length - [u'3..16']
			* pattern - ((([1-9]|[1-9][0-9]|1[0-9][0-9]|2[0-3][0-9])/)?(([0-9]|[1][0-6]))/([1-9]|[1-9][0-9]|[1-9][0-9][0-9])(:[1-4])?)

	**This Instance Keyword Arg Tuple**:
		:param port_to_port_profile_associations: kwarg tuple.
		:type port_to_port_profile_associations: (port_to_port_profile_association).

		:param port_to_port_profile_association: Port-profile name (Max Size - 128)
		:type port_to_port_profile_association: (unicode)
		
		.. note::
			* pattern - [a-zA-Z]{1}([-a-zA-Z0-9\.\\\\@#\+\*\(\)=\{~\}%<>=$_\[\]\|]{0,127})

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = [('pybind.nos.v6_0_2b.interface.fortygigabitethernet', u'fortygigabitethernet'), ('pybind.nos.v7_1_0.interface.fortygigabitethernet', u'fortygigabitethernet'), ('pybind.nos.v7_0_1a.interface.fortygigabitethernet', u'fortygigabitethernet')]
    bindings_list = [('pybind.nos.v6_0_2b.interface.fortygigabitethernet.port_profile_to_interface_associations.port_profile_port.port_to_port_profile_associations', 'pybind.nos.v6_0_2b.brocade_interface', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.interface.fortygigabitethernet.port_profile_to_interface_associations.port_profile_port.port_to_port_profile_associations', 'pybind.nos.v7_0_1a.brocade_interface', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.interface.fortygigabitethernet.port_profile_to_interface_associations.port_profile_port.port_to_port_profile_associations', 'pybind.nos.v7_1_0.brocade_interface', 'pybind.nos.v7_1_0')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'port_to_port_profile_associations', 'keyval': 'port_to_port_profile_association', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, fortygigabitethernet=fortygigabitethernet, port_to_port_profile_associations=port_to_port_profile_associations)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def interface_fortygigabitethernet_qos_flowcontrol_pfc_delete(self, fortygigabitethernet=None, pfc=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		NOS: 6.0.2b, 7.0.1a, 7.1.0    

	**Parent Instance Keyword Arg Tuple(s)**:
		:param fortygigabitethernet: kwarg tuple.
		:type fortygigabitethernet: (name).

		:param name: tuple arg.
		:type name: (unicode)
		
		.. note::
			* length - [u'3..16']
			* pattern - ((([1-9]|[1-9][0-9]|1[0-9][0-9]|2[0-3][0-9])/)?(([0-9]|[1][0-6]))/([1-9]|[1-9][0-9]|[1-9][0-9][0-9])(:[1-4])?)

	**This Instance Keyword Arg Tuple**:
		:param pfc: kwarg tuple.
		:type pfc: (pfc_cos).

		:param pfc_cos: 0-7;;CoS value
		:type pfc_cos: (long)
		
		.. note::
			* range - ['-2147483648..2147483647']

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = [('pybind.nos.v7_0_1a.interface.fortygigabitethernet', u'fortygigabitethernet'), ('pybind.nos.v7_1_0.interface.fortygigabitethernet', u'fortygigabitethernet'), ('pybind.nos.v6_0_2b.interface.fortygigabitethernet', u'fortygigabitethernet')]
    bindings_list = [('pybind.nos.v6_0_2b.interface.fortygigabitethernet.qos.flowcontrol.pfc', 'pybind.nos.v6_0_2b.brocade_interface', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.interface.fortygigabitethernet.qos.flowcontrol.pfc', 'pybind.nos.v7_0_1a.brocade_interface', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.interface.fortygigabitethernet.qos.flowcontrol.pfc', 'pybind.nos.v7_1_0.brocade_interface', 'pybind.nos.v7_1_0')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'pfc', 'keyval': 'pfc_cos', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, fortygigabitethernet=fortygigabitethernet, pfc=pfc)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def interface_fortygigabitethernet_qos_random_detect_traffic_class_delete(self, fortygigabitethernet=None, traffic_class=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		NOS: 6.0.2b, 7.0.1a, 7.1.0    

	**Parent Instance Keyword Arg Tuple(s)**:
		:param fortygigabitethernet: kwarg tuple.
		:type fortygigabitethernet: (name).

		:param name: tuple arg.
		:type name: (unicode)
		
		.. note::
			* length - [u'3..16']
			* pattern - ((([1-9]|[1-9][0-9]|1[0-9][0-9]|2[0-3][0-9])/)?(([0-9]|[1][0-6]))/([1-9]|[1-9][0-9]|[1-9][0-9][0-9])(:[1-4])?)

	**This Instance Keyword Arg Tuple**:
		:param traffic_class: kwarg tuple.
		:type traffic_class: (red_tc_value).

		:param red_tc_value: tuple arg.
		:type red_tc_value: (long)
		
		.. note::
			* range - ['0..4294967295']

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = [('pybind.nos.v7_0_1a.interface.fortygigabitethernet', u'fortygigabitethernet'), ('pybind.nos.v7_1_0.interface.fortygigabitethernet', u'fortygigabitethernet'), ('pybind.nos.v6_0_2b.interface.fortygigabitethernet', u'fortygigabitethernet')]
    bindings_list = [('pybind.nos.v6_0_2b.interface.fortygigabitethernet.qos.random_detect.traffic_class', 'pybind.nos.v6_0_2b.brocade_interface', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.interface.fortygigabitethernet.qos.random_detect.traffic_class', 'pybind.nos.v7_0_1a.brocade_interface', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.interface.fortygigabitethernet.qos.random_detect.traffic_class', 'pybind.nos.v7_1_0.brocade_interface', 'pybind.nos.v7_1_0')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'traffic_class', 'keyval': 'red_tc_value', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, fortygigabitethernet=fortygigabitethernet, traffic_class=traffic_class)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def interface_fortygigabitethernet_rmon_collection_history_delete(self, fortygigabitethernet=None, history_control_entry=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		NOS: 6.0.2b, 7.0.1a, 7.1.0    

	**Parent Instance Keyword Arg Tuple(s)**:
		:param fortygigabitethernet: kwarg tuple.
		:type fortygigabitethernet: (name).

		:param name: tuple arg.
		:type name: (unicode)
		
		.. note::
			* length - [u'3..16']
			* pattern - ((([1-9]|[1-9][0-9]|1[0-9][0-9]|2[0-3][0-9])/)?(([0-9]|[1][0-6]))/([1-9]|[1-9][0-9]|[1-9][0-9][0-9])(:[1-4])?)

	**This Instance Keyword Arg Tuple**:
		:param history_control_entry: kwarg tuple.
		:type history_control_entry: (history_control_index, history_control_buckets_requested, history_control_interval, history_control_owner).

		:param history_control_index: tuple arg.
		:type history_control_index: (long)
		
		.. note::
			* range - ['-2147483648..2147483647']

		:param history_control_buckets_requested: Buckets (default 50)
		:type history_control_buckets_requested: (long)
		
		.. note::
			* range - ['-2147483648..2147483647']

		:param history_control_interval: Polling Interval (default 1800)
		:type history_control_interval: (long)
		
		.. note::
			* range - ['-2147483648..2147483647']

		:param history_control_owner: Owner identity
		:type history_control_owner: (unicode)
		
		.. note::
			* length - [u'1 .. 15']
			* pattern - [a-zA-Z]{1}([-a-zA-Z0-9\.\\\\@#\+\*\(\)=\{~\}%<>=$_\[\]\|]{0,14})

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = [('pybind.nos.v6_0_2b.interface.fortygigabitethernet', u'fortygigabitethernet'), ('pybind.nos.v7_0_1a.interface.fortygigabitethernet', u'fortygigabitethernet'), ('pybind.nos.v7_1_0.interface.fortygigabitethernet', u'fortygigabitethernet')]
    bindings_list = [('pybind.nos.v6_0_2b.interface.fortygigabitethernet.rmon.collection.history_control_entry', 'pybind.nos.v6_0_2b.brocade_interface', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.interface.fortygigabitethernet.rmon.collection.history_control_entry', 'pybind.nos.v7_0_1a.brocade_interface', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.interface.fortygigabitethernet.rmon.collection.history_control_entry', 'pybind.nos.v7_1_0.brocade_interface', 'pybind.nos.v7_1_0')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'history_control_entry', 'keyval': 'history_control_index', 'extra_keyval': 'history_control_index, history_control_buckets_requested, history_control_interval, history_control_owner'}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, fortygigabitethernet=fortygigabitethernet, history_control_entry=history_control_entry)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def interface_fortygigabitethernet_rmon_collection_stats_delete(self, fortygigabitethernet=None, ether_stats_entry=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		NOS: 6.0.2b, 7.0.1a, 7.1.0    

	**Parent Instance Keyword Arg Tuple(s)**:
		:param fortygigabitethernet: kwarg tuple.
		:type fortygigabitethernet: (name).

		:param name: tuple arg.
		:type name: (unicode)
		
		.. note::
			* length - [u'3..16']
			* pattern - ((([1-9]|[1-9][0-9]|1[0-9][0-9]|2[0-3][0-9])/)?(([0-9]|[1][0-6]))/([1-9]|[1-9][0-9]|[1-9][0-9][0-9])(:[1-4])?)

	**This Instance Keyword Arg Tuple**:
		:param ether_stats_entry: kwarg tuple.
		:type ether_stats_entry: (ether_stats_index, ether_stats_owner).

		:param ether_stats_index: tuple arg.
		:type ether_stats_index: (long)
		
		.. note::
			* range - ['-2147483648..2147483647']

		:param ether_stats_owner: Owner identity
		:type ether_stats_owner: (unicode)
		
		.. note::
			* length - [u'1 .. 15']
			* pattern - [a-zA-Z]{1}([-a-zA-Z0-9\.\\\\@#\+\*\(\)=\{~\}%<>=$_\[\]\|]{0,14})

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = [('pybind.nos.v6_0_2b.interface.fortygigabitethernet', u'fortygigabitethernet'), ('pybind.nos.v7_0_1a.interface.fortygigabitethernet', u'fortygigabitethernet'), ('pybind.nos.v7_1_0.interface.fortygigabitethernet', u'fortygigabitethernet')]
    bindings_list = [('pybind.nos.v6_0_2b.interface.fortygigabitethernet.rmon.collection.ether_stats_entry', 'pybind.nos.v6_0_2b.brocade_interface', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.interface.fortygigabitethernet.rmon.collection.ether_stats_entry', 'pybind.nos.v7_0_1a.brocade_interface', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.interface.fortygigabitethernet.rmon.collection.ether_stats_entry', 'pybind.nos.v7_1_0.brocade_interface', 'pybind.nos.v7_1_0')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'ether_stats_entry', 'keyval': 'ether_stats_index', 'extra_keyval': 'ether_stats_index, ether_stats_owner'}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, fortygigabitethernet=fortygigabitethernet, ether_stats_entry=ether_stats_entry)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def interface_fortygigabitethernet_spanning_tree_instance_delete(self, fortygigabitethernet=None, instance=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		NOS: 6.0.2b, 7.0.1a, 7.1.0    

	**Parent Instance Keyword Arg Tuple(s)**:
		:param fortygigabitethernet: kwarg tuple.
		:type fortygigabitethernet: (name).

		:param name: tuple arg.
		:type name: (unicode)
		
		.. note::
			* length - [u'3..16']
			* pattern - ((([1-9]|[1-9][0-9]|1[0-9][0-9]|2[0-3][0-9])/)?(([0-9]|[1][0-6]))/([1-9]|[1-9][0-9]|[1-9][0-9][0-9])(:[1-4])?)

	**This Instance Keyword Arg Tuple**:
		:param instance: kwarg tuple.
		:type instance: (id).

		:param id: tuple arg.
		:type id: (int)
		
		.. note::
			* range - ['0..255']

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = [('pybind.nos.v6_0_2b.interface.fortygigabitethernet', u'fortygigabitethernet'), ('pybind.nos.v7_0_1a.interface.fortygigabitethernet', u'fortygigabitethernet'), ('pybind.nos.v7_1_0.interface.fortygigabitethernet', u'fortygigabitethernet')]
    bindings_list = [('pybind.nos.v6_0_2b.interface.fortygigabitethernet.spanning_tree.instance', 'pybind.nos.v6_0_2b.brocade_interface', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.interface.fortygigabitethernet.spanning_tree.instance', 'pybind.nos.v7_0_1a.brocade_interface', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.interface.fortygigabitethernet.spanning_tree.instance', 'pybind.nos.v7_1_0.brocade_interface', 'pybind.nos.v7_1_0')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'instance', 'keyval': 'id', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, fortygigabitethernet=fortygigabitethernet, instance=instance)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def interface_fortygigabitethernet_spanning_tree_vlan_delete(self, fortygigabitethernet=None, vlan=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		NOS: 6.0.2b, 7.0.1a, 7.1.0    

	**Parent Instance Keyword Arg Tuple(s)**:
		:param fortygigabitethernet: kwarg tuple.
		:type fortygigabitethernet: (name).

		:param name: tuple arg.
		:type name: (unicode)
		
		.. note::
			* length - [u'3..16']
			* pattern - ((([1-9]|[1-9][0-9]|1[0-9][0-9]|2[0-3][0-9])/)?(([0-9]|[1][0-6]))/([1-9]|[1-9][0-9]|[1-9][0-9][0-9])(:[1-4])?)

	**This Instance Keyword Arg Tuple**:
		:param vlan: kwarg tuple.
		:type vlan: (id).

		:param id: tuple arg.
		:type id: (long)
		
		.. note::
			* range - ['0..4294967295']

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = [('pybind.nos.v7_1_0.interface.fortygigabitethernet', u'fortygigabitethernet'), ('pybind.nos.v6_0_2b.interface.fortygigabitethernet', u'fortygigabitethernet'), ('pybind.nos.v7_0_1a.interface.fortygigabitethernet', u'fortygigabitethernet')]
    bindings_list = [('pybind.nos.v6_0_2b.interface.fortygigabitethernet.spanning_tree.vlan', 'pybind.nos.v6_0_2b.brocade_interface', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.interface.fortygigabitethernet.spanning_tree.vlan', 'pybind.nos.v7_0_1a.brocade_interface', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.interface.fortygigabitethernet.spanning_tree.vlan', 'pybind.nos.v7_1_0.brocade_interface', 'pybind.nos.v7_1_0')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'vlan', 'keyval': 'id', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, fortygigabitethernet=fortygigabitethernet, vlan=vlan)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def interface_fortygigabitethernet_storm_control_ingress_delete(self, fortygigabitethernet=None, ingress=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		NOS: 6.0.2b, 7.0.1a, 7.1.0    

	**Parent Instance Keyword Arg Tuple(s)**:
		:param fortygigabitethernet: kwarg tuple.
		:type fortygigabitethernet: (name).

		:param name: tuple arg.
		:type name: (unicode)
		
		.. note::
			* length - [u'3..16']
			* pattern - ((([1-9]|[1-9][0-9]|1[0-9][0-9]|2[0-3][0-9])/)?(([0-9]|[1][0-6]))/([1-9]|[1-9][0-9]|[1-9][0-9][0-9])(:[1-4])?)

	**This Instance Keyword Arg Tuple**:
		:param ingress: kwarg tuple.
		:type ingress: (protocol_type, rate_format, rate_bps, rate_percent, bum_action).

		:param protocol_type: tuple arg.
		:type protocol_type: (unicode)
		
		.. note::
			* enum - [u'broadcast', u'unknown-unicast', u'multicast']

		:param rate_format: tuple arg.
		:type rate_format: (unicode)
		
		.. note::
			* enum - [u'limit-bps', u'limit-percent']

		:param rate_bps: tuple arg.
		:type rate_bps: (long)
		
		.. note::
			* range - ['0..18446744073709551615']

		:param rate_percent: tuple arg.
		:type rate_percent: (long)
		
		.. note::
			* range - ['0..4294967295']

		:param bum_action: tuple arg.
		:type bum_action: (unicode)
		
		.. note::
			* enum - [u'monitor', u'shutdown']

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = [('pybind.nos.v7_1_0.interface.fortygigabitethernet', u'fortygigabitethernet'), ('pybind.nos.v6_0_2b.interface.fortygigabitethernet', u'fortygigabitethernet'), ('pybind.nos.v7_0_1a.interface.fortygigabitethernet', u'fortygigabitethernet')]
    bindings_list = [('pybind.nos.v6_0_2b.interface.fortygigabitethernet.storm_control.ingress', 'pybind.nos.v6_0_2b.brocade_interface', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.interface.fortygigabitethernet.storm_control.ingress', 'pybind.nos.v7_0_1a.brocade_interface', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.interface.fortygigabitethernet.storm_control.ingress', 'pybind.nos.v7_1_0.brocade_interface', 'pybind.nos.v7_1_0')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'ingress', 'keyval': 'protocol_type', 'extra_keyval': 'protocol_type, rate_format, rate_bps, rate_percent, bum_action'}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, fortygigabitethernet=fortygigabitethernet, ingress=ingress)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def interface_fortygigabitethernet_switchport_access_rspan_vlan_delete(self, fortygigabitethernet=None, vlan=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		NOS: 6.0.2b, 7.0.1a, 7.1.0    

	**Parent Instance Keyword Arg Tuple(s)**:
		:param fortygigabitethernet: kwarg tuple.
		:type fortygigabitethernet: (name).

		:param name: tuple arg.
		:type name: (unicode)
		
		.. note::
			* length - [u'3..16']
			* pattern - ((([1-9]|[1-9][0-9]|1[0-9][0-9]|2[0-3][0-9])/)?(([0-9]|[1][0-6]))/([1-9]|[1-9][0-9]|[1-9][0-9][0-9])(:[1-4])?)

	**This Instance Keyword Arg Tuple**:
		:param vlan: kwarg tuple.
		:type vlan: (access_vlan_id, access_mac_group).

		:param access_vlan_id: Set the default VLAN for the interface
		:type access_vlan_id: (long)
		
		.. note::
			* range - ['0..4294967295']

		:param access_mac_group: Associate a Mac group with a vlan
		:type access_mac_group: (long)
		
		.. note::
			* range - ['0..4294967295']

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = [('pybind.nos.v7_1_0.interface.fortygigabitethernet', u'fortygigabitethernet'), ('pybind.nos.v6_0_2b.interface.fortygigabitethernet', u'fortygigabitethernet'), ('pybind.nos.v7_1_0.interface.fortygigabitethernet', u'fortygigabitethernet'), ('pybind.nos.v6_0_2b.interface.fortygigabitethernet', u'fortygigabitethernet'), ('pybind.nos.v7_0_1a.interface.fortygigabitethernet', u'fortygigabitethernet'), ('pybind.nos.v7_0_1a.interface.fortygigabitethernet', u'fortygigabitethernet')]
    bindings_list = [('pybind.nos.v6_0_2b.interface.fortygigabitethernet.switchport.access_mac_group_rspan_vlan_classification.access.vlan', 'pybind.nos.v6_0_2b.brocade_interface', 'pybind.nos.v6_0_2b'), ('pybind.nos.v6_0_2b.interface.fortygigabitethernet.switchport.access_mac_rspan_vlan_classification.access.vlan', 'pybind.nos.v6_0_2b.brocade_interface', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.interface.fortygigabitethernet.switchport.access_mac_group_rspan_vlan_classification.access.vlan', 'pybind.nos.v7_0_1a.brocade_interface', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_0_1a.interface.fortygigabitethernet.switchport.access_mac_rspan_vlan_classification.access.vlan', 'pybind.nos.v7_0_1a.brocade_interface', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.interface.fortygigabitethernet.switchport.access_mac_group_rspan_vlan_classification.access.vlan', 'pybind.nos.v7_1_0.brocade_interface', 'pybind.nos.v7_1_0'), ('pybind.nos.v7_1_0.interface.fortygigabitethernet.switchport.access_mac_rspan_vlan_classification.access.vlan', 'pybind.nos.v7_1_0.brocade_interface', 'pybind.nos.v7_1_0')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'vlan', 'keyval': 'access_vlan_id, access_mac_group', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, fortygigabitethernet=fortygigabitethernet, vlan=vlan)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def interface_fortygigabitethernet_switchport_access_vlan_delete(self, fortygigabitethernet=None, vlan=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		NOS: 6.0.2b, 7.0.1a, 7.1.0    

	**Parent Instance Keyword Arg Tuple(s)**:
		:param fortygigabitethernet: kwarg tuple.
		:type fortygigabitethernet: (name).

		:param name: tuple arg.
		:type name: (unicode)
		
		.. note::
			* length - [u'3..16']
			* pattern - ((([1-9]|[1-9][0-9]|1[0-9][0-9]|2[0-3][0-9])/)?(([0-9]|[1][0-6]))/([1-9]|[1-9][0-9]|[1-9][0-9][0-9])(:[1-4])?)

	**This Instance Keyword Arg Tuple**:
		:param vlan: kwarg tuple.
		:type vlan: (access_vlan_id, access_mac_group).

		:param access_vlan_id: Set the default VLAN for the interface
		:type access_vlan_id: (long)
		
		.. note::
			* range - ['0..4294967295']

		:param access_mac_group: Associate a Mac group with a vlan
		:type access_mac_group: (long)
		
		.. note::
			* range - ['0..4294967295']

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = [('pybind.nos.v7_1_0.interface.fortygigabitethernet', u'fortygigabitethernet'), ('pybind.nos.v7_0_1a.interface.fortygigabitethernet', u'fortygigabitethernet'), ('pybind.nos.v6_0_2b.interface.fortygigabitethernet', u'fortygigabitethernet'), ('pybind.nos.v7_0_1a.interface.fortygigabitethernet', u'fortygigabitethernet'), ('pybind.nos.v7_1_0.interface.fortygigabitethernet', u'fortygigabitethernet'), ('pybind.nos.v6_0_2b.interface.fortygigabitethernet', u'fortygigabitethernet')]
    bindings_list = [('pybind.nos.v6_0_2b.interface.fortygigabitethernet.switchport.access_mac_group_vlan_classification.access.vlan', 'pybind.nos.v6_0_2b.brocade_interface', 'pybind.nos.v6_0_2b'), ('pybind.nos.v6_0_2b.interface.fortygigabitethernet.switchport.access_mac_vlan_classification.access.vlan', 'pybind.nos.v6_0_2b.brocade_interface', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.interface.fortygigabitethernet.switchport.access_mac_group_vlan_classification.access.vlan', 'pybind.nos.v7_0_1a.brocade_interface', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_0_1a.interface.fortygigabitethernet.switchport.access_mac_vlan_classification.access.vlan', 'pybind.nos.v7_0_1a.brocade_interface', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.interface.fortygigabitethernet.switchport.access_mac_group_vlan_classification.access.vlan', 'pybind.nos.v7_1_0.brocade_interface', 'pybind.nos.v7_1_0'), ('pybind.nos.v7_1_0.interface.fortygigabitethernet.switchport.access_mac_vlan_classification.access.vlan', 'pybind.nos.v7_1_0.brocade_interface', 'pybind.nos.v7_1_0')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'vlan', 'keyval': 'access_vlan_id, access_mac_group', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, fortygigabitethernet=fortygigabitethernet, vlan=vlan)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def interface_fortygigabitethernet_switchport_port_security_delete(self, fortygigabitethernet=None, allowed_ouis=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		NOS: 6.0.2b, 7.0.1a, 7.1.0    

	**Parent Instance Keyword Arg Tuple(s)**:
		:param fortygigabitethernet: kwarg tuple.
		:type fortygigabitethernet: (name).

		:param name: tuple arg.
		:type name: (unicode)
		
		.. note::
			* length - [u'3..16']
			* pattern - ((([1-9]|[1-9][0-9]|1[0-9][0-9]|2[0-3][0-9])/)?(([0-9]|[1][0-6]))/([1-9]|[1-9][0-9]|[1-9][0-9][0-9])(:[1-4])?)

	**This Instance Keyword Arg Tuple**:
		:param allowed_ouis: kwarg tuple.
		:type allowed_ouis: (oui).

		:param oui: <OUI> OUI in HHHH.HH00.0000 format
		:type oui: (unicode)
		
		.. note::
			* pattern - [0-9a-fA-F]{4}\.[0-9a-fA-F]{2}00\.0000

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = [('pybind.nos.v7_1_0.interface.fortygigabitethernet', u'fortygigabitethernet'), ('pybind.nos.v7_0_1a.interface.fortygigabitethernet', u'fortygigabitethernet'), ('pybind.nos.v7_0_1a.interface.fortygigabitethernet', u'fortygigabitethernet'), ('pybind.nos.v6_0_2b.interface.fortygigabitethernet', u'fortygigabitethernet'), ('pybind.nos.v6_0_2b.interface.fortygigabitethernet', u'fortygigabitethernet'), ('pybind.nos.v7_1_0.interface.fortygigabitethernet', u'fortygigabitethernet')]
    bindings_list = [('pybind.nos.v6_0_2b.interface.fortygigabitethernet.switchport.port_security.allowed_ouis', 'pybind.nos.v6_0_2b.brocade_interface', 'pybind.nos.v6_0_2b'), ('pybind.nos.v6_0_2b.interface.fortygigabitethernet.switchport.port_security.port_secutiry_mac_address', 'pybind.nos.v6_0_2b.brocade_interface', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.interface.fortygigabitethernet.switchport.port_security.allowed_ouis', 'pybind.nos.v7_0_1a.brocade_interface', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_0_1a.interface.fortygigabitethernet.switchport.port_security.port_secutiry_mac_address', 'pybind.nos.v7_0_1a.brocade_interface', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.interface.fortygigabitethernet.switchport.port_security.allowed_ouis', 'pybind.nos.v7_1_0.brocade_interface', 'pybind.nos.v7_1_0'), ('pybind.nos.v7_1_0.interface.fortygigabitethernet.switchport.port_security.port_secutiry_mac_address', 'pybind.nos.v7_1_0.brocade_interface', 'pybind.nos.v7_1_0')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'port_secutiry_mac_address', 'keyval': 'mac_address, port_sec_vlan', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, fortygigabitethernet=fortygigabitethernet, allowed_ouis=allowed_ouis)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def interface_fortygigabitethernet_switchport_port_security_sticky_delete(self, fortygigabitethernet=None, port_secutiry_mac_address=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		NOS: 6.0.2b, 7.0.1a, 7.1.0    

	**Parent Instance Keyword Arg Tuple(s)**:
		:param fortygigabitethernet: kwarg tuple.
		:type fortygigabitethernet: (name).

		:param name: tuple arg.
		:type name: (unicode)
		
		.. note::
			* length - [u'3..16']
			* pattern - ((([1-9]|[1-9][0-9]|1[0-9][0-9]|2[0-3][0-9])/)?(([0-9]|[1][0-6]))/([1-9]|[1-9][0-9]|[1-9][0-9][0-9])(:[1-4])?)

	**This Instance Keyword Arg Tuple**:
		:param port_secutiry_mac_address: kwarg tuple.
		:type port_secutiry_mac_address: (mac_address, port_sec_vlan).

		:param mac_address: Mac Address
		:type mac_address: (unicode)

		:param port_sec_vlan: Forwarding vlan
		:type port_sec_vlan: (long)
		
		.. note::
			* range - ['0..4294967295']

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = [('pybind.nos.v6_0_2b.interface.fortygigabitethernet', u'fortygigabitethernet'), ('pybind.nos.v7_1_0.interface.fortygigabitethernet', u'fortygigabitethernet'), ('pybind.nos.v7_0_1a.interface.fortygigabitethernet', u'fortygigabitethernet')]
    bindings_list = [('pybind.nos.v6_0_2b.interface.fortygigabitethernet.switchport.port_security.sticky.port_secutiry_mac_address', 'pybind.nos.v6_0_2b.brocade_interface', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.interface.fortygigabitethernet.switchport.port_security.sticky.port_secutiry_mac_address', 'pybind.nos.v7_0_1a.brocade_interface', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.interface.fortygigabitethernet.switchport.port_security.sticky.port_secutiry_mac_address', 'pybind.nos.v7_1_0.brocade_interface', 'pybind.nos.v7_1_0')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'port_secutiry_mac_address', 'keyval': 'mac_address, port_sec_vlan', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, fortygigabitethernet=fortygigabitethernet, port_secutiry_mac_address=port_secutiry_mac_address)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def interface_fortygigabitethernet_switchport_private_vlan_association_trunk_delete(self, fortygigabitethernet=None, trunk=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		NOS: 6.0.2b, 7.0.1a, 7.1.0    

	**Parent Instance Keyword Arg Tuple(s)**:
		:param fortygigabitethernet: kwarg tuple.
		:type fortygigabitethernet: (name).

		:param name: tuple arg.
		:type name: (unicode)
		
		.. note::
			* length - [u'3..16']
			* pattern - ((([1-9]|[1-9][0-9]|1[0-9][0-9]|2[0-3][0-9])/)?(([0-9]|[1][0-6]))/([1-9]|[1-9][0-9]|[1-9][0-9][0-9])(:[1-4])?)

	**This Instance Keyword Arg Tuple**:
		:param trunk: kwarg tuple.
		:type trunk: (trunk_pri_pvlan, trunk_sec_pvlan).

		:param trunk_pri_pvlan: Primary vlan id
		:type trunk_pri_pvlan: (long)
		
		.. note::
			* range - ['0..4294967295']

		:param trunk_sec_pvlan: Secondary vlan id 
		:type trunk_sec_pvlan: (long)
		
		.. note::
			* range - ['0..4294967295']

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = [('pybind.nos.v7_1_0.interface.fortygigabitethernet', u'fortygigabitethernet'), ('pybind.nos.v6_0_2b.interface.fortygigabitethernet', u'fortygigabitethernet'), ('pybind.nos.v7_0_1a.interface.fortygigabitethernet', u'fortygigabitethernet')]
    bindings_list = [('pybind.nos.v6_0_2b.interface.fortygigabitethernet.switchport.private_vlan.association.trunk', 'pybind.nos.v6_0_2b.brocade_interface', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.interface.fortygigabitethernet.switchport.private_vlan.association.trunk', 'pybind.nos.v7_0_1a.brocade_interface', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.interface.fortygigabitethernet.switchport.private_vlan.association.trunk', 'pybind.nos.v7_1_0.brocade_interface', 'pybind.nos.v7_1_0')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'trunk', 'keyval': 'trunk_pri_pvlan, trunk_sec_pvlan', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, fortygigabitethernet=fortygigabitethernet, trunk=trunk)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def interface_fortygigabitethernet_switchport_private_vlan_mapping_delete(self, fortygigabitethernet=None, mapping=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		NOS: 6.0.2b, 7.0.1a, 7.1.0    

	**Parent Instance Keyword Arg Tuple(s)**:
		:param fortygigabitethernet: kwarg tuple.
		:type fortygigabitethernet: (name).

		:param name: tuple arg.
		:type name: (unicode)
		
		.. note::
			* length - [u'3..16']
			* pattern - ((([1-9]|[1-9][0-9]|1[0-9][0-9]|2[0-3][0-9])/)?(([0-9]|[1][0-6]))/([1-9]|[1-9][0-9]|[1-9][0-9][0-9])(:[1-4])?)

	**This Instance Keyword Arg Tuple**:
		:param mapping: kwarg tuple.
		:type mapping: (promis_pri_pvlan, oper, promis_sec_pvlan_range).

		:param promis_pri_pvlan: Primary vlan id
		:type promis_pri_pvlan: (long)
		
		.. note::
			* range - ['0..4294967295']

		:param oper: tuple arg.
		:type oper: (unicode)
		
		.. note::
			* enum - [u'add', u'delete']

		:param promis_sec_pvlan_range: Secondary vlan range
		:type promis_sec_pvlan_range: (unicode)
		
		.. note::
			* length - [u'1..253']
			* pattern - (([1-9][0-9]{0,2})|([1-7][0-9]{3})|(80[0-9]{2})|(81[0-8][0-9])|(819[01]))(-(([2-9])|([1-9][0-9]{1,2})|([1-7][0-9]{3})|(80[0-9]{2})|(81[0-8][0-9])|(819[01])))?((,(([2-9])|([1-9][0-9]{1,2})|([1-7][0-9]{3})|(80[0-9]{2})|(81[0-8][0-9])|(819[01]))(-(([3-9])|([1-9][0-9]{1,2})|([1-7][0-9]{3})|(80[0-9]{2})|(81[0-8][0-9])|(819[01])))?)?)*

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = [('pybind.nos.v7_0_1a.interface.fortygigabitethernet', u'fortygigabitethernet'), ('pybind.nos.v7_1_0.interface.fortygigabitethernet', u'fortygigabitethernet'), ('pybind.nos.v6_0_2b.interface.fortygigabitethernet', u'fortygigabitethernet')]
    bindings_list = [('pybind.nos.v6_0_2b.interface.fortygigabitethernet.switchport.private_vlan.mapping', 'pybind.nos.v6_0_2b.brocade_interface', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.interface.fortygigabitethernet.switchport.private_vlan.mapping', 'pybind.nos.v7_0_1a.brocade_interface', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.interface.fortygigabitethernet.switchport.private_vlan.mapping', 'pybind.nos.v7_1_0.brocade_interface', 'pybind.nos.v7_1_0')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'mapping', 'keyval': 'promis_pri_pvlan', 'extra_keyval': 'promis_pri_pvlan, oper, promis_sec_pvlan_range'}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, fortygigabitethernet=fortygigabitethernet, mapping=mapping)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def interface_fortygigabitethernet_switchport_private_vlan_trunk_allowed_vlan_add_delete(self, fortygigabitethernet=None, add=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		NOS: 6.0.2b, 7.0.1a, 7.1.0    

	**Parent Instance Keyword Arg Tuple(s)**:
		:param fortygigabitethernet: kwarg tuple.
		:type fortygigabitethernet: (name).

		:param name: tuple arg.
		:type name: (unicode)
		
		.. note::
			* length - [u'3..16']
			* pattern - ((([1-9]|[1-9][0-9]|1[0-9][0-9]|2[0-3][0-9])/)?(([0-9]|[1][0-6]))/([1-9]|[1-9][0-9]|[1-9][0-9][0-9])(:[1-4])?)

	**This Instance Keyword Arg Tuple**:
		:param add: kwarg tuple.
		:type add: (trunk_vlan_id, trunk_ctag_id).

		:param trunk_vlan_id: tuple arg.
		:type trunk_vlan_id: (long)
		
		.. note::
			* range - ['0..4294967295']

		:param trunk_ctag_id: tuple arg.
		:type trunk_ctag_id: (long)
		
		.. note::
			* range - ['0..4294967295']

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = [('pybind.nos.v7_0_1a.interface.fortygigabitethernet', u'fortygigabitethernet'), ('pybind.nos.v7_1_0.interface.fortygigabitethernet', u'fortygigabitethernet'), ('pybind.nos.v6_0_2b.interface.fortygigabitethernet', u'fortygigabitethernet')]
    bindings_list = [('pybind.nos.v6_0_2b.interface.fortygigabitethernet.switchport.trunk_private_vlan_classification.private_vlan.trunk.allowed.vlan.add_', 'pybind.nos.v6_0_2b.brocade_interface', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.interface.fortygigabitethernet.switchport.trunk_private_vlan_classification.private_vlan.trunk.allowed.vlan.add_', 'pybind.nos.v7_0_1a.brocade_interface', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.interface.fortygigabitethernet.switchport.trunk_private_vlan_classification.private_vlan.trunk.allowed.vlan.add_', 'pybind.nos.v7_1_0.brocade_interface', 'pybind.nos.v7_1_0')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'add', 'keyval': 'trunk_vlan_id, trunk_ctag_id', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, fortygigabitethernet=fortygigabitethernet, add=add)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def interface_fortygigabitethernet_switchport_private_vlan_trunk_allowed_vlan_remove_delete(self, fortygigabitethernet=None, remove=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		NOS: 6.0.2b, 7.0.1a, 7.1.0    

	**Parent Instance Keyword Arg Tuple(s)**:
		:param fortygigabitethernet: kwarg tuple.
		:type fortygigabitethernet: (name).

		:param name: tuple arg.
		:type name: (unicode)
		
		.. note::
			* length - [u'3..16']
			* pattern - ((([1-9]|[1-9][0-9]|1[0-9][0-9]|2[0-3][0-9])/)?(([0-9]|[1][0-6]))/([1-9]|[1-9][0-9]|[1-9][0-9][0-9])(:[1-4])?)

	**This Instance Keyword Arg Tuple**:
		:param remove: kwarg tuple.
		:type remove: (trunk_vlan_id, trunk_ctag_id).

		:param trunk_vlan_id: tuple arg.
		:type trunk_vlan_id: (long)
		
		.. note::
			* range - ['0..4294967295']

		:param trunk_ctag_id: tuple arg.
		:type trunk_ctag_id: (long)
		
		.. note::
			* range - ['0..4294967295']

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = [('pybind.nos.v7_0_1a.interface.fortygigabitethernet', u'fortygigabitethernet'), ('pybind.nos.v6_0_2b.interface.fortygigabitethernet', u'fortygigabitethernet'), ('pybind.nos.v7_1_0.interface.fortygigabitethernet', u'fortygigabitethernet')]
    bindings_list = [('pybind.nos.v6_0_2b.interface.fortygigabitethernet.switchport.trunk_private_vlan_classification.private_vlan.trunk.allowed.vlan.remove_', 'pybind.nos.v6_0_2b.brocade_interface', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.interface.fortygigabitethernet.switchport.trunk_private_vlan_classification.private_vlan.trunk.allowed.vlan.remove_', 'pybind.nos.v7_0_1a.brocade_interface', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.interface.fortygigabitethernet.switchport.trunk_private_vlan_classification.private_vlan.trunk.allowed.vlan.remove_', 'pybind.nos.v7_1_0.brocade_interface', 'pybind.nos.v7_1_0')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'remove', 'keyval': 'trunk_vlan_id, trunk_ctag_id', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, fortygigabitethernet=fortygigabitethernet, remove=remove)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def interface_fortygigabitethernet_switchport_trunk_allowed_rspan_vlan_add_delete(self, fortygigabitethernet=None, add=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		NOS: 6.0.2b, 7.0.1a, 7.1.0    

	**Parent Instance Keyword Arg Tuple(s)**:
		:param fortygigabitethernet: kwarg tuple.
		:type fortygigabitethernet: (name).

		:param name: tuple arg.
		:type name: (unicode)
		
		.. note::
			* length - [u'3..16']
			* pattern - ((([1-9]|[1-9][0-9]|1[0-9][0-9]|2[0-3][0-9])/)?(([0-9]|[1][0-6]))/([1-9]|[1-9][0-9]|[1-9][0-9][0-9])(:[1-4])?)

	**This Instance Keyword Arg Tuple**:
		:param add: kwarg tuple.
		:type add: (trunk_vlan_id, trunk_ctag_id).

		:param trunk_vlan_id: tuple arg.
		:type trunk_vlan_id: (long)
		
		.. note::
			* range - ['0..4294967295']

		:param trunk_ctag_id: tuple arg.
		:type trunk_ctag_id: (long)
		
		.. note::
			* range - ['0..4294967295']

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = [('pybind.nos.v7_0_1a.interface.fortygigabitethernet', u'fortygigabitethernet'), ('pybind.nos.v7_1_0.interface.fortygigabitethernet', u'fortygigabitethernet'), ('pybind.nos.v6_0_2b.interface.fortygigabitethernet', u'fortygigabitethernet')]
    bindings_list = [('pybind.nos.v6_0_2b.interface.fortygigabitethernet.switchport.trunk.allowed.trunk_rspan_vlan_classification.rspan_vlan.add_', 'pybind.nos.v6_0_2b.brocade_interface', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.interface.fortygigabitethernet.switchport.trunk.allowed.trunk_rspan_vlan_classification.rspan_vlan.add_', 'pybind.nos.v7_0_1a.brocade_interface', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.interface.fortygigabitethernet.switchport.trunk.allowed.trunk_rspan_vlan_classification.rspan_vlan.add_', 'pybind.nos.v7_1_0.brocade_interface', 'pybind.nos.v7_1_0')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'add', 'keyval': 'trunk_vlan_id, trunk_ctag_id', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, fortygigabitethernet=fortygigabitethernet, add=add)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def interface_fortygigabitethernet_switchport_trunk_allowed_rspan_vlan_remove_delete(self, fortygigabitethernet=None, remove=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		NOS: 6.0.2b, 7.0.1a, 7.1.0    

	**Parent Instance Keyword Arg Tuple(s)**:
		:param fortygigabitethernet: kwarg tuple.
		:type fortygigabitethernet: (name).

		:param name: tuple arg.
		:type name: (unicode)
		
		.. note::
			* length - [u'3..16']
			* pattern - ((([1-9]|[1-9][0-9]|1[0-9][0-9]|2[0-3][0-9])/)?(([0-9]|[1][0-6]))/([1-9]|[1-9][0-9]|[1-9][0-9][0-9])(:[1-4])?)

	**This Instance Keyword Arg Tuple**:
		:param remove: kwarg tuple.
		:type remove: (trunk_vlan_id, trunk_ctag_id).

		:param trunk_vlan_id: tuple arg.
		:type trunk_vlan_id: (long)
		
		.. note::
			* range - ['0..4294967295']

		:param trunk_ctag_id: tuple arg.
		:type trunk_ctag_id: (long)
		
		.. note::
			* range - ['0..4294967295']

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = [('pybind.nos.v7_0_1a.interface.fortygigabitethernet', u'fortygigabitethernet'), ('pybind.nos.v7_1_0.interface.fortygigabitethernet', u'fortygigabitethernet'), ('pybind.nos.v6_0_2b.interface.fortygigabitethernet', u'fortygigabitethernet')]
    bindings_list = [('pybind.nos.v6_0_2b.interface.fortygigabitethernet.switchport.trunk.allowed.trunk_rspan_vlan_classification.rspan_vlan.remove_', 'pybind.nos.v6_0_2b.brocade_interface', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.interface.fortygigabitethernet.switchport.trunk.allowed.trunk_rspan_vlan_classification.rspan_vlan.remove_', 'pybind.nos.v7_0_1a.brocade_interface', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.interface.fortygigabitethernet.switchport.trunk.allowed.trunk_rspan_vlan_classification.rspan_vlan.remove_', 'pybind.nos.v7_1_0.brocade_interface', 'pybind.nos.v7_1_0')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'remove', 'keyval': 'trunk_vlan_id, trunk_ctag_id', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, fortygigabitethernet=fortygigabitethernet, remove=remove)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def interface_fortygigabitethernet_switchport_trunk_allowed_vlan_add_delete(self, fortygigabitethernet=None, add=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		NOS: 6.0.2b, 7.0.1a, 7.1.0    

	**Parent Instance Keyword Arg Tuple(s)**:
		:param fortygigabitethernet: kwarg tuple.
		:type fortygigabitethernet: (name).

		:param name: tuple arg.
		:type name: (unicode)
		
		.. note::
			* length - [u'3..16']
			* pattern - ((([1-9]|[1-9][0-9]|1[0-9][0-9]|2[0-3][0-9])/)?(([0-9]|[1][0-6]))/([1-9]|[1-9][0-9]|[1-9][0-9][0-9])(:[1-4])?)

	**This Instance Keyword Arg Tuple**:
		:param add: kwarg tuple.
		:type add: (trunk_vlan_id).

		:param trunk_vlan_id: tuple arg.
		:type trunk_vlan_id: (long)
		
		.. note::
			* range - ['0..4294967295']

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = [('pybind.nos.v7_0_1a.interface.fortygigabitethernet', u'fortygigabitethernet'), ('pybind.nos.v7_1_0.interface.fortygigabitethernet', u'fortygigabitethernet'), ('pybind.nos.v6_0_2b.interface.fortygigabitethernet', u'fortygigabitethernet')]
    bindings_list = [('pybind.nos.v6_0_2b.interface.fortygigabitethernet.switchport.trunk.trunk_vlan_classification.allowed.vlan.add_', 'pybind.nos.v6_0_2b.brocade_interface', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.interface.fortygigabitethernet.switchport.trunk.trunk_vlan_classification.allowed.vlan.add_', 'pybind.nos.v7_0_1a.brocade_interface', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.interface.fortygigabitethernet.switchport.trunk.trunk_vlan_classification.allowed.vlan.add_', 'pybind.nos.v7_1_0.brocade_interface', 'pybind.nos.v7_1_0')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'add', 'keyval': 'trunk_vlan_id', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, fortygigabitethernet=fortygigabitethernet, add=add)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def interface_fortygigabitethernet_switchport_trunk_allowed_vlan_remove_delete(self, fortygigabitethernet=None, remove=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		NOS: 6.0.2b, 7.0.1a, 7.1.0    

	**Parent Instance Keyword Arg Tuple(s)**:
		:param fortygigabitethernet: kwarg tuple.
		:type fortygigabitethernet: (name).

		:param name: tuple arg.
		:type name: (unicode)
		
		.. note::
			* length - [u'3..16']
			* pattern - ((([1-9]|[1-9][0-9]|1[0-9][0-9]|2[0-3][0-9])/)?(([0-9]|[1][0-6]))/([1-9]|[1-9][0-9]|[1-9][0-9][0-9])(:[1-4])?)

	**This Instance Keyword Arg Tuple**:
		:param remove: kwarg tuple.
		:type remove: (trunk_vlan_id).

		:param trunk_vlan_id: tuple arg.
		:type trunk_vlan_id: (long)
		
		.. note::
			* range - ['0..4294967295']

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = [('pybind.nos.v7_0_1a.interface.fortygigabitethernet', u'fortygigabitethernet'), ('pybind.nos.v7_1_0.interface.fortygigabitethernet', u'fortygigabitethernet'), ('pybind.nos.v6_0_2b.interface.fortygigabitethernet', u'fortygigabitethernet')]
    bindings_list = [('pybind.nos.v6_0_2b.interface.fortygigabitethernet.switchport.trunk.trunk_vlan_classification.allowed.vlan.remove_', 'pybind.nos.v6_0_2b.brocade_interface', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.interface.fortygigabitethernet.switchport.trunk.trunk_vlan_classification.allowed.vlan.remove_', 'pybind.nos.v7_0_1a.brocade_interface', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.interface.fortygigabitethernet.switchport.trunk.trunk_vlan_classification.allowed.vlan.remove_', 'pybind.nos.v7_1_0.brocade_interface', 'pybind.nos.v7_1_0')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'remove', 'keyval': 'trunk_vlan_id', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, fortygigabitethernet=fortygigabitethernet, remove=remove)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def interface_fortygigabitethernet_track_interface_delete(self, fortygigabitethernet=None, interface=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		NOS: 6.0.2b, 7.0.1a, 7.1.0    

	**Parent Instance Keyword Arg Tuple(s)**:
		:param fortygigabitethernet: kwarg tuple.
		:type fortygigabitethernet: (name).

		:param name: tuple arg.
		:type name: (unicode)
		
		.. note::
			* length - [u'3..16']
			* pattern - ((([1-9]|[1-9][0-9]|1[0-9][0-9]|2[0-3][0-9])/)?(([0-9]|[1][0-6]))/([1-9]|[1-9][0-9]|[1-9][0-9][0-9])(:[1-4])?)

	**This Instance Keyword Arg Tuple**:
		:param interface: kwarg tuple.
		:type interface: (track_interface_type, track_interface_name).

		:param track_interface_type: tuple arg.
		:type track_interface_type: (unicode)
		
		.. note::
			* enum - [u'ethernet', u'port-channel']

		:param track_interface_name: Interface name
		:type track_interface_name: (unicode)
		
		.. note::
			* pattern - (((([1-9]|[1-9][0-9]|1[0-9]{2}|2[0-3][0-9])/)?(([0-9]|1[0-6]))/([1-9]|[1-9][0-9]|[1-9][0-9][0-9])(:[1-4])?)|([1-9]|[1-9][0-9]|[1-9][0-9]{2}|[1-5][0-9]{3}|6[0-1][0-4]{2}))

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = [('pybind.nos.v7_1_0.interface.fortygigabitethernet', u'fortygigabitethernet'), ('pybind.nos.v6_0_2b.interface.fortygigabitethernet', u'fortygigabitethernet'), ('pybind.nos.v7_0_1a.interface.fortygigabitethernet', u'fortygigabitethernet')]
    bindings_list = [('pybind.nos.v6_0_2b.interface.fortygigabitethernet.track.interface', 'pybind.nos.v6_0_2b.brocade_interface', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.interface.fortygigabitethernet.track.interface', 'pybind.nos.v7_0_1a.brocade_interface', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.interface.fortygigabitethernet.track.interface', 'pybind.nos.v7_1_0.brocade_interface', 'pybind.nos.v7_1_0')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'interface', 'keyval': 'track_interface_type, track_interface_name', 'extra_keyval': 'track_interface_type, track_interface_name'}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, fortygigabitethernet=fortygigabitethernet, interface=interface)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def interface_fortygigabitethernet_vlan_classifier_activate_group_delete(self, fortygigabitethernet=None, group=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		NOS: 6.0.2b, 7.0.1a, 7.1.0    

	**Parent Instance Keyword Arg Tuple(s)**:
		:param fortygigabitethernet: kwarg tuple.
		:type fortygigabitethernet: (name).

		:param name: tuple arg.
		:type name: (unicode)
		
		.. note::
			* length - [u'3..16']
			* pattern - ((([1-9]|[1-9][0-9]|1[0-9][0-9]|2[0-3][0-9])/)?(([0-9]|[1][0-6]))/([1-9]|[1-9][0-9]|[1-9][0-9][0-9])(:[1-4])?)

	**This Instance Keyword Arg Tuple**:
		:param group: kwarg tuple.
		:type group: (groupid, vlan).

		:param groupid: tuple arg.
		:type groupid: (long)
		
		.. note::
			* range - ['0..4294967295']

		:param vlan: 1-8191;;Vlan
		:type vlan: (long)
		
		.. note::
			* range - ['0..4294967295']

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = [('pybind.nos.v7_1_0.interface.fortygigabitethernet', u'fortygigabitethernet'), ('pybind.nos.v6_0_2b.interface.fortygigabitethernet', u'fortygigabitethernet'), ('pybind.nos.v7_0_1a.interface.fortygigabitethernet', u'fortygigabitethernet')]
    bindings_list = [('pybind.nos.v6_0_2b.interface.fortygigabitethernet.vlan.classifier.activate.group', 'pybind.nos.v6_0_2b.brocade_interface', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.interface.fortygigabitethernet.vlan.classifier.activate.group', 'pybind.nos.v7_0_1a.brocade_interface', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.interface.fortygigabitethernet.vlan.classifier.activate.group', 'pybind.nos.v7_1_0.brocade_interface', 'pybind.nos.v7_1_0')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'group', 'keyval': 'groupid', 'extra_keyval': 'groupid, vlan'}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, fortygigabitethernet=fortygigabitethernet, group=group)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def interface_fortygigabitethernet_vrrp_group_delete(self, fortygigabitethernet=None, vrrp=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		NOS: 6.0.2b, 7.0.1a, 7.1.0    

	**Parent Instance Keyword Arg Tuple(s)**:
		:param fortygigabitethernet: kwarg tuple.
		:type fortygigabitethernet: (name).

		:param name: tuple arg.
		:type name: (unicode)
		
		.. note::
			* length - [u'3..16']
			* pattern - ((([1-9]|[1-9][0-9]|1[0-9][0-9]|2[0-3][0-9])/)?(([0-9]|[1][0-6]))/([1-9]|[1-9][0-9]|[1-9][0-9][0-9])(:[1-4])?)

	**This Instance Keyword Arg Tuple**:
		:param vrrp: kwarg tuple.
		:type vrrp: (vrid, version).

		:param vrid: tuple arg.
		:type vrid: (int)
		
		.. note::
			* range - ['0..255']

		:param version: Set VRRP version 2/3
		:type version: (int)
		
		.. note::
			* range - ['0..255']

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = [('pybind.nos.v6_0_2b.interface.fortygigabitethernet', u'fortygigabitethernet'), ('pybind.nos.v7_0_1a.interface.fortygigabitethernet', u'fortygigabitethernet'), ('pybind.nos.v7_1_0.interface.fortygigabitethernet', u'fortygigabitethernet')]
    bindings_list = [('pybind.nos.v6_0_2b.interface.fortygigabitethernet.vrrp', 'pybind.nos.v6_0_2b.brocade_interface', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.interface.fortygigabitethernet.vrrp', 'pybind.nos.v7_0_1a.brocade_interface', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.interface.fortygigabitethernet.vrrp', 'pybind.nos.v7_1_0.brocade_interface', 'pybind.nos.v7_1_0')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'vrrp', 'keyval': 'vrid, version', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, fortygigabitethernet=fortygigabitethernet, vrrp=vrrp)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def interface_fortygigabitethernet_vrrp_group_track_delete(self, fortygigabitethernet=None, vrrp=None, interface=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		NOS: 6.0.2b, 7.0.1a, 7.1.0    

	**Parent Instance Keyword Arg Tuple(s)**:
		:param fortygigabitethernet: kwarg tuple.
		:type fortygigabitethernet: (name).

		:param name: tuple arg.
		:type name: (unicode)
		
		.. note::
			* length - [u'3..16']
			* pattern - ((([1-9]|[1-9][0-9]|1[0-9][0-9]|2[0-3][0-9])/)?(([0-9]|[1][0-6]))/([1-9]|[1-9][0-9]|[1-9][0-9][0-9])(:[1-4])?)

		:param vrrp: kwarg tuple.
		:type vrrp: (vrid, version).

		:param vrid: tuple arg.
		:type vrid: (int)
		
		.. note::
			* range - ['0..255']

		:param version: Set VRRP version 2/3
		:type version: (int)
		
		.. note::
			* range - ['0..255']

	**This Instance Keyword Arg Tuple**:
		:param interface: kwarg tuple.
		:type interface: (interface_type, interface_name).

		:param interface_type: tuple arg.
		:type interface_type: (unicode)
		
		.. note::
			* enum - [u'fortygigabitethernet', u'gigabitethernet', u'tengigabitethernet', u'hundredgigabitethernet', u'port-channel']

		:param interface_name: tuple arg.
		:type interface_name: (unicode)
		
		.. note::
			* length - [u'3..16']
			* pattern - ((([1-9]|[1-9][0-9]|1[0-9][0-9]|2[0-3][0-9])/)?(([0-9]|[1][0-6]))/([1-9]|[1-9][0-9]|[1-9][0-9][0-9])(:[1-4])?)

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = [('pybind.nos.v6_0_2b.interface.fortygigabitethernet', u'fortygigabitethernet'), ('pybind.nos.v6_0_2b.interface.fortygigabitethernet.vrrp', u'vrrp'), ('pybind.nos.v7_0_1a.interface.fortygigabitethernet', u'fortygigabitethernet'), ('pybind.nos.v7_0_1a.interface.fortygigabitethernet.vrrp', u'vrrp'), ('pybind.nos.v7_1_0.interface.fortygigabitethernet', u'fortygigabitethernet'), ('pybind.nos.v7_1_0.interface.fortygigabitethernet.vrrp', u'vrrp')]
    bindings_list = [('pybind.nos.v6_0_2b.interface.fortygigabitethernet.vrrp.track.interface', 'pybind.nos.v6_0_2b.brocade_interface', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.interface.fortygigabitethernet.vrrp.track.interface', 'pybind.nos.v7_0_1a.brocade_interface', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.interface.fortygigabitethernet.vrrp.track.interface', 'pybind.nos.v7_1_0.brocade_interface', 'pybind.nos.v7_1_0')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'vrid, version', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'vrid, version', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'vrid, version', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'interface', 'keyval': 'interface_type, interface_name', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, fortygigabitethernet=fortygigabitethernet, vrrp=vrrp, interface=interface)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def interface_fortygigabitethernet_vrrp_group_virtual_ip_delete(self, fortygigabitethernet=None, vrrp=None, virtual_ip=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		NOS: 6.0.2b, 7.0.1a, 7.1.0    

	**Parent Instance Keyword Arg Tuple(s)**:
		:param fortygigabitethernet: kwarg tuple.
		:type fortygigabitethernet: (name).

		:param name: tuple arg.
		:type name: (unicode)
		
		.. note::
			* length - [u'3..16']
			* pattern - ((([1-9]|[1-9][0-9]|1[0-9][0-9]|2[0-3][0-9])/)?(([0-9]|[1][0-6]))/([1-9]|[1-9][0-9]|[1-9][0-9][0-9])(:[1-4])?)

		:param vrrp: kwarg tuple.
		:type vrrp: (vrid, version).

		:param vrid: tuple arg.
		:type vrid: (int)
		
		.. note::
			* range - ['0..255']

		:param version: Set VRRP version 2/3
		:type version: (int)
		
		.. note::
			* range - ['0..255']

	**This Instance Keyword Arg Tuple**:
		:param virtual_ip: kwarg tuple.
		:type virtual_ip: (virtual_ipaddr).

		:param virtual_ipaddr: Virtual IPv4 address in dotted decimal
		:type virtual_ipaddr: (unicode)
		
		.. note::
			* pattern - (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = [('pybind.nos.v7_1_0.interface.fortygigabitethernet', u'fortygigabitethernet'), ('pybind.nos.v7_1_0.interface.fortygigabitethernet.vrrp', u'vrrp'), ('pybind.nos.v7_0_1a.interface.fortygigabitethernet', u'fortygigabitethernet'), ('pybind.nos.v7_0_1a.interface.fortygigabitethernet.vrrp', u'vrrp'), ('pybind.nos.v6_0_2b.interface.fortygigabitethernet', u'fortygigabitethernet'), ('pybind.nos.v6_0_2b.interface.fortygigabitethernet.vrrp', u'vrrp')]
    bindings_list = [('pybind.nos.v6_0_2b.interface.fortygigabitethernet.vrrp.virtual_ip', 'pybind.nos.v6_0_2b.brocade_interface', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.interface.fortygigabitethernet.vrrp.virtual_ip', 'pybind.nos.v7_0_1a.brocade_interface', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.interface.fortygigabitethernet.vrrp.virtual_ip', 'pybind.nos.v7_1_0.brocade_interface', 'pybind.nos.v7_1_0')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'vrid, version', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'vrid, version', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'vrid, version', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'virtual_ip', 'keyval': 'virtual_ipaddr', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, fortygigabitethernet=fortygigabitethernet, vrrp=vrrp, virtual_ip=virtual_ip)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def interface_gigabitethernet_ip_access_group_delete(self, gigabitethernet=None, access_group=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		NOS: 6.0.2b, 7.0.1a, 7.1.0    

	**Parent Instance Keyword Arg Tuple(s)**:
		:param gigabitethernet: kwarg tuple.
		:type gigabitethernet: (name).

		:param name: tuple arg.
		:type name: (unicode)
		
		.. note::
			* length - [u'3..16']
			* pattern - ((([1-9]|[1-9][0-9]|1[0-9][0-9]|2[0-3][0-9])/)?(([0-9]|[1][0-6]))/([1-9]|[1-9][0-9]|[1-9][0-9][0-9])(:[1-4])?)

	**This Instance Keyword Arg Tuple**:
		:param access_group: kwarg tuple.
		:type access_group: (ip_access_list, ip_direction, traffic_type).

		:param ip_access_list: ACL_NAME;; Access List Name (Max 63)
		:type ip_access_list: (unicode)
		
		.. note::
			* length - [u'1..63']
			* pattern - [a-zA-Z0-9]{1}([-a-zA-Z0-9_]{0,62})

		:param ip_direction: tuple arg.
		:type ip_direction: (unicode)
		
		.. note::
			* enum - [u'in', u'out']

		:param traffic_type: tuple arg.
		:type traffic_type: (unicode)
		
		.. note::
			* enum - [u'switched', u'routed']

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = [('pybind.nos.v6_0_2b.interface.gigabitethernet', u'gigabitethernet'), ('pybind.nos.v7_0_1a.interface.gigabitethernet', u'gigabitethernet'), ('pybind.nos.v7_1_0.interface.gigabitethernet', u'gigabitethernet')]
    bindings_list = [('pybind.nos.v6_0_2b.interface.gigabitethernet.ip_acl_interface.ip.access_group', 'pybind.nos.v6_0_2b.brocade_interface', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.interface.gigabitethernet.ip_acl_interface.ip.access_group', 'pybind.nos.v7_0_1a.brocade_interface', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.interface.gigabitethernet.ip_acl_interface.ip.access_group', 'pybind.nos.v7_1_0.brocade_interface', 'pybind.nos.v7_1_0')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'access_group', 'keyval': 'ip_access_list, ip_direction', 'extra_keyval': 'ip_access_list, ip_direction, traffic_type'}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, gigabitethernet=gigabitethernet, access_group=access_group)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def interface_gigabitethernet_ip_address_delete(self, gigabitethernet=None, address=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		NOS: 6.0.2b, 7.0.1a, 7.1.0    

	**Parent Instance Keyword Arg Tuple(s)**:
		:param gigabitethernet: kwarg tuple.
		:type gigabitethernet: (name).

		:param name: tuple arg.
		:type name: (unicode)
		
		.. note::
			* length - [u'3..16']
			* pattern - ((([1-9]|[1-9][0-9]|1[0-9][0-9]|2[0-3][0-9])/)?(([0-9]|[1][0-6]))/([1-9]|[1-9][0-9]|[1-9][0-9][0-9])(:[1-4])?)

	**This Instance Keyword Arg Tuple**:
		:param address: kwarg tuple.
		:type address: (address, secondary, ospf_passive, ospf_ignore).

		:param address: A.B.C.D/M IP address in dotted decimal/Mask
		:type address: (unicode)
		
		.. note::
			* pattern - (([1-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.)(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){2}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])/(([1-9])|([1-2][0-9])|(3[0-1]))

		:param secondary: Secondary ip address on the specific interface
		:type secondary: (YANGBool)

		:param ospf_passive: ospf pasive address on the specific interface
		:type ospf_passive: (YANGBool)

		:param ospf_ignore: ospf active address on the specific interface
		:type ospf_ignore: (YANGBool)

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = [('pybind.nos.v6_0_2b.interface.gigabitethernet', u'gigabitethernet'), ('pybind.nos.v7_0_1a.interface.gigabitethernet', u'gigabitethernet'), ('pybind.nos.v7_1_0.interface.gigabitethernet', u'gigabitethernet')]
    bindings_list = [('pybind.nos.v6_0_2b.interface.gigabitethernet.ip.ip_config.address', 'pybind.nos.v6_0_2b.brocade_interface', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.interface.gigabitethernet.ip.ip_config.address', 'pybind.nos.v7_0_1a.brocade_interface', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.interface.gigabitethernet.ip.ip_config.address', 'pybind.nos.v7_1_0.brocade_interface', 'pybind.nos.v7_1_0')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'address', 'keyval': 'address', 'extra_keyval': 'address, secondary, ospf_passive, ospf_ignore'}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, gigabitethernet=gigabitethernet, address=address)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def interface_gigabitethernet_ip_dhcp_relay_delete(self, gigabitethernet=None, servers=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		NOS: 6.0.2b, 7.0.1a, 7.1.0    

	**Parent Instance Keyword Arg Tuple(s)**:
		:param gigabitethernet: kwarg tuple.
		:type gigabitethernet: (name).

		:param name: tuple arg.
		:type name: (unicode)
		
		.. note::
			* length - [u'3..16']
			* pattern - ((([1-9]|[1-9][0-9]|1[0-9][0-9]|2[0-3][0-9])/)?(([0-9]|[1][0-6]))/([1-9]|[1-9][0-9]|[1-9][0-9][0-9])(:[1-4])?)

	**This Instance Keyword Arg Tuple**:
		:param servers: kwarg tuple.
		:type servers: (relay_ip_addr, server_vrf_name).

		:param relay_ip_addr: A.B.C.D;; IP address of the DHCP server
		:type relay_ip_addr: (unicode)
		
		.. note::
			* pattern - (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?

		:param server_vrf_name: VRF name of the DHCP server
		:type server_vrf_name: (unicode)
		
		.. note::
			* length - [u'1..32']
			* pattern - ((([a-zA-Z0-9_]([a-zA-Z0-9\-_]){0,61})?[a-zA-Z0-9]\.)*([a-zA-Z0-9_]([a-zA-Z0-9\-_]){0,61})?[a-zA-Z0-9]\.?)|\.

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = [('pybind.nos.v7_1_0.interface.gigabitethernet', u'gigabitethernet'), ('pybind.nos.v6_0_2b.interface.gigabitethernet', u'gigabitethernet'), ('pybind.nos.v7_0_1a.interface.gigabitethernet', u'gigabitethernet')]
    bindings_list = [('pybind.nos.v6_0_2b.interface.gigabitethernet.ip.interface_gi_dhcp_conf.dhcp.relay.servers', 'pybind.nos.v6_0_2b.brocade_interface', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.interface.gigabitethernet.ip.interface_gi_dhcp_conf.dhcp.relay.servers', 'pybind.nos.v7_0_1a.brocade_interface', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.interface.gigabitethernet.ip.interface_gi_dhcp_conf.dhcp.relay.servers', 'pybind.nos.v7_1_0.brocade_interface', 'pybind.nos.v7_1_0')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'servers', 'keyval': 'relay_ip_addr, server_vrf_name', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, gigabitethernet=gigabitethernet, servers=servers)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def interface_gigabitethernet_ip_igmp_static_group_delete(self, gigabitethernet=None, static_group=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		NOS: 6.0.2b, 7.0.1a, 7.1.0    

	**Parent Instance Keyword Arg Tuple(s)**:
		:param gigabitethernet: kwarg tuple.
		:type gigabitethernet: (name).

		:param name: tuple arg.
		:type name: (unicode)
		
		.. note::
			* length - [u'3..16']
			* pattern - ((([1-9]|[1-9][0-9]|1[0-9][0-9]|2[0-3][0-9])/)?(([0-9]|[1][0-6]))/([1-9]|[1-9][0-9]|[1-9][0-9][0-9])(:[1-4])?)

	**This Instance Keyword Arg Tuple**:
		:param static_group: kwarg tuple.
		:type static_group: (sg_addr).

		:param sg_addr: Multicast Address to be Joined in the format A.B.C.D
		:type sg_addr: (unicode)
		
		.. note::
			* pattern - (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = [('pybind.nos.v7_0_1a.interface.gigabitethernet', u'gigabitethernet'), ('pybind.nos.v7_1_0.interface.gigabitethernet', u'gigabitethernet'), ('pybind.nos.v6_0_2b.interface.gigabitethernet', u'gigabitethernet')]
    bindings_list = [('pybind.nos.v6_0_2b.interface.gigabitethernet.ip.igmp_phy_intf_cfg.igmp.static_group', 'pybind.nos.v6_0_2b.brocade_interface', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.interface.gigabitethernet.ip.igmp_phy_intf_cfg.igmp.static_group', 'pybind.nos.v7_0_1a.brocade_interface', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.interface.gigabitethernet.ip.igmp_phy_intf_cfg.igmp.static_group', 'pybind.nos.v7_1_0.brocade_interface', 'pybind.nos.v7_1_0')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'static_group', 'keyval': 'sg_addr', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, gigabitethernet=gigabitethernet, static_group=static_group)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def interface_gigabitethernet_ipv6_access_group_delete(self, gigabitethernet=None, access_group=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		NOS: 6.0.2b, 7.0.1a, 7.1.0    

	**Parent Instance Keyword Arg Tuple(s)**:
		:param gigabitethernet: kwarg tuple.
		:type gigabitethernet: (name).

		:param name: tuple arg.
		:type name: (unicode)
		
		.. note::
			* length - [u'3..16']
			* pattern - ((([1-9]|[1-9][0-9]|1[0-9][0-9]|2[0-3][0-9])/)?(([0-9]|[1][0-6]))/([1-9]|[1-9][0-9]|[1-9][0-9][0-9])(:[1-4])?)

	**This Instance Keyword Arg Tuple**:
		:param access_group: kwarg tuple.
		:type access_group: (ipv6_access_list, ip_direction, traffic_type).

		:param ipv6_access_list: ACL_NAME;; Access List Name (Max 63)
		:type ipv6_access_list: (unicode)
		
		.. note::
			* length - [u'1..63']
			* pattern - [a-zA-Z0-9]{1}([-a-zA-Z0-9_]{0,62})

		:param ip_direction: tuple arg.
		:type ip_direction: (unicode)
		
		.. note::
			* enum - [u'in', u'out']

		:param traffic_type: tuple arg.
		:type traffic_type: (unicode)
		
		.. note::
			* enum - [u'switched', u'routed']

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = [('pybind.nos.v7_0_1a.interface.gigabitethernet', u'gigabitethernet'), ('pybind.nos.v7_1_0.interface.gigabitethernet', u'gigabitethernet'), ('pybind.nos.v6_0_2b.interface.gigabitethernet', u'gigabitethernet')]
    bindings_list = [('pybind.nos.v6_0_2b.interface.gigabitethernet.ipv6.access_group', 'pybind.nos.v6_0_2b.brocade_interface', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.interface.gigabitethernet.ipv6.access_group', 'pybind.nos.v7_0_1a.brocade_interface', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.interface.gigabitethernet.ipv6.access_group', 'pybind.nos.v7_1_0.brocade_interface', 'pybind.nos.v7_1_0')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'access_group', 'keyval': 'ipv6_access_list, ip_direction', 'extra_keyval': 'ipv6_access_list, ip_direction, traffic_type'}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, gigabitethernet=gigabitethernet, access_group=access_group)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def interface_gigabitethernet_ipv6_address_delete(self, gigabitethernet=None, ipv6_address=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		NOS: 6.0.2b, 7.0.1a, 7.1.0    

	**Parent Instance Keyword Arg Tuple(s)**:
		:param gigabitethernet: kwarg tuple.
		:type gigabitethernet: (name).

		:param name: tuple arg.
		:type name: (unicode)
		
		.. note::
			* length - [u'3..16']
			* pattern - ((([1-9]|[1-9][0-9]|1[0-9][0-9]|2[0-3][0-9])/)?(([0-9]|[1][0-6]))/([1-9]|[1-9][0-9]|[1-9][0-9][0-9])(:[1-4])?)

	**This Instance Keyword Arg Tuple**:
		:param ipv6_address: kwarg tuple.
		:type ipv6_address: (address, secondary, anycast).

		:param address: A:B::C:D/LEN;; IPv6 prefix format: xxxx:xxxx/ml, xxxx:xxxx::/ml, xxxx::xx/128
		:type address: (unicode)
		
		.. note::
			* pattern - ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(/(([0-9])|([0-9]{2})|(1[0-1][0-9])|(12[0-8])))

		:param secondary: Configure Secondary ipv6 address on an interface
		:type secondary: (YANGBool)

		:param anycast: Configure ipv6 address as anycast
		:type anycast: (YANGBool)

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = [('pybind.nos.v7_1_0.interface.gigabitethernet', u'gigabitethernet'), ('pybind.nos.v7_0_1a.interface.gigabitethernet', u'gigabitethernet'), ('pybind.nos.v6_0_2b.interface.gigabitethernet', u'gigabitethernet')]
    bindings_list = [('pybind.nos.v6_0_2b.interface.gigabitethernet.ipv6.ipv6_config.address.ipv6_address', 'pybind.nos.v6_0_2b.brocade_interface', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.interface.gigabitethernet.ipv6.ipv6_config.address.ipv6_address', 'pybind.nos.v7_0_1a.brocade_interface', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.interface.gigabitethernet.ipv6.ipv6_config.address.ipv6_address', 'pybind.nos.v7_1_0.brocade_interface', 'pybind.nos.v7_1_0')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'ipv6_address', 'keyval': 'address', 'extra_keyval': 'address, secondary, anycast'}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, gigabitethernet=gigabitethernet, ipv6_address=ipv6_address)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def interface_gigabitethernet_ipv6_dhcp_relay_delete(self, gigabitethernet=None, servers=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		NOS: 6.0.2b, 7.0.1a, 7.1.0    

	**Parent Instance Keyword Arg Tuple(s)**:
		:param gigabitethernet: kwarg tuple.
		:type gigabitethernet: (name).

		:param name: tuple arg.
		:type name: (unicode)
		
		.. note::
			* length - [u'3..16']
			* pattern - ((([1-9]|[1-9][0-9]|1[0-9][0-9]|2[0-3][0-9])/)?(([0-9]|[1][0-6]))/([1-9]|[1-9][0-9]|[1-9][0-9][0-9])(:[1-4])?)

	**This Instance Keyword Arg Tuple**:
		:param servers: kwarg tuple.
		:type servers: (relay_ip_addr, server_vrf_name).

		:param relay_ip_addr: IPv6 address of the DHCPv6 server
		:type relay_ip_addr: (unicode)
		
		.. note::
			* pattern - ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?

		:param server_vrf_name: VRF name of the DHCPv6 server
		:type server_vrf_name: (unicode)
		
		.. note::
			* length - [u'1..32']
			* pattern - ((([a-zA-Z0-9_]([a-zA-Z0-9\-_]){0,61})?[a-zA-Z0-9]\.)*([a-zA-Z0-9_]([a-zA-Z0-9\-_]){0,61})?[a-zA-Z0-9]\.?)|\.

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = [('pybind.nos.v7_0_1a.interface.gigabitethernet', u'gigabitethernet'), ('pybind.nos.v7_1_0.interface.gigabitethernet', u'gigabitethernet'), ('pybind.nos.v6_0_2b.interface.gigabitethernet', u'gigabitethernet')]
    bindings_list = [('pybind.nos.v6_0_2b.interface.gigabitethernet.ipv6.interface_phy_dhcp_conf.dhcp.relay.servers', 'pybind.nos.v6_0_2b.brocade_interface', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.interface.gigabitethernet.ipv6.interface_phy_dhcp_conf.dhcp.relay.servers', 'pybind.nos.v7_0_1a.brocade_interface', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.interface.gigabitethernet.ipv6.interface_phy_dhcp_conf.dhcp.relay.servers', 'pybind.nos.v7_1_0.brocade_interface', 'pybind.nos.v7_1_0')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'servers', 'keyval': 'relay_ip_addr', 'extra_keyval': 'relay_ip_addr, server_vrf_name'}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, gigabitethernet=gigabitethernet, servers=servers)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def interface_gigabitethernet_ipv6_nd_prefix_delete(self, gigabitethernet=None, prefix=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		NOS: 6.0.2b, 7.0.1a, 7.1.0    

	**Parent Instance Keyword Arg Tuple(s)**:
		:param gigabitethernet: kwarg tuple.
		:type gigabitethernet: (name).

		:param name: tuple arg.
		:type name: (unicode)
		
		.. note::
			* length - [u'3..16']
			* pattern - ((([1-9]|[1-9][0-9]|1[0-9][0-9]|2[0-3][0-9])/)?(([0-9]|[1][0-6]))/([1-9]|[1-9][0-9]|[1-9][0-9][0-9])(:[1-4])?)

	**This Instance Keyword Arg Tuple**:
		:param prefix: kwarg tuple.
		:type prefix: (prefix_ipv6_address).

		:param prefix_ipv6_address: tuple arg.
		:type prefix_ipv6_address: (unicode)
		
		.. note::
			* pattern - ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(/(([0-9])|([0-9]{2})|(1[0-1][0-9])|(12[0-8])))

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = [('pybind.nos.v7_0_1a.interface.gigabitethernet', u'gigabitethernet'), ('pybind.nos.v7_1_0.interface.gigabitethernet', u'gigabitethernet'), ('pybind.nos.v6_0_2b.interface.gigabitethernet', u'gigabitethernet')]
    bindings_list = [('pybind.nos.v6_0_2b.interface.gigabitethernet.ipv6.ipv6_nd_ra.ipv6_intf_cmds.nd.prefix', 'pybind.nos.v6_0_2b.brocade_interface', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.interface.gigabitethernet.ipv6.ipv6_nd_ra.ipv6_intf_cmds.nd.prefix', 'pybind.nos.v7_0_1a.brocade_interface', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.interface.gigabitethernet.ipv6.ipv6_nd_ra.ipv6_intf_cmds.nd.prefix', 'pybind.nos.v7_1_0.brocade_interface', 'pybind.nos.v7_1_0')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'prefix', 'keyval': 'prefix_ipv6_address', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, gigabitethernet=gigabitethernet, prefix=prefix)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def interface_gigabitethernet_ipv6_neighbor_delete(self, gigabitethernet=None, neighbor=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		NOS: 6.0.2b, 7.0.1a, 7.1.0    

	**Parent Instance Keyword Arg Tuple(s)**:
		:param gigabitethernet: kwarg tuple.
		:type gigabitethernet: (name).

		:param name: tuple arg.
		:type name: (unicode)
		
		.. note::
			* length - [u'3..16']
			* pattern - ((([1-9]|[1-9][0-9]|1[0-9][0-9]|2[0-3][0-9])/)?(([0-9]|[1][0-6]))/([1-9]|[1-9][0-9]|[1-9][0-9][0-9])(:[1-4])?)

	**This Instance Keyword Arg Tuple**:
		:param neighbor: kwarg tuple.
		:type neighbor: (ipv6_address).

		:param ipv6_address: tuple arg.
		:type ipv6_address: (unicode)
		
		.. note::
			* pattern - ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = [('pybind.nos.v7_0_1a.interface.gigabitethernet', u'gigabitethernet'), ('pybind.nos.v6_0_2b.interface.gigabitethernet', u'gigabitethernet'), ('pybind.nos.v7_1_0.interface.gigabitethernet', u'gigabitethernet')]
    bindings_list = [('pybind.nos.v6_0_2b.interface.gigabitethernet.ipv6.ipv6_nd_ra.ipv6_intf_cmds.neighbor', 'pybind.nos.v6_0_2b.brocade_interface', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.interface.gigabitethernet.ipv6.ipv6_nd_ra.ipv6_intf_cmds.neighbor', 'pybind.nos.v7_0_1a.brocade_interface', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.interface.gigabitethernet.ipv6.ipv6_nd_ra.ipv6_intf_cmds.neighbor', 'pybind.nos.v7_1_0.brocade_interface', 'pybind.nos.v7_1_0')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'neighbor', 'keyval': 'ipv6_address', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, gigabitethernet=gigabitethernet, neighbor=neighbor)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def interface_gigabitethernet_ipv6_vrrp_extended_group_delete(self, gigabitethernet=None, vrrpv3e_group=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		NOS: 6.0.2b, 7.0.1a, 7.1.0    

	**Parent Instance Keyword Arg Tuple(s)**:
		:param gigabitethernet: kwarg tuple.
		:type gigabitethernet: (name).

		:param name: tuple arg.
		:type name: (unicode)
		
		.. note::
			* length - [u'3..16']
			* pattern - ((([1-9]|[1-9][0-9]|1[0-9][0-9]|2[0-3][0-9])/)?(([0-9]|[1][0-6]))/([1-9]|[1-9][0-9]|[1-9][0-9][0-9])(:[1-4])?)

	**This Instance Keyword Arg Tuple**:
		:param vrrpv3e_group: kwarg tuple.
		:type vrrpv3e_group: (vrid).

		:param vrid: tuple arg.
		:type vrid: (int)
		
		.. note::
			* range - ['0..255']

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = [('pybind.nos.v7_1_0.interface.gigabitethernet', u'gigabitethernet'), ('pybind.nos.v6_0_2b.interface.gigabitethernet', u'gigabitethernet'), ('pybind.nos.v7_0_1a.interface.gigabitethernet', u'gigabitethernet')]
    bindings_list = [('pybind.nos.v6_0_2b.interface.gigabitethernet.ipv6.vrrpv3e_group', 'pybind.nos.v6_0_2b.brocade_interface', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.interface.gigabitethernet.ipv6.vrrpv3e_group', 'pybind.nos.v7_0_1a.brocade_interface', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.interface.gigabitethernet.ipv6.vrrpv3e_group', 'pybind.nos.v7_1_0.brocade_interface', 'pybind.nos.v7_1_0')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'vrrpv3e_group', 'keyval': 'vrid', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, gigabitethernet=gigabitethernet, vrrpv3e_group=vrrpv3e_group)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def interface_gigabitethernet_ipv6_vrrp_extended_group_track_delete(self, gigabitethernet=None, vrrpv3e_group=None, interface=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		NOS: 6.0.2b, 7.0.1a, 7.1.0    

	**Parent Instance Keyword Arg Tuple(s)**:
		:param gigabitethernet: kwarg tuple.
		:type gigabitethernet: (name).

		:param name: tuple arg.
		:type name: (unicode)
		
		.. note::
			* length - [u'3..16']
			* pattern - ((([1-9]|[1-9][0-9]|1[0-9][0-9]|2[0-3][0-9])/)?(([0-9]|[1][0-6]))/([1-9]|[1-9][0-9]|[1-9][0-9][0-9])(:[1-4])?)

		:param vrrpv3e_group: kwarg tuple.
		:type vrrpv3e_group: (vrid).

		:param vrid: tuple arg.
		:type vrid: (int)
		
		.. note::
			* range - ['0..255']

	**This Instance Keyword Arg Tuple**:
		:param interface: kwarg tuple.
		:type interface: (interface_type, interface_name).

		:param interface_type: tuple arg.
		:type interface_type: (unicode)
		
		.. note::
			* enum - [u'fortygigabitethernet', u'gigabitethernet', u'tengigabitethernet', u'hundredgigabitethernet', u'port-channel']

		:param interface_name: tuple arg.
		:type interface_name: (unicode)
		
		.. note::
			* length - [u'3..16']
			* pattern - ((([1-9]|[1-9][0-9]|1[0-9][0-9]|2[0-3][0-9])/)?(([0-9]|[1][0-6]))/([1-9]|[1-9][0-9]|[1-9][0-9][0-9])(:[1-4])?)

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = [('pybind.nos.v7_1_0.interface.gigabitethernet', u'gigabitethernet'), ('pybind.nos.v7_1_0.interface.gigabitethernet.ipv6.vrrpv3e_group', u'vrrpv3e_group'), ('pybind.nos.v7_0_1a.interface.gigabitethernet', u'gigabitethernet'), ('pybind.nos.v7_0_1a.interface.gigabitethernet.ipv6.vrrpv3e_group', u'vrrpv3e_group'), ('pybind.nos.v6_0_2b.interface.gigabitethernet', u'gigabitethernet'), ('pybind.nos.v6_0_2b.interface.gigabitethernet.ipv6.vrrpv3e_group', u'vrrpv3e_group')]
    bindings_list = [('pybind.nos.v6_0_2b.interface.gigabitethernet.ipv6.vrrpv3e_group.track.interface', 'pybind.nos.v6_0_2b.brocade_interface', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.interface.gigabitethernet.ipv6.vrrpv3e_group.track.interface', 'pybind.nos.v7_0_1a.brocade_interface', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.interface.gigabitethernet.ipv6.vrrpv3e_group.track.interface', 'pybind.nos.v7_1_0.brocade_interface', 'pybind.nos.v7_1_0')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'vrid', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'vrid', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'vrid', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'interface', 'keyval': 'interface_type, interface_name', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, gigabitethernet=gigabitethernet, vrrpv3e_group=vrrpv3e_group, interface=interface)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def interface_gigabitethernet_ipv6_vrrp_extended_group_virtual_ip_delete(self, gigabitethernet=None, vrrpv3e_group=None, virtual_ip=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		NOS: 6.0.2b, 7.0.1a, 7.1.0    

	**Parent Instance Keyword Arg Tuple(s)**:
		:param gigabitethernet: kwarg tuple.
		:type gigabitethernet: (name).

		:param name: tuple arg.
		:type name: (unicode)
		
		.. note::
			* length - [u'3..16']
			* pattern - ((([1-9]|[1-9][0-9]|1[0-9][0-9]|2[0-3][0-9])/)?(([0-9]|[1][0-6]))/([1-9]|[1-9][0-9]|[1-9][0-9][0-9])(:[1-4])?)

		:param vrrpv3e_group: kwarg tuple.
		:type vrrpv3e_group: (vrid).

		:param vrid: tuple arg.
		:type vrid: (int)
		
		.. note::
			* range - ['0..255']

	**This Instance Keyword Arg Tuple**:
		:param virtual_ip: kwarg tuple.
		:type virtual_ip: (virtual_ipaddr).

		:param virtual_ipaddr: Virtual IPv6 address
		:type virtual_ipaddr: (unicode)
		
		.. note::
			* pattern - ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = [('pybind.nos.v6_0_2b.interface.gigabitethernet', u'gigabitethernet'), ('pybind.nos.v6_0_2b.interface.gigabitethernet.ipv6.vrrpv3e_group', u'vrrpv3e_group'), ('pybind.nos.v7_0_1a.interface.gigabitethernet', u'gigabitethernet'), ('pybind.nos.v7_0_1a.interface.gigabitethernet.ipv6.vrrpv3e_group', u'vrrpv3e_group'), ('pybind.nos.v7_1_0.interface.gigabitethernet', u'gigabitethernet'), ('pybind.nos.v7_1_0.interface.gigabitethernet.ipv6.vrrpv3e_group', u'vrrpv3e_group')]
    bindings_list = [('pybind.nos.v6_0_2b.interface.gigabitethernet.ipv6.vrrpv3e_group.virtual_ip', 'pybind.nos.v6_0_2b.brocade_interface', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.interface.gigabitethernet.ipv6.vrrpv3e_group.virtual_ip', 'pybind.nos.v7_0_1a.brocade_interface', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.interface.gigabitethernet.ipv6.vrrpv3e_group.virtual_ip', 'pybind.nos.v7_1_0.brocade_interface', 'pybind.nos.v7_1_0')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'vrid', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'vrid', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'vrid', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'virtual_ip', 'keyval': 'virtual_ipaddr', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, gigabitethernet=gigabitethernet, vrrpv3e_group=vrrpv3e_group, virtual_ip=virtual_ip)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def interface_gigabitethernet_ipv6_vrrp_group_delete(self, gigabitethernet=None, vrrpv3_group=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		NOS: 6.0.2b, 7.0.1a, 7.1.0    

	**Parent Instance Keyword Arg Tuple(s)**:
		:param gigabitethernet: kwarg tuple.
		:type gigabitethernet: (name).

		:param name: tuple arg.
		:type name: (unicode)
		
		.. note::
			* length - [u'3..16']
			* pattern - ((([1-9]|[1-9][0-9]|1[0-9][0-9]|2[0-3][0-9])/)?(([0-9]|[1][0-6]))/([1-9]|[1-9][0-9]|[1-9][0-9][0-9])(:[1-4])?)

	**This Instance Keyword Arg Tuple**:
		:param vrrpv3_group: kwarg tuple.
		:type vrrpv3_group: (vrid).

		:param vrid: tuple arg.
		:type vrid: (int)
		
		.. note::
			* range - ['0..255']

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = [('pybind.nos.v6_0_2b.interface.gigabitethernet', u'gigabitethernet'), ('pybind.nos.v7_1_0.interface.gigabitethernet', u'gigabitethernet'), ('pybind.nos.v7_0_1a.interface.gigabitethernet', u'gigabitethernet')]
    bindings_list = [('pybind.nos.v6_0_2b.interface.gigabitethernet.ipv6.vrrpv3_group', 'pybind.nos.v6_0_2b.brocade_interface', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.interface.gigabitethernet.ipv6.vrrpv3_group', 'pybind.nos.v7_0_1a.brocade_interface', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.interface.gigabitethernet.ipv6.vrrpv3_group', 'pybind.nos.v7_1_0.brocade_interface', 'pybind.nos.v7_1_0')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'vrrpv3_group', 'keyval': 'vrid', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, gigabitethernet=gigabitethernet, vrrpv3_group=vrrpv3_group)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def interface_gigabitethernet_ipv6_vrrp_group_track_delete(self, gigabitethernet=None, vrrpv3_group=None, interface=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		NOS: 6.0.2b, 7.0.1a, 7.1.0    

	**Parent Instance Keyword Arg Tuple(s)**:
		:param gigabitethernet: kwarg tuple.
		:type gigabitethernet: (name).

		:param name: tuple arg.
		:type name: (unicode)
		
		.. note::
			* length - [u'3..16']
			* pattern - ((([1-9]|[1-9][0-9]|1[0-9][0-9]|2[0-3][0-9])/)?(([0-9]|[1][0-6]))/([1-9]|[1-9][0-9]|[1-9][0-9][0-9])(:[1-4])?)

		:param vrrpv3_group: kwarg tuple.
		:type vrrpv3_group: (vrid).

		:param vrid: tuple arg.
		:type vrid: (int)
		
		.. note::
			* range - ['0..255']

	**This Instance Keyword Arg Tuple**:
		:param interface: kwarg tuple.
		:type interface: (interface_type, interface_name).

		:param interface_type: tuple arg.
		:type interface_type: (unicode)
		
		.. note::
			* enum - [u'fortygigabitethernet', u'gigabitethernet', u'tengigabitethernet', u'hundredgigabitethernet', u'port-channel']

		:param interface_name: tuple arg.
		:type interface_name: (unicode)
		
		.. note::
			* length - [u'3..16']
			* pattern - ((([1-9]|[1-9][0-9]|1[0-9][0-9]|2[0-3][0-9])/)?(([0-9]|[1][0-6]))/([1-9]|[1-9][0-9]|[1-9][0-9][0-9])(:[1-4])?)

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = [('pybind.nos.v7_1_0.interface.gigabitethernet', u'gigabitethernet'), ('pybind.nos.v7_1_0.interface.gigabitethernet.ipv6.vrrpv3_group', u'vrrpv3_group'), ('pybind.nos.v7_0_1a.interface.gigabitethernet', u'gigabitethernet'), ('pybind.nos.v7_0_1a.interface.gigabitethernet.ipv6.vrrpv3_group', u'vrrpv3_group'), ('pybind.nos.v6_0_2b.interface.gigabitethernet', u'gigabitethernet'), ('pybind.nos.v6_0_2b.interface.gigabitethernet.ipv6.vrrpv3_group', u'vrrpv3_group')]
    bindings_list = [('pybind.nos.v6_0_2b.interface.gigabitethernet.ipv6.vrrpv3_group.track.interface', 'pybind.nos.v6_0_2b.brocade_interface', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.interface.gigabitethernet.ipv6.vrrpv3_group.track.interface', 'pybind.nos.v7_0_1a.brocade_interface', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.interface.gigabitethernet.ipv6.vrrpv3_group.track.interface', 'pybind.nos.v7_1_0.brocade_interface', 'pybind.nos.v7_1_0')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'vrid', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'vrid', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'vrid', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'interface', 'keyval': 'interface_type, interface_name', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, gigabitethernet=gigabitethernet, vrrpv3_group=vrrpv3_group, interface=interface)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def interface_gigabitethernet_ipv6_vrrp_group_virtual_ip_delete(self, gigabitethernet=None, vrrpv3_group=None, virtual_ip=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		NOS: 6.0.2b, 7.0.1a, 7.1.0    

	**Parent Instance Keyword Arg Tuple(s)**:
		:param gigabitethernet: kwarg tuple.
		:type gigabitethernet: (name).

		:param name: tuple arg.
		:type name: (unicode)
		
		.. note::
			* length - [u'3..16']
			* pattern - ((([1-9]|[1-9][0-9]|1[0-9][0-9]|2[0-3][0-9])/)?(([0-9]|[1][0-6]))/([1-9]|[1-9][0-9]|[1-9][0-9][0-9])(:[1-4])?)

		:param vrrpv3_group: kwarg tuple.
		:type vrrpv3_group: (vrid).

		:param vrid: tuple arg.
		:type vrid: (int)
		
		.. note::
			* range - ['0..255']

	**This Instance Keyword Arg Tuple**:
		:param virtual_ip: kwarg tuple.
		:type virtual_ip: (virtual_ipaddr).

		:param virtual_ipaddr: Virtual IPv6 address
		:type virtual_ipaddr: (unicode)
		
		.. note::
			* pattern - ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = [('pybind.nos.v7_1_0.interface.gigabitethernet', u'gigabitethernet'), ('pybind.nos.v7_1_0.interface.gigabitethernet.ipv6.vrrpv3_group', u'vrrpv3_group'), ('pybind.nos.v7_0_1a.interface.gigabitethernet', u'gigabitethernet'), ('pybind.nos.v7_0_1a.interface.gigabitethernet.ipv6.vrrpv3_group', u'vrrpv3_group'), ('pybind.nos.v6_0_2b.interface.gigabitethernet', u'gigabitethernet'), ('pybind.nos.v6_0_2b.interface.gigabitethernet.ipv6.vrrpv3_group', u'vrrpv3_group')]
    bindings_list = [('pybind.nos.v6_0_2b.interface.gigabitethernet.ipv6.vrrpv3_group.virtual_ip', 'pybind.nos.v6_0_2b.brocade_interface', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.interface.gigabitethernet.ipv6.vrrpv3_group.virtual_ip', 'pybind.nos.v7_0_1a.brocade_interface', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.interface.gigabitethernet.ipv6.vrrpv3_group.virtual_ip', 'pybind.nos.v7_1_0.brocade_interface', 'pybind.nos.v7_1_0')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'vrid', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'vrid', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'vrid', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'virtual_ip', 'keyval': 'virtual_ipaddr', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, gigabitethernet=gigabitethernet, vrrpv3_group=vrrpv3_group, virtual_ip=virtual_ip)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def interface_gigabitethernet_mac_access_group_delete(self, gigabitethernet=None, access_group=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		NOS: 6.0.2b, 7.0.1a, 7.1.0    

	**Parent Instance Keyword Arg Tuple(s)**:
		:param gigabitethernet: kwarg tuple.
		:type gigabitethernet: (name).

		:param name: tuple arg.
		:type name: (unicode)
		
		.. note::
			* length - [u'3..16']
			* pattern - ((([1-9]|[1-9][0-9]|1[0-9][0-9]|2[0-3][0-9])/)?(([0-9]|[1][0-6]))/([1-9]|[1-9][0-9]|[1-9][0-9][0-9])(:[1-4])?)

	**This Instance Keyword Arg Tuple**:
		:param access_group: kwarg tuple.
		:type access_group: (mac_access_list, mac_direction, traffic_type).

		:param mac_access_list: ACL_NAME;; Access List Name (Max 63)
		:type mac_access_list: (unicode)
		
		.. note::
			* length - [u'1..63']
			* pattern - [a-zA-Z0-9]{1}([-a-zA-Z0-9_]{0,62})

		:param mac_direction: tuple arg.
		:type mac_direction: (unicode)
		
		.. note::
			* enum - [u'in', u'out']

		:param traffic_type: tuple arg.
		:type traffic_type: (unicode)
		
		.. note::
			* enum - [u'switched', u'routed']

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = [('pybind.nos.v6_0_2b.interface.gigabitethernet', u'gigabitethernet'), ('pybind.nos.v7_1_0.interface.gigabitethernet', u'gigabitethernet'), ('pybind.nos.v7_0_1a.interface.gigabitethernet', u'gigabitethernet')]
    bindings_list = [('pybind.nos.v6_0_2b.interface.gigabitethernet.mac.access_group', 'pybind.nos.v6_0_2b.brocade_interface', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.interface.gigabitethernet.mac.access_group', 'pybind.nos.v7_0_1a.brocade_interface', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.interface.gigabitethernet.mac.access_group', 'pybind.nos.v7_1_0.brocade_interface', 'pybind.nos.v7_1_0')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'access_group', 'keyval': 'mac_access_list, mac_direction', 'extra_keyval': 'mac_access_list, mac_direction, traffic_type'}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, gigabitethernet=gigabitethernet, access_group=access_group)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def interface_gigabitethernet_port_profile_port_profile_delete(self, gigabitethernet=None, port_to_port_profile_associations=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		NOS: 6.0.2b, 7.0.1a, 7.1.0    

	**Parent Instance Keyword Arg Tuple(s)**:
		:param gigabitethernet: kwarg tuple.
		:type gigabitethernet: (name).

		:param name: tuple arg.
		:type name: (unicode)
		
		.. note::
			* length - [u'3..16']
			* pattern - ((([1-9]|[1-9][0-9]|1[0-9][0-9]|2[0-3][0-9])/)?(([0-9]|[1][0-6]))/([1-9]|[1-9][0-9]|[1-9][0-9][0-9])(:[1-4])?)

	**This Instance Keyword Arg Tuple**:
		:param port_to_port_profile_associations: kwarg tuple.
		:type port_to_port_profile_associations: (port_to_port_profile_association).

		:param port_to_port_profile_association: Port-profile name (Max Size - 128)
		:type port_to_port_profile_association: (unicode)
		
		.. note::
			* pattern - [a-zA-Z]{1}([-a-zA-Z0-9\.\\\\@#\+\*\(\)=\{~\}%<>=$_\[\]\|]{0,127})

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = [('pybind.nos.v7_0_1a.interface.gigabitethernet', u'gigabitethernet'), ('pybind.nos.v6_0_2b.interface.gigabitethernet', u'gigabitethernet'), ('pybind.nos.v7_1_0.interface.gigabitethernet', u'gigabitethernet')]
    bindings_list = [('pybind.nos.v6_0_2b.interface.gigabitethernet.port_profile_to_interface_associations.port_profile_port.port_to_port_profile_associations', 'pybind.nos.v6_0_2b.brocade_interface', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.interface.gigabitethernet.port_profile_to_interface_associations.port_profile_port.port_to_port_profile_associations', 'pybind.nos.v7_0_1a.brocade_interface', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.interface.gigabitethernet.port_profile_to_interface_associations.port_profile_port.port_to_port_profile_associations', 'pybind.nos.v7_1_0.brocade_interface', 'pybind.nos.v7_1_0')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'port_to_port_profile_associations', 'keyval': 'port_to_port_profile_association', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, gigabitethernet=gigabitethernet, port_to_port_profile_associations=port_to_port_profile_associations)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def interface_gigabitethernet_qos_random_detect_traffic_class_delete(self, gigabitethernet=None, traffic_class=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		NOS: 6.0.2b, 7.0.1a, 7.1.0    

	**Parent Instance Keyword Arg Tuple(s)**:
		:param gigabitethernet: kwarg tuple.
		:type gigabitethernet: (name).

		:param name: tuple arg.
		:type name: (unicode)
		
		.. note::
			* length - [u'3..16']
			* pattern - ((([1-9]|[1-9][0-9]|1[0-9][0-9]|2[0-3][0-9])/)?(([0-9]|[1][0-6]))/([1-9]|[1-9][0-9]|[1-9][0-9][0-9])(:[1-4])?)

	**This Instance Keyword Arg Tuple**:
		:param traffic_class: kwarg tuple.
		:type traffic_class: (red_tc_value).

		:param red_tc_value: tuple arg.
		:type red_tc_value: (long)
		
		.. note::
			* range - ['0..4294967295']

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = [('pybind.nos.v6_0_2b.interface.gigabitethernet', u'gigabitethernet'), ('pybind.nos.v7_0_1a.interface.gigabitethernet', u'gigabitethernet'), ('pybind.nos.v7_1_0.interface.gigabitethernet', u'gigabitethernet')]
    bindings_list = [('pybind.nos.v6_0_2b.interface.gigabitethernet.qos.random_detect.traffic_class', 'pybind.nos.v6_0_2b.brocade_interface', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.interface.gigabitethernet.qos.random_detect.traffic_class', 'pybind.nos.v7_0_1a.brocade_interface', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.interface.gigabitethernet.qos.random_detect.traffic_class', 'pybind.nos.v7_1_0.brocade_interface', 'pybind.nos.v7_1_0')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'traffic_class', 'keyval': 'red_tc_value', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, gigabitethernet=gigabitethernet, traffic_class=traffic_class)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def interface_gigabitethernet_rmon_collection_history_delete(self, gigabitethernet=None, history_control_entry=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		NOS: 6.0.2b, 7.0.1a, 7.1.0    

	**Parent Instance Keyword Arg Tuple(s)**:
		:param gigabitethernet: kwarg tuple.
		:type gigabitethernet: (name).

		:param name: tuple arg.
		:type name: (unicode)
		
		.. note::
			* length - [u'3..16']
			* pattern - ((([1-9]|[1-9][0-9]|1[0-9][0-9]|2[0-3][0-9])/)?(([0-9]|[1][0-6]))/([1-9]|[1-9][0-9]|[1-9][0-9][0-9])(:[1-4])?)

	**This Instance Keyword Arg Tuple**:
		:param history_control_entry: kwarg tuple.
		:type history_control_entry: (history_control_index, history_control_buckets_requested, history_control_interval, history_control_owner).

		:param history_control_index: tuple arg.
		:type history_control_index: (long)
		
		.. note::
			* range - ['-2147483648..2147483647']

		:param history_control_buckets_requested: Buckets (default 50)
		:type history_control_buckets_requested: (long)
		
		.. note::
			* range - ['-2147483648..2147483647']

		:param history_control_interval: Polling Interval (default 1800)
		:type history_control_interval: (long)
		
		.. note::
			* range - ['-2147483648..2147483647']

		:param history_control_owner: Owner identity
		:type history_control_owner: (unicode)
		
		.. note::
			* length - [u'1 .. 15']
			* pattern - [a-zA-Z]{1}([-a-zA-Z0-9\.\\\\@#\+\*\(\)=\{~\}%<>=$_\[\]\|]{0,14})

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = [('pybind.nos.v7_1_0.interface.gigabitethernet', u'gigabitethernet'), ('pybind.nos.v7_0_1a.interface.gigabitethernet', u'gigabitethernet'), ('pybind.nos.v6_0_2b.interface.gigabitethernet', u'gigabitethernet')]
    bindings_list = [('pybind.nos.v6_0_2b.interface.gigabitethernet.rmon.collection.history_control_entry', 'pybind.nos.v6_0_2b.brocade_interface', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.interface.gigabitethernet.rmon.collection.history_control_entry', 'pybind.nos.v7_0_1a.brocade_interface', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.interface.gigabitethernet.rmon.collection.history_control_entry', 'pybind.nos.v7_1_0.brocade_interface', 'pybind.nos.v7_1_0')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'history_control_entry', 'keyval': 'history_control_index', 'extra_keyval': 'history_control_index, history_control_buckets_requested, history_control_interval, history_control_owner'}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, gigabitethernet=gigabitethernet, history_control_entry=history_control_entry)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def interface_gigabitethernet_rmon_collection_stats_delete(self, gigabitethernet=None, ether_stats_entry=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		NOS: 6.0.2b, 7.0.1a, 7.1.0    

	**Parent Instance Keyword Arg Tuple(s)**:
		:param gigabitethernet: kwarg tuple.
		:type gigabitethernet: (name).

		:param name: tuple arg.
		:type name: (unicode)
		
		.. note::
			* length - [u'3..16']
			* pattern - ((([1-9]|[1-9][0-9]|1[0-9][0-9]|2[0-3][0-9])/)?(([0-9]|[1][0-6]))/([1-9]|[1-9][0-9]|[1-9][0-9][0-9])(:[1-4])?)

	**This Instance Keyword Arg Tuple**:
		:param ether_stats_entry: kwarg tuple.
		:type ether_stats_entry: (ether_stats_index, ether_stats_owner).

		:param ether_stats_index: tuple arg.
		:type ether_stats_index: (long)
		
		.. note::
			* range - ['-2147483648..2147483647']

		:param ether_stats_owner: Owner identity
		:type ether_stats_owner: (unicode)
		
		.. note::
			* length - [u'1 .. 15']
			* pattern - [a-zA-Z]{1}([-a-zA-Z0-9\.\\\\@#\+\*\(\)=\{~\}%<>=$_\[\]\|]{0,14})

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = [('pybind.nos.v7_0_1a.interface.gigabitethernet', u'gigabitethernet'), ('pybind.nos.v6_0_2b.interface.gigabitethernet', u'gigabitethernet'), ('pybind.nos.v7_1_0.interface.gigabitethernet', u'gigabitethernet')]
    bindings_list = [('pybind.nos.v6_0_2b.interface.gigabitethernet.rmon.collection.ether_stats_entry', 'pybind.nos.v6_0_2b.brocade_interface', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.interface.gigabitethernet.rmon.collection.ether_stats_entry', 'pybind.nos.v7_0_1a.brocade_interface', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.interface.gigabitethernet.rmon.collection.ether_stats_entry', 'pybind.nos.v7_1_0.brocade_interface', 'pybind.nos.v7_1_0')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'ether_stats_entry', 'keyval': 'ether_stats_index', 'extra_keyval': 'ether_stats_index, ether_stats_owner'}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, gigabitethernet=gigabitethernet, ether_stats_entry=ether_stats_entry)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def interface_gigabitethernet_spanning_tree_instance_delete(self, gigabitethernet=None, instance=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		NOS: 6.0.2b, 7.0.1a, 7.1.0    

	**Parent Instance Keyword Arg Tuple(s)**:
		:param gigabitethernet: kwarg tuple.
		:type gigabitethernet: (name).

		:param name: tuple arg.
		:type name: (unicode)
		
		.. note::
			* length - [u'3..16']
			* pattern - ((([1-9]|[1-9][0-9]|1[0-9][0-9]|2[0-3][0-9])/)?(([0-9]|[1][0-6]))/([1-9]|[1-9][0-9]|[1-9][0-9][0-9])(:[1-4])?)

	**This Instance Keyword Arg Tuple**:
		:param instance: kwarg tuple.
		:type instance: (id).

		:param id: tuple arg.
		:type id: (int)
		
		.. note::
			* range - ['0..255']

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = [('pybind.nos.v7_0_1a.interface.gigabitethernet', u'gigabitethernet'), ('pybind.nos.v7_1_0.interface.gigabitethernet', u'gigabitethernet'), ('pybind.nos.v6_0_2b.interface.gigabitethernet', u'gigabitethernet')]
    bindings_list = [('pybind.nos.v6_0_2b.interface.gigabitethernet.spanning_tree.instance', 'pybind.nos.v6_0_2b.brocade_interface', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.interface.gigabitethernet.spanning_tree.instance', 'pybind.nos.v7_0_1a.brocade_interface', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.interface.gigabitethernet.spanning_tree.instance', 'pybind.nos.v7_1_0.brocade_interface', 'pybind.nos.v7_1_0')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'instance', 'keyval': 'id', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, gigabitethernet=gigabitethernet, instance=instance)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def interface_gigabitethernet_spanning_tree_vlan_delete(self, gigabitethernet=None, vlan=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		NOS: 6.0.2b, 7.0.1a, 7.1.0    

	**Parent Instance Keyword Arg Tuple(s)**:
		:param gigabitethernet: kwarg tuple.
		:type gigabitethernet: (name).

		:param name: tuple arg.
		:type name: (unicode)
		
		.. note::
			* length - [u'3..16']
			* pattern - ((([1-9]|[1-9][0-9]|1[0-9][0-9]|2[0-3][0-9])/)?(([0-9]|[1][0-6]))/([1-9]|[1-9][0-9]|[1-9][0-9][0-9])(:[1-4])?)

	**This Instance Keyword Arg Tuple**:
		:param vlan: kwarg tuple.
		:type vlan: (id).

		:param id: tuple arg.
		:type id: (long)
		
		.. note::
			* range - ['0..4294967295']

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = [('pybind.nos.v7_0_1a.interface.gigabitethernet', u'gigabitethernet'), ('pybind.nos.v7_1_0.interface.gigabitethernet', u'gigabitethernet'), ('pybind.nos.v6_0_2b.interface.gigabitethernet', u'gigabitethernet')]
    bindings_list = [('pybind.nos.v6_0_2b.interface.gigabitethernet.spanning_tree.vlan', 'pybind.nos.v6_0_2b.brocade_interface', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.interface.gigabitethernet.spanning_tree.vlan', 'pybind.nos.v7_0_1a.brocade_interface', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.interface.gigabitethernet.spanning_tree.vlan', 'pybind.nos.v7_1_0.brocade_interface', 'pybind.nos.v7_1_0')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'vlan', 'keyval': 'id', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, gigabitethernet=gigabitethernet, vlan=vlan)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def interface_gigabitethernet_storm_control_ingress_delete(self, gigabitethernet=None, ingress=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		NOS: 6.0.2b, 7.0.1a, 7.1.0    

	**Parent Instance Keyword Arg Tuple(s)**:
		:param gigabitethernet: kwarg tuple.
		:type gigabitethernet: (name).

		:param name: tuple arg.
		:type name: (unicode)
		
		.. note::
			* length - [u'3..16']
			* pattern - ((([1-9]|[1-9][0-9]|1[0-9][0-9]|2[0-3][0-9])/)?(([0-9]|[1][0-6]))/([1-9]|[1-9][0-9]|[1-9][0-9][0-9])(:[1-4])?)

	**This Instance Keyword Arg Tuple**:
		:param ingress: kwarg tuple.
		:type ingress: (protocol_type, rate_format, rate_bps, rate_percent, bum_action).

		:param protocol_type: tuple arg.
		:type protocol_type: (unicode)
		
		.. note::
			* enum - [u'broadcast', u'unknown-unicast', u'multicast']

		:param rate_format: tuple arg.
		:type rate_format: (unicode)
		
		.. note::
			* enum - [u'limit-bps', u'limit-percent']

		:param rate_bps: tuple arg.
		:type rate_bps: (long)
		
		.. note::
			* range - ['0..18446744073709551615']

		:param rate_percent: tuple arg.
		:type rate_percent: (long)
		
		.. note::
			* range - ['0..4294967295']

		:param bum_action: tuple arg.
		:type bum_action: (unicode)
		
		.. note::
			* enum - [u'monitor', u'shutdown']

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = [('pybind.nos.v7_0_1a.interface.gigabitethernet', u'gigabitethernet'), ('pybind.nos.v7_1_0.interface.gigabitethernet', u'gigabitethernet'), ('pybind.nos.v6_0_2b.interface.gigabitethernet', u'gigabitethernet')]
    bindings_list = [('pybind.nos.v6_0_2b.interface.gigabitethernet.storm_control.ingress', 'pybind.nos.v6_0_2b.brocade_interface', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.interface.gigabitethernet.storm_control.ingress', 'pybind.nos.v7_0_1a.brocade_interface', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.interface.gigabitethernet.storm_control.ingress', 'pybind.nos.v7_1_0.brocade_interface', 'pybind.nos.v7_1_0')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'ingress', 'keyval': 'protocol_type', 'extra_keyval': 'protocol_type, rate_format, rate_bps, rate_percent, bum_action'}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, gigabitethernet=gigabitethernet, ingress=ingress)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def interface_gigabitethernet_switchport_access_rspan_vlan_delete(self, gigabitethernet=None, vlan=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		NOS: 6.0.2b, 7.0.1a, 7.1.0    

	**Parent Instance Keyword Arg Tuple(s)**:
		:param gigabitethernet: kwarg tuple.
		:type gigabitethernet: (name).

		:param name: tuple arg.
		:type name: (unicode)
		
		.. note::
			* length - [u'3..16']
			* pattern - ((([1-9]|[1-9][0-9]|1[0-9][0-9]|2[0-3][0-9])/)?(([0-9]|[1][0-6]))/([1-9]|[1-9][0-9]|[1-9][0-9][0-9])(:[1-4])?)

	**This Instance Keyword Arg Tuple**:
		:param vlan: kwarg tuple.
		:type vlan: (access_vlan_id, access_mac_group).

		:param access_vlan_id: Set the default VLAN for the interface
		:type access_vlan_id: (long)
		
		.. note::
			* range - ['0..4294967295']

		:param access_mac_group: Associate a Mac group with a vlan
		:type access_mac_group: (long)
		
		.. note::
			* range - ['0..4294967295']

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = [('pybind.nos.v7_0_1a.interface.gigabitethernet', u'gigabitethernet'), ('pybind.nos.v7_1_0.interface.gigabitethernet', u'gigabitethernet'), ('pybind.nos.v6_0_2b.interface.gigabitethernet', u'gigabitethernet'), ('pybind.nos.v6_0_2b.interface.gigabitethernet', u'gigabitethernet'), ('pybind.nos.v7_0_1a.interface.gigabitethernet', u'gigabitethernet'), ('pybind.nos.v7_1_0.interface.gigabitethernet', u'gigabitethernet')]
    bindings_list = [('pybind.nos.v6_0_2b.interface.gigabitethernet.switchport.access_mac_group_rspan_vlan_classification.access.vlan', 'pybind.nos.v6_0_2b.brocade_interface', 'pybind.nos.v6_0_2b'), ('pybind.nos.v6_0_2b.interface.gigabitethernet.switchport.access_mac_rspan_vlan_classification.access.vlan', 'pybind.nos.v6_0_2b.brocade_interface', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.interface.gigabitethernet.switchport.access_mac_group_rspan_vlan_classification.access.vlan', 'pybind.nos.v7_0_1a.brocade_interface', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_0_1a.interface.gigabitethernet.switchport.access_mac_rspan_vlan_classification.access.vlan', 'pybind.nos.v7_0_1a.brocade_interface', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.interface.gigabitethernet.switchport.access_mac_group_rspan_vlan_classification.access.vlan', 'pybind.nos.v7_1_0.brocade_interface', 'pybind.nos.v7_1_0'), ('pybind.nos.v7_1_0.interface.gigabitethernet.switchport.access_mac_rspan_vlan_classification.access.vlan', 'pybind.nos.v7_1_0.brocade_interface', 'pybind.nos.v7_1_0')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'vlan', 'keyval': 'access_vlan_id, access_mac_group', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, gigabitethernet=gigabitethernet, vlan=vlan)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def interface_gigabitethernet_switchport_access_vlan_delete(self, gigabitethernet=None, vlan=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		NOS: 6.0.2b, 7.0.1a, 7.1.0    

	**Parent Instance Keyword Arg Tuple(s)**:
		:param gigabitethernet: kwarg tuple.
		:type gigabitethernet: (name).

		:param name: tuple arg.
		:type name: (unicode)
		
		.. note::
			* length - [u'3..16']
			* pattern - ((([1-9]|[1-9][0-9]|1[0-9][0-9]|2[0-3][0-9])/)?(([0-9]|[1][0-6]))/([1-9]|[1-9][0-9]|[1-9][0-9][0-9])(:[1-4])?)

	**This Instance Keyword Arg Tuple**:
		:param vlan: kwarg tuple.
		:type vlan: (access_vlan_id, access_mac_group).

		:param access_vlan_id: Set the default VLAN for the interface
		:type access_vlan_id: (long)
		
		.. note::
			* range - ['0..4294967295']

		:param access_mac_group: Associate a Mac group with a vlan
		:type access_mac_group: (long)
		
		.. note::
			* range - ['0..4294967295']

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = [('pybind.nos.v7_1_0.interface.gigabitethernet', u'gigabitethernet'), ('pybind.nos.v7_1_0.interface.gigabitethernet', u'gigabitethernet'), ('pybind.nos.v7_0_1a.interface.gigabitethernet', u'gigabitethernet'), ('pybind.nos.v7_0_1a.interface.gigabitethernet', u'gigabitethernet'), ('pybind.nos.v6_0_2b.interface.gigabitethernet', u'gigabitethernet'), ('pybind.nos.v6_0_2b.interface.gigabitethernet', u'gigabitethernet')]
    bindings_list = [('pybind.nos.v6_0_2b.interface.gigabitethernet.switchport.access_mac_group_vlan_classification.access.vlan', 'pybind.nos.v6_0_2b.brocade_interface', 'pybind.nos.v6_0_2b'), ('pybind.nos.v6_0_2b.interface.gigabitethernet.switchport.access_mac_vlan_classification.access.vlan', 'pybind.nos.v6_0_2b.brocade_interface', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.interface.gigabitethernet.switchport.access_mac_group_vlan_classification.access.vlan', 'pybind.nos.v7_0_1a.brocade_interface', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_0_1a.interface.gigabitethernet.switchport.access_mac_vlan_classification.access.vlan', 'pybind.nos.v7_0_1a.brocade_interface', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.interface.gigabitethernet.switchport.access_mac_group_vlan_classification.access.vlan', 'pybind.nos.v7_1_0.brocade_interface', 'pybind.nos.v7_1_0'), ('pybind.nos.v7_1_0.interface.gigabitethernet.switchport.access_mac_vlan_classification.access.vlan', 'pybind.nos.v7_1_0.brocade_interface', 'pybind.nos.v7_1_0')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'vlan', 'keyval': 'access_vlan_id, access_mac_group', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, gigabitethernet=gigabitethernet, vlan=vlan)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def interface_gigabitethernet_switchport_port_security_delete(self, gigabitethernet=None, allowed_ouis=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		NOS: 6.0.2b, 7.0.1a, 7.1.0    

	**Parent Instance Keyword Arg Tuple(s)**:
		:param gigabitethernet: kwarg tuple.
		:type gigabitethernet: (name).

		:param name: tuple arg.
		:type name: (unicode)
		
		.. note::
			* length - [u'3..16']
			* pattern - ((([1-9]|[1-9][0-9]|1[0-9][0-9]|2[0-3][0-9])/)?(([0-9]|[1][0-6]))/([1-9]|[1-9][0-9]|[1-9][0-9][0-9])(:[1-4])?)

	**This Instance Keyword Arg Tuple**:
		:param allowed_ouis: kwarg tuple.
		:type allowed_ouis: (oui).

		:param oui: <OUI> OUI in HHHH.HH00.0000 format
		:type oui: (unicode)
		
		.. note::
			* pattern - [0-9a-fA-F]{4}\.[0-9a-fA-F]{2}00\.0000

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = [('pybind.nos.v7_0_1a.interface.gigabitethernet', u'gigabitethernet'), ('pybind.nos.v7_1_0.interface.gigabitethernet', u'gigabitethernet'), ('pybind.nos.v7_1_0.interface.gigabitethernet', u'gigabitethernet'), ('pybind.nos.v6_0_2b.interface.gigabitethernet', u'gigabitethernet'), ('pybind.nos.v7_0_1a.interface.gigabitethernet', u'gigabitethernet'), ('pybind.nos.v6_0_2b.interface.gigabitethernet', u'gigabitethernet')]
    bindings_list = [('pybind.nos.v6_0_2b.interface.gigabitethernet.switchport.port_security.allowed_ouis', 'pybind.nos.v6_0_2b.brocade_interface', 'pybind.nos.v6_0_2b'), ('pybind.nos.v6_0_2b.interface.gigabitethernet.switchport.port_security.port_secutiry_mac_address', 'pybind.nos.v6_0_2b.brocade_interface', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.interface.gigabitethernet.switchport.port_security.allowed_ouis', 'pybind.nos.v7_0_1a.brocade_interface', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_0_1a.interface.gigabitethernet.switchport.port_security.port_secutiry_mac_address', 'pybind.nos.v7_0_1a.brocade_interface', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.interface.gigabitethernet.switchport.port_security.allowed_ouis', 'pybind.nos.v7_1_0.brocade_interface', 'pybind.nos.v7_1_0'), ('pybind.nos.v7_1_0.interface.gigabitethernet.switchport.port_security.port_secutiry_mac_address', 'pybind.nos.v7_1_0.brocade_interface', 'pybind.nos.v7_1_0')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'allowed_ouis', 'keyval': 'oui', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, gigabitethernet=gigabitethernet, allowed_ouis=allowed_ouis)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def interface_gigabitethernet_switchport_port_security_sticky_delete(self, gigabitethernet=None, port_secutiry_mac_address=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		NOS: 6.0.2b, 7.0.1a, 7.1.0    

	**Parent Instance Keyword Arg Tuple(s)**:
		:param gigabitethernet: kwarg tuple.
		:type gigabitethernet: (name).

		:param name: tuple arg.
		:type name: (unicode)
		
		.. note::
			* length - [u'3..16']
			* pattern - ((([1-9]|[1-9][0-9]|1[0-9][0-9]|2[0-3][0-9])/)?(([0-9]|[1][0-6]))/([1-9]|[1-9][0-9]|[1-9][0-9][0-9])(:[1-4])?)

	**This Instance Keyword Arg Tuple**:
		:param port_secutiry_mac_address: kwarg tuple.
		:type port_secutiry_mac_address: (mac_address, port_sec_vlan).

		:param mac_address: Mac Address
		:type mac_address: (unicode)

		:param port_sec_vlan: Forwarding vlan
		:type port_sec_vlan: (long)
		
		.. note::
			* range - ['0..4294967295']

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = [('pybind.nos.v6_0_2b.interface.gigabitethernet', u'gigabitethernet'), ('pybind.nos.v7_0_1a.interface.gigabitethernet', u'gigabitethernet'), ('pybind.nos.v7_1_0.interface.gigabitethernet', u'gigabitethernet')]
    bindings_list = [('pybind.nos.v6_0_2b.interface.gigabitethernet.switchport.port_security.sticky.port_secutiry_mac_address', 'pybind.nos.v6_0_2b.brocade_interface', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.interface.gigabitethernet.switchport.port_security.sticky.port_secutiry_mac_address', 'pybind.nos.v7_0_1a.brocade_interface', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.interface.gigabitethernet.switchport.port_security.sticky.port_secutiry_mac_address', 'pybind.nos.v7_1_0.brocade_interface', 'pybind.nos.v7_1_0')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'port_secutiry_mac_address', 'keyval': 'mac_address, port_sec_vlan', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, gigabitethernet=gigabitethernet, port_secutiry_mac_address=port_secutiry_mac_address)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def interface_gigabitethernet_switchport_private_vlan_association_trunk_delete(self, gigabitethernet=None, trunk=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		NOS: 6.0.2b, 7.0.1a, 7.1.0    

	**Parent Instance Keyword Arg Tuple(s)**:
		:param gigabitethernet: kwarg tuple.
		:type gigabitethernet: (name).

		:param name: tuple arg.
		:type name: (unicode)
		
		.. note::
			* length - [u'3..16']
			* pattern - ((([1-9]|[1-9][0-9]|1[0-9][0-9]|2[0-3][0-9])/)?(([0-9]|[1][0-6]))/([1-9]|[1-9][0-9]|[1-9][0-9][0-9])(:[1-4])?)

	**This Instance Keyword Arg Tuple**:
		:param trunk: kwarg tuple.
		:type trunk: (trunk_pri_pvlan, trunk_sec_pvlan).

		:param trunk_pri_pvlan: Primary vlan id
		:type trunk_pri_pvlan: (long)
		
		.. note::
			* range - ['0..4294967295']

		:param trunk_sec_pvlan: Secondary vlan id 
		:type trunk_sec_pvlan: (long)
		
		.. note::
			* range - ['0..4294967295']

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = [('pybind.nos.v6_0_2b.interface.gigabitethernet', u'gigabitethernet'), ('pybind.nos.v7_0_1a.interface.gigabitethernet', u'gigabitethernet'), ('pybind.nos.v7_1_0.interface.gigabitethernet', u'gigabitethernet')]
    bindings_list = [('pybind.nos.v6_0_2b.interface.gigabitethernet.switchport.private_vlan.association.trunk', 'pybind.nos.v6_0_2b.brocade_interface', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.interface.gigabitethernet.switchport.private_vlan.association.trunk', 'pybind.nos.v7_0_1a.brocade_interface', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.interface.gigabitethernet.switchport.private_vlan.association.trunk', 'pybind.nos.v7_1_0.brocade_interface', 'pybind.nos.v7_1_0')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'trunk', 'keyval': 'trunk_pri_pvlan, trunk_sec_pvlan', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, gigabitethernet=gigabitethernet, trunk=trunk)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def interface_gigabitethernet_switchport_private_vlan_mapping_delete(self, gigabitethernet=None, mapping=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		NOS: 6.0.2b, 7.0.1a, 7.1.0    

	**Parent Instance Keyword Arg Tuple(s)**:
		:param gigabitethernet: kwarg tuple.
		:type gigabitethernet: (name).

		:param name: tuple arg.
		:type name: (unicode)
		
		.. note::
			* length - [u'3..16']
			* pattern - ((([1-9]|[1-9][0-9]|1[0-9][0-9]|2[0-3][0-9])/)?(([0-9]|[1][0-6]))/([1-9]|[1-9][0-9]|[1-9][0-9][0-9])(:[1-4])?)

	**This Instance Keyword Arg Tuple**:
		:param mapping: kwarg tuple.
		:type mapping: (promis_pri_pvlan, oper, promis_sec_pvlan_range).

		:param promis_pri_pvlan: Primary vlan id
		:type promis_pri_pvlan: (long)
		
		.. note::
			* range - ['0..4294967295']

		:param oper: tuple arg.
		:type oper: (unicode)
		
		.. note::
			* enum - [u'add', u'delete']

		:param promis_sec_pvlan_range: Secondary vlan range
		:type promis_sec_pvlan_range: (unicode)
		
		.. note::
			* length - [u'1..253']
			* pattern - (([1-9][0-9]{0,2})|([1-7][0-9]{3})|(80[0-9]{2})|(81[0-8][0-9])|(819[01]))(-(([2-9])|([1-9][0-9]{1,2})|([1-7][0-9]{3})|(80[0-9]{2})|(81[0-8][0-9])|(819[01])))?((,(([2-9])|([1-9][0-9]{1,2})|([1-7][0-9]{3})|(80[0-9]{2})|(81[0-8][0-9])|(819[01]))(-(([3-9])|([1-9][0-9]{1,2})|([1-7][0-9]{3})|(80[0-9]{2})|(81[0-8][0-9])|(819[01])))?)?)*

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = [('pybind.nos.v7_1_0.interface.gigabitethernet', u'gigabitethernet'), ('pybind.nos.v6_0_2b.interface.gigabitethernet', u'gigabitethernet'), ('pybind.nos.v7_0_1a.interface.gigabitethernet', u'gigabitethernet')]
    bindings_list = [('pybind.nos.v6_0_2b.interface.gigabitethernet.switchport.private_vlan.mapping', 'pybind.nos.v6_0_2b.brocade_interface', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.interface.gigabitethernet.switchport.private_vlan.mapping', 'pybind.nos.v7_0_1a.brocade_interface', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.interface.gigabitethernet.switchport.private_vlan.mapping', 'pybind.nos.v7_1_0.brocade_interface', 'pybind.nos.v7_1_0')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'mapping', 'keyval': 'promis_pri_pvlan', 'extra_keyval': 'promis_pri_pvlan, oper, promis_sec_pvlan_range'}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, gigabitethernet=gigabitethernet, mapping=mapping)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def interface_gigabitethernet_switchport_private_vlan_trunk_allowed_vlan_add_delete(self, gigabitethernet=None, add=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		NOS: 6.0.2b, 7.0.1a, 7.1.0    

	**Parent Instance Keyword Arg Tuple(s)**:
		:param gigabitethernet: kwarg tuple.
		:type gigabitethernet: (name).

		:param name: tuple arg.
		:type name: (unicode)
		
		.. note::
			* length - [u'3..16']
			* pattern - ((([1-9]|[1-9][0-9]|1[0-9][0-9]|2[0-3][0-9])/)?(([0-9]|[1][0-6]))/([1-9]|[1-9][0-9]|[1-9][0-9][0-9])(:[1-4])?)

	**This Instance Keyword Arg Tuple**:
		:param add: kwarg tuple.
		:type add: (trunk_vlan_id, trunk_ctag_id).

		:param trunk_vlan_id: tuple arg.
		:type trunk_vlan_id: (long)
		
		.. note::
			* range - ['0..4294967295']

		:param trunk_ctag_id: tuple arg.
		:type trunk_ctag_id: (long)
		
		.. note::
			* range - ['0..4294967295']

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = [('pybind.nos.v6_0_2b.interface.gigabitethernet', u'gigabitethernet'), ('pybind.nos.v7_1_0.interface.gigabitethernet', u'gigabitethernet'), ('pybind.nos.v7_0_1a.interface.gigabitethernet', u'gigabitethernet')]
    bindings_list = [('pybind.nos.v6_0_2b.interface.gigabitethernet.switchport.trunk_private_vlan_classification.private_vlan.trunk.allowed.vlan.add_', 'pybind.nos.v6_0_2b.brocade_interface', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.interface.gigabitethernet.switchport.trunk_private_vlan_classification.private_vlan.trunk.allowed.vlan.add_', 'pybind.nos.v7_0_1a.brocade_interface', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.interface.gigabitethernet.switchport.trunk_private_vlan_classification.private_vlan.trunk.allowed.vlan.add_', 'pybind.nos.v7_1_0.brocade_interface', 'pybind.nos.v7_1_0')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'add', 'keyval': 'trunk_vlan_id, trunk_ctag_id', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, gigabitethernet=gigabitethernet, add=add)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def interface_gigabitethernet_switchport_private_vlan_trunk_allowed_vlan_remove_delete(self, gigabitethernet=None, remove=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		NOS: 6.0.2b, 7.0.1a, 7.1.0    

	**Parent Instance Keyword Arg Tuple(s)**:
		:param gigabitethernet: kwarg tuple.
		:type gigabitethernet: (name).

		:param name: tuple arg.
		:type name: (unicode)
		
		.. note::
			* length - [u'3..16']
			* pattern - ((([1-9]|[1-9][0-9]|1[0-9][0-9]|2[0-3][0-9])/)?(([0-9]|[1][0-6]))/([1-9]|[1-9][0-9]|[1-9][0-9][0-9])(:[1-4])?)

	**This Instance Keyword Arg Tuple**:
		:param remove: kwarg tuple.
		:type remove: (trunk_vlan_id, trunk_ctag_id).

		:param trunk_vlan_id: tuple arg.
		:type trunk_vlan_id: (long)
		
		.. note::
			* range - ['0..4294967295']

		:param trunk_ctag_id: tuple arg.
		:type trunk_ctag_id: (long)
		
		.. note::
			* range - ['0..4294967295']

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = [('pybind.nos.v7_1_0.interface.gigabitethernet', u'gigabitethernet'), ('pybind.nos.v6_0_2b.interface.gigabitethernet', u'gigabitethernet'), ('pybind.nos.v7_0_1a.interface.gigabitethernet', u'gigabitethernet')]
    bindings_list = [('pybind.nos.v6_0_2b.interface.gigabitethernet.switchport.trunk_private_vlan_classification.private_vlan.trunk.allowed.vlan.remove_', 'pybind.nos.v6_0_2b.brocade_interface', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.interface.gigabitethernet.switchport.trunk_private_vlan_classification.private_vlan.trunk.allowed.vlan.remove_', 'pybind.nos.v7_0_1a.brocade_interface', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.interface.gigabitethernet.switchport.trunk_private_vlan_classification.private_vlan.trunk.allowed.vlan.remove_', 'pybind.nos.v7_1_0.brocade_interface', 'pybind.nos.v7_1_0')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'remove', 'keyval': 'trunk_vlan_id, trunk_ctag_id', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, gigabitethernet=gigabitethernet, remove=remove)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def interface_gigabitethernet_switchport_trunk_allowed_rspan_vlan_add_delete(self, gigabitethernet=None, add=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		NOS: 6.0.2b, 7.0.1a, 7.1.0    

	**Parent Instance Keyword Arg Tuple(s)**:
		:param gigabitethernet: kwarg tuple.
		:type gigabitethernet: (name).

		:param name: tuple arg.
		:type name: (unicode)
		
		.. note::
			* length - [u'3..16']
			* pattern - ((([1-9]|[1-9][0-9]|1[0-9][0-9]|2[0-3][0-9])/)?(([0-9]|[1][0-6]))/([1-9]|[1-9][0-9]|[1-9][0-9][0-9])(:[1-4])?)

	**This Instance Keyword Arg Tuple**:
		:param add: kwarg tuple.
		:type add: (trunk_vlan_id, trunk_ctag_id).

		:param trunk_vlan_id: tuple arg.
		:type trunk_vlan_id: (long)
		
		.. note::
			* range - ['0..4294967295']

		:param trunk_ctag_id: tuple arg.
		:type trunk_ctag_id: (long)
		
		.. note::
			* range - ['0..4294967295']

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = [('pybind.nos.v7_0_1a.interface.gigabitethernet', u'gigabitethernet'), ('pybind.nos.v6_0_2b.interface.gigabitethernet', u'gigabitethernet'), ('pybind.nos.v7_1_0.interface.gigabitethernet', u'gigabitethernet')]
    bindings_list = [('pybind.nos.v6_0_2b.interface.gigabitethernet.switchport.trunk.allowed.trunk_rspan_vlan_classification.rspan_vlan.add_', 'pybind.nos.v6_0_2b.brocade_interface', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.interface.gigabitethernet.switchport.trunk.allowed.trunk_rspan_vlan_classification.rspan_vlan.add_', 'pybind.nos.v7_0_1a.brocade_interface', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.interface.gigabitethernet.switchport.trunk.allowed.trunk_rspan_vlan_classification.rspan_vlan.add_', 'pybind.nos.v7_1_0.brocade_interface', 'pybind.nos.v7_1_0')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'add', 'keyval': 'trunk_vlan_id, trunk_ctag_id', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, gigabitethernet=gigabitethernet, add=add)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def interface_gigabitethernet_switchport_trunk_allowed_rspan_vlan_remove_delete(self, gigabitethernet=None, remove=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		NOS: 6.0.2b, 7.0.1a, 7.1.0    

	**Parent Instance Keyword Arg Tuple(s)**:
		:param gigabitethernet: kwarg tuple.
		:type gigabitethernet: (name).

		:param name: tuple arg.
		:type name: (unicode)
		
		.. note::
			* length - [u'3..16']
			* pattern - ((([1-9]|[1-9][0-9]|1[0-9][0-9]|2[0-3][0-9])/)?(([0-9]|[1][0-6]))/([1-9]|[1-9][0-9]|[1-9][0-9][0-9])(:[1-4])?)

	**This Instance Keyword Arg Tuple**:
		:param remove: kwarg tuple.
		:type remove: (trunk_vlan_id, trunk_ctag_id).

		:param trunk_vlan_id: tuple arg.
		:type trunk_vlan_id: (long)
		
		.. note::
			* range - ['0..4294967295']

		:param trunk_ctag_id: tuple arg.
		:type trunk_ctag_id: (long)
		
		.. note::
			* range - ['0..4294967295']

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = [('pybind.nos.v6_0_2b.interface.gigabitethernet', u'gigabitethernet'), ('pybind.nos.v7_0_1a.interface.gigabitethernet', u'gigabitethernet'), ('pybind.nos.v7_1_0.interface.gigabitethernet', u'gigabitethernet')]
    bindings_list = [('pybind.nos.v6_0_2b.interface.gigabitethernet.switchport.trunk.allowed.trunk_rspan_vlan_classification.rspan_vlan.remove_', 'pybind.nos.v6_0_2b.brocade_interface', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.interface.gigabitethernet.switchport.trunk.allowed.trunk_rspan_vlan_classification.rspan_vlan.remove_', 'pybind.nos.v7_0_1a.brocade_interface', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.interface.gigabitethernet.switchport.trunk.allowed.trunk_rspan_vlan_classification.rspan_vlan.remove_', 'pybind.nos.v7_1_0.brocade_interface', 'pybind.nos.v7_1_0')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'remove', 'keyval': 'trunk_vlan_id, trunk_ctag_id', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, gigabitethernet=gigabitethernet, remove=remove)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def interface_gigabitethernet_switchport_trunk_allowed_vlan_add_delete(self, gigabitethernet=None, add=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		NOS: 6.0.2b, 7.0.1a, 7.1.0    

	**Parent Instance Keyword Arg Tuple(s)**:
		:param gigabitethernet: kwarg tuple.
		:type gigabitethernet: (name).

		:param name: tuple arg.
		:type name: (unicode)
		
		.. note::
			* length - [u'3..16']
			* pattern - ((([1-9]|[1-9][0-9]|1[0-9][0-9]|2[0-3][0-9])/)?(([0-9]|[1][0-6]))/([1-9]|[1-9][0-9]|[1-9][0-9][0-9])(:[1-4])?)

	**This Instance Keyword Arg Tuple**:
		:param add: kwarg tuple.
		:type add: (trunk_vlan_id).

		:param trunk_vlan_id: tuple arg.
		:type trunk_vlan_id: (long)
		
		.. note::
			* range - ['0..4294967295']

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = [('pybind.nos.v7_0_1a.interface.gigabitethernet', u'gigabitethernet'), ('pybind.nos.v6_0_2b.interface.gigabitethernet', u'gigabitethernet'), ('pybind.nos.v7_1_0.interface.gigabitethernet', u'gigabitethernet')]
    bindings_list = [('pybind.nos.v6_0_2b.interface.gigabitethernet.switchport.trunk.trunk_vlan_classification.allowed.vlan.add_', 'pybind.nos.v6_0_2b.brocade_interface', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.interface.gigabitethernet.switchport.trunk.trunk_vlan_classification.allowed.vlan.add_', 'pybind.nos.v7_0_1a.brocade_interface', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.interface.gigabitethernet.switchport.trunk.trunk_vlan_classification.allowed.vlan.add_', 'pybind.nos.v7_1_0.brocade_interface', 'pybind.nos.v7_1_0')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'add', 'keyval': 'trunk_vlan_id', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, gigabitethernet=gigabitethernet, add=add)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def interface_gigabitethernet_switchport_trunk_allowed_vlan_remove_delete(self, gigabitethernet=None, remove=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		NOS: 6.0.2b, 7.0.1a, 7.1.0    

	**Parent Instance Keyword Arg Tuple(s)**:
		:param gigabitethernet: kwarg tuple.
		:type gigabitethernet: (name).

		:param name: tuple arg.
		:type name: (unicode)
		
		.. note::
			* length - [u'3..16']
			* pattern - ((([1-9]|[1-9][0-9]|1[0-9][0-9]|2[0-3][0-9])/)?(([0-9]|[1][0-6]))/([1-9]|[1-9][0-9]|[1-9][0-9][0-9])(:[1-4])?)

	**This Instance Keyword Arg Tuple**:
		:param remove: kwarg tuple.
		:type remove: (trunk_vlan_id).

		:param trunk_vlan_id: tuple arg.
		:type trunk_vlan_id: (long)
		
		.. note::
			* range - ['0..4294967295']

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = [('pybind.nos.v6_0_2b.interface.gigabitethernet', u'gigabitethernet'), ('pybind.nos.v7_0_1a.interface.gigabitethernet', u'gigabitethernet'), ('pybind.nos.v7_1_0.interface.gigabitethernet', u'gigabitethernet')]
    bindings_list = [('pybind.nos.v6_0_2b.interface.gigabitethernet.switchport.trunk.trunk_vlan_classification.allowed.vlan.remove_', 'pybind.nos.v6_0_2b.brocade_interface', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.interface.gigabitethernet.switchport.trunk.trunk_vlan_classification.allowed.vlan.remove_', 'pybind.nos.v7_0_1a.brocade_interface', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.interface.gigabitethernet.switchport.trunk.trunk_vlan_classification.allowed.vlan.remove_', 'pybind.nos.v7_1_0.brocade_interface', 'pybind.nos.v7_1_0')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'remove', 'keyval': 'trunk_vlan_id', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, gigabitethernet=gigabitethernet, remove=remove)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def interface_gigabitethernet_track_interface_delete(self, gigabitethernet=None, interface=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		NOS: 6.0.2b, 7.0.1a, 7.1.0    

	**Parent Instance Keyword Arg Tuple(s)**:
		:param gigabitethernet: kwarg tuple.
		:type gigabitethernet: (name).

		:param name: tuple arg.
		:type name: (unicode)
		
		.. note::
			* length - [u'3..16']
			* pattern - ((([1-9]|[1-9][0-9]|1[0-9][0-9]|2[0-3][0-9])/)?(([0-9]|[1][0-6]))/([1-9]|[1-9][0-9]|[1-9][0-9][0-9])(:[1-4])?)

	**This Instance Keyword Arg Tuple**:
		:param interface: kwarg tuple.
		:type interface: (track_interface_type, track_interface_name).

		:param track_interface_type: tuple arg.
		:type track_interface_type: (unicode)
		
		.. note::
			* enum - [u'ethernet', u'port-channel']

		:param track_interface_name: Interface name
		:type track_interface_name: (unicode)
		
		.. note::
			* pattern - (((([1-9]|[1-9][0-9]|1[0-9]{2}|2[0-3][0-9])/)?(([0-9]|1[0-6]))/([1-9]|[1-9][0-9]|[1-9][0-9][0-9])(:[1-4])?)|([1-9]|[1-9][0-9]|[1-9][0-9]{2}|[1-5][0-9]{3}|6[0-1][0-4]{2}))

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = [('pybind.nos.v7_1_0.interface.gigabitethernet', u'gigabitethernet'), ('pybind.nos.v6_0_2b.interface.gigabitethernet', u'gigabitethernet'), ('pybind.nos.v7_0_1a.interface.gigabitethernet', u'gigabitethernet')]
    bindings_list = [('pybind.nos.v6_0_2b.interface.gigabitethernet.track.interface', 'pybind.nos.v6_0_2b.brocade_interface', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.interface.gigabitethernet.track.interface', 'pybind.nos.v7_0_1a.brocade_interface', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.interface.gigabitethernet.track.interface', 'pybind.nos.v7_1_0.brocade_interface', 'pybind.nos.v7_1_0')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'interface', 'keyval': 'track_interface_type, track_interface_name', 'extra_keyval': 'track_interface_type, track_interface_name'}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, gigabitethernet=gigabitethernet, interface=interface)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def interface_gigabitethernet_vlan_classifier_activate_group_delete(self, gigabitethernet=None, group=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		NOS: 6.0.2b, 7.0.1a, 7.1.0    

	**Parent Instance Keyword Arg Tuple(s)**:
		:param gigabitethernet: kwarg tuple.
		:type gigabitethernet: (name).

		:param name: tuple arg.
		:type name: (unicode)
		
		.. note::
			* length - [u'3..16']
			* pattern - ((([1-9]|[1-9][0-9]|1[0-9][0-9]|2[0-3][0-9])/)?(([0-9]|[1][0-6]))/([1-9]|[1-9][0-9]|[1-9][0-9][0-9])(:[1-4])?)

	**This Instance Keyword Arg Tuple**:
		:param group: kwarg tuple.
		:type group: (groupid, vlan).

		:param groupid: tuple arg.
		:type groupid: (long)
		
		.. note::
			* range - ['0..4294967295']

		:param vlan: 1-8191;;Vlan
		:type vlan: (long)
		
		.. note::
			* range - ['0..4294967295']

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = [('pybind.nos.v7_1_0.interface.gigabitethernet', u'gigabitethernet'), ('pybind.nos.v6_0_2b.interface.gigabitethernet', u'gigabitethernet'), ('pybind.nos.v7_0_1a.interface.gigabitethernet', u'gigabitethernet')]
    bindings_list = [('pybind.nos.v6_0_2b.interface.gigabitethernet.vlan.classifier.activate.group', 'pybind.nos.v6_0_2b.brocade_interface', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.interface.gigabitethernet.vlan.classifier.activate.group', 'pybind.nos.v7_0_1a.brocade_interface', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.interface.gigabitethernet.vlan.classifier.activate.group', 'pybind.nos.v7_1_0.brocade_interface', 'pybind.nos.v7_1_0')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'group', 'keyval': 'groupid', 'extra_keyval': 'groupid, vlan'}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, gigabitethernet=gigabitethernet, group=group)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def interface_gigabitethernet_vrrp_group_delete(self, gigabitethernet=None, vrrp=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		NOS: 6.0.2b, 7.0.1a, 7.1.0    

	**Parent Instance Keyword Arg Tuple(s)**:
		:param gigabitethernet: kwarg tuple.
		:type gigabitethernet: (name).

		:param name: tuple arg.
		:type name: (unicode)
		
		.. note::
			* length - [u'3..16']
			* pattern - ((([1-9]|[1-9][0-9]|1[0-9][0-9]|2[0-3][0-9])/)?(([0-9]|[1][0-6]))/([1-9]|[1-9][0-9]|[1-9][0-9][0-9])(:[1-4])?)

	**This Instance Keyword Arg Tuple**:
		:param vrrp: kwarg tuple.
		:type vrrp: (vrid, version).

		:param vrid: tuple arg.
		:type vrid: (int)
		
		.. note::
			* range - ['0..255']

		:param version: Set VRRP version 2/3
		:type version: (int)
		
		.. note::
			* range - ['0..255']

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = [('pybind.nos.v7_1_0.interface.gigabitethernet', u'gigabitethernet'), ('pybind.nos.v6_0_2b.interface.gigabitethernet', u'gigabitethernet'), ('pybind.nos.v7_0_1a.interface.gigabitethernet', u'gigabitethernet')]
    bindings_list = [('pybind.nos.v6_0_2b.interface.gigabitethernet.vrrp', 'pybind.nos.v6_0_2b.brocade_interface', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.interface.gigabitethernet.vrrp', 'pybind.nos.v7_0_1a.brocade_interface', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.interface.gigabitethernet.vrrp', 'pybind.nos.v7_1_0.brocade_interface', 'pybind.nos.v7_1_0')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'vrrp', 'keyval': 'vrid, version', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, gigabitethernet=gigabitethernet, vrrp=vrrp)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def interface_gigabitethernet_vrrp_group_track_delete(self, gigabitethernet=None, vrrp=None, interface=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		NOS: 6.0.2b, 7.0.1a, 7.1.0    

	**Parent Instance Keyword Arg Tuple(s)**:
		:param gigabitethernet: kwarg tuple.
		:type gigabitethernet: (name).

		:param name: tuple arg.
		:type name: (unicode)
		
		.. note::
			* length - [u'3..16']
			* pattern - ((([1-9]|[1-9][0-9]|1[0-9][0-9]|2[0-3][0-9])/)?(([0-9]|[1][0-6]))/([1-9]|[1-9][0-9]|[1-9][0-9][0-9])(:[1-4])?)

		:param vrrp: kwarg tuple.
		:type vrrp: (vrid, version).

		:param vrid: tuple arg.
		:type vrid: (int)
		
		.. note::
			* range - ['0..255']

		:param version: Set VRRP version 2/3
		:type version: (int)
		
		.. note::
			* range - ['0..255']

	**This Instance Keyword Arg Tuple**:
		:param interface: kwarg tuple.
		:type interface: (interface_type, interface_name).

		:param interface_type: tuple arg.
		:type interface_type: (unicode)
		
		.. note::
			* enum - [u'fortygigabitethernet', u'gigabitethernet', u'tengigabitethernet', u'hundredgigabitethernet', u'port-channel']

		:param interface_name: tuple arg.
		:type interface_name: (unicode)
		
		.. note::
			* length - [u'3..16']
			* pattern - ((([1-9]|[1-9][0-9]|1[0-9][0-9]|2[0-3][0-9])/)?(([0-9]|[1][0-6]))/([1-9]|[1-9][0-9]|[1-9][0-9][0-9])(:[1-4])?)

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = [('pybind.nos.v7_0_1a.interface.gigabitethernet', u'gigabitethernet'), ('pybind.nos.v7_0_1a.interface.gigabitethernet.vrrp', u'vrrp'), ('pybind.nos.v7_1_0.interface.gigabitethernet', u'gigabitethernet'), ('pybind.nos.v7_1_0.interface.gigabitethernet.vrrp', u'vrrp'), ('pybind.nos.v6_0_2b.interface.gigabitethernet', u'gigabitethernet'), ('pybind.nos.v6_0_2b.interface.gigabitethernet.vrrp', u'vrrp')]
    bindings_list = [('pybind.nos.v6_0_2b.interface.gigabitethernet.vrrp.track.interface', 'pybind.nos.v6_0_2b.brocade_interface', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.interface.gigabitethernet.vrrp.track.interface', 'pybind.nos.v7_0_1a.brocade_interface', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.interface.gigabitethernet.vrrp.track.interface', 'pybind.nos.v7_1_0.brocade_interface', 'pybind.nos.v7_1_0')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'vrid, version', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'vrid, version', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'vrid, version', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'interface', 'keyval': 'interface_type, interface_name', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, gigabitethernet=gigabitethernet, vrrp=vrrp, interface=interface)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def interface_gigabitethernet_vrrp_group_virtual_ip_delete(self, gigabitethernet=None, vrrp=None, virtual_ip=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		NOS: 6.0.2b, 7.0.1a, 7.1.0    

	**Parent Instance Keyword Arg Tuple(s)**:
		:param gigabitethernet: kwarg tuple.
		:type gigabitethernet: (name).

		:param name: tuple arg.
		:type name: (unicode)
		
		.. note::
			* length - [u'3..16']
			* pattern - ((([1-9]|[1-9][0-9]|1[0-9][0-9]|2[0-3][0-9])/)?(([0-9]|[1][0-6]))/([1-9]|[1-9][0-9]|[1-9][0-9][0-9])(:[1-4])?)

		:param vrrp: kwarg tuple.
		:type vrrp: (vrid, version).

		:param vrid: tuple arg.
		:type vrid: (int)
		
		.. note::
			* range - ['0..255']

		:param version: Set VRRP version 2/3
		:type version: (int)
		
		.. note::
			* range - ['0..255']

	**This Instance Keyword Arg Tuple**:
		:param virtual_ip: kwarg tuple.
		:type virtual_ip: (virtual_ipaddr).

		:param virtual_ipaddr: Virtual IPv4 address in dotted decimal
		:type virtual_ipaddr: (unicode)
		
		.. note::
			* pattern - (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = [('pybind.nos.v7_0_1a.interface.gigabitethernet', u'gigabitethernet'), ('pybind.nos.v7_0_1a.interface.gigabitethernet.vrrp', u'vrrp'), ('pybind.nos.v6_0_2b.interface.gigabitethernet', u'gigabitethernet'), ('pybind.nos.v6_0_2b.interface.gigabitethernet.vrrp', u'vrrp'), ('pybind.nos.v7_1_0.interface.gigabitethernet', u'gigabitethernet'), ('pybind.nos.v7_1_0.interface.gigabitethernet.vrrp', u'vrrp')]
    bindings_list = [('pybind.nos.v6_0_2b.interface.gigabitethernet.vrrp.virtual_ip', 'pybind.nos.v6_0_2b.brocade_interface', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.interface.gigabitethernet.vrrp.virtual_ip', 'pybind.nos.v7_0_1a.brocade_interface', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.interface.gigabitethernet.vrrp.virtual_ip', 'pybind.nos.v7_1_0.brocade_interface', 'pybind.nos.v7_1_0')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'vrid, version', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'vrid, version', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'vrid, version', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'virtual_ip', 'keyval': 'virtual_ipaddr', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, gigabitethernet=gigabitethernet, vrrp=vrrp, virtual_ip=virtual_ip)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def interface_hundredgigabitethernet_ip_access_group_delete(self, hundredgigabitethernet=None, access_group=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		NOS: 6.0.2b, 7.0.1a, 7.1.0    

	**Parent Instance Keyword Arg Tuple(s)**:
		:param hundredgigabitethernet: kwarg tuple.
		:type hundredgigabitethernet: (name).

		:param name: tuple arg.
		:type name: (unicode)
		
		.. note::
			* length - [u'3..16']
			* pattern - ((([1-9]|[1-9][0-9]|1[0-9][0-9]|2[0-3][0-9])/)?(([0-9]|[1][0-6]))/([1-9]|[1-9][0-9]|[1-9][0-9][0-9])(:[1-4])?)

	**This Instance Keyword Arg Tuple**:
		:param access_group: kwarg tuple.
		:type access_group: (ip_access_list, ip_direction, traffic_type).

		:param ip_access_list: ACL_NAME;; Access List Name (Max 63)
		:type ip_access_list: (unicode)
		
		.. note::
			* length - [u'1..63']
			* pattern - [a-zA-Z0-9]{1}([-a-zA-Z0-9_]{0,62})

		:param ip_direction: tuple arg.
		:type ip_direction: (unicode)
		
		.. note::
			* enum - [u'in', u'out']

		:param traffic_type: tuple arg.
		:type traffic_type: (unicode)
		
		.. note::
			* enum - [u'switched', u'routed']

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = [('pybind.nos.v7_0_1a.interface.hundredgigabitethernet', u'hundredgigabitethernet'), ('pybind.nos.v7_1_0.interface.hundredgigabitethernet', u'hundredgigabitethernet'), ('pybind.nos.v6_0_2b.interface.hundredgigabitethernet', u'hundredgigabitethernet')]
    bindings_list = [('pybind.nos.v6_0_2b.interface.hundredgigabitethernet.ip_acl_interface.ip.access_group', 'pybind.nos.v6_0_2b.brocade_interface', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.interface.hundredgigabitethernet.ip_acl_interface.ip.access_group', 'pybind.nos.v7_0_1a.brocade_interface', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.interface.hundredgigabitethernet.ip_acl_interface.ip.access_group', 'pybind.nos.v7_1_0.brocade_interface', 'pybind.nos.v7_1_0')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'access_group', 'keyval': 'ip_access_list, ip_direction', 'extra_keyval': 'ip_access_list, ip_direction, traffic_type'}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, hundredgigabitethernet=hundredgigabitethernet, access_group=access_group)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def interface_hundredgigabitethernet_ip_address_delete(self, hundredgigabitethernet=None, address=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		NOS: 6.0.2b, 7.0.1a, 7.1.0    

	**Parent Instance Keyword Arg Tuple(s)**:
		:param hundredgigabitethernet: kwarg tuple.
		:type hundredgigabitethernet: (name).

		:param name: tuple arg.
		:type name: (unicode)
		
		.. note::
			* length - [u'3..16']
			* pattern - ((([1-9]|[1-9][0-9]|1[0-9][0-9]|2[0-3][0-9])/)?(([0-9]|[1][0-6]))/([1-9]|[1-9][0-9]|[1-9][0-9][0-9])(:[1-4])?)

	**This Instance Keyword Arg Tuple**:
		:param address: kwarg tuple.
		:type address: (address, secondary, ospf_passive, ospf_ignore).

		:param address: A.B.C.D/M IP address in dotted decimal/Mask
		:type address: (unicode)
		
		.. note::
			* pattern - (([1-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.)(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){2}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])/(([1-9])|([1-2][0-9])|(3[0-1]))

		:param secondary: Secondary ip address on the specific interface
		:type secondary: (YANGBool)

		:param ospf_passive: ospf pasive address on the specific interface
		:type ospf_passive: (YANGBool)

		:param ospf_ignore: ospf active address on the specific interface
		:type ospf_ignore: (YANGBool)

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = [('pybind.nos.v7_0_1a.interface.hundredgigabitethernet', u'hundredgigabitethernet'), ('pybind.nos.v6_0_2b.interface.hundredgigabitethernet', u'hundredgigabitethernet'), ('pybind.nos.v7_1_0.interface.hundredgigabitethernet', u'hundredgigabitethernet')]
    bindings_list = [('pybind.nos.v6_0_2b.interface.hundredgigabitethernet.ip.ip_config.address', 'pybind.nos.v6_0_2b.brocade_interface', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.interface.hundredgigabitethernet.ip.ip_config.address', 'pybind.nos.v7_0_1a.brocade_interface', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.interface.hundredgigabitethernet.ip.ip_config.address', 'pybind.nos.v7_1_0.brocade_interface', 'pybind.nos.v7_1_0')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'address', 'keyval': 'address', 'extra_keyval': 'address, secondary, ospf_passive, ospf_ignore'}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, hundredgigabitethernet=hundredgigabitethernet, address=address)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def interface_hundredgigabitethernet_ip_dhcp_relay_delete(self, hundredgigabitethernet=None, servers=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		NOS: 6.0.2b, 7.0.1a, 7.1.0    

	**Parent Instance Keyword Arg Tuple(s)**:
		:param hundredgigabitethernet: kwarg tuple.
		:type hundredgigabitethernet: (name).

		:param name: tuple arg.
		:type name: (unicode)
		
		.. note::
			* length - [u'3..16']
			* pattern - ((([1-9]|[1-9][0-9]|1[0-9][0-9]|2[0-3][0-9])/)?(([0-9]|[1][0-6]))/([1-9]|[1-9][0-9]|[1-9][0-9][0-9])(:[1-4])?)

	**This Instance Keyword Arg Tuple**:
		:param servers: kwarg tuple.
		:type servers: (relay_ip_addr, server_vrf_name).

		:param relay_ip_addr: A.B.C.D;; IP address of the DHCP server
		:type relay_ip_addr: (unicode)
		
		.. note::
			* pattern - (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?

		:param server_vrf_name: VRF name of the DHCP server
		:type server_vrf_name: (unicode)
		
		.. note::
			* length - [u'1..32']
			* pattern - ((([a-zA-Z0-9_]([a-zA-Z0-9\-_]){0,61})?[a-zA-Z0-9]\.)*([a-zA-Z0-9_]([a-zA-Z0-9\-_]){0,61})?[a-zA-Z0-9]\.?)|\.

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = [('pybind.nos.v7_0_1a.interface.hundredgigabitethernet', u'hundredgigabitethernet'), ('pybind.nos.v6_0_2b.interface.hundredgigabitethernet', u'hundredgigabitethernet'), ('pybind.nos.v7_1_0.interface.hundredgigabitethernet', u'hundredgigabitethernet')]
    bindings_list = [('pybind.nos.v6_0_2b.interface.hundredgigabitethernet.ip.interface_hu_dhcp_conf.dhcp.relay.servers', 'pybind.nos.v6_0_2b.brocade_interface', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.interface.hundredgigabitethernet.ip.interface_hu_dhcp_conf.dhcp.relay.servers', 'pybind.nos.v7_0_1a.brocade_interface', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.interface.hundredgigabitethernet.ip.interface_hu_dhcp_conf.dhcp.relay.servers', 'pybind.nos.v7_1_0.brocade_interface', 'pybind.nos.v7_1_0')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'servers', 'keyval': 'relay_ip_addr, server_vrf_name', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, hundredgigabitethernet=hundredgigabitethernet, servers=servers)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def interface_hundredgigabitethernet_ip_igmp_static_group_delete(self, hundredgigabitethernet=None, static_group=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		NOS: 6.0.2b, 7.0.1a, 7.1.0    

	**Parent Instance Keyword Arg Tuple(s)**:
		:param hundredgigabitethernet: kwarg tuple.
		:type hundredgigabitethernet: (name).

		:param name: tuple arg.
		:type name: (unicode)
		
		.. note::
			* length - [u'3..16']
			* pattern - ((([1-9]|[1-9][0-9]|1[0-9][0-9]|2[0-3][0-9])/)?(([0-9]|[1][0-6]))/([1-9]|[1-9][0-9]|[1-9][0-9][0-9])(:[1-4])?)

	**This Instance Keyword Arg Tuple**:
		:param static_group: kwarg tuple.
		:type static_group: (sg_addr).

		:param sg_addr: Multicast Address to be Joined in the format A.B.C.D
		:type sg_addr: (unicode)
		
		.. note::
			* pattern - (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = [('pybind.nos.v6_0_2b.interface.hundredgigabitethernet', u'hundredgigabitethernet'), ('pybind.nos.v7_1_0.interface.hundredgigabitethernet', u'hundredgigabitethernet'), ('pybind.nos.v7_0_1a.interface.hundredgigabitethernet', u'hundredgigabitethernet')]
    bindings_list = [('pybind.nos.v6_0_2b.interface.hundredgigabitethernet.ip.igmp_phy_intf_cfg.igmp.static_group', 'pybind.nos.v6_0_2b.brocade_interface', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.interface.hundredgigabitethernet.ip.igmp_phy_intf_cfg.igmp.static_group', 'pybind.nos.v7_0_1a.brocade_interface', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.interface.hundredgigabitethernet.ip.igmp_phy_intf_cfg.igmp.static_group', 'pybind.nos.v7_1_0.brocade_interface', 'pybind.nos.v7_1_0')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'static_group', 'keyval': 'sg_addr', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, hundredgigabitethernet=hundredgigabitethernet, static_group=static_group)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def interface_hundredgigabitethernet_ipv6_access_group_delete(self, hundredgigabitethernet=None, access_group=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		NOS: 6.0.2b, 7.0.1a, 7.1.0    

	**Parent Instance Keyword Arg Tuple(s)**:
		:param hundredgigabitethernet: kwarg tuple.
		:type hundredgigabitethernet: (name).

		:param name: tuple arg.
		:type name: (unicode)
		
		.. note::
			* length - [u'3..16']
			* pattern - ((([1-9]|[1-9][0-9]|1[0-9][0-9]|2[0-3][0-9])/)?(([0-9]|[1][0-6]))/([1-9]|[1-9][0-9]|[1-9][0-9][0-9])(:[1-4])?)

	**This Instance Keyword Arg Tuple**:
		:param access_group: kwarg tuple.
		:type access_group: (ipv6_access_list, ip_direction, traffic_type).

		:param ipv6_access_list: ACL_NAME;; Access List Name (Max 63)
		:type ipv6_access_list: (unicode)
		
		.. note::
			* length - [u'1..63']
			* pattern - [a-zA-Z0-9]{1}([-a-zA-Z0-9_]{0,62})

		:param ip_direction: tuple arg.
		:type ip_direction: (unicode)
		
		.. note::
			* enum - [u'in', u'out']

		:param traffic_type: tuple arg.
		:type traffic_type: (unicode)
		
		.. note::
			* enum - [u'switched', u'routed']

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = [('pybind.nos.v7_0_1a.interface.hundredgigabitethernet', u'hundredgigabitethernet'), ('pybind.nos.v7_1_0.interface.hundredgigabitethernet', u'hundredgigabitethernet'), ('pybind.nos.v6_0_2b.interface.hundredgigabitethernet', u'hundredgigabitethernet')]
    bindings_list = [('pybind.nos.v6_0_2b.interface.hundredgigabitethernet.ipv6.access_group', 'pybind.nos.v6_0_2b.brocade_interface', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.interface.hundredgigabitethernet.ipv6.access_group', 'pybind.nos.v7_0_1a.brocade_interface', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.interface.hundredgigabitethernet.ipv6.access_group', 'pybind.nos.v7_1_0.brocade_interface', 'pybind.nos.v7_1_0')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'access_group', 'keyval': 'ipv6_access_list, ip_direction', 'extra_keyval': 'ipv6_access_list, ip_direction, traffic_type'}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, hundredgigabitethernet=hundredgigabitethernet, access_group=access_group)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def interface_hundredgigabitethernet_ipv6_address_delete(self, hundredgigabitethernet=None, ipv6_address=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		NOS: 6.0.2b, 7.0.1a, 7.1.0    

	**Parent Instance Keyword Arg Tuple(s)**:
		:param hundredgigabitethernet: kwarg tuple.
		:type hundredgigabitethernet: (name).

		:param name: tuple arg.
		:type name: (unicode)
		
		.. note::
			* length - [u'3..16']
			* pattern - ((([1-9]|[1-9][0-9]|1[0-9][0-9]|2[0-3][0-9])/)?(([0-9]|[1][0-6]))/([1-9]|[1-9][0-9]|[1-9][0-9][0-9])(:[1-4])?)

	**This Instance Keyword Arg Tuple**:
		:param ipv6_address: kwarg tuple.
		:type ipv6_address: (address, secondary, anycast).

		:param address: A:B::C:D/LEN;; IPv6 prefix format: xxxx:xxxx/ml, xxxx:xxxx::/ml, xxxx::xx/128
		:type address: (unicode)
		
		.. note::
			* pattern - ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(/(([0-9])|([0-9]{2})|(1[0-1][0-9])|(12[0-8])))

		:param secondary: Configure Secondary ipv6 address on an interface
		:type secondary: (YANGBool)

		:param anycast: Configure ipv6 address as anycast
		:type anycast: (YANGBool)

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = [('pybind.nos.v6_0_2b.interface.hundredgigabitethernet', u'hundredgigabitethernet'), ('pybind.nos.v7_0_1a.interface.hundredgigabitethernet', u'hundredgigabitethernet'), ('pybind.nos.v7_1_0.interface.hundredgigabitethernet', u'hundredgigabitethernet')]
    bindings_list = [('pybind.nos.v6_0_2b.interface.hundredgigabitethernet.ipv6.ipv6_config.address.ipv6_address', 'pybind.nos.v6_0_2b.brocade_interface', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.interface.hundredgigabitethernet.ipv6.ipv6_config.address.ipv6_address', 'pybind.nos.v7_0_1a.brocade_interface', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.interface.hundredgigabitethernet.ipv6.ipv6_config.address.ipv6_address', 'pybind.nos.v7_1_0.brocade_interface', 'pybind.nos.v7_1_0')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'ipv6_address', 'keyval': 'address', 'extra_keyval': 'address, secondary, anycast'}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, hundredgigabitethernet=hundredgigabitethernet, ipv6_address=ipv6_address)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def interface_hundredgigabitethernet_ipv6_dhcp_relay_delete(self, hundredgigabitethernet=None, servers=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		NOS: 6.0.2b, 7.0.1a, 7.1.0    

	**Parent Instance Keyword Arg Tuple(s)**:
		:param hundredgigabitethernet: kwarg tuple.
		:type hundredgigabitethernet: (name).

		:param name: tuple arg.
		:type name: (unicode)
		
		.. note::
			* length - [u'3..16']
			* pattern - ((([1-9]|[1-9][0-9]|1[0-9][0-9]|2[0-3][0-9])/)?(([0-9]|[1][0-6]))/([1-9]|[1-9][0-9]|[1-9][0-9][0-9])(:[1-4])?)

	**This Instance Keyword Arg Tuple**:
		:param servers: kwarg tuple.
		:type servers: (relay_ip_addr, server_vrf_name).

		:param relay_ip_addr: IPv6 address of the DHCPv6 server
		:type relay_ip_addr: (unicode)
		
		.. note::
			* pattern - ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?

		:param server_vrf_name: VRF name of the DHCPv6 server
		:type server_vrf_name: (unicode)
		
		.. note::
			* length - [u'1..32']
			* pattern - ((([a-zA-Z0-9_]([a-zA-Z0-9\-_]){0,61})?[a-zA-Z0-9]\.)*([a-zA-Z0-9_]([a-zA-Z0-9\-_]){0,61})?[a-zA-Z0-9]\.?)|\.

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = [('pybind.nos.v7_1_0.interface.hundredgigabitethernet', u'hundredgigabitethernet'), ('pybind.nos.v7_0_1a.interface.hundredgigabitethernet', u'hundredgigabitethernet'), ('pybind.nos.v6_0_2b.interface.hundredgigabitethernet', u'hundredgigabitethernet')]
    bindings_list = [('pybind.nos.v6_0_2b.interface.hundredgigabitethernet.ipv6.interface_phy_dhcp_conf.dhcp.relay.servers', 'pybind.nos.v6_0_2b.brocade_interface', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.interface.hundredgigabitethernet.ipv6.interface_phy_dhcp_conf.dhcp.relay.servers', 'pybind.nos.v7_0_1a.brocade_interface', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.interface.hundredgigabitethernet.ipv6.interface_phy_dhcp_conf.dhcp.relay.servers', 'pybind.nos.v7_1_0.brocade_interface', 'pybind.nos.v7_1_0')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'servers', 'keyval': 'relay_ip_addr', 'extra_keyval': 'relay_ip_addr, server_vrf_name'}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, hundredgigabitethernet=hundredgigabitethernet, servers=servers)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def interface_hundredgigabitethernet_ipv6_nd_prefix_delete(self, hundredgigabitethernet=None, prefix=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		NOS: 6.0.2b, 7.0.1a, 7.1.0    

	**Parent Instance Keyword Arg Tuple(s)**:
		:param hundredgigabitethernet: kwarg tuple.
		:type hundredgigabitethernet: (name).

		:param name: tuple arg.
		:type name: (unicode)
		
		.. note::
			* length - [u'3..16']
			* pattern - ((([1-9]|[1-9][0-9]|1[0-9][0-9]|2[0-3][0-9])/)?(([0-9]|[1][0-6]))/([1-9]|[1-9][0-9]|[1-9][0-9][0-9])(:[1-4])?)

	**This Instance Keyword Arg Tuple**:
		:param prefix: kwarg tuple.
		:type prefix: (prefix_ipv6_address).

		:param prefix_ipv6_address: tuple arg.
		:type prefix_ipv6_address: (unicode)
		
		.. note::
			* pattern - ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(/(([0-9])|([0-9]{2})|(1[0-1][0-9])|(12[0-8])))

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = [('pybind.nos.v7_1_0.interface.hundredgigabitethernet', u'hundredgigabitethernet'), ('pybind.nos.v6_0_2b.interface.hundredgigabitethernet', u'hundredgigabitethernet'), ('pybind.nos.v7_0_1a.interface.hundredgigabitethernet', u'hundredgigabitethernet')]
    bindings_list = [('pybind.nos.v6_0_2b.interface.hundredgigabitethernet.ipv6.ipv6_nd_ra.ipv6_intf_cmds.nd.prefix', 'pybind.nos.v6_0_2b.brocade_interface', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.interface.hundredgigabitethernet.ipv6.ipv6_nd_ra.ipv6_intf_cmds.nd.prefix', 'pybind.nos.v7_0_1a.brocade_interface', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.interface.hundredgigabitethernet.ipv6.ipv6_nd_ra.ipv6_intf_cmds.nd.prefix', 'pybind.nos.v7_1_0.brocade_interface', 'pybind.nos.v7_1_0')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'prefix', 'keyval': 'prefix_ipv6_address', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, hundredgigabitethernet=hundredgigabitethernet, prefix=prefix)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def interface_hundredgigabitethernet_ipv6_neighbor_delete(self, hundredgigabitethernet=None, neighbor=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		NOS: 6.0.2b, 7.0.1a, 7.1.0    

	**Parent Instance Keyword Arg Tuple(s)**:
		:param hundredgigabitethernet: kwarg tuple.
		:type hundredgigabitethernet: (name).

		:param name: tuple arg.
		:type name: (unicode)
		
		.. note::
			* length - [u'3..16']
			* pattern - ((([1-9]|[1-9][0-9]|1[0-9][0-9]|2[0-3][0-9])/)?(([0-9]|[1][0-6]))/([1-9]|[1-9][0-9]|[1-9][0-9][0-9])(:[1-4])?)

	**This Instance Keyword Arg Tuple**:
		:param neighbor: kwarg tuple.
		:type neighbor: (ipv6_address).

		:param ipv6_address: tuple arg.
		:type ipv6_address: (unicode)
		
		.. note::
			* pattern - ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = [('pybind.nos.v7_1_0.interface.hundredgigabitethernet', u'hundredgigabitethernet'), ('pybind.nos.v6_0_2b.interface.hundredgigabitethernet', u'hundredgigabitethernet'), ('pybind.nos.v7_0_1a.interface.hundredgigabitethernet', u'hundredgigabitethernet')]
    bindings_list = [('pybind.nos.v6_0_2b.interface.hundredgigabitethernet.ipv6.ipv6_nd_ra.ipv6_intf_cmds.neighbor', 'pybind.nos.v6_0_2b.brocade_interface', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.interface.hundredgigabitethernet.ipv6.ipv6_nd_ra.ipv6_intf_cmds.neighbor', 'pybind.nos.v7_0_1a.brocade_interface', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.interface.hundredgigabitethernet.ipv6.ipv6_nd_ra.ipv6_intf_cmds.neighbor', 'pybind.nos.v7_1_0.brocade_interface', 'pybind.nos.v7_1_0')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'neighbor', 'keyval': 'ipv6_address', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, hundredgigabitethernet=hundredgigabitethernet, neighbor=neighbor)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def interface_hundredgigabitethernet_ipv6_vrrp_extended_group_delete(self, hundredgigabitethernet=None, vrrpv3e_group=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		NOS: 7.0.1a, 7.1.0    

	**Parent Instance Keyword Arg Tuple(s)**:
		:param hundredgigabitethernet: kwarg tuple.
		:type hundredgigabitethernet: (name).

		:param name: tuple arg.
		:type name: (unicode)
		
		.. note::
			* length - [u'3..16']
			* pattern - ((([1-9]|[1-9][0-9]|1[0-9][0-9]|2[0-3][0-9])/)?(([0-9]|[1][0-6]))/([1-9]|[1-9][0-9]|[1-9][0-9][0-9])(:[1-4])?)

	**This Instance Keyword Arg Tuple**:
		:param vrrpv3e_group: kwarg tuple.
		:type vrrpv3e_group: (vrid).

		:param vrid: tuple arg.
		:type vrid: (int)
		
		.. note::
			* range - ['0..255']

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = [('pybind.nos.v7_0_1a.interface.hundredgigabitethernet', u'hundredgigabitethernet'), ('pybind.nos.v7_1_0.interface.hundredgigabitethernet', u'hundredgigabitethernet')]
    bindings_list = [('pybind.nos.v7_0_1a.interface.hundredgigabitethernet.ipv6.vrrpv3e_group', 'pybind.nos.v7_0_1a.brocade_interface', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.interface.hundredgigabitethernet.ipv6.vrrpv3e_group', 'pybind.nos.v7_1_0.brocade_interface', 'pybind.nos.v7_1_0')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'vrrpv3e_group', 'keyval': 'vrid', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, hundredgigabitethernet=hundredgigabitethernet, vrrpv3e_group=vrrpv3e_group)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def interface_hundredgigabitethernet_ipv6_vrrp_extended_group_track_delete(self, hundredgigabitethernet=None, vrrpv3e_group=None, interface=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		NOS: 7.0.1a, 7.1.0    

	**Parent Instance Keyword Arg Tuple(s)**:
		:param hundredgigabitethernet: kwarg tuple.
		:type hundredgigabitethernet: (name).

		:param name: tuple arg.
		:type name: (unicode)
		
		.. note::
			* length - [u'3..16']
			* pattern - ((([1-9]|[1-9][0-9]|1[0-9][0-9]|2[0-3][0-9])/)?(([0-9]|[1][0-6]))/([1-9]|[1-9][0-9]|[1-9][0-9][0-9])(:[1-4])?)

		:param vrrpv3e_group: kwarg tuple.
		:type vrrpv3e_group: (vrid).

		:param vrid: tuple arg.
		:type vrid: (int)
		
		.. note::
			* range - ['0..255']

	**This Instance Keyword Arg Tuple**:
		:param interface: kwarg tuple.
		:type interface: (interface_type, interface_name).

		:param interface_type: tuple arg.
		:type interface_type: (unicode)
		
		.. note::
			* enum - [u'fortygigabitethernet', u'gigabitethernet', u'tengigabitethernet', u'hundredgigabitethernet', u'port-channel']

		:param interface_name: tuple arg.
		:type interface_name: (unicode)
		
		.. note::
			* length - [u'3..16']
			* pattern - ((([1-9]|[1-9][0-9]|1[0-9][0-9]|2[0-3][0-9])/)?(([0-9]|[1][0-6]))/([1-9]|[1-9][0-9]|[1-9][0-9][0-9])(:[1-4])?)

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = [('pybind.nos.v7_0_1a.interface.hundredgigabitethernet', u'hundredgigabitethernet'), ('pybind.nos.v7_0_1a.interface.hundredgigabitethernet.ipv6.vrrpv3e_group', u'vrrpv3e_group'), ('pybind.nos.v7_1_0.interface.hundredgigabitethernet', u'hundredgigabitethernet'), ('pybind.nos.v7_1_0.interface.hundredgigabitethernet.ipv6.vrrpv3e_group', u'vrrpv3e_group')]
    bindings_list = [('pybind.nos.v7_0_1a.interface.hundredgigabitethernet.ipv6.vrrpv3e_group.track.interface', 'pybind.nos.v7_0_1a.brocade_interface', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.interface.hundredgigabitethernet.ipv6.vrrpv3e_group.track.interface', 'pybind.nos.v7_1_0.brocade_interface', 'pybind.nos.v7_1_0')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'vrid', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'vrid', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'interface', 'keyval': 'interface_type, interface_name', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, hundredgigabitethernet=hundredgigabitethernet, vrrpv3e_group=vrrpv3e_group, interface=interface)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def interface_hundredgigabitethernet_ipv6_vrrp_extended_group_virtual_ip_delete(self, hundredgigabitethernet=None, vrrpv3e_group=None, virtual_ip=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		NOS: 7.0.1a, 7.1.0    

	**Parent Instance Keyword Arg Tuple(s)**:
		:param hundredgigabitethernet: kwarg tuple.
		:type hundredgigabitethernet: (name).

		:param name: tuple arg.
		:type name: (unicode)
		
		.. note::
			* length - [u'3..16']
			* pattern - ((([1-9]|[1-9][0-9]|1[0-9][0-9]|2[0-3][0-9])/)?(([0-9]|[1][0-6]))/([1-9]|[1-9][0-9]|[1-9][0-9][0-9])(:[1-4])?)

		:param vrrpv3e_group: kwarg tuple.
		:type vrrpv3e_group: (vrid).

		:param vrid: tuple arg.
		:type vrid: (int)
		
		.. note::
			* range - ['0..255']

	**This Instance Keyword Arg Tuple**:
		:param virtual_ip: kwarg tuple.
		:type virtual_ip: (virtual_ipaddr).

		:param virtual_ipaddr: Virtual IPv6 address
		:type virtual_ipaddr: (unicode)
		
		.. note::
			* pattern - ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = [('pybind.nos.v7_0_1a.interface.hundredgigabitethernet', u'hundredgigabitethernet'), ('pybind.nos.v7_0_1a.interface.hundredgigabitethernet.ipv6.vrrpv3e_group', u'vrrpv3e_group'), ('pybind.nos.v7_1_0.interface.hundredgigabitethernet', u'hundredgigabitethernet'), ('pybind.nos.v7_1_0.interface.hundredgigabitethernet.ipv6.vrrpv3e_group', u'vrrpv3e_group')]
    bindings_list = [('pybind.nos.v7_0_1a.interface.hundredgigabitethernet.ipv6.vrrpv3e_group.virtual_ip', 'pybind.nos.v7_0_1a.brocade_interface', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.interface.hundredgigabitethernet.ipv6.vrrpv3e_group.virtual_ip', 'pybind.nos.v7_1_0.brocade_interface', 'pybind.nos.v7_1_0')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'vrid', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'vrid', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'virtual_ip', 'keyval': 'virtual_ipaddr', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, hundredgigabitethernet=hundredgigabitethernet, vrrpv3e_group=vrrpv3e_group, virtual_ip=virtual_ip)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def interface_hundredgigabitethernet_ipv6_vrrp_group_delete(self, hundredgigabitethernet=None, vrrpv3_group=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		NOS: 7.0.1a, 7.1.0    

	**Parent Instance Keyword Arg Tuple(s)**:
		:param hundredgigabitethernet: kwarg tuple.
		:type hundredgigabitethernet: (name).

		:param name: tuple arg.
		:type name: (unicode)
		
		.. note::
			* length - [u'3..16']
			* pattern - ((([1-9]|[1-9][0-9]|1[0-9][0-9]|2[0-3][0-9])/)?(([0-9]|[1][0-6]))/([1-9]|[1-9][0-9]|[1-9][0-9][0-9])(:[1-4])?)

	**This Instance Keyword Arg Tuple**:
		:param vrrpv3_group: kwarg tuple.
		:type vrrpv3_group: (vrid).

		:param vrid: tuple arg.
		:type vrid: (int)
		
		.. note::
			* range - ['0..255']

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = [('pybind.nos.v7_0_1a.interface.hundredgigabitethernet', u'hundredgigabitethernet'), ('pybind.nos.v7_1_0.interface.hundredgigabitethernet', u'hundredgigabitethernet')]
    bindings_list = [('pybind.nos.v7_0_1a.interface.hundredgigabitethernet.ipv6.vrrpv3_group', 'pybind.nos.v7_0_1a.brocade_interface', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.interface.hundredgigabitethernet.ipv6.vrrpv3_group', 'pybind.nos.v7_1_0.brocade_interface', 'pybind.nos.v7_1_0')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'vrrpv3_group', 'keyval': 'vrid', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, hundredgigabitethernet=hundredgigabitethernet, vrrpv3_group=vrrpv3_group)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def interface_hundredgigabitethernet_ipv6_vrrp_group_track_delete(self, hundredgigabitethernet=None, vrrpv3_group=None, interface=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		NOS: 7.0.1a, 7.1.0    

	**Parent Instance Keyword Arg Tuple(s)**:
		:param hundredgigabitethernet: kwarg tuple.
		:type hundredgigabitethernet: (name).

		:param name: tuple arg.
		:type name: (unicode)
		
		.. note::
			* length - [u'3..16']
			* pattern - ((([1-9]|[1-9][0-9]|1[0-9][0-9]|2[0-3][0-9])/)?(([0-9]|[1][0-6]))/([1-9]|[1-9][0-9]|[1-9][0-9][0-9])(:[1-4])?)

		:param vrrpv3_group: kwarg tuple.
		:type vrrpv3_group: (vrid).

		:param vrid: tuple arg.
		:type vrid: (int)
		
		.. note::
			* range - ['0..255']

	**This Instance Keyword Arg Tuple**:
		:param interface: kwarg tuple.
		:type interface: (interface_type, interface_name).

		:param interface_type: tuple arg.
		:type interface_type: (unicode)
		
		.. note::
			* enum - [u'fortygigabitethernet', u'gigabitethernet', u'tengigabitethernet', u'hundredgigabitethernet', u'port-channel']

		:param interface_name: tuple arg.
		:type interface_name: (unicode)
		
		.. note::
			* length - [u'3..16']
			* pattern - ((([1-9]|[1-9][0-9]|1[0-9][0-9]|2[0-3][0-9])/)?(([0-9]|[1][0-6]))/([1-9]|[1-9][0-9]|[1-9][0-9][0-9])(:[1-4])?)

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = [('pybind.nos.v7_1_0.interface.hundredgigabitethernet', u'hundredgigabitethernet'), ('pybind.nos.v7_1_0.interface.hundredgigabitethernet.ipv6.vrrpv3_group', u'vrrpv3_group'), ('pybind.nos.v7_0_1a.interface.hundredgigabitethernet', u'hundredgigabitethernet'), ('pybind.nos.v7_0_1a.interface.hundredgigabitethernet.ipv6.vrrpv3_group', u'vrrpv3_group')]
    bindings_list = [('pybind.nos.v7_0_1a.interface.hundredgigabitethernet.ipv6.vrrpv3_group.track.interface', 'pybind.nos.v7_0_1a.brocade_interface', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.interface.hundredgigabitethernet.ipv6.vrrpv3_group.track.interface', 'pybind.nos.v7_1_0.brocade_interface', 'pybind.nos.v7_1_0')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'vrid', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'vrid', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'interface', 'keyval': 'interface_type, interface_name', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, hundredgigabitethernet=hundredgigabitethernet, vrrpv3_group=vrrpv3_group, interface=interface)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def interface_hundredgigabitethernet_ipv6_vrrp_group_virtual_ip_delete(self, hundredgigabitethernet=None, vrrpv3_group=None, virtual_ip=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		NOS: 7.0.1a, 7.1.0    

	**Parent Instance Keyword Arg Tuple(s)**:
		:param hundredgigabitethernet: kwarg tuple.
		:type hundredgigabitethernet: (name).

		:param name: tuple arg.
		:type name: (unicode)
		
		.. note::
			* length - [u'3..16']
			* pattern - ((([1-9]|[1-9][0-9]|1[0-9][0-9]|2[0-3][0-9])/)?(([0-9]|[1][0-6]))/([1-9]|[1-9][0-9]|[1-9][0-9][0-9])(:[1-4])?)

		:param vrrpv3_group: kwarg tuple.
		:type vrrpv3_group: (vrid).

		:param vrid: tuple arg.
		:type vrid: (int)
		
		.. note::
			* range - ['0..255']

	**This Instance Keyword Arg Tuple**:
		:param virtual_ip: kwarg tuple.
		:type virtual_ip: (virtual_ipaddr).

		:param virtual_ipaddr: Virtual IPv6 address
		:type virtual_ipaddr: (unicode)
		
		.. note::
			* pattern - ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = [('pybind.nos.v7_0_1a.interface.hundredgigabitethernet', u'hundredgigabitethernet'), ('pybind.nos.v7_0_1a.interface.hundredgigabitethernet.ipv6.vrrpv3_group', u'vrrpv3_group'), ('pybind.nos.v7_1_0.interface.hundredgigabitethernet', u'hundredgigabitethernet'), ('pybind.nos.v7_1_0.interface.hundredgigabitethernet.ipv6.vrrpv3_group', u'vrrpv3_group')]
    bindings_list = [('pybind.nos.v7_0_1a.interface.hundredgigabitethernet.ipv6.vrrpv3_group.virtual_ip', 'pybind.nos.v7_0_1a.brocade_interface', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.interface.hundredgigabitethernet.ipv6.vrrpv3_group.virtual_ip', 'pybind.nos.v7_1_0.brocade_interface', 'pybind.nos.v7_1_0')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'vrid', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'vrid', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'virtual_ip', 'keyval': 'virtual_ipaddr', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, hundredgigabitethernet=hundredgigabitethernet, vrrpv3_group=vrrpv3_group, virtual_ip=virtual_ip)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def interface_hundredgigabitethernet_mac_access_group_delete(self, hundredgigabitethernet=None, access_group=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		NOS: 6.0.2b, 7.0.1a, 7.1.0    

	**Parent Instance Keyword Arg Tuple(s)**:
		:param hundredgigabitethernet: kwarg tuple.
		:type hundredgigabitethernet: (name).

		:param name: tuple arg.
		:type name: (unicode)
		
		.. note::
			* length - [u'3..16']
			* pattern - ((([1-9]|[1-9][0-9]|1[0-9][0-9]|2[0-3][0-9])/)?(([0-9]|[1][0-6]))/([1-9]|[1-9][0-9]|[1-9][0-9][0-9])(:[1-4])?)

	**This Instance Keyword Arg Tuple**:
		:param access_group: kwarg tuple.
		:type access_group: (mac_access_list, mac_direction, traffic_type).

		:param mac_access_list: ACL_NAME;; Access List Name (Max 63)
		:type mac_access_list: (unicode)
		
		.. note::
			* length - [u'1..63']
			* pattern - [a-zA-Z0-9]{1}([-a-zA-Z0-9_]{0,62})

		:param mac_direction: tuple arg.
		:type mac_direction: (unicode)
		
		.. note::
			* enum - [u'in', u'out']

		:param traffic_type: tuple arg.
		:type traffic_type: (unicode)
		
		.. note::
			* enum - [u'switched', u'routed']

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = [('pybind.nos.v6_0_2b.interface.hundredgigabitethernet', u'hundredgigabitethernet'), ('pybind.nos.v7_1_0.interface.hundredgigabitethernet', u'hundredgigabitethernet'), ('pybind.nos.v7_0_1a.interface.hundredgigabitethernet', u'hundredgigabitethernet')]
    bindings_list = [('pybind.nos.v6_0_2b.interface.hundredgigabitethernet.mac.access_group', 'pybind.nos.v6_0_2b.brocade_interface', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.interface.hundredgigabitethernet.mac.access_group', 'pybind.nos.v7_0_1a.brocade_interface', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.interface.hundredgigabitethernet.mac.access_group', 'pybind.nos.v7_1_0.brocade_interface', 'pybind.nos.v7_1_0')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'access_group', 'keyval': 'mac_access_list, mac_direction', 'extra_keyval': 'mac_access_list, mac_direction, traffic_type'}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, hundredgigabitethernet=hundredgigabitethernet, access_group=access_group)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def interface_hundredgigabitethernet_port_profile_port_profile_delete(self, hundredgigabitethernet=None, port_to_port_profile_associations=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		NOS: 6.0.2b, 7.0.1a, 7.1.0    

	**Parent Instance Keyword Arg Tuple(s)**:
		:param hundredgigabitethernet: kwarg tuple.
		:type hundredgigabitethernet: (name).

		:param name: tuple arg.
		:type name: (unicode)
		
		.. note::
			* length - [u'3..16']
			* pattern - ((([1-9]|[1-9][0-9]|1[0-9][0-9]|2[0-3][0-9])/)?(([0-9]|[1][0-6]))/([1-9]|[1-9][0-9]|[1-9][0-9][0-9])(:[1-4])?)

	**This Instance Keyword Arg Tuple**:
		:param port_to_port_profile_associations: kwarg tuple.
		:type port_to_port_profile_associations: (port_to_port_profile_association).

		:param port_to_port_profile_association: Port-profile name (Max Size - 128)
		:type port_to_port_profile_association: (unicode)
		
		.. note::
			* pattern - [a-zA-Z]{1}([-a-zA-Z0-9\.\\\\@#\+\*\(\)=\{~\}%<>=$_\[\]\|]{0,127})

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = [('pybind.nos.v6_0_2b.interface.hundredgigabitethernet', u'hundredgigabitethernet'), ('pybind.nos.v7_1_0.interface.hundredgigabitethernet', u'hundredgigabitethernet'), ('pybind.nos.v7_0_1a.interface.hundredgigabitethernet', u'hundredgigabitethernet')]
    bindings_list = [('pybind.nos.v6_0_2b.interface.hundredgigabitethernet.port_profile_to_interface_associations.port_profile_port.port_to_port_profile_associations', 'pybind.nos.v6_0_2b.brocade_interface', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.interface.hundredgigabitethernet.port_profile_to_interface_associations.port_profile_port.port_to_port_profile_associations', 'pybind.nos.v7_0_1a.brocade_interface', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.interface.hundredgigabitethernet.port_profile_to_interface_associations.port_profile_port.port_to_port_profile_associations', 'pybind.nos.v7_1_0.brocade_interface', 'pybind.nos.v7_1_0')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'port_to_port_profile_associations', 'keyval': 'port_to_port_profile_association', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, hundredgigabitethernet=hundredgigabitethernet, port_to_port_profile_associations=port_to_port_profile_associations)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def interface_hundredgigabitethernet_qos_flowcontrol_pfc_delete(self, hundredgigabitethernet=None, pfc=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		NOS: 6.0.2b, 7.0.1a, 7.1.0    

	**Parent Instance Keyword Arg Tuple(s)**:
		:param hundredgigabitethernet: kwarg tuple.
		:type hundredgigabitethernet: (name).

		:param name: tuple arg.
		:type name: (unicode)
		
		.. note::
			* length - [u'3..16']
			* pattern - ((([1-9]|[1-9][0-9]|1[0-9][0-9]|2[0-3][0-9])/)?(([0-9]|[1][0-6]))/([1-9]|[1-9][0-9]|[1-9][0-9][0-9])(:[1-4])?)

	**This Instance Keyword Arg Tuple**:
		:param pfc: kwarg tuple.
		:type pfc: (pfc_cos).

		:param pfc_cos: 0-7;;CoS value
		:type pfc_cos: (long)
		
		.. note::
			* range - ['-2147483648..2147483647']

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = [('pybind.nos.v6_0_2b.interface.hundredgigabitethernet', u'hundredgigabitethernet'), ('pybind.nos.v7_1_0.interface.hundredgigabitethernet', u'hundredgigabitethernet'), ('pybind.nos.v7_0_1a.interface.hundredgigabitethernet', u'hundredgigabitethernet')]
    bindings_list = [('pybind.nos.v6_0_2b.interface.hundredgigabitethernet.qos.flowcontrol.pfc', 'pybind.nos.v6_0_2b.brocade_interface', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.interface.hundredgigabitethernet.qos.flowcontrol.pfc', 'pybind.nos.v7_0_1a.brocade_interface', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.interface.hundredgigabitethernet.qos.flowcontrol.pfc', 'pybind.nos.v7_1_0.brocade_interface', 'pybind.nos.v7_1_0')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'pfc', 'keyval': 'pfc_cos', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, hundredgigabitethernet=hundredgigabitethernet, pfc=pfc)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def interface_hundredgigabitethernet_qos_random_detect_traffic_class_delete(self, hundredgigabitethernet=None, traffic_class=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		NOS: 6.0.2b, 7.0.1a, 7.1.0    

	**Parent Instance Keyword Arg Tuple(s)**:
		:param hundredgigabitethernet: kwarg tuple.
		:type hundredgigabitethernet: (name).

		:param name: tuple arg.
		:type name: (unicode)
		
		.. note::
			* length - [u'3..16']
			* pattern - ((([1-9]|[1-9][0-9]|1[0-9][0-9]|2[0-3][0-9])/)?(([0-9]|[1][0-6]))/([1-9]|[1-9][0-9]|[1-9][0-9][0-9])(:[1-4])?)

	**This Instance Keyword Arg Tuple**:
		:param traffic_class: kwarg tuple.
		:type traffic_class: (red_tc_value).

		:param red_tc_value: tuple arg.
		:type red_tc_value: (long)
		
		.. note::
			* range - ['0..4294967295']

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = [('pybind.nos.v7_0_1a.interface.hundredgigabitethernet', u'hundredgigabitethernet'), ('pybind.nos.v7_1_0.interface.hundredgigabitethernet', u'hundredgigabitethernet'), ('pybind.nos.v6_0_2b.interface.hundredgigabitethernet', u'hundredgigabitethernet')]
    bindings_list = [('pybind.nos.v6_0_2b.interface.hundredgigabitethernet.qos.random_detect.traffic_class', 'pybind.nos.v6_0_2b.brocade_interface', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.interface.hundredgigabitethernet.qos.random_detect.traffic_class', 'pybind.nos.v7_0_1a.brocade_interface', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.interface.hundredgigabitethernet.qos.random_detect.traffic_class', 'pybind.nos.v7_1_0.brocade_interface', 'pybind.nos.v7_1_0')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'traffic_class', 'keyval': 'red_tc_value', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, hundredgigabitethernet=hundredgigabitethernet, traffic_class=traffic_class)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def interface_hundredgigabitethernet_rmon_collection_history_delete(self, hundredgigabitethernet=None, history_control_entry=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		NOS: 6.0.2b, 7.0.1a, 7.1.0    

	**Parent Instance Keyword Arg Tuple(s)**:
		:param hundredgigabitethernet: kwarg tuple.
		:type hundredgigabitethernet: (name).

		:param name: tuple arg.
		:type name: (unicode)
		
		.. note::
			* length - [u'3..16']
			* pattern - ((([1-9]|[1-9][0-9]|1[0-9][0-9]|2[0-3][0-9])/)?(([0-9]|[1][0-6]))/([1-9]|[1-9][0-9]|[1-9][0-9][0-9])(:[1-4])?)

	**This Instance Keyword Arg Tuple**:
		:param history_control_entry: kwarg tuple.
		:type history_control_entry: (history_control_index, history_control_buckets_requested, history_control_interval, history_control_owner).

		:param history_control_index: tuple arg.
		:type history_control_index: (long)
		
		.. note::
			* range - ['-2147483648..2147483647']

		:param history_control_buckets_requested: Buckets (default 50)
		:type history_control_buckets_requested: (long)
		
		.. note::
			* range - ['-2147483648..2147483647']

		:param history_control_interval: Polling Interval (default 1800)
		:type history_control_interval: (long)
		
		.. note::
			* range - ['-2147483648..2147483647']

		:param history_control_owner: Owner identity
		:type history_control_owner: (unicode)
		
		.. note::
			* length - [u'1 .. 15']
			* pattern - [a-zA-Z]{1}([-a-zA-Z0-9\.\\\\@#\+\*\(\)=\{~\}%<>=$_\[\]\|]{0,14})

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = [('pybind.nos.v6_0_2b.interface.hundredgigabitethernet', u'hundredgigabitethernet'), ('pybind.nos.v7_1_0.interface.hundredgigabitethernet', u'hundredgigabitethernet'), ('pybind.nos.v7_0_1a.interface.hundredgigabitethernet', u'hundredgigabitethernet')]
    bindings_list = [('pybind.nos.v6_0_2b.interface.hundredgigabitethernet.rmon.collection.history_control_entry', 'pybind.nos.v6_0_2b.brocade_interface', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.interface.hundredgigabitethernet.rmon.collection.history_control_entry', 'pybind.nos.v7_0_1a.brocade_interface', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.interface.hundredgigabitethernet.rmon.collection.history_control_entry', 'pybind.nos.v7_1_0.brocade_interface', 'pybind.nos.v7_1_0')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'history_control_entry', 'keyval': 'history_control_index', 'extra_keyval': 'history_control_index, history_control_buckets_requested, history_control_interval, history_control_owner'}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, hundredgigabitethernet=hundredgigabitethernet, history_control_entry=history_control_entry)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def interface_hundredgigabitethernet_rmon_collection_stats_delete(self, hundredgigabitethernet=None, ether_stats_entry=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		NOS: 6.0.2b, 7.0.1a, 7.1.0    

	**Parent Instance Keyword Arg Tuple(s)**:
		:param hundredgigabitethernet: kwarg tuple.
		:type hundredgigabitethernet: (name).

		:param name: tuple arg.
		:type name: (unicode)
		
		.. note::
			* length - [u'3..16']
			* pattern - ((([1-9]|[1-9][0-9]|1[0-9][0-9]|2[0-3][0-9])/)?(([0-9]|[1][0-6]))/([1-9]|[1-9][0-9]|[1-9][0-9][0-9])(:[1-4])?)

	**This Instance Keyword Arg Tuple**:
		:param ether_stats_entry: kwarg tuple.
		:type ether_stats_entry: (ether_stats_index, ether_stats_owner).

		:param ether_stats_index: tuple arg.
		:type ether_stats_index: (long)
		
		.. note::
			* range - ['-2147483648..2147483647']

		:param ether_stats_owner: Owner identity
		:type ether_stats_owner: (unicode)
		
		.. note::
			* length - [u'1 .. 15']
			* pattern - [a-zA-Z]{1}([-a-zA-Z0-9\.\\\\@#\+\*\(\)=\{~\}%<>=$_\[\]\|]{0,14})

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = [('pybind.nos.v7_0_1a.interface.hundredgigabitethernet', u'hundredgigabitethernet'), ('pybind.nos.v6_0_2b.interface.hundredgigabitethernet', u'hundredgigabitethernet'), ('pybind.nos.v7_1_0.interface.hundredgigabitethernet', u'hundredgigabitethernet')]
    bindings_list = [('pybind.nos.v6_0_2b.interface.hundredgigabitethernet.rmon.collection.ether_stats_entry', 'pybind.nos.v6_0_2b.brocade_interface', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.interface.hundredgigabitethernet.rmon.collection.ether_stats_entry', 'pybind.nos.v7_0_1a.brocade_interface', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.interface.hundredgigabitethernet.rmon.collection.ether_stats_entry', 'pybind.nos.v7_1_0.brocade_interface', 'pybind.nos.v7_1_0')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'ether_stats_entry', 'keyval': 'ether_stats_index', 'extra_keyval': 'ether_stats_index, ether_stats_owner'}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, hundredgigabitethernet=hundredgigabitethernet, ether_stats_entry=ether_stats_entry)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def interface_hundredgigabitethernet_spanning_tree_instance_delete(self, hundredgigabitethernet=None, instance=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		NOS: 6.0.2b, 7.0.1a, 7.1.0    

	**Parent Instance Keyword Arg Tuple(s)**:
		:param hundredgigabitethernet: kwarg tuple.
		:type hundredgigabitethernet: (name).

		:param name: tuple arg.
		:type name: (unicode)
		
		.. note::
			* length - [u'3..16']
			* pattern - ((([1-9]|[1-9][0-9]|1[0-9][0-9]|2[0-3][0-9])/)?(([0-9]|[1][0-6]))/([1-9]|[1-9][0-9]|[1-9][0-9][0-9])(:[1-4])?)

	**This Instance Keyword Arg Tuple**:
		:param instance: kwarg tuple.
		:type instance: (id).

		:param id: tuple arg.
		:type id: (int)
		
		.. note::
			* range - ['0..255']

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = [('pybind.nos.v6_0_2b.interface.hundredgigabitethernet', u'hundredgigabitethernet'), ('pybind.nos.v7_0_1a.interface.hundredgigabitethernet', u'hundredgigabitethernet'), ('pybind.nos.v7_1_0.interface.hundredgigabitethernet', u'hundredgigabitethernet')]
    bindings_list = [('pybind.nos.v6_0_2b.interface.hundredgigabitethernet.spanning_tree.instance', 'pybind.nos.v6_0_2b.brocade_interface', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.interface.hundredgigabitethernet.spanning_tree.instance', 'pybind.nos.v7_0_1a.brocade_interface', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.interface.hundredgigabitethernet.spanning_tree.instance', 'pybind.nos.v7_1_0.brocade_interface', 'pybind.nos.v7_1_0')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'instance', 'keyval': 'id', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, hundredgigabitethernet=hundredgigabitethernet, instance=instance)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def interface_hundredgigabitethernet_spanning_tree_vlan_delete(self, hundredgigabitethernet=None, vlan=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		NOS: 6.0.2b, 7.0.1a, 7.1.0    

	**Parent Instance Keyword Arg Tuple(s)**:
		:param hundredgigabitethernet: kwarg tuple.
		:type hundredgigabitethernet: (name).

		:param name: tuple arg.
		:type name: (unicode)
		
		.. note::
			* length - [u'3..16']
			* pattern - ((([1-9]|[1-9][0-9]|1[0-9][0-9]|2[0-3][0-9])/)?(([0-9]|[1][0-6]))/([1-9]|[1-9][0-9]|[1-9][0-9][0-9])(:[1-4])?)

	**This Instance Keyword Arg Tuple**:
		:param vlan: kwarg tuple.
		:type vlan: (id).

		:param id: tuple arg.
		:type id: (long)
		
		.. note::
			* range - ['0..4294967295']

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = [('pybind.nos.v7_1_0.interface.hundredgigabitethernet', u'hundredgigabitethernet'), ('pybind.nos.v6_0_2b.interface.hundredgigabitethernet', u'hundredgigabitethernet'), ('pybind.nos.v7_0_1a.interface.hundredgigabitethernet', u'hundredgigabitethernet')]
    bindings_list = [('pybind.nos.v6_0_2b.interface.hundredgigabitethernet.spanning_tree.vlan', 'pybind.nos.v6_0_2b.brocade_interface', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.interface.hundredgigabitethernet.spanning_tree.vlan', 'pybind.nos.v7_0_1a.brocade_interface', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.interface.hundredgigabitethernet.spanning_tree.vlan', 'pybind.nos.v7_1_0.brocade_interface', 'pybind.nos.v7_1_0')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'vlan', 'keyval': 'id', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, hundredgigabitethernet=hundredgigabitethernet, vlan=vlan)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def interface_hundredgigabitethernet_storm_control_ingress_delete(self, hundredgigabitethernet=None, ingress=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		NOS: 6.0.2b, 7.0.1a, 7.1.0    

	**Parent Instance Keyword Arg Tuple(s)**:
		:param hundredgigabitethernet: kwarg tuple.
		:type hundredgigabitethernet: (name).

		:param name: tuple arg.
		:type name: (unicode)
		
		.. note::
			* length - [u'3..16']
			* pattern - ((([1-9]|[1-9][0-9]|1[0-9][0-9]|2[0-3][0-9])/)?(([0-9]|[1][0-6]))/([1-9]|[1-9][0-9]|[1-9][0-9][0-9])(:[1-4])?)

	**This Instance Keyword Arg Tuple**:
		:param ingress: kwarg tuple.
		:type ingress: (protocol_type, rate_format, rate_bps, rate_percent, bum_action).

		:param protocol_type: tuple arg.
		:type protocol_type: (unicode)
		
		.. note::
			* enum - [u'broadcast', u'unknown-unicast', u'multicast']

		:param rate_format: tuple arg.
		:type rate_format: (unicode)
		
		.. note::
			* enum - [u'limit-bps', u'limit-percent']

		:param rate_bps: tuple arg.
		:type rate_bps: (long)
		
		.. note::
			* range - ['0..18446744073709551615']

		:param rate_percent: tuple arg.
		:type rate_percent: (long)
		
		.. note::
			* range - ['0..4294967295']

		:param bum_action: tuple arg.
		:type bum_action: (unicode)
		
		.. note::
			* enum - [u'monitor', u'shutdown']

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = [('pybind.nos.v7_0_1a.interface.hundredgigabitethernet', u'hundredgigabitethernet'), ('pybind.nos.v7_1_0.interface.hundredgigabitethernet', u'hundredgigabitethernet'), ('pybind.nos.v6_0_2b.interface.hundredgigabitethernet', u'hundredgigabitethernet')]
    bindings_list = [('pybind.nos.v6_0_2b.interface.hundredgigabitethernet.storm_control.ingress', 'pybind.nos.v6_0_2b.brocade_interface', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.interface.hundredgigabitethernet.storm_control.ingress', 'pybind.nos.v7_0_1a.brocade_interface', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.interface.hundredgigabitethernet.storm_control.ingress', 'pybind.nos.v7_1_0.brocade_interface', 'pybind.nos.v7_1_0')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'ingress', 'keyval': 'protocol_type', 'extra_keyval': 'protocol_type, rate_format, rate_bps, rate_percent, bum_action'}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, hundredgigabitethernet=hundredgigabitethernet, ingress=ingress)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def interface_hundredgigabitethernet_switchport_access_rspan_vlan_delete(self, hundredgigabitethernet=None, vlan=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		NOS: 6.0.2b, 7.0.1a, 7.1.0    

	**Parent Instance Keyword Arg Tuple(s)**:
		:param hundredgigabitethernet: kwarg tuple.
		:type hundredgigabitethernet: (name).

		:param name: tuple arg.
		:type name: (unicode)
		
		.. note::
			* length - [u'3..16']
			* pattern - ((([1-9]|[1-9][0-9]|1[0-9][0-9]|2[0-3][0-9])/)?(([0-9]|[1][0-6]))/([1-9]|[1-9][0-9]|[1-9][0-9][0-9])(:[1-4])?)

	**This Instance Keyword Arg Tuple**:
		:param vlan: kwarg tuple.
		:type vlan: (access_vlan_id, access_mac_group).

		:param access_vlan_id: Set the default VLAN for the interface
		:type access_vlan_id: (long)
		
		.. note::
			* range - ['0..4294967295']

		:param access_mac_group: Associate a Mac group with a vlan
		:type access_mac_group: (long)
		
		.. note::
			* range - ['0..4294967295']

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = [('pybind.nos.v7_1_0.interface.hundredgigabitethernet', u'hundredgigabitethernet'), ('pybind.nos.v6_0_2b.interface.hundredgigabitethernet', u'hundredgigabitethernet'), ('pybind.nos.v6_0_2b.interface.hundredgigabitethernet', u'hundredgigabitethernet'), ('pybind.nos.v7_0_1a.interface.hundredgigabitethernet', u'hundredgigabitethernet'), ('pybind.nos.v7_0_1a.interface.hundredgigabitethernet', u'hundredgigabitethernet'), ('pybind.nos.v7_1_0.interface.hundredgigabitethernet', u'hundredgigabitethernet')]
    bindings_list = [('pybind.nos.v6_0_2b.interface.hundredgigabitethernet.switchport.access_mac_group_rspan_vlan_classification.access.vlan', 'pybind.nos.v6_0_2b.brocade_interface', 'pybind.nos.v6_0_2b'), ('pybind.nos.v6_0_2b.interface.hundredgigabitethernet.switchport.access_mac_rspan_vlan_classification.access.vlan', 'pybind.nos.v6_0_2b.brocade_interface', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.interface.hundredgigabitethernet.switchport.access_mac_group_rspan_vlan_classification.access.vlan', 'pybind.nos.v7_0_1a.brocade_interface', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_0_1a.interface.hundredgigabitethernet.switchport.access_mac_rspan_vlan_classification.access.vlan', 'pybind.nos.v7_0_1a.brocade_interface', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.interface.hundredgigabitethernet.switchport.access_mac_group_rspan_vlan_classification.access.vlan', 'pybind.nos.v7_1_0.brocade_interface', 'pybind.nos.v7_1_0'), ('pybind.nos.v7_1_0.interface.hundredgigabitethernet.switchport.access_mac_rspan_vlan_classification.access.vlan', 'pybind.nos.v7_1_0.brocade_interface', 'pybind.nos.v7_1_0')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'vlan', 'keyval': 'access_vlan_id, access_mac_group', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, hundredgigabitethernet=hundredgigabitethernet, vlan=vlan)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def interface_hundredgigabitethernet_switchport_access_vlan_delete(self, hundredgigabitethernet=None, vlan=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		NOS: 6.0.2b, 7.0.1a, 7.1.0    

	**Parent Instance Keyword Arg Tuple(s)**:
		:param hundredgigabitethernet: kwarg tuple.
		:type hundredgigabitethernet: (name).

		:param name: tuple arg.
		:type name: (unicode)
		
		.. note::
			* length - [u'3..16']
			* pattern - ((([1-9]|[1-9][0-9]|1[0-9][0-9]|2[0-3][0-9])/)?(([0-9]|[1][0-6]))/([1-9]|[1-9][0-9]|[1-9][0-9][0-9])(:[1-4])?)

	**This Instance Keyword Arg Tuple**:
		:param vlan: kwarg tuple.
		:type vlan: (access_vlan_id, access_mac_group).

		:param access_vlan_id: Set the default VLAN for the interface
		:type access_vlan_id: (long)
		
		.. note::
			* range - ['0..4294967295']

		:param access_mac_group: Associate a Mac group with a vlan
		:type access_mac_group: (long)
		
		.. note::
			* range - ['0..4294967295']

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = [('pybind.nos.v7_0_1a.interface.hundredgigabitethernet', u'hundredgigabitethernet'), ('pybind.nos.v6_0_2b.interface.hundredgigabitethernet', u'hundredgigabitethernet'), ('pybind.nos.v7_0_1a.interface.hundredgigabitethernet', u'hundredgigabitethernet'), ('pybind.nos.v7_1_0.interface.hundredgigabitethernet', u'hundredgigabitethernet'), ('pybind.nos.v6_0_2b.interface.hundredgigabitethernet', u'hundredgigabitethernet'), ('pybind.nos.v7_1_0.interface.hundredgigabitethernet', u'hundredgigabitethernet')]
    bindings_list = [('pybind.nos.v6_0_2b.interface.hundredgigabitethernet.switchport.access_mac_group_vlan_classification.access.vlan', 'pybind.nos.v6_0_2b.brocade_interface', 'pybind.nos.v6_0_2b'), ('pybind.nos.v6_0_2b.interface.hundredgigabitethernet.switchport.access_mac_vlan_classification.access.vlan', 'pybind.nos.v6_0_2b.brocade_interface', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.interface.hundredgigabitethernet.switchport.access_mac_group_vlan_classification.access.vlan', 'pybind.nos.v7_0_1a.brocade_interface', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_0_1a.interface.hundredgigabitethernet.switchport.access_mac_vlan_classification.access.vlan', 'pybind.nos.v7_0_1a.brocade_interface', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.interface.hundredgigabitethernet.switchport.access_mac_group_vlan_classification.access.vlan', 'pybind.nos.v7_1_0.brocade_interface', 'pybind.nos.v7_1_0'), ('pybind.nos.v7_1_0.interface.hundredgigabitethernet.switchport.access_mac_vlan_classification.access.vlan', 'pybind.nos.v7_1_0.brocade_interface', 'pybind.nos.v7_1_0')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'vlan', 'keyval': 'access_vlan_id, access_mac_address', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, hundredgigabitethernet=hundredgigabitethernet, vlan=vlan)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def interface_hundredgigabitethernet_switchport_port_security_delete(self, hundredgigabitethernet=None, allowed_ouis=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		NOS: 6.0.2b, 7.0.1a, 7.1.0    

	**Parent Instance Keyword Arg Tuple(s)**:
		:param hundredgigabitethernet: kwarg tuple.
		:type hundredgigabitethernet: (name).

		:param name: tuple arg.
		:type name: (unicode)
		
		.. note::
			* length - [u'3..16']
			* pattern - ((([1-9]|[1-9][0-9]|1[0-9][0-9]|2[0-3][0-9])/)?(([0-9]|[1][0-6]))/([1-9]|[1-9][0-9]|[1-9][0-9][0-9])(:[1-4])?)

	**This Instance Keyword Arg Tuple**:
		:param allowed_ouis: kwarg tuple.
		:type allowed_ouis: (oui).

		:param oui: <OUI> OUI in HHHH.HH00.0000 format
		:type oui: (unicode)
		
		.. note::
			* pattern - [0-9a-fA-F]{4}\.[0-9a-fA-F]{2}00\.0000

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = [('pybind.nos.v7_1_0.interface.hundredgigabitethernet', u'hundredgigabitethernet'), ('pybind.nos.v6_0_2b.interface.hundredgigabitethernet', u'hundredgigabitethernet'), ('pybind.nos.v6_0_2b.interface.hundredgigabitethernet', u'hundredgigabitethernet'), ('pybind.nos.v7_0_1a.interface.hundredgigabitethernet', u'hundredgigabitethernet'), ('pybind.nos.v7_1_0.interface.hundredgigabitethernet', u'hundredgigabitethernet'), ('pybind.nos.v7_0_1a.interface.hundredgigabitethernet', u'hundredgigabitethernet')]
    bindings_list = [('pybind.nos.v6_0_2b.interface.hundredgigabitethernet.switchport.port_security.allowed_ouis', 'pybind.nos.v6_0_2b.brocade_interface', 'pybind.nos.v6_0_2b'), ('pybind.nos.v6_0_2b.interface.hundredgigabitethernet.switchport.port_security.port_secutiry_mac_address', 'pybind.nos.v6_0_2b.brocade_interface', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.interface.hundredgigabitethernet.switchport.port_security.allowed_ouis', 'pybind.nos.v7_0_1a.brocade_interface', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_0_1a.interface.hundredgigabitethernet.switchport.port_security.port_secutiry_mac_address', 'pybind.nos.v7_0_1a.brocade_interface', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.interface.hundredgigabitethernet.switchport.port_security.allowed_ouis', 'pybind.nos.v7_1_0.brocade_interface', 'pybind.nos.v7_1_0'), ('pybind.nos.v7_1_0.interface.hundredgigabitethernet.switchport.port_security.port_secutiry_mac_address', 'pybind.nos.v7_1_0.brocade_interface', 'pybind.nos.v7_1_0')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'port_secutiry_mac_address', 'keyval': 'mac_address, port_sec_vlan', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, hundredgigabitethernet=hundredgigabitethernet, allowed_ouis=allowed_ouis)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def interface_hundredgigabitethernet_switchport_port_security_sticky_delete(self, hundredgigabitethernet=None, port_secutiry_mac_address=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		NOS: 6.0.2b, 7.0.1a, 7.1.0    

	**Parent Instance Keyword Arg Tuple(s)**:
		:param hundredgigabitethernet: kwarg tuple.
		:type hundredgigabitethernet: (name).

		:param name: tuple arg.
		:type name: (unicode)
		
		.. note::
			* length - [u'3..16']
			* pattern - ((([1-9]|[1-9][0-9]|1[0-9][0-9]|2[0-3][0-9])/)?(([0-9]|[1][0-6]))/([1-9]|[1-9][0-9]|[1-9][0-9][0-9])(:[1-4])?)

	**This Instance Keyword Arg Tuple**:
		:param port_secutiry_mac_address: kwarg tuple.
		:type port_secutiry_mac_address: (mac_address, port_sec_vlan).

		:param mac_address: Mac Address
		:type mac_address: (unicode)

		:param port_sec_vlan: Forwarding vlan
		:type port_sec_vlan: (long)
		
		.. note::
			* range - ['0..4294967295']

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = [('pybind.nos.v6_0_2b.interface.hundredgigabitethernet', u'hundredgigabitethernet'), ('pybind.nos.v7_0_1a.interface.hundredgigabitethernet', u'hundredgigabitethernet'), ('pybind.nos.v7_1_0.interface.hundredgigabitethernet', u'hundredgigabitethernet')]
    bindings_list = [('pybind.nos.v6_0_2b.interface.hundredgigabitethernet.switchport.port_security.sticky.port_secutiry_mac_address', 'pybind.nos.v6_0_2b.brocade_interface', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.interface.hundredgigabitethernet.switchport.port_security.sticky.port_secutiry_mac_address', 'pybind.nos.v7_0_1a.brocade_interface', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.interface.hundredgigabitethernet.switchport.port_security.sticky.port_secutiry_mac_address', 'pybind.nos.v7_1_0.brocade_interface', 'pybind.nos.v7_1_0')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'port_secutiry_mac_address', 'keyval': 'mac_address, port_sec_vlan', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, hundredgigabitethernet=hundredgigabitethernet, port_secutiry_mac_address=port_secutiry_mac_address)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def interface_hundredgigabitethernet_switchport_private_vlan_association_trunk_delete(self, hundredgigabitethernet=None, trunk=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		NOS: 6.0.2b, 7.0.1a, 7.1.0    

	**Parent Instance Keyword Arg Tuple(s)**:
		:param hundredgigabitethernet: kwarg tuple.
		:type hundredgigabitethernet: (name).

		:param name: tuple arg.
		:type name: (unicode)
		
		.. note::
			* length - [u'3..16']
			* pattern - ((([1-9]|[1-9][0-9]|1[0-9][0-9]|2[0-3][0-9])/)?(([0-9]|[1][0-6]))/([1-9]|[1-9][0-9]|[1-9][0-9][0-9])(:[1-4])?)

	**This Instance Keyword Arg Tuple**:
		:param trunk: kwarg tuple.
		:type trunk: (trunk_pri_pvlan, trunk_sec_pvlan).

		:param trunk_pri_pvlan: Primary vlan id
		:type trunk_pri_pvlan: (long)
		
		.. note::
			* range - ['0..4294967295']

		:param trunk_sec_pvlan: Secondary vlan id 
		:type trunk_sec_pvlan: (long)
		
		.. note::
			* range - ['0..4294967295']

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = [('pybind.nos.v7_1_0.interface.hundredgigabitethernet', u'hundredgigabitethernet'), ('pybind.nos.v7_0_1a.interface.hundredgigabitethernet', u'hundredgigabitethernet'), ('pybind.nos.v6_0_2b.interface.hundredgigabitethernet', u'hundredgigabitethernet')]
    bindings_list = [('pybind.nos.v6_0_2b.interface.hundredgigabitethernet.switchport.private_vlan.association.trunk', 'pybind.nos.v6_0_2b.brocade_interface', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.interface.hundredgigabitethernet.switchport.private_vlan.association.trunk', 'pybind.nos.v7_0_1a.brocade_interface', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.interface.hundredgigabitethernet.switchport.private_vlan.association.trunk', 'pybind.nos.v7_1_0.brocade_interface', 'pybind.nos.v7_1_0')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'trunk', 'keyval': 'trunk_pri_pvlan, trunk_sec_pvlan', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, hundredgigabitethernet=hundredgigabitethernet, trunk=trunk)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def interface_hundredgigabitethernet_switchport_private_vlan_mapping_delete(self, hundredgigabitethernet=None, mapping=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		NOS: 6.0.2b, 7.0.1a, 7.1.0    

	**Parent Instance Keyword Arg Tuple(s)**:
		:param hundredgigabitethernet: kwarg tuple.
		:type hundredgigabitethernet: (name).

		:param name: tuple arg.
		:type name: (unicode)
		
		.. note::
			* length - [u'3..16']
			* pattern - ((([1-9]|[1-9][0-9]|1[0-9][0-9]|2[0-3][0-9])/)?(([0-9]|[1][0-6]))/([1-9]|[1-9][0-9]|[1-9][0-9][0-9])(:[1-4])?)

	**This Instance Keyword Arg Tuple**:
		:param mapping: kwarg tuple.
		:type mapping: (promis_pri_pvlan, oper, promis_sec_pvlan_range).

		:param promis_pri_pvlan: Primary vlan id
		:type promis_pri_pvlan: (long)
		
		.. note::
			* range - ['0..4294967295']

		:param oper: tuple arg.
		:type oper: (unicode)
		
		.. note::
			* enum - [u'add', u'delete']

		:param promis_sec_pvlan_range: Secondary vlan range
		:type promis_sec_pvlan_range: (unicode)
		
		.. note::
			* length - [u'1..253']
			* pattern - (([1-9][0-9]{0,2})|([1-7][0-9]{3})|(80[0-9]{2})|(81[0-8][0-9])|(819[01]))(-(([2-9])|([1-9][0-9]{1,2})|([1-7][0-9]{3})|(80[0-9]{2})|(81[0-8][0-9])|(819[01])))?((,(([2-9])|([1-9][0-9]{1,2})|([1-7][0-9]{3})|(80[0-9]{2})|(81[0-8][0-9])|(819[01]))(-(([3-9])|([1-9][0-9]{1,2})|([1-7][0-9]{3})|(80[0-9]{2})|(81[0-8][0-9])|(819[01])))?)?)*

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = [('pybind.nos.v7_1_0.interface.hundredgigabitethernet', u'hundredgigabitethernet'), ('pybind.nos.v6_0_2b.interface.hundredgigabitethernet', u'hundredgigabitethernet'), ('pybind.nos.v7_0_1a.interface.hundredgigabitethernet', u'hundredgigabitethernet')]
    bindings_list = [('pybind.nos.v6_0_2b.interface.hundredgigabitethernet.switchport.private_vlan.mapping', 'pybind.nos.v6_0_2b.brocade_interface', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.interface.hundredgigabitethernet.switchport.private_vlan.mapping', 'pybind.nos.v7_0_1a.brocade_interface', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.interface.hundredgigabitethernet.switchport.private_vlan.mapping', 'pybind.nos.v7_1_0.brocade_interface', 'pybind.nos.v7_1_0')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'mapping', 'keyval': 'promis_pri_pvlan', 'extra_keyval': 'promis_pri_pvlan, oper, promis_sec_pvlan_range'}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, hundredgigabitethernet=hundredgigabitethernet, mapping=mapping)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def interface_hundredgigabitethernet_switchport_private_vlan_trunk_allowed_vlan_add_delete(self, hundredgigabitethernet=None, add=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		NOS: 6.0.2b, 7.0.1a, 7.1.0    

	**Parent Instance Keyword Arg Tuple(s)**:
		:param hundredgigabitethernet: kwarg tuple.
		:type hundredgigabitethernet: (name).

		:param name: tuple arg.
		:type name: (unicode)
		
		.. note::
			* length - [u'3..16']
			* pattern - ((([1-9]|[1-9][0-9]|1[0-9][0-9]|2[0-3][0-9])/)?(([0-9]|[1][0-6]))/([1-9]|[1-9][0-9]|[1-9][0-9][0-9])(:[1-4])?)

	**This Instance Keyword Arg Tuple**:
		:param add: kwarg tuple.
		:type add: (trunk_vlan_id, trunk_ctag_id).

		:param trunk_vlan_id: tuple arg.
		:type trunk_vlan_id: (long)
		
		.. note::
			* range - ['0..4294967295']

		:param trunk_ctag_id: tuple arg.
		:type trunk_ctag_id: (long)
		
		.. note::
			* range - ['0..4294967295']

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = [('pybind.nos.v7_1_0.interface.hundredgigabitethernet', u'hundredgigabitethernet'), ('pybind.nos.v6_0_2b.interface.hundredgigabitethernet', u'hundredgigabitethernet'), ('pybind.nos.v7_0_1a.interface.hundredgigabitethernet', u'hundredgigabitethernet')]
    bindings_list = [('pybind.nos.v6_0_2b.interface.hundredgigabitethernet.switchport.trunk_private_vlan_classification.private_vlan.trunk.allowed.vlan.add_', 'pybind.nos.v6_0_2b.brocade_interface', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.interface.hundredgigabitethernet.switchport.trunk_private_vlan_classification.private_vlan.trunk.allowed.vlan.add_', 'pybind.nos.v7_0_1a.brocade_interface', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.interface.hundredgigabitethernet.switchport.trunk_private_vlan_classification.private_vlan.trunk.allowed.vlan.add_', 'pybind.nos.v7_1_0.brocade_interface', 'pybind.nos.v7_1_0')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'add', 'keyval': 'trunk_vlan_id, trunk_ctag_id', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, hundredgigabitethernet=hundredgigabitethernet, add=add)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def interface_hundredgigabitethernet_switchport_private_vlan_trunk_allowed_vlan_remove_delete(self, hundredgigabitethernet=None, remove=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		NOS: 6.0.2b, 7.0.1a, 7.1.0    

	**Parent Instance Keyword Arg Tuple(s)**:
		:param hundredgigabitethernet: kwarg tuple.
		:type hundredgigabitethernet: (name).

		:param name: tuple arg.
		:type name: (unicode)
		
		.. note::
			* length - [u'3..16']
			* pattern - ((([1-9]|[1-9][0-9]|1[0-9][0-9]|2[0-3][0-9])/)?(([0-9]|[1][0-6]))/([1-9]|[1-9][0-9]|[1-9][0-9][0-9])(:[1-4])?)

	**This Instance Keyword Arg Tuple**:
		:param remove: kwarg tuple.
		:type remove: (trunk_vlan_id, trunk_ctag_id).

		:param trunk_vlan_id: tuple arg.
		:type trunk_vlan_id: (long)
		
		.. note::
			* range - ['0..4294967295']

		:param trunk_ctag_id: tuple arg.
		:type trunk_ctag_id: (long)
		
		.. note::
			* range - ['0..4294967295']

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = [('pybind.nos.v7_0_1a.interface.hundredgigabitethernet', u'hundredgigabitethernet'), ('pybind.nos.v6_0_2b.interface.hundredgigabitethernet', u'hundredgigabitethernet'), ('pybind.nos.v7_1_0.interface.hundredgigabitethernet', u'hundredgigabitethernet')]
    bindings_list = [('pybind.nos.v6_0_2b.interface.hundredgigabitethernet.switchport.trunk_private_vlan_classification.private_vlan.trunk.allowed.vlan.remove_', 'pybind.nos.v6_0_2b.brocade_interface', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.interface.hundredgigabitethernet.switchport.trunk_private_vlan_classification.private_vlan.trunk.allowed.vlan.remove_', 'pybind.nos.v7_0_1a.brocade_interface', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.interface.hundredgigabitethernet.switchport.trunk_private_vlan_classification.private_vlan.trunk.allowed.vlan.remove_', 'pybind.nos.v7_1_0.brocade_interface', 'pybind.nos.v7_1_0')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'remove', 'keyval': 'trunk_vlan_id, trunk_ctag_id', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, hundredgigabitethernet=hundredgigabitethernet, remove=remove)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def interface_hundredgigabitethernet_switchport_trunk_allowed_rspan_vlan_add_delete(self, hundredgigabitethernet=None, add=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		NOS: 6.0.2b, 7.0.1a, 7.1.0    

	**Parent Instance Keyword Arg Tuple(s)**:
		:param hundredgigabitethernet: kwarg tuple.
		:type hundredgigabitethernet: (name).

		:param name: tuple arg.
		:type name: (unicode)
		
		.. note::
			* length - [u'3..16']
			* pattern - ((([1-9]|[1-9][0-9]|1[0-9][0-9]|2[0-3][0-9])/)?(([0-9]|[1][0-6]))/([1-9]|[1-9][0-9]|[1-9][0-9][0-9])(:[1-4])?)

	**This Instance Keyword Arg Tuple**:
		:param add: kwarg tuple.
		:type add: (trunk_vlan_id, trunk_ctag_id).

		:param trunk_vlan_id: tuple arg.
		:type trunk_vlan_id: (long)
		
		.. note::
			* range - ['0..4294967295']

		:param trunk_ctag_id: tuple arg.
		:type trunk_ctag_id: (long)
		
		.. note::
			* range - ['0..4294967295']

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = [('pybind.nos.v7_1_0.interface.hundredgigabitethernet', u'hundredgigabitethernet'), ('pybind.nos.v6_0_2b.interface.hundredgigabitethernet', u'hundredgigabitethernet'), ('pybind.nos.v7_0_1a.interface.hundredgigabitethernet', u'hundredgigabitethernet')]
    bindings_list = [('pybind.nos.v6_0_2b.interface.hundredgigabitethernet.switchport.trunk.allowed.trunk_rspan_vlan_classification.rspan_vlan.add_', 'pybind.nos.v6_0_2b.brocade_interface', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.interface.hundredgigabitethernet.switchport.trunk.allowed.trunk_rspan_vlan_classification.rspan_vlan.add_', 'pybind.nos.v7_0_1a.brocade_interface', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.interface.hundredgigabitethernet.switchport.trunk.allowed.trunk_rspan_vlan_classification.rspan_vlan.add_', 'pybind.nos.v7_1_0.brocade_interface', 'pybind.nos.v7_1_0')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'add', 'keyval': 'trunk_vlan_id, trunk_ctag_id', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, hundredgigabitethernet=hundredgigabitethernet, add=add)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def interface_hundredgigabitethernet_switchport_trunk_allowed_rspan_vlan_remove_delete(self, hundredgigabitethernet=None, remove=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		NOS: 6.0.2b, 7.0.1a, 7.1.0    

	**Parent Instance Keyword Arg Tuple(s)**:
		:param hundredgigabitethernet: kwarg tuple.
		:type hundredgigabitethernet: (name).

		:param name: tuple arg.
		:type name: (unicode)
		
		.. note::
			* length - [u'3..16']
			* pattern - ((([1-9]|[1-9][0-9]|1[0-9][0-9]|2[0-3][0-9])/)?(([0-9]|[1][0-6]))/([1-9]|[1-9][0-9]|[1-9][0-9][0-9])(:[1-4])?)

	**This Instance Keyword Arg Tuple**:
		:param remove: kwarg tuple.
		:type remove: (trunk_vlan_id, trunk_ctag_id).

		:param trunk_vlan_id: tuple arg.
		:type trunk_vlan_id: (long)
		
		.. note::
			* range - ['0..4294967295']

		:param trunk_ctag_id: tuple arg.
		:type trunk_ctag_id: (long)
		
		.. note::
			* range - ['0..4294967295']

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = [('pybind.nos.v7_0_1a.interface.hundredgigabitethernet', u'hundredgigabitethernet'), ('pybind.nos.v7_1_0.interface.hundredgigabitethernet', u'hundredgigabitethernet'), ('pybind.nos.v6_0_2b.interface.hundredgigabitethernet', u'hundredgigabitethernet')]
    bindings_list = [('pybind.nos.v6_0_2b.interface.hundredgigabitethernet.switchport.trunk.allowed.trunk_rspan_vlan_classification.rspan_vlan.remove_', 'pybind.nos.v6_0_2b.brocade_interface', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.interface.hundredgigabitethernet.switchport.trunk.allowed.trunk_rspan_vlan_classification.rspan_vlan.remove_', 'pybind.nos.v7_0_1a.brocade_interface', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.interface.hundredgigabitethernet.switchport.trunk.allowed.trunk_rspan_vlan_classification.rspan_vlan.remove_', 'pybind.nos.v7_1_0.brocade_interface', 'pybind.nos.v7_1_0')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'remove', 'keyval': 'trunk_vlan_id, trunk_ctag_id', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, hundredgigabitethernet=hundredgigabitethernet, remove=remove)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def interface_hundredgigabitethernet_switchport_trunk_allowed_vlan_add_delete(self, hundredgigabitethernet=None, add=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		NOS: 6.0.2b, 7.0.1a, 7.1.0    

	**Parent Instance Keyword Arg Tuple(s)**:
		:param hundredgigabitethernet: kwarg tuple.
		:type hundredgigabitethernet: (name).

		:param name: tuple arg.
		:type name: (unicode)
		
		.. note::
			* length - [u'3..16']
			* pattern - ((([1-9]|[1-9][0-9]|1[0-9][0-9]|2[0-3][0-9])/)?(([0-9]|[1][0-6]))/([1-9]|[1-9][0-9]|[1-9][0-9][0-9])(:[1-4])?)

	**This Instance Keyword Arg Tuple**:
		:param add: kwarg tuple.
		:type add: (trunk_vlan_id).

		:param trunk_vlan_id: tuple arg.
		:type trunk_vlan_id: (long)
		
		.. note::
			* range - ['0..4294967295']

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = [('pybind.nos.v7_1_0.interface.hundredgigabitethernet', u'hundredgigabitethernet'), ('pybind.nos.v6_0_2b.interface.hundredgigabitethernet', u'hundredgigabitethernet'), ('pybind.nos.v7_0_1a.interface.hundredgigabitethernet', u'hundredgigabitethernet')]
    bindings_list = [('pybind.nos.v6_0_2b.interface.hundredgigabitethernet.switchport.trunk.trunk_vlan_classification.allowed.vlan.add_', 'pybind.nos.v6_0_2b.brocade_interface', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.interface.hundredgigabitethernet.switchport.trunk.trunk_vlan_classification.allowed.vlan.add_', 'pybind.nos.v7_0_1a.brocade_interface', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.interface.hundredgigabitethernet.switchport.trunk.trunk_vlan_classification.allowed.vlan.add_', 'pybind.nos.v7_1_0.brocade_interface', 'pybind.nos.v7_1_0')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'add', 'keyval': 'trunk_vlan_id', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, hundredgigabitethernet=hundredgigabitethernet, add=add)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def interface_hundredgigabitethernet_switchport_trunk_allowed_vlan_remove_delete(self, hundredgigabitethernet=None, remove=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		NOS: 6.0.2b, 7.0.1a, 7.1.0    

	**Parent Instance Keyword Arg Tuple(s)**:
		:param hundredgigabitethernet: kwarg tuple.
		:type hundredgigabitethernet: (name).

		:param name: tuple arg.
		:type name: (unicode)
		
		.. note::
			* length - [u'3..16']
			* pattern - ((([1-9]|[1-9][0-9]|1[0-9][0-9]|2[0-3][0-9])/)?(([0-9]|[1][0-6]))/([1-9]|[1-9][0-9]|[1-9][0-9][0-9])(:[1-4])?)

	**This Instance Keyword Arg Tuple**:
		:param remove: kwarg tuple.
		:type remove: (trunk_vlan_id).

		:param trunk_vlan_id: tuple arg.
		:type trunk_vlan_id: (long)
		
		.. note::
			* range - ['0..4294967295']

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = [('pybind.nos.v7_0_1a.interface.hundredgigabitethernet', u'hundredgigabitethernet'), ('pybind.nos.v7_1_0.interface.hundredgigabitethernet', u'hundredgigabitethernet'), ('pybind.nos.v6_0_2b.interface.hundredgigabitethernet', u'hundredgigabitethernet')]
    bindings_list = [('pybind.nos.v6_0_2b.interface.hundredgigabitethernet.switchport.trunk.trunk_vlan_classification.allowed.vlan.remove_', 'pybind.nos.v6_0_2b.brocade_interface', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.interface.hundredgigabitethernet.switchport.trunk.trunk_vlan_classification.allowed.vlan.remove_', 'pybind.nos.v7_0_1a.brocade_interface', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.interface.hundredgigabitethernet.switchport.trunk.trunk_vlan_classification.allowed.vlan.remove_', 'pybind.nos.v7_1_0.brocade_interface', 'pybind.nos.v7_1_0')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'remove', 'keyval': 'trunk_vlan_id', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, hundredgigabitethernet=hundredgigabitethernet, remove=remove)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def interface_hundredgigabitethernet_track_interface_delete(self, hundredgigabitethernet=None, interface=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		NOS: 6.0.2b, 7.0.1a, 7.1.0    

	**Parent Instance Keyword Arg Tuple(s)**:
		:param hundredgigabitethernet: kwarg tuple.
		:type hundredgigabitethernet: (name).

		:param name: tuple arg.
		:type name: (unicode)
		
		.. note::
			* length - [u'3..16']
			* pattern - ((([1-9]|[1-9][0-9]|1[0-9][0-9]|2[0-3][0-9])/)?(([0-9]|[1][0-6]))/([1-9]|[1-9][0-9]|[1-9][0-9][0-9])(:[1-4])?)

	**This Instance Keyword Arg Tuple**:
		:param interface: kwarg tuple.
		:type interface: (track_interface_type, track_interface_name).

		:param track_interface_type: tuple arg.
		:type track_interface_type: (unicode)
		
		.. note::
			* enum - [u'ethernet', u'port-channel']

		:param track_interface_name: Interface name
		:type track_interface_name: (unicode)
		
		.. note::
			* pattern - (((([1-9]|[1-9][0-9]|1[0-9]{2}|2[0-3][0-9])/)?(([0-9]|1[0-6]))/([1-9]|[1-9][0-9]|[1-9][0-9][0-9])(:[1-4])?)|([1-9]|[1-9][0-9]|[1-9][0-9]{2}|[1-5][0-9]{3}|6[0-1][0-4]{2}))

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = [('pybind.nos.v7_1_0.interface.hundredgigabitethernet', u'hundredgigabitethernet'), ('pybind.nos.v6_0_2b.interface.hundredgigabitethernet', u'hundredgigabitethernet'), ('pybind.nos.v7_0_1a.interface.hundredgigabitethernet', u'hundredgigabitethernet')]
    bindings_list = [('pybind.nos.v6_0_2b.interface.hundredgigabitethernet.track.interface', 'pybind.nos.v6_0_2b.brocade_interface', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.interface.hundredgigabitethernet.track.interface', 'pybind.nos.v7_0_1a.brocade_interface', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.interface.hundredgigabitethernet.track.interface', 'pybind.nos.v7_1_0.brocade_interface', 'pybind.nos.v7_1_0')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'interface', 'keyval': 'track_interface_type, track_interface_name', 'extra_keyval': 'track_interface_type, track_interface_name'}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, hundredgigabitethernet=hundredgigabitethernet, interface=interface)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def interface_hundredgigabitethernet_vlan_classifier_activate_group_delete(self, hundredgigabitethernet=None, group=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		NOS: 6.0.2b, 7.0.1a, 7.1.0    

	**Parent Instance Keyword Arg Tuple(s)**:
		:param hundredgigabitethernet: kwarg tuple.
		:type hundredgigabitethernet: (name).

		:param name: tuple arg.
		:type name: (unicode)
		
		.. note::
			* length - [u'3..16']
			* pattern - ((([1-9]|[1-9][0-9]|1[0-9][0-9]|2[0-3][0-9])/)?(([0-9]|[1][0-6]))/([1-9]|[1-9][0-9]|[1-9][0-9][0-9])(:[1-4])?)

	**This Instance Keyword Arg Tuple**:
		:param group: kwarg tuple.
		:type group: (groupid, vlan).

		:param groupid: tuple arg.
		:type groupid: (long)
		
		.. note::
			* range - ['0..4294967295']

		:param vlan: 1-8191;;Vlan
		:type vlan: (long)
		
		.. note::
			* range - ['0..4294967295']

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = [('pybind.nos.v6_0_2b.interface.hundredgigabitethernet', u'hundredgigabitethernet'), ('pybind.nos.v7_0_1a.interface.hundredgigabitethernet', u'hundredgigabitethernet'), ('pybind.nos.v7_1_0.interface.hundredgigabitethernet', u'hundredgigabitethernet')]
    bindings_list = [('pybind.nos.v6_0_2b.interface.hundredgigabitethernet.vlan.classifier.activate.group', 'pybind.nos.v6_0_2b.brocade_interface', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.interface.hundredgigabitethernet.vlan.classifier.activate.group', 'pybind.nos.v7_0_1a.brocade_interface', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.interface.hundredgigabitethernet.vlan.classifier.activate.group', 'pybind.nos.v7_1_0.brocade_interface', 'pybind.nos.v7_1_0')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'group', 'keyval': 'groupid', 'extra_keyval': 'groupid, vlan'}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, hundredgigabitethernet=hundredgigabitethernet, group=group)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def interface_hundredgigabitethernet_vrrp_group_delete(self, hundredgigabitethernet=None, vrrp=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		NOS: 6.0.2b, 7.0.1a, 7.1.0    

	**Parent Instance Keyword Arg Tuple(s)**:
		:param hundredgigabitethernet: kwarg tuple.
		:type hundredgigabitethernet: (name).

		:param name: tuple arg.
		:type name: (unicode)
		
		.. note::
			* length - [u'3..16']
			* pattern - ((([1-9]|[1-9][0-9]|1[0-9][0-9]|2[0-3][0-9])/)?(([0-9]|[1][0-6]))/([1-9]|[1-9][0-9]|[1-9][0-9][0-9])(:[1-4])?)

	**This Instance Keyword Arg Tuple**:
		:param vrrp: kwarg tuple.
		:type vrrp: (vrid, version).

		:param vrid: tuple arg.
		:type vrid: (int)
		
		.. note::
			* range - ['0..255']

		:param version: Set VRRP version 2/3
		:type version: (int)
		
		.. note::
			* range - ['0..255']

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = [('pybind.nos.v7_1_0.interface.hundredgigabitethernet', u'hundredgigabitethernet'), ('pybind.nos.v6_0_2b.interface.hundredgigabitethernet', u'hundredgigabitethernet'), ('pybind.nos.v7_0_1a.interface.hundredgigabitethernet', u'hundredgigabitethernet')]
    bindings_list = [('pybind.nos.v6_0_2b.interface.hundredgigabitethernet.vrrp', 'pybind.nos.v6_0_2b.brocade_interface', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.interface.hundredgigabitethernet.vrrp', 'pybind.nos.v7_0_1a.brocade_interface', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.interface.hundredgigabitethernet.vrrp', 'pybind.nos.v7_1_0.brocade_interface', 'pybind.nos.v7_1_0')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'vrrp', 'keyval': 'vrid, version', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, hundredgigabitethernet=hundredgigabitethernet, vrrp=vrrp)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def interface_hundredgigabitethernet_vrrp_group_track_delete(self, hundredgigabitethernet=None, vrrp=None, interface=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		NOS: 6.0.2b, 7.0.1a, 7.1.0    

	**Parent Instance Keyword Arg Tuple(s)**:
		:param hundredgigabitethernet: kwarg tuple.
		:type hundredgigabitethernet: (name).

		:param name: tuple arg.
		:type name: (unicode)
		
		.. note::
			* length - [u'3..16']
			* pattern - ((([1-9]|[1-9][0-9]|1[0-9][0-9]|2[0-3][0-9])/)?(([0-9]|[1][0-6]))/([1-9]|[1-9][0-9]|[1-9][0-9][0-9])(:[1-4])?)

		:param vrrp: kwarg tuple.
		:type vrrp: (vrid, version).

		:param vrid: tuple arg.
		:type vrid: (int)
		
		.. note::
			* range - ['0..255']

		:param version: Set VRRP version 2/3
		:type version: (int)
		
		.. note::
			* range - ['0..255']

	**This Instance Keyword Arg Tuple**:
		:param interface: kwarg tuple.
		:type interface: (interface_type, interface_name).

		:param interface_type: tuple arg.
		:type interface_type: (unicode)
		
		.. note::
			* enum - [u'fortygigabitethernet', u'gigabitethernet', u'tengigabitethernet', u'hundredgigabitethernet', u'port-channel']

		:param interface_name: tuple arg.
		:type interface_name: (unicode)
		
		.. note::
			* length - [u'3..16']
			* pattern - ((([1-9]|[1-9][0-9]|1[0-9][0-9]|2[0-3][0-9])/)?(([0-9]|[1][0-6]))/([1-9]|[1-9][0-9]|[1-9][0-9][0-9])(:[1-4])?)

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = [('pybind.nos.v7_1_0.interface.hundredgigabitethernet', u'hundredgigabitethernet'), ('pybind.nos.v7_1_0.interface.hundredgigabitethernet.vrrp', u'vrrp'), ('pybind.nos.v6_0_2b.interface.hundredgigabitethernet', u'hundredgigabitethernet'), ('pybind.nos.v6_0_2b.interface.hundredgigabitethernet.vrrp', u'vrrp'), ('pybind.nos.v7_0_1a.interface.hundredgigabitethernet', u'hundredgigabitethernet'), ('pybind.nos.v7_0_1a.interface.hundredgigabitethernet.vrrp', u'vrrp')]
    bindings_list = [('pybind.nos.v6_0_2b.interface.hundredgigabitethernet.vrrp.track.interface', 'pybind.nos.v6_0_2b.brocade_interface', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.interface.hundredgigabitethernet.vrrp.track.interface', 'pybind.nos.v7_0_1a.brocade_interface', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.interface.hundredgigabitethernet.vrrp.track.interface', 'pybind.nos.v7_1_0.brocade_interface', 'pybind.nos.v7_1_0')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'vrid, version', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'vrid, version', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'vrid, version', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'interface', 'keyval': 'interface_type, interface_name', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, hundredgigabitethernet=hundredgigabitethernet, vrrp=vrrp, interface=interface)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def interface_hundredgigabitethernet_vrrp_group_virtual_ip_delete(self, hundredgigabitethernet=None, vrrp=None, virtual_ip=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		NOS: 6.0.2b, 7.0.1a, 7.1.0    

	**Parent Instance Keyword Arg Tuple(s)**:
		:param hundredgigabitethernet: kwarg tuple.
		:type hundredgigabitethernet: (name).

		:param name: tuple arg.
		:type name: (unicode)
		
		.. note::
			* length - [u'3..16']
			* pattern - ((([1-9]|[1-9][0-9]|1[0-9][0-9]|2[0-3][0-9])/)?(([0-9]|[1][0-6]))/([1-9]|[1-9][0-9]|[1-9][0-9][0-9])(:[1-4])?)

		:param vrrp: kwarg tuple.
		:type vrrp: (vrid, version).

		:param vrid: tuple arg.
		:type vrid: (int)
		
		.. note::
			* range - ['0..255']

		:param version: Set VRRP version 2/3
		:type version: (int)
		
		.. note::
			* range - ['0..255']

	**This Instance Keyword Arg Tuple**:
		:param virtual_ip: kwarg tuple.
		:type virtual_ip: (virtual_ipaddr).

		:param virtual_ipaddr: Virtual IPv4 address in dotted decimal
		:type virtual_ipaddr: (unicode)
		
		.. note::
			* pattern - (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = [('pybind.nos.v6_0_2b.interface.hundredgigabitethernet', u'hundredgigabitethernet'), ('pybind.nos.v6_0_2b.interface.hundredgigabitethernet.vrrp', u'vrrp'), ('pybind.nos.v7_0_1a.interface.hundredgigabitethernet', u'hundredgigabitethernet'), ('pybind.nos.v7_0_1a.interface.hundredgigabitethernet.vrrp', u'vrrp'), ('pybind.nos.v7_1_0.interface.hundredgigabitethernet', u'hundredgigabitethernet'), ('pybind.nos.v7_1_0.interface.hundredgigabitethernet.vrrp', u'vrrp')]
    bindings_list = [('pybind.nos.v6_0_2b.interface.hundredgigabitethernet.vrrp.virtual_ip', 'pybind.nos.v6_0_2b.brocade_interface', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.interface.hundredgigabitethernet.vrrp.virtual_ip', 'pybind.nos.v7_0_1a.brocade_interface', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.interface.hundredgigabitethernet.vrrp.virtual_ip', 'pybind.nos.v7_1_0.brocade_interface', 'pybind.nos.v7_1_0')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'vrid, version', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'vrid, version', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'vrid, version', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'virtual_ip', 'keyval': 'virtual_ipaddr', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, hundredgigabitethernet=hundredgigabitethernet, vrrp=vrrp, virtual_ip=virtual_ip)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def interface_loopback_delete(self, loopback=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		NOS: 6.0.2b, 7.0.1a, 7.1.0
		SLXOS: 16r.1.00b    

	**This Instance Keyword Arg Tuple**:
		:param loopback: kwarg tuple.
		:type loopback: (id).

		:param id: tuple arg.
		:type id: (long)
		
		.. note::
			* range - ['0..4294967295']

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = []
    bindings_list = [('pybind.nos.v6_0_2b.hide_intf_loopback_holder.interface.loopback', 'pybind.nos.v6_0_2b.brocade_intf_loopback', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.hide_intf_loopback_holder.interface.loopback', 'pybind.nos.v7_0_1a.brocade_intf_loopback', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.hide_intf_loopback_holder.interface.loopback', 'pybind.nos.v7_1_0.brocade_intf_loopback', 'pybind.nos.v7_1_0'), ('pybind.slxos.v16r_1_00b.routing_system.interface.loopback', 'pybind.slxos.v16r_1_00b.brocade_common_def', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = []
    bindings_keyval = {'kwargs_key_name': u'loopback', 'keyval': 'id', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, loopback=loopback)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def interface_loopback_ip_address_delete(self, loopback=None, address=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		NOS: 6.0.2b, 7.0.1a, 7.1.0
		SLXOS: 16r.1.00b    

	**Parent Instance Keyword Arg Tuple(s)**:
		:param loopback: kwarg tuple.
		:type loopback: (id).

		:param id: tuple arg.
		:type id: (long)
		
		.. note::
			* range - ['0..4294967295']

	**This Instance Keyword Arg Tuple**:
		:param address: kwarg tuple.
		:type address: (address).

		:param address: A.B.C.D/M IP address in dotted decimal/Mask
		:type address: (unicode)
		
		.. note::
			* pattern - (([1-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.)(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){2}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])/32

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = [('pybind.slxos.v16r_1_00b.routing_system.interface.loopback', u'loopback'), ('pybind.nos.v7_1_0.hide_intf_loopback_holder.interface.loopback', u'loopback'), ('pybind.nos.v6_0_2b.hide_intf_loopback_holder.interface.loopback', u'loopback'), ('pybind.nos.v7_0_1a.hide_intf_loopback_holder.interface.loopback', u'loopback')]
    bindings_list = [('pybind.nos.v6_0_2b.hide_intf_loopback_holder.interface.loopback.ip.ip_config.address', 'pybind.nos.v6_0_2b.brocade_intf_loopback', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.hide_intf_loopback_holder.interface.loopback.ip.ip_config.address', 'pybind.nos.v7_0_1a.brocade_intf_loopback', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.hide_intf_loopback_holder.interface.loopback.ip.ip_config.address', 'pybind.nos.v7_1_0.brocade_intf_loopback', 'pybind.nos.v7_1_0'), ('pybind.slxos.v16r_1_00b.routing_system.interface.loopback.ip.ip_config.address', 'pybind.slxos.v16r_1_00b.brocade_common_def', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'id', 'extra_keyval': ''}, {'keyval': 'id', 'extra_keyval': ''}, {'keyval': 'id', 'extra_keyval': ''}, {'keyval': 'id', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'address', 'keyval': 'address', 'extra_keyval': 'address'}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, loopback=loopback, address=address)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def interface_loopback_ipv6_address_delete(self, loopback=None, ipv6_address=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		NOS: 6.0.2b, 7.0.1a, 7.1.0
		SLXOS: 16r.1.00b    

	**Parent Instance Keyword Arg Tuple(s)**:
		:param loopback: kwarg tuple.
		:type loopback: (id).

		:param id: tuple arg.
		:type id: (long)
		
		.. note::
			* range - ['0..4294967295']

	**This Instance Keyword Arg Tuple**:
		:param ipv6_address: kwarg tuple.
		:type ipv6_address: (address, eui64, anycast).

		:param address: A:B::C:D/LEN;; IPv6 prefix format: xxxx:xxxx/ml, xxxx:xxxx::/ml, xxxx::xx/128
		:type address: (unicode)
		
		.. note::
			* pattern - ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(/(([0-9])|([0-9]{2})|(1[0-1][0-9])|(12[0-8])))

		:param eui64: Configure ipv6 address with an automatically computed EUI-64 interface Id
		:type eui64: (YANGBool)

		:param anycast: Configure ipv6 address as anycast
		:type anycast: (YANGBool)

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = [('pybind.nos.v7_1_0.hide_intf_loopback_holder.interface.loopback', u'loopback'), ('pybind.nos.v7_0_1a.hide_intf_loopback_holder.interface.loopback', u'loopback'), ('pybind.nos.v6_0_2b.hide_intf_loopback_holder.interface.loopback', u'loopback'), ('pybind.slxos.v16r_1_00b.routing_system.interface.loopback', u'loopback')]
    bindings_list = [('pybind.nos.v6_0_2b.hide_intf_loopback_holder.interface.loopback.ipv6.ipv6_config.address.ipv6_address', 'pybind.nos.v6_0_2b.brocade_intf_loopback', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.hide_intf_loopback_holder.interface.loopback.ipv6.ipv6_config.address.ipv6_address', 'pybind.nos.v7_0_1a.brocade_intf_loopback', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.hide_intf_loopback_holder.interface.loopback.ipv6.ipv6_config.address.ipv6_address', 'pybind.nos.v7_1_0.brocade_intf_loopback', 'pybind.nos.v7_1_0'), ('pybind.slxos.v16r_1_00b.routing_system.interface.loopback.ipv6.ipv6_config.address.ipv6_address', 'pybind.slxos.v16r_1_00b.brocade_common_def', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'id', 'extra_keyval': ''}, {'keyval': 'id', 'extra_keyval': ''}, {'keyval': 'id', 'extra_keyval': ''}, {'keyval': 'id', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'ipv6_address', 'keyval': 'address', 'extra_keyval': 'address, eui64, anycast'}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, loopback=loopback, ipv6_address=ipv6_address)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def interface_loopback_isis_auth_key_delete(self, loopback=None, interface_auth_key=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		SLXOS: 16r.1.00b    

	**Parent Instance Keyword Arg Tuple(s)**:
		:param loopback: kwarg tuple.
		:type loopback: (id).

		:param id: tuple arg.
		:type id: (long)
		
		.. note::
			* range - ['0..4294967295']

	**This Instance Keyword Arg Tuple**:
		:param interface_auth_key: kwarg tuple.
		:type interface_auth_key: (interface_auth_key_level, interface_auth_key_str).

		:param interface_auth_key_level: tuple arg.
		:type interface_auth_key_level: (unicode)
		
		.. note::
			* enum - [u'level-2', u'level-1']

		:param interface_auth_key_str: tuple arg.
		:type interface_auth_key_str: (unicode)
		
		.. note::
			* length - [u'1..63']

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = [('pybind.slxos.v16r_1_00b.routing_system.interface.loopback', u'loopback')]
    bindings_list = [('pybind.slxos.v16r_1_00b.routing_system.interface.loopback.intf_isis.interface_isis.interface_auth_key', 'pybind.slxos.v16r_1_00b.brocade_common_def', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'id', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'interface_auth_key', 'keyval': 'interface_auth_key_level', 'extra_keyval': 'interface_auth_key_level, interface_auth_key_str'}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, loopback=loopback, interface_auth_key=interface_auth_key)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def interface_loopback_isis_hello_interval_delete(self, loopback=None, interface_hello_interval=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		SLXOS: 16r.1.00b    

	**Parent Instance Keyword Arg Tuple(s)**:
		:param loopback: kwarg tuple.
		:type loopback: (id).

		:param id: tuple arg.
		:type id: (long)
		
		.. note::
			* range - ['0..4294967295']

	**This Instance Keyword Arg Tuple**:
		:param interface_hello_interval: kwarg tuple.
		:type interface_hello_interval: (interface_hello_interval_level, interface_hello_interval_val).

		:param interface_hello_interval_level: tuple arg.
		:type interface_hello_interval_level: (unicode)
		
		.. note::
			* enum - [u'level-2', u'level-1']

		:param interface_hello_interval_val: tuple arg.
		:type interface_hello_interval_val: (long)
		
		.. note::
			* range - ['0..4294967295']

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = [('pybind.slxos.v16r_1_00b.routing_system.interface.loopback', u'loopback')]
    bindings_list = [('pybind.slxos.v16r_1_00b.routing_system.interface.loopback.intf_isis.interface_isis.interface_hello_interval', 'pybind.slxos.v16r_1_00b.brocade_common_def', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'id', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'interface_hello_interval', 'keyval': 'interface_hello_interval_level', 'extra_keyval': 'interface_hello_interval_level, interface_hello_interval_val'}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, loopback=loopback, interface_hello_interval=interface_hello_interval)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def interface_loopback_isis_hello_multiplier_delete(self, loopback=None, interface_hello_multiplier=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		SLXOS: 16r.1.00b    

	**Parent Instance Keyword Arg Tuple(s)**:
		:param loopback: kwarg tuple.
		:type loopback: (id).

		:param id: tuple arg.
		:type id: (long)
		
		.. note::
			* range - ['0..4294967295']

	**This Instance Keyword Arg Tuple**:
		:param interface_hello_multiplier: kwarg tuple.
		:type interface_hello_multiplier: (interface_hello_multiplier_level, interface_hello_multiplier_val).

		:param interface_hello_multiplier_level: tuple arg.
		:type interface_hello_multiplier_level: (unicode)
		
		.. note::
			* enum - [u'level-2', u'level-1']

		:param interface_hello_multiplier_val: tuple arg.
		:type interface_hello_multiplier_val: (long)
		
		.. note::
			* range - ['0..4294967295']

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = [('pybind.slxos.v16r_1_00b.routing_system.interface.loopback', u'loopback')]
    bindings_list = [('pybind.slxos.v16r_1_00b.routing_system.interface.loopback.intf_isis.interface_isis.interface_hello_multiplier', 'pybind.slxos.v16r_1_00b.brocade_common_def', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'id', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'interface_hello_multiplier', 'keyval': 'interface_hello_multiplier_level', 'extra_keyval': 'interface_hello_multiplier_level, interface_hello_multiplier_val'}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, loopback=loopback, interface_hello_multiplier=interface_hello_multiplier)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def interface_loopback_isis_ipv6_metric_delete(self, loopback=None, interface_ipv6_metric=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		SLXOS: 16r.1.00b    

	**Parent Instance Keyword Arg Tuple(s)**:
		:param loopback: kwarg tuple.
		:type loopback: (id).

		:param id: tuple arg.
		:type id: (long)
		
		.. note::
			* range - ['0..4294967295']

	**This Instance Keyword Arg Tuple**:
		:param interface_ipv6_metric: kwarg tuple.
		:type interface_ipv6_metric: (interface_ipv6_metric_level, interface_ipv6_metric_val).

		:param interface_ipv6_metric_level: tuple arg.
		:type interface_ipv6_metric_level: (unicode)
		
		.. note::
			* enum - [u'level-2', u'level-1']

		:param interface_ipv6_metric_val: tuple arg.
		:type interface_ipv6_metric_val: (long)
		
		.. note::
			* range - ['0..4294967295']

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = [('pybind.slxos.v16r_1_00b.routing_system.interface.loopback', u'loopback')]
    bindings_list = [('pybind.slxos.v16r_1_00b.routing_system.interface.loopback.intf_isis.interface_isis.interface_ipv6.interface_ipv6_metric', 'pybind.slxos.v16r_1_00b.brocade_common_def', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'id', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'interface_ipv6_metric', 'keyval': 'interface_ipv6_metric_level', 'extra_keyval': 'interface_ipv6_metric_level, interface_ipv6_metric_val'}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, loopback=loopback, interface_ipv6_metric=interface_ipv6_metric)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def interface_loopback_isis_metric_delete(self, loopback=None, interface_metric=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		SLXOS: 16r.1.00b    

	**Parent Instance Keyword Arg Tuple(s)**:
		:param loopback: kwarg tuple.
		:type loopback: (id).

		:param id: tuple arg.
		:type id: (long)
		
		.. note::
			* range - ['0..4294967295']

	**This Instance Keyword Arg Tuple**:
		:param interface_metric: kwarg tuple.
		:type interface_metric: (interface_metric_level, interface_metric_val).

		:param interface_metric_level: tuple arg.
		:type interface_metric_level: (unicode)
		
		.. note::
			* enum - [u'level-2', u'level-1']

		:param interface_metric_val: tuple arg.
		:type interface_metric_val: (long)
		
		.. note::
			* range - ['0..4294967295']

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = [('pybind.slxos.v16r_1_00b.routing_system.interface.loopback', u'loopback')]
    bindings_list = [('pybind.slxos.v16r_1_00b.routing_system.interface.loopback.intf_isis.interface_isis.interface_metric', 'pybind.slxos.v16r_1_00b.brocade_common_def', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'id', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'interface_metric', 'keyval': 'interface_metric_level', 'extra_keyval': 'interface_metric_level, interface_metric_val'}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, loopback=loopback, interface_metric=interface_metric)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def interface_management_delete(self, management=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		NOS: 6.0.2b, 7.0.1a, 7.1.0
		SLXOS: 16r.1.00b    

	**This Instance Keyword Arg Tuple**:
		:param management: kwarg tuple.
		:type management: (name).

		:param name: tuple arg.
		:type name: (unicode)
		
		.. note::
			* length - [u'3..16']
			* pattern - ([1-9]|[1-9][0-9]|1[0-9][0-9]|2[0-3][0-9])/([0-9]|[1-9][0-9])

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = []
    bindings_list = [('pybind.nos.v6_0_2b.interface.management', 'pybind.nos.v6_0_2b.brocade_interface', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.interface.management', 'pybind.nos.v7_0_1a.brocade_interface', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.interface.management', 'pybind.nos.v7_1_0.brocade_interface', 'pybind.nos.v7_1_0'), ('pybind.slxos.v16r_1_00b.interface.management', 'pybind.slxos.v16r_1_00b.brocade_interface', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = []
    bindings_keyval = {'kwargs_key_name': u'management', 'keyval': 'name', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, management=management)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def interface_port_channel_delete(self, port_channel=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		NOS: 6.0.2b, 7.0.1a, 7.1.0
		SLXOS: 16r.1.00b    

	**This Instance Keyword Arg Tuple**:
		:param port_channel: kwarg tuple.
		:type port_channel: (name).

		:param name: tuple arg.
		:type name: (long)
		
		.. note::
			* range - ['0..4294967295']

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = []
    bindings_list = [('pybind.nos.v6_0_2b.interface.port_channel', 'pybind.nos.v6_0_2b.brocade_interface', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.interface.port_channel', 'pybind.nos.v7_0_1a.brocade_interface', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.interface.port_channel', 'pybind.nos.v7_1_0.brocade_interface', 'pybind.nos.v7_1_0'), ('pybind.slxos.v16r_1_00b.interface.port_channel', 'pybind.slxos.v16r_1_00b.brocade_interface', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = []
    bindings_keyval = {'kwargs_key_name': u'port_channel', 'keyval': 'name', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, port_channel=port_channel)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def interface_port_channel_ip_access_group_delete(self, port_channel=None, access_group=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		NOS: 6.0.2b, 7.0.1a, 7.1.0
		SLXOS: 16r.1.00b    

	**Parent Instance Keyword Arg Tuple(s)**:
		:param port_channel: kwarg tuple.
		:type port_channel: (name).

		:param name: tuple arg.
		:type name: (long)
		
		.. note::
			* range - ['0..4294967295']

	**This Instance Keyword Arg Tuple**:
		:param access_group: kwarg tuple.
		:type access_group: (ip_access_list, ip_direction, traffic_type).

		:param ip_access_list: ACL_NAME;; Access List Name (Max 63)
		:type ip_access_list: (unicode)
		
		.. note::
			* length - [u'1..63']
			* pattern - [a-zA-Z0-9]{1}([-a-zA-Z0-9_]{0,62})

		:param ip_direction: tuple arg.
		:type ip_direction: (unicode)
		
		.. note::
			* enum - [u'in', u'out']

		:param traffic_type: tuple arg.
		:type traffic_type: (unicode)
		
		.. note::
			* enum - [u'switched', u'routed']

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = [('pybind.nos.v6_0_2b.interface.port_channel', u'port_channel'), ('pybind.nos.v7_1_0.interface.port_channel', u'port_channel'), ('pybind.nos.v7_0_1a.interface.port_channel', u'port_channel'), ('pybind.slxos.v16r_1_00b.interface.port_channel', u'port_channel')]
    bindings_list = [('pybind.nos.v6_0_2b.interface.port_channel.ip_acl_interface.ip.access_group', 'pybind.nos.v6_0_2b.brocade_interface', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.interface.port_channel.ip_acl_interface.ip.access_group', 'pybind.nos.v7_0_1a.brocade_interface', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.interface.port_channel.ip_acl_interface.ip.access_group', 'pybind.nos.v7_1_0.brocade_interface', 'pybind.nos.v7_1_0'), ('pybind.slxos.v16r_1_00b.interface.port_channel.ip_acl_interface.ip.access_group', 'pybind.slxos.v16r_1_00b.brocade_interface', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'access_group', 'keyval': 'ip_access_list, ip_direction', 'extra_keyval': 'ip_access_list, ip_direction, traffic_type'}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, port_channel=port_channel, access_group=access_group)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def interface_port_channel_ip_address_delete(self, port_channel=None, address=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		NOS: 6.0.2b, 7.0.1a, 7.1.0
		SLXOS: 16r.1.00b    

	**Parent Instance Keyword Arg Tuple(s)**:
		:param port_channel: kwarg tuple.
		:type port_channel: (name).

		:param name: tuple arg.
		:type name: (long)
		
		.. note::
			* range - ['0..4294967295']

	**This Instance Keyword Arg Tuple**:
		:param address: kwarg tuple.
		:type address: (address, secondary).

		:param address: A.B.C.D/M IP address in dotted decimal/Mask
		:type address: (unicode)
		
		.. note::
			* pattern - (([1-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.)(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){2}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])/(([1-9])|([1-2][0-9])|(3[0-1]))

		:param secondary: Secondary ip address on the specific interface
		:type secondary: (YANGBool)

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = [('pybind.slxos.v16r_1_00b.interface.port_channel', u'port_channel'), ('pybind.nos.v7_0_1a.interface.port_channel', u'port_channel'), ('pybind.nos.v7_1_0.interface.port_channel', u'port_channel'), ('pybind.nos.v6_0_2b.interface.port_channel', u'port_channel')]
    bindings_list = [('pybind.nos.v6_0_2b.interface.port_channel.ip.hide_ip_holder.ip_config.address', 'pybind.nos.v6_0_2b.brocade_interface', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.interface.port_channel.ip.ip_config.address', 'pybind.nos.v7_0_1a.brocade_interface', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.interface.port_channel.ip.ip_config.address', 'pybind.nos.v7_1_0.brocade_interface', 'pybind.nos.v7_1_0'), ('pybind.slxos.v16r_1_00b.interface.port_channel.ip.hide_ip_holder.ip_config.address', 'pybind.slxos.v16r_1_00b.brocade_interface', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'address', 'keyval': 'address', 'extra_keyval': 'address, secondary'}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, port_channel=port_channel, address=address)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def interface_port_channel_ip_dhcp_relay_delete(self, port_channel=None, servers=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		NOS: 7.0.1a, 7.1.0    

	**Parent Instance Keyword Arg Tuple(s)**:
		:param port_channel: kwarg tuple.
		:type port_channel: (name).

		:param name: tuple arg.
		:type name: (long)
		
		.. note::
			* range - ['0..4294967295']

	**This Instance Keyword Arg Tuple**:
		:param servers: kwarg tuple.
		:type servers: (relay_ip_addr, server_vrf_name).

		:param relay_ip_addr: A.B.C.D;; IP address of the DHCP server
		:type relay_ip_addr: (unicode)
		
		.. note::
			* pattern - (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?

		:param server_vrf_name: VRF name of the DHCP server
		:type server_vrf_name: (unicode)
		
		.. note::
			* length - [u'1..32']
			* pattern - ((([a-zA-Z0-9_]([a-zA-Z0-9\-_]){0,61})?[a-zA-Z0-9]\.)*([a-zA-Z0-9_]([a-zA-Z0-9\-_]){0,61})?[a-zA-Z0-9]\.?)|\.

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = [('pybind.nos.v7_0_1a.interface.port_channel', u'port_channel'), ('pybind.nos.v7_1_0.interface.port_channel', u'port_channel')]
    bindings_list = [('pybind.nos.v7_0_1a.interface.port_channel.ip.interface_po_dhcp_conf.dhcp.relay.servers', 'pybind.nos.v7_0_1a.brocade_interface', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.interface.port_channel.ip.interface_po_dhcp_conf.dhcp.relay.servers', 'pybind.nos.v7_1_0.brocade_interface', 'pybind.nos.v7_1_0')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'servers', 'keyval': 'relay_ip_addr, server_vrf_name', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, port_channel=port_channel, servers=servers)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def interface_port_channel_ip_igmp_static_group_delete(self, port_channel=None, static_group=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		NOS: 7.0.1a, 7.1.0    

	**Parent Instance Keyword Arg Tuple(s)**:
		:param port_channel: kwarg tuple.
		:type port_channel: (name).

		:param name: tuple arg.
		:type name: (long)
		
		.. note::
			* range - ['0..4294967295']

	**This Instance Keyword Arg Tuple**:
		:param static_group: kwarg tuple.
		:type static_group: (sg_addr).

		:param sg_addr: Multicast Address to be Joined in the format A.B.C.D
		:type sg_addr: (unicode)
		
		.. note::
			* pattern - (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = [('pybind.nos.v7_1_0.interface.port_channel', u'port_channel'), ('pybind.nos.v7_0_1a.interface.port_channel', u'port_channel')]
    bindings_list = [('pybind.nos.v7_0_1a.interface.port_channel.ip.igmp_po_intf_cfg.igmp.static_group', 'pybind.nos.v7_0_1a.brocade_interface', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.interface.port_channel.ip.igmp_po_intf_cfg.igmp.static_group', 'pybind.nos.v7_1_0.brocade_interface', 'pybind.nos.v7_1_0')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'static_group', 'keyval': 'sg_addr', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, port_channel=port_channel, static_group=static_group)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def interface_port_channel_ipv6_access_group_delete(self, port_channel=None, access_group=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		NOS: 6.0.2b, 7.0.1a, 7.1.0
		SLXOS: 16r.1.00b    

	**Parent Instance Keyword Arg Tuple(s)**:
		:param port_channel: kwarg tuple.
		:type port_channel: (name).

		:param name: tuple arg.
		:type name: (long)
		
		.. note::
			* range - ['0..4294967295']

	**This Instance Keyword Arg Tuple**:
		:param access_group: kwarg tuple.
		:type access_group: (ipv6_access_list, ip_direction, traffic_type).

		:param ipv6_access_list: ACL_NAME;; Access List Name (Max 63)
		:type ipv6_access_list: (unicode)
		
		.. note::
			* length - [u'1..63']
			* pattern - [a-zA-Z0-9]{1}([-a-zA-Z0-9_]{0,62})

		:param ip_direction: tuple arg.
		:type ip_direction: (unicode)
		
		.. note::
			* enum - [u'in', u'out']

		:param traffic_type: tuple arg.
		:type traffic_type: (unicode)
		
		.. note::
			* enum - [u'switched', u'routed']

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = [('pybind.nos.v7_1_0.interface.port_channel', u'port_channel'), ('pybind.nos.v6_0_2b.interface.port_channel', u'port_channel'), ('pybind.slxos.v16r_1_00b.interface.port_channel', u'port_channel'), ('pybind.nos.v7_0_1a.interface.port_channel', u'port_channel')]
    bindings_list = [('pybind.nos.v6_0_2b.interface.port_channel.ipv6.access_group', 'pybind.nos.v6_0_2b.brocade_interface', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.interface.port_channel.ipv6.access_group', 'pybind.nos.v7_0_1a.brocade_interface', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.interface.port_channel.ipv6.access_group', 'pybind.nos.v7_1_0.brocade_interface', 'pybind.nos.v7_1_0'), ('pybind.slxos.v16r_1_00b.interface.port_channel.ipv6.access_group', 'pybind.slxos.v16r_1_00b.brocade_interface', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'access_group', 'keyval': 'ipv6_access_list, ip_direction', 'extra_keyval': 'ipv6_access_list, ip_direction, traffic_type'}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, port_channel=port_channel, access_group=access_group)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def interface_port_channel_ipv6_address_delete(self, port_channel=None, ipv6_address=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		NOS: 7.0.1a, 7.1.0    

	**Parent Instance Keyword Arg Tuple(s)**:
		:param port_channel: kwarg tuple.
		:type port_channel: (name).

		:param name: tuple arg.
		:type name: (long)
		
		.. note::
			* range - ['0..4294967295']

	**This Instance Keyword Arg Tuple**:
		:param ipv6_address: kwarg tuple.
		:type ipv6_address: (address, secondary, anycast).

		:param address: A:B::C:D/LEN;; IPv6 prefix format: xxxx:xxxx/ml, xxxx:xxxx::/ml, xxxx::xx/128
		:type address: (unicode)
		
		.. note::
			* pattern - ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(/(([0-9])|([0-9]{2})|(1[0-1][0-9])|(12[0-8])))

		:param secondary: Configure Secondary ipv6 address on an interface
		:type secondary: (YANGBool)

		:param anycast: Configure ipv6 address as anycast
		:type anycast: (YANGBool)

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = [('pybind.nos.v7_0_1a.interface.port_channel', u'port_channel'), ('pybind.nos.v7_1_0.interface.port_channel', u'port_channel')]
    bindings_list = [('pybind.nos.v7_0_1a.interface.port_channel.ipv6.ipv6_config.address.ipv6_address', 'pybind.nos.v7_0_1a.brocade_interface', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.interface.port_channel.ipv6.ipv6_config.address.ipv6_address', 'pybind.nos.v7_1_0.brocade_interface', 'pybind.nos.v7_1_0')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'ipv6_address', 'keyval': 'address', 'extra_keyval': 'address, secondary, anycast'}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, port_channel=port_channel, ipv6_address=ipv6_address)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def interface_port_channel_ipv6_dhcp_relay_delete(self, port_channel=None, servers=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		NOS: 7.0.1a, 7.1.0    

	**Parent Instance Keyword Arg Tuple(s)**:
		:param port_channel: kwarg tuple.
		:type port_channel: (name).

		:param name: tuple arg.
		:type name: (long)
		
		.. note::
			* range - ['0..4294967295']

	**This Instance Keyword Arg Tuple**:
		:param servers: kwarg tuple.
		:type servers: (relay_ip_addr, server_vrf_name).

		:param relay_ip_addr: IPv6 address of the DHCPv6 server
		:type relay_ip_addr: (unicode)
		
		.. note::
			* pattern - ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?

		:param server_vrf_name: VRF name of the DHCPv6 server
		:type server_vrf_name: (unicode)
		
		.. note::
			* length - [u'1..32']
			* pattern - ((([a-zA-Z0-9_]([a-zA-Z0-9\-_]){0,61})?[a-zA-Z0-9]\.)*([a-zA-Z0-9_]([a-zA-Z0-9\-_]){0,61})?[a-zA-Z0-9]\.?)|\.

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = [('pybind.nos.v7_1_0.interface.port_channel', u'port_channel'), ('pybind.nos.v7_0_1a.interface.port_channel', u'port_channel')]
    bindings_list = [('pybind.nos.v7_0_1a.interface.port_channel.ipv6.interface_po_dhcp_conf.dhcp.relay.servers', 'pybind.nos.v7_0_1a.brocade_interface', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.interface.port_channel.ipv6.interface_po_dhcp_conf.dhcp.relay.servers', 'pybind.nos.v7_1_0.brocade_interface', 'pybind.nos.v7_1_0')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'servers', 'keyval': 'relay_ip_addr', 'extra_keyval': 'relay_ip_addr, server_vrf_name'}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, port_channel=port_channel, servers=servers)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def interface_port_channel_ipv6_nd_prefix_delete(self, port_channel=None, prefix=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		NOS: 7.0.1a, 7.1.0    

	**Parent Instance Keyword Arg Tuple(s)**:
		:param port_channel: kwarg tuple.
		:type port_channel: (name).

		:param name: tuple arg.
		:type name: (long)
		
		.. note::
			* range - ['0..4294967295']

	**This Instance Keyword Arg Tuple**:
		:param prefix: kwarg tuple.
		:type prefix: (prefix_ipv6_address).

		:param prefix_ipv6_address: tuple arg.
		:type prefix_ipv6_address: (unicode)
		
		.. note::
			* pattern - ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(/(([0-9])|([0-9]{2})|(1[0-1][0-9])|(12[0-8])))

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = [('pybind.nos.v7_0_1a.interface.port_channel', u'port_channel'), ('pybind.nos.v7_1_0.interface.port_channel', u'port_channel')]
    bindings_list = [('pybind.nos.v7_0_1a.interface.port_channel.ipv6.ipv6_nd_ra.ipv6_intf_cmds.nd.prefix', 'pybind.nos.v7_0_1a.brocade_interface', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.interface.port_channel.ipv6.ipv6_nd_ra.ipv6_intf_cmds.nd.prefix', 'pybind.nos.v7_1_0.brocade_interface', 'pybind.nos.v7_1_0')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'prefix', 'keyval': 'prefix_ipv6_address', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, port_channel=port_channel, prefix=prefix)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def interface_port_channel_ipv6_neighbor_delete(self, port_channel=None, neighbor=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		NOS: 7.0.1a, 7.1.0    

	**Parent Instance Keyword Arg Tuple(s)**:
		:param port_channel: kwarg tuple.
		:type port_channel: (name).

		:param name: tuple arg.
		:type name: (long)
		
		.. note::
			* range - ['0..4294967295']

	**This Instance Keyword Arg Tuple**:
		:param neighbor: kwarg tuple.
		:type neighbor: (ipv6_address).

		:param ipv6_address: tuple arg.
		:type ipv6_address: (unicode)
		
		.. note::
			* pattern - ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = [('pybind.nos.v7_0_1a.interface.port_channel', u'port_channel'), ('pybind.nos.v7_1_0.interface.port_channel', u'port_channel')]
    bindings_list = [('pybind.nos.v7_0_1a.interface.port_channel.ipv6.ipv6_nd_ra.ipv6_intf_cmds.neighbor', 'pybind.nos.v7_0_1a.brocade_interface', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.interface.port_channel.ipv6.ipv6_nd_ra.ipv6_intf_cmds.neighbor', 'pybind.nos.v7_1_0.brocade_interface', 'pybind.nos.v7_1_0')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'neighbor', 'keyval': 'ipv6_address', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, port_channel=port_channel, neighbor=neighbor)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def interface_port_channel_ipv6_vrrp_extended_group_delete(self, port_channel=None, vrrpv3e=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		NOS: 6.0.2b
		SLXOS: 16r.1.00b    

	**Parent Instance Keyword Arg Tuple(s)**:
		:param port_channel: kwarg tuple.
		:type port_channel: (name).

		:param name: tuple arg.
		:type name: (long)
		
		.. note::
			* range - ['0..4294967295']

	**This Instance Keyword Arg Tuple**:
		:param vrrpv3e: kwarg tuple.
		:type vrrpv3e: (vrid).

		:param vrid: tuple arg.
		:type vrid: (int)
		
		.. note::
			* range - ['0..255']

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = [('pybind.slxos.v16r_1_00b.interface.port_channel', u'port_channel'), ('pybind.nos.v6_0_2b.interface.port_channel', u'port_channel')]
    bindings_list = [('pybind.nos.v6_0_2b.interface.port_channel.ipv6.hide_vrrpv3_holder.vrrpv3e', 'pybind.nos.v6_0_2b.brocade_interface', 'pybind.nos.v6_0_2b'), ('pybind.slxos.v16r_1_00b.interface.port_channel.ipv6.hide_vrrpv3_holder.vrrpv3e', 'pybind.slxos.v16r_1_00b.brocade_interface', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'vrrpv3e', 'keyval': 'vrid', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, port_channel=port_channel, vrrpv3e=vrrpv3e)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def interface_port_channel_ipv6_vrrp_extended_group_track_delete(self, port_channel=None, vrrpv3e=None, interface=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		NOS: 6.0.2b
		SLXOS: 16r.1.00b    

	**Parent Instance Keyword Arg Tuple(s)**:
		:param port_channel: kwarg tuple.
		:type port_channel: (name).

		:param name: tuple arg.
		:type name: (long)
		
		.. note::
			* range - ['0..4294967295']

		:param vrrpv3e: kwarg tuple.
		:type vrrpv3e: (vrid).

		:param vrid: tuple arg.
		:type vrid: (int)
		
		.. note::
			* range - ['0..255']

	**This Instance Keyword Arg Tuple**:
		:param interface: kwarg tuple.
		:type interface: (interface_type, interface_name).

		:param interface_type: tuple arg.
		:type interface_type: (unicode)
		
		.. note::
			* enum - [u'fortygigabitethernet', u'gigabitethernet', u'tengigabitethernet', u'hundredgigabitethernet', u'port-channel']

		:param interface_name: tuple arg.
		:type interface_name: (unicode)
		
		.. note::
			* length - [u'3..16']
			* pattern - ((([1-9]|[1-9][0-9]|1[0-9][0-9]|2[0-3][0-9])/)?(([0-9]|[1][0-6]))/([1-9]|[1-9][0-9]|[1-9][0-9][0-9])(:[1-4])?)

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = [('pybind.slxos.v16r_1_00b.interface.port_channel', u'port_channel'), ('pybind.slxos.v16r_1_00b.interface.port_channel.ipv6.hide_vrrpv3_holder.vrrpv3e', u'vrrpv3e'), ('pybind.nos.v6_0_2b.interface.port_channel', u'port_channel'), ('pybind.nos.v6_0_2b.interface.port_channel.ipv6.hide_vrrpv3_holder.vrrpv3e', u'vrrpv3e')]
    bindings_list = [('pybind.nos.v6_0_2b.interface.port_channel.ipv6.hide_vrrpv3_holder.vrrpv3e.track.interface', 'pybind.nos.v6_0_2b.brocade_interface', 'pybind.nos.v6_0_2b'), ('pybind.slxos.v16r_1_00b.interface.port_channel.ipv6.hide_vrrpv3_holder.vrrpv3e.track.interface', 'pybind.slxos.v16r_1_00b.brocade_interface', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'vrid', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'vrid', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'interface', 'keyval': 'interface_type, interface_name', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, port_channel=port_channel, vrrpv3e=vrrpv3e, interface=interface)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def interface_port_channel_ipv6_vrrp_extended_group_virtual_ip_delete(self, port_channel=None, vrrpv3e=None, virtual_ip=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		NOS: 6.0.2b
		SLXOS: 16r.1.00b    

	**Parent Instance Keyword Arg Tuple(s)**:
		:param port_channel: kwarg tuple.
		:type port_channel: (name).

		:param name: tuple arg.
		:type name: (long)
		
		.. note::
			* range - ['0..4294967295']

		:param vrrpv3e: kwarg tuple.
		:type vrrpv3e: (vrid).

		:param vrid: tuple arg.
		:type vrid: (int)
		
		.. note::
			* range - ['0..255']

	**This Instance Keyword Arg Tuple**:
		:param virtual_ip: kwarg tuple.
		:type virtual_ip: (virtual_ipaddr).

		:param virtual_ipaddr: Virtual IPv6 address
		:type virtual_ipaddr: (unicode)
		
		.. note::
			* pattern - ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = [('pybind.nos.v6_0_2b.interface.port_channel', u'port_channel'), ('pybind.nos.v6_0_2b.interface.port_channel.ipv6.hide_vrrpv3_holder.vrrpv3e', u'vrrpv3e'), ('pybind.slxos.v16r_1_00b.interface.port_channel', u'port_channel'), ('pybind.slxos.v16r_1_00b.interface.port_channel.ipv6.hide_vrrpv3_holder.vrrpv3e', u'vrrpv3e')]
    bindings_list = [('pybind.nos.v6_0_2b.interface.port_channel.ipv6.hide_vrrpv3_holder.vrrpv3e.virtual_ip', 'pybind.nos.v6_0_2b.brocade_interface', 'pybind.nos.v6_0_2b'), ('pybind.slxos.v16r_1_00b.interface.port_channel.ipv6.hide_vrrpv3_holder.vrrpv3e.virtual_ip', 'pybind.slxos.v16r_1_00b.brocade_interface', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'vrid', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'vrid', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'virtual_ip', 'keyval': 'virtual_ipaddr', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, port_channel=port_channel, vrrpv3e=vrrpv3e, virtual_ip=virtual_ip)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def interface_port_channel_ipv6_vrrp_group_delete(self, port_channel=None, vrrpv3=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		NOS: 6.0.2b, 7.0.1a, 7.1.0
		SLXOS: 16r.1.00b    

	**Parent Instance Keyword Arg Tuple(s)**:
		:param port_channel: kwarg tuple.
		:type port_channel: (name).

		:param name: tuple arg.
		:type name: (long)
		
		.. note::
			* range - ['0..4294967295']

	**This Instance Keyword Arg Tuple**:
		:param vrrpv3: kwarg tuple.
		:type vrrpv3: (vrid).

		:param vrid: tuple arg.
		:type vrid: (int)
		
		.. note::
			* range - ['0..255']

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = [('pybind.nos.v6_0_2b.interface.port_channel', u'port_channel'), ('pybind.nos.v7_1_0.interface.port_channel', u'port_channel'), ('pybind.slxos.v16r_1_00b.interface.port_channel', u'port_channel'), ('pybind.nos.v7_0_1a.interface.port_channel', u'port_channel')]
    bindings_list = [('pybind.nos.v6_0_2b.interface.port_channel.ipv6.hide_vrrpv3_holder.vrrpv3', 'pybind.nos.v6_0_2b.brocade_interface', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.interface.port_channel.ipv6.hide_vrrpv3_holder.vrrpv3', 'pybind.nos.v7_0_1a.brocade_interface', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.interface.port_channel.ipv6.hide_vrrpv3_holder.vrrpv3', 'pybind.nos.v7_1_0.brocade_interface', 'pybind.nos.v7_1_0'), ('pybind.slxos.v16r_1_00b.interface.port_channel.ipv6.hide_vrrpv3_holder.vrrpv3', 'pybind.slxos.v16r_1_00b.brocade_interface', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'vrrpv3', 'keyval': 'vrid', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, port_channel=port_channel, vrrpv3=vrrpv3)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def interface_port_channel_ipv6_vrrp_group_track_delete(self, port_channel=None, vrrpv3=None, interface=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		NOS: 6.0.2b, 7.0.1a, 7.1.0
		SLXOS: 16r.1.00b    

	**Parent Instance Keyword Arg Tuple(s)**:
		:param port_channel: kwarg tuple.
		:type port_channel: (name).

		:param name: tuple arg.
		:type name: (long)
		
		.. note::
			* range - ['0..4294967295']

		:param vrrpv3: kwarg tuple.
		:type vrrpv3: (vrid).

		:param vrid: tuple arg.
		:type vrid: (int)
		
		.. note::
			* range - ['0..255']

	**This Instance Keyword Arg Tuple**:
		:param interface: kwarg tuple.
		:type interface: (interface_type, interface_name).

		:param interface_type: tuple arg.
		:type interface_type: (unicode)
		
		.. note::
			* enum - [u'fortygigabitethernet', u'gigabitethernet', u'tengigabitethernet', u'hundredgigabitethernet', u'port-channel']

		:param interface_name: tuple arg.
		:type interface_name: (unicode)
		
		.. note::
			* length - [u'3..16']
			* pattern - ((([1-9]|[1-9][0-9]|1[0-9][0-9]|2[0-3][0-9])/)?(([0-9]|[1][0-6]))/([1-9]|[1-9][0-9]|[1-9][0-9][0-9])(:[1-4])?)

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = [('pybind.nos.v7_1_0.interface.port_channel', u'port_channel'), ('pybind.nos.v7_1_0.interface.port_channel.ipv6.hide_vrrpv3_holder.vrrpv3', u'vrrpv3'), ('pybind.nos.v7_0_1a.interface.port_channel', u'port_channel'), ('pybind.nos.v7_0_1a.interface.port_channel.ipv6.hide_vrrpv3_holder.vrrpv3', u'vrrpv3'), ('pybind.nos.v6_0_2b.interface.port_channel', u'port_channel'), ('pybind.nos.v6_0_2b.interface.port_channel.ipv6.hide_vrrpv3_holder.vrrpv3', u'vrrpv3'), ('pybind.slxos.v16r_1_00b.interface.port_channel', u'port_channel'), ('pybind.slxos.v16r_1_00b.interface.port_channel.ipv6.hide_vrrpv3_holder.vrrpv3', u'vrrpv3')]
    bindings_list = [('pybind.nos.v6_0_2b.interface.port_channel.ipv6.hide_vrrpv3_holder.vrrpv3.track.interface', 'pybind.nos.v6_0_2b.brocade_interface', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.interface.port_channel.ipv6.hide_vrrpv3_holder.vrrpv3.track.interface', 'pybind.nos.v7_0_1a.brocade_interface', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.interface.port_channel.ipv6.hide_vrrpv3_holder.vrrpv3.track.interface', 'pybind.nos.v7_1_0.brocade_interface', 'pybind.nos.v7_1_0'), ('pybind.slxos.v16r_1_00b.interface.port_channel.ipv6.hide_vrrpv3_holder.vrrpv3.track.interface', 'pybind.slxos.v16r_1_00b.brocade_interface', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'vrid', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'vrid', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'vrid', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'vrid', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'interface', 'keyval': 'interface_type, interface_name', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, port_channel=port_channel, vrrpv3=vrrpv3, interface=interface)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def interface_port_channel_ipv6_vrrp_group_virtual_ip_delete(self, port_channel=None, vrrpv3=None, virtual_ip=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		NOS: 6.0.2b, 7.0.1a, 7.1.0
		SLXOS: 16r.1.00b    

	**Parent Instance Keyword Arg Tuple(s)**:
		:param port_channel: kwarg tuple.
		:type port_channel: (name).

		:param name: tuple arg.
		:type name: (long)
		
		.. note::
			* range - ['0..4294967295']

		:param vrrpv3: kwarg tuple.
		:type vrrpv3: (vrid).

		:param vrid: tuple arg.
		:type vrid: (int)
		
		.. note::
			* range - ['0..255']

	**This Instance Keyword Arg Tuple**:
		:param virtual_ip: kwarg tuple.
		:type virtual_ip: (virtual_ipaddr).

		:param virtual_ipaddr: Virtual IPv6 address
		:type virtual_ipaddr: (unicode)
		
		.. note::
			* pattern - ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = [('pybind.nos.v6_0_2b.interface.port_channel', u'port_channel'), ('pybind.nos.v6_0_2b.interface.port_channel.ipv6.hide_vrrpv3_holder.vrrpv3', u'vrrpv3'), ('pybind.slxos.v16r_1_00b.interface.port_channel', u'port_channel'), ('pybind.slxos.v16r_1_00b.interface.port_channel.ipv6.hide_vrrpv3_holder.vrrpv3', u'vrrpv3'), ('pybind.nos.v7_1_0.interface.port_channel', u'port_channel'), ('pybind.nos.v7_1_0.interface.port_channel.ipv6.hide_vrrpv3_holder.vrrpv3', u'vrrpv3'), ('pybind.nos.v7_0_1a.interface.port_channel', u'port_channel'), ('pybind.nos.v7_0_1a.interface.port_channel.ipv6.hide_vrrpv3_holder.vrrpv3', u'vrrpv3')]
    bindings_list = [('pybind.nos.v6_0_2b.interface.port_channel.ipv6.hide_vrrpv3_holder.vrrpv3.virtual_ip', 'pybind.nos.v6_0_2b.brocade_interface', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.interface.port_channel.ipv6.hide_vrrpv3_holder.vrrpv3.virtual_ip', 'pybind.nos.v7_0_1a.brocade_interface', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.interface.port_channel.ipv6.hide_vrrpv3_holder.vrrpv3.virtual_ip', 'pybind.nos.v7_1_0.brocade_interface', 'pybind.nos.v7_1_0'), ('pybind.slxos.v16r_1_00b.interface.port_channel.ipv6.hide_vrrpv3_holder.vrrpv3.virtual_ip', 'pybind.slxos.v16r_1_00b.brocade_interface', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'vrid', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'vrid', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'vrid', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'vrid', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'virtual_ip', 'keyval': 'virtual_ipaddr', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, port_channel=port_channel, vrrpv3=vrrpv3, virtual_ip=virtual_ip)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def interface_port_channel_logical_interface_port_channel_delete(self, port_channel=None, port_channel_=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		SLXOS: 16r.1.00b    

	**Parent Instance Keyword Arg Tuple(s)**:
		:param port_channel: kwarg tuple.
		:type port_channel: (name).

		:param name: tuple arg.
		:type name: (long)
		
		.. note::
			* range - ['0..4294967295']

	**This Instance Keyword Arg Tuple**:
		:param port_channel_: kwarg tuple.
		:type port_channel_: (pc_instance_id).

		:param pc_instance_id: tuple arg.
		:type pc_instance_id: (unicode)
		
		.. note::
			* pattern - (([1-9]|[1-9][0-9]|[1-9][0-9][0-9]|[1-6][0-9][0-9][0-9])\.([1-9]|[1-9][0-9]||[1-9][0-9][0-9]|[1-9][0-9][0-9][0-9]|1[0-2][0-2][0-8][0-8]))

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = [('pybind.slxos.v16r_1_00b.interface.port_channel', u'port_channel')]
    bindings_list = [('pybind.slxos.v16r_1_00b.interface.port_channel.logical_interface.port_channel', 'pybind.slxos.v16r_1_00b.brocade_interface', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'port_channel_', 'keyval': 'pc_instance_id', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, port_channel=port_channel, port_channel_=port_channel_)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def interface_port_channel_mac_access_group_delete(self, port_channel=None, access_group=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		NOS: 6.0.2b, 7.0.1a, 7.1.0
		SLXOS: 16r.1.00b    

	**Parent Instance Keyword Arg Tuple(s)**:
		:param port_channel: kwarg tuple.
		:type port_channel: (name).

		:param name: tuple arg.
		:type name: (long)
		
		.. note::
			* range - ['0..4294967295']

	**This Instance Keyword Arg Tuple**:
		:param access_group: kwarg tuple.
		:type access_group: (mac_access_list, mac_direction, traffic_type).

		:param mac_access_list: ACL_NAME;; Access List Name (Max 63)
		:type mac_access_list: (unicode)
		
		.. note::
			* length - [u'1..63']
			* pattern - [a-zA-Z0-9]{1}([-a-zA-Z0-9_]{0,62})

		:param mac_direction: tuple arg.
		:type mac_direction: (unicode)
		
		.. note::
			* enum - [u'in', u'out']

		:param traffic_type: tuple arg.
		:type traffic_type: (unicode)
		
		.. note::
			* enum - [u'switched', u'routed']

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = [('pybind.nos.v7_1_0.interface.port_channel', u'port_channel'), ('pybind.nos.v7_0_1a.interface.port_channel', u'port_channel'), ('pybind.slxos.v16r_1_00b.interface.port_channel', u'port_channel'), ('pybind.nos.v6_0_2b.interface.port_channel', u'port_channel')]
    bindings_list = [('pybind.nos.v6_0_2b.interface.port_channel.mac.access_group', 'pybind.nos.v6_0_2b.brocade_interface', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.interface.port_channel.mac.access_group', 'pybind.nos.v7_0_1a.brocade_interface', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.interface.port_channel.mac.access_group', 'pybind.nos.v7_1_0.brocade_interface', 'pybind.nos.v7_1_0'), ('pybind.slxos.v16r_1_00b.interface.port_channel.mac.access_group', 'pybind.slxos.v16r_1_00b.brocade_interface', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'access_group', 'keyval': 'mac_access_list, mac_direction', 'extra_keyval': 'mac_access_list, mac_direction, traffic_type'}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, port_channel=port_channel, access_group=access_group)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def interface_port_channel_port_profile_port_profile_delete(self, port_channel=None, port_to_port_profile_associations=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		NOS: 6.0.2b, 7.0.1a, 7.1.0
		SLXOS: 16r.1.00b    

	**Parent Instance Keyword Arg Tuple(s)**:
		:param port_channel: kwarg tuple.
		:type port_channel: (name).

		:param name: tuple arg.
		:type name: (long)
		
		.. note::
			* range - ['0..4294967295']

	**This Instance Keyword Arg Tuple**:
		:param port_to_port_profile_associations: kwarg tuple.
		:type port_to_port_profile_associations: (port_to_port_profile_association).

		:param port_to_port_profile_association: Port-profile name (Max Size - 128)
		:type port_to_port_profile_association: (unicode)
		
		.. note::
			* pattern - [a-zA-Z]{1}([-a-zA-Z0-9\.\\\\@#\+\*\(\)=\{~\}%<>=$_\[\]\|]{0,127})

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = [('pybind.nos.v6_0_2b.interface.port_channel', u'port_channel'), ('pybind.slxos.v16r_1_00b.interface.port_channel', u'port_channel'), ('pybind.nos.v7_1_0.interface.port_channel', u'port_channel'), ('pybind.nos.v7_0_1a.interface.port_channel', u'port_channel')]
    bindings_list = [('pybind.nos.v6_0_2b.interface.port_channel.port_profile_to_interface_associations.port_profile_port.port_to_port_profile_associations', 'pybind.nos.v6_0_2b.brocade_interface', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.interface.port_channel.port_profile_to_interface_associations.port_profile_port.port_to_port_profile_associations', 'pybind.nos.v7_0_1a.brocade_interface', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.interface.port_channel.port_profile_to_interface_associations.port_profile_port.port_to_port_profile_associations', 'pybind.nos.v7_1_0.brocade_interface', 'pybind.nos.v7_1_0'), ('pybind.slxos.v16r_1_00b.interface.port_channel.port_profile_to_interface_associations.port_profile_port.port_to_port_profile_associations', 'pybind.slxos.v16r_1_00b.brocade_interface', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'port_to_port_profile_associations', 'keyval': 'port_to_port_profile_association', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, port_channel=port_channel, port_to_port_profile_associations=port_to_port_profile_associations)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def interface_port_channel_qos_flowcontrol_pfc_delete(self, port_channel=None, pfc=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		NOS: 6.0.2b, 7.0.1a, 7.1.0
		SLXOS: 16r.1.00b    

	**Parent Instance Keyword Arg Tuple(s)**:
		:param port_channel: kwarg tuple.
		:type port_channel: (name).

		:param name: tuple arg.
		:type name: (long)
		
		.. note::
			* range - ['0..4294967295']

	**This Instance Keyword Arg Tuple**:
		:param pfc: kwarg tuple.
		:type pfc: (pfc_cos).

		:param pfc_cos: 0-7;;CoS value
		:type pfc_cos: (long)
		
		.. note::
			* range - ['-2147483648..2147483647']

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = [('pybind.slxos.v16r_1_00b.interface.port_channel', u'port_channel'), ('pybind.nos.v7_1_0.interface.port_channel', u'port_channel'), ('pybind.nos.v7_0_1a.interface.port_channel', u'port_channel'), ('pybind.nos.v6_0_2b.interface.port_channel', u'port_channel')]
    bindings_list = [('pybind.nos.v6_0_2b.interface.port_channel.qos.flowcontrol.pfc', 'pybind.nos.v6_0_2b.brocade_interface', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.interface.port_channel.qos.flowcontrol.pfc', 'pybind.nos.v7_0_1a.brocade_interface', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.interface.port_channel.qos.flowcontrol.pfc', 'pybind.nos.v7_1_0.brocade_interface', 'pybind.nos.v7_1_0'), ('pybind.slxos.v16r_1_00b.interface.port_channel.qos.flowcontrol.pfc', 'pybind.slxos.v16r_1_00b.brocade_interface', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'pfc', 'keyval': 'pfc_cos', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, port_channel=port_channel, pfc=pfc)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def interface_port_channel_qos_random_detect_traffic_class_delete(self, port_channel=None, traffic_class=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		NOS: 6.0.2b, 7.0.1a, 7.1.0
		SLXOS: 16r.1.00b    

	**Parent Instance Keyword Arg Tuple(s)**:
		:param port_channel: kwarg tuple.
		:type port_channel: (name).

		:param name: tuple arg.
		:type name: (long)
		
		.. note::
			* range - ['0..4294967295']

	**This Instance Keyword Arg Tuple**:
		:param traffic_class: kwarg tuple.
		:type traffic_class: (red_tc_value).

		:param red_tc_value: tuple arg.
		:type red_tc_value: (long)
		
		.. note::
			* range - ['0..4294967295']

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = [('pybind.slxos.v16r_1_00b.interface.port_channel', u'port_channel'), ('pybind.nos.v7_0_1a.interface.port_channel', u'port_channel'), ('pybind.nos.v6_0_2b.interface.port_channel', u'port_channel'), ('pybind.nos.v7_1_0.interface.port_channel', u'port_channel')]
    bindings_list = [('pybind.nos.v6_0_2b.interface.port_channel.qos.random_detect.traffic_class', 'pybind.nos.v6_0_2b.brocade_interface', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.interface.port_channel.qos.random_detect.traffic_class', 'pybind.nos.v7_0_1a.brocade_interface', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.interface.port_channel.qos.random_detect.traffic_class', 'pybind.nos.v7_1_0.brocade_interface', 'pybind.nos.v7_1_0'), ('pybind.slxos.v16r_1_00b.interface.port_channel.qos.random_detect.traffic_class', 'pybind.slxos.v16r_1_00b.brocade_interface', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'traffic_class', 'keyval': 'red_tc_value', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, port_channel=port_channel, traffic_class=traffic_class)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def interface_port_channel_spanning_tree_instance_delete(self, port_channel=None, instance=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		NOS: 6.0.2b, 7.0.1a, 7.1.0
		SLXOS: 16r.1.00b    

	**Parent Instance Keyword Arg Tuple(s)**:
		:param port_channel: kwarg tuple.
		:type port_channel: (name).

		:param name: tuple arg.
		:type name: (long)
		
		.. note::
			* range - ['0..4294967295']

	**This Instance Keyword Arg Tuple**:
		:param instance: kwarg tuple.
		:type instance: (id).

		:param id: tuple arg.
		:type id: (int)
		
		.. note::
			* range - ['0..255']

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = [('pybind.nos.v7_0_1a.interface.port_channel', u'port_channel'), ('pybind.slxos.v16r_1_00b.interface.port_channel', u'port_channel'), ('pybind.nos.v6_0_2b.interface.port_channel', u'port_channel'), ('pybind.nos.v7_1_0.interface.port_channel', u'port_channel')]
    bindings_list = [('pybind.nos.v6_0_2b.interface.port_channel.spanning_tree.instance', 'pybind.nos.v6_0_2b.brocade_interface', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.interface.port_channel.spanning_tree.instance', 'pybind.nos.v7_0_1a.brocade_interface', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.interface.port_channel.spanning_tree.instance', 'pybind.nos.v7_1_0.brocade_interface', 'pybind.nos.v7_1_0'), ('pybind.slxos.v16r_1_00b.interface.port_channel.spanning_tree.instance', 'pybind.slxos.v16r_1_00b.brocade_interface', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'instance', 'keyval': 'id', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, port_channel=port_channel, instance=instance)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def interface_port_channel_spanning_tree_vlan_delete(self, port_channel=None, vlan=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		NOS: 6.0.2b, 7.0.1a, 7.1.0
		SLXOS: 16r.1.00b    

	**Parent Instance Keyword Arg Tuple(s)**:
		:param port_channel: kwarg tuple.
		:type port_channel: (name).

		:param name: tuple arg.
		:type name: (long)
		
		.. note::
			* range - ['0..4294967295']

	**This Instance Keyword Arg Tuple**:
		:param vlan: kwarg tuple.
		:type vlan: (id).

		:param id: tuple arg.
		:type id: (long)
		
		.. note::
			* range - ['0..4294967295']

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = [('pybind.nos.v7_0_1a.interface.port_channel', u'port_channel'), ('pybind.nos.v7_1_0.interface.port_channel', u'port_channel'), ('pybind.nos.v6_0_2b.interface.port_channel', u'port_channel'), ('pybind.slxos.v16r_1_00b.interface.port_channel', u'port_channel')]
    bindings_list = [('pybind.nos.v6_0_2b.interface.port_channel.spanning_tree.vlan', 'pybind.nos.v6_0_2b.brocade_interface', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.interface.port_channel.spanning_tree.vlan', 'pybind.nos.v7_0_1a.brocade_interface', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.interface.port_channel.spanning_tree.vlan', 'pybind.nos.v7_1_0.brocade_interface', 'pybind.nos.v7_1_0'), ('pybind.slxos.v16r_1_00b.interface.port_channel.spanning_tree.vlan', 'pybind.slxos.v16r_1_00b.brocade_interface', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'vlan', 'keyval': 'id', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, port_channel=port_channel, vlan=vlan)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def interface_port_channel_switchport_access_mac_group_vlan_classification_access_vlan_delete(self, port_channel=None, vlan=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		SLXOS: 16r.1.00b    

	**Parent Instance Keyword Arg Tuple(s)**:
		:param port_channel: kwarg tuple.
		:type port_channel: (name).

		:param name: tuple arg.
		:type name: (long)
		
		.. note::
			* range - ['0..4294967295']

	**This Instance Keyword Arg Tuple**:
		:param vlan: kwarg tuple.
		:type vlan: (access_vlan_id, access_mac_group).

		:param access_vlan_id: Set the default VLAN for the interface
		:type access_vlan_id: (long)
		
		.. note::
			* range - ['0..4294967295']

		:param access_mac_group: Associate a Mac group with a vlan
		:type access_mac_group: (long)
		
		.. note::
			* range - ['0..4294967295']

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = [('pybind.slxos.v16r_1_00b.interface.port_channel', u'port_channel')]
    bindings_list = [('pybind.slxos.v16r_1_00b.interface.port_channel.switchport.access_mac_group_vlan_classification.access.vlan', 'pybind.slxos.v16r_1_00b.brocade_interface', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'vlan', 'keyval': 'access_vlan_id, access_mac_group', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, port_channel=port_channel, vlan=vlan)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def interface_port_channel_switchport_access_mac_vlan_classification_access_vlan_delete(self, port_channel=None, vlan=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		SLXOS: 16r.1.00b    

	**Parent Instance Keyword Arg Tuple(s)**:
		:param port_channel: kwarg tuple.
		:type port_channel: (name).

		:param name: tuple arg.
		:type name: (long)
		
		.. note::
			* range - ['0..4294967295']

	**This Instance Keyword Arg Tuple**:
		:param vlan: kwarg tuple.
		:type vlan: (access_vlan_id, access_mac_address).

		:param access_vlan_id: Set the default VLAN for the interface
		:type access_vlan_id: (long)
		
		.. note::
			* range - ['0..4294967295']

		:param access_mac_address: Associate the Mac address with a vlan
		:type access_mac_address: (unicode)
		
		.. note::
			* pattern - [0-9a-fA-F]{4}(\.[0-9a-fA-F]{4}){2}

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = [('pybind.slxos.v16r_1_00b.interface.port_channel', u'port_channel')]
    bindings_list = [('pybind.slxos.v16r_1_00b.interface.port_channel.switchport.access_mac_vlan_classification.access.vlan', 'pybind.slxos.v16r_1_00b.brocade_interface', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'vlan', 'keyval': 'access_vlan_id, access_mac_address', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, port_channel=port_channel, vlan=vlan)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def interface_port_channel_switchport_access_vlan_delete(self, port_channel=None, vlan=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		NOS: 6.0.2b, 7.0.1a, 7.1.0    

	**Parent Instance Keyword Arg Tuple(s)**:
		:param port_channel: kwarg tuple.
		:type port_channel: (name).

		:param name: tuple arg.
		:type name: (long)
		
		.. note::
			* range - ['0..4294967295']

	**This Instance Keyword Arg Tuple**:
		:param vlan: kwarg tuple.
		:type vlan: (access_vlan_id, access_mac_group).

		:param access_vlan_id: Set the default VLAN for the interface
		:type access_vlan_id: (long)
		
		.. note::
			* range - ['0..4294967295']

		:param access_mac_group: Associate a Mac group with a vlan
		:type access_mac_group: (long)
		
		.. note::
			* range - ['0..4294967295']

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = [('pybind.nos.v7_1_0.interface.port_channel', u'port_channel'), ('pybind.nos.v7_1_0.interface.port_channel', u'port_channel'), ('pybind.nos.v7_0_1a.interface.port_channel', u'port_channel'), ('pybind.nos.v6_0_2b.interface.port_channel', u'port_channel'), ('pybind.nos.v7_0_1a.interface.port_channel', u'port_channel'), ('pybind.nos.v6_0_2b.interface.port_channel', u'port_channel')]
    bindings_list = [('pybind.nos.v6_0_2b.interface.port_channel.switchport.access_mac_group_vlan_classification.access.vlan', 'pybind.nos.v6_0_2b.brocade_interface', 'pybind.nos.v6_0_2b'), ('pybind.nos.v6_0_2b.interface.port_channel.switchport.access_mac_vlan_classification.access.vlan', 'pybind.nos.v6_0_2b.brocade_interface', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.interface.port_channel.switchport.access_mac_group_vlan_classification.access.vlan', 'pybind.nos.v7_0_1a.brocade_interface', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_0_1a.interface.port_channel.switchport.access_mac_vlan_classification.access.vlan', 'pybind.nos.v7_0_1a.brocade_interface', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.interface.port_channel.switchport.access_mac_group_vlan_classification.access.vlan', 'pybind.nos.v7_1_0.brocade_interface', 'pybind.nos.v7_1_0'), ('pybind.nos.v7_1_0.interface.port_channel.switchport.access_mac_vlan_classification.access.vlan', 'pybind.nos.v7_1_0.brocade_interface', 'pybind.nos.v7_1_0')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'vlan', 'keyval': 'access_vlan_id, access_mac_group', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, port_channel=port_channel, vlan=vlan)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def interface_port_channel_switchport_port_security_delete(self, port_channel=None, allowed_ouis=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		NOS: 6.0.2b, 7.0.1a, 7.1.0
		SLXOS: 16r.1.00b    

	**Parent Instance Keyword Arg Tuple(s)**:
		:param port_channel: kwarg tuple.
		:type port_channel: (name).

		:param name: tuple arg.
		:type name: (long)
		
		.. note::
			* range - ['0..4294967295']

	**This Instance Keyword Arg Tuple**:
		:param allowed_ouis: kwarg tuple.
		:type allowed_ouis: (oui).

		:param oui: <OUI> OUI in HHHH.HH00.0000 format
		:type oui: (unicode)
		
		.. note::
			* pattern - [0-9a-fA-F]{4}\.[0-9a-fA-F]{2}00\.0000

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = [('pybind.nos.v6_0_2b.interface.port_channel', u'port_channel'), ('pybind.nos.v7_0_1a.interface.port_channel', u'port_channel'), ('pybind.nos.v7_0_1a.interface.port_channel', u'port_channel'), ('pybind.nos.v7_1_0.interface.port_channel', u'port_channel'), ('pybind.nos.v7_1_0.interface.port_channel', u'port_channel'), ('pybind.slxos.v16r_1_00b.interface.port_channel', u'port_channel'), ('pybind.nos.v6_0_2b.interface.port_channel', u'port_channel')]
    bindings_list = [('pybind.nos.v6_0_2b.interface.port_channel.switchport.port_security.allowed_ouis', 'pybind.nos.v6_0_2b.brocade_interface', 'pybind.nos.v6_0_2b'), ('pybind.nos.v6_0_2b.interface.port_channel.switchport.port_security.port_secutiry_mac_address', 'pybind.nos.v6_0_2b.brocade_interface', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.interface.port_channel.switchport.port_security.allowed_ouis', 'pybind.nos.v7_0_1a.brocade_interface', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_0_1a.interface.port_channel.switchport.port_security.port_secutiry_mac_address', 'pybind.nos.v7_0_1a.brocade_interface', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.interface.port_channel.switchport.port_security.allowed_ouis', 'pybind.nos.v7_1_0.brocade_interface', 'pybind.nos.v7_1_0'), ('pybind.nos.v7_1_0.interface.port_channel.switchport.port_security.port_secutiry_mac_address', 'pybind.nos.v7_1_0.brocade_interface', 'pybind.nos.v7_1_0'), ('pybind.slxos.v16r_1_00b.interface.port_channel.switchport.port_security.port_secutiry_mac_address', 'pybind.slxos.v16r_1_00b.brocade_interface', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'port_secutiry_mac_address', 'keyval': 'mac_address, port_sec_vlan', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, port_channel=port_channel, allowed_ouis=allowed_ouis)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def interface_port_channel_switchport_port_security_sticky_delete(self, port_channel=None, port_secutiry_mac_address=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		NOS: 6.0.2b, 7.0.1a, 7.1.0
		SLXOS: 16r.1.00b    

	**Parent Instance Keyword Arg Tuple(s)**:
		:param port_channel: kwarg tuple.
		:type port_channel: (name).

		:param name: tuple arg.
		:type name: (long)
		
		.. note::
			* range - ['0..4294967295']

	**This Instance Keyword Arg Tuple**:
		:param port_secutiry_mac_address: kwarg tuple.
		:type port_secutiry_mac_address: (mac_address, port_sec_vlan).

		:param mac_address: Mac Address
		:type mac_address: (unicode)

		:param port_sec_vlan: Forwarding vlan
		:type port_sec_vlan: (long)
		
		.. note::
			* range - ['0..4294967295']

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = [('pybind.slxos.v16r_1_00b.interface.port_channel', u'port_channel'), ('pybind.nos.v7_0_1a.interface.port_channel', u'port_channel'), ('pybind.nos.v6_0_2b.interface.port_channel', u'port_channel'), ('pybind.nos.v7_1_0.interface.port_channel', u'port_channel')]
    bindings_list = [('pybind.nos.v6_0_2b.interface.port_channel.switchport.port_security.sticky.port_secutiry_mac_address', 'pybind.nos.v6_0_2b.brocade_interface', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.interface.port_channel.switchport.port_security.sticky.port_secutiry_mac_address', 'pybind.nos.v7_0_1a.brocade_interface', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.interface.port_channel.switchport.port_security.sticky.port_secutiry_mac_address', 'pybind.nos.v7_1_0.brocade_interface', 'pybind.nos.v7_1_0'), ('pybind.slxos.v16r_1_00b.interface.port_channel.switchport.port_security.sticky.port_secutiry_mac_address', 'pybind.slxos.v16r_1_00b.brocade_interface', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'port_secutiry_mac_address', 'keyval': 'mac_address, port_sec_vlan', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, port_channel=port_channel, port_secutiry_mac_address=port_secutiry_mac_address)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def interface_port_channel_switchport_private_vlan_association_trunk_delete(self, port_channel=None, trunk=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		NOS: 6.0.2b, 7.0.1a, 7.1.0    

	**Parent Instance Keyword Arg Tuple(s)**:
		:param port_channel: kwarg tuple.
		:type port_channel: (name).

		:param name: tuple arg.
		:type name: (long)
		
		.. note::
			* range - ['0..4294967295']

	**This Instance Keyword Arg Tuple**:
		:param trunk: kwarg tuple.
		:type trunk: (trunk_pri_pvlan, trunk_sec_pvlan).

		:param trunk_pri_pvlan: Primary vlan id
		:type trunk_pri_pvlan: (long)
		
		.. note::
			* range - ['0..4294967295']

		:param trunk_sec_pvlan: Secondary vlan id 
		:type trunk_sec_pvlan: (long)
		
		.. note::
			* range - ['0..4294967295']

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = [('pybind.nos.v7_1_0.interface.port_channel', u'port_channel'), ('pybind.nos.v6_0_2b.interface.port_channel', u'port_channel'), ('pybind.nos.v7_0_1a.interface.port_channel', u'port_channel')]
    bindings_list = [('pybind.nos.v6_0_2b.interface.port_channel.switchport.private_vlan.association.trunk', 'pybind.nos.v6_0_2b.brocade_interface', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.interface.port_channel.switchport.private_vlan.association.trunk', 'pybind.nos.v7_0_1a.brocade_interface', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.interface.port_channel.switchport.private_vlan.association.trunk', 'pybind.nos.v7_1_0.brocade_interface', 'pybind.nos.v7_1_0')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'trunk', 'keyval': 'trunk_pri_pvlan, trunk_sec_pvlan', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, port_channel=port_channel, trunk=trunk)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def interface_port_channel_switchport_private_vlan_mapping_delete(self, port_channel=None, mapping=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		NOS: 6.0.2b, 7.0.1a, 7.1.0    

	**Parent Instance Keyword Arg Tuple(s)**:
		:param port_channel: kwarg tuple.
		:type port_channel: (name).

		:param name: tuple arg.
		:type name: (long)
		
		.. note::
			* range - ['0..4294967295']

	**This Instance Keyword Arg Tuple**:
		:param mapping: kwarg tuple.
		:type mapping: (promis_pri_pvlan, oper, promis_sec_pvlan_range).

		:param promis_pri_pvlan: Primary vlan id
		:type promis_pri_pvlan: (long)
		
		.. note::
			* range - ['0..4294967295']

		:param oper: tuple arg.
		:type oper: (unicode)
		
		.. note::
			* enum - [u'add', u'delete']

		:param promis_sec_pvlan_range: Secondary vlan range
		:type promis_sec_pvlan_range: (unicode)
		
		.. note::
			* length - [u'1..253']
			* pattern - (([1-9][0-9]{0,2})|([1-7][0-9]{3})|(80[0-9]{2})|(81[0-8][0-9])|(819[01]))(-(([2-9])|([1-9][0-9]{1,2})|([1-7][0-9]{3})|(80[0-9]{2})|(81[0-8][0-9])|(819[01])))?((,(([2-9])|([1-9][0-9]{1,2})|([1-7][0-9]{3})|(80[0-9]{2})|(81[0-8][0-9])|(819[01]))(-(([3-9])|([1-9][0-9]{1,2})|([1-7][0-9]{3})|(80[0-9]{2})|(81[0-8][0-9])|(819[01])))?)?)*

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = [('pybind.nos.v6_0_2b.interface.port_channel', u'port_channel'), ('pybind.nos.v7_1_0.interface.port_channel', u'port_channel'), ('pybind.nos.v7_0_1a.interface.port_channel', u'port_channel')]
    bindings_list = [('pybind.nos.v6_0_2b.interface.port_channel.switchport.private_vlan.mapping', 'pybind.nos.v6_0_2b.brocade_interface', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.interface.port_channel.switchport.private_vlan.mapping', 'pybind.nos.v7_0_1a.brocade_interface', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.interface.port_channel.switchport.private_vlan.mapping', 'pybind.nos.v7_1_0.brocade_interface', 'pybind.nos.v7_1_0')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'mapping', 'keyval': 'promis_pri_pvlan', 'extra_keyval': 'promis_pri_pvlan, oper, promis_sec_pvlan_range'}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, port_channel=port_channel, mapping=mapping)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def interface_port_channel_switchport_private_vlan_trunk_allowed_vlan_add_delete(self, port_channel=None, add=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		NOS: 6.0.2b, 7.0.1a, 7.1.0    

	**Parent Instance Keyword Arg Tuple(s)**:
		:param port_channel: kwarg tuple.
		:type port_channel: (name).

		:param name: tuple arg.
		:type name: (long)
		
		.. note::
			* range - ['0..4294967295']

	**This Instance Keyword Arg Tuple**:
		:param add: kwarg tuple.
		:type add: (trunk_vlan_id, trunk_ctag_id).

		:param trunk_vlan_id: tuple arg.
		:type trunk_vlan_id: (long)
		
		.. note::
			* range - ['0..4294967295']

		:param trunk_ctag_id: tuple arg.
		:type trunk_ctag_id: (long)
		
		.. note::
			* range - ['0..4294967295']

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = [('pybind.nos.v6_0_2b.interface.port_channel', u'port_channel'), ('pybind.nos.v7_1_0.interface.port_channel', u'port_channel'), ('pybind.nos.v7_0_1a.interface.port_channel', u'port_channel')]
    bindings_list = [('pybind.nos.v6_0_2b.interface.port_channel.switchport.trunk_private_vlan_classification.private_vlan.trunk.allowed.vlan.add_', 'pybind.nos.v6_0_2b.brocade_interface', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.interface.port_channel.switchport.trunk_private_vlan_classification.private_vlan.trunk.allowed.vlan.add_', 'pybind.nos.v7_0_1a.brocade_interface', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.interface.port_channel.switchport.trunk_private_vlan_classification.private_vlan.trunk.allowed.vlan.add_', 'pybind.nos.v7_1_0.brocade_interface', 'pybind.nos.v7_1_0')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'add', 'keyval': 'trunk_vlan_id, trunk_ctag_id', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, port_channel=port_channel, add=add)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def interface_port_channel_switchport_private_vlan_trunk_allowed_vlan_remove_delete(self, port_channel=None, remove=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		NOS: 6.0.2b, 7.0.1a, 7.1.0    

	**Parent Instance Keyword Arg Tuple(s)**:
		:param port_channel: kwarg tuple.
		:type port_channel: (name).

		:param name: tuple arg.
		:type name: (long)
		
		.. note::
			* range - ['0..4294967295']

	**This Instance Keyword Arg Tuple**:
		:param remove: kwarg tuple.
		:type remove: (trunk_vlan_id, trunk_ctag_id).

		:param trunk_vlan_id: tuple arg.
		:type trunk_vlan_id: (long)
		
		.. note::
			* range - ['0..4294967295']

		:param trunk_ctag_id: tuple arg.
		:type trunk_ctag_id: (long)
		
		.. note::
			* range - ['0..4294967295']

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = [('pybind.nos.v7_1_0.interface.port_channel', u'port_channel'), ('pybind.nos.v7_0_1a.interface.port_channel', u'port_channel'), ('pybind.nos.v6_0_2b.interface.port_channel', u'port_channel')]
    bindings_list = [('pybind.nos.v6_0_2b.interface.port_channel.switchport.trunk_private_vlan_classification.private_vlan.trunk.allowed.vlan.remove_', 'pybind.nos.v6_0_2b.brocade_interface', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.interface.port_channel.switchport.trunk_private_vlan_classification.private_vlan.trunk.allowed.vlan.remove_', 'pybind.nos.v7_0_1a.brocade_interface', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.interface.port_channel.switchport.trunk_private_vlan_classification.private_vlan.trunk.allowed.vlan.remove_', 'pybind.nos.v7_1_0.brocade_interface', 'pybind.nos.v7_1_0')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'remove', 'keyval': 'trunk_vlan_id, trunk_ctag_id', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, port_channel=port_channel, remove=remove)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def interface_port_channel_switchport_trunk_allowed_vlan_add_delete(self, port_channel=None, add=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		NOS: 6.0.2b, 7.0.1a, 7.1.0    

	**Parent Instance Keyword Arg Tuple(s)**:
		:param port_channel: kwarg tuple.
		:type port_channel: (name).

		:param name: tuple arg.
		:type name: (long)
		
		.. note::
			* range - ['0..4294967295']

	**This Instance Keyword Arg Tuple**:
		:param add: kwarg tuple.
		:type add: (trunk_vlan_id).

		:param trunk_vlan_id: tuple arg.
		:type trunk_vlan_id: (long)
		
		.. note::
			* range - ['0..4294967295']

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = [('pybind.nos.v7_1_0.interface.port_channel', u'port_channel'), ('pybind.nos.v6_0_2b.interface.port_channel', u'port_channel'), ('pybind.nos.v7_0_1a.interface.port_channel', u'port_channel')]
    bindings_list = [('pybind.nos.v6_0_2b.interface.port_channel.switchport.trunk.trunk_vlan_classification.allowed.vlan.add_', 'pybind.nos.v6_0_2b.brocade_interface', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.interface.port_channel.switchport.trunk.trunk_vlan_classification.allowed.vlan.add_', 'pybind.nos.v7_0_1a.brocade_interface', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.interface.port_channel.switchport.trunk.trunk_vlan_classification.allowed.vlan.add_', 'pybind.nos.v7_1_0.brocade_interface', 'pybind.nos.v7_1_0')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'add', 'keyval': 'trunk_vlan_id', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, port_channel=port_channel, add=add)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def interface_port_channel_switchport_trunk_allowed_vlan_remove_delete(self, port_channel=None, remove=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		NOS: 6.0.2b, 7.0.1a, 7.1.0    

	**Parent Instance Keyword Arg Tuple(s)**:
		:param port_channel: kwarg tuple.
		:type port_channel: (name).

		:param name: tuple arg.
		:type name: (long)
		
		.. note::
			* range - ['0..4294967295']

	**This Instance Keyword Arg Tuple**:
		:param remove: kwarg tuple.
		:type remove: (trunk_vlan_id).

		:param trunk_vlan_id: tuple arg.
		:type trunk_vlan_id: (long)
		
		.. note::
			* range - ['0..4294967295']

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = [('pybind.nos.v7_0_1a.interface.port_channel', u'port_channel'), ('pybind.nos.v6_0_2b.interface.port_channel', u'port_channel'), ('pybind.nos.v7_1_0.interface.port_channel', u'port_channel')]
    bindings_list = [('pybind.nos.v6_0_2b.interface.port_channel.switchport.trunk.trunk_vlan_classification.allowed.vlan.remove_', 'pybind.nos.v6_0_2b.brocade_interface', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.interface.port_channel.switchport.trunk.trunk_vlan_classification.allowed.vlan.remove_', 'pybind.nos.v7_0_1a.brocade_interface', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.interface.port_channel.switchport.trunk.trunk_vlan_classification.allowed.vlan.remove_', 'pybind.nos.v7_1_0.brocade_interface', 'pybind.nos.v7_1_0')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'remove', 'keyval': 'trunk_vlan_id', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, port_channel=port_channel, remove=remove)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def interface_port_channel_switchport_trunk_trunk_vlan_classification_allowed_vlan_add_delete(self, port_channel=None, add=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		SLXOS: 16r.1.00b    

	**Parent Instance Keyword Arg Tuple(s)**:
		:param port_channel: kwarg tuple.
		:type port_channel: (name).

		:param name: tuple arg.
		:type name: (long)
		
		.. note::
			* range - ['0..4294967295']

	**This Instance Keyword Arg Tuple**:
		:param add: kwarg tuple.
		:type add: (trunk_vlan_id).

		:param trunk_vlan_id: tuple arg.
		:type trunk_vlan_id: (long)
		
		.. note::
			* range - ['0..4294967295']

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = [('pybind.slxos.v16r_1_00b.interface.port_channel', u'port_channel')]
    bindings_list = [('pybind.slxos.v16r_1_00b.interface.port_channel.switchport.trunk.trunk_vlan_classification.allowed.vlan.add_', 'pybind.slxos.v16r_1_00b.brocade_interface', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'add', 'keyval': 'trunk_vlan_id', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, port_channel=port_channel, add=add)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def interface_port_channel_switchport_trunk_trunk_vlan_classification_allowed_vlan_remove_delete(self, port_channel=None, remove=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		SLXOS: 16r.1.00b    

	**Parent Instance Keyword Arg Tuple(s)**:
		:param port_channel: kwarg tuple.
		:type port_channel: (name).

		:param name: tuple arg.
		:type name: (long)
		
		.. note::
			* range - ['0..4294967295']

	**This Instance Keyword Arg Tuple**:
		:param remove: kwarg tuple.
		:type remove: (trunk_vlan_id).

		:param trunk_vlan_id: tuple arg.
		:type trunk_vlan_id: (long)
		
		.. note::
			* range - ['0..4294967295']

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = [('pybind.slxos.v16r_1_00b.interface.port_channel', u'port_channel')]
    bindings_list = [('pybind.slxos.v16r_1_00b.interface.port_channel.switchport.trunk.trunk_vlan_classification.allowed.vlan.remove_', 'pybind.slxos.v16r_1_00b.brocade_interface', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'remove', 'keyval': 'trunk_vlan_id', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, port_channel=port_channel, remove=remove)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def interface_port_channel_track_interface_delete(self, port_channel=None, interface=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		NOS: 6.0.2b, 7.0.1a, 7.1.0
		SLXOS: 16r.1.00b    

	**Parent Instance Keyword Arg Tuple(s)**:
		:param port_channel: kwarg tuple.
		:type port_channel: (name).

		:param name: tuple arg.
		:type name: (long)
		
		.. note::
			* range - ['0..4294967295']

	**This Instance Keyword Arg Tuple**:
		:param interface: kwarg tuple.
		:type interface: (track_interface_type, track_interface_name).

		:param track_interface_type: tuple arg.
		:type track_interface_type: (unicode)
		
		.. note::
			* enum - [u'ethernet', u'port-channel']

		:param track_interface_name: Interface name
		:type track_interface_name: (unicode)
		
		.. note::
			* pattern - (((([1-9]|[1-9][0-9]|1[0-9]{2}|2[0-3][0-9])/)?(([0-9]|1[0-6]))/([1-9]|[1-9][0-9]|[1-9][0-9][0-9])(:[1-4])?)|([1-9]|[1-9][0-9]|[1-9][0-9]{2}|[1-5][0-9]{3}|6[0-1][0-4]{2}))

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = [('pybind.nos.v6_0_2b.interface.port_channel', u'port_channel'), ('pybind.slxos.v16r_1_00b.interface.port_channel', u'port_channel'), ('pybind.nos.v7_0_1a.interface.port_channel', u'port_channel'), ('pybind.nos.v7_1_0.interface.port_channel', u'port_channel')]
    bindings_list = [('pybind.nos.v6_0_2b.interface.port_channel.track.interface', 'pybind.nos.v6_0_2b.brocade_interface', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.interface.port_channel.track.interface', 'pybind.nos.v7_0_1a.brocade_interface', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.interface.port_channel.track.interface', 'pybind.nos.v7_1_0.brocade_interface', 'pybind.nos.v7_1_0'), ('pybind.slxos.v16r_1_00b.interface.port_channel.track.interface', 'pybind.slxos.v16r_1_00b.brocade_interface', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'interface', 'keyval': 'track_interface_type, track_interface_name', 'extra_keyval': 'track_interface_type, track_interface_name'}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, port_channel=port_channel, interface=interface)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def interface_port_channel_vlan_classifier_activate_group_delete(self, port_channel=None, group=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		NOS: 6.0.2b, 7.0.1a, 7.1.0    

	**Parent Instance Keyword Arg Tuple(s)**:
		:param port_channel: kwarg tuple.
		:type port_channel: (name).

		:param name: tuple arg.
		:type name: (long)
		
		.. note::
			* range - ['0..4294967295']

	**This Instance Keyword Arg Tuple**:
		:param group: kwarg tuple.
		:type group: (groupid, vlan).

		:param groupid: tuple arg.
		:type groupid: (long)
		
		.. note::
			* range - ['0..4294967295']

		:param vlan: 1-8191;;Vlan
		:type vlan: (long)
		
		.. note::
			* range - ['0..4294967295']

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = [('pybind.nos.v7_0_1a.interface.port_channel', u'port_channel'), ('pybind.nos.v7_1_0.interface.port_channel', u'port_channel'), ('pybind.nos.v6_0_2b.interface.port_channel', u'port_channel')]
    bindings_list = [('pybind.nos.v6_0_2b.interface.port_channel.vlan.classifier.activate.group', 'pybind.nos.v6_0_2b.brocade_interface', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.interface.port_channel.vlan.classifier.activate.group', 'pybind.nos.v7_0_1a.brocade_interface', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.interface.port_channel.vlan.classifier.activate.group', 'pybind.nos.v7_1_0.brocade_interface', 'pybind.nos.v7_1_0')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'group', 'keyval': 'groupid', 'extra_keyval': 'groupid, vlan'}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, port_channel=port_channel, group=group)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def interface_port_channel_vrrp_group_delete(self, port_channel=None, vrrp=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		NOS: 6.0.2b, 7.0.1a, 7.1.0
		SLXOS: 16r.1.00b    

	**Parent Instance Keyword Arg Tuple(s)**:
		:param port_channel: kwarg tuple.
		:type port_channel: (name).

		:param name: tuple arg.
		:type name: (long)
		
		.. note::
			* range - ['0..4294967295']

	**This Instance Keyword Arg Tuple**:
		:param vrrp: kwarg tuple.
		:type vrrp: (vrid, version).

		:param vrid: tuple arg.
		:type vrid: (int)
		
		.. note::
			* range - ['0..255']

		:param version: Set VRRP version 2/3
		:type version: (int)
		
		.. note::
			* range - ['0..255']

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = [('pybind.nos.v7_0_1a.interface.port_channel', u'port_channel'), ('pybind.nos.v7_1_0.interface.port_channel', u'port_channel'), ('pybind.nos.v6_0_2b.interface.port_channel', u'port_channel'), ('pybind.slxos.v16r_1_00b.interface.port_channel', u'port_channel')]
    bindings_list = [('pybind.nos.v6_0_2b.interface.port_channel.hide_vrrp_holer.vrrp', 'pybind.nos.v6_0_2b.brocade_interface', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.interface.port_channel.vrrp', 'pybind.nos.v7_0_1a.brocade_interface', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.interface.port_channel.vrrp', 'pybind.nos.v7_1_0.brocade_interface', 'pybind.nos.v7_1_0'), ('pybind.slxos.v16r_1_00b.interface.port_channel.hide_vrrp_holer.vrrp', 'pybind.slxos.v16r_1_00b.brocade_interface', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'vrrp', 'keyval': 'vrid, version', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, port_channel=port_channel, vrrp=vrrp)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def interface_port_channel_vrrp_group_track_delete(self, port_channel=None, vrrp=None, interface=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		NOS: 6.0.2b, 7.0.1a, 7.1.0
		SLXOS: 16r.1.00b    

	**Parent Instance Keyword Arg Tuple(s)**:
		:param port_channel: kwarg tuple.
		:type port_channel: (name).

		:param name: tuple arg.
		:type name: (long)
		
		.. note::
			* range - ['0..4294967295']

		:param vrrp: kwarg tuple.
		:type vrrp: (vrid, version).

		:param vrid: tuple arg.
		:type vrid: (int)
		
		.. note::
			* range - ['0..255']

		:param version: Set VRRP version 2/3
		:type version: (int)
		
		.. note::
			* range - ['0..255']

	**This Instance Keyword Arg Tuple**:
		:param interface: kwarg tuple.
		:type interface: (interface_type, interface_name).

		:param interface_type: tuple arg.
		:type interface_type: (unicode)
		
		.. note::
			* enum - [u'fortygigabitethernet', u'gigabitethernet', u'tengigabitethernet', u'hundredgigabitethernet', u'port-channel']

		:param interface_name: tuple arg.
		:type interface_name: (unicode)
		
		.. note::
			* length - [u'3..16']
			* pattern - ((([1-9]|[1-9][0-9]|1[0-9][0-9]|2[0-3][0-9])/)?(([0-9]|[1][0-6]))/([1-9]|[1-9][0-9]|[1-9][0-9][0-9])(:[1-4])?)

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = [('pybind.nos.v7_0_1a.interface.port_channel', u'port_channel'), ('pybind.nos.v7_0_1a.interface.port_channel.vrrp', u'vrrp'), ('pybind.slxos.v16r_1_00b.interface.port_channel', u'port_channel'), ('pybind.slxos.v16r_1_00b.interface.port_channel.hide_vrrp_holer.vrrp', u'vrrp'), ('pybind.nos.v6_0_2b.interface.port_channel', u'port_channel'), ('pybind.nos.v6_0_2b.interface.port_channel.hide_vrrp_holer.vrrp', u'vrrp'), ('pybind.nos.v7_1_0.interface.port_channel', u'port_channel'), ('pybind.nos.v7_1_0.interface.port_channel.vrrp', u'vrrp')]
    bindings_list = [('pybind.nos.v6_0_2b.interface.port_channel.hide_vrrp_holer.vrrp.track.interface', 'pybind.nos.v6_0_2b.brocade_interface', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.interface.port_channel.vrrp.track.interface', 'pybind.nos.v7_0_1a.brocade_interface', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.interface.port_channel.vrrp.track.interface', 'pybind.nos.v7_1_0.brocade_interface', 'pybind.nos.v7_1_0'), ('pybind.slxos.v16r_1_00b.interface.port_channel.hide_vrrp_holer.vrrp.track.interface', 'pybind.slxos.v16r_1_00b.brocade_interface', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'vrid, version', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'vrid, version', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'vrid, version', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'vrid, version', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'interface', 'keyval': 'interface_type, interface_name', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, port_channel=port_channel, vrrp=vrrp, interface=interface)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def interface_port_channel_vrrp_group_virtual_ip_delete(self, port_channel=None, vrrp=None, virtual_ip=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		NOS: 6.0.2b, 7.0.1a, 7.1.0
		SLXOS: 16r.1.00b    

	**Parent Instance Keyword Arg Tuple(s)**:
		:param port_channel: kwarg tuple.
		:type port_channel: (name).

		:param name: tuple arg.
		:type name: (long)
		
		.. note::
			* range - ['0..4294967295']

		:param vrrp: kwarg tuple.
		:type vrrp: (vrid, version).

		:param vrid: tuple arg.
		:type vrid: (int)
		
		.. note::
			* range - ['0..255']

		:param version: Set VRRP version 2/3
		:type version: (int)
		
		.. note::
			* range - ['0..255']

	**This Instance Keyword Arg Tuple**:
		:param virtual_ip: kwarg tuple.
		:type virtual_ip: (virtual_ipaddr).

		:param virtual_ipaddr: Virtual IPv4 address
		:type virtual_ipaddr: (unicode)
		
		.. note::
			* pattern - (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = [('pybind.nos.v7_0_1a.interface.port_channel', u'port_channel'), ('pybind.nos.v7_0_1a.interface.port_channel.vrrp', u'vrrp'), ('pybind.nos.v6_0_2b.interface.port_channel', u'port_channel'), ('pybind.nos.v6_0_2b.interface.port_channel.hide_vrrp_holer.vrrp', u'vrrp'), ('pybind.slxos.v16r_1_00b.interface.port_channel', u'port_channel'), ('pybind.slxos.v16r_1_00b.interface.port_channel.hide_vrrp_holer.vrrp', u'vrrp'), ('pybind.nos.v7_1_0.interface.port_channel', u'port_channel'), ('pybind.nos.v7_1_0.interface.port_channel.vrrp', u'vrrp')]
    bindings_list = [('pybind.nos.v6_0_2b.interface.port_channel.hide_vrrp_holer.vrrp.virtual_ip', 'pybind.nos.v6_0_2b.brocade_interface', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.interface.port_channel.vrrp.virtual_ip', 'pybind.nos.v7_0_1a.brocade_interface', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.interface.port_channel.vrrp.virtual_ip', 'pybind.nos.v7_1_0.brocade_interface', 'pybind.nos.v7_1_0'), ('pybind.slxos.v16r_1_00b.interface.port_channel.hide_vrrp_holer.vrrp.virtual_ip', 'pybind.slxos.v16r_1_00b.brocade_interface', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'vrid, version', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'vrid, version', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'vrid, version', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'vrid, version', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'virtual_ip', 'keyval': 'virtual_ipaddr', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, port_channel=port_channel, vrrp=vrrp, virtual_ip=virtual_ip)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def interface_tengigabitethernet_ip_access_group_delete(self, tengigabitethernet=None, access_group=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		NOS: 6.0.2b, 7.0.1a, 7.1.0    

	**Parent Instance Keyword Arg Tuple(s)**:
		:param tengigabitethernet: kwarg tuple.
		:type tengigabitethernet: (name).

		:param name: tuple arg.
		:type name: (unicode)
		
		.. note::
			* length - [u'3..16']
			* pattern - ((([1-9]|[1-9][0-9]|1[0-9][0-9]|2[0-3][0-9])/)?(([0-9]|[1][0-6]))/([1-9]|[1-9][0-9]|[1-9][0-9][0-9])(:[1-4])?)

	**This Instance Keyword Arg Tuple**:
		:param access_group: kwarg tuple.
		:type access_group: (ip_access_list, ip_direction, traffic_type).

		:param ip_access_list: ACL_NAME;; Access List Name (Max 63)
		:type ip_access_list: (unicode)
		
		.. note::
			* length - [u'1..63']
			* pattern - [a-zA-Z0-9]{1}([-a-zA-Z0-9_]{0,62})

		:param ip_direction: tuple arg.
		:type ip_direction: (unicode)
		
		.. note::
			* enum - [u'in', u'out']

		:param traffic_type: tuple arg.
		:type traffic_type: (unicode)
		
		.. note::
			* enum - [u'switched', u'routed']

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = [('pybind.nos.v6_0_2b.interface.tengigabitethernet', u'tengigabitethernet'), ('pybind.nos.v7_0_1a.interface.tengigabitethernet', u'tengigabitethernet'), ('pybind.nos.v7_1_0.interface.tengigabitethernet', u'tengigabitethernet')]
    bindings_list = [('pybind.nos.v6_0_2b.interface.tengigabitethernet.ip_acl_interface.ip.access_group', 'pybind.nos.v6_0_2b.brocade_interface', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.interface.tengigabitethernet.ip_acl_interface.ip.access_group', 'pybind.nos.v7_0_1a.brocade_interface', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.interface.tengigabitethernet.ip_acl_interface.ip.access_group', 'pybind.nos.v7_1_0.brocade_interface', 'pybind.nos.v7_1_0')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'access_group', 'keyval': 'ip_access_list, ip_direction', 'extra_keyval': 'ip_access_list, ip_direction, traffic_type'}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, tengigabitethernet=tengigabitethernet, access_group=access_group)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def interface_tengigabitethernet_ip_address_delete(self, tengigabitethernet=None, address=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		NOS: 6.0.2b, 7.0.1a, 7.1.0    

	**Parent Instance Keyword Arg Tuple(s)**:
		:param tengigabitethernet: kwarg tuple.
		:type tengigabitethernet: (name).

		:param name: tuple arg.
		:type name: (unicode)
		
		.. note::
			* length - [u'3..16']
			* pattern - ((([1-9]|[1-9][0-9]|1[0-9][0-9]|2[0-3][0-9])/)?(([0-9]|[1][0-6]))/([1-9]|[1-9][0-9]|[1-9][0-9][0-9])(:[1-4])?)

	**This Instance Keyword Arg Tuple**:
		:param address: kwarg tuple.
		:type address: (address, secondary, ospf_passive, ospf_ignore).

		:param address: A.B.C.D/M IP address in dotted decimal/Mask
		:type address: (unicode)
		
		.. note::
			* pattern - (([1-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.)(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){2}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])/(([1-9])|([1-2][0-9])|(3[0-1]))

		:param secondary: Secondary ip address on the specific interface
		:type secondary: (YANGBool)

		:param ospf_passive: ospf pasive address on the specific interface
		:type ospf_passive: (YANGBool)

		:param ospf_ignore: ospf active address on the specific interface
		:type ospf_ignore: (YANGBool)

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = [('pybind.nos.v7_1_0.interface.tengigabitethernet', u'tengigabitethernet'), ('pybind.nos.v6_0_2b.interface.tengigabitethernet', u'tengigabitethernet'), ('pybind.nos.v7_0_1a.interface.tengigabitethernet', u'tengigabitethernet')]
    bindings_list = [('pybind.nos.v6_0_2b.interface.tengigabitethernet.ip.ip_config.address', 'pybind.nos.v6_0_2b.brocade_interface', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.interface.tengigabitethernet.ip.ip_config.address', 'pybind.nos.v7_0_1a.brocade_interface', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.interface.tengigabitethernet.ip.ip_config.address', 'pybind.nos.v7_1_0.brocade_interface', 'pybind.nos.v7_1_0')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'address', 'keyval': 'address', 'extra_keyval': 'address, secondary, ospf_passive, ospf_ignore'}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, tengigabitethernet=tengigabitethernet, address=address)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def interface_tengigabitethernet_ip_dhcp_relay_delete(self, tengigabitethernet=None, servers=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		NOS: 6.0.2b, 7.0.1a, 7.1.0    

	**Parent Instance Keyword Arg Tuple(s)**:
		:param tengigabitethernet: kwarg tuple.
		:type tengigabitethernet: (name).

		:param name: tuple arg.
		:type name: (unicode)
		
		.. note::
			* length - [u'3..16']
			* pattern - ((([1-9]|[1-9][0-9]|1[0-9][0-9]|2[0-3][0-9])/)?(([0-9]|[1][0-6]))/([1-9]|[1-9][0-9]|[1-9][0-9][0-9])(:[1-4])?)

	**This Instance Keyword Arg Tuple**:
		:param servers: kwarg tuple.
		:type servers: (relay_ip_addr, server_vrf_name).

		:param relay_ip_addr: A.B.C.D;; IP address of the DHCP server
		:type relay_ip_addr: (unicode)
		
		.. note::
			* pattern - (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?

		:param server_vrf_name: VRF name of the DHCP server
		:type server_vrf_name: (unicode)
		
		.. note::
			* length - [u'1..32']
			* pattern - ((([a-zA-Z0-9_]([a-zA-Z0-9\-_]){0,61})?[a-zA-Z0-9]\.)*([a-zA-Z0-9_]([a-zA-Z0-9\-_]){0,61})?[a-zA-Z0-9]\.?)|\.

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = [('pybind.nos.v7_1_0.interface.tengigabitethernet', u'tengigabitethernet'), ('pybind.nos.v6_0_2b.interface.tengigabitethernet', u'tengigabitethernet'), ('pybind.nos.v7_0_1a.interface.tengigabitethernet', u'tengigabitethernet')]
    bindings_list = [('pybind.nos.v6_0_2b.interface.tengigabitethernet.ip.interface_te_dhcp_conf.dhcp.relay.servers', 'pybind.nos.v6_0_2b.brocade_interface', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.interface.tengigabitethernet.ip.interface_te_dhcp_conf.dhcp.relay.servers', 'pybind.nos.v7_0_1a.brocade_interface', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.interface.tengigabitethernet.ip.interface_te_dhcp_conf.dhcp.relay.servers', 'pybind.nos.v7_1_0.brocade_interface', 'pybind.nos.v7_1_0')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'servers', 'keyval': 'relay_ip_addr, server_vrf_name', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, tengigabitethernet=tengigabitethernet, servers=servers)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def interface_tengigabitethernet_ip_igmp_static_group_delete(self, tengigabitethernet=None, static_group=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		NOS: 6.0.2b, 7.0.1a, 7.1.0    

	**Parent Instance Keyword Arg Tuple(s)**:
		:param tengigabitethernet: kwarg tuple.
		:type tengigabitethernet: (name).

		:param name: tuple arg.
		:type name: (unicode)
		
		.. note::
			* length - [u'3..16']
			* pattern - ((([1-9]|[1-9][0-9]|1[0-9][0-9]|2[0-3][0-9])/)?(([0-9]|[1][0-6]))/([1-9]|[1-9][0-9]|[1-9][0-9][0-9])(:[1-4])?)

	**This Instance Keyword Arg Tuple**:
		:param static_group: kwarg tuple.
		:type static_group: (sg_addr).

		:param sg_addr: Multicast Address to be Joined in the format A.B.C.D
		:type sg_addr: (unicode)
		
		.. note::
			* pattern - (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = [('pybind.nos.v7_0_1a.interface.tengigabitethernet', u'tengigabitethernet'), ('pybind.nos.v6_0_2b.interface.tengigabitethernet', u'tengigabitethernet'), ('pybind.nos.v7_1_0.interface.tengigabitethernet', u'tengigabitethernet')]
    bindings_list = [('pybind.nos.v6_0_2b.interface.tengigabitethernet.ip.igmp_phy_intf_cfg.igmp.static_group', 'pybind.nos.v6_0_2b.brocade_interface', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.interface.tengigabitethernet.ip.igmp_phy_intf_cfg.igmp.static_group', 'pybind.nos.v7_0_1a.brocade_interface', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.interface.tengigabitethernet.ip.igmp_phy_intf_cfg.igmp.static_group', 'pybind.nos.v7_1_0.brocade_interface', 'pybind.nos.v7_1_0')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'static_group', 'keyval': 'sg_addr', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, tengigabitethernet=tengigabitethernet, static_group=static_group)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def interface_tengigabitethernet_ipv6_access_group_delete(self, tengigabitethernet=None, access_group=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		NOS: 6.0.2b, 7.0.1a, 7.1.0    

	**Parent Instance Keyword Arg Tuple(s)**:
		:param tengigabitethernet: kwarg tuple.
		:type tengigabitethernet: (name).

		:param name: tuple arg.
		:type name: (unicode)
		
		.. note::
			* length - [u'3..16']
			* pattern - ((([1-9]|[1-9][0-9]|1[0-9][0-9]|2[0-3][0-9])/)?(([0-9]|[1][0-6]))/([1-9]|[1-9][0-9]|[1-9][0-9][0-9])(:[1-4])?)

	**This Instance Keyword Arg Tuple**:
		:param access_group: kwarg tuple.
		:type access_group: (ipv6_access_list, ip_direction, traffic_type).

		:param ipv6_access_list: ACL_NAME;; Access List Name (Max 63)
		:type ipv6_access_list: (unicode)
		
		.. note::
			* length - [u'1..63']
			* pattern - [a-zA-Z0-9]{1}([-a-zA-Z0-9_]{0,62})

		:param ip_direction: tuple arg.
		:type ip_direction: (unicode)
		
		.. note::
			* enum - [u'in', u'out']

		:param traffic_type: tuple arg.
		:type traffic_type: (unicode)
		
		.. note::
			* enum - [u'switched', u'routed']

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = [('pybind.nos.v7_1_0.interface.tengigabitethernet', u'tengigabitethernet'), ('pybind.nos.v6_0_2b.interface.tengigabitethernet', u'tengigabitethernet'), ('pybind.nos.v7_0_1a.interface.tengigabitethernet', u'tengigabitethernet')]
    bindings_list = [('pybind.nos.v6_0_2b.interface.tengigabitethernet.ipv6.access_group', 'pybind.nos.v6_0_2b.brocade_interface', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.interface.tengigabitethernet.ipv6.access_group', 'pybind.nos.v7_0_1a.brocade_interface', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.interface.tengigabitethernet.ipv6.access_group', 'pybind.nos.v7_1_0.brocade_interface', 'pybind.nos.v7_1_0')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'access_group', 'keyval': 'ipv6_access_list, ip_direction', 'extra_keyval': 'ipv6_access_list, ip_direction, traffic_type'}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, tengigabitethernet=tengigabitethernet, access_group=access_group)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def interface_tengigabitethernet_ipv6_address_delete(self, tengigabitethernet=None, ipv6_address=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		NOS: 6.0.2b, 7.0.1a, 7.1.0    

	**Parent Instance Keyword Arg Tuple(s)**:
		:param tengigabitethernet: kwarg tuple.
		:type tengigabitethernet: (name).

		:param name: tuple arg.
		:type name: (unicode)
		
		.. note::
			* length - [u'3..16']
			* pattern - ((([1-9]|[1-9][0-9]|1[0-9][0-9]|2[0-3][0-9])/)?(([0-9]|[1][0-6]))/([1-9]|[1-9][0-9]|[1-9][0-9][0-9])(:[1-4])?)

	**This Instance Keyword Arg Tuple**:
		:param ipv6_address: kwarg tuple.
		:type ipv6_address: (address, secondary, anycast).

		:param address: A:B::C:D/LEN;; IPv6 prefix format: xxxx:xxxx/ml, xxxx:xxxx::/ml, xxxx::xx/128
		:type address: (unicode)
		
		.. note::
			* pattern - ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(/(([0-9])|([0-9]{2})|(1[0-1][0-9])|(12[0-8])))

		:param secondary: Configure Secondary ipv6 address on an interface
		:type secondary: (YANGBool)

		:param anycast: Configure ipv6 address as anycast
		:type anycast: (YANGBool)

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = [('pybind.nos.v7_0_1a.interface.tengigabitethernet', u'tengigabitethernet'), ('pybind.nos.v7_1_0.interface.tengigabitethernet', u'tengigabitethernet'), ('pybind.nos.v6_0_2b.interface.tengigabitethernet', u'tengigabitethernet')]
    bindings_list = [('pybind.nos.v6_0_2b.interface.tengigabitethernet.ipv6.ipv6_config.address.ipv6_address', 'pybind.nos.v6_0_2b.brocade_interface', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.interface.tengigabitethernet.ipv6.ipv6_config.address.ipv6_address', 'pybind.nos.v7_0_1a.brocade_interface', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.interface.tengigabitethernet.ipv6.ipv6_config.address.ipv6_address', 'pybind.nos.v7_1_0.brocade_interface', 'pybind.nos.v7_1_0')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'ipv6_address', 'keyval': 'address', 'extra_keyval': 'address, secondary, anycast'}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, tengigabitethernet=tengigabitethernet, ipv6_address=ipv6_address)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def interface_tengigabitethernet_ipv6_dhcp_relay_delete(self, tengigabitethernet=None, servers=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		NOS: 6.0.2b, 7.0.1a, 7.1.0    

	**Parent Instance Keyword Arg Tuple(s)**:
		:param tengigabitethernet: kwarg tuple.
		:type tengigabitethernet: (name).

		:param name: tuple arg.
		:type name: (unicode)
		
		.. note::
			* length - [u'3..16']
			* pattern - ((([1-9]|[1-9][0-9]|1[0-9][0-9]|2[0-3][0-9])/)?(([0-9]|[1][0-6]))/([1-9]|[1-9][0-9]|[1-9][0-9][0-9])(:[1-4])?)

	**This Instance Keyword Arg Tuple**:
		:param servers: kwarg tuple.
		:type servers: (relay_ip_addr, server_vrf_name).

		:param relay_ip_addr: IPv6 address of the DHCPv6 server
		:type relay_ip_addr: (unicode)
		
		.. note::
			* pattern - ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?

		:param server_vrf_name: VRF name of the DHCPv6 server
		:type server_vrf_name: (unicode)
		
		.. note::
			* length - [u'1..32']
			* pattern - ((([a-zA-Z0-9_]([a-zA-Z0-9\-_]){0,61})?[a-zA-Z0-9]\.)*([a-zA-Z0-9_]([a-zA-Z0-9\-_]){0,61})?[a-zA-Z0-9]\.?)|\.

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = [('pybind.nos.v7_0_1a.interface.tengigabitethernet', u'tengigabitethernet'), ('pybind.nos.v7_1_0.interface.tengigabitethernet', u'tengigabitethernet'), ('pybind.nos.v6_0_2b.interface.tengigabitethernet', u'tengigabitethernet')]
    bindings_list = [('pybind.nos.v6_0_2b.interface.tengigabitethernet.ipv6.interface_phy_dhcp_conf.dhcp.relay.servers', 'pybind.nos.v6_0_2b.brocade_interface', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.interface.tengigabitethernet.ipv6.interface_phy_dhcp_conf.dhcp.relay.servers', 'pybind.nos.v7_0_1a.brocade_interface', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.interface.tengigabitethernet.ipv6.interface_phy_dhcp_conf.dhcp.relay.servers', 'pybind.nos.v7_1_0.brocade_interface', 'pybind.nos.v7_1_0')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'servers', 'keyval': 'relay_ip_addr', 'extra_keyval': 'relay_ip_addr, server_vrf_name'}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, tengigabitethernet=tengigabitethernet, servers=servers)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def interface_tengigabitethernet_ipv6_nd_prefix_delete(self, tengigabitethernet=None, prefix=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		NOS: 6.0.2b, 7.0.1a, 7.1.0    

	**Parent Instance Keyword Arg Tuple(s)**:
		:param tengigabitethernet: kwarg tuple.
		:type tengigabitethernet: (name).

		:param name: tuple arg.
		:type name: (unicode)
		
		.. note::
			* length - [u'3..16']
			* pattern - ((([1-9]|[1-9][0-9]|1[0-9][0-9]|2[0-3][0-9])/)?(([0-9]|[1][0-6]))/([1-9]|[1-9][0-9]|[1-9][0-9][0-9])(:[1-4])?)

	**This Instance Keyword Arg Tuple**:
		:param prefix: kwarg tuple.
		:type prefix: (prefix_ipv6_address).

		:param prefix_ipv6_address: tuple arg.
		:type prefix_ipv6_address: (unicode)
		
		.. note::
			* pattern - ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(/(([0-9])|([0-9]{2})|(1[0-1][0-9])|(12[0-8])))

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = [('pybind.nos.v7_0_1a.interface.tengigabitethernet', u'tengigabitethernet'), ('pybind.nos.v6_0_2b.interface.tengigabitethernet', u'tengigabitethernet'), ('pybind.nos.v7_1_0.interface.tengigabitethernet', u'tengigabitethernet')]
    bindings_list = [('pybind.nos.v6_0_2b.interface.tengigabitethernet.ipv6.ipv6_nd_ra.ipv6_intf_cmds.nd.prefix', 'pybind.nos.v6_0_2b.brocade_interface', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.interface.tengigabitethernet.ipv6.ipv6_nd_ra.ipv6_intf_cmds.nd.prefix', 'pybind.nos.v7_0_1a.brocade_interface', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.interface.tengigabitethernet.ipv6.ipv6_nd_ra.ipv6_intf_cmds.nd.prefix', 'pybind.nos.v7_1_0.brocade_interface', 'pybind.nos.v7_1_0')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'prefix', 'keyval': 'prefix_ipv6_address', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, tengigabitethernet=tengigabitethernet, prefix=prefix)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def interface_tengigabitethernet_ipv6_neighbor_delete(self, tengigabitethernet=None, neighbor=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		NOS: 6.0.2b, 7.0.1a, 7.1.0    

	**Parent Instance Keyword Arg Tuple(s)**:
		:param tengigabitethernet: kwarg tuple.
		:type tengigabitethernet: (name).

		:param name: tuple arg.
		:type name: (unicode)
		
		.. note::
			* length - [u'3..16']
			* pattern - ((([1-9]|[1-9][0-9]|1[0-9][0-9]|2[0-3][0-9])/)?(([0-9]|[1][0-6]))/([1-9]|[1-9][0-9]|[1-9][0-9][0-9])(:[1-4])?)

	**This Instance Keyword Arg Tuple**:
		:param neighbor: kwarg tuple.
		:type neighbor: (ipv6_address).

		:param ipv6_address: tuple arg.
		:type ipv6_address: (unicode)
		
		.. note::
			* pattern - ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = [('pybind.nos.v6_0_2b.interface.tengigabitethernet', u'tengigabitethernet'), ('pybind.nos.v7_0_1a.interface.tengigabitethernet', u'tengigabitethernet'), ('pybind.nos.v7_1_0.interface.tengigabitethernet', u'tengigabitethernet')]
    bindings_list = [('pybind.nos.v6_0_2b.interface.tengigabitethernet.ipv6.ipv6_nd_ra.ipv6_intf_cmds.neighbor', 'pybind.nos.v6_0_2b.brocade_interface', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.interface.tengigabitethernet.ipv6.ipv6_nd_ra.ipv6_intf_cmds.neighbor', 'pybind.nos.v7_0_1a.brocade_interface', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.interface.tengigabitethernet.ipv6.ipv6_nd_ra.ipv6_intf_cmds.neighbor', 'pybind.nos.v7_1_0.brocade_interface', 'pybind.nos.v7_1_0')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'neighbor', 'keyval': 'ipv6_address', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, tengigabitethernet=tengigabitethernet, neighbor=neighbor)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def interface_tengigabitethernet_ipv6_vrrp_extended_group_delete(self, tengigabitethernet=None, vrrpv3e_group=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		NOS: 6.0.2b, 7.0.1a, 7.1.0    

	**Parent Instance Keyword Arg Tuple(s)**:
		:param tengigabitethernet: kwarg tuple.
		:type tengigabitethernet: (name).

		:param name: tuple arg.
		:type name: (unicode)
		
		.. note::
			* length - [u'3..16']
			* pattern - ((([1-9]|[1-9][0-9]|1[0-9][0-9]|2[0-3][0-9])/)?(([0-9]|[1][0-6]))/([1-9]|[1-9][0-9]|[1-9][0-9][0-9])(:[1-4])?)

	**This Instance Keyword Arg Tuple**:
		:param vrrpv3e_group: kwarg tuple.
		:type vrrpv3e_group: (vrid).

		:param vrid: tuple arg.
		:type vrid: (int)
		
		.. note::
			* range - ['0..255']

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = [('pybind.nos.v6_0_2b.interface.tengigabitethernet', u'tengigabitethernet'), ('pybind.nos.v7_0_1a.interface.tengigabitethernet', u'tengigabitethernet'), ('pybind.nos.v7_1_0.interface.tengigabitethernet', u'tengigabitethernet')]
    bindings_list = [('pybind.nos.v6_0_2b.interface.tengigabitethernet.ipv6.vrrpv3e_group', 'pybind.nos.v6_0_2b.brocade_interface', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.interface.tengigabitethernet.ipv6.vrrpv3e_group', 'pybind.nos.v7_0_1a.brocade_interface', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.interface.tengigabitethernet.ipv6.vrrpv3e_group', 'pybind.nos.v7_1_0.brocade_interface', 'pybind.nos.v7_1_0')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'vrrpv3e_group', 'keyval': 'vrid', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, tengigabitethernet=tengigabitethernet, vrrpv3e_group=vrrpv3e_group)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def interface_tengigabitethernet_ipv6_vrrp_extended_group_track_delete(self, tengigabitethernet=None, vrrpv3e_group=None, interface=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		NOS: 6.0.2b, 7.0.1a, 7.1.0    

	**Parent Instance Keyword Arg Tuple(s)**:
		:param tengigabitethernet: kwarg tuple.
		:type tengigabitethernet: (name).

		:param name: tuple arg.
		:type name: (unicode)
		
		.. note::
			* length - [u'3..16']
			* pattern - ((([1-9]|[1-9][0-9]|1[0-9][0-9]|2[0-3][0-9])/)?(([0-9]|[1][0-6]))/([1-9]|[1-9][0-9]|[1-9][0-9][0-9])(:[1-4])?)

		:param vrrpv3e_group: kwarg tuple.
		:type vrrpv3e_group: (vrid).

		:param vrid: tuple arg.
		:type vrid: (int)
		
		.. note::
			* range - ['0..255']

	**This Instance Keyword Arg Tuple**:
		:param interface: kwarg tuple.
		:type interface: (interface_type, interface_name).

		:param interface_type: tuple arg.
		:type interface_type: (unicode)
		
		.. note::
			* enum - [u'fortygigabitethernet', u'gigabitethernet', u'tengigabitethernet', u'hundredgigabitethernet', u'port-channel']

		:param interface_name: tuple arg.
		:type interface_name: (unicode)
		
		.. note::
			* length - [u'3..16']
			* pattern - ((([1-9]|[1-9][0-9]|1[0-9][0-9]|2[0-3][0-9])/)?(([0-9]|[1][0-6]))/([1-9]|[1-9][0-9]|[1-9][0-9][0-9])(:[1-4])?)

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = [('pybind.nos.v7_1_0.interface.tengigabitethernet', u'tengigabitethernet'), ('pybind.nos.v7_1_0.interface.tengigabitethernet.ipv6.vrrpv3e_group', u'vrrpv3e_group'), ('pybind.nos.v6_0_2b.interface.tengigabitethernet', u'tengigabitethernet'), ('pybind.nos.v6_0_2b.interface.tengigabitethernet.ipv6.vrrpv3e_group', u'vrrpv3e_group'), ('pybind.nos.v7_0_1a.interface.tengigabitethernet', u'tengigabitethernet'), ('pybind.nos.v7_0_1a.interface.tengigabitethernet.ipv6.vrrpv3e_group', u'vrrpv3e_group')]
    bindings_list = [('pybind.nos.v6_0_2b.interface.tengigabitethernet.ipv6.vrrpv3e_group.track.interface', 'pybind.nos.v6_0_2b.brocade_interface', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.interface.tengigabitethernet.ipv6.vrrpv3e_group.track.interface', 'pybind.nos.v7_0_1a.brocade_interface', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.interface.tengigabitethernet.ipv6.vrrpv3e_group.track.interface', 'pybind.nos.v7_1_0.brocade_interface', 'pybind.nos.v7_1_0')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'vrid', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'vrid', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'vrid', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'interface', 'keyval': 'interface_type, interface_name', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, tengigabitethernet=tengigabitethernet, vrrpv3e_group=vrrpv3e_group, interface=interface)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def interface_tengigabitethernet_ipv6_vrrp_extended_group_virtual_ip_delete(self, tengigabitethernet=None, vrrpv3e_group=None, virtual_ip=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		NOS: 6.0.2b, 7.0.1a, 7.1.0    

	**Parent Instance Keyword Arg Tuple(s)**:
		:param tengigabitethernet: kwarg tuple.
		:type tengigabitethernet: (name).

		:param name: tuple arg.
		:type name: (unicode)
		
		.. note::
			* length - [u'3..16']
			* pattern - ((([1-9]|[1-9][0-9]|1[0-9][0-9]|2[0-3][0-9])/)?(([0-9]|[1][0-6]))/([1-9]|[1-9][0-9]|[1-9][0-9][0-9])(:[1-4])?)

		:param vrrpv3e_group: kwarg tuple.
		:type vrrpv3e_group: (vrid).

		:param vrid: tuple arg.
		:type vrid: (int)
		
		.. note::
			* range - ['0..255']

	**This Instance Keyword Arg Tuple**:
		:param virtual_ip: kwarg tuple.
		:type virtual_ip: (virtual_ipaddr).

		:param virtual_ipaddr: Virtual IPv6 address
		:type virtual_ipaddr: (unicode)
		
		.. note::
			* pattern - ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = [('pybind.nos.v7_0_1a.interface.tengigabitethernet', u'tengigabitethernet'), ('pybind.nos.v7_0_1a.interface.tengigabitethernet.ipv6.vrrpv3e_group', u'vrrpv3e_group'), ('pybind.nos.v7_1_0.interface.tengigabitethernet', u'tengigabitethernet'), ('pybind.nos.v7_1_0.interface.tengigabitethernet.ipv6.vrrpv3e_group', u'vrrpv3e_group'), ('pybind.nos.v6_0_2b.interface.tengigabitethernet', u'tengigabitethernet'), ('pybind.nos.v6_0_2b.interface.tengigabitethernet.ipv6.vrrpv3e_group', u'vrrpv3e_group')]
    bindings_list = [('pybind.nos.v6_0_2b.interface.tengigabitethernet.ipv6.vrrpv3e_group.virtual_ip', 'pybind.nos.v6_0_2b.brocade_interface', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.interface.tengigabitethernet.ipv6.vrrpv3e_group.virtual_ip', 'pybind.nos.v7_0_1a.brocade_interface', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.interface.tengigabitethernet.ipv6.vrrpv3e_group.virtual_ip', 'pybind.nos.v7_1_0.brocade_interface', 'pybind.nos.v7_1_0')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'vrid', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'vrid', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'vrid', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'virtual_ip', 'keyval': 'virtual_ipaddr', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, tengigabitethernet=tengigabitethernet, vrrpv3e_group=vrrpv3e_group, virtual_ip=virtual_ip)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def interface_tengigabitethernet_ipv6_vrrp_group_delete(self, tengigabitethernet=None, vrrpv3_group=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		NOS: 6.0.2b, 7.0.1a, 7.1.0    

	**Parent Instance Keyword Arg Tuple(s)**:
		:param tengigabitethernet: kwarg tuple.
		:type tengigabitethernet: (name).

		:param name: tuple arg.
		:type name: (unicode)
		
		.. note::
			* length - [u'3..16']
			* pattern - ((([1-9]|[1-9][0-9]|1[0-9][0-9]|2[0-3][0-9])/)?(([0-9]|[1][0-6]))/([1-9]|[1-9][0-9]|[1-9][0-9][0-9])(:[1-4])?)

	**This Instance Keyword Arg Tuple**:
		:param vrrpv3_group: kwarg tuple.
		:type vrrpv3_group: (vrid).

		:param vrid: tuple arg.
		:type vrid: (int)
		
		.. note::
			* range - ['0..255']

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = [('pybind.nos.v6_0_2b.interface.tengigabitethernet', u'tengigabitethernet'), ('pybind.nos.v7_1_0.interface.tengigabitethernet', u'tengigabitethernet'), ('pybind.nos.v7_0_1a.interface.tengigabitethernet', u'tengigabitethernet')]
    bindings_list = [('pybind.nos.v6_0_2b.interface.tengigabitethernet.ipv6.vrrpv3_group', 'pybind.nos.v6_0_2b.brocade_interface', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.interface.tengigabitethernet.ipv6.vrrpv3_group', 'pybind.nos.v7_0_1a.brocade_interface', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.interface.tengigabitethernet.ipv6.vrrpv3_group', 'pybind.nos.v7_1_0.brocade_interface', 'pybind.nos.v7_1_0')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'vrrpv3_group', 'keyval': 'vrid', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, tengigabitethernet=tengigabitethernet, vrrpv3_group=vrrpv3_group)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def interface_tengigabitethernet_ipv6_vrrp_group_track_delete(self, tengigabitethernet=None, vrrpv3_group=None, interface=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		NOS: 6.0.2b, 7.0.1a, 7.1.0    

	**Parent Instance Keyword Arg Tuple(s)**:
		:param tengigabitethernet: kwarg tuple.
		:type tengigabitethernet: (name).

		:param name: tuple arg.
		:type name: (unicode)
		
		.. note::
			* length - [u'3..16']
			* pattern - ((([1-9]|[1-9][0-9]|1[0-9][0-9]|2[0-3][0-9])/)?(([0-9]|[1][0-6]))/([1-9]|[1-9][0-9]|[1-9][0-9][0-9])(:[1-4])?)

		:param vrrpv3_group: kwarg tuple.
		:type vrrpv3_group: (vrid).

		:param vrid: tuple arg.
		:type vrid: (int)
		
		.. note::
			* range - ['0..255']

	**This Instance Keyword Arg Tuple**:
		:param interface: kwarg tuple.
		:type interface: (interface_type, interface_name).

		:param interface_type: tuple arg.
		:type interface_type: (unicode)
		
		.. note::
			* enum - [u'fortygigabitethernet', u'gigabitethernet', u'tengigabitethernet', u'hundredgigabitethernet', u'port-channel']

		:param interface_name: tuple arg.
		:type interface_name: (unicode)
		
		.. note::
			* length - [u'3..16']
			* pattern - ((([1-9]|[1-9][0-9]|1[0-9][0-9]|2[0-3][0-9])/)?(([0-9]|[1][0-6]))/([1-9]|[1-9][0-9]|[1-9][0-9][0-9])(:[1-4])?)

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = [('pybind.nos.v7_1_0.interface.tengigabitethernet', u'tengigabitethernet'), ('pybind.nos.v7_1_0.interface.tengigabitethernet.ipv6.vrrpv3_group', u'vrrpv3_group'), ('pybind.nos.v6_0_2b.interface.tengigabitethernet', u'tengigabitethernet'), ('pybind.nos.v6_0_2b.interface.tengigabitethernet.ipv6.vrrpv3_group', u'vrrpv3_group'), ('pybind.nos.v7_0_1a.interface.tengigabitethernet', u'tengigabitethernet'), ('pybind.nos.v7_0_1a.interface.tengigabitethernet.ipv6.vrrpv3_group', u'vrrpv3_group')]
    bindings_list = [('pybind.nos.v6_0_2b.interface.tengigabitethernet.ipv6.vrrpv3_group.track.interface', 'pybind.nos.v6_0_2b.brocade_interface', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.interface.tengigabitethernet.ipv6.vrrpv3_group.track.interface', 'pybind.nos.v7_0_1a.brocade_interface', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.interface.tengigabitethernet.ipv6.vrrpv3_group.track.interface', 'pybind.nos.v7_1_0.brocade_interface', 'pybind.nos.v7_1_0')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'vrid', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'vrid', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'vrid', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'interface', 'keyval': 'interface_type, interface_name', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, tengigabitethernet=tengigabitethernet, vrrpv3_group=vrrpv3_group, interface=interface)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def interface_tengigabitethernet_ipv6_vrrp_group_virtual_ip_delete(self, tengigabitethernet=None, vrrpv3_group=None, virtual_ip=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		NOS: 6.0.2b, 7.0.1a, 7.1.0    

	**Parent Instance Keyword Arg Tuple(s)**:
		:param tengigabitethernet: kwarg tuple.
		:type tengigabitethernet: (name).

		:param name: tuple arg.
		:type name: (unicode)
		
		.. note::
			* length - [u'3..16']
			* pattern - ((([1-9]|[1-9][0-9]|1[0-9][0-9]|2[0-3][0-9])/)?(([0-9]|[1][0-6]))/([1-9]|[1-9][0-9]|[1-9][0-9][0-9])(:[1-4])?)

		:param vrrpv3_group: kwarg tuple.
		:type vrrpv3_group: (vrid).

		:param vrid: tuple arg.
		:type vrid: (int)
		
		.. note::
			* range - ['0..255']

	**This Instance Keyword Arg Tuple**:
		:param virtual_ip: kwarg tuple.
		:type virtual_ip: (virtual_ipaddr).

		:param virtual_ipaddr: Virtual IPv6 address
		:type virtual_ipaddr: (unicode)
		
		.. note::
			* pattern - ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = [('pybind.nos.v6_0_2b.interface.tengigabitethernet', u'tengigabitethernet'), ('pybind.nos.v6_0_2b.interface.tengigabitethernet.ipv6.vrrpv3_group', u'vrrpv3_group'), ('pybind.nos.v7_0_1a.interface.tengigabitethernet', u'tengigabitethernet'), ('pybind.nos.v7_0_1a.interface.tengigabitethernet.ipv6.vrrpv3_group', u'vrrpv3_group'), ('pybind.nos.v7_1_0.interface.tengigabitethernet', u'tengigabitethernet'), ('pybind.nos.v7_1_0.interface.tengigabitethernet.ipv6.vrrpv3_group', u'vrrpv3_group')]
    bindings_list = [('pybind.nos.v6_0_2b.interface.tengigabitethernet.ipv6.vrrpv3_group.virtual_ip', 'pybind.nos.v6_0_2b.brocade_interface', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.interface.tengigabitethernet.ipv6.vrrpv3_group.virtual_ip', 'pybind.nos.v7_0_1a.brocade_interface', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.interface.tengigabitethernet.ipv6.vrrpv3_group.virtual_ip', 'pybind.nos.v7_1_0.brocade_interface', 'pybind.nos.v7_1_0')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'vrid', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'vrid', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'vrid', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'virtual_ip', 'keyval': 'virtual_ipaddr', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, tengigabitethernet=tengigabitethernet, vrrpv3_group=vrrpv3_group, virtual_ip=virtual_ip)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def interface_tengigabitethernet_mac_access_group_delete(self, tengigabitethernet=None, access_group=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		NOS: 6.0.2b, 7.0.1a, 7.1.0    

	**Parent Instance Keyword Arg Tuple(s)**:
		:param tengigabitethernet: kwarg tuple.
		:type tengigabitethernet: (name).

		:param name: tuple arg.
		:type name: (unicode)
		
		.. note::
			* length - [u'3..16']
			* pattern - ((([1-9]|[1-9][0-9]|1[0-9][0-9]|2[0-3][0-9])/)?(([0-9]|[1][0-6]))/([1-9]|[1-9][0-9]|[1-9][0-9][0-9])(:[1-4])?)

	**This Instance Keyword Arg Tuple**:
		:param access_group: kwarg tuple.
		:type access_group: (mac_access_list, mac_direction, traffic_type).

		:param mac_access_list: ACL_NAME;; Access List Name (Max 63)
		:type mac_access_list: (unicode)
		
		.. note::
			* length - [u'1..63']
			* pattern - [a-zA-Z0-9]{1}([-a-zA-Z0-9_]{0,62})

		:param mac_direction: tuple arg.
		:type mac_direction: (unicode)
		
		.. note::
			* enum - [u'in', u'out']

		:param traffic_type: tuple arg.
		:type traffic_type: (unicode)
		
		.. note::
			* enum - [u'switched', u'routed']

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = [('pybind.nos.v7_1_0.interface.tengigabitethernet', u'tengigabitethernet'), ('pybind.nos.v6_0_2b.interface.tengigabitethernet', u'tengigabitethernet'), ('pybind.nos.v7_0_1a.interface.tengigabitethernet', u'tengigabitethernet')]
    bindings_list = [('pybind.nos.v6_0_2b.interface.tengigabitethernet.mac.access_group', 'pybind.nos.v6_0_2b.brocade_interface', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.interface.tengigabitethernet.mac.access_group', 'pybind.nos.v7_0_1a.brocade_interface', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.interface.tengigabitethernet.mac.access_group', 'pybind.nos.v7_1_0.brocade_interface', 'pybind.nos.v7_1_0')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'access_group', 'keyval': 'mac_access_list, mac_direction', 'extra_keyval': 'mac_access_list, mac_direction, traffic_type'}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, tengigabitethernet=tengigabitethernet, access_group=access_group)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def interface_tengigabitethernet_port_profile_port_profile_delete(self, tengigabitethernet=None, port_to_port_profile_associations=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		NOS: 6.0.2b, 7.0.1a, 7.1.0    

	**Parent Instance Keyword Arg Tuple(s)**:
		:param tengigabitethernet: kwarg tuple.
		:type tengigabitethernet: (name).

		:param name: tuple arg.
		:type name: (unicode)
		
		.. note::
			* length - [u'3..16']
			* pattern - ((([1-9]|[1-9][0-9]|1[0-9][0-9]|2[0-3][0-9])/)?(([0-9]|[1][0-6]))/([1-9]|[1-9][0-9]|[1-9][0-9][0-9])(:[1-4])?)

	**This Instance Keyword Arg Tuple**:
		:param port_to_port_profile_associations: kwarg tuple.
		:type port_to_port_profile_associations: (port_to_port_profile_association).

		:param port_to_port_profile_association: Port-profile name (Max Size - 128)
		:type port_to_port_profile_association: (unicode)
		
		.. note::
			* pattern - [a-zA-Z]{1}([-a-zA-Z0-9\.\\\\@#\+\*\(\)=\{~\}%<>=$_\[\]\|]{0,127})

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = [('pybind.nos.v7_1_0.interface.tengigabitethernet', u'tengigabitethernet'), ('pybind.nos.v6_0_2b.interface.tengigabitethernet', u'tengigabitethernet'), ('pybind.nos.v7_0_1a.interface.tengigabitethernet', u'tengigabitethernet')]
    bindings_list = [('pybind.nos.v6_0_2b.interface.tengigabitethernet.port_profile_to_interface_associations.port_profile_port.port_to_port_profile_associations', 'pybind.nos.v6_0_2b.brocade_interface', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.interface.tengigabitethernet.port_profile_to_interface_associations.port_profile_port.port_to_port_profile_associations', 'pybind.nos.v7_0_1a.brocade_interface', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.interface.tengigabitethernet.port_profile_to_interface_associations.port_profile_port.port_to_port_profile_associations', 'pybind.nos.v7_1_0.brocade_interface', 'pybind.nos.v7_1_0')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'port_to_port_profile_associations', 'keyval': 'port_to_port_profile_association', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, tengigabitethernet=tengigabitethernet, port_to_port_profile_associations=port_to_port_profile_associations)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def interface_tengigabitethernet_qos_flowcontrol_pfc_delete(self, tengigabitethernet=None, pfc=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		NOS: 6.0.2b, 7.0.1a, 7.1.0    

	**Parent Instance Keyword Arg Tuple(s)**:
		:param tengigabitethernet: kwarg tuple.
		:type tengigabitethernet: (name).

		:param name: tuple arg.
		:type name: (unicode)
		
		.. note::
			* length - [u'3..16']
			* pattern - ((([1-9]|[1-9][0-9]|1[0-9][0-9]|2[0-3][0-9])/)?(([0-9]|[1][0-6]))/([1-9]|[1-9][0-9]|[1-9][0-9][0-9])(:[1-4])?)

	**This Instance Keyword Arg Tuple**:
		:param pfc: kwarg tuple.
		:type pfc: (pfc_cos).

		:param pfc_cos: 0-7;;CoS value
		:type pfc_cos: (long)
		
		.. note::
			* range - ['-2147483648..2147483647']

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = [('pybind.nos.v7_1_0.interface.tengigabitethernet', u'tengigabitethernet'), ('pybind.nos.v6_0_2b.interface.tengigabitethernet', u'tengigabitethernet'), ('pybind.nos.v7_0_1a.interface.tengigabitethernet', u'tengigabitethernet')]
    bindings_list = [('pybind.nos.v6_0_2b.interface.tengigabitethernet.qos.flowcontrol.pfc', 'pybind.nos.v6_0_2b.brocade_interface', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.interface.tengigabitethernet.qos.flowcontrol.pfc', 'pybind.nos.v7_0_1a.brocade_interface', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.interface.tengigabitethernet.qos.flowcontrol.pfc', 'pybind.nos.v7_1_0.brocade_interface', 'pybind.nos.v7_1_0')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'pfc', 'keyval': 'pfc_cos', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, tengigabitethernet=tengigabitethernet, pfc=pfc)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def interface_tengigabitethernet_qos_random_detect_traffic_class_delete(self, tengigabitethernet=None, traffic_class=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		NOS: 6.0.2b, 7.0.1a, 7.1.0    

	**Parent Instance Keyword Arg Tuple(s)**:
		:param tengigabitethernet: kwarg tuple.
		:type tengigabitethernet: (name).

		:param name: tuple arg.
		:type name: (unicode)
		
		.. note::
			* length - [u'3..16']
			* pattern - ((([1-9]|[1-9][0-9]|1[0-9][0-9]|2[0-3][0-9])/)?(([0-9]|[1][0-6]))/([1-9]|[1-9][0-9]|[1-9][0-9][0-9])(:[1-4])?)

	**This Instance Keyword Arg Tuple**:
		:param traffic_class: kwarg tuple.
		:type traffic_class: (red_tc_value).

		:param red_tc_value: tuple arg.
		:type red_tc_value: (long)
		
		.. note::
			* range - ['0..4294967295']

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = [('pybind.nos.v7_0_1a.interface.tengigabitethernet', u'tengigabitethernet'), ('pybind.nos.v7_1_0.interface.tengigabitethernet', u'tengigabitethernet'), ('pybind.nos.v6_0_2b.interface.tengigabitethernet', u'tengigabitethernet')]
    bindings_list = [('pybind.nos.v6_0_2b.interface.tengigabitethernet.qos.random_detect.traffic_class', 'pybind.nos.v6_0_2b.brocade_interface', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.interface.tengigabitethernet.qos.random_detect.traffic_class', 'pybind.nos.v7_0_1a.brocade_interface', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.interface.tengigabitethernet.qos.random_detect.traffic_class', 'pybind.nos.v7_1_0.brocade_interface', 'pybind.nos.v7_1_0')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'traffic_class', 'keyval': 'red_tc_value', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, tengigabitethernet=tengigabitethernet, traffic_class=traffic_class)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def interface_tengigabitethernet_rmon_collection_history_delete(self, tengigabitethernet=None, history_control_entry=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		NOS: 6.0.2b, 7.0.1a, 7.1.0    

	**Parent Instance Keyword Arg Tuple(s)**:
		:param tengigabitethernet: kwarg tuple.
		:type tengigabitethernet: (name).

		:param name: tuple arg.
		:type name: (unicode)
		
		.. note::
			* length - [u'3..16']
			* pattern - ((([1-9]|[1-9][0-9]|1[0-9][0-9]|2[0-3][0-9])/)?(([0-9]|[1][0-6]))/([1-9]|[1-9][0-9]|[1-9][0-9][0-9])(:[1-4])?)

	**This Instance Keyword Arg Tuple**:
		:param history_control_entry: kwarg tuple.
		:type history_control_entry: (history_control_index, history_control_buckets_requested, history_control_interval, history_control_owner).

		:param history_control_index: tuple arg.
		:type history_control_index: (long)
		
		.. note::
			* range - ['-2147483648..2147483647']

		:param history_control_buckets_requested: Buckets (default 50)
		:type history_control_buckets_requested: (long)
		
		.. note::
			* range - ['-2147483648..2147483647']

		:param history_control_interval: Polling Interval (default 1800)
		:type history_control_interval: (long)
		
		.. note::
			* range - ['-2147483648..2147483647']

		:param history_control_owner: Owner identity
		:type history_control_owner: (unicode)
		
		.. note::
			* length - [u'1 .. 15']
			* pattern - [a-zA-Z]{1}([-a-zA-Z0-9\.\\\\@#\+\*\(\)=\{~\}%<>=$_\[\]\|]{0,14})

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = [('pybind.nos.v7_1_0.interface.tengigabitethernet', u'tengigabitethernet'), ('pybind.nos.v6_0_2b.interface.tengigabitethernet', u'tengigabitethernet'), ('pybind.nos.v7_0_1a.interface.tengigabitethernet', u'tengigabitethernet')]
    bindings_list = [('pybind.nos.v6_0_2b.interface.tengigabitethernet.rmon.collection.history_control_entry', 'pybind.nos.v6_0_2b.brocade_interface', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.interface.tengigabitethernet.rmon.collection.history_control_entry', 'pybind.nos.v7_0_1a.brocade_interface', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.interface.tengigabitethernet.rmon.collection.history_control_entry', 'pybind.nos.v7_1_0.brocade_interface', 'pybind.nos.v7_1_0')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'history_control_entry', 'keyval': 'history_control_index', 'extra_keyval': 'history_control_index, history_control_buckets_requested, history_control_interval, history_control_owner'}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, tengigabitethernet=tengigabitethernet, history_control_entry=history_control_entry)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def interface_tengigabitethernet_rmon_collection_stats_delete(self, tengigabitethernet=None, ether_stats_entry=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		NOS: 6.0.2b, 7.0.1a, 7.1.0    

	**Parent Instance Keyword Arg Tuple(s)**:
		:param tengigabitethernet: kwarg tuple.
		:type tengigabitethernet: (name).

		:param name: tuple arg.
		:type name: (unicode)
		
		.. note::
			* length - [u'3..16']
			* pattern - ((([1-9]|[1-9][0-9]|1[0-9][0-9]|2[0-3][0-9])/)?(([0-9]|[1][0-6]))/([1-9]|[1-9][0-9]|[1-9][0-9][0-9])(:[1-4])?)

	**This Instance Keyword Arg Tuple**:
		:param ether_stats_entry: kwarg tuple.
		:type ether_stats_entry: (ether_stats_index, ether_stats_owner).

		:param ether_stats_index: tuple arg.
		:type ether_stats_index: (long)
		
		.. note::
			* range - ['-2147483648..2147483647']

		:param ether_stats_owner: Owner identity
		:type ether_stats_owner: (unicode)
		
		.. note::
			* length - [u'1 .. 15']
			* pattern - [a-zA-Z]{1}([-a-zA-Z0-9\.\\\\@#\+\*\(\)=\{~\}%<>=$_\[\]\|]{0,14})

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = [('pybind.nos.v7_0_1a.interface.tengigabitethernet', u'tengigabitethernet'), ('pybind.nos.v7_1_0.interface.tengigabitethernet', u'tengigabitethernet'), ('pybind.nos.v6_0_2b.interface.tengigabitethernet', u'tengigabitethernet')]
    bindings_list = [('pybind.nos.v6_0_2b.interface.tengigabitethernet.rmon.collection.ether_stats_entry', 'pybind.nos.v6_0_2b.brocade_interface', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.interface.tengigabitethernet.rmon.collection.ether_stats_entry', 'pybind.nos.v7_0_1a.brocade_interface', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.interface.tengigabitethernet.rmon.collection.ether_stats_entry', 'pybind.nos.v7_1_0.brocade_interface', 'pybind.nos.v7_1_0')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'ether_stats_entry', 'keyval': 'ether_stats_index', 'extra_keyval': 'ether_stats_index, ether_stats_owner'}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, tengigabitethernet=tengigabitethernet, ether_stats_entry=ether_stats_entry)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def interface_tengigabitethernet_spanning_tree_instance_delete(self, tengigabitethernet=None, instance=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		NOS: 6.0.2b, 7.0.1a, 7.1.0    

	**Parent Instance Keyword Arg Tuple(s)**:
		:param tengigabitethernet: kwarg tuple.
		:type tengigabitethernet: (name).

		:param name: tuple arg.
		:type name: (unicode)
		
		.. note::
			* length - [u'3..16']
			* pattern - ((([1-9]|[1-9][0-9]|1[0-9][0-9]|2[0-3][0-9])/)?(([0-9]|[1][0-6]))/([1-9]|[1-9][0-9]|[1-9][0-9][0-9])(:[1-4])?)

	**This Instance Keyword Arg Tuple**:
		:param instance: kwarg tuple.
		:type instance: (id).

		:param id: tuple arg.
		:type id: (int)
		
		.. note::
			* range - ['0..255']

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = [('pybind.nos.v7_0_1a.interface.tengigabitethernet', u'tengigabitethernet'), ('pybind.nos.v7_1_0.interface.tengigabitethernet', u'tengigabitethernet'), ('pybind.nos.v6_0_2b.interface.tengigabitethernet', u'tengigabitethernet')]
    bindings_list = [('pybind.nos.v6_0_2b.interface.tengigabitethernet.spanning_tree.instance', 'pybind.nos.v6_0_2b.brocade_interface', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.interface.tengigabitethernet.spanning_tree.instance', 'pybind.nos.v7_0_1a.brocade_interface', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.interface.tengigabitethernet.spanning_tree.instance', 'pybind.nos.v7_1_0.brocade_interface', 'pybind.nos.v7_1_0')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'instance', 'keyval': 'id', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, tengigabitethernet=tengigabitethernet, instance=instance)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def interface_tengigabitethernet_spanning_tree_vlan_delete(self, tengigabitethernet=None, vlan=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		NOS: 6.0.2b, 7.0.1a, 7.1.0    

	**Parent Instance Keyword Arg Tuple(s)**:
		:param tengigabitethernet: kwarg tuple.
		:type tengigabitethernet: (name).

		:param name: tuple arg.
		:type name: (unicode)
		
		.. note::
			* length - [u'3..16']
			* pattern - ((([1-9]|[1-9][0-9]|1[0-9][0-9]|2[0-3][0-9])/)?(([0-9]|[1][0-6]))/([1-9]|[1-9][0-9]|[1-9][0-9][0-9])(:[1-4])?)

	**This Instance Keyword Arg Tuple**:
		:param vlan: kwarg tuple.
		:type vlan: (id).

		:param id: tuple arg.
		:type id: (long)
		
		.. note::
			* range - ['0..4294967295']

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = [('pybind.nos.v7_1_0.interface.tengigabitethernet', u'tengigabitethernet'), ('pybind.nos.v7_0_1a.interface.tengigabitethernet', u'tengigabitethernet'), ('pybind.nos.v6_0_2b.interface.tengigabitethernet', u'tengigabitethernet')]
    bindings_list = [('pybind.nos.v6_0_2b.interface.tengigabitethernet.spanning_tree.vlan', 'pybind.nos.v6_0_2b.brocade_interface', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.interface.tengigabitethernet.spanning_tree.vlan', 'pybind.nos.v7_0_1a.brocade_interface', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.interface.tengigabitethernet.spanning_tree.vlan', 'pybind.nos.v7_1_0.brocade_interface', 'pybind.nos.v7_1_0')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'vlan', 'keyval': 'id', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, tengigabitethernet=tengigabitethernet, vlan=vlan)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def interface_tengigabitethernet_storm_control_ingress_delete(self, tengigabitethernet=None, ingress=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		NOS: 6.0.2b, 7.0.1a, 7.1.0    

	**Parent Instance Keyword Arg Tuple(s)**:
		:param tengigabitethernet: kwarg tuple.
		:type tengigabitethernet: (name).

		:param name: tuple arg.
		:type name: (unicode)
		
		.. note::
			* length - [u'3..16']
			* pattern - ((([1-9]|[1-9][0-9]|1[0-9][0-9]|2[0-3][0-9])/)?(([0-9]|[1][0-6]))/([1-9]|[1-9][0-9]|[1-9][0-9][0-9])(:[1-4])?)

	**This Instance Keyword Arg Tuple**:
		:param ingress: kwarg tuple.
		:type ingress: (protocol_type, rate_format, rate_bps, rate_percent, bum_action).

		:param protocol_type: tuple arg.
		:type protocol_type: (unicode)
		
		.. note::
			* enum - [u'broadcast', u'unknown-unicast', u'multicast']

		:param rate_format: tuple arg.
		:type rate_format: (unicode)
		
		.. note::
			* enum - [u'limit-bps', u'limit-percent']

		:param rate_bps: tuple arg.
		:type rate_bps: (long)
		
		.. note::
			* range - ['0..18446744073709551615']

		:param rate_percent: tuple arg.
		:type rate_percent: (long)
		
		.. note::
			* range - ['0..4294967295']

		:param bum_action: tuple arg.
		:type bum_action: (unicode)
		
		.. note::
			* enum - [u'monitor', u'shutdown']

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = [('pybind.nos.v7_0_1a.interface.tengigabitethernet', u'tengigabitethernet'), ('pybind.nos.v7_1_0.interface.tengigabitethernet', u'tengigabitethernet'), ('pybind.nos.v6_0_2b.interface.tengigabitethernet', u'tengigabitethernet')]
    bindings_list = [('pybind.nos.v6_0_2b.interface.tengigabitethernet.storm_control.ingress', 'pybind.nos.v6_0_2b.brocade_interface', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.interface.tengigabitethernet.storm_control.ingress', 'pybind.nos.v7_0_1a.brocade_interface', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.interface.tengigabitethernet.storm_control.ingress', 'pybind.nos.v7_1_0.brocade_interface', 'pybind.nos.v7_1_0')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'ingress', 'keyval': 'protocol_type', 'extra_keyval': 'protocol_type, rate_format, rate_bps, rate_percent, bum_action'}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, tengigabitethernet=tengigabitethernet, ingress=ingress)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def interface_tengigabitethernet_switchport_access_rspan_vlan_delete(self, tengigabitethernet=None, vlan=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		NOS: 6.0.2b, 7.0.1a, 7.1.0    

	**Parent Instance Keyword Arg Tuple(s)**:
		:param tengigabitethernet: kwarg tuple.
		:type tengigabitethernet: (name).

		:param name: tuple arg.
		:type name: (unicode)
		
		.. note::
			* length - [u'3..16']
			* pattern - ((([1-9]|[1-9][0-9]|1[0-9][0-9]|2[0-3][0-9])/)?(([0-9]|[1][0-6]))/([1-9]|[1-9][0-9]|[1-9][0-9][0-9])(:[1-4])?)

	**This Instance Keyword Arg Tuple**:
		:param vlan: kwarg tuple.
		:type vlan: (access_vlan_id, access_mac_group).

		:param access_vlan_id: Set the default VLAN for the interface
		:type access_vlan_id: (long)
		
		.. note::
			* range - ['0..4294967295']

		:param access_mac_group: Associate a Mac group with a vlan
		:type access_mac_group: (long)
		
		.. note::
			* range - ['0..4294967295']

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = [('pybind.nos.v7_0_1a.interface.tengigabitethernet', u'tengigabitethernet'), ('pybind.nos.v7_1_0.interface.tengigabitethernet', u'tengigabitethernet'), ('pybind.nos.v6_0_2b.interface.tengigabitethernet', u'tengigabitethernet'), ('pybind.nos.v7_0_1a.interface.tengigabitethernet', u'tengigabitethernet'), ('pybind.nos.v6_0_2b.interface.tengigabitethernet', u'tengigabitethernet'), ('pybind.nos.v7_1_0.interface.tengigabitethernet', u'tengigabitethernet')]
    bindings_list = [('pybind.nos.v6_0_2b.interface.tengigabitethernet.switchport.access_mac_group_rspan_vlan_classification.access.vlan', 'pybind.nos.v6_0_2b.brocade_interface', 'pybind.nos.v6_0_2b'), ('pybind.nos.v6_0_2b.interface.tengigabitethernet.switchport.access_mac_rspan_vlan_classification.access.vlan', 'pybind.nos.v6_0_2b.brocade_interface', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.interface.tengigabitethernet.switchport.access_mac_group_rspan_vlan_classification.access.vlan', 'pybind.nos.v7_0_1a.brocade_interface', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_0_1a.interface.tengigabitethernet.switchport.access_mac_rspan_vlan_classification.access.vlan', 'pybind.nos.v7_0_1a.brocade_interface', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.interface.tengigabitethernet.switchport.access_mac_group_rspan_vlan_classification.access.vlan', 'pybind.nos.v7_1_0.brocade_interface', 'pybind.nos.v7_1_0'), ('pybind.nos.v7_1_0.interface.tengigabitethernet.switchport.access_mac_rspan_vlan_classification.access.vlan', 'pybind.nos.v7_1_0.brocade_interface', 'pybind.nos.v7_1_0')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'vlan', 'keyval': 'access_vlan_id, access_mac_address', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, tengigabitethernet=tengigabitethernet, vlan=vlan)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def interface_tengigabitethernet_switchport_access_vlan_delete(self, tengigabitethernet=None, vlan=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		NOS: 6.0.2b, 7.0.1a, 7.1.0    

	**Parent Instance Keyword Arg Tuple(s)**:
		:param tengigabitethernet: kwarg tuple.
		:type tengigabitethernet: (name).

		:param name: tuple arg.
		:type name: (unicode)
		
		.. note::
			* length - [u'3..16']
			* pattern - ((([1-9]|[1-9][0-9]|1[0-9][0-9]|2[0-3][0-9])/)?(([0-9]|[1][0-6]))/([1-9]|[1-9][0-9]|[1-9][0-9][0-9])(:[1-4])?)

	**This Instance Keyword Arg Tuple**:
		:param vlan: kwarg tuple.
		:type vlan: (access_vlan_id, access_mac_group).

		:param access_vlan_id: Set the default VLAN for the interface
		:type access_vlan_id: (long)
		
		.. note::
			* range - ['0..4294967295']

		:param access_mac_group: Associate a Mac group with a vlan
		:type access_mac_group: (long)
		
		.. note::
			* range - ['0..4294967295']

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = [('pybind.nos.v7_1_0.interface.tengigabitethernet', u'tengigabitethernet'), ('pybind.nos.v6_0_2b.interface.tengigabitethernet', u'tengigabitethernet'), ('pybind.nos.v7_0_1a.interface.tengigabitethernet', u'tengigabitethernet'), ('pybind.nos.v6_0_2b.interface.tengigabitethernet', u'tengigabitethernet'), ('pybind.nos.v7_1_0.interface.tengigabitethernet', u'tengigabitethernet'), ('pybind.nos.v7_0_1a.interface.tengigabitethernet', u'tengigabitethernet')]
    bindings_list = [('pybind.nos.v6_0_2b.interface.tengigabitethernet.switchport.access_mac_group_vlan_classification.access.vlan', 'pybind.nos.v6_0_2b.brocade_interface', 'pybind.nos.v6_0_2b'), ('pybind.nos.v6_0_2b.interface.tengigabitethernet.switchport.access_mac_vlan_classification.access.vlan', 'pybind.nos.v6_0_2b.brocade_interface', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.interface.tengigabitethernet.switchport.access_mac_group_vlan_classification.access.vlan', 'pybind.nos.v7_0_1a.brocade_interface', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_0_1a.interface.tengigabitethernet.switchport.access_mac_vlan_classification.access.vlan', 'pybind.nos.v7_0_1a.brocade_interface', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.interface.tengigabitethernet.switchport.access_mac_group_vlan_classification.access.vlan', 'pybind.nos.v7_1_0.brocade_interface', 'pybind.nos.v7_1_0'), ('pybind.nos.v7_1_0.interface.tengigabitethernet.switchport.access_mac_vlan_classification.access.vlan', 'pybind.nos.v7_1_0.brocade_interface', 'pybind.nos.v7_1_0')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'vlan', 'keyval': 'access_vlan_id, access_mac_address', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, tengigabitethernet=tengigabitethernet, vlan=vlan)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def interface_tengigabitethernet_switchport_port_security_delete(self, tengigabitethernet=None, allowed_ouis=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		NOS: 6.0.2b, 7.0.1a, 7.1.0    

	**Parent Instance Keyword Arg Tuple(s)**:
		:param tengigabitethernet: kwarg tuple.
		:type tengigabitethernet: (name).

		:param name: tuple arg.
		:type name: (unicode)
		
		.. note::
			* length - [u'3..16']
			* pattern - ((([1-9]|[1-9][0-9]|1[0-9][0-9]|2[0-3][0-9])/)?(([0-9]|[1][0-6]))/([1-9]|[1-9][0-9]|[1-9][0-9][0-9])(:[1-4])?)

	**This Instance Keyword Arg Tuple**:
		:param allowed_ouis: kwarg tuple.
		:type allowed_ouis: (oui).

		:param oui: <OUI> OUI in HHHH.HH00.0000 format
		:type oui: (unicode)
		
		.. note::
			* pattern - [0-9a-fA-F]{4}\.[0-9a-fA-F]{2}00\.0000

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = [('pybind.nos.v7_0_1a.interface.tengigabitethernet', u'tengigabitethernet'), ('pybind.nos.v7_0_1a.interface.tengigabitethernet', u'tengigabitethernet'), ('pybind.nos.v6_0_2b.interface.tengigabitethernet', u'tengigabitethernet'), ('pybind.nos.v7_1_0.interface.tengigabitethernet', u'tengigabitethernet'), ('pybind.nos.v7_1_0.interface.tengigabitethernet', u'tengigabitethernet'), ('pybind.nos.v6_0_2b.interface.tengigabitethernet', u'tengigabitethernet')]
    bindings_list = [('pybind.nos.v6_0_2b.interface.tengigabitethernet.switchport.port_security.allowed_ouis', 'pybind.nos.v6_0_2b.brocade_interface', 'pybind.nos.v6_0_2b'), ('pybind.nos.v6_0_2b.interface.tengigabitethernet.switchport.port_security.port_secutiry_mac_address', 'pybind.nos.v6_0_2b.brocade_interface', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.interface.tengigabitethernet.switchport.port_security.allowed_ouis', 'pybind.nos.v7_0_1a.brocade_interface', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_0_1a.interface.tengigabitethernet.switchport.port_security.port_secutiry_mac_address', 'pybind.nos.v7_0_1a.brocade_interface', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.interface.tengigabitethernet.switchport.port_security.allowed_ouis', 'pybind.nos.v7_1_0.brocade_interface', 'pybind.nos.v7_1_0'), ('pybind.nos.v7_1_0.interface.tengigabitethernet.switchport.port_security.port_secutiry_mac_address', 'pybind.nos.v7_1_0.brocade_interface', 'pybind.nos.v7_1_0')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'port_secutiry_mac_address', 'keyval': 'mac_address, port_sec_vlan', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, tengigabitethernet=tengigabitethernet, allowed_ouis=allowed_ouis)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def interface_tengigabitethernet_switchport_port_security_sticky_delete(self, tengigabitethernet=None, port_secutiry_mac_address=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		NOS: 6.0.2b, 7.0.1a, 7.1.0    

	**Parent Instance Keyword Arg Tuple(s)**:
		:param tengigabitethernet: kwarg tuple.
		:type tengigabitethernet: (name).

		:param name: tuple arg.
		:type name: (unicode)
		
		.. note::
			* length - [u'3..16']
			* pattern - ((([1-9]|[1-9][0-9]|1[0-9][0-9]|2[0-3][0-9])/)?(([0-9]|[1][0-6]))/([1-9]|[1-9][0-9]|[1-9][0-9][0-9])(:[1-4])?)

	**This Instance Keyword Arg Tuple**:
		:param port_secutiry_mac_address: kwarg tuple.
		:type port_secutiry_mac_address: (mac_address, port_sec_vlan).

		:param mac_address: Mac Address
		:type mac_address: (unicode)

		:param port_sec_vlan: Forwarding vlan
		:type port_sec_vlan: (long)
		
		.. note::
			* range - ['0..4294967295']

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = [('pybind.nos.v7_0_1a.interface.tengigabitethernet', u'tengigabitethernet'), ('pybind.nos.v7_1_0.interface.tengigabitethernet', u'tengigabitethernet'), ('pybind.nos.v6_0_2b.interface.tengigabitethernet', u'tengigabitethernet')]
    bindings_list = [('pybind.nos.v6_0_2b.interface.tengigabitethernet.switchport.port_security.sticky.port_secutiry_mac_address', 'pybind.nos.v6_0_2b.brocade_interface', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.interface.tengigabitethernet.switchport.port_security.sticky.port_secutiry_mac_address', 'pybind.nos.v7_0_1a.brocade_interface', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.interface.tengigabitethernet.switchport.port_security.sticky.port_secutiry_mac_address', 'pybind.nos.v7_1_0.brocade_interface', 'pybind.nos.v7_1_0')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'port_secutiry_mac_address', 'keyval': 'mac_address, port_sec_vlan', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, tengigabitethernet=tengigabitethernet, port_secutiry_mac_address=port_secutiry_mac_address)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def interface_tengigabitethernet_switchport_private_vlan_association_trunk_delete(self, tengigabitethernet=None, trunk=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		NOS: 6.0.2b, 7.0.1a, 7.1.0    

	**Parent Instance Keyword Arg Tuple(s)**:
		:param tengigabitethernet: kwarg tuple.
		:type tengigabitethernet: (name).

		:param name: tuple arg.
		:type name: (unicode)
		
		.. note::
			* length - [u'3..16']
			* pattern - ((([1-9]|[1-9][0-9]|1[0-9][0-9]|2[0-3][0-9])/)?(([0-9]|[1][0-6]))/([1-9]|[1-9][0-9]|[1-9][0-9][0-9])(:[1-4])?)

	**This Instance Keyword Arg Tuple**:
		:param trunk: kwarg tuple.
		:type trunk: (trunk_pri_pvlan, trunk_sec_pvlan).

		:param trunk_pri_pvlan: Primary vlan id
		:type trunk_pri_pvlan: (long)
		
		.. note::
			* range - ['0..4294967295']

		:param trunk_sec_pvlan: Secondary vlan id 
		:type trunk_sec_pvlan: (long)
		
		.. note::
			* range - ['0..4294967295']

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = [('pybind.nos.v7_0_1a.interface.tengigabitethernet', u'tengigabitethernet'), ('pybind.nos.v7_1_0.interface.tengigabitethernet', u'tengigabitethernet'), ('pybind.nos.v6_0_2b.interface.tengigabitethernet', u'tengigabitethernet')]
    bindings_list = [('pybind.nos.v6_0_2b.interface.tengigabitethernet.switchport.private_vlan.association.trunk', 'pybind.nos.v6_0_2b.brocade_interface', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.interface.tengigabitethernet.switchport.private_vlan.association.trunk', 'pybind.nos.v7_0_1a.brocade_interface', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.interface.tengigabitethernet.switchport.private_vlan.association.trunk', 'pybind.nos.v7_1_0.brocade_interface', 'pybind.nos.v7_1_0')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'trunk', 'keyval': 'trunk_pri_pvlan, trunk_sec_pvlan', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, tengigabitethernet=tengigabitethernet, trunk=trunk)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def interface_tengigabitethernet_switchport_private_vlan_mapping_delete(self, tengigabitethernet=None, mapping=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		NOS: 6.0.2b, 7.0.1a, 7.1.0    

	**Parent Instance Keyword Arg Tuple(s)**:
		:param tengigabitethernet: kwarg tuple.
		:type tengigabitethernet: (name).

		:param name: tuple arg.
		:type name: (unicode)
		
		.. note::
			* length - [u'3..16']
			* pattern - ((([1-9]|[1-9][0-9]|1[0-9][0-9]|2[0-3][0-9])/)?(([0-9]|[1][0-6]))/([1-9]|[1-9][0-9]|[1-9][0-9][0-9])(:[1-4])?)

	**This Instance Keyword Arg Tuple**:
		:param mapping: kwarg tuple.
		:type mapping: (promis_pri_pvlan, oper, promis_sec_pvlan_range).

		:param promis_pri_pvlan: Primary vlan id
		:type promis_pri_pvlan: (long)
		
		.. note::
			* range - ['0..4294967295']

		:param oper: tuple arg.
		:type oper: (unicode)
		
		.. note::
			* enum - [u'add', u'delete']

		:param promis_sec_pvlan_range: Secondary vlan range
		:type promis_sec_pvlan_range: (unicode)
		
		.. note::
			* length - [u'1..253']
			* pattern - (([1-9][0-9]{0,2})|([1-7][0-9]{3})|(80[0-9]{2})|(81[0-8][0-9])|(819[01]))(-(([2-9])|([1-9][0-9]{1,2})|([1-7][0-9]{3})|(80[0-9]{2})|(81[0-8][0-9])|(819[01])))?((,(([2-9])|([1-9][0-9]{1,2})|([1-7][0-9]{3})|(80[0-9]{2})|(81[0-8][0-9])|(819[01]))(-(([3-9])|([1-9][0-9]{1,2})|([1-7][0-9]{3})|(80[0-9]{2})|(81[0-8][0-9])|(819[01])))?)?)*

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = [('pybind.nos.v7_1_0.interface.tengigabitethernet', u'tengigabitethernet'), ('pybind.nos.v6_0_2b.interface.tengigabitethernet', u'tengigabitethernet'), ('pybind.nos.v7_0_1a.interface.tengigabitethernet', u'tengigabitethernet')]
    bindings_list = [('pybind.nos.v6_0_2b.interface.tengigabitethernet.switchport.private_vlan.mapping', 'pybind.nos.v6_0_2b.brocade_interface', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.interface.tengigabitethernet.switchport.private_vlan.mapping', 'pybind.nos.v7_0_1a.brocade_interface', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.interface.tengigabitethernet.switchport.private_vlan.mapping', 'pybind.nos.v7_1_0.brocade_interface', 'pybind.nos.v7_1_0')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'mapping', 'keyval': 'promis_pri_pvlan', 'extra_keyval': 'promis_pri_pvlan, oper, promis_sec_pvlan_range'}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, tengigabitethernet=tengigabitethernet, mapping=mapping)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def interface_tengigabitethernet_switchport_private_vlan_trunk_allowed_vlan_add_delete(self, tengigabitethernet=None, add=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		NOS: 6.0.2b, 7.0.1a, 7.1.0    

	**Parent Instance Keyword Arg Tuple(s)**:
		:param tengigabitethernet: kwarg tuple.
		:type tengigabitethernet: (name).

		:param name: tuple arg.
		:type name: (unicode)
		
		.. note::
			* length - [u'3..16']
			* pattern - ((([1-9]|[1-9][0-9]|1[0-9][0-9]|2[0-3][0-9])/)?(([0-9]|[1][0-6]))/([1-9]|[1-9][0-9]|[1-9][0-9][0-9])(:[1-4])?)

	**This Instance Keyword Arg Tuple**:
		:param add: kwarg tuple.
		:type add: (trunk_vlan_id, trunk_ctag_id).

		:param trunk_vlan_id: tuple arg.
		:type trunk_vlan_id: (long)
		
		.. note::
			* range - ['0..4294967295']

		:param trunk_ctag_id: tuple arg.
		:type trunk_ctag_id: (long)
		
		.. note::
			* range - ['0..4294967295']

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = [('pybind.nos.v6_0_2b.interface.tengigabitethernet', u'tengigabitethernet'), ('pybind.nos.v7_0_1a.interface.tengigabitethernet', u'tengigabitethernet'), ('pybind.nos.v7_1_0.interface.tengigabitethernet', u'tengigabitethernet')]
    bindings_list = [('pybind.nos.v6_0_2b.interface.tengigabitethernet.switchport.trunk_private_vlan_classification.private_vlan.trunk.allowed.vlan.add_', 'pybind.nos.v6_0_2b.brocade_interface', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.interface.tengigabitethernet.switchport.trunk_private_vlan_classification.private_vlan.trunk.allowed.vlan.add_', 'pybind.nos.v7_0_1a.brocade_interface', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.interface.tengigabitethernet.switchport.trunk_private_vlan_classification.private_vlan.trunk.allowed.vlan.add_', 'pybind.nos.v7_1_0.brocade_interface', 'pybind.nos.v7_1_0')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'add', 'keyval': 'trunk_vlan_id, trunk_ctag_id', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, tengigabitethernet=tengigabitethernet, add=add)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def interface_tengigabitethernet_switchport_private_vlan_trunk_allowed_vlan_remove_delete(self, tengigabitethernet=None, remove=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		NOS: 6.0.2b, 7.0.1a, 7.1.0    

	**Parent Instance Keyword Arg Tuple(s)**:
		:param tengigabitethernet: kwarg tuple.
		:type tengigabitethernet: (name).

		:param name: tuple arg.
		:type name: (unicode)
		
		.. note::
			* length - [u'3..16']
			* pattern - ((([1-9]|[1-9][0-9]|1[0-9][0-9]|2[0-3][0-9])/)?(([0-9]|[1][0-6]))/([1-9]|[1-9][0-9]|[1-9][0-9][0-9])(:[1-4])?)

	**This Instance Keyword Arg Tuple**:
		:param remove: kwarg tuple.
		:type remove: (trunk_vlan_id, trunk_ctag_id).

		:param trunk_vlan_id: tuple arg.
		:type trunk_vlan_id: (long)
		
		.. note::
			* range - ['0..4294967295']

		:param trunk_ctag_id: tuple arg.
		:type trunk_ctag_id: (long)
		
		.. note::
			* range - ['0..4294967295']

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = [('pybind.nos.v7_1_0.interface.tengigabitethernet', u'tengigabitethernet'), ('pybind.nos.v6_0_2b.interface.tengigabitethernet', u'tengigabitethernet'), ('pybind.nos.v7_0_1a.interface.tengigabitethernet', u'tengigabitethernet')]
    bindings_list = [('pybind.nos.v6_0_2b.interface.tengigabitethernet.switchport.trunk_private_vlan_classification.private_vlan.trunk.allowed.vlan.remove_', 'pybind.nos.v6_0_2b.brocade_interface', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.interface.tengigabitethernet.switchport.trunk_private_vlan_classification.private_vlan.trunk.allowed.vlan.remove_', 'pybind.nos.v7_0_1a.brocade_interface', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.interface.tengigabitethernet.switchport.trunk_private_vlan_classification.private_vlan.trunk.allowed.vlan.remove_', 'pybind.nos.v7_1_0.brocade_interface', 'pybind.nos.v7_1_0')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'remove', 'keyval': 'trunk_vlan_id, trunk_ctag_id', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, tengigabitethernet=tengigabitethernet, remove=remove)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def interface_tengigabitethernet_switchport_trunk_allowed_rspan_vlan_add_delete(self, tengigabitethernet=None, add=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		NOS: 6.0.2b, 7.0.1a, 7.1.0    

	**Parent Instance Keyword Arg Tuple(s)**:
		:param tengigabitethernet: kwarg tuple.
		:type tengigabitethernet: (name).

		:param name: tuple arg.
		:type name: (unicode)
		
		.. note::
			* length - [u'3..16']
			* pattern - ((([1-9]|[1-9][0-9]|1[0-9][0-9]|2[0-3][0-9])/)?(([0-9]|[1][0-6]))/([1-9]|[1-9][0-9]|[1-9][0-9][0-9])(:[1-4])?)

	**This Instance Keyword Arg Tuple**:
		:param add: kwarg tuple.
		:type add: (trunk_vlan_id, trunk_ctag_id).

		:param trunk_vlan_id: tuple arg.
		:type trunk_vlan_id: (long)
		
		.. note::
			* range - ['0..4294967295']

		:param trunk_ctag_id: tuple arg.
		:type trunk_ctag_id: (long)
		
		.. note::
			* range - ['0..4294967295']

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = [('pybind.nos.v6_0_2b.interface.tengigabitethernet', u'tengigabitethernet'), ('pybind.nos.v7_0_1a.interface.tengigabitethernet', u'tengigabitethernet'), ('pybind.nos.v7_1_0.interface.tengigabitethernet', u'tengigabitethernet')]
    bindings_list = [('pybind.nos.v6_0_2b.interface.tengigabitethernet.switchport.trunk.allowed.trunk_rspan_vlan_classification.rspan_vlan.add_', 'pybind.nos.v6_0_2b.brocade_interface', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.interface.tengigabitethernet.switchport.trunk.allowed.trunk_rspan_vlan_classification.rspan_vlan.add_', 'pybind.nos.v7_0_1a.brocade_interface', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.interface.tengigabitethernet.switchport.trunk.allowed.trunk_rspan_vlan_classification.rspan_vlan.add_', 'pybind.nos.v7_1_0.brocade_interface', 'pybind.nos.v7_1_0')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'add', 'keyval': 'trunk_vlan_id, trunk_ctag_id', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, tengigabitethernet=tengigabitethernet, add=add)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def interface_tengigabitethernet_switchport_trunk_allowed_rspan_vlan_remove_delete(self, tengigabitethernet=None, remove=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		NOS: 6.0.2b, 7.0.1a, 7.1.0    

	**Parent Instance Keyword Arg Tuple(s)**:
		:param tengigabitethernet: kwarg tuple.
		:type tengigabitethernet: (name).

		:param name: tuple arg.
		:type name: (unicode)
		
		.. note::
			* length - [u'3..16']
			* pattern - ((([1-9]|[1-9][0-9]|1[0-9][0-9]|2[0-3][0-9])/)?(([0-9]|[1][0-6]))/([1-9]|[1-9][0-9]|[1-9][0-9][0-9])(:[1-4])?)

	**This Instance Keyword Arg Tuple**:
		:param remove: kwarg tuple.
		:type remove: (trunk_vlan_id, trunk_ctag_id).

		:param trunk_vlan_id: tuple arg.
		:type trunk_vlan_id: (long)
		
		.. note::
			* range - ['0..4294967295']

		:param trunk_ctag_id: tuple arg.
		:type trunk_ctag_id: (long)
		
		.. note::
			* range - ['0..4294967295']

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = [('pybind.nos.v7_0_1a.interface.tengigabitethernet', u'tengigabitethernet'), ('pybind.nos.v7_1_0.interface.tengigabitethernet', u'tengigabitethernet'), ('pybind.nos.v6_0_2b.interface.tengigabitethernet', u'tengigabitethernet')]
    bindings_list = [('pybind.nos.v6_0_2b.interface.tengigabitethernet.switchport.trunk.allowed.trunk_rspan_vlan_classification.rspan_vlan.remove_', 'pybind.nos.v6_0_2b.brocade_interface', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.interface.tengigabitethernet.switchport.trunk.allowed.trunk_rspan_vlan_classification.rspan_vlan.remove_', 'pybind.nos.v7_0_1a.brocade_interface', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.interface.tengigabitethernet.switchport.trunk.allowed.trunk_rspan_vlan_classification.rspan_vlan.remove_', 'pybind.nos.v7_1_0.brocade_interface', 'pybind.nos.v7_1_0')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'remove', 'keyval': 'trunk_vlan_id, trunk_ctag_id', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, tengigabitethernet=tengigabitethernet, remove=remove)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def interface_tengigabitethernet_switchport_trunk_allowed_vlan_add_delete(self, tengigabitethernet=None, add=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		NOS: 6.0.2b, 7.0.1a, 7.1.0    

	**Parent Instance Keyword Arg Tuple(s)**:
		:param tengigabitethernet: kwarg tuple.
		:type tengigabitethernet: (name).

		:param name: tuple arg.
		:type name: (unicode)
		
		.. note::
			* length - [u'3..16']
			* pattern - ((([1-9]|[1-9][0-9]|1[0-9][0-9]|2[0-3][0-9])/)?(([0-9]|[1][0-6]))/([1-9]|[1-9][0-9]|[1-9][0-9][0-9])(:[1-4])?)

	**This Instance Keyword Arg Tuple**:
		:param add: kwarg tuple.
		:type add: (trunk_vlan_id).

		:param trunk_vlan_id: tuple arg.
		:type trunk_vlan_id: (long)
		
		.. note::
			* range - ['0..4294967295']

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = [('pybind.nos.v6_0_2b.interface.tengigabitethernet', u'tengigabitethernet'), ('pybind.nos.v7_0_1a.interface.tengigabitethernet', u'tengigabitethernet'), ('pybind.nos.v7_1_0.interface.tengigabitethernet', u'tengigabitethernet')]
    bindings_list = [('pybind.nos.v6_0_2b.interface.tengigabitethernet.switchport.trunk.trunk_vlan_classification.allowed.vlan.add_', 'pybind.nos.v6_0_2b.brocade_interface', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.interface.tengigabitethernet.switchport.trunk.trunk_vlan_classification.allowed.vlan.add_', 'pybind.nos.v7_0_1a.brocade_interface', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.interface.tengigabitethernet.switchport.trunk.trunk_vlan_classification.allowed.vlan.add_', 'pybind.nos.v7_1_0.brocade_interface', 'pybind.nos.v7_1_0')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'add', 'keyval': 'trunk_vlan_id', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, tengigabitethernet=tengigabitethernet, add=add)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def interface_tengigabitethernet_switchport_trunk_allowed_vlan_remove_delete(self, tengigabitethernet=None, remove=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		NOS: 6.0.2b, 7.0.1a, 7.1.0    

	**Parent Instance Keyword Arg Tuple(s)**:
		:param tengigabitethernet: kwarg tuple.
		:type tengigabitethernet: (name).

		:param name: tuple arg.
		:type name: (unicode)
		
		.. note::
			* length - [u'3..16']
			* pattern - ((([1-9]|[1-9][0-9]|1[0-9][0-9]|2[0-3][0-9])/)?(([0-9]|[1][0-6]))/([1-9]|[1-9][0-9]|[1-9][0-9][0-9])(:[1-4])?)

	**This Instance Keyword Arg Tuple**:
		:param remove: kwarg tuple.
		:type remove: (trunk_vlan_id).

		:param trunk_vlan_id: tuple arg.
		:type trunk_vlan_id: (long)
		
		.. note::
			* range - ['0..4294967295']

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = [('pybind.nos.v7_0_1a.interface.tengigabitethernet', u'tengigabitethernet'), ('pybind.nos.v7_1_0.interface.tengigabitethernet', u'tengigabitethernet'), ('pybind.nos.v6_0_2b.interface.tengigabitethernet', u'tengigabitethernet')]
    bindings_list = [('pybind.nos.v6_0_2b.interface.tengigabitethernet.switchport.trunk.trunk_vlan_classification.allowed.vlan.remove_', 'pybind.nos.v6_0_2b.brocade_interface', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.interface.tengigabitethernet.switchport.trunk.trunk_vlan_classification.allowed.vlan.remove_', 'pybind.nos.v7_0_1a.brocade_interface', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.interface.tengigabitethernet.switchport.trunk.trunk_vlan_classification.allowed.vlan.remove_', 'pybind.nos.v7_1_0.brocade_interface', 'pybind.nos.v7_1_0')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'remove', 'keyval': 'trunk_vlan_id', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, tengigabitethernet=tengigabitethernet, remove=remove)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def interface_tengigabitethernet_track_interface_delete(self, tengigabitethernet=None, interface=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		NOS: 6.0.2b, 7.0.1a, 7.1.0    

	**Parent Instance Keyword Arg Tuple(s)**:
		:param tengigabitethernet: kwarg tuple.
		:type tengigabitethernet: (name).

		:param name: tuple arg.
		:type name: (unicode)
		
		.. note::
			* length - [u'3..16']
			* pattern - ((([1-9]|[1-9][0-9]|1[0-9][0-9]|2[0-3][0-9])/)?(([0-9]|[1][0-6]))/([1-9]|[1-9][0-9]|[1-9][0-9][0-9])(:[1-4])?)

	**This Instance Keyword Arg Tuple**:
		:param interface: kwarg tuple.
		:type interface: (track_interface_type, track_interface_name).

		:param track_interface_type: tuple arg.
		:type track_interface_type: (unicode)
		
		.. note::
			* enum - [u'ethernet', u'port-channel']

		:param track_interface_name: Interface name
		:type track_interface_name: (unicode)
		
		.. note::
			* pattern - (((([1-9]|[1-9][0-9]|1[0-9]{2}|2[0-3][0-9])/)?(([0-9]|1[0-6]))/([1-9]|[1-9][0-9]|[1-9][0-9][0-9])(:[1-4])?)|([1-9]|[1-9][0-9]|[1-9][0-9]{2}|[1-5][0-9]{3}|6[0-1][0-4]{2}))

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = [('pybind.nos.v7_1_0.interface.tengigabitethernet', u'tengigabitethernet'), ('pybind.nos.v7_0_1a.interface.tengigabitethernet', u'tengigabitethernet'), ('pybind.nos.v6_0_2b.interface.tengigabitethernet', u'tengigabitethernet')]
    bindings_list = [('pybind.nos.v6_0_2b.interface.tengigabitethernet.track.interface', 'pybind.nos.v6_0_2b.brocade_interface', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.interface.tengigabitethernet.track.interface', 'pybind.nos.v7_0_1a.brocade_interface', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.interface.tengigabitethernet.track.interface', 'pybind.nos.v7_1_0.brocade_interface', 'pybind.nos.v7_1_0')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'interface', 'keyval': 'track_interface_type, track_interface_name', 'extra_keyval': 'track_interface_type, track_interface_name'}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, tengigabitethernet=tengigabitethernet, interface=interface)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def interface_tengigabitethernet_vlan_classifier_activate_group_delete(self, tengigabitethernet=None, group=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		NOS: 6.0.2b, 7.0.1a, 7.1.0    

	**Parent Instance Keyword Arg Tuple(s)**:
		:param tengigabitethernet: kwarg tuple.
		:type tengigabitethernet: (name).

		:param name: tuple arg.
		:type name: (unicode)
		
		.. note::
			* length - [u'3..16']
			* pattern - ((([1-9]|[1-9][0-9]|1[0-9][0-9]|2[0-3][0-9])/)?(([0-9]|[1][0-6]))/([1-9]|[1-9][0-9]|[1-9][0-9][0-9])(:[1-4])?)

	**This Instance Keyword Arg Tuple**:
		:param group: kwarg tuple.
		:type group: (groupid, vlan).

		:param groupid: tuple arg.
		:type groupid: (long)
		
		.. note::
			* range - ['0..4294967295']

		:param vlan: 1-8191;;Vlan
		:type vlan: (long)
		
		.. note::
			* range - ['0..4294967295']

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = [('pybind.nos.v6_0_2b.interface.tengigabitethernet', u'tengigabitethernet'), ('pybind.nos.v7_1_0.interface.tengigabitethernet', u'tengigabitethernet'), ('pybind.nos.v7_0_1a.interface.tengigabitethernet', u'tengigabitethernet')]
    bindings_list = [('pybind.nos.v6_0_2b.interface.tengigabitethernet.vlan.classifier.activate.group', 'pybind.nos.v6_0_2b.brocade_interface', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.interface.tengigabitethernet.vlan.classifier.activate.group', 'pybind.nos.v7_0_1a.brocade_interface', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.interface.tengigabitethernet.vlan.classifier.activate.group', 'pybind.nos.v7_1_0.brocade_interface', 'pybind.nos.v7_1_0')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'group', 'keyval': 'groupid', 'extra_keyval': 'groupid, vlan'}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, tengigabitethernet=tengigabitethernet, group=group)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def interface_tengigabitethernet_vrrp_group_delete(self, tengigabitethernet=None, vrrp=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		NOS: 6.0.2b, 7.0.1a, 7.1.0    

	**Parent Instance Keyword Arg Tuple(s)**:
		:param tengigabitethernet: kwarg tuple.
		:type tengigabitethernet: (name).

		:param name: tuple arg.
		:type name: (unicode)
		
		.. note::
			* length - [u'3..16']
			* pattern - ((([1-9]|[1-9][0-9]|1[0-9][0-9]|2[0-3][0-9])/)?(([0-9]|[1][0-6]))/([1-9]|[1-9][0-9]|[1-9][0-9][0-9])(:[1-4])?)

	**This Instance Keyword Arg Tuple**:
		:param vrrp: kwarg tuple.
		:type vrrp: (vrid, version).

		:param vrid: tuple arg.
		:type vrid: (int)
		
		.. note::
			* range - ['0..255']

		:param version: Set VRRP version 2/3
		:type version: (int)
		
		.. note::
			* range - ['0..255']

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = [('pybind.nos.v7_0_1a.interface.tengigabitethernet', u'tengigabitethernet'), ('pybind.nos.v6_0_2b.interface.tengigabitethernet', u'tengigabitethernet'), ('pybind.nos.v7_1_0.interface.tengigabitethernet', u'tengigabitethernet')]
    bindings_list = [('pybind.nos.v6_0_2b.interface.tengigabitethernet.vrrp', 'pybind.nos.v6_0_2b.brocade_interface', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.interface.tengigabitethernet.vrrp', 'pybind.nos.v7_0_1a.brocade_interface', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.interface.tengigabitethernet.vrrp', 'pybind.nos.v7_1_0.brocade_interface', 'pybind.nos.v7_1_0')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'vrrp', 'keyval': 'vrid, version', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, tengigabitethernet=tengigabitethernet, vrrp=vrrp)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def interface_tengigabitethernet_vrrp_group_track_delete(self, tengigabitethernet=None, vrrp=None, interface=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		NOS: 6.0.2b, 7.0.1a, 7.1.0    

	**Parent Instance Keyword Arg Tuple(s)**:
		:param tengigabitethernet: kwarg tuple.
		:type tengigabitethernet: (name).

		:param name: tuple arg.
		:type name: (unicode)
		
		.. note::
			* length - [u'3..16']
			* pattern - ((([1-9]|[1-9][0-9]|1[0-9][0-9]|2[0-3][0-9])/)?(([0-9]|[1][0-6]))/([1-9]|[1-9][0-9]|[1-9][0-9][0-9])(:[1-4])?)

		:param vrrp: kwarg tuple.
		:type vrrp: (vrid, version).

		:param vrid: tuple arg.
		:type vrid: (int)
		
		.. note::
			* range - ['0..255']

		:param version: Set VRRP version 2/3
		:type version: (int)
		
		.. note::
			* range - ['0..255']

	**This Instance Keyword Arg Tuple**:
		:param interface: kwarg tuple.
		:type interface: (interface_type, interface_name).

		:param interface_type: tuple arg.
		:type interface_type: (unicode)
		
		.. note::
			* enum - [u'fortygigabitethernet', u'gigabitethernet', u'tengigabitethernet', u'hundredgigabitethernet', u'port-channel']

		:param interface_name: tuple arg.
		:type interface_name: (unicode)
		
		.. note::
			* length - [u'3..16']
			* pattern - ((([1-9]|[1-9][0-9]|1[0-9][0-9]|2[0-3][0-9])/)?(([0-9]|[1][0-6]))/([1-9]|[1-9][0-9]|[1-9][0-9][0-9])(:[1-4])?)

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = [('pybind.nos.v7_0_1a.interface.tengigabitethernet', u'tengigabitethernet'), ('pybind.nos.v7_0_1a.interface.tengigabitethernet.vrrp', u'vrrp'), ('pybind.nos.v6_0_2b.interface.tengigabitethernet', u'tengigabitethernet'), ('pybind.nos.v6_0_2b.interface.tengigabitethernet.vrrp', u'vrrp'), ('pybind.nos.v7_1_0.interface.tengigabitethernet', u'tengigabitethernet'), ('pybind.nos.v7_1_0.interface.tengigabitethernet.vrrp', u'vrrp')]
    bindings_list = [('pybind.nos.v6_0_2b.interface.tengigabitethernet.vrrp.track.interface', 'pybind.nos.v6_0_2b.brocade_interface', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.interface.tengigabitethernet.vrrp.track.interface', 'pybind.nos.v7_0_1a.brocade_interface', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.interface.tengigabitethernet.vrrp.track.interface', 'pybind.nos.v7_1_0.brocade_interface', 'pybind.nos.v7_1_0')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'vrid, version', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'vrid, version', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'vrid, version', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'interface', 'keyval': 'interface_type, interface_name', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, tengigabitethernet=tengigabitethernet, vrrp=vrrp, interface=interface)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def interface_tengigabitethernet_vrrp_group_virtual_ip_delete(self, tengigabitethernet=None, vrrp=None, virtual_ip=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		NOS: 6.0.2b, 7.0.1a, 7.1.0    

	**Parent Instance Keyword Arg Tuple(s)**:
		:param tengigabitethernet: kwarg tuple.
		:type tengigabitethernet: (name).

		:param name: tuple arg.
		:type name: (unicode)
		
		.. note::
			* length - [u'3..16']
			* pattern - ((([1-9]|[1-9][0-9]|1[0-9][0-9]|2[0-3][0-9])/)?(([0-9]|[1][0-6]))/([1-9]|[1-9][0-9]|[1-9][0-9][0-9])(:[1-4])?)

		:param vrrp: kwarg tuple.
		:type vrrp: (vrid, version).

		:param vrid: tuple arg.
		:type vrid: (int)
		
		.. note::
			* range - ['0..255']

		:param version: Set VRRP version 2/3
		:type version: (int)
		
		.. note::
			* range - ['0..255']

	**This Instance Keyword Arg Tuple**:
		:param virtual_ip: kwarg tuple.
		:type virtual_ip: (virtual_ipaddr).

		:param virtual_ipaddr: Virtual IPv4 address in dotted decimal
		:type virtual_ipaddr: (unicode)
		
		.. note::
			* pattern - (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = [('pybind.nos.v7_0_1a.interface.tengigabitethernet', u'tengigabitethernet'), ('pybind.nos.v7_0_1a.interface.tengigabitethernet.vrrp', u'vrrp'), ('pybind.nos.v7_1_0.interface.tengigabitethernet', u'tengigabitethernet'), ('pybind.nos.v7_1_0.interface.tengigabitethernet.vrrp', u'vrrp'), ('pybind.nos.v6_0_2b.interface.tengigabitethernet', u'tengigabitethernet'), ('pybind.nos.v6_0_2b.interface.tengigabitethernet.vrrp', u'vrrp')]
    bindings_list = [('pybind.nos.v6_0_2b.interface.tengigabitethernet.vrrp.virtual_ip', 'pybind.nos.v6_0_2b.brocade_interface', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.interface.tengigabitethernet.vrrp.virtual_ip', 'pybind.nos.v7_0_1a.brocade_interface', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.interface.tengigabitethernet.vrrp.virtual_ip', 'pybind.nos.v7_1_0.brocade_interface', 'pybind.nos.v7_1_0')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'vrid, version', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'vrid, version', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'vrid, version', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'virtual_ip', 'keyval': 'virtual_ipaddr', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, tengigabitethernet=tengigabitethernet, vrrp=vrrp, virtual_ip=virtual_ip)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def interface_tunnel_delete(self, tunnel=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		SLXOS: 16r.1.00b    

	**This Instance Keyword Arg Tuple**:
		:param tunnel: kwarg tuple.
		:type tunnel: (identifier).

		:param identifier: Identifier value range 1 to 1024
		:type identifier: (long)
		
		.. note::
			* range - ['0..4294967295']

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = []
    bindings_list = [('pybind.slxos.v16r_1_00b.interface.tunnel', 'pybind.slxos.v16r_1_00b.brocade_interface', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = []
    bindings_keyval = {'kwargs_key_name': u'tunnel', 'keyval': 'identifier', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, tunnel=tunnel)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def interface_ve_delete(self, ve=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		NOS: 6.0.2b, 7.0.1a, 7.1.0
		SLXOS: 16r.1.00b    

	**This Instance Keyword Arg Tuple**:
		:param ve: kwarg tuple.
		:type ve: (gve_name).

		:param gve_name: tuple arg.
		:type gve_name: (long)
		
		.. note::
			* range - ['0..4294967295']

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = []
    bindings_list = [('pybind.nos.v6_0_2b.interface_vlan.interface.ve', 'pybind.nos.v6_0_2b.brocade_interface', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.interface_vlan.interface.ve', 'pybind.nos.v7_0_1a.brocade_interface', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.interface_vlan.interface.ve', 'pybind.nos.v7_1_0.brocade_interface', 'pybind.nos.v7_1_0'), ('pybind.slxos.v16r_1_00b.routing_system.interface.ve', 'pybind.slxos.v16r_1_00b.brocade_common_def', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = []
    bindings_keyval = {'kwargs_key_name': u've', 'keyval': 'gve_name', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, ve=ve)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def interface_ve_ip_access_group_delete(self, ve=None, access_group=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		SLXOS: 16r.1.00b    

	**Parent Instance Keyword Arg Tuple(s)**:
		:param ve: kwarg tuple.
		:type ve: (name).

		:param name: tuple arg.
		:type name: (long)
		
		.. note::
			* range - ['0..4294967295']

	**This Instance Keyword Arg Tuple**:
		:param access_group: kwarg tuple.
		:type access_group: (ip_access_list, ip_direction, traffic_type).

		:param ip_access_list: ACL_NAME;; Access List Name (Max 63)
		:type ip_access_list: (unicode)
		
		.. note::
			* length - [u'1..63']
			* pattern - [a-zA-Z0-9]{1}([-a-zA-Z0-9_]{0,62})

		:param ip_direction: tuple arg.
		:type ip_direction: (unicode)
		
		.. note::
			* enum - [u'in', u'out']

		:param traffic_type: tuple arg.
		:type traffic_type: (unicode)
		
		.. note::
			* enum - [u'switched', u'routed']

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = [('pybind.slxos.v16r_1_00b.routing_system.interface.ve', u've')]
    bindings_list = [('pybind.slxos.v16r_1_00b.routing_system.interface.ve.ip_acl_interface.ip.access_group', 'pybind.slxos.v16r_1_00b.brocade_common_def', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'access_group', 'keyval': 'ip_access_list, ip_direction', 'extra_keyval': 'ip_access_list, ip_direction, traffic_type'}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, ve=ve, access_group=access_group)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def interface_ve_ip_address_delete(self, ve=None, address=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		SLXOS: 16r.1.00b    

	**Parent Instance Keyword Arg Tuple(s)**:
		:param ve: kwarg tuple.
		:type ve: (name).

		:param name: tuple arg.
		:type name: (long)
		
		.. note::
			* range - ['0..4294967295']

	**This Instance Keyword Arg Tuple**:
		:param address: kwarg tuple.
		:type address: (address, secondary, ospf_passive, ospf_ignore).

		:param address: A.B.C.D/M IP address in dotted decimal/Mask
		:type address: (unicode)
		
		.. note::
			* pattern - (([1-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.)(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){2}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])/(([1-9])|([1-2][0-9])|(3[0-1]))

		:param secondary: Secondary ip address on the specific interface
		:type secondary: (YANGBool)

		:param ospf_passive: ospf pasive address on the specific interface
		:type ospf_passive: (YANGBool)

		:param ospf_ignore: ospf active address on the specific interface
		:type ospf_ignore: (YANGBool)

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = [('pybind.slxos.v16r_1_00b.routing_system.interface.ve', u've')]
    bindings_list = [('pybind.slxos.v16r_1_00b.routing_system.interface.ve.ip.ip_config.address', 'pybind.slxos.v16r_1_00b.brocade_common_def', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'address', 'keyval': 'address', 'extra_keyval': 'address, secondary, ospf_passive, ospf_ignore'}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, ve=ve, address=address)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def interface_ve_ip_dhcp_relay_delete(self, ve=None, servers=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		SLXOS: 16r.1.00b    

	**Parent Instance Keyword Arg Tuple(s)**:
		:param ve: kwarg tuple.
		:type ve: (name).

		:param name: tuple arg.
		:type name: (long)
		
		.. note::
			* range - ['0..4294967295']

	**This Instance Keyword Arg Tuple**:
		:param servers: kwarg tuple.
		:type servers: (relay_ip_addr, server_vrf_name).

		:param relay_ip_addr: A.B.C.D;; IP address of the DHCP server
		:type relay_ip_addr: (unicode)
		
		.. note::
			* pattern - (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?

		:param server_vrf_name: VRF name of the DHCP server
		:type server_vrf_name: (unicode)
		
		.. note::
			* length - [u'1..32']
			* pattern - ((([a-zA-Z0-9_]([a-zA-Z0-9\-_]){0,61})?[a-zA-Z0-9]\.)*([a-zA-Z0-9_]([a-zA-Z0-9\-_]){0,61})?[a-zA-Z0-9]\.?)|\.

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = [('pybind.slxos.v16r_1_00b.routing_system.interface.ve', u've')]
    bindings_list = [('pybind.slxos.v16r_1_00b.routing_system.interface.ve.ip.interface_ve_dhcp_conf.dhcp.relay.servers', 'pybind.slxos.v16r_1_00b.brocade_common_def', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'servers', 'keyval': 'relay_ip_addr, server_vrf_name', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, ve=ve, servers=servers)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def interface_ve_ip_fabric_virtual_gateway_delete(self, ve=None, ip_anycast_gateway=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		NOS: 6.0.2b, 7.0.1a, 7.1.0
		SLXOS: 16r.1.00b    

	**Parent Instance Keyword Arg Tuple(s)**:
		:param ve: kwarg tuple.
		:type ve: (gve_name).

		:param gve_name: tuple arg.
		:type gve_name: (long)
		
		.. note::
			* range - ['0..4294967295']

	**This Instance Keyword Arg Tuple**:
		:param ip_anycast_gateway: kwarg tuple.
		:type ip_anycast_gateway: (ip_gw_id).

		:param ip_gw_id: tuple arg.
		:type ip_gw_id: (long)
		
		.. note::
			* range - ['0..4294967295']

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = [('pybind.nos.v7_0_1a.interface_vlan.interface.ve', u've'), ('pybind.nos.v6_0_2b.interface_vlan.interface.ve', u've'), ('pybind.slxos.v16r_1_00b.routing_system.interface.ve', u've'), ('pybind.nos.v7_1_0.interface_vlan.interface.ve', u've')]
    bindings_list = [('pybind.nos.v6_0_2b.interface_vlan.interface.ve.ip.ip_anycast_gateway', 'pybind.nos.v6_0_2b.brocade_interface', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.interface_vlan.interface.ve.ip.ip_anycast_gateway', 'pybind.nos.v7_0_1a.brocade_interface', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.interface_vlan.interface.ve.ip.ip_anycast_gateway', 'pybind.nos.v7_1_0.brocade_interface', 'pybind.nos.v7_1_0'), ('pybind.slxos.v16r_1_00b.routing_system.interface.ve.ip.ip_local_anycast_gateway', 'pybind.slxos.v16r_1_00b.brocade_common_def', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'gve_name', 'extra_keyval': ''}, {'keyval': 'gve_name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'gve_name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'ip_anycast_gateway', 'keyval': 'ip_gw_id', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, ve=ve, ip_anycast_gateway=ip_anycast_gateway)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def interface_ve_ip_fabric_virtual_gateway_track_interface_delete(self, ve=None, ip_local_anycast_gateway=None, interface=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		SLXOS: 16r.1.00b    

	**Parent Instance Keyword Arg Tuple(s)**:
		:param ve: kwarg tuple.
		:type ve: (name).

		:param name: tuple arg.
		:type name: (long)
		
		.. note::
			* range - ['0..4294967295']

		:param ip_local_anycast_gateway: kwarg tuple.
		:type ip_local_anycast_gateway: (local_ip_gw_id).

		:param local_ip_gw_id: tuple arg.
		:type local_ip_gw_id: (long)
		
		.. note::
			* range - ['0..4294967295']

	**This Instance Keyword Arg Tuple**:
		:param interface: kwarg tuple.
		:type interface: (interface_type, interface_name).

		:param interface_type: tuple arg.
		:type interface_type: (unicode)
		
		.. note::
			* enum - [u'ethernet', u'port-channel']

		:param interface_name: tuple arg.
		:type interface_name: (unicode)
		
		.. note::
			* length - [u'3..16']
			* pattern - ((([0-9]|[1][0-6]))/([1-9]|[1-9][0-9]|[1-9][0-9][0-9])(:[1-4])?)

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = [('pybind.slxos.v16r_1_00b.routing_system.interface.ve', u've'), ('pybind.slxos.v16r_1_00b.routing_system.interface.ve.ip.ip_local_anycast_gateway', u'ip_local_anycast_gateway')]
    bindings_list = [('pybind.slxos.v16r_1_00b.routing_system.interface.ve.ip.ip_local_anycast_gateway.track.interface', 'pybind.slxos.v16r_1_00b.brocade_common_def', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'local_ip_gw_id', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'interface', 'keyval': 'interface_type, interface_name', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, ve=ve, ip_local_anycast_gateway=ip_local_anycast_gateway, interface=interface)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def interface_ve_ip_fabric_virtual_gateway_track_network_delete(self, ve=None, ip_local_anycast_gateway=None, network=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		SLXOS: 16r.1.00b    

	**Parent Instance Keyword Arg Tuple(s)**:
		:param ve: kwarg tuple.
		:type ve: (name).

		:param name: tuple arg.
		:type name: (long)
		
		.. note::
			* range - ['0..4294967295']

		:param ip_local_anycast_gateway: kwarg tuple.
		:type ip_local_anycast_gateway: (local_ip_gw_id).

		:param local_ip_gw_id: tuple arg.
		:type local_ip_gw_id: (long)
		
		.. note::
			* range - ['0..4294967295']

	**This Instance Keyword Arg Tuple**:
		:param network: kwarg tuple.
		:type network: (network_address).

		:param network_address: tuple arg.
		:type network_address: (unicode)
		
		.. note::
			* pattern - (([1-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.)(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){2}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])/(([1-9])|([1-2][0-9])|(3[0-1]))

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = [('pybind.slxos.v16r_1_00b.routing_system.interface.ve', u've'), ('pybind.slxos.v16r_1_00b.routing_system.interface.ve.ip.ip_local_anycast_gateway', u'ip_local_anycast_gateway')]
    bindings_list = [('pybind.slxos.v16r_1_00b.routing_system.interface.ve.ip.ip_local_anycast_gateway.track.network', 'pybind.slxos.v16r_1_00b.brocade_common_def', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'local_ip_gw_id', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'network', 'keyval': 'network_address', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, ve=ve, ip_local_anycast_gateway=ip_local_anycast_gateway, network=network)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def interface_ve_ip_fabric_virtual_gateway_track_next_hop_delete(self, ve=None, ip_local_anycast_gateway=None, next_hop=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		SLXOS: 16r.1.00b    

	**Parent Instance Keyword Arg Tuple(s)**:
		:param ve: kwarg tuple.
		:type ve: (name).

		:param name: tuple arg.
		:type name: (long)
		
		.. note::
			* range - ['0..4294967295']

		:param ip_local_anycast_gateway: kwarg tuple.
		:type ip_local_anycast_gateway: (local_ip_gw_id).

		:param local_ip_gw_id: tuple arg.
		:type local_ip_gw_id: (long)
		
		.. note::
			* range - ['0..4294967295']

	**This Instance Keyword Arg Tuple**:
		:param next_hop: kwarg tuple.
		:type next_hop: (next_hop_address).

		:param next_hop_address: tuple arg.
		:type next_hop_address: (unicode)
		
		.. note::
			* pattern - (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = [('pybind.slxos.v16r_1_00b.routing_system.interface.ve', u've'), ('pybind.slxos.v16r_1_00b.routing_system.interface.ve.ip.ip_local_anycast_gateway', u'ip_local_anycast_gateway')]
    bindings_list = [('pybind.slxos.v16r_1_00b.routing_system.interface.ve.ip.ip_local_anycast_gateway.track.next_hop', 'pybind.slxos.v16r_1_00b.brocade_common_def', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'local_ip_gw_id', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'next_hop', 'keyval': 'next_hop_address', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, ve=ve, ip_local_anycast_gateway=ip_local_anycast_gateway, next_hop=next_hop)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def interface_ve_ip_igmp_static_group_delete(self, ve=None, ve_igmpl3_static_group=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		SLXOS: 16r.1.00b    

	**Parent Instance Keyword Arg Tuple(s)**:
		:param ve: kwarg tuple.
		:type ve: (name).

		:param name: tuple arg.
		:type name: (long)
		
		.. note::
			* range - ['0..4294967295']

	**This Instance Keyword Arg Tuple**:
		:param ve_igmpl3_static_group: kwarg tuple.
		:type ve_igmpl3_static_group: (igmpl3_sg_addr).

		:param igmpl3_sg_addr: Multicast Address to be Joined in the format A.B.C.D
		:type igmpl3_sg_addr: (unicode)
		
		.. note::
			* pattern - (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = [('pybind.slxos.v16r_1_00b.routing_system.interface.ve', u've')]
    bindings_list = [('pybind.slxos.v16r_1_00b.routing_system.interface.ve.ip.igmp.ve_igmpl3_static_group', 'pybind.slxos.v16r_1_00b.brocade_common_def', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u've_igmpl3_static_group', 'keyval': 'igmpl3_sg_addr', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, ve=ve, ve_igmpl3_static_group=ve_igmpl3_static_group)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def interface_ve_ipv6_access_group_delete(self, ve=None, access_group=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		SLXOS: 16r.1.00b    

	**Parent Instance Keyword Arg Tuple(s)**:
		:param ve: kwarg tuple.
		:type ve: (name).

		:param name: tuple arg.
		:type name: (long)
		
		.. note::
			* range - ['0..4294967295']

	**This Instance Keyword Arg Tuple**:
		:param access_group: kwarg tuple.
		:type access_group: (ipv6_access_list, ip_direction, traffic_type).

		:param ipv6_access_list: ACL_NAME;; Access List Name (Max 63)
		:type ipv6_access_list: (unicode)
		
		.. note::
			* length - [u'1..63']
			* pattern - [a-zA-Z0-9]{1}([-a-zA-Z0-9_]{0,62})

		:param ip_direction: tuple arg.
		:type ip_direction: (unicode)
		
		.. note::
			* enum - [u'in', u'out']

		:param traffic_type: tuple arg.
		:type traffic_type: (unicode)
		
		.. note::
			* enum - [u'switched', u'routed']

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = [('pybind.slxos.v16r_1_00b.routing_system.interface.ve', u've')]
    bindings_list = [('pybind.slxos.v16r_1_00b.routing_system.interface.ve.ipv6.access_group', 'pybind.slxos.v16r_1_00b.brocade_common_def', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'access_group', 'keyval': 'ipv6_access_list, ip_direction', 'extra_keyval': 'ipv6_access_list, ip_direction, traffic_type'}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, ve=ve, access_group=access_group)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def interface_ve_ipv6_address_delete(self, ve=None, ipv6_address=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		SLXOS: 16r.1.00b    

	**Parent Instance Keyword Arg Tuple(s)**:
		:param ve: kwarg tuple.
		:type ve: (name).

		:param name: tuple arg.
		:type name: (long)
		
		.. note::
			* range - ['0..4294967295']

	**This Instance Keyword Arg Tuple**:
		:param ipv6_address: kwarg tuple.
		:type ipv6_address: (address, secondary, anycast).

		:param address: A:B::C:D/LEN;; IPv6 prefix format: xxxx:xxxx/ml, xxxx:xxxx::/ml, xxxx::xx/128
		:type address: (unicode)
		
		.. note::
			* pattern - ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(/(([0-9])|([0-9]{2})|(1[0-1][0-9])|(12[0-8])))

		:param secondary: Configure Secondary ipv6 address on an interface
		:type secondary: (YANGBool)

		:param anycast: Configure ipv6 address as anycast
		:type anycast: (YANGBool)

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = [('pybind.slxos.v16r_1_00b.routing_system.interface.ve', u've')]
    bindings_list = [('pybind.slxos.v16r_1_00b.routing_system.interface.ve.ipv6.ipv6_config.address.ipv6_address', 'pybind.slxos.v16r_1_00b.brocade_common_def', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'ipv6_address', 'keyval': 'address', 'extra_keyval': 'address, secondary, anycast'}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, ve=ve, ipv6_address=ipv6_address)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def interface_ve_ipv6_dhcp_relay_delete(self, ve=None, servers=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		SLXOS: 16r.1.00b    

	**Parent Instance Keyword Arg Tuple(s)**:
		:param ve: kwarg tuple.
		:type ve: (name).

		:param name: tuple arg.
		:type name: (long)
		
		.. note::
			* range - ['0..4294967295']

	**This Instance Keyword Arg Tuple**:
		:param servers: kwarg tuple.
		:type servers: (relay_ip_addr, server_vrf_name).

		:param relay_ip_addr: IPv6 address of the DHCPv6 server
		:type relay_ip_addr: (unicode)
		
		.. note::
			* pattern - ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?

		:param server_vrf_name: VRF name of the DHCPv6 server
		:type server_vrf_name: (unicode)
		
		.. note::
			* length - [u'1..32']
			* pattern - ((([a-zA-Z0-9_]([a-zA-Z0-9\-_]){0,61})?[a-zA-Z0-9]\.)*([a-zA-Z0-9_]([a-zA-Z0-9\-_]){0,61})?[a-zA-Z0-9]\.?)|\.

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = [('pybind.slxos.v16r_1_00b.routing_system.interface.ve', u've')]
    bindings_list = [('pybind.slxos.v16r_1_00b.routing_system.interface.ve.ipv6.interface_ve_dhcp_conf.dhcp.relay.servers', 'pybind.slxos.v16r_1_00b.brocade_common_def', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'servers', 'keyval': 'relay_ip_addr', 'extra_keyval': 'relay_ip_addr, server_vrf_name'}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, ve=ve, servers=servers)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def interface_ve_ipv6_fabric_virtual_gateway_delete(self, ve=None, ipv6_anycast_gateway=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		NOS: 6.0.2b, 7.0.1a, 7.1.0
		SLXOS: 16r.1.00b    

	**Parent Instance Keyword Arg Tuple(s)**:
		:param ve: kwarg tuple.
		:type ve: (gve_name).

		:param gve_name: tuple arg.
		:type gve_name: (long)
		
		.. note::
			* range - ['0..4294967295']

	**This Instance Keyword Arg Tuple**:
		:param ipv6_anycast_gateway: kwarg tuple.
		:type ipv6_anycast_gateway: (ipv6_gw_id).

		:param ipv6_gw_id: tuple arg.
		:type ipv6_gw_id: (long)
		
		.. note::
			* range - ['0..4294967295']

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = [('pybind.slxos.v16r_1_00b.routing_system.interface.ve', u've'), ('pybind.nos.v7_1_0.interface_vlan.interface.ve', u've'), ('pybind.nos.v6_0_2b.interface_vlan.interface.ve', u've'), ('pybind.nos.v7_0_1a.interface_vlan.interface.ve', u've')]
    bindings_list = [('pybind.nos.v6_0_2b.interface_vlan.interface.ve.ipv6.ipv6_anycast_gateway', 'pybind.nos.v6_0_2b.brocade_interface', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.interface_vlan.interface.ve.ipv6.ipv6_anycast_gateway', 'pybind.nos.v7_0_1a.brocade_interface', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.interface_vlan.interface.ve.ipv6.ipv6_anycast_gateway', 'pybind.nos.v7_1_0.brocade_interface', 'pybind.nos.v7_1_0'), ('pybind.slxos.v16r_1_00b.routing_system.interface.ve.ipv6.ipv6_local_anycast_gateway', 'pybind.slxos.v16r_1_00b.brocade_common_def', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'gve_name', 'extra_keyval': ''}, {'keyval': 'gve_name', 'extra_keyval': ''}, {'keyval': 'gve_name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'ipv6_anycast_gateway', 'keyval': 'ipv6_gw_id', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, ve=ve, ipv6_anycast_gateway=ipv6_anycast_gateway)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def interface_ve_ipv6_fabric_virtual_gateway_gateway_address_delete(self, ve=None, ipv6_anycast_gateway=None, ipv6_gateway_address=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		NOS: 6.0.2b, 7.0.1a, 7.1.0    

	**Parent Instance Keyword Arg Tuple(s)**:
		:param ve: kwarg tuple.
		:type ve: (gve_name).

		:param gve_name: tuple arg.
		:type gve_name: (long)
		
		.. note::
			* range - ['0..4294967295']

		:param ipv6_anycast_gateway: kwarg tuple.
		:type ipv6_anycast_gateway: (ipv6_gw_id).

		:param ipv6_gw_id: tuple arg.
		:type ipv6_gw_id: (long)
		
		.. note::
			* range - ['0..4294967295']

	**This Instance Keyword Arg Tuple**:
		:param ipv6_gateway_address: kwarg tuple.
		:type ipv6_gateway_address: (ipv6_gw_addr).

		:param ipv6_gw_addr: IPv6 Address/Prefix
		:type ipv6_gw_addr: (unicode)
		
		.. note::
			* pattern - ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(/(([0-9])|([0-9]{2})|(1[0-1][0-9])|(12[0-8])))

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = [('pybind.nos.v7_1_0.interface_vlan.interface.ve', u've'), ('pybind.nos.v7_1_0.interface_vlan.interface.ve.ipv6.ipv6_anycast_gateway', u'ipv6_anycast_gateway'), ('pybind.nos.v6_0_2b.interface_vlan.interface.ve', u've'), ('pybind.nos.v6_0_2b.interface_vlan.interface.ve.ipv6.ipv6_anycast_gateway', u'ipv6_anycast_gateway'), ('pybind.nos.v7_0_1a.interface_vlan.interface.ve', u've'), ('pybind.nos.v7_0_1a.interface_vlan.interface.ve.ipv6.ipv6_anycast_gateway', u'ipv6_anycast_gateway')]
    bindings_list = [('pybind.nos.v6_0_2b.interface_vlan.interface.ve.ipv6.ipv6_anycast_gateway.ipv6_gateway_address', 'pybind.nos.v6_0_2b.brocade_interface', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.interface_vlan.interface.ve.ipv6.ipv6_anycast_gateway.ipv6_gateway_address', 'pybind.nos.v7_0_1a.brocade_interface', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.interface_vlan.interface.ve.ipv6.ipv6_anycast_gateway.ipv6_gateway_address', 'pybind.nos.v7_1_0.brocade_interface', 'pybind.nos.v7_1_0')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'gve_name', 'extra_keyval': ''}, {'keyval': 'ipv6_gw_id', 'extra_keyval': ''}, {'keyval': 'gve_name', 'extra_keyval': ''}, {'keyval': 'ipv6_gw_id', 'extra_keyval': ''}, {'keyval': 'gve_name', 'extra_keyval': ''}, {'keyval': 'ipv6_gw_id', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'ipv6_gateway_address', 'keyval': 'ipv6_gw_addr', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, ve=ve, ipv6_anycast_gateway=ipv6_anycast_gateway, ipv6_gateway_address=ipv6_gateway_address)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def interface_ve_ipv6_fabric_virtual_gateway_track_interface_delete(self, ve=None, ipv6_local_anycast_gateway=None, ipv6_interface=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		SLXOS: 16r.1.00b    

	**Parent Instance Keyword Arg Tuple(s)**:
		:param ve: kwarg tuple.
		:type ve: (name).

		:param name: tuple arg.
		:type name: (long)
		
		.. note::
			* range - ['0..4294967295']

		:param ipv6_local_anycast_gateway: kwarg tuple.
		:type ipv6_local_anycast_gateway: (local_ipv6_gw_id).

		:param local_ipv6_gw_id: tuple arg.
		:type local_ipv6_gw_id: (long)
		
		.. note::
			* range - ['0..4294967295']

	**This Instance Keyword Arg Tuple**:
		:param ipv6_interface: kwarg tuple.
		:type ipv6_interface: (ipv6_interface_type, ipv6_interface_name).

		:param ipv6_interface_type: tuple arg.
		:type ipv6_interface_type: (unicode)
		
		.. note::
			* enum - [u'ethernet', u'port-channel']

		:param ipv6_interface_name: tuple arg.
		:type ipv6_interface_name: (unicode)
		
		.. note::
			* length - [u'3..16']
			* pattern - ((([0-9]|[1][0-6]))/([1-9]|[1-9][0-9]|[1-9][0-9][0-9])(:[1-4])?)

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = [('pybind.slxos.v16r_1_00b.routing_system.interface.ve', u've'), ('pybind.slxos.v16r_1_00b.routing_system.interface.ve.ipv6.ipv6_local_anycast_gateway', u'ipv6_local_anycast_gateway')]
    bindings_list = [('pybind.slxos.v16r_1_00b.routing_system.interface.ve.ipv6.ipv6_local_anycast_gateway.ipv6_track.ipv6_interface', 'pybind.slxos.v16r_1_00b.brocade_common_def', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'local_ipv6_gw_id', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'ipv6_interface', 'keyval': 'ipv6_interface_type, ipv6_interface_name', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, ve=ve, ipv6_local_anycast_gateway=ipv6_local_anycast_gateway, ipv6_interface=ipv6_interface)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def interface_ve_ipv6_fabric_virtual_gateway_track_network_delete(self, ve=None, ipv6_local_anycast_gateway=None, ipv6_network=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		SLXOS: 16r.1.00b    

	**Parent Instance Keyword Arg Tuple(s)**:
		:param ve: kwarg tuple.
		:type ve: (name).

		:param name: tuple arg.
		:type name: (long)
		
		.. note::
			* range - ['0..4294967295']

		:param ipv6_local_anycast_gateway: kwarg tuple.
		:type ipv6_local_anycast_gateway: (local_ipv6_gw_id).

		:param local_ipv6_gw_id: tuple arg.
		:type local_ipv6_gw_id: (long)
		
		.. note::
			* range - ['0..4294967295']

	**This Instance Keyword Arg Tuple**:
		:param ipv6_network: kwarg tuple.
		:type ipv6_network: (ipv6_network_address).

		:param ipv6_network_address: tuple arg.
		:type ipv6_network_address: (unicode)
		
		.. note::
			* pattern - ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(/(([0-9])|([0-9]{2})|(1[0-1][0-9])|(12[0-8])))

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = [('pybind.slxos.v16r_1_00b.routing_system.interface.ve', u've'), ('pybind.slxos.v16r_1_00b.routing_system.interface.ve.ipv6.ipv6_local_anycast_gateway', u'ipv6_local_anycast_gateway')]
    bindings_list = [('pybind.slxos.v16r_1_00b.routing_system.interface.ve.ipv6.ipv6_local_anycast_gateway.ipv6_track.ipv6_network', 'pybind.slxos.v16r_1_00b.brocade_common_def', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'local_ipv6_gw_id', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'ipv6_network', 'keyval': 'ipv6_network_address', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, ve=ve, ipv6_local_anycast_gateway=ipv6_local_anycast_gateway, ipv6_network=ipv6_network)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def interface_ve_ipv6_fabric_virtual_gateway_track_next_hop_delete(self, ve=None, ipv6_local_anycast_gateway=None, ipv6_next_hop=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		SLXOS: 16r.1.00b    

	**Parent Instance Keyword Arg Tuple(s)**:
		:param ve: kwarg tuple.
		:type ve: (name).

		:param name: tuple arg.
		:type name: (long)
		
		.. note::
			* range - ['0..4294967295']

		:param ipv6_local_anycast_gateway: kwarg tuple.
		:type ipv6_local_anycast_gateway: (local_ipv6_gw_id).

		:param local_ipv6_gw_id: tuple arg.
		:type local_ipv6_gw_id: (long)
		
		.. note::
			* range - ['0..4294967295']

	**This Instance Keyword Arg Tuple**:
		:param ipv6_next_hop: kwarg tuple.
		:type ipv6_next_hop: (ipv6_next_hop_address).

		:param ipv6_next_hop_address: tuple arg.
		:type ipv6_next_hop_address: (unicode)
		
		.. note::
			* pattern - ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = [('pybind.slxos.v16r_1_00b.routing_system.interface.ve', u've'), ('pybind.slxos.v16r_1_00b.routing_system.interface.ve.ipv6.ipv6_local_anycast_gateway', u'ipv6_local_anycast_gateway')]
    bindings_list = [('pybind.slxos.v16r_1_00b.routing_system.interface.ve.ipv6.ipv6_local_anycast_gateway.ipv6_track.ipv6_next_hop', 'pybind.slxos.v16r_1_00b.brocade_common_def', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'local_ipv6_gw_id', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'ipv6_next_hop', 'keyval': 'ipv6_next_hop_address', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, ve=ve, ipv6_local_anycast_gateway=ipv6_local_anycast_gateway, ipv6_next_hop=ipv6_next_hop)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def interface_ve_ipv6_nd_address_delete(self, ve=None, suppressing_address=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		SLXOS: 16r.1.00b    

	**Parent Instance Keyword Arg Tuple(s)**:
		:param ve: kwarg tuple.
		:type ve: (name).

		:param name: tuple arg.
		:type name: (long)
		
		.. note::
			* range - ['0..4294967295']

	**This Instance Keyword Arg Tuple**:
		:param suppressing_address: kwarg tuple.
		:type suppressing_address: (suppress_ipv6_address, suppress_per_address).

		:param suppress_ipv6_address: tuple arg.
		:type suppress_ipv6_address: (unicode)
		
		.. note::
			* pattern - ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?

		:param suppress_per_address: Suppress all IPv6 addresses in router advertisement
		:type suppress_per_address: (YANGBool)

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = [('pybind.slxos.v16r_1_00b.routing_system.interface.ve', u've')]
    bindings_list = [('pybind.slxos.v16r_1_00b.routing_system.interface.ve.ipv6.ipv6_nd_ra.ipv6_intf_cmds.nd.address.suppressing_address', 'pybind.slxos.v16r_1_00b.brocade_common_def', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'suppressing_address', 'keyval': 'suppress_ipv6_address', 'extra_keyval': 'suppress_ipv6_address, suppress_per_address'}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, ve=ve, suppressing_address=suppressing_address)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def interface_ve_ipv6_nd_prefix_delete(self, ve=None, prefix=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		SLXOS: 16r.1.00b    

	**Parent Instance Keyword Arg Tuple(s)**:
		:param ve: kwarg tuple.
		:type ve: (name).

		:param name: tuple arg.
		:type name: (long)
		
		.. note::
			* range - ['0..4294967295']

	**This Instance Keyword Arg Tuple**:
		:param prefix: kwarg tuple.
		:type prefix: (prefix_ipv6_address).

		:param prefix_ipv6_address: tuple arg.
		:type prefix_ipv6_address: (unicode)
		
		.. note::
			* pattern - ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(/(([0-9])|([0-9]{2})|(1[0-1][0-9])|(12[0-8])))

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = [('pybind.slxos.v16r_1_00b.routing_system.interface.ve', u've')]
    bindings_list = [('pybind.slxos.v16r_1_00b.routing_system.interface.ve.ipv6.ipv6_nd_ra.ipv6_intf_cmds.nd.prefix', 'pybind.slxos.v16r_1_00b.brocade_common_def', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'prefix', 'keyval': 'prefix_ipv6_address', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, ve=ve, prefix=prefix)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def interface_ve_ipv6_nd_ra_dns_server_delete(self, ve=None, ra_dns_server=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		SLXOS: 16r.1.00b    

	**Parent Instance Keyword Arg Tuple(s)**:
		:param ve: kwarg tuple.
		:type ve: (name).

		:param name: tuple arg.
		:type name: (long)
		
		.. note::
			* range - ['0..4294967295']

	**This Instance Keyword Arg Tuple**:
		:param ra_dns_server: kwarg tuple.
		:type ra_dns_server: (dns_server_prefix).

		:param dns_server_prefix: tuple arg.
		:type dns_server_prefix: (unicode)
		
		.. note::
			* pattern - ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = [('pybind.slxos.v16r_1_00b.routing_system.interface.ve', u've')]
    bindings_list = [('pybind.slxos.v16r_1_00b.routing_system.interface.ve.ipv6.ipv6_nd_ra.ipv6_intf_cmds.nd.ra_dns_server', 'pybind.slxos.v16r_1_00b.brocade_common_def', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'ra_dns_server', 'keyval': 'dns_server_prefix', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, ve=ve, ra_dns_server=ra_dns_server)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def interface_ve_ipv6_nd_ra_domain_name_delete(self, ve=None, ra_domain_name=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		SLXOS: 16r.1.00b    

	**Parent Instance Keyword Arg Tuple(s)**:
		:param ve: kwarg tuple.
		:type ve: (name).

		:param name: tuple arg.
		:type name: (long)
		
		.. note::
			* range - ['0..4294967295']

	**This Instance Keyword Arg Tuple**:
		:param ra_domain_name: kwarg tuple.
		:type ra_domain_name: (domain_name_string).

		:param domain_name_string: tuple arg.
		:type domain_name_string: (unicode)

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = [('pybind.slxos.v16r_1_00b.routing_system.interface.ve', u've')]
    bindings_list = [('pybind.slxos.v16r_1_00b.routing_system.interface.ve.ipv6.ipv6_nd_ra.ipv6_intf_cmds.nd.ra_domain_name', 'pybind.slxos.v16r_1_00b.brocade_common_def', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'ra_domain_name', 'keyval': 'domain_name_string', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, ve=ve, ra_domain_name=ra_domain_name)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def interface_ve_ipv6_neighbor_delete(self, ve=None, neighbor=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		SLXOS: 16r.1.00b    

	**Parent Instance Keyword Arg Tuple(s)**:
		:param ve: kwarg tuple.
		:type ve: (name).

		:param name: tuple arg.
		:type name: (long)
		
		.. note::
			* range - ['0..4294967295']

	**This Instance Keyword Arg Tuple**:
		:param neighbor: kwarg tuple.
		:type neighbor: (ipv6_address).

		:param ipv6_address: tuple arg.
		:type ipv6_address: (unicode)
		
		.. note::
			* pattern - ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = [('pybind.slxos.v16r_1_00b.routing_system.interface.ve', u've')]
    bindings_list = [('pybind.slxos.v16r_1_00b.routing_system.interface.ve.ipv6.ipv6_nd_ra.ipv6_intf_cmds.neighbor', 'pybind.slxos.v16r_1_00b.brocade_common_def', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'neighbor', 'keyval': 'ipv6_address', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, ve=ve, neighbor=neighbor)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def interface_ve_ipv6_vrrp_extended_group_delete(self, ve=None, vrrpv3e=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		SLXOS: 16r.1.00b    

	**Parent Instance Keyword Arg Tuple(s)**:
		:param ve: kwarg tuple.
		:type ve: (name).

		:param name: tuple arg.
		:type name: (long)
		
		.. note::
			* range - ['0..4294967295']

	**This Instance Keyword Arg Tuple**:
		:param vrrpv3e: kwarg tuple.
		:type vrrpv3e: (vrid).

		:param vrid: tuple arg.
		:type vrid: (int)
		
		.. note::
			* range - ['0..255']

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = [('pybind.slxos.v16r_1_00b.routing_system.interface.ve', u've')]
    bindings_list = [('pybind.slxos.v16r_1_00b.routing_system.interface.ve.ipv6.vrrpv3e', 'pybind.slxos.v16r_1_00b.brocade_common_def', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'vrrpv3e', 'keyval': 'vrid', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, ve=ve, vrrpv3e=vrrpv3e)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def interface_ve_ipv6_vrrp_extended_group_track_delete(self, ve=None, vrrpv3e=None, interface=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		SLXOS: 16r.1.00b    

	**Parent Instance Keyword Arg Tuple(s)**:
		:param ve: kwarg tuple.
		:type ve: (name).

		:param name: tuple arg.
		:type name: (long)
		
		.. note::
			* range - ['0..4294967295']

		:param vrrpv3e: kwarg tuple.
		:type vrrpv3e: (vrid).

		:param vrid: tuple arg.
		:type vrid: (int)
		
		.. note::
			* range - ['0..255']

	**This Instance Keyword Arg Tuple**:
		:param interface: kwarg tuple.
		:type interface: (interface_type, interface_name).

		:param interface_type: tuple arg.
		:type interface_type: (unicode)
		
		.. note::
			* enum - [u'ethernet', u'port-channel']

		:param interface_name: tuple arg.
		:type interface_name: (unicode)
		
		.. note::
			* length - [u'3..16']
			* pattern - ((([0-9]|[1][0-6]))/([1-9]|[1-9][0-9]|[1-9][0-9][0-9])(:[1-4])?)

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = [('pybind.slxos.v16r_1_00b.routing_system.interface.ve', u've'), ('pybind.slxos.v16r_1_00b.routing_system.interface.ve.ipv6.vrrpv3e', u'vrrpv3e')]
    bindings_list = [('pybind.slxos.v16r_1_00b.routing_system.interface.ve.ipv6.vrrpv3e.track.interface', 'pybind.slxos.v16r_1_00b.brocade_common_def', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'vrid', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'interface', 'keyval': 'interface_type, interface_name', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, ve=ve, vrrpv3e=vrrpv3e, interface=interface)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def interface_ve_ipv6_vrrp_extended_group_track_network_delete(self, ve=None, vrrpv3e=None, network=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		SLXOS: 16r.1.00b    

	**Parent Instance Keyword Arg Tuple(s)**:
		:param ve: kwarg tuple.
		:type ve: (name).

		:param name: tuple arg.
		:type name: (long)
		
		.. note::
			* range - ['0..4294967295']

		:param vrrpv3e: kwarg tuple.
		:type vrrpv3e: (vrid).

		:param vrid: tuple arg.
		:type vrid: (int)
		
		.. note::
			* range - ['0..255']

	**This Instance Keyword Arg Tuple**:
		:param network: kwarg tuple.
		:type network: (network_address).

		:param network_address: XXXX::YYYY/L;;IPv6 global address prefix in ipv6-address/Prefix length format
		:type network_address: (unicode)
		
		.. note::
			* pattern - ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(/(([0-9])|([0-9]{2})|(1[0-1][0-9])|(12[0-8])))

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = [('pybind.slxos.v16r_1_00b.routing_system.interface.ve', u've'), ('pybind.slxos.v16r_1_00b.routing_system.interface.ve.ipv6.vrrpv3e', u'vrrpv3e')]
    bindings_list = [('pybind.slxos.v16r_1_00b.routing_system.interface.ve.ipv6.vrrpv3e.track.network', 'pybind.slxos.v16r_1_00b.brocade_common_def', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'vrid', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'network', 'keyval': 'network_address', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, ve=ve, vrrpv3e=vrrpv3e, network=network)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def interface_ve_ipv6_vrrp_extended_group_virtual_ip_delete(self, ve=None, vrrpv3e=None, virtual_ip=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		SLXOS: 16r.1.00b    

	**Parent Instance Keyword Arg Tuple(s)**:
		:param ve: kwarg tuple.
		:type ve: (name).

		:param name: tuple arg.
		:type name: (long)
		
		.. note::
			* range - ['0..4294967295']

		:param vrrpv3e: kwarg tuple.
		:type vrrpv3e: (vrid).

		:param vrid: tuple arg.
		:type vrid: (int)
		
		.. note::
			* range - ['0..255']

	**This Instance Keyword Arg Tuple**:
		:param virtual_ip: kwarg tuple.
		:type virtual_ip: (virtual_ipaddr).

		:param virtual_ipaddr: Virtual IPv6 address
		:type virtual_ipaddr: (unicode)
		
		.. note::
			* pattern - ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = [('pybind.slxos.v16r_1_00b.routing_system.interface.ve', u've'), ('pybind.slxos.v16r_1_00b.routing_system.interface.ve.ipv6.vrrpv3e', u'vrrpv3e')]
    bindings_list = [('pybind.slxos.v16r_1_00b.routing_system.interface.ve.ipv6.vrrpv3e.virtual_ip', 'pybind.slxos.v16r_1_00b.brocade_common_def', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'vrid', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'virtual_ip', 'keyval': 'virtual_ipaddr', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, ve=ve, vrrpv3e=vrrpv3e, virtual_ip=virtual_ip)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def interface_ve_ipv6_vrrp_group_delete(self, ve=None, vrrpv3=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		SLXOS: 16r.1.00b    

	**Parent Instance Keyword Arg Tuple(s)**:
		:param ve: kwarg tuple.
		:type ve: (name).

		:param name: tuple arg.
		:type name: (long)
		
		.. note::
			* range - ['0..4294967295']

	**This Instance Keyword Arg Tuple**:
		:param vrrpv3: kwarg tuple.
		:type vrrpv3: (vrid).

		:param vrid: tuple arg.
		:type vrid: (int)
		
		.. note::
			* range - ['0..255']

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = [('pybind.slxos.v16r_1_00b.routing_system.interface.ve', u've')]
    bindings_list = [('pybind.slxos.v16r_1_00b.routing_system.interface.ve.ipv6.vrrpv3', 'pybind.slxos.v16r_1_00b.brocade_common_def', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'vrrpv3', 'keyval': 'vrid', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, ve=ve, vrrpv3=vrrpv3)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def interface_ve_ipv6_vrrp_group_track_delete(self, ve=None, vrrpv3=None, interface=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		SLXOS: 16r.1.00b    

	**Parent Instance Keyword Arg Tuple(s)**:
		:param ve: kwarg tuple.
		:type ve: (name).

		:param name: tuple arg.
		:type name: (long)
		
		.. note::
			* range - ['0..4294967295']

		:param vrrpv3: kwarg tuple.
		:type vrrpv3: (vrid).

		:param vrid: tuple arg.
		:type vrid: (int)
		
		.. note::
			* range - ['0..255']

	**This Instance Keyword Arg Tuple**:
		:param interface: kwarg tuple.
		:type interface: (interface_type, interface_name).

		:param interface_type: tuple arg.
		:type interface_type: (unicode)
		
		.. note::
			* enum - [u'ethernet', u'port-channel']

		:param interface_name: tuple arg.
		:type interface_name: (unicode)
		
		.. note::
			* length - [u'3..16']
			* pattern - ((([0-9]|[1][0-6]))/([1-9]|[1-9][0-9]|[1-9][0-9][0-9])(:[1-4])?)

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = [('pybind.slxos.v16r_1_00b.routing_system.interface.ve', u've'), ('pybind.slxos.v16r_1_00b.routing_system.interface.ve.ipv6.vrrpv3', u'vrrpv3')]
    bindings_list = [('pybind.slxos.v16r_1_00b.routing_system.interface.ve.ipv6.vrrpv3.track.interface', 'pybind.slxos.v16r_1_00b.brocade_common_def', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'vrid', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'interface', 'keyval': 'interface_type, interface_name', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, ve=ve, vrrpv3=vrrpv3, interface=interface)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def interface_ve_ipv6_vrrp_group_virtual_ip_delete(self, ve=None, vrrpv3=None, virtual_ip=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		SLXOS: 16r.1.00b    

	**Parent Instance Keyword Arg Tuple(s)**:
		:param ve: kwarg tuple.
		:type ve: (name).

		:param name: tuple arg.
		:type name: (long)
		
		.. note::
			* range - ['0..4294967295']

		:param vrrpv3: kwarg tuple.
		:type vrrpv3: (vrid).

		:param vrid: tuple arg.
		:type vrid: (int)
		
		.. note::
			* range - ['0..255']

	**This Instance Keyword Arg Tuple**:
		:param virtual_ip: kwarg tuple.
		:type virtual_ip: (virtual_ipaddr).

		:param virtual_ipaddr: Virtual IPv6 address
		:type virtual_ipaddr: (unicode)
		
		.. note::
			* pattern - ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = [('pybind.slxos.v16r_1_00b.routing_system.interface.ve', u've'), ('pybind.slxos.v16r_1_00b.routing_system.interface.ve.ipv6.vrrpv3', u'vrrpv3')]
    bindings_list = [('pybind.slxos.v16r_1_00b.routing_system.interface.ve.ipv6.vrrpv3.virtual_ip', 'pybind.slxos.v16r_1_00b.brocade_common_def', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'vrid', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'virtual_ip', 'keyval': 'virtual_ipaddr', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, ve=ve, vrrpv3=vrrpv3, virtual_ip=virtual_ip)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def interface_ve_isis_auth_key_delete(self, ve=None, interface_auth_key=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		SLXOS: 16r.1.00b    

	**Parent Instance Keyword Arg Tuple(s)**:
		:param ve: kwarg tuple.
		:type ve: (name).

		:param name: tuple arg.
		:type name: (long)
		
		.. note::
			* range - ['0..4294967295']

	**This Instance Keyword Arg Tuple**:
		:param interface_auth_key: kwarg tuple.
		:type interface_auth_key: (interface_auth_key_level, interface_auth_key_str).

		:param interface_auth_key_level: tuple arg.
		:type interface_auth_key_level: (unicode)
		
		.. note::
			* enum - [u'level-2', u'level-1']

		:param interface_auth_key_str: tuple arg.
		:type interface_auth_key_str: (unicode)
		
		.. note::
			* length - [u'1..63']

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = [('pybind.slxos.v16r_1_00b.routing_system.interface.ve', u've')]
    bindings_list = [('pybind.slxos.v16r_1_00b.routing_system.interface.ve.intf_isis.interface_isis.interface_auth_key', 'pybind.slxos.v16r_1_00b.brocade_common_def', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'interface_auth_key', 'keyval': 'interface_auth_key_level', 'extra_keyval': 'interface_auth_key_level, interface_auth_key_str'}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, ve=ve, interface_auth_key=interface_auth_key)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def interface_ve_isis_hello_interval_delete(self, ve=None, interface_hello_interval=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		SLXOS: 16r.1.00b    

	**Parent Instance Keyword Arg Tuple(s)**:
		:param ve: kwarg tuple.
		:type ve: (name).

		:param name: tuple arg.
		:type name: (long)
		
		.. note::
			* range - ['0..4294967295']

	**This Instance Keyword Arg Tuple**:
		:param interface_hello_interval: kwarg tuple.
		:type interface_hello_interval: (interface_hello_interval_level, interface_hello_interval_val).

		:param interface_hello_interval_level: tuple arg.
		:type interface_hello_interval_level: (unicode)
		
		.. note::
			* enum - [u'level-2', u'level-1']

		:param interface_hello_interval_val: tuple arg.
		:type interface_hello_interval_val: (long)
		
		.. note::
			* range - ['0..4294967295']

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = [('pybind.slxos.v16r_1_00b.routing_system.interface.ve', u've')]
    bindings_list = [('pybind.slxos.v16r_1_00b.routing_system.interface.ve.intf_isis.interface_isis.interface_hello_interval', 'pybind.slxos.v16r_1_00b.brocade_common_def', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'interface_hello_interval', 'keyval': 'interface_hello_interval_level', 'extra_keyval': 'interface_hello_interval_level, interface_hello_interval_val'}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, ve=ve, interface_hello_interval=interface_hello_interval)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def interface_ve_isis_hello_multiplier_delete(self, ve=None, interface_hello_multiplier=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		SLXOS: 16r.1.00b    

	**Parent Instance Keyword Arg Tuple(s)**:
		:param ve: kwarg tuple.
		:type ve: (name).

		:param name: tuple arg.
		:type name: (long)
		
		.. note::
			* range - ['0..4294967295']

	**This Instance Keyword Arg Tuple**:
		:param interface_hello_multiplier: kwarg tuple.
		:type interface_hello_multiplier: (interface_hello_multiplier_level, interface_hello_multiplier_val).

		:param interface_hello_multiplier_level: tuple arg.
		:type interface_hello_multiplier_level: (unicode)
		
		.. note::
			* enum - [u'level-2', u'level-1']

		:param interface_hello_multiplier_val: tuple arg.
		:type interface_hello_multiplier_val: (long)
		
		.. note::
			* range - ['0..4294967295']

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = [('pybind.slxos.v16r_1_00b.routing_system.interface.ve', u've')]
    bindings_list = [('pybind.slxos.v16r_1_00b.routing_system.interface.ve.intf_isis.interface_isis.interface_hello_multiplier', 'pybind.slxos.v16r_1_00b.brocade_common_def', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'interface_hello_multiplier', 'keyval': 'interface_hello_multiplier_level', 'extra_keyval': 'interface_hello_multiplier_level, interface_hello_multiplier_val'}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, ve=ve, interface_hello_multiplier=interface_hello_multiplier)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def interface_ve_isis_ipv6_metric_delete(self, ve=None, interface_ipv6_metric=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		SLXOS: 16r.1.00b    

	**Parent Instance Keyword Arg Tuple(s)**:
		:param ve: kwarg tuple.
		:type ve: (name).

		:param name: tuple arg.
		:type name: (long)
		
		.. note::
			* range - ['0..4294967295']

	**This Instance Keyword Arg Tuple**:
		:param interface_ipv6_metric: kwarg tuple.
		:type interface_ipv6_metric: (interface_ipv6_metric_level, interface_ipv6_metric_val).

		:param interface_ipv6_metric_level: tuple arg.
		:type interface_ipv6_metric_level: (unicode)
		
		.. note::
			* enum - [u'level-2', u'level-1']

		:param interface_ipv6_metric_val: tuple arg.
		:type interface_ipv6_metric_val: (long)
		
		.. note::
			* range - ['0..4294967295']

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = [('pybind.slxos.v16r_1_00b.routing_system.interface.ve', u've')]
    bindings_list = [('pybind.slxos.v16r_1_00b.routing_system.interface.ve.intf_isis.interface_isis.interface_ipv6.interface_ipv6_metric', 'pybind.slxos.v16r_1_00b.brocade_common_def', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'interface_ipv6_metric', 'keyval': 'interface_ipv6_metric_level', 'extra_keyval': 'interface_ipv6_metric_level, interface_ipv6_metric_val'}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, ve=ve, interface_ipv6_metric=interface_ipv6_metric)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def interface_ve_isis_metric_delete(self, ve=None, interface_metric=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		SLXOS: 16r.1.00b    

	**Parent Instance Keyword Arg Tuple(s)**:
		:param ve: kwarg tuple.
		:type ve: (name).

		:param name: tuple arg.
		:type name: (long)
		
		.. note::
			* range - ['0..4294967295']

	**This Instance Keyword Arg Tuple**:
		:param interface_metric: kwarg tuple.
		:type interface_metric: (interface_metric_level, interface_metric_val).

		:param interface_metric_level: tuple arg.
		:type interface_metric_level: (unicode)
		
		.. note::
			* enum - [u'level-2', u'level-1']

		:param interface_metric_val: tuple arg.
		:type interface_metric_val: (long)
		
		.. note::
			* range - ['0..4294967295']

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = [('pybind.slxos.v16r_1_00b.routing_system.interface.ve', u've')]
    bindings_list = [('pybind.slxos.v16r_1_00b.routing_system.interface.ve.intf_isis.interface_isis.interface_metric', 'pybind.slxos.v16r_1_00b.brocade_common_def', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'interface_metric', 'keyval': 'interface_metric_level', 'extra_keyval': 'interface_metric_level, interface_metric_val'}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, ve=ve, interface_metric=interface_metric)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def interface_ve_vrrp_extended_group_delete(self, ve=None, vrrpe=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		SLXOS: 16r.1.00b    

	**Parent Instance Keyword Arg Tuple(s)**:
		:param ve: kwarg tuple.
		:type ve: (name).

		:param name: tuple arg.
		:type name: (long)
		
		.. note::
			* range - ['0..4294967295']

	**This Instance Keyword Arg Tuple**:
		:param vrrpe: kwarg tuple.
		:type vrrpe: (vrid).

		:param vrid: tuple arg.
		:type vrid: (int)
		
		.. note::
			* range - ['0..255']

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = [('pybind.slxos.v16r_1_00b.routing_system.interface.ve', u've')]
    bindings_list = [('pybind.slxos.v16r_1_00b.routing_system.interface.ve.vrrpe', 'pybind.slxos.v16r_1_00b.brocade_common_def', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'vrrpe', 'keyval': 'vrid', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, ve=ve, vrrpe=vrrpe)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def interface_ve_vrrp_extended_group_track_delete(self, ve=None, vrrpe=None, interface=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		SLXOS: 16r.1.00b    

	**Parent Instance Keyword Arg Tuple(s)**:
		:param ve: kwarg tuple.
		:type ve: (name).

		:param name: tuple arg.
		:type name: (long)
		
		.. note::
			* range - ['0..4294967295']

		:param vrrpe: kwarg tuple.
		:type vrrpe: (vrid).

		:param vrid: tuple arg.
		:type vrid: (int)
		
		.. note::
			* range - ['0..255']

	**This Instance Keyword Arg Tuple**:
		:param interface: kwarg tuple.
		:type interface: (interface_type, interface_name).

		:param interface_type: tuple arg.
		:type interface_type: (unicode)
		
		.. note::
			* enum - [u'ethernet', u'port-channel']

		:param interface_name: tuple arg.
		:type interface_name: (unicode)
		
		.. note::
			* length - [u'3..16']
			* pattern - ((([0-9]|[1][0-6]))/([1-9]|[1-9][0-9]|[1-9][0-9][0-9])(:[1-4])?)

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = [('pybind.slxos.v16r_1_00b.routing_system.interface.ve', u've'), ('pybind.slxos.v16r_1_00b.routing_system.interface.ve.vrrpe', u'vrrpe')]
    bindings_list = [('pybind.slxos.v16r_1_00b.routing_system.interface.ve.vrrpe.track.interface', 'pybind.slxos.v16r_1_00b.brocade_common_def', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'vrid', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'interface', 'keyval': 'interface_type, interface_name', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, ve=ve, vrrpe=vrrpe, interface=interface)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def interface_ve_vrrp_extended_group_track_network_delete(self, ve=None, vrrpe=None, network=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		SLXOS: 16r.1.00b    

	**Parent Instance Keyword Arg Tuple(s)**:
		:param ve: kwarg tuple.
		:type ve: (name).

		:param name: tuple arg.
		:type name: (long)
		
		.. note::
			* range - ['0..4294967295']

		:param vrrpe: kwarg tuple.
		:type vrrpe: (vrid).

		:param vrid: tuple arg.
		:type vrid: (int)
		
		.. note::
			* range - ['0..255']

	**This Instance Keyword Arg Tuple**:
		:param network: kwarg tuple.
		:type network: (network_address).

		:param network_address: IPv4 global address
		:type network_address: (unicode)
		
		.. note::
			* pattern - (([1-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.)(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){2}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])/(([1-9])|([1-2][0-9])|(3[0-2]))

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = [('pybind.slxos.v16r_1_00b.routing_system.interface.ve', u've'), ('pybind.slxos.v16r_1_00b.routing_system.interface.ve.vrrpe', u'vrrpe')]
    bindings_list = [('pybind.slxos.v16r_1_00b.routing_system.interface.ve.vrrpe.track.network', 'pybind.slxos.v16r_1_00b.brocade_common_def', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'vrid', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'network', 'keyval': 'network_address', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, ve=ve, vrrpe=vrrpe, network=network)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def interface_ve_vrrp_extended_group_virtual_ip_delete(self, ve=None, vrrpe=None, virtual_ip=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		SLXOS: 16r.1.00b    

	**Parent Instance Keyword Arg Tuple(s)**:
		:param ve: kwarg tuple.
		:type ve: (name).

		:param name: tuple arg.
		:type name: (long)
		
		.. note::
			* range - ['0..4294967295']

		:param vrrpe: kwarg tuple.
		:type vrrpe: (vrid).

		:param vrid: tuple arg.
		:type vrid: (int)
		
		.. note::
			* range - ['0..255']

	**This Instance Keyword Arg Tuple**:
		:param virtual_ip: kwarg tuple.
		:type virtual_ip: (virtual_ipaddr).

		:param virtual_ipaddr: Virtual IPv4 address
		:type virtual_ipaddr: (unicode)
		
		.. note::
			* pattern - (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = [('pybind.slxos.v16r_1_00b.routing_system.interface.ve', u've'), ('pybind.slxos.v16r_1_00b.routing_system.interface.ve.vrrpe', u'vrrpe')]
    bindings_list = [('pybind.slxos.v16r_1_00b.routing_system.interface.ve.vrrpe.virtual_ip', 'pybind.slxos.v16r_1_00b.brocade_common_def', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'vrid', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'virtual_ip', 'keyval': 'virtual_ipaddr', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, ve=ve, vrrpe=vrrpe, virtual_ip=virtual_ip)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def interface_ve_vrrp_group_delete(self, ve=None, vrrp=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		SLXOS: 16r.1.00b    

	**Parent Instance Keyword Arg Tuple(s)**:
		:param ve: kwarg tuple.
		:type ve: (name).

		:param name: tuple arg.
		:type name: (long)
		
		.. note::
			* range - ['0..4294967295']

	**This Instance Keyword Arg Tuple**:
		:param vrrp: kwarg tuple.
		:type vrrp: (vrid, version).

		:param vrid: tuple arg.
		:type vrid: (int)
		
		.. note::
			* range - ['0..255']

		:param version: Set VRRP version 2/3
		:type version: (int)
		
		.. note::
			* range - ['0..255']

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = [('pybind.slxos.v16r_1_00b.routing_system.interface.ve', u've')]
    bindings_list = [('pybind.slxos.v16r_1_00b.routing_system.interface.ve.vrrp', 'pybind.slxos.v16r_1_00b.brocade_common_def', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'vrrp', 'keyval': 'vrid, version', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, ve=ve, vrrp=vrrp)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def interface_ve_vrrp_group_track_delete(self, ve=None, vrrp=None, interface=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		SLXOS: 16r.1.00b    

	**Parent Instance Keyword Arg Tuple(s)**:
		:param ve: kwarg tuple.
		:type ve: (name).

		:param name: tuple arg.
		:type name: (long)
		
		.. note::
			* range - ['0..4294967295']

		:param vrrp: kwarg tuple.
		:type vrrp: (vrid, version).

		:param vrid: tuple arg.
		:type vrid: (int)
		
		.. note::
			* range - ['0..255']

		:param version: Set VRRP version 2/3
		:type version: (int)
		
		.. note::
			* range - ['0..255']

	**This Instance Keyword Arg Tuple**:
		:param interface: kwarg tuple.
		:type interface: (interface_type, interface_name).

		:param interface_type: tuple arg.
		:type interface_type: (unicode)
		
		.. note::
			* enum - [u'ethernet', u'port-channel']

		:param interface_name: tuple arg.
		:type interface_name: (unicode)
		
		.. note::
			* length - [u'3..16']
			* pattern - ((([0-9]|[1][0-6]))/([1-9]|[1-9][0-9]|[1-9][0-9][0-9])(:[1-4])?)

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = [('pybind.slxos.v16r_1_00b.routing_system.interface.ve', u've'), ('pybind.slxos.v16r_1_00b.routing_system.interface.ve.vrrp', u'vrrp')]
    bindings_list = [('pybind.slxos.v16r_1_00b.routing_system.interface.ve.vrrp.track.interface', 'pybind.slxos.v16r_1_00b.brocade_common_def', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'vrid, version', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'interface', 'keyval': 'interface_type, interface_name', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, ve=ve, vrrp=vrrp, interface=interface)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def interface_ve_vrrp_group_virtual_ip_delete(self, ve=None, vrrp=None, virtual_ip=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		SLXOS: 16r.1.00b    

	**Parent Instance Keyword Arg Tuple(s)**:
		:param ve: kwarg tuple.
		:type ve: (name).

		:param name: tuple arg.
		:type name: (long)
		
		.. note::
			* range - ['0..4294967295']

		:param vrrp: kwarg tuple.
		:type vrrp: (vrid, version).

		:param vrid: tuple arg.
		:type vrid: (int)
		
		.. note::
			* range - ['0..255']

		:param version: Set VRRP version 2/3
		:type version: (int)
		
		.. note::
			* range - ['0..255']

	**This Instance Keyword Arg Tuple**:
		:param virtual_ip: kwarg tuple.
		:type virtual_ip: (virtual_ipaddr).

		:param virtual_ipaddr: Virtual IPv4 address
		:type virtual_ipaddr: (unicode)
		
		.. note::
			* pattern - (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = [('pybind.slxos.v16r_1_00b.routing_system.interface.ve', u've'), ('pybind.slxos.v16r_1_00b.routing_system.interface.ve.vrrp', u'vrrp')]
    bindings_list = [('pybind.slxos.v16r_1_00b.routing_system.interface.ve.vrrp.virtual_ip', 'pybind.slxos.v16r_1_00b.brocade_common_def', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'vrid, version', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'virtual_ip', 'keyval': 'virtual_ipaddr', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, ve=ve, vrrp=vrrp, virtual_ip=virtual_ip)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def interface_vlan_ip_igmp_snooping_mrouter_interface_delete(self, vlan=None, interface=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		NOS: 6.0.2b, 7.0.1a, 7.1.0    

	**Parent Instance Keyword Arg Tuple(s)**:
		:param vlan: kwarg tuple.
		:type vlan: (name).

		:param name: tuple arg.
		:type name: (long)
		
		.. note::
			* range - ['0..4294967295']

	**This Instance Keyword Arg Tuple**:
		:param interface: kwarg tuple.
		:type interface: (if_type, value).

		:param if_type: tuple arg.
		:type if_type: (unicode)
		
		.. note::
			* enum - [u'FortyGigabitEthernet', u'GigabitEthernet', u'Port-channel', u'TenGigabitEthernet', u'HundredGigabitEthernet']

		:param value: tuple arg.
		:type value: (unicode)
		
		.. note::
			* length - [u'1..10']

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = [('pybind.nos.v7_0_1a.interface_vlan.interface.vlan', u'vlan'), ('pybind.nos.v7_1_0.interface_vlan.interface.vlan', u'vlan'), ('pybind.nos.v6_0_2b.interface_vlan.interface.vlan', u'vlan')]
    bindings_list = [('pybind.nos.v6_0_2b.interface_vlan.interface.vlan.ip.igmp.snooping.mrouter.interface', 'pybind.nos.v6_0_2b.brocade_interface', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.interface_vlan.interface.vlan.ip.igmp.snooping.mrouter.interface', 'pybind.nos.v7_0_1a.brocade_interface', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.interface_vlan.interface.vlan.ip.igmp.snooping.mrouter.interface', 'pybind.nos.v7_1_0.brocade_interface', 'pybind.nos.v7_1_0')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'interface', 'keyval': 'if_type, value', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, vlan=vlan, interface=interface)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def interface_vlan_ip_igmp_static_group_delete(self, vlan=None, static_group=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		NOS: 6.0.2b, 7.0.1a, 7.1.0    

	**Parent Instance Keyword Arg Tuple(s)**:
		:param vlan: kwarg tuple.
		:type vlan: (name).

		:param name: tuple arg.
		:type name: (long)
		
		.. note::
			* range - ['0..4294967295']

	**This Instance Keyword Arg Tuple**:
		:param static_group: kwarg tuple.
		:type static_group: (mcast_address, interface, if_type, value).

		:param mcast_address: Multicast Address to be Joined in the format A.B.C.D
		:type mcast_address: (unicode)
		
		.. note::
			* pattern - (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?

		:param interface: tuple arg.
		:type interface: (unicode)
		
		.. note::
			* enum - [u'interface']

		:param if_type: tuple arg.
		:type if_type: (unicode)
		
		.. note::
			* enum - [u'FortyGigabitEthernet', u'GigabitEthernet', u'Port-channel', u'TenGigabitEthernet', u'HundredGigabitEthernet']

		:param value: tuple arg.
		:type value: (unicode)
		
		.. note::
			* length - [u'1..10']

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = [('pybind.nos.v7_0_1a.interface_vlan.interface.vlan', u'vlan'), ('pybind.nos.v7_1_0.interface_vlan.interface.vlan', u'vlan'), ('pybind.nos.v6_0_2b.interface_vlan.interface.vlan', u'vlan')]
    bindings_list = [('pybind.nos.v6_0_2b.interface_vlan.interface.vlan.ip.igmp.static_group', 'pybind.nos.v6_0_2b.brocade_interface', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.interface_vlan.interface.vlan.ip.igmp.static_group', 'pybind.nos.v7_0_1a.brocade_interface', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.interface_vlan.interface.vlan.ip.igmp.static_group', 'pybind.nos.v7_1_0.brocade_interface', 'pybind.nos.v7_1_0')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'static_group', 'keyval': 'mcast_address, interface, if_type, value', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, vlan=vlan, static_group=static_group)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def interface_vlan_ipv6_mld_snooping_mrouter_interface_delete(self, vlan=None, interface=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		NOS: 6.0.2b, 7.0.1a, 7.1.0    

	**Parent Instance Keyword Arg Tuple(s)**:
		:param vlan: kwarg tuple.
		:type vlan: (name).

		:param name: tuple arg.
		:type name: (long)
		
		.. note::
			* range - ['0..4294967295']

	**This Instance Keyword Arg Tuple**:
		:param interface: kwarg tuple.
		:type interface: (if_type, value).

		:param if_type: tuple arg.
		:type if_type: (unicode)
		
		.. note::
			* enum - [u'FortyGigabitEthernet', u'GigabitEthernet', u'Port-channel', u'TenGigabitEthernet', u'HundredGigabitEthernet']

		:param value: tuple arg.
		:type value: (unicode)
		
		.. note::
			* length - [u'1..10']

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = [('pybind.nos.v7_0_1a.interface_vlan.interface.vlan', u'vlan'), ('pybind.nos.v6_0_2b.interface_vlan.interface.vlan', u'vlan'), ('pybind.nos.v7_1_0.interface_vlan.interface.vlan', u'vlan')]
    bindings_list = [('pybind.nos.v6_0_2b.interface_vlan.interface.vlan.ipv6.mldVlan.snooping.mrouter.interface', 'pybind.nos.v6_0_2b.brocade_interface', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.interface_vlan.interface.vlan.ipv6.mldVlan.snooping.mrouter.interface', 'pybind.nos.v7_0_1a.brocade_interface', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.interface_vlan.interface.vlan.ipv6.mldVlan.snooping.mrouter.interface', 'pybind.nos.v7_1_0.brocade_interface', 'pybind.nos.v7_1_0')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'interface', 'keyval': 'if_type, value', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, vlan=vlan, interface=interface)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def interface_vlan_ipv6_mld_static_group_delete(self, vlan=None, static_group=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		NOS: 6.0.2b, 7.0.1a, 7.1.0    

	**Parent Instance Keyword Arg Tuple(s)**:
		:param vlan: kwarg tuple.
		:type vlan: (name).

		:param name: tuple arg.
		:type name: (long)
		
		.. note::
			* range - ['0..4294967295']

	**This Instance Keyword Arg Tuple**:
		:param static_group: kwarg tuple.
		:type static_group: (mcast_address, interface, if_type, value).

		:param mcast_address: Multicast Address to be Joined in format xxxx:xxxx/ml, xxxx:xxxx::/ml
		:type mcast_address: (unicode)
		
		.. note::
			* pattern - ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?

		:param interface: tuple arg.
		:type interface: (unicode)
		
		.. note::
			* enum - [u'interface']

		:param if_type: tuple arg.
		:type if_type: (unicode)
		
		.. note::
			* enum - [u'FortyGigabitEthernet', u'GigabitEthernet', u'Port-channel', u'TenGigabitEthernet', u'HundredGigabitEthernet']

		:param value: tuple arg.
		:type value: (unicode)
		
		.. note::
			* length - [u'1..10']

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = [('pybind.nos.v7_0_1a.interface_vlan.interface.vlan', u'vlan'), ('pybind.nos.v6_0_2b.interface_vlan.interface.vlan', u'vlan'), ('pybind.nos.v7_1_0.interface_vlan.interface.vlan', u'vlan')]
    bindings_list = [('pybind.nos.v6_0_2b.interface_vlan.interface.vlan.ipv6.mldVlan.static_group', 'pybind.nos.v6_0_2b.brocade_interface', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.interface_vlan.interface.vlan.ipv6.mldVlan.static_group', 'pybind.nos.v7_0_1a.brocade_interface', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.interface_vlan.interface.vlan.ipv6.mldVlan.static_group', 'pybind.nos.v7_1_0.brocade_interface', 'pybind.nos.v7_1_0')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'static_group', 'keyval': 'mcast_address, interface, if_type, value', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, vlan=vlan, static_group=static_group)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def interface_vlan_mac_access_group_delete(self, vlan=None, access_group=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		NOS: 6.0.2b, 7.0.1a, 7.1.0    

	**Parent Instance Keyword Arg Tuple(s)**:
		:param vlan: kwarg tuple.
		:type vlan: (name).

		:param name: tuple arg.
		:type name: (long)
		
		.. note::
			* range - ['0..4294967295']

	**This Instance Keyword Arg Tuple**:
		:param access_group: kwarg tuple.
		:type access_group: (mac_access_list, mac_direction, traffic_type).

		:param mac_access_list: ACL_NAME;; Access List Name (Max 63)
		:type mac_access_list: (unicode)
		
		.. note::
			* length - [u'1..63']
			* pattern - [a-zA-Z0-9]{1}([-a-zA-Z0-9_]{0,62})

		:param mac_direction: tuple arg.
		:type mac_direction: (unicode)
		
		.. note::
			* enum - [u'in', u'out']

		:param traffic_type: tuple arg.
		:type traffic_type: (unicode)
		
		.. note::
			* enum - [u'switched', u'routed']

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = [('pybind.nos.v7_0_1a.interface_vlan.interface.vlan', u'vlan'), ('pybind.nos.v6_0_2b.interface_vlan.interface.vlan', u'vlan'), ('pybind.nos.v7_1_0.interface_vlan.interface.vlan', u'vlan')]
    bindings_list = [('pybind.nos.v6_0_2b.interface_vlan.interface.vlan.mac.access_group', 'pybind.nos.v6_0_2b.brocade_interface', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.interface_vlan.interface.vlan.mac.access_group', 'pybind.nos.v7_0_1a.brocade_interface', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.interface_vlan.interface.vlan.mac.access_group', 'pybind.nos.v7_1_0.brocade_interface', 'pybind.nos.v7_1_0')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'access_group', 'keyval': 'mac_access_list, mac_direction', 'extra_keyval': 'mac_access_list, mac_direction, traffic_type'}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, vlan=vlan, access_group=access_group)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def ip_access_list_extended_delete(self, extended=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		NOS: 6.0.2b, 7.0.1a, 7.1.0
		SLXOS: 16r.1.00b    

	**This Instance Keyword Arg Tuple**:
		:param extended: kwarg tuple.
		:type extended: (name).

		:param name: tuple arg.
		:type name: (unicode)
		
		.. note::
			* length - [u'1..63']
			* pattern - [a-zA-Z0-9]{1}([-a-zA-Z0-9_]{0,62})

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = []
    bindings_list = [('pybind.nos.v6_0_2b.ip_acl.ip.access_list.extended', 'pybind.nos.v6_0_2b.brocade_ip_access_list', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.ip_acl.ip.access_list.extended', 'pybind.nos.v7_0_1a.brocade_ip_access_list', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.ip_acl.ip.access_list.extended', 'pybind.nos.v7_1_0.brocade_ip_access_list', 'pybind.nos.v7_1_0'), ('pybind.slxos.v16r_1_00b.ip_acl.ip.access_list.extended', 'pybind.slxos.v16r_1_00b.brocade_ip_access_list', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = []
    bindings_keyval = {'kwargs_key_name': u'extended', 'keyval': 'name', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, extended=extended)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def ip_access_list_extended_seq_delete(self, extended=None, seq=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		NOS: 6.0.2b, 7.0.1a, 7.1.0
		SLXOS: 16r.1.00b    

	**Parent Instance Keyword Arg Tuple(s)**:
		:param extended: kwarg tuple.
		:type extended: (name).

		:param name: tuple arg.
		:type name: (unicode)
		
		.. note::
			* length - [u'1..63']
			* pattern - [a-zA-Z0-9]{1}([-a-zA-Z0-9_]{0,62})

	**This Instance Keyword Arg Tuple**:
		:param seq: kwarg tuple.
		:type seq: (seq_id, action, protocol_type, src_host_any_sip, src_host_ip, src_mask, sport, sport_number_eq_neq_tcp, sport_number_lt_tcp, sport_number_gt_tcp, sport_number_eq_neq_udp, sport_number_lt_udp, sport_number_gt_udp, sport_number_range_lower_tcp, sport_number_range_lower_udp, sport_number_range_higher_tcp, sport_number_range_higher_udp, dst_host_any_dip, dst_host_ip, dst_mask, dport, dport_number_eq_neq_tcp, dport_number_lt_tcp, dport_number_gt_tcp, dport_number_eq_neq_udp, dport_number_lt_udp, dport_number_gt_udp, dport_number_range_lower_tcp, dport_number_range_lower_udp, dport_number_range_higher_tcp, dport_number_range_higher_udp, dscp, urg, ack, push, fin, rst, sync, vlan, count, log).

		:param seq_id: tuple arg.
		:type seq_id: (long)
		
		.. note::
			* range - ['0..18446744073709551615']

		:param action: tuple arg.
		:type action: (unicode)
		
		.. note::
			* enum - [u'deny', u'hard-drop', u'permit']

		:param protocol_type: tuple arg.
		:type protocol_type: (unicode)
		
		.. note::
			* enum - [u'ip', u'udp', u'icmp', u'tcp']

		:param src_host_any_sip: tuple arg.
		:type src_host_any_sip: (unicode)
		
		.. note::
			* enum - [u'host', u'any']

		:param src_host_ip: tuple arg.
		:type src_host_ip: (unicode)
		
		.. note::
			* pattern - (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?

		:param src_mask: tuple arg.
		:type src_mask: (unicode)
		
		.. note::
			* pattern - (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?

		:param sport: tuple arg.
		:type sport: (unicode)
		
		.. note::
			* enum - [u'lt', u'gt', u'eq', u'range', u'neq']

		:param sport_number_eq_neq_tcp: tuple arg.
		:type sport_number_eq_neq_tcp: (unicode)
		
		.. note::
			* enum - [u'ftp', u'domain', u'tacacs', u'hostname', u'smtp', u'www', u'telnet', u'echo', u'bgp', u'syslog', u'ftp-data', u'daytime', u'time', u'pim-auto-rp', u'login', u'talk']

		:param sport_number_lt_tcp: tuple arg.
		:type sport_number_lt_tcp: (unicode)
		
		.. note::
			* enum - [u'ftp', u'domain', u'tacacs', u'hostname', u'smtp', u'www', u'telnet', u'echo', u'bgp', u'syslog', u'ftp-data', u'daytime', u'time', u'pim-auto-rp', u'login', u'talk']

		:param sport_number_gt_tcp: tuple arg.
		:type sport_number_gt_tcp: (unicode)
		
		.. note::
			* enum - [u'ftp', u'domain', u'tacacs', u'hostname', u'smtp', u'www', u'telnet', u'echo', u'bgp', u'syslog', u'ftp-data', u'daytime', u'time', u'pim-auto-rp', u'login', u'talk']

		:param sport_number_eq_neq_udp: tuple arg.
		:type sport_number_eq_neq_udp: (unicode)
		
		.. note::
			* enum - [u'domain', u'ntp', u'rip', u'echo', u'syslog', u'pim-auto-rp', u'tacacs', u'snmp', u'bootps', u'tftp', u'bootpc']

		:param sport_number_lt_udp: tuple arg.
		:type sport_number_lt_udp: (unicode)
		
		.. note::
			* enum - [u'domain', u'ntp', u'rip', u'echo', u'syslog', u'pim-auto-rp', u'tacacs', u'snmp', u'bootps', u'tftp', u'bootpc']

		:param sport_number_gt_udp: tuple arg.
		:type sport_number_gt_udp: (unicode)
		
		.. note::
			* enum - [u'domain', u'ntp', u'rip', u'echo', u'syslog', u'pim-auto-rp', u'tacacs', u'snmp', u'bootps', u'tftp', u'bootpc']

		:param sport_number_range_lower_tcp: tuple arg.
		:type sport_number_range_lower_tcp: (unicode)
		
		.. note::
			* enum - [u'ftp', u'domain', u'tacacs', u'hostname', u'smtp', u'www', u'telnet', u'echo', u'bgp', u'syslog', u'ftp-data', u'daytime', u'time', u'pim-auto-rp', u'login', u'talk']

		:param sport_number_range_lower_udp: tuple arg.
		:type sport_number_range_lower_udp: (unicode)
		
		.. note::
			* enum - [u'domain', u'ntp', u'rip', u'echo', u'syslog', u'pim-auto-rp', u'tacacs', u'snmp', u'bootps', u'tftp', u'bootpc']

		:param sport_number_range_higher_tcp: tuple arg.
		:type sport_number_range_higher_tcp: (unicode)
		
		.. note::
			* enum - [u'ftp', u'domain', u'tacacs', u'hostname', u'smtp', u'www', u'telnet', u'echo', u'bgp', u'syslog', u'ftp-data', u'daytime', u'time', u'pim-auto-rp', u'login', u'talk']

		:param sport_number_range_higher_udp: tuple arg.
		:type sport_number_range_higher_udp: (unicode)
		
		.. note::
			* enum - [u'domain', u'ntp', u'rip', u'echo', u'syslog', u'pim-auto-rp', u'tacacs', u'snmp', u'bootps', u'tftp', u'bootpc']

		:param dst_host_any_dip: tuple arg.
		:type dst_host_any_dip: (unicode)
		
		.. note::
			* enum - [u'host', u'any']

		:param dst_host_ip: tuple arg.
		:type dst_host_ip: (unicode)
		
		.. note::
			* pattern - (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?

		:param dst_mask: tuple arg.
		:type dst_mask: (unicode)
		
		.. note::
			* pattern - (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?

		:param dport: tuple arg.
		:type dport: (unicode)
		
		.. note::
			* enum - [u'lt', u'gt', u'eq', u'range', u'neq']

		:param dport_number_eq_neq_tcp: tuple arg.
		:type dport_number_eq_neq_tcp: (unicode)
		
		.. note::
			* enum - [u'ftp', u'domain', u'tacacs', u'hostname', u'smtp', u'www', u'telnet', u'echo', u'bgp', u'syslog', u'ftp-data', u'daytime', u'time', u'pim-auto-rp', u'login', u'talk']

		:param dport_number_lt_tcp: tuple arg.
		:type dport_number_lt_tcp: (unicode)
		
		.. note::
			* enum - [u'ftp', u'domain', u'tacacs', u'hostname', u'smtp', u'www', u'telnet', u'echo', u'bgp', u'syslog', u'ftp-data', u'daytime', u'time', u'pim-auto-rp', u'login', u'talk']

		:param dport_number_gt_tcp: tuple arg.
		:type dport_number_gt_tcp: (unicode)
		
		.. note::
			* enum - [u'ftp', u'domain', u'tacacs', u'hostname', u'smtp', u'www', u'telnet', u'echo', u'bgp', u'syslog', u'ftp-data', u'daytime', u'time', u'pim-auto-rp', u'login', u'talk']

		:param dport_number_eq_neq_udp: tuple arg.
		:type dport_number_eq_neq_udp: (unicode)
		
		.. note::
			* enum - [u'domain', u'ntp', u'rip', u'echo', u'syslog', u'pim-auto-rp', u'tacacs', u'snmp', u'bootps', u'tftp', u'bootpc']

		:param dport_number_lt_udp: tuple arg.
		:type dport_number_lt_udp: (unicode)
		
		.. note::
			* enum - [u'domain', u'ntp', u'rip', u'echo', u'syslog', u'pim-auto-rp', u'tacacs', u'snmp', u'bootps', u'tftp', u'bootpc']

		:param dport_number_gt_udp: tuple arg.
		:type dport_number_gt_udp: (unicode)
		
		.. note::
			* enum - [u'domain', u'ntp', u'rip', u'echo', u'syslog', u'pim-auto-rp', u'tacacs', u'snmp', u'bootps', u'tftp', u'bootpc']

		:param dport_number_range_lower_tcp: tuple arg.
		:type dport_number_range_lower_tcp: (unicode)
		
		.. note::
			* enum - [u'ftp', u'domain', u'tacacs', u'hostname', u'smtp', u'www', u'telnet', u'echo', u'bgp', u'syslog', u'ftp-data', u'daytime', u'time', u'pim-auto-rp', u'login', u'talk']

		:param dport_number_range_lower_udp: tuple arg.
		:type dport_number_range_lower_udp: (unicode)
		
		.. note::
			* enum - [u'domain', u'ntp', u'rip', u'echo', u'syslog', u'pim-auto-rp', u'tacacs', u'snmp', u'bootps', u'tftp', u'bootpc']

		:param dport_number_range_higher_tcp: tuple arg.
		:type dport_number_range_higher_tcp: (unicode)
		
		.. note::
			* enum - [u'ftp', u'domain', u'tacacs', u'hostname', u'smtp', u'www', u'telnet', u'echo', u'bgp', u'syslog', u'ftp-data', u'daytime', u'time', u'pim-auto-rp', u'login', u'talk']

		:param dport_number_range_higher_udp: tuple arg.
		:type dport_number_range_higher_udp: (unicode)
		
		.. note::
			* enum - [u'domain', u'ntp', u'rip', u'echo', u'syslog', u'pim-auto-rp', u'tacacs', u'snmp', u'bootps', u'tftp', u'bootpc']

		:param dscp: Differentiated Service Code Point
		:type dscp: (unicode)
		
		.. note::
			* enum - [u'af23', u'af22', u'af21', u'af33', u'af41', u'af43', u'af31', u'default', u'af42', u'af12', u'af32', u'af13', u'cs6', u'cs2', u'cs5', u'cs4', u'cs7', u'af11', u'cs1', u'cs3', u'ef']

		:param urg: Urgent
		:type urg: (YANGBool)

		:param ack: Acknowledgement
		:type ack: (YANGBool)

		:param push: Push
		:type push: (YANGBool)

		:param fin: No more data
		:type fin: (YANGBool)

		:param rst: Reset connection
		:type rst: (YANGBool)

		:param sync: Synchronize
		:type sync: (YANGBool)

		:param vlan: Vlan
		:type vlan: (long)
		
		.. note::
			* range - ['0..4294967295']

		:param count: Packet Count
		:type count: (YANGBool)

		:param log: Log Packet
		:type log: (YANGBool)

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = [('pybind.nos.v6_0_2b.ip_acl.ip.access_list.extended', u'extended'), ('pybind.nos.v7_0_1a.ip_acl.ip.access_list.extended', u'extended'), ('pybind.slxos.v16r_1_00b.ip_acl.ip.access_list.extended', u'extended'), ('pybind.nos.v7_1_0.ip_acl.ip.access_list.extended', u'extended')]
    bindings_list = [('pybind.nos.v6_0_2b.ip_acl.ip.access_list.extended.hide_ip_acl_ext.seq', 'pybind.nos.v6_0_2b.brocade_ip_access_list', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.ip_acl.ip.access_list.extended.hide_ip_acl_ext.seq', 'pybind.nos.v7_0_1a.brocade_ip_access_list', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.ip_acl.ip.access_list.extended.hide_ip_acl_ext.seq', 'pybind.nos.v7_1_0.brocade_ip_access_list', 'pybind.nos.v7_1_0'), ('pybind.slxos.v16r_1_00b.ip_acl.ip.access_list.extended.hide_ip_acl_ext.seq', 'pybind.slxos.v16r_1_00b.brocade_ip_access_list', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'seq', 'keyval': 'seq_id', 'extra_keyval': 'seq_id, action, protocol_type, src_host_any_sip, src_host_ip, src_mask, sport, sport_number_eq_neq_tcp, sport_number_lt_tcp, sport_number_gt_tcp, sport_number_eq_neq_udp, sport_number_lt_udp, sport_number_gt_udp, sport_number_range_lower_tcp, sport_number_range_lower_udp, sport_number_range_higher_tcp, sport_number_range_higher_udp, dst_host_any_dip, dst_host_ip, dst_mask, dport, dport_number_eq_neq_tcp, dport_number_lt_tcp, dport_number_gt_tcp, dport_number_eq_neq_udp, dport_number_lt_udp, dport_number_gt_udp, dport_number_range_lower_tcp, dport_number_range_lower_udp, dport_number_range_higher_tcp, dport_number_range_higher_udp, dscp, urg, ack, push, fin, rst, sync, vlan, count, log'}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, extended=extended, seq=seq)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def ip_access_list_standard_delete(self, standard=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		NOS: 6.0.2b, 7.0.1a, 7.1.0
		SLXOS: 16r.1.00b    

	**This Instance Keyword Arg Tuple**:
		:param standard: kwarg tuple.
		:type standard: (name).

		:param name: tuple arg.
		:type name: (unicode)
		
		.. note::
			* length - [u'1..63']
			* pattern - [a-zA-Z0-9]{1}([-a-zA-Z0-9_]{0,62})

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = []
    bindings_list = [('pybind.nos.v6_0_2b.ip_acl.ip.access_list.standard', 'pybind.nos.v6_0_2b.brocade_ip_access_list', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.ip_acl.ip.access_list.standard', 'pybind.nos.v7_0_1a.brocade_ip_access_list', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.ip_acl.ip.access_list.standard', 'pybind.nos.v7_1_0.brocade_ip_access_list', 'pybind.nos.v7_1_0'), ('pybind.slxos.v16r_1_00b.ip_acl.ip.access_list.standard', 'pybind.slxos.v16r_1_00b.brocade_ip_access_list', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = []
    bindings_keyval = {'kwargs_key_name': u'standard', 'keyval': 'name', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, standard=standard)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def ip_access_list_standard_seq_delete(self, standard=None, seq=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		NOS: 6.0.2b, 7.0.1a, 7.1.0
		SLXOS: 16r.1.00b    

	**Parent Instance Keyword Arg Tuple(s)**:
		:param standard: kwarg tuple.
		:type standard: (name).

		:param name: tuple arg.
		:type name: (unicode)
		
		.. note::
			* length - [u'1..63']
			* pattern - [a-zA-Z0-9]{1}([-a-zA-Z0-9_]{0,62})

	**This Instance Keyword Arg Tuple**:
		:param seq: kwarg tuple.
		:type seq: (seq_id, action, src_host_any_sip, src_host_ip, src_mask, count, log).

		:param seq_id: tuple arg.
		:type seq_id: (long)
		
		.. note::
			* range - ['0..18446744073709551615']

		:param action: tuple arg.
		:type action: (unicode)
		
		.. note::
			* enum - [u'deny', u'hard-drop', u'permit']

		:param src_host_any_sip: tuple arg.
		:type src_host_any_sip: (unicode)
		
		.. note::
			* enum - [u'host', u'any']

		:param src_host_ip: tuple arg.
		:type src_host_ip: (unicode)
		
		.. note::
			* pattern - (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?

		:param src_mask: tuple arg.
		:type src_mask: (unicode)
		
		.. note::
			* pattern - (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?

		:param count: Packet count
		:type count: (YANGBool)

		:param log: Log Packet
		:type log: (YANGBool)

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = [('pybind.nos.v7_1_0.ip_acl.ip.access_list.standard', u'standard'), ('pybind.nos.v6_0_2b.ip_acl.ip.access_list.standard', u'standard'), ('pybind.nos.v7_0_1a.ip_acl.ip.access_list.standard', u'standard'), ('pybind.slxos.v16r_1_00b.ip_acl.ip.access_list.standard', u'standard')]
    bindings_list = [('pybind.nos.v6_0_2b.ip_acl.ip.access_list.standard.hide_ip_acl_std.seq', 'pybind.nos.v6_0_2b.brocade_ip_access_list', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.ip_acl.ip.access_list.standard.hide_ip_acl_std.seq', 'pybind.nos.v7_0_1a.brocade_ip_access_list', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.ip_acl.ip.access_list.standard.hide_ip_acl_std.seq', 'pybind.nos.v7_1_0.brocade_ip_access_list', 'pybind.nos.v7_1_0'), ('pybind.slxos.v16r_1_00b.ip_acl.ip.access_list.standard.hide_ip_acl_std.seq', 'pybind.slxos.v16r_1_00b.brocade_ip_access_list', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'seq', 'keyval': 'seq_id', 'extra_keyval': 'seq_id, action, src_host_any_sip, src_host_ip, src_mask, count, log, copy_sflow'}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, standard=standard, seq=seq)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def ip_as_path_access_list_delete(self, access_list=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		NOS: 6.0.2b, 7.0.1a, 7.1.0
		SLXOS: 16r.1.00b    

	**This Instance Keyword Arg Tuple**:
		:param access_list: kwarg tuple.
		:type access_list: (name, seq_keyword, instance, ip_action, ip_reg_expr).

		:param name: tuple arg.
		:type name: (unicode)
		
		.. note::
			* length - [u'1..32']

		:param seq_keyword: tuple arg.
		:type seq_keyword: (unicode)
		
		.. note::
			* enum - [u'seq']

		:param instance: tuple arg.
		:type instance: (int)
		
		.. note::
			* range - ['0..65535']

		:param ip_action: tuple arg.
		:type ip_action: (unicode)
		
		.. note::
			* enum - [u'receive', u'send']

		:param ip_reg_expr: tuple arg.
		:type ip_reg_expr: (unicode)

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = []
    bindings_list = [('pybind.nos.v6_0_2b.ip.hide_as_path_holder.as_path.access_list', 'pybind.nos.v6_0_2b.brocade_common_def', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.ip.hide_as_path_holder.as_path.access_list', 'pybind.nos.v7_0_1a.brocade_common_def', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.ip.hide_as_path_holder.as_path.access_list', 'pybind.nos.v7_1_0.brocade_common_def', 'pybind.nos.v7_1_0'), ('pybind.slxos.v16r_1_00b.ip.hide_as_path_holder.as_path.access_list', 'pybind.slxos.v16r_1_00b.brocade_common_def', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = []
    bindings_keyval = {'kwargs_key_name': u'access_list', 'keyval': 'name, seq_keyword, instance', 'extra_keyval': 'name, seq_keyword, instance, ip_action, ip_reg_expr'}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, access_list=access_list)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def ip_community_list_extended_delete(self, extended=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		NOS: 6.0.2b, 7.0.1a, 7.1.0
		SLXOS: 16r.1.00b    

	**This Instance Keyword Arg Tuple**:
		:param extended: kwarg tuple.
		:type extended: (name, seq_keyword, instance, ip_action, ip_community_reg_expr).

		:param name: tuple arg.
		:type name: (unicode)

		:param seq_keyword: tuple arg.
		:type seq_keyword: (unicode)
		
		.. note::
			* enum - [u'seq']

		:param instance: tuple arg.
		:type instance: (int)
		
		.. note::
			* range - ['0..65535']

		:param ip_action: tuple arg.
		:type ip_action: (unicode)
		
		.. note::
			* enum - [u'receive', u'send']

		:param ip_community_reg_expr: tuple arg.
		:type ip_community_reg_expr: (unicode)

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = []
    bindings_list = [('pybind.nos.v6_0_2b.ip.hide_community_list_holder.community_list.extended', 'pybind.nos.v6_0_2b.brocade_common_def', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.ip.hide_community_list_holder.community_list.extended', 'pybind.nos.v7_0_1a.brocade_common_def', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.ip.hide_community_list_holder.community_list.extended', 'pybind.nos.v7_1_0.brocade_common_def', 'pybind.nos.v7_1_0'), ('pybind.slxos.v16r_1_00b.ip.hide_community_list_holder.community_list.extended', 'pybind.slxos.v16r_1_00b.brocade_common_def', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = []
    bindings_keyval = {'kwargs_key_name': u'extended', 'keyval': 'name, seq_keyword, instance', 'extra_keyval': 'name, seq_keyword, instance, ip_action, ip_community_reg_expr'}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, extended=extended)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def ip_community_list_standard_delete(self, standard=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		NOS: 6.0.2b, 7.0.1a, 7.1.0
		SLXOS: 16r.1.00b    

	**This Instance Keyword Arg Tuple**:
		:param standard: kwarg tuple.
		:type standard: (name, seq_keyword, instance, ip_action, std_community_expr).

		:param name: tuple arg.
		:type name: (unicode)

		:param seq_keyword: tuple arg.
		:type seq_keyword: (unicode)
		
		.. note::
			* enum - [u'seq']

		:param instance: tuple arg.
		:type instance: (int)
		
		.. note::
			* range - ['0..65535']

		:param ip_action: tuple arg.
		:type ip_action: (unicode)
		
		.. note::
			* enum - [u'receive', u'send']

		:param std_community_expr: tuple arg.
		:type std_community_expr: (unicode)
		
		.. note::
			* pattern - (\s*)|(\s*((local\-as)|(internet)|(no\-export)|(no\-advertise)|((([1-9][0-9]{0,3})|([1-5][0-9]{4})|(6[0-4][0-9]{3})|(65[0-4][0-9]{2})|(655[0-2][0-9])|(6553[0-5])):(([0-9][0-9]{0,3})|([1-5][0-9]{4})|(6[0-4][0-9]{3})|(65[0-4][0-9]{2})|(655[0-2][0-9])|(6553[0-5])))|([1-9][0-9]{0,8})|([1-3][0-9]{9})|(4[0-1][0-9]{8})|(42[0-8][0-9]{7})|(429[0-3][0-9]{6})|(4294[0-8][0-9]{5})|(42949[0-5][0-9]{4})|(429496[0-6][0-9]{3})|(4294967[0-1][0-9]{2})|(42949672[0-8][0-9])|(429496729[0-5])))((\s+((local\-as)|(internet)|(no\-export)|(no\-advertise)|((([1-9][0-9]{0,3})|([1-5][0-9]{4})|(6[0-4][0-9]{3})|(65[0-4][0-9]{2})|(655[0-2][0-9])|(6553[0-5])):(([0-9][0-9]{0,3})|([1-5][0-9]{4})|(6[0-4][0-9]{3})|(65[0-4][0-9]{2})|(655[0-2][0-9])|(6553[0-5])))|([1-9][0-9]{0,8})|([1-3][0-9]{9})|(4[0-1][0-9]{8})|(42[0-8][0-9]{7})|(429[0-3][0-9]{6})|(4294[0-8][0-9]{5})|(42949[0-5][0-9]{4})|(429496[0-6][0-9]{3})|(4294967[0-1][0-9]{2})|(42949672[0-8][0-9])|(429496729[0-5])))*)

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = []
    bindings_list = [('pybind.nos.v6_0_2b.ip.hide_community_list_holder.community_list.standard', 'pybind.nos.v6_0_2b.brocade_common_def', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.ip.hide_community_list_holder.community_list.standard', 'pybind.nos.v7_0_1a.brocade_common_def', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.ip.hide_community_list_holder.community_list.standard', 'pybind.nos.v7_1_0.brocade_common_def', 'pybind.nos.v7_1_0'), ('pybind.slxos.v16r_1_00b.ip.hide_community_list_holder.community_list.standard', 'pybind.slxos.v16r_1_00b.brocade_common_def', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = []
    bindings_keyval = {'kwargs_key_name': u'standard', 'keyval': 'name, seq_keyword, instance', 'extra_keyval': 'name, seq_keyword, instance, ip_action, std_community_expr'}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, standard=standard)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def ip_dns_name_server_delete(self, name_server=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		NOS: 6.0.2b, 7.0.1a, 7.1.0
		SLXOS: 16r.1.00b    

	**This Instance Keyword Arg Tuple**:
		:param name_server: kwarg tuple.
		:type name_server: (name_server_ip).

		:param name_server_ip: IPv4ADDRESS/IPv6ADDRESS;;The IPv4 or Ipv6 Address for Name Server
		:type name_server_ip: (unicode)
		
		.. note::
			* pattern - (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = []
    bindings_list = [('pybind.nos.v6_0_2b.ip.dns.name_server', 'pybind.nos.v6_0_2b.brocade_common_def', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.ip.dns.name_server', 'pybind.nos.v7_0_1a.brocade_common_def', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.ip.dns.name_server', 'pybind.nos.v7_1_0.brocade_common_def', 'pybind.nos.v7_1_0'), ('pybind.slxos.v16r_1_00b.ip.dns.name_server', 'pybind.slxos.v16r_1_00b.brocade_common_def', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = []
    bindings_keyval = {'kwargs_key_name': u'name_server', 'keyval': 'name_server_ip', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, name_server=name_server)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def ip_extcommunity_list_delete(self, extcommunity_list=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		NOS: 6.0.2b, 7.0.1a, 7.1.0    

	**This Instance Keyword Arg Tuple**:
		:param extcommunity_list: kwarg tuple.
		:type extcommunity_list: (extcommunity_list_num, ext_community_action, ext_community_expr).

		:param extcommunity_list_num: tuple arg.
		:type extcommunity_list_num: (int)
		
		.. note::
			* range - ['0..65535']

		:param ext_community_action: tuple arg.
		:type ext_community_action: (unicode)
		
		.. note::
			* enum - [u'receive', u'send']

		:param ext_community_expr: Ext-community-list
		:type ext_community_expr: (unicode)
		
		.. note::
			* pattern - (\s*)|(\s*((rt)|(soo)|((([1-9][0-9]{0,8})|([1-3][0-9]{9})|(4[0-1][0-9]{8})|(42[0-8][0-9]{7})|(429[0-3][0-9]{6})|(4294[0-8][0-9]{5})|(42949[0-5][0-9]{4})|(429496[0-6][0-9]{3})|(4294967[0-1][0-9]{2})|(42949672[0-8][0-9])|(429496729[0-5])):(([1-9][0-9]{0,8})|([1-3][0-9]{9})|(4[0-1][0-9]{8})|(42[0-8][0-9]{7})|(429[0-3][0-9]{6})|(4294[0-8][0-9]{5})|(42949[0-5][0-9]{4})|(429496[0-6][0-9]{3})|(4294967[0-1][0-9]{2})|(42949672[0-8][0-9])|(429496729[0-5])))|((([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5]):(([1-9][0-9]{0,8})|([1-3][0-9]{9})|(4[0-1][0-9]{8})|(42[0-8][0-9]{7})|(429[0-3][0-9]{6})|(4294[0-8][0-9]{5})|(42949[0-5][0-9]{4})|(429496[0-6][0-9]{3})|(4294967[0-1][0-9]{2})|(42949672[0-8][0-9])|(429496729[0-5])))))((\s+((rt)|(soo)|((([1-9][0-9]{0,8})|([1-3][0-9]{9})|(4[0-1][0-9]{8})|(42[0-8][0-9]{7})|(429[0-3][0-9]{6})|(4294[0-8][0-9]{5})|(42949[0-5][0-9]{4})|(429496[0-6][0-9]{3})|(4294967[0-1][0-9]{2})|(42949672[0-8][0-9])|(429496729[0-5])):(([1-9][0-9]{0,8})|([1-3][0-9]{9})|(4[0-1][0-9]{8})|(42[0-8][0-9]{7})|(429[0-3][0-9]{6})|(4294[0-8][0-9]{5})|(42949[0-5][0-9]{4})|(429496[0-6][0-9]{3})|(4294967[0-1][0-9]{2})|(42949672[0-8][0-9])|(429496729[0-5])))|(((([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])):(([1-9][0-9]{0,8})|([1-3][0-9]{9})|(4[0-1][0-9]{8})|(42[0-8][0-9]{7})|(429[0-3][0-9]{6})|(4294[0-8][0-9]{5})|(42949[0-5][0-9]{4})|(429496[0-6][0-9]{3})|(4294967[0-1][0-9]{2})|(42949672[0-8][0-9])|(429496729[0-5])))))*)

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = []
    bindings_list = [('pybind.nos.v6_0_2b.ip.hide_ext_community_list_holder.extcommunity_list', 'pybind.nos.v6_0_2b.brocade_common_def', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.ip.hide_ext_community_list_holder.extcommunity_list', 'pybind.nos.v7_0_1a.brocade_common_def', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.ip.hide_ext_community_list_holder.extcommunity_list', 'pybind.nos.v7_1_0.brocade_common_def', 'pybind.nos.v7_1_0')]
    composed_child_list = []
    compositions_keyval_list = []
    bindings_keyval = {'kwargs_key_name': u'extcommunity_list', 'keyval': 'extcommunity_list_num', 'extra_keyval': 'extcommunity_list_num, ext_community_action, ext_community_expr'}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, extcommunity_list=extcommunity_list)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def ip_extcommunity_list_standard_delete(self, standard=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		SLXOS: 16r.1.00b    

	**This Instance Keyword Arg Tuple**:
		:param standard: kwarg tuple.
		:type standard: (extcommunity_list_name, ext_community_action, ext_community_expr).

		:param extcommunity_list_name: tuple arg.
		:type extcommunity_list_name: (unicode)

		:param ext_community_action: tuple arg.
		:type ext_community_action: (unicode)
		
		.. note::
			* enum - [u'receive', u'send']

		:param ext_community_expr: Ext-community-list
		:type ext_community_expr: (unicode)
		
		.. note::
			* pattern - (\s*)|(\s*((rt)|(soo)|((([1-9][0-9]{0,8})|([1-3][0-9]{9})|(4[0-1][0-9]{8})|(42[0-8][0-9]{7})|(429[0-3][0-9]{6})|(4294[0-8][0-9]{5})|(42949[0-5][0-9]{4})|(429496[0-6][0-9]{3})|(4294967[0-1][0-9]{2})|(42949672[0-8][0-9])|(429496729[0-5])):(([1-9][0-9]{0,8})|([1-3][0-9]{9})|(4[0-1][0-9]{8})|(42[0-8][0-9]{7})|(429[0-3][0-9]{6})|(4294[0-8][0-9]{5})|(42949[0-5][0-9]{4})|(429496[0-6][0-9]{3})|(4294967[0-1][0-9]{2})|(42949672[0-8][0-9])|(429496729[0-5])))|((([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5]):(([1-9][0-9]{0,8})|([1-3][0-9]{9})|(4[0-1][0-9]{8})|(42[0-8][0-9]{7})|(429[0-3][0-9]{6})|(4294[0-8][0-9]{5})|(42949[0-5][0-9]{4})|(429496[0-6][0-9]{3})|(4294967[0-1][0-9]{2})|(42949672[0-8][0-9])|(429496729[0-5])))))((\s+((rt)|(soo)|((([1-9][0-9]{0,8})|([1-3][0-9]{9})|(4[0-1][0-9]{8})|(42[0-8][0-9]{7})|(429[0-3][0-9]{6})|(4294[0-8][0-9]{5})|(42949[0-5][0-9]{4})|(429496[0-6][0-9]{3})|(4294967[0-1][0-9]{2})|(42949672[0-8][0-9])|(429496729[0-5])):(([1-9][0-9]{0,8})|([1-3][0-9]{9})|(4[0-1][0-9]{8})|(42[0-8][0-9]{7})|(429[0-3][0-9]{6})|(4294[0-8][0-9]{5})|(42949[0-5][0-9]{4})|(429496[0-6][0-9]{3})|(4294967[0-1][0-9]{2})|(42949672[0-8][0-9])|(429496729[0-5])))|(((([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])):(([1-9][0-9]{0,8})|([1-3][0-9]{9})|(4[0-1][0-9]{8})|(42[0-8][0-9]{7})|(429[0-3][0-9]{6})|(4294[0-8][0-9]{5})|(42949[0-5][0-9]{4})|(429496[0-6][0-9]{3})|(4294967[0-1][0-9]{2})|(42949672[0-8][0-9])|(429496729[0-5])))))*)

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = []
    bindings_list = [('pybind.slxos.v16r_1_00b.ip.hide_ext_community_list_holder.extcommunity_list.standard', 'pybind.slxos.v16r_1_00b.brocade_common_def', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = []
    bindings_keyval = {'kwargs_key_name': u'standard', 'keyval': 'extcommunity_list_name', 'extra_keyval': 'extcommunity_list_name, ext_community_action, ext_community_expr'}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, standard=standard)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def ip_igmp_ssm_map_delete(self, igmps_prefix_list=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		SLXOS: 16r.1.00b    

	**This Instance Keyword Arg Tuple**:
		:param igmps_prefix_list: kwarg tuple.
		:type igmps_prefix_list: (igmps_prefix_list_name, igmps_prefix_src_addr).

		:param igmps_prefix_list_name: ASCII string    Access-list name or number
		:type igmps_prefix_list_name: (unicode)

		:param igmps_prefix_src_addr: A.B.C.D     Source address
		:type igmps_prefix_src_addr: (unicode)
		
		.. note::
			* pattern - (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = []
    bindings_list = [('pybind.slxos.v16r_1_00b.igmp_snooping.ip.igmp.ssm_map.igmps_prefix_list', 'pybind.slxos.v16r_1_00b.brocade_igmp_snooping', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = []
    bindings_keyval = {'kwargs_key_name': u'igmps_prefix_list', 'keyval': 'igmps_prefix_list_name, igmps_prefix_src_addr', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, igmps_prefix_list=igmps_prefix_list)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def ip_import_routes_delete(self, routes=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		SLXOS: 16r.1.00b    

	**This Instance Keyword Arg Tuple**:
		:param routes: kwarg tuple.
		:type routes: (src_vrf, route_map).

		:param src_vrf: ASCII string;;Name of VRF
		:type src_vrf: (unicode)
		
		.. note::
			* length - [u'1..32']
			* pattern - ((([a-zA-Z0-9_]([a-zA-Z0-9\-_]){0,61})?[a-zA-Z0-9]\.)*([a-zA-Z0-9_]([a-zA-Z0-9\-_]){0,61})?[a-zA-Z0-9]\.?)|\.

		:param route_map: Word:1-63;;Route map name
		:type route_map: (unicode)
		
		.. note::
			* pattern - [a-zA-Z]{1}([-a-zA-Z0-9\.\\\\@#\+\*\(\)=\{~\}%<>=$_\[\]\|]{0,62})

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = []
    bindings_list = [('pybind.slxos.v16r_1_00b.ip.rtm_config.import_.routes', 'pybind.slxos.v16r_1_00b.brocade_common_def', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = []
    bindings_keyval = {'kwargs_key_name': u'routes', 'keyval': 'src_vrf, route_map', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, routes=routes)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def ip_prefix_list_delete(self, prefix_list=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		NOS: 6.0.2b, 7.0.1a, 7.1.0
		SLXOS: 16r.1.00b    

	**This Instance Keyword Arg Tuple**:
		:param prefix_list: kwarg tuple.
		:type prefix_list: (name, seq_keyword, instance, action_ipp, prefix_ipp, ge_ipp, le_ipp).

		:param name: tuple arg.
		:type name: (unicode)
		
		.. note::
			* pattern - [a-zA-Z]{1}([-a-zA-Z0-9\.\\\\@#\+\*\(\)=\{~\}%<>=$_\[\]\|]{0,31})

		:param seq_keyword: tuple arg.
		:type seq_keyword: (unicode)
		
		.. note::
			* enum - [u'seq']

		:param instance: tuple arg.
		:type instance: (int)
		
		.. note::
			* range - ['0..65535']

		:param action_ipp: tuple arg.
		:type action_ipp: (unicode)
		
		.. note::
			* enum - [u'receive', u'send']

		:param prefix_ipp: tuple arg.
		:type prefix_ipp: (unicode)
		
		.. note::
			* pattern - (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])/(([0-9])|([1-2][0-9])|(3[0-2]))

		:param ge_ipp: Minimum IP prefix length.
		:type ge_ipp: (long)
		
		.. note::
			* range - ['0..4294967295']

		:param le_ipp: Maximum IP prefix length.
		:type le_ipp: (long)
		
		.. note::
			* range - ['0..4294967295']

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = []
    bindings_list = [('pybind.nos.v6_0_2b.ip.hide_prefix_holder.prefix_list', 'pybind.nos.v6_0_2b.brocade_common_def', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.ip.hide_prefix_holder.prefix_list', 'pybind.nos.v7_0_1a.brocade_common_def', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.ip.hide_prefix_holder.prefix_list', 'pybind.nos.v7_1_0.brocade_common_def', 'pybind.nos.v7_1_0'), ('pybind.slxos.v16r_1_00b.ip.hide_prefix_holder.prefix_list', 'pybind.slxos.v16r_1_00b.brocade_common_def', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = []
    bindings_keyval = {'kwargs_key_name': u'prefix_list', 'keyval': 'name, seq_keyword, instance', 'extra_keyval': 'name, seq_keyword, instance, action_ipp, prefix_ipp, ge_ipp, le_ipp'}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, prefix_list=prefix_list)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def ip_receive_access_group_delete(self, access_group=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		SLXOS: 16r.1.00b    

	**This Instance Keyword Arg Tuple**:
		:param access_group: kwarg tuple.
		:type access_group: (acl_name).

		:param acl_name: ACL_NAME;; Access List Name (Max 63)
		:type acl_name: (unicode)
		
		.. note::
			* length - [u'1..63']
			* pattern - [a-zA-Z0-9]{1}([-a-zA-Z0-9_]{0,62})

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = []
    bindings_list = [('pybind.slxos.v16r_1_00b.routing_system.ip.receive.access_group', 'pybind.slxos.v16r_1_00b.brocade_common_def', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = []
    bindings_keyval = {'kwargs_key_name': u'access_group', 'keyval': 'acl_name', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, access_group=access_group)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def ip_route_delete(self, static_route_nh_vrf=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		NOS: 6.0.2b, 7.0.1a, 7.1.0
		SLXOS: 16r.1.00b    

	**This Instance Keyword Arg Tuple**:
		:param static_route_nh_vrf: kwarg tuple.
		:type static_route_nh_vrf: (static_route_next_vrf_dest, next_hop_vrf, static_route_next_hop).

		:param static_route_next_vrf_dest: A.B.C.D/L ;; Destination IP address
		:type static_route_next_vrf_dest: (unicode)
		
		.. note::
			* pattern - (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])/(([0-9])|([1-2][0-9])|(3[0-2]))

		:param next_hop_vrf: Next Hop Vrf Name
		:type next_hop_vrf: (unicode)

		:param static_route_next_hop: A.B.C.D ;; Next hop IP address
		:type static_route_next_hop: (unicode)
		
		.. note::
			* pattern - (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = []
    bindings_list = [('pybind.nos.v6_0_2b.ip.rtm_config.route.static_route_nh_vrf', 'pybind.nos.v6_0_2b.brocade_common_def', 'pybind.nos.v6_0_2b'), ('pybind.nos.v6_0_2b.ip.rtm_config.route.static_route_oif_vrf', 'pybind.nos.v6_0_2b.brocade_common_def', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.ip.rtm_config.route.static_route_nh_vrf', 'pybind.nos.v7_0_1a.brocade_common_def', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_0_1a.ip.rtm_config.route.static_route_oif_vrf', 'pybind.nos.v7_0_1a.brocade_common_def', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.ip.rtm_config.route.static_route_nh_vrf', 'pybind.nos.v7_1_0.brocade_common_def', 'pybind.nos.v7_1_0'), ('pybind.nos.v7_1_0.ip.rtm_config.route.static_route_oif_vrf', 'pybind.nos.v7_1_0.brocade_common_def', 'pybind.nos.v7_1_0'), ('pybind.slxos.v16r_1_00b.ip.rtm_config.route.static_route_nh_vrf', 'pybind.slxos.v16r_1_00b.brocade_common_def', 'pybind.slxos.v16r_1_00b'), ('pybind.slxos.v16r_1_00b.ip.rtm_config.route.static_route_oif_vrf', 'pybind.slxos.v16r_1_00b.brocade_common_def', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = []
    bindings_keyval = {'kwargs_key_name': u'static_route_oif_vrf', 'keyval': 'static_route_next_vrf_dest, next_hop_vrf, static_route_oif_type, static_route_oif_name', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, static_route_nh_vrf=static_route_nh_vrf)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def ip_route_static_bfd_delete(self, bfd_static_route=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		NOS: 6.0.2b, 7.0.1a, 7.1.0
		SLXOS: 16r.1.00b    

	**This Instance Keyword Arg Tuple**:
		:param bfd_static_route: kwarg tuple.
		:type bfd_static_route: (bfd_static_route_dest, bfd_static_route_src).

		:param bfd_static_route_dest: A.B.C.D ;; Destination IP address
		:type bfd_static_route_dest: (unicode)
		
		.. note::
			* pattern - (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?

		:param bfd_static_route_src: A.B.C.D ;; Source IP address
		:type bfd_static_route_src: (unicode)
		
		.. note::
			* pattern - (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = []
    bindings_list = [('pybind.nos.v6_0_2b.ip.rtm_config.route.static.bfd.bfd_static_route', 'pybind.nos.v6_0_2b.brocade_common_def', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.ip.rtm_config.route.static.bfd.bfd_static_route', 'pybind.nos.v7_0_1a.brocade_common_def', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.ip.rtm_config.route.static.bfd.bfd_static_route', 'pybind.nos.v7_1_0.brocade_common_def', 'pybind.nos.v7_1_0'), ('pybind.slxos.v16r_1_00b.ip.rtm_config.route.static.bfd.bfd_static_route', 'pybind.slxos.v16r_1_00b.brocade_common_def', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = []
    bindings_keyval = {'kwargs_key_name': u'bfd_static_route', 'keyval': 'bfd_static_route_dest, bfd_static_route_src', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, bfd_static_route=bfd_static_route)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def ipv6_access_list_extended_delete(self, extended=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		NOS: 6.0.2b, 7.0.1a, 7.1.0
		SLXOS: 16r.1.00b    

	**This Instance Keyword Arg Tuple**:
		:param extended: kwarg tuple.
		:type extended: (name).

		:param name: tuple arg.
		:type name: (unicode)
		
		.. note::
			* length - [u'1..63']
			* pattern - [a-zA-Z0-9]{1}([-a-zA-Z0-9_]{0,62})

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = []
    bindings_list = [('pybind.nos.v6_0_2b.ipv6_acl.ipv6.access_list.extended', 'pybind.nos.v6_0_2b.brocade_ipv6_access_list', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.ipv6_acl.ipv6.access_list.extended', 'pybind.nos.v7_0_1a.brocade_ipv6_access_list', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.ipv6_acl.ipv6.access_list.extended', 'pybind.nos.v7_1_0.brocade_ipv6_access_list', 'pybind.nos.v7_1_0'), ('pybind.slxos.v16r_1_00b.ipv6_acl.ipv6.access_list.extended', 'pybind.slxos.v16r_1_00b.brocade_ipv6_access_list', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = []
    bindings_keyval = {'kwargs_key_name': u'extended', 'keyval': 'name', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, extended=extended)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def ipv6_access_list_extended_seq_delete(self, extended=None, seq=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		NOS: 6.0.2b, 7.0.1a, 7.1.0
		SLXOS: 16r.1.00b    

	**Parent Instance Keyword Arg Tuple(s)**:
		:param extended: kwarg tuple.
		:type extended: (name).

		:param name: tuple arg.
		:type name: (unicode)
		
		.. note::
			* length - [u'1..63']
			* pattern - [a-zA-Z0-9]{1}([-a-zA-Z0-9_]{0,62})

	**This Instance Keyword Arg Tuple**:
		:param seq: kwarg tuple.
		:type seq: (seq_id, action, protocol_type, src_host_any_sip, src_host_ip, src_mask, sport, sport_number_eq_neq_tcp, sport_number_lt_tcp, sport_number_gt_tcp, sport_number_eq_neq_udp, sport_number_lt_udp, sport_number_gt_udp, sport_number_range_lower_tcp, sport_number_range_lower_udp, sport_number_range_higher_tcp, sport_number_range_higher_udp, dst_host_any_dip, dst_host_ip, dst_mask, dport, dport_number_eq_neq_tcp, dport_number_lt_tcp, dport_number_gt_tcp, dport_number_eq_neq_udp, dport_number_lt_udp, dport_number_gt_udp, dport_number_range_lower_tcp, dport_number_range_lower_udp, dport_number_range_higher_tcp, dport_number_range_higher_udp, dscp, urg, ack, push, fin, rst, sync, vlan, count, log).

		:param seq_id: tuple arg.
		:type seq_id: (long)
		
		.. note::
			* range - ['0..18446744073709551615']

		:param action: tuple arg.
		:type action: (unicode)
		
		.. note::
			* enum - [u'deny', u'hard-drop', u'permit']

		:param protocol_type: tuple arg.
		:type protocol_type: (unicode)
		
		.. note::
			* enum - [u'udp', u'ipv6-icmp', u'tcp', u'ipv6']

		:param src_host_any_sip: tuple arg.
		:type src_host_any_sip: (unicode)
		
		.. note::
			* enum - [u'host', u'any']

		:param src_host_ip: tuple arg.
		:type src_host_ip: (unicode)
		
		.. note::
			* pattern - (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?

		:param src_mask: tuple arg.
		:type src_mask: (unicode)
		
		.. note::
			* pattern - (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?

		:param sport: tuple arg.
		:type sport: (unicode)
		
		.. note::
			* enum - [u'lt', u'gt', u'eq', u'range', u'neq']

		:param sport_number_eq_neq_tcp: tuple arg.
		:type sport_number_eq_neq_tcp: (unicode)
		
		.. note::
			* enum - [u'ftp', u'domain', u'tacacs', u'hostname', u'smtp', u'www', u'telnet', u'echo', u'bgp', u'syslog', u'ftp-data', u'daytime', u'time', u'pim-auto-rp', u'login', u'talk']

		:param sport_number_lt_tcp: tuple arg.
		:type sport_number_lt_tcp: (unicode)
		
		.. note::
			* enum - [u'ftp', u'domain', u'tacacs', u'hostname', u'smtp', u'www', u'telnet', u'echo', u'bgp', u'syslog', u'ftp-data', u'daytime', u'time', u'pim-auto-rp', u'login', u'talk']

		:param sport_number_gt_tcp: tuple arg.
		:type sport_number_gt_tcp: (unicode)
		
		.. note::
			* enum - [u'ftp', u'domain', u'tacacs', u'hostname', u'smtp', u'www', u'telnet', u'echo', u'bgp', u'syslog', u'ftp-data', u'daytime', u'time', u'pim-auto-rp', u'login', u'talk']

		:param sport_number_eq_neq_udp: tuple arg.
		:type sport_number_eq_neq_udp: (unicode)
		
		.. note::
			* enum - [u'domain', u'ntp', u'rip', u'echo', u'syslog', u'pim-auto-rp', u'tacacs', u'snmp', u'bootps', u'tftp', u'bootpc']

		:param sport_number_lt_udp: tuple arg.
		:type sport_number_lt_udp: (unicode)
		
		.. note::
			* enum - [u'domain', u'ntp', u'rip', u'echo', u'syslog', u'pim-auto-rp', u'tacacs', u'snmp', u'bootps', u'tftp', u'bootpc']

		:param sport_number_gt_udp: tuple arg.
		:type sport_number_gt_udp: (unicode)
		
		.. note::
			* enum - [u'domain', u'ntp', u'rip', u'echo', u'syslog', u'pim-auto-rp', u'tacacs', u'snmp', u'bootps', u'tftp', u'bootpc']

		:param sport_number_range_lower_tcp: tuple arg.
		:type sport_number_range_lower_tcp: (unicode)
		
		.. note::
			* enum - [u'ftp', u'domain', u'tacacs', u'hostname', u'smtp', u'www', u'telnet', u'echo', u'bgp', u'syslog', u'ftp-data', u'daytime', u'time', u'pim-auto-rp', u'login', u'talk']

		:param sport_number_range_lower_udp: tuple arg.
		:type sport_number_range_lower_udp: (unicode)
		
		.. note::
			* enum - [u'domain', u'ntp', u'rip', u'echo', u'syslog', u'pim-auto-rp', u'tacacs', u'snmp', u'bootps', u'tftp', u'bootpc']

		:param sport_number_range_higher_tcp: tuple arg.
		:type sport_number_range_higher_tcp: (unicode)
		
		.. note::
			* enum - [u'ftp', u'domain', u'tacacs', u'hostname', u'smtp', u'www', u'telnet', u'echo', u'bgp', u'syslog', u'ftp-data', u'daytime', u'time', u'pim-auto-rp', u'login', u'talk']

		:param sport_number_range_higher_udp: tuple arg.
		:type sport_number_range_higher_udp: (unicode)
		
		.. note::
			* enum - [u'domain', u'ntp', u'rip', u'echo', u'syslog', u'pim-auto-rp', u'tacacs', u'snmp', u'bootps', u'tftp', u'bootpc']

		:param dst_host_any_dip: tuple arg.
		:type dst_host_any_dip: (unicode)
		
		.. note::
			* enum - [u'host', u'any']

		:param dst_host_ip: tuple arg.
		:type dst_host_ip: (unicode)
		
		.. note::
			* pattern - (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?

		:param dst_mask: tuple arg.
		:type dst_mask: (unicode)
		
		.. note::
			* pattern - (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?

		:param dport: tuple arg.
		:type dport: (unicode)
		
		.. note::
			* enum - [u'lt', u'gt', u'eq', u'range', u'neq']

		:param dport_number_eq_neq_tcp: tuple arg.
		:type dport_number_eq_neq_tcp: (unicode)
		
		.. note::
			* enum - [u'ftp', u'domain', u'tacacs', u'hostname', u'smtp', u'www', u'telnet', u'echo', u'bgp', u'syslog', u'ftp-data', u'daytime', u'time', u'pim-auto-rp', u'login', u'talk']

		:param dport_number_lt_tcp: tuple arg.
		:type dport_number_lt_tcp: (unicode)
		
		.. note::
			* enum - [u'ftp', u'domain', u'tacacs', u'hostname', u'smtp', u'www', u'telnet', u'echo', u'bgp', u'syslog', u'ftp-data', u'daytime', u'time', u'pim-auto-rp', u'login', u'talk']

		:param dport_number_gt_tcp: tuple arg.
		:type dport_number_gt_tcp: (unicode)
		
		.. note::
			* enum - [u'ftp', u'domain', u'tacacs', u'hostname', u'smtp', u'www', u'telnet', u'echo', u'bgp', u'syslog', u'ftp-data', u'daytime', u'time', u'pim-auto-rp', u'login', u'talk']

		:param dport_number_eq_neq_udp: tuple arg.
		:type dport_number_eq_neq_udp: (unicode)
		
		.. note::
			* enum - [u'domain', u'ntp', u'rip', u'echo', u'syslog', u'pim-auto-rp', u'tacacs', u'snmp', u'bootps', u'tftp', u'bootpc']

		:param dport_number_lt_udp: tuple arg.
		:type dport_number_lt_udp: (unicode)
		
		.. note::
			* enum - [u'domain', u'ntp', u'rip', u'echo', u'syslog', u'pim-auto-rp', u'tacacs', u'snmp', u'bootps', u'tftp', u'bootpc']

		:param dport_number_gt_udp: tuple arg.
		:type dport_number_gt_udp: (unicode)
		
		.. note::
			* enum - [u'domain', u'ntp', u'rip', u'echo', u'syslog', u'pim-auto-rp', u'tacacs', u'snmp', u'bootps', u'tftp', u'bootpc']

		:param dport_number_range_lower_tcp: tuple arg.
		:type dport_number_range_lower_tcp: (unicode)
		
		.. note::
			* enum - [u'ftp', u'domain', u'tacacs', u'hostname', u'smtp', u'www', u'telnet', u'echo', u'bgp', u'syslog', u'ftp-data', u'daytime', u'time', u'pim-auto-rp', u'login', u'talk']

		:param dport_number_range_lower_udp: tuple arg.
		:type dport_number_range_lower_udp: (unicode)
		
		.. note::
			* enum - [u'domain', u'ntp', u'rip', u'echo', u'syslog', u'pim-auto-rp', u'tacacs', u'snmp', u'bootps', u'tftp', u'bootpc']

		:param dport_number_range_higher_tcp: tuple arg.
		:type dport_number_range_higher_tcp: (unicode)
		
		.. note::
			* enum - [u'ftp', u'domain', u'tacacs', u'hostname', u'smtp', u'www', u'telnet', u'echo', u'bgp', u'syslog', u'ftp-data', u'daytime', u'time', u'pim-auto-rp', u'login', u'talk']

		:param dport_number_range_higher_udp: tuple arg.
		:type dport_number_range_higher_udp: (unicode)
		
		.. note::
			* enum - [u'domain', u'ntp', u'rip', u'echo', u'syslog', u'pim-auto-rp', u'tacacs', u'snmp', u'bootps', u'tftp', u'bootpc']

		:param dscp: Differentiated Service Code Point
		:type dscp: (unicode)
		
		.. note::
			* enum - [u'af23', u'af22', u'af21', u'af33', u'af41', u'af43', u'af31', u'default', u'af42', u'af12', u'af32', u'af13', u'cs6', u'cs2', u'cs5', u'cs4', u'cs7', u'af11', u'cs1', u'cs3', u'ef']

		:param urg: Urgent
		:type urg: (YANGBool)

		:param ack: Acknowledgement
		:type ack: (YANGBool)

		:param push: Push
		:type push: (YANGBool)

		:param fin: No more data
		:type fin: (YANGBool)

		:param rst: Reset connection
		:type rst: (YANGBool)

		:param sync: Synchronize
		:type sync: (YANGBool)

		:param vlan: Vlan
		:type vlan: (long)
		
		.. note::
			* range - ['0..4294967295']

		:param count: Packet Count
		:type count: (YANGBool)

		:param log: Log Packet
		:type log: (YANGBool)

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = [('pybind.nos.v6_0_2b.ipv6_acl.ipv6.access_list.extended', u'extended'), ('pybind.nos.v7_0_1a.ipv6_acl.ipv6.access_list.extended', u'extended'), ('pybind.slxos.v16r_1_00b.ipv6_acl.ipv6.access_list.extended', u'extended'), ('pybind.nos.v7_1_0.ipv6_acl.ipv6.access_list.extended', u'extended')]
    bindings_list = [('pybind.nos.v6_0_2b.ipv6_acl.ipv6.access_list.extended.seq', 'pybind.nos.v6_0_2b.brocade_ipv6_access_list', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.ipv6_acl.ipv6.access_list.extended.seq', 'pybind.nos.v7_0_1a.brocade_ipv6_access_list', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.ipv6_acl.ipv6.access_list.extended.seq', 'pybind.nos.v7_1_0.brocade_ipv6_access_list', 'pybind.nos.v7_1_0'), ('pybind.slxos.v16r_1_00b.ipv6_acl.ipv6.access_list.extended.seq', 'pybind.slxos.v16r_1_00b.brocade_ipv6_access_list', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'seq', 'keyval': 'seq_id', 'extra_keyval': 'seq_id, action, protocol_type, src_host_any_sip, src_host_ip, src_mask, sport, sport_number_eq_neq_tcp, sport_number_lt_tcp, sport_number_gt_tcp, sport_number_eq_neq_udp, sport_number_lt_udp, sport_number_gt_udp, sport_number_range_lower_tcp, sport_number_range_lower_udp, sport_number_range_higher_tcp, sport_number_range_higher_udp, dst_host_any_dip, dst_host_ip, dst_mask, dport, dport_number_eq_neq_tcp, dport_number_lt_tcp, dport_number_gt_tcp, dport_number_eq_neq_udp, dport_number_lt_udp, dport_number_gt_udp, dport_number_range_lower_tcp, dport_number_range_lower_udp, dport_number_range_higher_tcp, dport_number_range_higher_udp, dscp, urg, ack, push, fin, rst, sync, vlan, count, log'}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, extended=extended, seq=seq)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def ipv6_access_list_standard_delete(self, standard=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		NOS: 6.0.2b, 7.0.1a, 7.1.0
		SLXOS: 16r.1.00b    

	**This Instance Keyword Arg Tuple**:
		:param standard: kwarg tuple.
		:type standard: (name).

		:param name: tuple arg.
		:type name: (unicode)
		
		.. note::
			* length - [u'1..63']
			* pattern - [a-zA-Z0-9]{1}([-a-zA-Z0-9_]{0,62})

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = []
    bindings_list = [('pybind.nos.v6_0_2b.ipv6_acl.ipv6.access_list.standard', 'pybind.nos.v6_0_2b.brocade_ipv6_access_list', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.ipv6_acl.ipv6.access_list.standard', 'pybind.nos.v7_0_1a.brocade_ipv6_access_list', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.ipv6_acl.ipv6.access_list.standard', 'pybind.nos.v7_1_0.brocade_ipv6_access_list', 'pybind.nos.v7_1_0'), ('pybind.slxos.v16r_1_00b.ipv6_acl.ipv6.access_list.standard', 'pybind.slxos.v16r_1_00b.brocade_ipv6_access_list', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = []
    bindings_keyval = {'kwargs_key_name': u'standard', 'keyval': 'name', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, standard=standard)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def ipv6_access_list_standard_seq_delete(self, standard=None, seq=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		NOS: 6.0.2b, 7.0.1a, 7.1.0
		SLXOS: 16r.1.00b    

	**Parent Instance Keyword Arg Tuple(s)**:
		:param standard: kwarg tuple.
		:type standard: (name).

		:param name: tuple arg.
		:type name: (unicode)
		
		.. note::
			* length - [u'1..63']
			* pattern - [a-zA-Z0-9]{1}([-a-zA-Z0-9_]{0,62})

	**This Instance Keyword Arg Tuple**:
		:param seq: kwarg tuple.
		:type seq: (seq_id, action, src_host_any_sip, src_host_ip, src_mask, count, log).

		:param seq_id: tuple arg.
		:type seq_id: (long)
		
		.. note::
			* range - ['0..18446744073709551615']

		:param action: tuple arg.
		:type action: (unicode)
		
		.. note::
			* enum - [u'deny', u'hard-drop', u'permit']

		:param src_host_any_sip: tuple arg.
		:type src_host_any_sip: (unicode)
		
		.. note::
			* enum - [u'host', u'any']

		:param src_host_ip: tuple arg.
		:type src_host_ip: (unicode)
		
		.. note::
			* pattern - (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?

		:param src_mask: tuple arg.
		:type src_mask: (unicode)
		
		.. note::
			* pattern - (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?

		:param count: Packet count
		:type count: (YANGBool)

		:param log: Log Packet
		:type log: (YANGBool)

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = [('pybind.nos.v6_0_2b.ipv6_acl.ipv6.access_list.standard', u'standard'), ('pybind.nos.v7_1_0.ipv6_acl.ipv6.access_list.standard', u'standard'), ('pybind.nos.v7_0_1a.ipv6_acl.ipv6.access_list.standard', u'standard'), ('pybind.slxos.v16r_1_00b.ipv6_acl.ipv6.access_list.standard', u'standard')]
    bindings_list = [('pybind.nos.v6_0_2b.ipv6_acl.ipv6.access_list.standard.seq', 'pybind.nos.v6_0_2b.brocade_ipv6_access_list', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.ipv6_acl.ipv6.access_list.standard.seq', 'pybind.nos.v7_0_1a.brocade_ipv6_access_list', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.ipv6_acl.ipv6.access_list.standard.seq', 'pybind.nos.v7_1_0.brocade_ipv6_access_list', 'pybind.nos.v7_1_0'), ('pybind.slxos.v16r_1_00b.ipv6_acl.ipv6.access_list.standard.seq', 'pybind.slxos.v16r_1_00b.brocade_ipv6_access_list', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'seq', 'keyval': 'seq_id', 'extra_keyval': 'seq_id, action, src_host_any_sip, src_host_ip, src_mask, count, log, copy_sflow'}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, standard=standard, seq=seq)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def ipv6_import_routes_delete(self, routes=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		SLXOS: 16r.1.00b    

	**This Instance Keyword Arg Tuple**:
		:param routes: kwarg tuple.
		:type routes: (src_vrf, route_map).

		:param src_vrf: ASCII string;;Name of VRF
		:type src_vrf: (unicode)
		
		.. note::
			* length - [u'1..32']
			* pattern - ((([a-zA-Z0-9_]([a-zA-Z0-9\-_]){0,61})?[a-zA-Z0-9]\.)*([a-zA-Z0-9_]([a-zA-Z0-9\-_]){0,61})?[a-zA-Z0-9]\.?)|\.

		:param route_map: Word:1-63;;Route map name
		:type route_map: (unicode)
		
		.. note::
			* pattern - [a-zA-Z]{1}([-a-zA-Z0-9\.\\\\@#\+\*\(\)=\{~\}%<>=$_\[\]\|]{0,62})

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = []
    bindings_list = [('pybind.slxos.v16r_1_00b.ipv6.import_.routes', 'pybind.slxos.v16r_1_00b.brocade_common_def', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = []
    bindings_keyval = {'kwargs_key_name': u'routes', 'keyval': 'src_vrf, route_map', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, routes=routes)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def ipv6_nd_ra_dns_server_delete(self, dns_server_global=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		SLXOS: 16r.1.00b    

	**This Instance Keyword Arg Tuple**:
		:param dns_server_global: kwarg tuple.
		:type dns_server_global: (dns_server_prefix_global).

		:param dns_server_prefix_global: tuple arg.
		:type dns_server_prefix_global: (unicode)
		
		.. note::
			* pattern - ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = []
    bindings_list = [('pybind.slxos.v16r_1_00b.ipv6.ipv6_global_cmds.nd_global.dns_server_global', 'pybind.slxos.v16r_1_00b.brocade_common_def', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = []
    bindings_keyval = {'kwargs_key_name': u'dns_server_global', 'keyval': 'dns_server_prefix_global', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, dns_server_global=dns_server_global)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def ipv6_nd_ra_domain_name_delete(self, domain_name_global=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		SLXOS: 16r.1.00b    

	**This Instance Keyword Arg Tuple**:
		:param domain_name_global: kwarg tuple.
		:type domain_name_global: (domain_name_string_global).

		:param domain_name_string_global: tuple arg.
		:type domain_name_string_global: (unicode)

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = []
    bindings_list = [('pybind.slxos.v16r_1_00b.ipv6.ipv6_global_cmds.nd_global.domain_name_global', 'pybind.slxos.v16r_1_00b.brocade_common_def', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = []
    bindings_keyval = {'kwargs_key_name': u'domain_name_global', 'keyval': 'domain_name_string_global', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, domain_name_global=domain_name_global)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def ipv6_prefix_list_delete(self, prefix_list=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		NOS: 6.0.2b, 7.0.1a, 7.1.0
		SLXOS: 16r.1.00b    

	**This Instance Keyword Arg Tuple**:
		:param prefix_list: kwarg tuple.
		:type prefix_list: (name, seq_keyword, instance, action_ipp, ipv6_prefix_ipp, ge_ipp, le_ipp).

		:param name: tuple arg.
		:type name: (unicode)
		
		.. note::
			* pattern - [a-zA-Z]{1}([-a-zA-Z0-9\.\\\\@#\+\*\(\)=\{~\}%<>=$_\[\]\|]{0,31})

		:param seq_keyword: tuple arg.
		:type seq_keyword: (unicode)
		
		.. note::
			* enum - [u'seq']

		:param instance: tuple arg.
		:type instance: (int)
		
		.. note::
			* range - ['0..65535']

		:param action_ipp: tuple arg.
		:type action_ipp: (unicode)
		
		.. note::
			* enum - [u'receive', u'send']

		:param ipv6_prefix_ipp: tuple arg.
		:type ipv6_prefix_ipp: (unicode)
		
		.. note::
			* pattern - ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(/(([0-9])|([0-9]{2})|(1[0-1][0-9])|(12[0-8])))

		:param ge_ipp: Minimum IPv6 prefix length.
		:type ge_ipp: (long)
		
		.. note::
			* range - ['0..4294967295']

		:param le_ipp: Maximum IPv6 prefix length.
		:type le_ipp: (long)
		
		.. note::
			* range - ['0..4294967295']

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = []
    bindings_list = [('pybind.nos.v6_0_2b.ipv6.hide_prefix_holder.prefix_list', 'pybind.nos.v6_0_2b.brocade_common_def', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.ipv6.hide_prefix_holder.prefix_list', 'pybind.nos.v7_0_1a.brocade_common_def', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.ipv6.hide_prefix_holder.prefix_list', 'pybind.nos.v7_1_0.brocade_common_def', 'pybind.nos.v7_1_0'), ('pybind.slxos.v16r_1_00b.routing_system.ipv6.prefix_list', 'pybind.slxos.v16r_1_00b.brocade_common_def', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = []
    bindings_keyval = {'kwargs_key_name': u'prefix_list', 'keyval': 'name, seq_keyword, instance', 'extra_keyval': 'name, seq_keyword, instance, action_ipp, ipv6_prefix_ipp, ge_ipp, le_ipp'}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, prefix_list=prefix_list)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def ipv6_receive_access_group_delete(self, access_group=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		SLXOS: 16r.1.00b    

	**This Instance Keyword Arg Tuple**:
		:param access_group: kwarg tuple.
		:type access_group: (acl_name).

		:param acl_name: ACL_NAME;; Access List Name (Max 63)
		:type acl_name: (unicode)
		
		.. note::
			* length - [u'1..63']
			* pattern - [a-zA-Z0-9]{1}([-a-zA-Z0-9_]{0,62})

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = []
    bindings_list = [('pybind.slxos.v16r_1_00b.routing_system.ipv6.receive.access_group', 'pybind.slxos.v16r_1_00b.brocade_common_def', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = []
    bindings_keyval = {'kwargs_key_name': u'access_group', 'keyval': 'acl_name', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, access_group=access_group)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def ipv6_route_delete(self, route=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		NOS: 6.0.2b, 7.0.1a, 7.1.0
		SLXOS: 16r.1.00b    

	**This Instance Keyword Arg Tuple**:
		:param route: kwarg tuple.
		:type route: (dest).

		:param dest: IPv6Address/prefix.;; Destination IPv6 address-prefix
		:type dest: (unicode)
		
		.. note::
			* pattern - ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(/(([0-9])|([0-9]{2})|(1[0-1][0-9])|(12[0-8])))

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = []
    bindings_list = [('pybind.nos.v6_0_2b.ipv6.ipv6route.route', 'pybind.nos.v6_0_2b.brocade_common_def', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.ipv6.ipv6route.route', 'pybind.nos.v7_0_1a.brocade_common_def', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.ipv6.ipv6route.route', 'pybind.nos.v7_1_0.brocade_common_def', 'pybind.nos.v7_1_0'), ('pybind.slxos.v16r_1_00b.ipv6.ipv6route.route', 'pybind.slxos.v16r_1_00b.brocade_common_def', 'pybind.slxos.v16r_1_00b'), ('pybind.slxos.v16r_1_00b.ipv6.route.ipv6_static_route_oif_vrf', 'pybind.slxos.v16r_1_00b.brocade_common_def', 'pybind.slxos.v16r_1_00b'), ('pybind.slxos.v16r_1_00b.ipv6.route.link_local_static_route_nh_vrf', 'pybind.slxos.v16r_1_00b.brocade_common_def', 'pybind.slxos.v16r_1_00b'), ('pybind.slxos.v16r_1_00b.ipv6.route.static_route_nh_vrf', 'pybind.slxos.v16r_1_00b.brocade_common_def', 'pybind.slxos.v16r_1_00b'), ('pybind.slxos.v16r_1_00b.ipv6.route.static_route_oif', 'pybind.slxos.v16r_1_00b.brocade_common_def', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = []
    bindings_keyval = {'kwargs_key_name': u'static_route_oif', 'keyval': 'static_route_dest, static_route_oif_type, static_route_oif_name', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, route=route)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def ipv6_route_static_bfd_delete(self, bfd_ipv6_link_local_static_route=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		SLXOS: 16r.1.00b    

	**This Instance Keyword Arg Tuple**:
		:param bfd_ipv6_link_local_static_route: kwarg tuple.
		:type bfd_ipv6_link_local_static_route: (bfd_ipv6_link_local_dest, bfd_ipv6_link_local_src, bfd_interface_type, bfd_interface_name).

		:param bfd_ipv6_link_local_dest: A:B::C:D ;; Destination IPv6 address
		:type bfd_ipv6_link_local_dest: (unicode)
		
		.. note::
			* pattern - ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?

		:param bfd_ipv6_link_local_src: A:B::C:D ;; Source IPv6 address
		:type bfd_ipv6_link_local_src: (unicode)
		
		.. note::
			* pattern - ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?

		:param bfd_interface_type: Outgoing interface type
		:type bfd_interface_type: (unicode)
		
		.. note::
			* enum - [u'ethernet', u'null', u've']

		:param bfd_interface_name: tuple arg.
		:type bfd_interface_name: (unicode)
		
		.. note::
			* length - [u'1..16']

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = []
    bindings_list = [('pybind.slxos.v16r_1_00b.ipv6.route.static.bfd.bfd_ipv6_link_local_static_route', 'pybind.slxos.v16r_1_00b.brocade_common_def', 'pybind.slxos.v16r_1_00b'), ('pybind.slxos.v16r_1_00b.ipv6.route.static.bfd.bfd_ipv6_static_route', 'pybind.slxos.v16r_1_00b.brocade_common_def', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = []
    bindings_keyval = {'kwargs_key_name': u'bfd_ipv6_static_route', 'keyval': 'bfd_ipv6_static_route_dest, bfd_ipv6_static_route_src', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, bfd_ipv6_link_local_static_route=bfd_ipv6_link_local_static_route)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def ipv6_router_ospf_delete(self, ospf=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		SLXOS: 16r.1.00b    

	**This Instance Keyword Arg Tuple**:
		:param ospf: kwarg tuple.
		:type ospf: (vrf).

		:param vrf: OSPF instance for the VRF 
		:type vrf: (unicode)
		
		.. note::
			* length - [u'1..32']
			* pattern - ((([a-zA-Z0-9_]([a-zA-Z0-9\-_]){0,61})?[a-zA-Z0-9]\.)*([a-zA-Z0-9_]([a-zA-Z0-9\-_]){0,61})?[a-zA-Z0-9]\.?)|\.

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = []
    bindings_list = [('pybind.slxos.v16r_1_00b.routing_system.ipv6.router.ospf', 'pybind.slxos.v16r_1_00b.brocade_common_def', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = []
    bindings_keyval = {'kwargs_key_name': u'ospf', 'keyval': 'vrf', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, ospf=ospf)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def ipv6_router_ospf_area_delete(self, ospf=None, area=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		SLXOS: 16r.1.00b    

	**Parent Instance Keyword Arg Tuple(s)**:
		:param ospf: kwarg tuple.
		:type ospf: (vrf).

		:param vrf: OSPF instance for the VRF 
		:type vrf: (unicode)
		
		.. note::
			* length - [u'1..32']
			* pattern - ((([a-zA-Z0-9_]([a-zA-Z0-9\-_]){0,61})?[a-zA-Z0-9]\.)*([a-zA-Z0-9_]([a-zA-Z0-9\-_]){0,61})?[a-zA-Z0-9]\.?)|\.

	**This Instance Keyword Arg Tuple**:
		:param area: kwarg tuple.
		:type area: (area_id).

		:param area_id: tuple arg.
		:type area_id: (unicode)
		
		.. note::
			* pattern - ((([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.)(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){2}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5]))|(([0-9])|([1-9]([0-9]{1,8}))|([1]([0-9]{1,9}))|([2][0]([0-9]{1,8}))|([2][1][0-3]([0-9]{1,7}))|([2][1][4][0-6]([0-9]{1,6}))|([2][1][4][7][0-3]([0-9]{1,5}))|([2][1][4][7][4][0-7]([0-9]{1,4}))|([2][1][4][7][4][8][0-2]([0-9]{1,3}))|([2][1][4][7][4][8][3][0-5]([0-9]{1,2}))|([2][1][4][7][4][8][3][6][0-3][0-9])|([2][1][4][7][4][8][3][6][4][0-7]))

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = [('pybind.slxos.v16r_1_00b.routing_system.ipv6.router.ospf', u'ospf')]
    bindings_list = [('pybind.slxos.v16r_1_00b.routing_system.ipv6.router.ospf.area', 'pybind.slxos.v16r_1_00b.brocade_common_def', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'vrf', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'area', 'keyval': 'area_id', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, ospf=ospf, area=area)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def ipv6_router_ospf_area_range_delete(self, ospf=None, area=None, area_range=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		SLXOS: 16r.1.00b    

	**Parent Instance Keyword Arg Tuple(s)**:
		:param ospf: kwarg tuple.
		:type ospf: (vrf).

		:param vrf: OSPF instance for the VRF 
		:type vrf: (unicode)
		
		.. note::
			* length - [u'1..32']
			* pattern - ((([a-zA-Z0-9_]([a-zA-Z0-9\-_]){0,61})?[a-zA-Z0-9]\.)*([a-zA-Z0-9_]([a-zA-Z0-9\-_]){0,61})?[a-zA-Z0-9]\.?)|\.

		:param area: kwarg tuple.
		:type area: (area_id).

		:param area_id: tuple arg.
		:type area_id: (unicode)
		
		.. note::
			* pattern - ((([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.)(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){2}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5]))|(([0-9])|([1-9]([0-9]{1,8}))|([1]([0-9]{1,9}))|([2][0]([0-9]{1,8}))|([2][1][0-3]([0-9]{1,7}))|([2][1][4][0-6]([0-9]{1,6}))|([2][1][4][7][0-3]([0-9]{1,5}))|([2][1][4][7][4][0-7]([0-9]{1,4}))|([2][1][4][7][4][8][0-2]([0-9]{1,3}))|([2][1][4][7][4][8][3][0-5]([0-9]{1,2}))|([2][1][4][7][4][8][3][6][0-3][0-9])|([2][1][4][7][4][8][3][6][4][0-7]))

	**This Instance Keyword Arg Tuple**:
		:param area_range: kwarg tuple.
		:type area_range: (range_address, range_effect, range_cost).

		:param range_address: A:B::C:D/LEN;; IPv6 address to match
		:type range_address: (unicode)
		
		.. note::
			* pattern - ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(/(([0-9])|([0-9]{2})|(1[0-1][0-9])|(12[0-8])))

		:param range_effect: Advertise/Do not advertise this type-3 summarization
		:type range_effect: (unicode)
		
		.. note::
			* enum - [u'advertise', u'not-advertise']

		:param range_cost: Configure area range cost
		:type range_cost: (long)
		
		.. note::
			* range - ['0..4294967295']

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = [('pybind.slxos.v16r_1_00b.routing_system.ipv6.router.ospf', u'ospf'), ('pybind.slxos.v16r_1_00b.routing_system.ipv6.router.ospf.area', u'area')]
    bindings_list = [('pybind.slxos.v16r_1_00b.routing_system.ipv6.router.ospf.area.area_range', 'pybind.slxos.v16r_1_00b.brocade_common_def', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'vrf', 'extra_keyval': ''}, {'keyval': 'area_id', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'area_range', 'keyval': 'range_address', 'extra_keyval': 'range_address, range_effect, range_cost'}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, ospf=ospf, area=area, area_range=area_range)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def ipv6_router_ospf_area_virtual_link_delete(self, ospf=None, area=None, virtual_link=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		SLXOS: 16r.1.00b    

	**Parent Instance Keyword Arg Tuple(s)**:
		:param ospf: kwarg tuple.
		:type ospf: (vrf).

		:param vrf: OSPF instance for the VRF 
		:type vrf: (unicode)
		
		.. note::
			* length - [u'1..32']
			* pattern - ((([a-zA-Z0-9_]([a-zA-Z0-9\-_]){0,61})?[a-zA-Z0-9]\.)*([a-zA-Z0-9_]([a-zA-Z0-9\-_]){0,61})?[a-zA-Z0-9]\.?)|\.

		:param area: kwarg tuple.
		:type area: (area_id).

		:param area_id: tuple arg.
		:type area_id: (unicode)
		
		.. note::
			* pattern - ((([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.)(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){2}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5]))|(([0-9])|([1-9]([0-9]{1,8}))|([1]([0-9]{1,9}))|([2][0]([0-9]{1,8}))|([2][1][0-3]([0-9]{1,7}))|([2][1][4][0-6]([0-9]{1,6}))|([2][1][4][7][0-3]([0-9]{1,5}))|([2][1][4][7][4][0-7]([0-9]{1,4}))|([2][1][4][7][4][8][0-2]([0-9]{1,3}))|([2][1][4][7][4][8][3][0-5]([0-9]{1,2}))|([2][1][4][7][4][8][3][6][0-3][0-9])|([2][1][4][7][4][8][3][6][4][0-7]))

	**This Instance Keyword Arg Tuple**:
		:param virtual_link: kwarg tuple.
		:type virtual_link: (virtual_link_neighbor).

		:param virtual_link_neighbor: tuple arg.
		:type virtual_link_neighbor: (unicode)
		
		.. note::
			* pattern - (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = [('pybind.slxos.v16r_1_00b.routing_system.ipv6.router.ospf', u'ospf'), ('pybind.slxos.v16r_1_00b.routing_system.ipv6.router.ospf.area', u'area')]
    bindings_list = [('pybind.slxos.v16r_1_00b.routing_system.ipv6.router.ospf.area.virtual_link', 'pybind.slxos.v16r_1_00b.brocade_common_def', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'vrf', 'extra_keyval': ''}, {'keyval': 'area_id', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'virtual_link', 'keyval': 'virtual_link_neighbor', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, ospf=ospf, area=area, virtual_link=virtual_link)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def ipv6_router_ospf_distance_delete(self, ospf=None, distance=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		SLXOS: 16r.1.00b    

	**Parent Instance Keyword Arg Tuple(s)**:
		:param ospf: kwarg tuple.
		:type ospf: (vrf).

		:param vrf: OSPF instance for the VRF 
		:type vrf: (unicode)
		
		.. note::
			* length - [u'1..32']
			* pattern - ((([a-zA-Z0-9_]([a-zA-Z0-9\-_]){0,61})?[a-zA-Z0-9]\.)*([a-zA-Z0-9_]([a-zA-Z0-9\-_]){0,61})?[a-zA-Z0-9]\.?)|\.

	**This Instance Keyword Arg Tuple**:
		:param distance: kwarg tuple.
		:type distance: (route_type).

		:param route_type: The type of route propagation
		:type route_type: (unicode)
		
		.. note::
			* enum - [u'intra-area', u'external', u'inter-area']

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = [('pybind.slxos.v16r_1_00b.routing_system.ipv6.router.ospf', u'ospf')]
    bindings_list = [('pybind.slxos.v16r_1_00b.routing_system.ipv6.router.ospf.distance', 'pybind.slxos.v16r_1_00b.brocade_common_def', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'vrf', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'distance', 'keyval': 'route_type', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, ospf=ospf, distance=distance)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def ipv6_router_ospf_summary_address_delete(self, ospf=None, summary_address=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		SLXOS: 16r.1.00b    

	**Parent Instance Keyword Arg Tuple(s)**:
		:param ospf: kwarg tuple.
		:type ospf: (vrf).

		:param vrf: OSPF instance for the VRF 
		:type vrf: (unicode)
		
		.. note::
			* length - [u'1..32']
			* pattern - ((([a-zA-Z0-9_]([a-zA-Z0-9\-_]){0,61})?[a-zA-Z0-9]\.)*([a-zA-Z0-9_]([a-zA-Z0-9\-_]){0,61})?[a-zA-Z0-9]\.?)|\.

	**This Instance Keyword Arg Tuple**:
		:param summary_address: kwarg tuple.
		:type summary_address: (summary_address_value).

		:param summary_address_value: tuple arg.
		:type summary_address_value: (unicode)
		
		.. note::
			* pattern - ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(/(([0-9])|([0-9]{2})|(1[0-1][0-9])|(12[0-8])))

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = [('pybind.slxos.v16r_1_00b.routing_system.ipv6.router.ospf', u'ospf')]
    bindings_list = [('pybind.slxos.v16r_1_00b.routing_system.ipv6.router.ospf.summary_address', 'pybind.slxos.v16r_1_00b.brocade_common_def', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'vrf', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'summary_address', 'keyval': 'summary_address_value', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, ospf=ospf, summary_address=summary_address)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def isis_state_database_delete(self, database=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		SLXOS: 16r.1.00b    

	**This Instance Keyword Arg Tuple**:
		:param database: kwarg tuple.
		:type database: (level).

		:param level: tuple arg.
		:type level: (long)
		
		.. note::
			* range - ['0..4294967295']

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = []
    bindings_list = [('pybind.slxos.v16r_1_00b.isis_state.database', 'pybind.slxos.v16r_1_00b.brocade_isis_operational', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = []
    bindings_keyval = {'kwargs_key_name': u'database', 'keyval': 'level', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, database=database)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def isis_state_database_lsp_entry_delete(self, database=None, lsp_entry=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		SLXOS: 16r.1.00b    

	**Parent Instance Keyword Arg Tuple(s)**:
		:param database: kwarg tuple.
		:type database: (level).

		:param level: tuple arg.
		:type level: (long)
		
		.. note::
			* range - ['0..4294967295']

	**This Instance Keyword Arg Tuple**:
		:param lsp_entry: kwarg tuple.
		:type lsp_entry: (lsp_level, lsp_id).

		:param lsp_level: tuple arg.
		:type lsp_level: (long)
		
		.. note::
			* range - ['0..4294967295']

		:param lsp_id: tuple arg.
		:type lsp_id: (unicode)

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = [('pybind.slxos.v16r_1_00b.isis_state.database', u'database')]
    bindings_list = [('pybind.slxos.v16r_1_00b.isis_state.database.lsp_entry', 'pybind.slxos.v16r_1_00b.brocade_isis_operational', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'level', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'lsp_entry', 'keyval': 'lsp_level, lsp_id', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, database=database, lsp_entry=lsp_entry)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def isis_state_database_lsp_entry_lsp_tlv_entry_delete(self, database=None, lsp_entry=None, lsp_tlv_entry=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		SLXOS: 16r.1.00b    

	**Parent Instance Keyword Arg Tuple(s)**:
		:param database: kwarg tuple.
		:type database: (level).

		:param level: tuple arg.
		:type level: (long)
		
		.. note::
			* range - ['0..4294967295']

		:param lsp_entry: kwarg tuple.
		:type lsp_entry: (lsp_level, lsp_id).

		:param lsp_level: tuple arg.
		:type lsp_level: (long)
		
		.. note::
			* range - ['0..4294967295']

		:param lsp_id: tuple arg.
		:type lsp_id: (unicode)

	**This Instance Keyword Arg Tuple**:
		:param lsp_tlv_entry: kwarg tuple.
		:type lsp_tlv_entry: (type).

		:param type: tuple arg.
		:type type: (long)
		
		.. note::
			* range - ['0..4294967295']

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = [('pybind.slxos.v16r_1_00b.isis_state.database', u'database'), ('pybind.slxos.v16r_1_00b.isis_state.database.lsp_entry', u'lsp_entry')]
    bindings_list = [('pybind.slxos.v16r_1_00b.isis_state.database.lsp_entry.lsp_tlv_entry', 'pybind.slxos.v16r_1_00b.brocade_isis_operational', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'level', 'extra_keyval': ''}, {'keyval': 'lsp_level, lsp_id', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'lsp_tlv_entry', 'keyval': 'type', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, database=database, lsp_entry=lsp_entry, lsp_tlv_entry=lsp_tlv_entry)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def isis_state_database_lsp_entry_lsp_tlv_entry_sub_tlv_entry_delete(self, database=None, lsp_entry=None, lsp_tlv_entry=None, sub_tlv_entry=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		SLXOS: 16r.1.00b    

	**Parent Instance Keyword Arg Tuple(s)**:
		:param database: kwarg tuple.
		:type database: (level).

		:param level: tuple arg.
		:type level: (long)
		
		.. note::
			* range - ['0..4294967295']

		:param lsp_entry: kwarg tuple.
		:type lsp_entry: (lsp_level, lsp_id).

		:param lsp_level: tuple arg.
		:type lsp_level: (long)
		
		.. note::
			* range - ['0..4294967295']

		:param lsp_id: tuple arg.
		:type lsp_id: (unicode)

		:param lsp_tlv_entry: kwarg tuple.
		:type lsp_tlv_entry: (type).

		:param type: tuple arg.
		:type type: (long)
		
		.. note::
			* range - ['0..4294967295']

	**This Instance Keyword Arg Tuple**:
		:param sub_tlv_entry: kwarg tuple.
		:type sub_tlv_entry: (type).

		:param type: tuple arg.
		:type type: (long)
		
		.. note::
			* range - ['0..4294967295']

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = [('pybind.slxos.v16r_1_00b.isis_state.database', u'database'), ('pybind.slxos.v16r_1_00b.isis_state.database.lsp_entry', u'lsp_entry'), ('pybind.slxos.v16r_1_00b.isis_state.database.lsp_entry.lsp_tlv_entry', u'lsp_tlv_entry')]
    bindings_list = [('pybind.slxos.v16r_1_00b.isis_state.database.lsp_entry.lsp_tlv_entry.sub_tlv_entry', 'pybind.slxos.v16r_1_00b.brocade_isis_operational', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'level', 'extra_keyval': ''}, {'keyval': 'lsp_level, lsp_id', 'extra_keyval': ''}, {'keyval': 'type', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'sub_tlv_entry', 'keyval': 'type', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, database=database, lsp_entry=lsp_entry, lsp_tlv_entry=lsp_tlv_entry, sub_tlv_entry=sub_tlv_entry)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def isis_state_host_table_isis_router_entry_delete(self, isis_router_entry=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		SLXOS: 16r.1.00b    

	**This Instance Keyword Arg Tuple**:
		:param isis_router_entry: kwarg tuple.
		:type isis_router_entry: (system_id).

		:param system_id: tuple arg.
		:type system_id: (unicode)

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = []
    bindings_list = [('pybind.slxos.v16r_1_00b.isis_state.host_table.isis_router_entry', 'pybind.slxos.v16r_1_00b.brocade_isis_operational', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = []
    bindings_keyval = {'kwargs_key_name': u'isis_router_entry', 'keyval': 'system_id', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, isis_router_entry=isis_router_entry)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def isis_state_interface_brief_isis_intf_brief_delete(self, isis_intf_brief=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		SLXOS: 16r.1.00b    

	**This Instance Keyword Arg Tuple**:
		:param isis_intf_brief: kwarg tuple.
		:type isis_intf_brief: (intf_name).

		:param intf_name: tuple arg.
		:type intf_name: (unicode)

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = []
    bindings_list = [('pybind.slxos.v16r_1_00b.isis_state.interface_brief.isis_intf_brief', 'pybind.slxos.v16r_1_00b.brocade_isis_operational', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = []
    bindings_keyval = {'kwargs_key_name': u'isis_intf_brief', 'keyval': 'intf_name', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, isis_intf_brief=isis_intf_brief)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def isis_state_interface_detail_isis_intf_delete(self, isis_intf=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		SLXOS: 16r.1.00b    

	**This Instance Keyword Arg Tuple**:
		:param isis_intf: kwarg tuple.
		:type isis_intf: (intf_name).

		:param intf_name: tuple arg.
		:type intf_name: (unicode)

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = []
    bindings_list = [('pybind.slxos.v16r_1_00b.isis_state.interface_detail.isis_intf', 'pybind.slxos.v16r_1_00b.brocade_isis_operational', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = []
    bindings_keyval = {'kwargs_key_name': u'isis_intf', 'keyval': 'intf_name', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, isis_intf=isis_intf)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def isis_state_interface_detail_isis_intf_ip6_info_delete(self, isis_intf=None, ip6_info=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		SLXOS: 16r.1.00b    

	**Parent Instance Keyword Arg Tuple(s)**:
		:param isis_intf: kwarg tuple.
		:type isis_intf: (intf_name).

		:param intf_name: tuple arg.
		:type intf_name: (unicode)

	**This Instance Keyword Arg Tuple**:
		:param ip6_info: kwarg tuple.
		:type ip6_info: (ip6_add).

		:param ip6_add: tuple arg.
		:type ip6_add: (unicode)
		
		.. note::
			* pattern - ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = [('pybind.slxos.v16r_1_00b.isis_state.interface_detail.isis_intf', u'isis_intf')]
    bindings_list = [('pybind.slxos.v16r_1_00b.isis_state.interface_detail.isis_intf.ip6_info', 'pybind.slxos.v16r_1_00b.brocade_isis_operational', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'intf_name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'ip6_info', 'keyval': 'ip6_add', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, isis_intf=isis_intf, ip6_info=ip6_info)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def isis_state_interface_detail_isis_intf_ip_info_delete(self, isis_intf=None, ip_info=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		SLXOS: 16r.1.00b    

	**Parent Instance Keyword Arg Tuple(s)**:
		:param isis_intf: kwarg tuple.
		:type isis_intf: (intf_name).

		:param intf_name: tuple arg.
		:type intf_name: (unicode)

	**This Instance Keyword Arg Tuple**:
		:param ip_info: kwarg tuple.
		:type ip_info: (ip_add).

		:param ip_add: tuple arg.
		:type ip_add: (unicode)
		
		.. note::
			* pattern - (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = [('pybind.slxos.v16r_1_00b.isis_state.interface_detail.isis_intf', u'isis_intf')]
    bindings_list = [('pybind.slxos.v16r_1_00b.isis_state.interface_detail.isis_intf.ip_info', 'pybind.slxos.v16r_1_00b.brocade_isis_operational', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'intf_name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'ip_info', 'keyval': 'ip_add', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, isis_intf=isis_intf, ip_info=ip_info)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def isis_state_ipv4_routes_ipv4_route_entry_delete(self, ipv4_route_entry=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		SLXOS: 16r.1.00b    

	**This Instance Keyword Arg Tuple**:
		:param ipv4_route_entry: kwarg tuple.
		:type ipv4_route_entry: (ipv4_dest_addr, ipv4_subnet_mask, ipv4_prefix_len).

		:param ipv4_dest_addr: tuple arg.
		:type ipv4_dest_addr: (unicode)
		
		.. note::
			* pattern - (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?

		:param ipv4_subnet_mask: tuple arg.
		:type ipv4_subnet_mask: (unicode)
		
		.. note::
			* pattern - (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?

		:param ipv4_prefix_len: tuple arg.
		:type ipv4_prefix_len: (int)
		
		.. note::
			* range - ['-128..127']

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = []
    bindings_list = [('pybind.slxos.v16r_1_00b.isis_state.ipv4_routes.ipv4_route_entry', 'pybind.slxos.v16r_1_00b.brocade_isis_operational', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = []
    bindings_keyval = {'kwargs_key_name': u'ipv4_route_entry', 'keyval': 'ipv4_dest_addr, ipv4_subnet_mask, ipv4_prefix_len', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, ipv4_route_entry=ipv4_route_entry)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def isis_state_ipv4_routes_ipv4_route_entry_nh_info_delete(self, ipv4_route_entry=None, nh_info=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		SLXOS: 16r.1.00b    

	**Parent Instance Keyword Arg Tuple(s)**:
		:param ipv4_route_entry: kwarg tuple.
		:type ipv4_route_entry: (ipv4_dest_addr, ipv4_subnet_mask, ipv4_prefix_len).

		:param ipv4_dest_addr: tuple arg.
		:type ipv4_dest_addr: (unicode)
		
		.. note::
			* pattern - (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?

		:param ipv4_subnet_mask: tuple arg.
		:type ipv4_subnet_mask: (unicode)
		
		.. note::
			* pattern - (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?

		:param ipv4_prefix_len: tuple arg.
		:type ipv4_prefix_len: (int)
		
		.. note::
			* range - ['-128..127']

	**This Instance Keyword Arg Tuple**:
		:param nh_info: kwarg tuple.
		:type nh_info: (outgoing_intf_name).

		:param outgoing_intf_name: tuple arg.
		:type outgoing_intf_name: (unicode)

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = [('pybind.slxos.v16r_1_00b.isis_state.ipv4_routes.ipv4_route_entry', u'ipv4_route_entry')]
    bindings_list = [('pybind.slxos.v16r_1_00b.isis_state.ipv4_routes.ipv4_route_entry.nh_info', 'pybind.slxos.v16r_1_00b.brocade_isis_operational', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'ipv4_dest_addr, ipv4_subnet_mask, ipv4_prefix_len', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'nh_info', 'keyval': 'outgoing_intf_name', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, ipv4_route_entry=ipv4_route_entry, nh_info=nh_info)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def isis_state_ipv4_routes_ipv4_route_entry_nh_info_lsp_info_delete(self, ipv4_route_entry=None, nh_info=None, lsp_info=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		SLXOS: 16r.1.00b    

	**Parent Instance Keyword Arg Tuple(s)**:
		:param ipv4_route_entry: kwarg tuple.
		:type ipv4_route_entry: (ipv4_dest_addr, ipv4_subnet_mask, ipv4_prefix_len).

		:param ipv4_dest_addr: tuple arg.
		:type ipv4_dest_addr: (unicode)
		
		.. note::
			* pattern - (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?

		:param ipv4_subnet_mask: tuple arg.
		:type ipv4_subnet_mask: (unicode)
		
		.. note::
			* pattern - (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?

		:param ipv4_prefix_len: tuple arg.
		:type ipv4_prefix_len: (int)
		
		.. note::
			* range - ['-128..127']

		:param nh_info: kwarg tuple.
		:type nh_info: (outgoing_intf_name).

		:param outgoing_intf_name: tuple arg.
		:type outgoing_intf_name: (unicode)

	**This Instance Keyword Arg Tuple**:
		:param lsp_info: kwarg tuple.
		:type lsp_info: (lsp_name).

		:param lsp_name: tuple arg.
		:type lsp_name: (unicode)

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = [('pybind.slxos.v16r_1_00b.isis_state.ipv4_routes.ipv4_route_entry', u'ipv4_route_entry'), ('pybind.slxos.v16r_1_00b.isis_state.ipv4_routes.ipv4_route_entry.nh_info', u'nh_info')]
    bindings_list = [('pybind.slxos.v16r_1_00b.isis_state.ipv4_routes.ipv4_route_entry.nh_info.lsp_info', 'pybind.slxos.v16r_1_00b.brocade_isis_operational', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'ipv4_dest_addr, ipv4_subnet_mask, ipv4_prefix_len', 'extra_keyval': ''}, {'keyval': 'outgoing_intf_name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'lsp_info', 'keyval': 'lsp_name', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, ipv4_route_entry=ipv4_route_entry, nh_info=nh_info, lsp_info=lsp_info)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def isis_state_ipv6_routes_ipv6_route_entry_delete(self, ipv6_route_entry=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		SLXOS: 16r.1.00b    

	**This Instance Keyword Arg Tuple**:
		:param ipv6_route_entry: kwarg tuple.
		:type ipv6_route_entry: (ipv6_dest_addr, ipv6_prefix_len).

		:param ipv6_dest_addr: tuple arg.
		:type ipv6_dest_addr: (unicode)

		:param ipv6_prefix_len: tuple arg.
		:type ipv6_prefix_len: (int)
		
		.. note::
			* range - ['0..255']

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = []
    bindings_list = [('pybind.slxos.v16r_1_00b.isis_state.ipv6_routes.ipv6_route_entry', 'pybind.slxos.v16r_1_00b.brocade_isis_operational', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = []
    bindings_keyval = {'kwargs_key_name': u'ipv6_route_entry', 'keyval': 'ipv6_dest_addr, ipv6_prefix_len', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, ipv6_route_entry=ipv6_route_entry)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def isis_state_ipv6_routes_ipv6_route_entry_nh_info_delete(self, ipv6_route_entry=None, nh_info=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		SLXOS: 16r.1.00b    

	**Parent Instance Keyword Arg Tuple(s)**:
		:param ipv6_route_entry: kwarg tuple.
		:type ipv6_route_entry: (ipv6_dest_addr, ipv6_prefix_len).

		:param ipv6_dest_addr: tuple arg.
		:type ipv6_dest_addr: (unicode)

		:param ipv6_prefix_len: tuple arg.
		:type ipv6_prefix_len: (int)
		
		.. note::
			* range - ['0..255']

	**This Instance Keyword Arg Tuple**:
		:param nh_info: kwarg tuple.
		:type nh_info: (outgoing_intf_name).

		:param outgoing_intf_name: tuple arg.
		:type outgoing_intf_name: (unicode)

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = [('pybind.slxos.v16r_1_00b.isis_state.ipv6_routes.ipv6_route_entry', u'ipv6_route_entry')]
    bindings_list = [('pybind.slxos.v16r_1_00b.isis_state.ipv6_routes.ipv6_route_entry.nh_info', 'pybind.slxos.v16r_1_00b.brocade_isis_operational', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'ipv6_dest_addr, ipv6_prefix_len', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'nh_info', 'keyval': 'outgoing_intf_name', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, ipv6_route_entry=ipv6_route_entry, nh_info=nh_info)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def isis_state_router_isis_config_is_address_family_v4_summary_address_v4_delete(self, summary_address_v4=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		SLXOS: 16r.1.00b    

	**This Instance Keyword Arg Tuple**:
		:param summary_address_v4: kwarg tuple.
		:type summary_address_v4: (address).

		:param address: tuple arg.
		:type address: (unicode)
		
		.. note::
			* pattern - (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = []
    bindings_list = [('pybind.slxos.v16r_1_00b.isis_state.router_isis_config.is_address_family_v4.summary_address_v4', 'pybind.slxos.v16r_1_00b.brocade_isis_operational', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = []
    bindings_keyval = {'kwargs_key_name': u'summary_address_v4', 'keyval': 'address', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, summary_address_v4=summary_address_v4)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def isis_state_router_isis_config_is_address_family_v6_summary_prefix_v6_delete(self, summary_prefix_v6=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		SLXOS: 16r.1.00b    

	**This Instance Keyword Arg Tuple**:
		:param summary_prefix_v6: kwarg tuple.
		:type summary_prefix_v6: (address).

		:param address: tuple arg.
		:type address: (unicode)

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = []
    bindings_list = [('pybind.slxos.v16r_1_00b.isis_state.router_isis_config.is_address_family_v6.summary_prefix_v6', 'pybind.slxos.v16r_1_00b.brocade_isis_operational', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = []
    bindings_keyval = {'kwargs_key_name': u'summary_prefix_v6', 'keyval': 'address', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, summary_prefix_v6=summary_prefix_v6)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def isis_state_router_isis_config_isis_system_info_nsap_delete(self, nsap=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		SLXOS: 16r.1.00b    

	**This Instance Keyword Arg Tuple**:
		:param nsap: kwarg tuple.
		:type nsap: (net_addr).

		:param net_addr: tuple arg.
		:type net_addr: (unicode)

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = []
    bindings_list = [('pybind.slxos.v16r_1_00b.isis_state.router_isis_config.isis_system_info.nsap', 'pybind.slxos.v16r_1_00b.brocade_isis_operational', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = []
    bindings_keyval = {'kwargs_key_name': u'nsap', 'keyval': 'net_addr', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, nsap=nsap)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def isns_vrf_forwarding_delete(self, isns_vrf=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		NOS: 7.1.0    

	**This Instance Keyword Arg Tuple**:
		:param isns_vrf: kwarg tuple.
		:type isns_vrf: (isns_vrf_instance).

		:param isns_vrf_instance: iSNS VRF forwarding value 1
		:type isns_vrf_instance: (long)
		
		.. note::
			* range - ['0..4294967295']

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = []
    bindings_list = [('pybind.nos.v7_1_0.isns.isns_vrf', 'pybind.nos.v7_1_0.brocade_isns', 'pybind.nos.v7_1_0')]
    composed_child_list = []
    compositions_keyval_list = []
    bindings_keyval = {'kwargs_key_name': u'isns_vrf', 'keyval': 'isns_vrf_instance', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, isns_vrf=isns_vrf)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def isns_vrf_forwarding_discovery_domain_delete(self, isns_vrf=None, isns_discovery_domain=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		NOS: 7.1.0    

	**Parent Instance Keyword Arg Tuple(s)**:
		:param isns_vrf: kwarg tuple.
		:type isns_vrf: (isns_vrf_instance).

		:param isns_vrf_instance: iSNS VRF forwarding value 1
		:type isns_vrf_instance: (long)
		
		.. note::
			* range - ['0..4294967295']

	**This Instance Keyword Arg Tuple**:
		:param isns_discovery_domain: kwarg tuple.
		:type isns_discovery_domain: (isns_discovery_domain_name).

		:param isns_discovery_domain_name: iSNS Discovery Domain Name (Max Size - 256)
		:type isns_discovery_domain_name: (unicode)
		
		.. note::
			* length - [u'1..255']
			* pattern - [-_0-9a-zA-Z]{1,255}

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = [('pybind.nos.v7_1_0.isns.isns_vrf', u'isns_vrf')]
    bindings_list = [('pybind.nos.v7_1_0.isns.isns_vrf.isns_discovery_domain', 'pybind.nos.v7_1_0.brocade_isns', 'pybind.nos.v7_1_0')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'isns_vrf_instance', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'isns_discovery_domain', 'keyval': 'isns_discovery_domain_name', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, isns_vrf=isns_vrf, isns_discovery_domain=isns_discovery_domain)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def isns_vrf_forwarding_discovery_domain_set_delete(self, isns_vrf=None, isns_discovery_domain_set=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		NOS: 7.1.0    

	**Parent Instance Keyword Arg Tuple(s)**:
		:param isns_vrf: kwarg tuple.
		:type isns_vrf: (isns_vrf_instance).

		:param isns_vrf_instance: iSNS VRF forwarding value 1
		:type isns_vrf_instance: (long)
		
		.. note::
			* range - ['0..4294967295']

	**This Instance Keyword Arg Tuple**:
		:param isns_discovery_domain_set: kwarg tuple.
		:type isns_discovery_domain_set: (isns_discovery_domain_set_name).

		:param isns_discovery_domain_set_name: iSNS Discovery Domain Set Name (Max Size - 256)
		:type isns_discovery_domain_set_name: (unicode)
		
		.. note::
			* length - [u'1..255']
			* pattern - [-_0-9a-zA-Z]{1,255}

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = [('pybind.nos.v7_1_0.isns.isns_vrf', u'isns_vrf')]
    bindings_list = [('pybind.nos.v7_1_0.isns.isns_vrf.isns_discovery_domain_set', 'pybind.nos.v7_1_0.brocade_isns', 'pybind.nos.v7_1_0')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'isns_vrf_instance', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'isns_discovery_domain_set', 'keyval': 'isns_discovery_domain_set_name', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, isns_vrf=isns_vrf, isns_discovery_domain_set=isns_discovery_domain_set)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def ldap_server_host_delete(self, host=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		NOS: 6.0.2b, 7.0.1a, 7.1.0
		SLXOS: 16r.1.00b    

	**This Instance Keyword Arg Tuple**:
		:param host: kwarg tuple.
		:type host: (hostname).

		:param hostname: INETADDRESS   Domain name or IP Address of
 this LDAP server
		:type hostname: (unicode)
		
		.. note::
			* length - [u'1..max']
			* pattern - \p{IsBasicLatin}{0,255}

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = []
    bindings_list = [('pybind.nos.v6_0_2b.ldap_server.host', 'pybind.nos.v6_0_2b.brocade_aaa', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.ldap_server.host', 'pybind.nos.v7_0_1a.brocade_aaa', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.ldap_server.host', 'pybind.nos.v7_1_0.brocade_aaa', 'pybind.nos.v7_1_0'), ('pybind.slxos.v16r_1_00b.ldap_server.host', 'pybind.slxos.v16r_1_00b.brocade_aaa', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = []
    bindings_keyval = {'kwargs_key_name': u'host', 'keyval': 'hostname, use_vrf', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, host=host)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def ldap_server_maprole_group_delete(self, group=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		NOS: 6.0.2b, 7.0.1a, 7.1.0
		SLXOS: 16r.1.00b    

	**This Instance Keyword Arg Tuple**:
		:param group: kwarg tuple.
		:type group: (ad_group, switch_role).

		:param ad_group: AD group belongs to user on the AD Server
		:type ad_group: (unicode)
		
		.. note::
			* length - [u'1..max']

		:param switch_role: AD group belongs to user on the AD Server
		:type switch_role: (unicode)
		
		.. note::
			* length - [u'4 .. 32']

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = []
    bindings_list = [('pybind.nos.v6_0_2b.ldap_server.maprole.group', 'pybind.nos.v6_0_2b.brocade_aaa', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.ldap_server.maprole.group', 'pybind.nos.v7_0_1a.brocade_aaa', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.ldap_server.maprole.group', 'pybind.nos.v7_1_0.brocade_aaa', 'pybind.nos.v7_1_0'), ('pybind.slxos.v16r_1_00b.ldap_server.maprole.group', 'pybind.slxos.v16r_1_00b.brocade_aaa', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = []
    bindings_keyval = {'kwargs_key_name': u'group', 'keyval': 'ad_group', 'extra_keyval': 'ad_group, switch_role'}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, group=group)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def line_delete(self, line=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		NOS: 6.0.2b, 7.0.1a, 7.1.0
		SLXOS: 16r.1.00b    

	**This Instance Keyword Arg Tuple**:
		:param line: kwarg tuple.
		:type line: (sessionid).

		:param sessionid: Terminal type
		:type sessionid: (unicode)
		
		.. note::
			* enum - [u'vty']

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = []
    bindings_list = [('pybind.nos.v6_0_2b.terminal_cfg.line', 'pybind.nos.v6_0_2b.brocade_terminal', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.terminal_cfg.line', 'pybind.nos.v7_0_1a.brocade_terminal', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.terminal_cfg.line', 'pybind.nos.v7_1_0.brocade_terminal', 'pybind.nos.v7_1_0'), ('pybind.slxos.v16r_1_00b.terminal_cfg.line', 'pybind.slxos.v16r_1_00b.brocade_terminal', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = []
    bindings_keyval = {'kwargs_key_name': u'line', 'keyval': 'sessionid', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, line=line)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def linecard_delete(self, linecards=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		SLXOS: 16r.1.00b    

	**This Instance Keyword Arg Tuple**:
		:param linecards: kwarg tuple.
		:type linecards: (linecardName, linecardType).

		:param linecardName: tuple arg.
		:type linecardName: (unicode)
		
		.. note::
			* pattern - ([1-9]|[1][0-6])

		:param linecardType: tuple arg.
		:type linecardType: (unicode)
		
		.. note::
			* enum - [u'LC36X100G', u'LC72X10G']

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = []
    bindings_list = [('pybind.slxos.v16r_1_00b.global_lc_holder.linecard.linecards', 'pybind.slxos.v16r_1_00b.brocade_linecard_management', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = []
    bindings_keyval = {'kwargs_key_name': u'linecards', 'keyval': 'linecardName', 'extra_keyval': 'linecardName, linecardType'}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, linecards=linecards)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def logging_auditlog_class_delete(self, class_=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		NOS: 6.0.2b, 7.0.1a, 7.1.0
		SLXOS: 16r.1.00b    

	**This Instance Keyword Arg Tuple**:
		:param class_: kwarg tuple.
		:type class_: (class_).

		:param class_: tuple arg.
		:type class_: (unicode)
		
		.. note::
			* enum - [u'CONFIGURATION', u'SECURITY', u'FIRMWARE']

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = []
    bindings_list = [('pybind.nos.v6_0_2b.logging.auditlog.class_', 'pybind.nos.v6_0_2b.brocade_ras', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.logging.auditlog.class_', 'pybind.nos.v7_0_1a.brocade_ras', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.logging.auditlog.class_', 'pybind.nos.v7_1_0.brocade_ras', 'pybind.nos.v7_1_0'), ('pybind.slxos.v16r_1_00b.logging.auditlog.class_', 'pybind.slxos.v16r_1_00b.brocade_ras', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = []
    bindings_keyval = {'kwargs_key_name': u'class_', 'keyval': 'class_', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, class_=class_)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def logging_raslog_message_delete(self, msgid=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		NOS: 6.0.2b, 7.0.1a, 7.1.0
		SLXOS: 16r.1.00b    

	**This Instance Keyword Arg Tuple**:
		:param msgid: kwarg tuple.
		:type msgid: (msgId).

		:param msgId: Specify the Msg ID
		:type msgId: (unicode)

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = []
    bindings_list = [('pybind.nos.v6_0_2b.logging.raslog.message.msgId', 'pybind.nos.v6_0_2b.brocade_ras', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.logging.raslog.message.msgId', 'pybind.nos.v7_0_1a.brocade_ras', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.logging.raslog.message.msgId', 'pybind.nos.v7_1_0.brocade_ras', 'pybind.nos.v7_1_0'), ('pybind.slxos.v16r_1_00b.logging.raslog.message.msgId', 'pybind.slxos.v16r_1_00b.brocade_ras', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = []
    bindings_keyval = {'kwargs_key_name': u'msgid', 'keyval': 'msgId', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, msgid=msgid)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def logging_raslog_module_delete(self, modid=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		NOS: 6.0.2b, 7.0.1a, 7.1.0
		SLXOS: 16r.1.00b    

	**This Instance Keyword Arg Tuple**:
		:param modid: kwarg tuple.
		:type modid: (modId).

		:param modId: Specify the Module ID
		:type modId: (unicode)

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = []
    bindings_list = [('pybind.nos.v6_0_2b.logging.raslog.module.modId', 'pybind.nos.v6_0_2b.brocade_ras', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.logging.raslog.module.modId', 'pybind.nos.v7_0_1a.brocade_ras', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.logging.raslog.module.modId', 'pybind.nos.v7_1_0.brocade_ras', 'pybind.nos.v7_1_0'), ('pybind.slxos.v16r_1_00b.logging.raslog.module.modId', 'pybind.slxos.v16r_1_00b.brocade_ras', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = []
    bindings_keyval = {'kwargs_key_name': u'modid', 'keyval': 'modId', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, modid=modid)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def logging_syslog_server_delete(self, syslog_server=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		NOS: 6.0.2b, 7.0.1a, 7.1.0
		SLXOS: 16r.1.00b    

	**This Instance Keyword Arg Tuple**:
		:param syslog_server: kwarg tuple.
		:type syslog_server: (syslogip, use_vrf, secure, port).

		:param syslogip: IPADDRESS		The IPv4 or IPv6 Address
		:type syslogip: (unicode)
		
		.. note::
			* pattern - (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?

		:param use_vrf: vrf to use for sending notification to the receiver. (Default=management).
		:type use_vrf: (unicode)
		
		.. note::
			* length - [u'1..32']
			* pattern - ((([a-zA-Z0-9_]([a-zA-Z0-9\-_]){0,61})?[a-zA-Z0-9]\.)*([a-zA-Z0-9_]([a-zA-Z0-9\-_]){0,61})?[a-zA-Z0-9]\.?)|\.

		:param secure: Indicates if transport is secure
		:type secure: (YANGBool)

		:param port: Port number on which the syslog server is listening
		:type port: (int)
		
		.. note::
			* range - ['0..65535']

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = []
    bindings_list = [('pybind.nos.v6_0_2b.logging.syslog_server', 'pybind.nos.v6_0_2b.brocade_ras', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.logging.syslog_server', 'pybind.nos.v7_0_1a.brocade_ras', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.logging.syslog_server', 'pybind.nos.v7_1_0.brocade_ras', 'pybind.nos.v7_1_0'), ('pybind.slxos.v16r_1_00b.logging.syslog_server', 'pybind.slxos.v16r_1_00b.brocade_ras', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = []
    bindings_keyval = {'kwargs_key_name': u'syslog_server', 'keyval': 'syslogip, use_vrf', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, syslog_server=syslog_server)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def logical_interface_state_main_interface_physical_delete(self, main_interface_physical=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		SLXOS: 16r.1.00b    

	**This Instance Keyword Arg Tuple**:
		:param main_interface_physical: kwarg tuple.
		:type main_interface_physical: (intf_name).

		:param intf_name: tuple arg.
		:type intf_name: (unicode)

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = []
    bindings_list = [('pybind.slxos.v16r_1_00b.logical_interface_state.main_interface_physical', 'pybind.slxos.v16r_1_00b.brocade_nsm_operational', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = []
    bindings_keyval = {'kwargs_key_name': u'main_interface_physical', 'keyval': 'intf_name', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, main_interface_physical=main_interface_physical)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def mac_access_list_extended_delete(self, extended=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		NOS: 6.0.2b, 7.0.1a, 7.1.0
		SLXOS: 16r.1.00b    

	**This Instance Keyword Arg Tuple**:
		:param extended: kwarg tuple.
		:type extended: (name).

		:param name: ACL_NAME;; Access List Name (Max 63)
		:type name: (unicode)
		
		.. note::
			* length - [u'1..63']
			* pattern - [a-zA-Z0-9]{1}([-a-zA-Z0-9_]{0,62})

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = []
    bindings_list = [('pybind.nos.v6_0_2b.mac.access_list.extended', 'pybind.nos.v6_0_2b.brocade_mac_access_list', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.mac.access_list.extended', 'pybind.nos.v7_0_1a.brocade_mac_access_list', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.mac.access_list.extended', 'pybind.nos.v7_1_0.brocade_mac_access_list', 'pybind.nos.v7_1_0'), ('pybind.slxos.v16r_1_00b.mac.access_list.extended', 'pybind.slxos.v16r_1_00b.brocade_mac_access_list', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = []
    bindings_keyval = {'kwargs_key_name': u'extended', 'keyval': 'name', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, extended=extended)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def mac_access_list_extended_seq_delete(self, extended=None, seq=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		NOS: 6.0.2b, 7.0.1a, 7.1.0
		SLXOS: 16r.1.00b    

	**Parent Instance Keyword Arg Tuple(s)**:
		:param extended: kwarg tuple.
		:type extended: (name).

		:param name: ACL_NAME;; Access List Name (Max 63)
		:type name: (unicode)
		
		.. note::
			* length - [u'1..63']
			* pattern - [a-zA-Z0-9]{1}([-a-zA-Z0-9_]{0,62})

	**This Instance Keyword Arg Tuple**:
		:param seq: kwarg tuple.
		:type seq: (seq_id, action, source, srchost, src_mac_addr_mask, dst, dsthost, dst_mac_addr_mask, ethertype, vlan, count, log).

		:param seq_id: tuple arg.
		:type seq_id: (long)
		
		.. note::
			* range - ['0..18446744073709551615']

		:param action: tuple arg.
		:type action: (unicode)
		
		.. note::
			* enum - [u'deny', u'hard-drop', u'permit']

		:param source: tuple arg.
		:type source: (unicode)

		:param srchost: source mac address HHHH.HHHH.HHHH
		:type srchost: (unicode)

		:param src_mac_addr_mask: tuple arg.
		:type src_mac_addr_mask: (unicode)

		:param dst: tuple arg.
		:type dst: (unicode)

		:param dsthost: Destination mac address HHHH.HHHH.HHHH
		:type dsthost: (unicode)

		:param dst_mac_addr_mask: tuple arg.
		:type dst_mac_addr_mask: (unicode)

		:param ethertype: tuple arg.
		:type ethertype: (unicode)
		
		.. note::
			* enum - [u'arp', u'fcoe', u'ipv4']

		:param vlan: Vlan
		:type vlan: (long)
		
		.. note::
			* range - ['0..4294967295']

		:param count: Packet count
		:type count: (YANGBool)

		:param log: Log Packet
		:type log: (YANGBool)

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = [('pybind.slxos.v16r_1_00b.mac.access_list.extended', u'extended'), ('pybind.nos.v6_0_2b.mac.access_list.extended', u'extended'), ('pybind.nos.v7_0_1a.mac.access_list.extended', u'extended'), ('pybind.nos.v7_1_0.mac.access_list.extended', u'extended')]
    bindings_list = [('pybind.nos.v6_0_2b.mac.access_list.extended.hide_mac_acl_ext.seq', 'pybind.nos.v6_0_2b.brocade_mac_access_list', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.mac.access_list.extended.hide_mac_acl_ext.seq', 'pybind.nos.v7_0_1a.brocade_mac_access_list', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.mac.access_list.extended.hide_mac_acl_ext.seq', 'pybind.nos.v7_1_0.brocade_mac_access_list', 'pybind.nos.v7_1_0'), ('pybind.slxos.v16r_1_00b.mac.access_list.extended.hide_mac_acl_ext.seq', 'pybind.slxos.v16r_1_00b.brocade_mac_access_list', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'seq', 'keyval': 'seq_id', 'extra_keyval': 'seq_id, action, source, srchost, src_mac_addr_mask, dst, dsthost, dst_mac_addr_mask, ethertype, vlan, count, log'}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, extended=extended, seq=seq)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def mac_access_list_standard_delete(self, standard=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		NOS: 6.0.2b, 7.0.1a, 7.1.0
		SLXOS: 16r.1.00b    

	**This Instance Keyword Arg Tuple**:
		:param standard: kwarg tuple.
		:type standard: (name).

		:param name: ACL_NAME;; Access List Name (Max 63)
		:type name: (unicode)
		
		.. note::
			* length - [u'1..63']
			* pattern - [a-zA-Z0-9]{1}([-a-zA-Z0-9_]{0,62})

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = []
    bindings_list = [('pybind.nos.v6_0_2b.mac.access_list.standard', 'pybind.nos.v6_0_2b.brocade_mac_access_list', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.mac.access_list.standard', 'pybind.nos.v7_0_1a.brocade_mac_access_list', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.mac.access_list.standard', 'pybind.nos.v7_1_0.brocade_mac_access_list', 'pybind.nos.v7_1_0'), ('pybind.slxos.v16r_1_00b.mac.access_list.standard', 'pybind.slxos.v16r_1_00b.brocade_mac_access_list', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = []
    bindings_keyval = {'kwargs_key_name': u'standard', 'keyval': 'name', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, standard=standard)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def mac_access_list_standard_seq_delete(self, standard=None, seq=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		NOS: 6.0.2b, 7.0.1a, 7.1.0
		SLXOS: 16r.1.00b    

	**Parent Instance Keyword Arg Tuple(s)**:
		:param standard: kwarg tuple.
		:type standard: (name).

		:param name: ACL_NAME;; Access List Name (Max 63)
		:type name: (unicode)
		
		.. note::
			* length - [u'1..63']
			* pattern - [a-zA-Z0-9]{1}([-a-zA-Z0-9_]{0,62})

	**This Instance Keyword Arg Tuple**:
		:param seq: kwarg tuple.
		:type seq: (seq_id, action, source, srchost, src_mac_addr_mask, count, log).

		:param seq_id: tuple arg.
		:type seq_id: (long)
		
		.. note::
			* range - ['0..18446744073709551615']

		:param action: tuple arg.
		:type action: (unicode)
		
		.. note::
			* enum - [u'deny', u'hard-drop', u'permit']

		:param source: tuple arg.
		:type source: (unicode)

		:param srchost: tuple arg.
		:type srchost: (unicode)

		:param src_mac_addr_mask: tuple arg.
		:type src_mac_addr_mask: (unicode)

		:param count: Packet count
		:type count: (YANGBool)

		:param log: Log Packet
		:type log: (YANGBool)

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = [('pybind.nos.v7_1_0.mac.access_list.standard', u'standard'), ('pybind.slxos.v16r_1_00b.mac.access_list.standard', u'standard'), ('pybind.nos.v6_0_2b.mac.access_list.standard', u'standard'), ('pybind.nos.v7_0_1a.mac.access_list.standard', u'standard')]
    bindings_list = [('pybind.nos.v6_0_2b.mac.access_list.standard.hide_mac_acl_std.seq', 'pybind.nos.v6_0_2b.brocade_mac_access_list', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.mac.access_list.standard.hide_mac_acl_std.seq', 'pybind.nos.v7_0_1a.brocade_mac_access_list', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.mac.access_list.standard.hide_mac_acl_std.seq', 'pybind.nos.v7_1_0.brocade_mac_access_list', 'pybind.nos.v7_1_0'), ('pybind.slxos.v16r_1_00b.mac.access_list.standard.hide_mac_acl_std.seq', 'pybind.slxos.v16r_1_00b.brocade_mac_access_list', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'seq', 'keyval': 'seq_id', 'extra_keyval': 'seq_id, action, source, srchost, src_mac_addr_mask, count, log'}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, standard=standard, seq=seq)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def mac_address_table_static_delete(self, static=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		NOS: 6.0.2b, 7.0.1a, 7.1.0
		SLXOS: 16r.1.00b    

	**This Instance Keyword Arg Tuple**:
		:param static: kwarg tuple.
		:type static: (mac_address, forward, interface_type, interface_name, vlan, vlanid).

		:param mac_address: tuple arg.
		:type mac_address: (unicode)

		:param forward: Forward
		:type forward: (unicode)
		
		.. note::
			* enum - [u'forward']

		:param interface_type: Interface
		:type interface_type: (unicode)
		
		.. note::
			* enum - [u'fortygigabitethernet', u'gigabitethernet', u'tengigabitethernet', u'hundredgigabitethernet', u'port-channel']

		:param interface_name: Interface identifier
		:type interface_name: (unicode)

		:param vlan: vlan
		:type vlan: (unicode)
		
		.. note::
			* enum - [u'vlan']

		:param vlanid: tuple arg.
		:type vlanid: (long)
		
		.. note::
			* range - ['0..4294967295']

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = []
    bindings_list = [('pybind.nos.v6_0_2b.mac_address_table.static', 'pybind.nos.v6_0_2b.brocade_mac_address_table', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.mac_address_table.static', 'pybind.nos.v7_0_1a.brocade_mac_address_table', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.mac_address_table.static', 'pybind.nos.v7_1_0.brocade_mac_address_table', 'pybind.nos.v7_1_0'), ('pybind.slxos.v16r_1_00b.mac_address_table.static.static_ac_lif', 'pybind.slxos.v16r_1_00b.brocade_mac_address_table', 'pybind.slxos.v16r_1_00b'), ('pybind.slxos.v16r_1_00b.mac_address_table.static.static_mac', 'pybind.slxos.v16r_1_00b.brocade_mac_address_table', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = []
    bindings_keyval = {'kwargs_key_name': u'static', 'keyval': 'mac_address, forward, interface_type, interface_name, vlan, vlanid', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, static=static)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def mac_group_delete(self, mac_group=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		NOS: 6.0.2b, 7.0.1a, 7.1.0
		SLXOS: 16r.1.00b    

	**This Instance Keyword Arg Tuple**:
		:param mac_group: kwarg tuple.
		:type mac_group: (mac_group_id).

		:param mac_group_id: tuple arg.
		:type mac_group_id: (long)
		
		.. note::
			* range - ['0..4294967295']

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = []
    bindings_list = [('pybind.nos.v6_0_2b.mac_group', 'pybind.nos.v6_0_2b.brocade_mac_address_table', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.mac_group', 'pybind.nos.v7_0_1a.brocade_mac_address_table', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.mac_group', 'pybind.nos.v7_1_0.brocade_mac_address_table', 'pybind.nos.v7_1_0'), ('pybind.slxos.v16r_1_00b.mac_group', 'pybind.slxos.v16r_1_00b.brocade_mac_address_table', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = []
    bindings_keyval = {'kwargs_key_name': 'mac_group', 'keyval': 'mac_group_id', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, mac_group=mac_group)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def mac_group_mac_delete(self, mac_group=None, mac_group_entry=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		NOS: 6.0.2b, 7.0.1a, 7.1.0
		SLXOS: 16r.1.00b    

	**Parent Instance Keyword Arg Tuple(s)**:
		:param mac_group: kwarg tuple.
		:type mac_group: (mac_group_id).

		:param mac_group_id: tuple arg.
		:type mac_group_id: (long)
		
		.. note::
			* range - ['0..4294967295']

	**This Instance Keyword Arg Tuple**:
		:param mac_group_entry: kwarg tuple.
		:type mac_group_entry: (entry_address).

		:param entry_address: tuple arg.
		:type entry_address: (unicode)

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = [('pybind.slxos.v16r_1_00b.mac_group', 'mac_group'), ('pybind.nos.v7_1_0.mac_group', 'mac_group'), ('pybind.nos.v6_0_2b.mac_group', 'mac_group'), ('pybind.nos.v7_0_1a.mac_group', 'mac_group')]
    bindings_list = [('pybind.nos.v6_0_2b.mac_group.mac_group_entry', 'pybind.nos.v6_0_2b.brocade_mac_address_table', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.mac_group.mac_group_entry', 'pybind.nos.v7_0_1a.brocade_mac_address_table', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.mac_group.mac_group_entry', 'pybind.nos.v7_1_0.brocade_mac_address_table', 'pybind.nos.v7_1_0'), ('pybind.slxos.v16r_1_00b.mac_group.mac_group_entry', 'pybind.slxos.v16r_1_00b.brocade_mac_address_table', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'mac_group_id', 'extra_keyval': ''}, {'keyval': 'mac_group_id', 'extra_keyval': ''}, {'keyval': 'mac_group_id', 'extra_keyval': ''}, {'keyval': 'mac_group_id', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'mac_group_entry', 'keyval': 'entry_address', 'extra_keyval': 'entry_address'}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, mac_group=mac_group, mac_group_entry=mac_group_entry)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def mct_l2ys_state_show_cluster_mem_vlan_delete(self, show_cluster_mem_vlan=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		SLXOS: 16r.1.00b    

	**This Instance Keyword Arg Tuple**:
		:param show_cluster_mem_vlan: kwarg tuple.
		:type show_cluster_mem_vlan: (cluster_id).

		:param cluster_id: tuple arg.
		:type cluster_id: (long)
		
		.. note::
			* range - ['0..4294967295']

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = []
    bindings_list = [('pybind.slxos.v16r_1_00b.mct_l2ys_state.show_cluster_mem_vlan', 'pybind.slxos.v16r_1_00b.brocade_l2sys_operational', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = []
    bindings_keyval = {'kwargs_key_name': u'show_cluster_mem_vlan', 'keyval': 'cluster_id', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, show_cluster_mem_vlan=show_cluster_mem_vlan)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def mct_state_show_cluster_delete(self, show_cluster=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		SLXOS: 16r.1.00b    

	**This Instance Keyword Arg Tuple**:
		:param show_cluster: kwarg tuple.
		:type show_cluster: (cluster_id).

		:param cluster_id: tuple arg.
		:type cluster_id: (long)
		
		.. note::
			* range - ['0..4294967295']

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = []
    bindings_list = [('pybind.slxos.v16r_1_00b.mct_state.show_cluster', 'pybind.slxos.v16r_1_00b.brocade_nsm_operational', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = []
    bindings_keyval = {'kwargs_key_name': u'show_cluster', 'keyval': 'cluster_id', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, show_cluster=show_cluster)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def mct_state_show_cluster_client_info_list_delete(self, show_cluster=None, client_info_list=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		SLXOS: 16r.1.00b    

	**Parent Instance Keyword Arg Tuple(s)**:
		:param show_cluster: kwarg tuple.
		:type show_cluster: (cluster_id).

		:param cluster_id: tuple arg.
		:type cluster_id: (long)
		
		.. note::
			* range - ['0..4294967295']

	**This Instance Keyword Arg Tuple**:
		:param client_info_list: kwarg tuple.
		:type client_info_list: (cluster_id, client_id).

		:param cluster_id: tuple arg.
		:type cluster_id: (long)
		
		.. note::
			* range - ['0..4294967295']

		:param client_id: tuple arg.
		:type client_id: (long)
		
		.. note::
			* range - ['0..4294967295']

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = [('pybind.slxos.v16r_1_00b.mct_state.show_cluster', u'show_cluster')]
    bindings_list = [('pybind.slxos.v16r_1_00b.mct_state.show_cluster.client_info_list', 'pybind.slxos.v16r_1_00b.brocade_nsm_operational', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'cluster_id', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'client_info_list', 'keyval': 'cluster_id, client_id', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, show_cluster=show_cluster, client_info_list=client_info_list)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def mct_state_show_cluster_peer_info_list_delete(self, show_cluster=None, peer_info_list=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		SLXOS: 16r.1.00b    

	**Parent Instance Keyword Arg Tuple(s)**:
		:param show_cluster: kwarg tuple.
		:type show_cluster: (cluster_id).

		:param cluster_id: tuple arg.
		:type cluster_id: (long)
		
		.. note::
			* range - ['0..4294967295']

	**This Instance Keyword Arg Tuple**:
		:param peer_info_list: kwarg tuple.
		:type peer_info_list: (peer_ip_addr).

		:param peer_ip_addr: tuple arg.
		:type peer_ip_addr: (long)
		
		.. note::
			* range - ['0..4294967295']

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = [('pybind.slxos.v16r_1_00b.mct_state.show_cluster', u'show_cluster')]
    bindings_list = [('pybind.slxos.v16r_1_00b.mct_state.show_cluster.peer_info_list', 'pybind.slxos.v16r_1_00b.brocade_nsm_operational', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'cluster_id', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'peer_info_list', 'keyval': 'peer_ip_addr', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, show_cluster=show_cluster, peer_info_list=peer_info_list)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def mctd_client_state_state_show_cluster_mctd_client_delete(self, show_cluster_mctd_client=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		SLXOS: 16r.1.00b    

	**This Instance Keyword Arg Tuple**:
		:param show_cluster_mctd_client: kwarg tuple.
		:type show_cluster_mctd_client: (cluster_id).

		:param cluster_id: tuple arg.
		:type cluster_id: (long)
		
		.. note::
			* range - ['0..4294967295']

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = []
    bindings_list = [('pybind.slxos.v16r_1_00b.mctd_client_state_state.show_cluster_mctd_client', 'pybind.slxos.v16r_1_00b.brocade_mct_operational', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = []
    bindings_keyval = {'kwargs_key_name': u'show_cluster_mctd_client', 'keyval': 'cluster_id', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, show_cluster_mctd_client=show_cluster_mctd_client)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def mctd_client_state_state_show_cluster_mem_vlan_delete(self, show_cluster_mem_vlan=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		SLXOS: 16r.1.00b    

	**This Instance Keyword Arg Tuple**:
		:param show_cluster_mem_vlan: kwarg tuple.
		:type show_cluster_mem_vlan: (cluster_id).

		:param cluster_id: tuple arg.
		:type cluster_id: (long)
		
		.. note::
			* range - ['0..4294967295']

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = []
    bindings_list = [('pybind.slxos.v16r_1_00b.mctd_client_state_state.show_cluster_mem_vlan', 'pybind.slxos.v16r_1_00b.brocade_mct_operational', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = []
    bindings_keyval = {'kwargs_key_name': u'show_cluster_mem_vlan', 'keyval': 'cluster_id', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, show_cluster_mem_vlan=show_cluster_mem_vlan)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def monitor_session_delete(self, session=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		NOS: 6.0.2b, 7.0.1a, 7.1.0
		SLXOS: 16r.1.00b    

	**This Instance Keyword Arg Tuple**:
		:param session: kwarg tuple.
		:type session: (session_number).

		:param session_number: tuple arg.
		:type session_number: (long)
		
		.. note::
			* range - ['0..4294967295']

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = []
    bindings_list = [('pybind.nos.v6_0_2b.monitor.session', 'pybind.nos.v6_0_2b.brocade_span', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.monitor.session', 'pybind.nos.v7_0_1a.brocade_span', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.monitor.session', 'pybind.nos.v7_1_0.brocade_span', 'pybind.nos.v7_1_0'), ('pybind.slxos.v16r_1_00b.monitor.session', 'pybind.slxos.v16r_1_00b.brocade_span', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = []
    bindings_keyval = {'kwargs_key_name': u'session', 'keyval': 'session_number', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, session=session)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def mpls_state_auto_bandwidth_template_delete(self, auto_bandwidth_template=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		SLXOS: 16r.1.00b    

	**This Instance Keyword Arg Tuple**:
		:param auto_bandwidth_template: kwarg tuple.
		:type auto_bandwidth_template: (name).

		:param name: tuple arg.
		:type name: (unicode)

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = []
    bindings_list = [('pybind.slxos.v16r_1_00b.mpls_state.auto_bandwidth_template', 'pybind.slxos.v16r_1_00b.brocade_mpls_operational', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = []
    bindings_keyval = {'kwargs_key_name': u'auto_bandwidth_template', 'keyval': 'name', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, auto_bandwidth_template=auto_bandwidth_template)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def mpls_state_auto_bandwidth_template_associated_paths_delete(self, auto_bandwidth_template=None, associated_paths=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		SLXOS: 16r.1.00b    

	**Parent Instance Keyword Arg Tuple(s)**:
		:param auto_bandwidth_template: kwarg tuple.
		:type auto_bandwidth_template: (name).

		:param name: tuple arg.
		:type name: (unicode)

	**This Instance Keyword Arg Tuple**:
		:param associated_paths: kwarg tuple.
		:type associated_paths: (lsp_name).

		:param lsp_name: tuple arg.
		:type lsp_name: (unicode)

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = [('pybind.slxos.v16r_1_00b.mpls_state.auto_bandwidth_template', u'auto_bandwidth_template')]
    bindings_list = [('pybind.slxos.v16r_1_00b.mpls_state.auto_bandwidth_template.associated_paths', 'pybind.slxos.v16r_1_00b.brocade_mpls_operational', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'associated_paths', 'keyval': 'lsp_name', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, auto_bandwidth_template=auto_bandwidth_template, associated_paths=associated_paths)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def mpls_state_autobw_threshold_table_entry_delete(self, autobw_threshold_table_entry=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		SLXOS: 16r.1.00b    

	**This Instance Keyword Arg Tuple**:
		:param autobw_threshold_table_entry: kwarg tuple.
		:type autobw_threshold_table_entry: (bandwidth).

		:param bandwidth: tuple arg.
		:type bandwidth: (long)
		
		.. note::
			* range - ['0..4294967295']

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = []
    bindings_list = [('pybind.slxos.v16r_1_00b.mpls_state.autobw_threshold_table_entry', 'pybind.slxos.v16r_1_00b.brocade_mpls_operational', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = []
    bindings_keyval = {'kwargs_key_name': u'autobw_threshold_table_entry', 'keyval': 'bandwidth', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, autobw_threshold_table_entry=autobw_threshold_table_entry)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def mpls_state_dynamic_bypass_dynamic_bypass_interface_delete(self, dynamic_bypass_interface=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		SLXOS: 16r.1.00b    

	**This Instance Keyword Arg Tuple**:
		:param dynamic_bypass_interface: kwarg tuple.
		:type dynamic_bypass_interface: (if_name, if_type).

		:param if_name: tuple arg.
		:type if_name: (unicode)

		:param if_type: tuple arg.
		:type if_type: (unicode)
		
		.. note::
			* enum - [u'loopback-interface', u'ethernet-interface', u'port-channel-interface', u'unknown-interface', u've-interface', u'fbr-channel-interface']

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = []
    bindings_list = [('pybind.slxos.v16r_1_00b.mpls_state.dynamic_bypass.dynamic_bypass_interface', 'pybind.slxos.v16r_1_00b.brocade_mpls_operational', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = []
    bindings_keyval = {'kwargs_key_name': u'dynamic_bypass_interface', 'keyval': 'if_name, if_type', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, dynamic_bypass_interface=dynamic_bypass_interface)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def mpls_state_dynamic_bypass_dynamic_bypass_interface_mp_infos_delete(self, dynamic_bypass_interface=None, mp_infos=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		SLXOS: 16r.1.00b    

	**Parent Instance Keyword Arg Tuple(s)**:
		:param dynamic_bypass_interface: kwarg tuple.
		:type dynamic_bypass_interface: (if_name, if_type).

		:param if_name: tuple arg.
		:type if_name: (unicode)

		:param if_type: tuple arg.
		:type if_type: (unicode)
		
		.. note::
			* enum - [u'loopback-interface', u'ethernet-interface', u'port-channel-interface', u'unknown-interface', u've-interface', u'fbr-channel-interface']

	**This Instance Keyword Arg Tuple**:
		:param mp_infos: kwarg tuple.
		:type mp_infos: (router_id).

		:param router_id: tuple arg.
		:type router_id: (unicode)
		
		.. note::
			* pattern - (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = [('pybind.slxos.v16r_1_00b.mpls_state.dynamic_bypass.dynamic_bypass_interface', u'dynamic_bypass_interface')]
    bindings_list = [('pybind.slxos.v16r_1_00b.mpls_state.dynamic_bypass.dynamic_bypass_interface.mp_infos', 'pybind.slxos.v16r_1_00b.brocade_mpls_operational', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'if_name, if_type', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'mp_infos', 'keyval': 'router_id', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, dynamic_bypass_interface=dynamic_bypass_interface, mp_infos=mp_infos)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def mpls_state_forwarding_entry_delete(self, forwarding_entry=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		SLXOS: 16r.1.00b    

	**This Instance Keyword Arg Tuple**:
		:param forwarding_entry: kwarg tuple.
		:type forwarding_entry: (entry_index, sync_index).

		:param entry_index: tuple arg.
		:type entry_index: (long)
		
		.. note::
			* range - ['0..4294967295']

		:param sync_index: tuple arg.
		:type sync_index: (long)
		
		.. note::
			* range - ['0..4294967295']

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = []
    bindings_list = [('pybind.slxos.v16r_1_00b.mpls_state.forwarding_entry', 'pybind.slxos.v16r_1_00b.brocade_mpls_operational', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = []
    bindings_keyval = {'kwargs_key_name': u'forwarding_entry', 'keyval': 'entry_index, sync_index', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, forwarding_entry=forwarding_entry)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def mpls_state_interface_delete(self, interface=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		SLXOS: 16r.1.00b    

	**This Instance Keyword Arg Tuple**:
		:param interface: kwarg tuple.
		:type interface: (interface_index).

		:param interface_index: tuple arg.
		:type interface_index: (long)
		
		.. note::
			* range - ['0..4294967295']

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = []
    bindings_list = [('pybind.slxos.v16r_1_00b.mpls_state.interface', 'pybind.slxos.v16r_1_00b.brocade_mpls_operational', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = []
    bindings_keyval = {'kwargs_key_name': u'interface', 'keyval': 'interface_index', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, interface=interface)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def mpls_state_ldp_fec_ldp_fec_prefix_longer_delete(self, ldp_fec_prefix_longer=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		SLXOS: 16r.1.00b    

	**This Instance Keyword Arg Tuple**:
		:param ldp_fec_prefix_longer: kwarg tuple.
		:type ldp_fec_prefix_longer: (prefix).

		:param prefix: tuple arg.
		:type prefix: (unicode)

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = []
    bindings_list = [('pybind.slxos.v16r_1_00b.mpls_state.ldp.fec.ldp_fec_prefix_longer', 'pybind.slxos.v16r_1_00b.brocade_mpls_operational', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = []
    bindings_keyval = {'kwargs_key_name': u'ldp_fec_prefix_longer', 'keyval': 'prefix', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, ldp_fec_prefix_longer=ldp_fec_prefix_longer)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def mpls_state_ldp_fec_ldp_fec_prefix_longer_prefix_prefix_delete(self, ldp_fec_prefix_longer=None, prefix_prefix=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		SLXOS: 16r.1.00b    

	**Parent Instance Keyword Arg Tuple(s)**:
		:param ldp_fec_prefix_longer: kwarg tuple.
		:type ldp_fec_prefix_longer: (prefix).

		:param prefix: tuple arg.
		:type prefix: (unicode)

	**This Instance Keyword Arg Tuple**:
		:param prefix_prefix: kwarg tuple.
		:type prefix_prefix: (prefix).

		:param prefix: tuple arg.
		:type prefix: (unicode)

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = [('pybind.slxos.v16r_1_00b.mpls_state.ldp.fec.ldp_fec_prefix_longer', u'ldp_fec_prefix_longer')]
    bindings_list = [('pybind.slxos.v16r_1_00b.mpls_state.ldp.fec.ldp_fec_prefix_longer.prefix_prefix', 'pybind.slxos.v16r_1_00b.brocade_mpls_operational', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'prefix', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'prefix_prefix', 'keyval': 'prefix', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, ldp_fec_prefix_longer=ldp_fec_prefix_longer, prefix_prefix=prefix_prefix)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def mpls_state_ldp_fec_ldp_fec_prefix_longer_prefix_prefix_prefix_downstream_delete(self, ldp_fec_prefix_longer=None, prefix_prefix=None, prefix_downstream=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		SLXOS: 16r.1.00b    

	**Parent Instance Keyword Arg Tuple(s)**:
		:param ldp_fec_prefix_longer: kwarg tuple.
		:type ldp_fec_prefix_longer: (prefix).

		:param prefix: tuple arg.
		:type prefix: (unicode)

		:param prefix_prefix: kwarg tuple.
		:type prefix_prefix: (prefix).

		:param prefix: tuple arg.
		:type prefix: (unicode)

	**This Instance Keyword Arg Tuple**:
		:param prefix_downstream: kwarg tuple.
		:type prefix_downstream: (local_ldp_id).

		:param local_ldp_id: tuple arg.
		:type local_ldp_id: (unicode)
		
		.. note::
			* pattern - (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = [('pybind.slxos.v16r_1_00b.mpls_state.ldp.fec.ldp_fec_prefix_longer', u'ldp_fec_prefix_longer'), ('pybind.slxos.v16r_1_00b.mpls_state.ldp.fec.ldp_fec_prefix_longer.prefix_prefix', u'prefix_prefix')]
    bindings_list = [('pybind.slxos.v16r_1_00b.mpls_state.ldp.fec.ldp_fec_prefix_longer.prefix_prefix.prefix_downstream', 'pybind.slxos.v16r_1_00b.brocade_mpls_operational', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'prefix', 'extra_keyval': ''}, {'keyval': 'prefix', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'prefix_downstream', 'keyval': 'local_ldp_id', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, ldp_fec_prefix_longer=ldp_fec_prefix_longer, prefix_prefix=prefix_prefix, prefix_downstream=prefix_downstream)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def mpls_state_ldp_fec_ldp_fec_prefix_longer_prefix_prefix_prefix_nexthops_delete(self, ldp_fec_prefix_longer=None, prefix_prefix=None, prefix_nexthops=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		SLXOS: 16r.1.00b    

	**Parent Instance Keyword Arg Tuple(s)**:
		:param ldp_fec_prefix_longer: kwarg tuple.
		:type ldp_fec_prefix_longer: (prefix).

		:param prefix: tuple arg.
		:type prefix: (unicode)

		:param prefix_prefix: kwarg tuple.
		:type prefix_prefix: (prefix).

		:param prefix: tuple arg.
		:type prefix: (unicode)

	**This Instance Keyword Arg Tuple**:
		:param prefix_nexthops: kwarg tuple.
		:type prefix_nexthops: (nexthop).

		:param nexthop: tuple arg.
		:type nexthop: (unicode)

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = [('pybind.slxos.v16r_1_00b.mpls_state.ldp.fec.ldp_fec_prefix_longer', u'ldp_fec_prefix_longer'), ('pybind.slxos.v16r_1_00b.mpls_state.ldp.fec.ldp_fec_prefix_longer.prefix_prefix', u'prefix_prefix')]
    bindings_list = [('pybind.slxos.v16r_1_00b.mpls_state.ldp.fec.ldp_fec_prefix_longer.prefix_prefix.prefix_nexthops', 'pybind.slxos.v16r_1_00b.brocade_mpls_operational', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'prefix', 'extra_keyval': ''}, {'keyval': 'prefix', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'prefix_nexthops', 'keyval': 'nexthop', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, ldp_fec_prefix_longer=ldp_fec_prefix_longer, prefix_prefix=prefix_prefix, prefix_nexthops=prefix_nexthops)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def mpls_state_ldp_fec_ldp_fec_prefix_longer_prefix_prefix_prefix_upstream_delete(self, ldp_fec_prefix_longer=None, prefix_prefix=None, prefix_upstream=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		SLXOS: 16r.1.00b    

	**Parent Instance Keyword Arg Tuple(s)**:
		:param ldp_fec_prefix_longer: kwarg tuple.
		:type ldp_fec_prefix_longer: (prefix).

		:param prefix: tuple arg.
		:type prefix: (unicode)

		:param prefix_prefix: kwarg tuple.
		:type prefix_prefix: (prefix).

		:param prefix: tuple arg.
		:type prefix: (unicode)

	**This Instance Keyword Arg Tuple**:
		:param prefix_upstream: kwarg tuple.
		:type prefix_upstream: (local_ldp_id).

		:param local_ldp_id: tuple arg.
		:type local_ldp_id: (unicode)
		
		.. note::
			* pattern - (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = [('pybind.slxos.v16r_1_00b.mpls_state.ldp.fec.ldp_fec_prefix_longer', u'ldp_fec_prefix_longer'), ('pybind.slxos.v16r_1_00b.mpls_state.ldp.fec.ldp_fec_prefix_longer.prefix_prefix', u'prefix_prefix')]
    bindings_list = [('pybind.slxos.v16r_1_00b.mpls_state.ldp.fec.ldp_fec_prefix_longer.prefix_prefix.prefix_upstream', 'pybind.slxos.v16r_1_00b.brocade_mpls_operational', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'prefix', 'extra_keyval': ''}, {'keyval': 'prefix', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'prefix_upstream', 'keyval': 'local_ldp_id', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, ldp_fec_prefix_longer=ldp_fec_prefix_longer, prefix_prefix=prefix_prefix, prefix_upstream=prefix_upstream)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def mpls_state_ldp_fec_ldp_fec_prefix_prefix_prefix_downstream_delete(self, prefix_downstream=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		SLXOS: 16r.1.00b    

	**This Instance Keyword Arg Tuple**:
		:param prefix_downstream: kwarg tuple.
		:type prefix_downstream: (local_ldp_id).

		:param local_ldp_id: tuple arg.
		:type local_ldp_id: (unicode)
		
		.. note::
			* pattern - (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = []
    bindings_list = [('pybind.slxos.v16r_1_00b.mpls_state.ldp.fec.ldp_fec_prefix_prefix.prefix_downstream', 'pybind.slxos.v16r_1_00b.brocade_mpls_operational', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = []
    bindings_keyval = {'kwargs_key_name': u'prefix_downstream', 'keyval': 'local_ldp_id', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, prefix_downstream=prefix_downstream)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def mpls_state_ldp_fec_ldp_fec_prefix_prefix_prefix_nexthops_delete(self, prefix_nexthops=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		SLXOS: 16r.1.00b    

	**This Instance Keyword Arg Tuple**:
		:param prefix_nexthops: kwarg tuple.
		:type prefix_nexthops: (nexthop).

		:param nexthop: tuple arg.
		:type nexthop: (unicode)

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = []
    bindings_list = [('pybind.slxos.v16r_1_00b.mpls_state.ldp.fec.ldp_fec_prefix_prefix.prefix_nexthops', 'pybind.slxos.v16r_1_00b.brocade_mpls_operational', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = []
    bindings_keyval = {'kwargs_key_name': u'prefix_nexthops', 'keyval': 'nexthop', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, prefix_nexthops=prefix_nexthops)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def mpls_state_ldp_fec_ldp_fec_prefix_prefix_prefix_upstream_delete(self, prefix_upstream=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		SLXOS: 16r.1.00b    

	**This Instance Keyword Arg Tuple**:
		:param prefix_upstream: kwarg tuple.
		:type prefix_upstream: (local_ldp_id).

		:param local_ldp_id: tuple arg.
		:type local_ldp_id: (unicode)
		
		.. note::
			* pattern - (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = []
    bindings_list = [('pybind.slxos.v16r_1_00b.mpls_state.ldp.fec.ldp_fec_prefix_prefix.prefix_upstream', 'pybind.slxos.v16r_1_00b.brocade_mpls_operational', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = []
    bindings_keyval = {'kwargs_key_name': u'prefix_upstream', 'keyval': 'local_ldp_id', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, prefix_upstream=prefix_upstream)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def mpls_state_ldp_fec_ldp_fec_prefixes_prefix_delete(self, prefix=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		SLXOS: 16r.1.00b    

	**This Instance Keyword Arg Tuple**:
		:param prefix: kwarg tuple.
		:type prefix: (destination).

		:param destination: tuple arg.
		:type destination: (unicode)

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = []
    bindings_list = [('pybind.slxos.v16r_1_00b.mpls_state.ldp.fec.ldp_fec_prefixes.prefix', 'pybind.slxos.v16r_1_00b.brocade_mpls_operational', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = []
    bindings_keyval = {'kwargs_key_name': u'prefix', 'keyval': 'destination', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, prefix=prefix)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def mpls_state_ldp_fec_ldp_fec_prefixes_prefix_nexthops_delete(self, prefix=None, nexthops=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		SLXOS: 16r.1.00b    

	**Parent Instance Keyword Arg Tuple(s)**:
		:param prefix: kwarg tuple.
		:type prefix: (destination).

		:param destination: tuple arg.
		:type destination: (unicode)

	**This Instance Keyword Arg Tuple**:
		:param nexthops: kwarg tuple.
		:type nexthops: (nexthop).

		:param nexthop: tuple arg.
		:type nexthop: (unicode)

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = [('pybind.slxos.v16r_1_00b.mpls_state.ldp.fec.ldp_fec_prefixes.prefix', u'prefix')]
    bindings_list = [('pybind.slxos.v16r_1_00b.mpls_state.ldp.fec.ldp_fec_prefixes.prefix.nexthops', 'pybind.slxos.v16r_1_00b.brocade_mpls_operational', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'destination', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'nexthops', 'keyval': 'nexthop', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, prefix=prefix, nexthops=nexthops)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def mpls_state_ldp_fec_ldp_fec_vcid_delete(self, ldp_fec_vcid=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		SLXOS: 16r.1.00b    

	**This Instance Keyword Arg Tuple**:
		:param ldp_fec_vcid: kwarg tuple.
		:type ldp_fec_vcid: (vc_id).

		:param vc_id: tuple arg.
		:type vc_id: (long)
		
		.. note::
			* range - ['0..4294967295']

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = []
    bindings_list = [('pybind.slxos.v16r_1_00b.mpls_state.ldp.fec.ldp_fec_vcid', 'pybind.slxos.v16r_1_00b.brocade_mpls_operational', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = []
    bindings_keyval = {'kwargs_key_name': u'ldp_fec_vcid', 'keyval': 'vc_id', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, ldp_fec_vcid=ldp_fec_vcid)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def mpls_state_ldp_fec_ldp_fec_vcid_vc_downstream_delete(self, ldp_fec_vcid=None, vc_downstream=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		SLXOS: 16r.1.00b    

	**Parent Instance Keyword Arg Tuple(s)**:
		:param ldp_fec_vcid: kwarg tuple.
		:type ldp_fec_vcid: (vc_id).

		:param vc_id: tuple arg.
		:type vc_id: (long)
		
		.. note::
			* range - ['0..4294967295']

	**This Instance Keyword Arg Tuple**:
		:param vc_downstream: kwarg tuple.
		:type vc_downstream: (local_ldp_id).

		:param local_ldp_id: tuple arg.
		:type local_ldp_id: (unicode)
		
		.. note::
			* pattern - (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = [('pybind.slxos.v16r_1_00b.mpls_state.ldp.fec.ldp_fec_vcid', u'ldp_fec_vcid')]
    bindings_list = [('pybind.slxos.v16r_1_00b.mpls_state.ldp.fec.ldp_fec_vcid.vc_downstream', 'pybind.slxos.v16r_1_00b.brocade_mpls_operational', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'vc_id', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'vc_downstream', 'keyval': 'local_ldp_id', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, ldp_fec_vcid=ldp_fec_vcid, vc_downstream=vc_downstream)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def mpls_state_ldp_fec_ldp_fec_vcid_vc_upstream_delete(self, ldp_fec_vcid=None, vc_upstream=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		SLXOS: 16r.1.00b    

	**Parent Instance Keyword Arg Tuple(s)**:
		:param ldp_fec_vcid: kwarg tuple.
		:type ldp_fec_vcid: (vc_id).

		:param vc_id: tuple arg.
		:type vc_id: (long)
		
		.. note::
			* range - ['0..4294967295']

	**This Instance Keyword Arg Tuple**:
		:param vc_upstream: kwarg tuple.
		:type vc_upstream: (local_ldp_id).

		:param local_ldp_id: tuple arg.
		:type local_ldp_id: (unicode)
		
		.. note::
			* pattern - (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = [('pybind.slxos.v16r_1_00b.mpls_state.ldp.fec.ldp_fec_vcid', u'ldp_fec_vcid')]
    bindings_list = [('pybind.slxos.v16r_1_00b.mpls_state.ldp.fec.ldp_fec_vcid.vc_upstream', 'pybind.slxos.v16r_1_00b.brocade_mpls_operational', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'vc_id', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'vc_upstream', 'keyval': 'local_ldp_id', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, ldp_fec_vcid=ldp_fec_vcid, vc_upstream=vc_upstream)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def mpls_state_ldp_fec_ldp_fec_vcs_vc_delete(self, vc=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		SLXOS: 16r.1.00b    

	**This Instance Keyword Arg Tuple**:
		:param vc: kwarg tuple.
		:type vc: (peer_id).

		:param peer_id: tuple arg.
		:type peer_id: (unicode)
		
		.. note::
			* pattern - (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = []
    bindings_list = [('pybind.slxos.v16r_1_00b.mpls_state.ldp.fec.ldp_fec_vcs.vc', 'pybind.slxos.v16r_1_00b.brocade_mpls_operational', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = []
    bindings_keyval = {'kwargs_key_name': u'vc', 'keyval': 'peer_id', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, vc=vc)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def mpls_state_ldp_interface_ldp_interface_data_delete(self, ldp_interface_data=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		SLXOS: 16r.1.00b    

	**This Instance Keyword Arg Tuple**:
		:param ldp_interface_data: kwarg tuple.
		:type ldp_interface_data: (ldp_interface_name, ldp_interface_type).

		:param ldp_interface_name: tuple arg.
		:type ldp_interface_name: (unicode)

		:param ldp_interface_type: tuple arg.
		:type ldp_interface_type: (unicode)

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = []
    bindings_list = [('pybind.slxos.v16r_1_00b.mpls_state.ldp.interface.ldp_interface_data', 'pybind.slxos.v16r_1_00b.brocade_mpls_operational', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = []
    bindings_keyval = {'kwargs_key_name': u'ldp_interface_data', 'keyval': 'ldp_interface_name, ldp_interface_type', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, ldp_interface_data=ldp_interface_data)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def mpls_state_ldp_ldp_database_delete(self, ldp_database=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		SLXOS: 16r.1.00b    

	**This Instance Keyword Arg Tuple**:
		:param ldp_database: kwarg tuple.
		:type ldp_database: (ldp_database_peer_ip).

		:param ldp_database_peer_ip: tuple arg.
		:type ldp_database_peer_ip: (unicode)
		
		.. note::
			* pattern - (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = []
    bindings_list = [('pybind.slxos.v16r_1_00b.mpls_state.ldp.ldp_database', 'pybind.slxos.v16r_1_00b.brocade_mpls_operational', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = []
    bindings_keyval = {'kwargs_key_name': u'ldp_database', 'keyval': 'ldp_database_peer_ip', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, ldp_database=ldp_database)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def mpls_state_ldp_ldp_database_mpls_ldp_database_downstream_delete(self, ldp_database=None, mpls_ldp_database_downstream=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		SLXOS: 16r.1.00b    

	**Parent Instance Keyword Arg Tuple(s)**:
		:param ldp_database: kwarg tuple.
		:type ldp_database: (ldp_database_peer_ip).

		:param ldp_database_peer_ip: tuple arg.
		:type ldp_database_peer_ip: (unicode)
		
		.. note::
			* pattern - (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?

	**This Instance Keyword Arg Tuple**:
		:param mpls_ldp_database_downstream: kwarg tuple.
		:type mpls_ldp_database_downstream: (mpls_ldp_database_ds_fec_prefix).

		:param mpls_ldp_database_ds_fec_prefix: tuple arg.
		:type mpls_ldp_database_ds_fec_prefix: (unicode)
		
		.. note::
			* pattern - (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = [('pybind.slxos.v16r_1_00b.mpls_state.ldp.ldp_database', u'ldp_database')]
    bindings_list = [('pybind.slxos.v16r_1_00b.mpls_state.ldp.ldp_database.mpls_ldp_database_downstream', 'pybind.slxos.v16r_1_00b.brocade_mpls_operational', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'ldp_database_peer_ip', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'mpls_ldp_database_downstream', 'keyval': 'mpls_ldp_database_ds_fec_prefix', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, ldp_database=ldp_database, mpls_ldp_database_downstream=mpls_ldp_database_downstream)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def mpls_state_ldp_ldp_database_mpls_ldp_database_upstream_delete(self, ldp_database=None, mpls_ldp_database_upstream=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		SLXOS: 16r.1.00b    

	**Parent Instance Keyword Arg Tuple(s)**:
		:param ldp_database: kwarg tuple.
		:type ldp_database: (ldp_database_peer_ip).

		:param ldp_database_peer_ip: tuple arg.
		:type ldp_database_peer_ip: (unicode)
		
		.. note::
			* pattern - (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?

	**This Instance Keyword Arg Tuple**:
		:param mpls_ldp_database_upstream: kwarg tuple.
		:type mpls_ldp_database_upstream: (mpls_ldp_database_us_fec_prefix).

		:param mpls_ldp_database_us_fec_prefix: tuple arg.
		:type mpls_ldp_database_us_fec_prefix: (unicode)
		
		.. note::
			* pattern - (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = [('pybind.slxos.v16r_1_00b.mpls_state.ldp.ldp_database', u'ldp_database')]
    bindings_list = [('pybind.slxos.v16r_1_00b.mpls_state.ldp.ldp_database.mpls_ldp_database_upstream', 'pybind.slxos.v16r_1_00b.brocade_mpls_operational', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'ldp_database_peer_ip', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'mpls_ldp_database_upstream', 'keyval': 'mpls_ldp_database_us_fec_prefix', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, ldp_database=ldp_database, mpls_ldp_database_upstream=mpls_ldp_database_upstream)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def mpls_state_ldp_ldp_neighbors_neighbor_delete(self, neighbor=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		SLXOS: 16r.1.00b    

	**This Instance Keyword Arg Tuple**:
		:param neighbor: kwarg tuple.
		:type neighbor: (neighbor_ldpid, labelspaceid).

		:param neighbor_ldpid: tuple arg.
		:type neighbor_ldpid: (unicode)
		
		.. note::
			* pattern - (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?

		:param labelspaceid: tuple arg.
		:type labelspaceid: (int)
		
		.. note::
			* range - ['0..255']

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = []
    bindings_list = [('pybind.slxos.v16r_1_00b.mpls_state.ldp.ldp_neighbors.neighbor', 'pybind.slxos.v16r_1_00b.brocade_mpls_operational', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = []
    bindings_keyval = {'kwargs_key_name': u'neighbor', 'keyval': 'neighbor_ldpid, labelspaceid', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, neighbor=neighbor)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def mpls_state_ldp_ldp_session_delete(self, ldp_session=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		SLXOS: 16r.1.00b    

	**This Instance Keyword Arg Tuple**:
		:param ldp_session: kwarg tuple.
		:type ldp_session: (peer_ldp_id).

		:param peer_ldp_id: tuple arg.
		:type peer_ldp_id: (unicode)

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = []
    bindings_list = [('pybind.slxos.v16r_1_00b.mpls_state.ldp.ldp_session', 'pybind.slxos.v16r_1_00b.brocade_mpls_operational', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = []
    bindings_keyval = {'kwargs_key_name': u'ldp_session', 'keyval': 'peer_ldp_id', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, ldp_session=ldp_session)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def mpls_state_ldp_ldp_session_filtered_fecs_in_delete(self, ldp_session=None, filtered_fecs_in=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		SLXOS: 16r.1.00b    

	**Parent Instance Keyword Arg Tuple(s)**:
		:param ldp_session: kwarg tuple.
		:type ldp_session: (peer_ldp_id).

		:param peer_ldp_id: tuple arg.
		:type peer_ldp_id: (unicode)

	**This Instance Keyword Arg Tuple**:
		:param filtered_fecs_in: kwarg tuple.
		:type filtered_fecs_in: (fec_addr).

		:param fec_addr: tuple arg.
		:type fec_addr: (unicode)
		
		.. note::
			* pattern - (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = [('pybind.slxos.v16r_1_00b.mpls_state.ldp.ldp_session', u'ldp_session')]
    bindings_list = [('pybind.slxos.v16r_1_00b.mpls_state.ldp.ldp_session.filtered_fecs_in', 'pybind.slxos.v16r_1_00b.brocade_mpls_operational', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'peer_ldp_id', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'filtered_fecs_in', 'keyval': 'fec_addr', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, ldp_session=ldp_session, filtered_fecs_in=filtered_fecs_in)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def mpls_state_ldp_ldp_session_filtered_fecs_out_delete(self, ldp_session=None, filtered_fecs_out=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		SLXOS: 16r.1.00b    

	**Parent Instance Keyword Arg Tuple(s)**:
		:param ldp_session: kwarg tuple.
		:type ldp_session: (peer_ldp_id).

		:param peer_ldp_id: tuple arg.
		:type peer_ldp_id: (unicode)

	**This Instance Keyword Arg Tuple**:
		:param filtered_fecs_out: kwarg tuple.
		:type filtered_fecs_out: (fec_addr).

		:param fec_addr: tuple arg.
		:type fec_addr: (unicode)
		
		.. note::
			* pattern - (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = [('pybind.slxos.v16r_1_00b.mpls_state.ldp.ldp_session', u'ldp_session')]
    bindings_list = [('pybind.slxos.v16r_1_00b.mpls_state.ldp.ldp_session.filtered_fecs_out', 'pybind.slxos.v16r_1_00b.brocade_mpls_operational', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'peer_ldp_id', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'filtered_fecs_out', 'keyval': 'fec_addr', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, ldp_session=ldp_session, filtered_fecs_out=filtered_fecs_out)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def mpls_state_ldp_ldp_session_session_ldp_stats_ldp_protocol_errors_instance_total_protocol_errors_delete(self, ldp_session=None, protocol_errors=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		SLXOS: 16r.1.00b    

	**Parent Instance Keyword Arg Tuple(s)**:
		:param ldp_session: kwarg tuple.
		:type ldp_session: (peer_ldp_id).

		:param peer_ldp_id: tuple arg.
		:type peer_ldp_id: (unicode)

	**This Instance Keyword Arg Tuple**:
		:param protocol_errors: kwarg tuple.
		:type protocol_errors: (error_type).

		:param error_type: tuple arg.
		:type error_type: (long)
		
		.. note::
			* range - ['0..4294967295']

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = [('pybind.slxos.v16r_1_00b.mpls_state.ldp.ldp_session', u'ldp_session')]
    bindings_list = [('pybind.slxos.v16r_1_00b.mpls_state.ldp.ldp_session.session_ldp_stats.ldp_protocol_errors_instance_total.protocol_errors', 'pybind.slxos.v16r_1_00b.brocade_mpls_operational', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'peer_ldp_id', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'protocol_errors', 'keyval': 'error_type', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, ldp_session=ldp_session, protocol_errors=protocol_errors)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def mpls_state_ldp_ldp_session_session_ldp_stats_ldp_protocol_stats_instance_total_protocol_stats_delete(self, ldp_session=None, protocol_stats=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		SLXOS: 16r.1.00b    

	**Parent Instance Keyword Arg Tuple(s)**:
		:param ldp_session: kwarg tuple.
		:type ldp_session: (peer_ldp_id).

		:param peer_ldp_id: tuple arg.
		:type peer_ldp_id: (unicode)

	**This Instance Keyword Arg Tuple**:
		:param protocol_stats: kwarg tuple.
		:type protocol_stats: (stat_type).

		:param stat_type: tuple arg.
		:type stat_type: (long)
		
		.. note::
			* range - ['0..4294967295']

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = [('pybind.slxos.v16r_1_00b.mpls_state.ldp.ldp_session', u'ldp_session')]
    bindings_list = [('pybind.slxos.v16r_1_00b.mpls_state.ldp.ldp_session.session_ldp_stats.ldp_protocol_stats_instance_total.protocol_stats', 'pybind.slxos.v16r_1_00b.brocade_mpls_operational', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'peer_ldp_id', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'protocol_stats', 'keyval': 'stat_type', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, ldp_session=ldp_session, protocol_stats=protocol_stats)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def mpls_state_ldp_path_delete(self, path=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		SLXOS: 16r.1.00b    

	**This Instance Keyword Arg Tuple**:
		:param path: kwarg tuple.
		:type path: (destination_route).

		:param destination_route: tuple arg.
		:type destination_route: (unicode)

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = []
    bindings_list = [('pybind.slxos.v16r_1_00b.mpls_state.ldp.path', 'pybind.slxos.v16r_1_00b.brocade_mpls_operational', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = []
    bindings_keyval = {'kwargs_key_name': u'path', 'keyval': 'destination_route', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, path=path)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def mpls_state_ldp_path_downstream_sessions_delete(self, path=None, downstream_sessions=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		SLXOS: 16r.1.00b    

	**Parent Instance Keyword Arg Tuple(s)**:
		:param path: kwarg tuple.
		:type path: (destination_route).

		:param destination_route: tuple arg.
		:type destination_route: (unicode)

	**This Instance Keyword Arg Tuple**:
		:param downstream_sessions: kwarg tuple.
		:type downstream_sessions: (ip).

		:param ip: tuple arg.
		:type ip: (unicode)
		
		.. note::
			* pattern - (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = [('pybind.slxos.v16r_1_00b.mpls_state.ldp.path', u'path')]
    bindings_list = [('pybind.slxos.v16r_1_00b.mpls_state.ldp.path.downstream_sessions', 'pybind.slxos.v16r_1_00b.brocade_mpls_operational', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'destination_route', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'downstream_sessions', 'keyval': 'ip', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, path=path, downstream_sessions=downstream_sessions)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def mpls_state_ldp_path_upstream_sessions_delete(self, path=None, upstream_sessions=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		SLXOS: 16r.1.00b    

	**Parent Instance Keyword Arg Tuple(s)**:
		:param path: kwarg tuple.
		:type path: (destination_route).

		:param destination_route: tuple arg.
		:type destination_route: (unicode)

	**This Instance Keyword Arg Tuple**:
		:param upstream_sessions: kwarg tuple.
		:type upstream_sessions: (ip).

		:param ip: tuple arg.
		:type ip: (unicode)
		
		.. note::
			* pattern - (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = [('pybind.slxos.v16r_1_00b.mpls_state.ldp.path', u'path')]
    bindings_list = [('pybind.slxos.v16r_1_00b.mpls_state.ldp.path.upstream_sessions', 'pybind.slxos.v16r_1_00b.brocade_mpls_operational', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'destination_route', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'upstream_sessions', 'keyval': 'ip', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, path=path, upstream_sessions=upstream_sessions)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def mpls_state_ldp_statistics_ldp_protocol_errors_instance_since_clear_protocol_errors_delete(self, protocol_errors=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		SLXOS: 16r.1.00b    

	**This Instance Keyword Arg Tuple**:
		:param protocol_errors: kwarg tuple.
		:type protocol_errors: (error_type).

		:param error_type: tuple arg.
		:type error_type: (long)
		
		.. note::
			* range - ['0..4294967295']

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = []
    bindings_list = [('pybind.slxos.v16r_1_00b.mpls_state.ldp.statistics.ldp_protocol_errors_instance_since_clear.protocol_errors', 'pybind.slxos.v16r_1_00b.brocade_mpls_operational', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = []
    bindings_keyval = {'kwargs_key_name': u'protocol_errors', 'keyval': 'error_type', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, protocol_errors=protocol_errors)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def mpls_state_ldp_statistics_ldp_protocol_errors_instance_total_protocol_errors_delete(self, protocol_errors=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		SLXOS: 16r.1.00b    

	**This Instance Keyword Arg Tuple**:
		:param protocol_errors: kwarg tuple.
		:type protocol_errors: (error_type).

		:param error_type: tuple arg.
		:type error_type: (long)
		
		.. note::
			* range - ['0..4294967295']

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = []
    bindings_list = [('pybind.slxos.v16r_1_00b.mpls_state.ldp.statistics.ldp_protocol_errors_instance_total.protocol_errors', 'pybind.slxos.v16r_1_00b.brocade_mpls_operational', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = []
    bindings_keyval = {'kwargs_key_name': u'protocol_errors', 'keyval': 'error_type', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, protocol_errors=protocol_errors)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def mpls_state_ldp_statistics_ldp_protocol_stats_instance_since_clear_protocol_stats_delete(self, protocol_stats=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		SLXOS: 16r.1.00b    

	**This Instance Keyword Arg Tuple**:
		:param protocol_stats: kwarg tuple.
		:type protocol_stats: (stat_type).

		:param stat_type: tuple arg.
		:type stat_type: (long)
		
		.. note::
			* range - ['0..4294967295']

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = []
    bindings_list = [('pybind.slxos.v16r_1_00b.mpls_state.ldp.statistics.ldp_protocol_stats_instance_since_clear.protocol_stats', 'pybind.slxos.v16r_1_00b.brocade_mpls_operational', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = []
    bindings_keyval = {'kwargs_key_name': u'protocol_stats', 'keyval': 'stat_type', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, protocol_stats=protocol_stats)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def mpls_state_ldp_statistics_ldp_protocol_stats_instance_total_protocol_stats_delete(self, protocol_stats=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		SLXOS: 16r.1.00b    

	**This Instance Keyword Arg Tuple**:
		:param protocol_stats: kwarg tuple.
		:type protocol_stats: (stat_type).

		:param stat_type: tuple arg.
		:type stat_type: (long)
		
		.. note::
			* range - ['0..4294967295']

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = []
    bindings_list = [('pybind.slxos.v16r_1_00b.mpls_state.ldp.statistics.ldp_protocol_stats_instance_total.protocol_stats', 'pybind.slxos.v16r_1_00b.brocade_mpls_operational', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = []
    bindings_keyval = {'kwargs_key_name': u'protocol_stats', 'keyval': 'stat_type', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, protocol_stats=protocol_stats)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def mpls_state_ldp_targeted_peer_delete(self, targeted_peer=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		SLXOS: 16r.1.00b    

	**This Instance Keyword Arg Tuple**:
		:param targeted_peer: kwarg tuple.
		:type targeted_peer: (mpls_ldp_targeted_peer_id).

		:param mpls_ldp_targeted_peer_id: tuple arg.
		:type mpls_ldp_targeted_peer_id: (unicode)
		
		.. note::
			* pattern - (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = []
    bindings_list = [('pybind.slxos.v16r_1_00b.mpls_state.ldp.targeted_peer', 'pybind.slxos.v16r_1_00b.brocade_mpls_operational', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = []
    bindings_keyval = {'kwargs_key_name': u'targeted_peer', 'keyval': 'mpls_ldp_targeted_peer_id', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, targeted_peer=targeted_peer)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def mpls_state_ldp_tunnels_ldp_tunnels_delete(self, ldp_tunnels=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		SLXOS: 16r.1.00b    

	**This Instance Keyword Arg Tuple**:
		:param ldp_tunnels: kwarg tuple.
		:type ldp_tunnels: (tunnel_destination, prefix_length).

		:param tunnel_destination: tuple arg.
		:type tunnel_destination: (unicode)
		
		.. note::
			* pattern - (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?

		:param prefix_length: tuple arg.
		:type prefix_length: (long)
		
		.. note::
			* range - ['0..4294967295']

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = []
    bindings_list = [('pybind.slxos.v16r_1_00b.mpls_state.ldp.tunnels.ldp_tunnels', 'pybind.slxos.v16r_1_00b.brocade_mpls_operational', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = []
    bindings_keyval = {'kwargs_key_name': u'ldp_tunnels', 'keyval': 'tunnel_destination, prefix_length', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, ldp_tunnels=ldp_tunnels)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def mpls_state_ldp_tunnels_ldp_tunnels_out_segments_delete(self, ldp_tunnels=None, out_segments=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		SLXOS: 16r.1.00b    

	**Parent Instance Keyword Arg Tuple(s)**:
		:param ldp_tunnels: kwarg tuple.
		:type ldp_tunnels: (tunnel_destination, prefix_length).

		:param tunnel_destination: tuple arg.
		:type tunnel_destination: (unicode)
		
		.. note::
			* pattern - (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?

		:param prefix_length: tuple arg.
		:type prefix_length: (long)
		
		.. note::
			* range - ['0..4294967295']

	**This Instance Keyword Arg Tuple**:
		:param out_segments: kwarg tuple.
		:type out_segments: (outgoing_interface).

		:param outgoing_interface: tuple arg.
		:type outgoing_interface: (unicode)

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = [('pybind.slxos.v16r_1_00b.mpls_state.ldp.tunnels.ldp_tunnels', u'ldp_tunnels')]
    bindings_list = [('pybind.slxos.v16r_1_00b.mpls_state.ldp.tunnels.ldp_tunnels.out_segments', 'pybind.slxos.v16r_1_00b.brocade_mpls_operational', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'tunnel_destination, prefix_length', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'out_segments', 'keyval': 'outgoing_interface', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, ldp_tunnels=ldp_tunnels, out_segments=out_segments)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def mpls_state_lsp_delete(self, lsp=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		SLXOS: 16r.1.00b    

	**This Instance Keyword Arg Tuple**:
		:param lsp: kwarg tuple.
		:type lsp: (lsp_name).

		:param lsp_name: tuple arg.
		:type lsp_name: (unicode)

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = []
    bindings_list = [('pybind.slxos.v16r_1_00b.mpls_state.lsp', 'pybind.slxos.v16r_1_00b.brocade_mpls_operational', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = []
    bindings_keyval = {'kwargs_key_name': u'lsp', 'keyval': 'lsp_name', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, lsp=lsp)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def mpls_state_lsp_backup_backup_ingress_delete(self, lsp=None, backup_ingress=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		SLXOS: 16r.1.00b    

	**Parent Instance Keyword Arg Tuple(s)**:
		:param lsp: kwarg tuple.
		:type lsp: (lsp_name).

		:param lsp_name: tuple arg.
		:type lsp_name: (unicode)

	**This Instance Keyword Arg Tuple**:
		:param backup_ingress: kwarg tuple.
		:type backup_ingress: (backup_from_address, backup_to_address, backup_name).

		:param backup_from_address: tuple arg.
		:type backup_from_address: (unicode)
		
		.. note::
			* pattern - (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?

		:param backup_to_address: tuple arg.
		:type backup_to_address: (unicode)
		
		.. note::
			* pattern - (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?

		:param backup_name: tuple arg.
		:type backup_name: (unicode)

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = [('pybind.slxos.v16r_1_00b.mpls_state.lsp', u'lsp')]
    bindings_list = [('pybind.slxos.v16r_1_00b.mpls_state.lsp.backup.backup_ingress', 'pybind.slxos.v16r_1_00b.brocade_mpls_operational', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'lsp_name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'backup_ingress', 'keyval': 'backup_from_address, backup_to_address, backup_name', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, lsp=lsp, backup_ingress=backup_ingress)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def mpls_state_lsp_backup_backup_transit_delete(self, lsp=None, backup_transit=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		SLXOS: 16r.1.00b    

	**Parent Instance Keyword Arg Tuple(s)**:
		:param lsp: kwarg tuple.
		:type lsp: (lsp_name).

		:param lsp_name: tuple arg.
		:type lsp_name: (unicode)

	**This Instance Keyword Arg Tuple**:
		:param backup_transit: kwarg tuple.
		:type backup_transit: (backup_from_address, backup_to_address, backup_name).

		:param backup_from_address: tuple arg.
		:type backup_from_address: (unicode)
		
		.. note::
			* pattern - (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?

		:param backup_to_address: tuple arg.
		:type backup_to_address: (unicode)
		
		.. note::
			* pattern - (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?

		:param backup_name: tuple arg.
		:type backup_name: (unicode)

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = [('pybind.slxos.v16r_1_00b.mpls_state.lsp', u'lsp')]
    bindings_list = [('pybind.slxos.v16r_1_00b.mpls_state.lsp.backup.backup_transit', 'pybind.slxos.v16r_1_00b.brocade_mpls_operational', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'lsp_name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'backup_transit', 'keyval': 'backup_from_address, backup_to_address, backup_name', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, lsp=lsp, backup_transit=backup_transit)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def mpls_state_lsp_frr_exclude_any_delete(self, lsp=None, exclude_any=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		SLXOS: 16r.1.00b    

	**Parent Instance Keyword Arg Tuple(s)**:
		:param lsp: kwarg tuple.
		:type lsp: (lsp_name).

		:param lsp_name: tuple arg.
		:type lsp_name: (unicode)

	**This Instance Keyword Arg Tuple**:
		:param exclude_any: kwarg tuple.
		:type exclude_any: (admin_group_id).

		:param admin_group_id: tuple arg.
		:type admin_group_id: (long)
		
		.. note::
			* range - ['0..4294967295']

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = [('pybind.slxos.v16r_1_00b.mpls_state.lsp', u'lsp')]
    bindings_list = [('pybind.slxos.v16r_1_00b.mpls_state.lsp.frr.exclude_any', 'pybind.slxos.v16r_1_00b.brocade_mpls_operational', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'lsp_name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'exclude_any', 'keyval': 'admin_group_id', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, lsp=lsp, exclude_any=exclude_any)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def mpls_state_lsp_frr_include_all_delete(self, lsp=None, include_all=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		SLXOS: 16r.1.00b    

	**Parent Instance Keyword Arg Tuple(s)**:
		:param lsp: kwarg tuple.
		:type lsp: (lsp_name).

		:param lsp_name: tuple arg.
		:type lsp_name: (unicode)

	**This Instance Keyword Arg Tuple**:
		:param include_all: kwarg tuple.
		:type include_all: (admin_group_id).

		:param admin_group_id: tuple arg.
		:type admin_group_id: (long)
		
		.. note::
			* range - ['0..4294967295']

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = [('pybind.slxos.v16r_1_00b.mpls_state.lsp', u'lsp')]
    bindings_list = [('pybind.slxos.v16r_1_00b.mpls_state.lsp.frr.include_all', 'pybind.slxos.v16r_1_00b.brocade_mpls_operational', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'lsp_name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'include_all', 'keyval': 'admin_group_id', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, lsp=lsp, include_all=include_all)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def mpls_state_lsp_frr_include_any_delete(self, lsp=None, include_any=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		SLXOS: 16r.1.00b    

	**Parent Instance Keyword Arg Tuple(s)**:
		:param lsp: kwarg tuple.
		:type lsp: (lsp_name).

		:param lsp_name: tuple arg.
		:type lsp_name: (unicode)

	**This Instance Keyword Arg Tuple**:
		:param include_any: kwarg tuple.
		:type include_any: (admin_group_id).

		:param admin_group_id: tuple arg.
		:type admin_group_id: (long)
		
		.. note::
			* range - ['0..4294967295']

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = [('pybind.slxos.v16r_1_00b.mpls_state.lsp', u'lsp')]
    bindings_list = [('pybind.slxos.v16r_1_00b.mpls_state.lsp.frr.include_any', 'pybind.slxos.v16r_1_00b.brocade_mpls_operational', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'lsp_name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'include_any', 'keyval': 'admin_group_id', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, lsp=lsp, include_any=include_any)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def mpls_state_lsp_instances_delete(self, lsp=None, instances=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		SLXOS: 16r.1.00b    

	**Parent Instance Keyword Arg Tuple(s)**:
		:param lsp: kwarg tuple.
		:type lsp: (lsp_name).

		:param lsp_name: tuple arg.
		:type lsp_name: (unicode)

	**This Instance Keyword Arg Tuple**:
		:param instances: kwarg tuple.
		:type instances: (instance_id, lsp_id).

		:param instance_id: tuple arg.
		:type instance_id: (long)
		
		.. note::
			* range - ['0..4294967295']

		:param lsp_id: tuple arg.
		:type lsp_id: (long)
		
		.. note::
			* range - ['0..4294967295']

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = [('pybind.slxos.v16r_1_00b.mpls_state.lsp', u'lsp')]
    bindings_list = [('pybind.slxos.v16r_1_00b.mpls_state.lsp.instances', 'pybind.slxos.v16r_1_00b.brocade_mpls_operational', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'lsp_name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'instances', 'keyval': 'instance_id, lsp_id', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, lsp=lsp, instances=instances)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def mpls_state_lsp_instances_config_exclude_any_delete(self, lsp=None, instances=None, config_exclude_any=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		SLXOS: 16r.1.00b    

	**Parent Instance Keyword Arg Tuple(s)**:
		:param lsp: kwarg tuple.
		:type lsp: (lsp_name).

		:param lsp_name: tuple arg.
		:type lsp_name: (unicode)

		:param instances: kwarg tuple.
		:type instances: (instance_id, lsp_id).

		:param instance_id: tuple arg.
		:type instance_id: (long)
		
		.. note::
			* range - ['0..4294967295']

		:param lsp_id: tuple arg.
		:type lsp_id: (long)
		
		.. note::
			* range - ['0..4294967295']

	**This Instance Keyword Arg Tuple**:
		:param config_exclude_any: kwarg tuple.
		:type config_exclude_any: (admin_group_id).

		:param admin_group_id: tuple arg.
		:type admin_group_id: (long)
		
		.. note::
			* range - ['0..4294967295']

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = [('pybind.slxos.v16r_1_00b.mpls_state.lsp', u'lsp'), ('pybind.slxos.v16r_1_00b.mpls_state.lsp.instances', u'instances')]
    bindings_list = [('pybind.slxos.v16r_1_00b.mpls_state.lsp.instances.config_exclude_any', 'pybind.slxos.v16r_1_00b.brocade_mpls_operational', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'lsp_name', 'extra_keyval': ''}, {'keyval': 'instance_id, lsp_id', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'config_exclude_any', 'keyval': 'admin_group_id', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, lsp=lsp, instances=instances, config_exclude_any=config_exclude_any)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def mpls_state_lsp_instances_config_exclude_interfaces_delete(self, lsp=None, instances=None, config_exclude_interfaces=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		SLXOS: 16r.1.00b    

	**Parent Instance Keyword Arg Tuple(s)**:
		:param lsp: kwarg tuple.
		:type lsp: (lsp_name).

		:param lsp_name: tuple arg.
		:type lsp_name: (unicode)

		:param instances: kwarg tuple.
		:type instances: (instance_id, lsp_id).

		:param instance_id: tuple arg.
		:type instance_id: (long)
		
		.. note::
			* range - ['0..4294967295']

		:param lsp_id: tuple arg.
		:type lsp_id: (long)
		
		.. note::
			* range - ['0..4294967295']

	**This Instance Keyword Arg Tuple**:
		:param config_exclude_interfaces: kwarg tuple.
		:type config_exclude_interfaces: (exclude_interface_name).

		:param exclude_interface_name: tuple arg.
		:type exclude_interface_name: (unicode)

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = [('pybind.slxos.v16r_1_00b.mpls_state.lsp', u'lsp'), ('pybind.slxos.v16r_1_00b.mpls_state.lsp.instances', u'instances')]
    bindings_list = [('pybind.slxos.v16r_1_00b.mpls_state.lsp.instances.config_exclude_interfaces', 'pybind.slxos.v16r_1_00b.brocade_mpls_operational', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'lsp_name', 'extra_keyval': ''}, {'keyval': 'instance_id, lsp_id', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'config_exclude_interfaces', 'keyval': 'exclude_interface_name', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, lsp=lsp, instances=instances, config_exclude_interfaces=config_exclude_interfaces)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def mpls_state_lsp_instances_config_frr_exclude_any_delete(self, lsp=None, instances=None, config_frr_exclude_any=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		SLXOS: 16r.1.00b    

	**Parent Instance Keyword Arg Tuple(s)**:
		:param lsp: kwarg tuple.
		:type lsp: (lsp_name).

		:param lsp_name: tuple arg.
		:type lsp_name: (unicode)

		:param instances: kwarg tuple.
		:type instances: (instance_id, lsp_id).

		:param instance_id: tuple arg.
		:type instance_id: (long)
		
		.. note::
			* range - ['0..4294967295']

		:param lsp_id: tuple arg.
		:type lsp_id: (long)
		
		.. note::
			* range - ['0..4294967295']

	**This Instance Keyword Arg Tuple**:
		:param config_frr_exclude_any: kwarg tuple.
		:type config_frr_exclude_any: (admin_group_id).

		:param admin_group_id: tuple arg.
		:type admin_group_id: (long)
		
		.. note::
			* range - ['0..4294967295']

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = [('pybind.slxos.v16r_1_00b.mpls_state.lsp', u'lsp'), ('pybind.slxos.v16r_1_00b.mpls_state.lsp.instances', u'instances')]
    bindings_list = [('pybind.slxos.v16r_1_00b.mpls_state.lsp.instances.config_frr_exclude_any', 'pybind.slxos.v16r_1_00b.brocade_mpls_operational', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'lsp_name', 'extra_keyval': ''}, {'keyval': 'instance_id, lsp_id', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'config_frr_exclude_any', 'keyval': 'admin_group_id', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, lsp=lsp, instances=instances, config_frr_exclude_any=config_frr_exclude_any)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def mpls_state_lsp_instances_config_frr_include_all_delete(self, lsp=None, instances=None, config_frr_include_all=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		SLXOS: 16r.1.00b    

	**Parent Instance Keyword Arg Tuple(s)**:
		:param lsp: kwarg tuple.
		:type lsp: (lsp_name).

		:param lsp_name: tuple arg.
		:type lsp_name: (unicode)

		:param instances: kwarg tuple.
		:type instances: (instance_id, lsp_id).

		:param instance_id: tuple arg.
		:type instance_id: (long)
		
		.. note::
			* range - ['0..4294967295']

		:param lsp_id: tuple arg.
		:type lsp_id: (long)
		
		.. note::
			* range - ['0..4294967295']

	**This Instance Keyword Arg Tuple**:
		:param config_frr_include_all: kwarg tuple.
		:type config_frr_include_all: (admin_group_id).

		:param admin_group_id: tuple arg.
		:type admin_group_id: (long)
		
		.. note::
			* range - ['0..4294967295']

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = [('pybind.slxos.v16r_1_00b.mpls_state.lsp', u'lsp'), ('pybind.slxos.v16r_1_00b.mpls_state.lsp.instances', u'instances')]
    bindings_list = [('pybind.slxos.v16r_1_00b.mpls_state.lsp.instances.config_frr_include_all', 'pybind.slxos.v16r_1_00b.brocade_mpls_operational', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'lsp_name', 'extra_keyval': ''}, {'keyval': 'instance_id, lsp_id', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'config_frr_include_all', 'keyval': 'admin_group_id', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, lsp=lsp, instances=instances, config_frr_include_all=config_frr_include_all)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def mpls_state_lsp_instances_config_frr_include_any_delete(self, lsp=None, instances=None, config_frr_include_any=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		SLXOS: 16r.1.00b    

	**Parent Instance Keyword Arg Tuple(s)**:
		:param lsp: kwarg tuple.
		:type lsp: (lsp_name).

		:param lsp_name: tuple arg.
		:type lsp_name: (unicode)

		:param instances: kwarg tuple.
		:type instances: (instance_id, lsp_id).

		:param instance_id: tuple arg.
		:type instance_id: (long)
		
		.. note::
			* range - ['0..4294967295']

		:param lsp_id: tuple arg.
		:type lsp_id: (long)
		
		.. note::
			* range - ['0..4294967295']

	**This Instance Keyword Arg Tuple**:
		:param config_frr_include_any: kwarg tuple.
		:type config_frr_include_any: (admin_group_id).

		:param admin_group_id: tuple arg.
		:type admin_group_id: (long)
		
		.. note::
			* range - ['0..4294967295']

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = [('pybind.slxos.v16r_1_00b.mpls_state.lsp', u'lsp'), ('pybind.slxos.v16r_1_00b.mpls_state.lsp.instances', u'instances')]
    bindings_list = [('pybind.slxos.v16r_1_00b.mpls_state.lsp.instances.config_frr_include_any', 'pybind.slxos.v16r_1_00b.brocade_mpls_operational', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'lsp_name', 'extra_keyval': ''}, {'keyval': 'instance_id, lsp_id', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'config_frr_include_any', 'keyval': 'admin_group_id', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, lsp=lsp, instances=instances, config_frr_include_any=config_frr_include_any)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def mpls_state_lsp_instances_config_include_all_delete(self, lsp=None, instances=None, config_include_all=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		SLXOS: 16r.1.00b    

	**Parent Instance Keyword Arg Tuple(s)**:
		:param lsp: kwarg tuple.
		:type lsp: (lsp_name).

		:param lsp_name: tuple arg.
		:type lsp_name: (unicode)

		:param instances: kwarg tuple.
		:type instances: (instance_id, lsp_id).

		:param instance_id: tuple arg.
		:type instance_id: (long)
		
		.. note::
			* range - ['0..4294967295']

		:param lsp_id: tuple arg.
		:type lsp_id: (long)
		
		.. note::
			* range - ['0..4294967295']

	**This Instance Keyword Arg Tuple**:
		:param config_include_all: kwarg tuple.
		:type config_include_all: (admin_group_id).

		:param admin_group_id: tuple arg.
		:type admin_group_id: (long)
		
		.. note::
			* range - ['0..4294967295']

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = [('pybind.slxos.v16r_1_00b.mpls_state.lsp', u'lsp'), ('pybind.slxos.v16r_1_00b.mpls_state.lsp.instances', u'instances')]
    bindings_list = [('pybind.slxos.v16r_1_00b.mpls_state.lsp.instances.config_include_all', 'pybind.slxos.v16r_1_00b.brocade_mpls_operational', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'lsp_name', 'extra_keyval': ''}, {'keyval': 'instance_id, lsp_id', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'config_include_all', 'keyval': 'admin_group_id', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, lsp=lsp, instances=instances, config_include_all=config_include_all)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def mpls_state_lsp_instances_config_include_any_delete(self, lsp=None, instances=None, config_include_any=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		SLXOS: 16r.1.00b    

	**Parent Instance Keyword Arg Tuple(s)**:
		:param lsp: kwarg tuple.
		:type lsp: (lsp_name).

		:param lsp_name: tuple arg.
		:type lsp_name: (unicode)

		:param instances: kwarg tuple.
		:type instances: (instance_id, lsp_id).

		:param instance_id: tuple arg.
		:type instance_id: (long)
		
		.. note::
			* range - ['0..4294967295']

		:param lsp_id: tuple arg.
		:type lsp_id: (long)
		
		.. note::
			* range - ['0..4294967295']

	**This Instance Keyword Arg Tuple**:
		:param config_include_any: kwarg tuple.
		:type config_include_any: (admin_group_id).

		:param admin_group_id: tuple arg.
		:type admin_group_id: (long)
		
		.. note::
			* range - ['0..4294967295']

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = [('pybind.slxos.v16r_1_00b.mpls_state.lsp', u'lsp'), ('pybind.slxos.v16r_1_00b.mpls_state.lsp.instances', u'instances')]
    bindings_list = [('pybind.slxos.v16r_1_00b.mpls_state.lsp.instances.config_include_any', 'pybind.slxos.v16r_1_00b.brocade_mpls_operational', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'lsp_name', 'extra_keyval': ''}, {'keyval': 'instance_id, lsp_id', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'config_include_any', 'keyval': 'admin_group_id', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, lsp=lsp, instances=instances, config_include_any=config_include_any)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def mpls_state_lsp_instances_cspf_exclude_hops_delete(self, lsp=None, instances=None, cspf_exclude_hops=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		SLXOS: 16r.1.00b    

	**Parent Instance Keyword Arg Tuple(s)**:
		:param lsp: kwarg tuple.
		:type lsp: (lsp_name).

		:param lsp_name: tuple arg.
		:type lsp_name: (unicode)

		:param instances: kwarg tuple.
		:type instances: (instance_id, lsp_id).

		:param instance_id: tuple arg.
		:type instance_id: (long)
		
		.. note::
			* range - ['0..4294967295']

		:param lsp_id: tuple arg.
		:type lsp_id: (long)
		
		.. note::
			* range - ['0..4294967295']

	**This Instance Keyword Arg Tuple**:
		:param cspf_exclude_hops: kwarg tuple.
		:type cspf_exclude_hops: (hop_index, hop_address).

		:param hop_index: tuple arg.
		:type hop_index: (long)
		
		.. note::
			* range - ['0..4294967295']

		:param hop_address: tuple arg.
		:type hop_address: (unicode)
		
		.. note::
			* pattern - (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = [('pybind.slxos.v16r_1_00b.mpls_state.lsp', u'lsp'), ('pybind.slxos.v16r_1_00b.mpls_state.lsp.instances', u'instances')]
    bindings_list = [('pybind.slxos.v16r_1_00b.mpls_state.lsp.instances.cspf_exclude_hops', 'pybind.slxos.v16r_1_00b.brocade_mpls_operational', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'lsp_name', 'extra_keyval': ''}, {'keyval': 'instance_id, lsp_id', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'cspf_exclude_hops', 'keyval': 'hop_index, hop_address', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, lsp=lsp, instances=instances, cspf_exclude_hops=cspf_exclude_hops)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def mpls_state_lsp_instances_cspf_path_hops_delete(self, lsp=None, instances=None, cspf_path_hops=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		SLXOS: 16r.1.00b    

	**Parent Instance Keyword Arg Tuple(s)**:
		:param lsp: kwarg tuple.
		:type lsp: (lsp_name).

		:param lsp_name: tuple arg.
		:type lsp_name: (unicode)

		:param instances: kwarg tuple.
		:type instances: (instance_id, lsp_id).

		:param instance_id: tuple arg.
		:type instance_id: (long)
		
		.. note::
			* range - ['0..4294967295']

		:param lsp_id: tuple arg.
		:type lsp_id: (long)
		
		.. note::
			* range - ['0..4294967295']

	**This Instance Keyword Arg Tuple**:
		:param cspf_path_hops: kwarg tuple.
		:type cspf_path_hops: (hop_index, hop_address).

		:param hop_index: tuple arg.
		:type hop_index: (long)
		
		.. note::
			* range - ['0..4294967295']

		:param hop_address: tuple arg.
		:type hop_address: (unicode)
		
		.. note::
			* pattern - (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = [('pybind.slxos.v16r_1_00b.mpls_state.lsp', u'lsp'), ('pybind.slxos.v16r_1_00b.mpls_state.lsp.instances', u'instances')]
    bindings_list = [('pybind.slxos.v16r_1_00b.mpls_state.lsp.instances.cspf_path_hops', 'pybind.slxos.v16r_1_00b.brocade_mpls_operational', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'lsp_name', 'extra_keyval': ''}, {'keyval': 'instance_id, lsp_id', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'cspf_path_hops', 'keyval': 'hop_index, hop_address', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, lsp=lsp, instances=instances, cspf_path_hops=cspf_path_hops)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def mpls_state_lsp_instances_rsvp_session_rro_hops_delete(self, lsp=None, instances=None, rsvp_session_rro_hops=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		SLXOS: 16r.1.00b    

	**Parent Instance Keyword Arg Tuple(s)**:
		:param lsp: kwarg tuple.
		:type lsp: (lsp_name).

		:param lsp_name: tuple arg.
		:type lsp_name: (unicode)

		:param instances: kwarg tuple.
		:type instances: (instance_id, lsp_id).

		:param instance_id: tuple arg.
		:type instance_id: (long)
		
		.. note::
			* range - ['0..4294967295']

		:param lsp_id: tuple arg.
		:type lsp_id: (long)
		
		.. note::
			* range - ['0..4294967295']

	**This Instance Keyword Arg Tuple**:
		:param rsvp_session_rro_hops: kwarg tuple.
		:type rsvp_session_rro_hops: (hop_index, hop_address).

		:param hop_index: tuple arg.
		:type hop_index: (long)
		
		.. note::
			* range - ['0..4294967295']

		:param hop_address: tuple arg.
		:type hop_address: (unicode)
		
		.. note::
			* pattern - (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = [('pybind.slxos.v16r_1_00b.mpls_state.lsp', u'lsp'), ('pybind.slxos.v16r_1_00b.mpls_state.lsp.instances', u'instances')]
    bindings_list = [('pybind.slxos.v16r_1_00b.mpls_state.lsp.instances.rsvp_session_rro_hops', 'pybind.slxos.v16r_1_00b.brocade_mpls_operational', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'lsp_name', 'extra_keyval': ''}, {'keyval': 'instance_id, lsp_id', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'rsvp_session_rro_hops', 'keyval': 'hop_index, hop_address', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, lsp=lsp, instances=instances, rsvp_session_rro_hops=rsvp_session_rro_hops)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def mpls_state_lsp_secondary_path_delete(self, lsp=None, secondary_path=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		SLXOS: 16r.1.00b    

	**Parent Instance Keyword Arg Tuple(s)**:
		:param lsp: kwarg tuple.
		:type lsp: (lsp_name).

		:param lsp_name: tuple arg.
		:type lsp_name: (unicode)

	**This Instance Keyword Arg Tuple**:
		:param secondary_path: kwarg tuple.
		:type secondary_path: (path_name).

		:param path_name: tuple arg.
		:type path_name: (unicode)

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = [('pybind.slxos.v16r_1_00b.mpls_state.lsp', u'lsp')]
    bindings_list = [('pybind.slxos.v16r_1_00b.mpls_state.lsp.secondary_path', 'pybind.slxos.v16r_1_00b.brocade_mpls_operational', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'lsp_name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'secondary_path', 'keyval': 'path_name', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, lsp=lsp, secondary_path=secondary_path)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def mpls_state_lsp_secondary_path_config_exclude_any_delete(self, lsp=None, secondary_path=None, config_exclude_any=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		SLXOS: 16r.1.00b    

	**Parent Instance Keyword Arg Tuple(s)**:
		:param lsp: kwarg tuple.
		:type lsp: (lsp_name).

		:param lsp_name: tuple arg.
		:type lsp_name: (unicode)

		:param secondary_path: kwarg tuple.
		:type secondary_path: (path_name).

		:param path_name: tuple arg.
		:type path_name: (unicode)

	**This Instance Keyword Arg Tuple**:
		:param config_exclude_any: kwarg tuple.
		:type config_exclude_any: (admin_group_id).

		:param admin_group_id: tuple arg.
		:type admin_group_id: (long)
		
		.. note::
			* range - ['0..4294967295']

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = [('pybind.slxos.v16r_1_00b.mpls_state.lsp', u'lsp'), ('pybind.slxos.v16r_1_00b.mpls_state.lsp.secondary_path', u'secondary_path')]
    bindings_list = [('pybind.slxos.v16r_1_00b.mpls_state.lsp.secondary_path.config_exclude_any', 'pybind.slxos.v16r_1_00b.brocade_mpls_operational', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'lsp_name', 'extra_keyval': ''}, {'keyval': 'path_name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'config_exclude_any', 'keyval': 'admin_group_id', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, lsp=lsp, secondary_path=secondary_path, config_exclude_any=config_exclude_any)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def mpls_state_lsp_secondary_path_config_include_all_delete(self, lsp=None, secondary_path=None, config_include_all=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		SLXOS: 16r.1.00b    

	**Parent Instance Keyword Arg Tuple(s)**:
		:param lsp: kwarg tuple.
		:type lsp: (lsp_name).

		:param lsp_name: tuple arg.
		:type lsp_name: (unicode)

		:param secondary_path: kwarg tuple.
		:type secondary_path: (path_name).

		:param path_name: tuple arg.
		:type path_name: (unicode)

	**This Instance Keyword Arg Tuple**:
		:param config_include_all: kwarg tuple.
		:type config_include_all: (admin_group_id).

		:param admin_group_id: tuple arg.
		:type admin_group_id: (long)
		
		.. note::
			* range - ['0..4294967295']

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = [('pybind.slxos.v16r_1_00b.mpls_state.lsp', u'lsp'), ('pybind.slxos.v16r_1_00b.mpls_state.lsp.secondary_path', u'secondary_path')]
    bindings_list = [('pybind.slxos.v16r_1_00b.mpls_state.lsp.secondary_path.config_include_all', 'pybind.slxos.v16r_1_00b.brocade_mpls_operational', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'lsp_name', 'extra_keyval': ''}, {'keyval': 'path_name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'config_include_all', 'keyval': 'admin_group_id', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, lsp=lsp, secondary_path=secondary_path, config_include_all=config_include_all)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def mpls_state_lsp_secondary_path_config_include_any_delete(self, lsp=None, secondary_path=None, config_include_any=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		SLXOS: 16r.1.00b    

	**Parent Instance Keyword Arg Tuple(s)**:
		:param lsp: kwarg tuple.
		:type lsp: (lsp_name).

		:param lsp_name: tuple arg.
		:type lsp_name: (unicode)

		:param secondary_path: kwarg tuple.
		:type secondary_path: (path_name).

		:param path_name: tuple arg.
		:type path_name: (unicode)

	**This Instance Keyword Arg Tuple**:
		:param config_include_any: kwarg tuple.
		:type config_include_any: (admin_group_id).

		:param admin_group_id: tuple arg.
		:type admin_group_id: (long)
		
		.. note::
			* range - ['0..4294967295']

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = [('pybind.slxos.v16r_1_00b.mpls_state.lsp', u'lsp'), ('pybind.slxos.v16r_1_00b.mpls_state.lsp.secondary_path', u'secondary_path')]
    bindings_list = [('pybind.slxos.v16r_1_00b.mpls_state.lsp.secondary_path.config_include_any', 'pybind.slxos.v16r_1_00b.brocade_mpls_operational', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'lsp_name', 'extra_keyval': ''}, {'keyval': 'path_name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'config_include_any', 'keyval': 'admin_group_id', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, lsp=lsp, secondary_path=secondary_path, config_include_any=config_include_any)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def mpls_state_memory_pools_delete(self, pools=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		SLXOS: 16r.1.00b    

	**This Instance Keyword Arg Tuple**:
		:param pools: kwarg tuple.
		:type pools: (pool_index).

		:param pool_index: tuple arg.
		:type pool_index: (long)
		
		.. note::
			* range - ['0..4294967295']

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = []
    bindings_list = [('pybind.slxos.v16r_1_00b.mpls_state.memory.pools', 'pybind.slxos.v16r_1_00b.brocade_mpls_operational', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = []
    bindings_keyval = {'kwargs_key_name': u'pools', 'keyval': 'pool_index', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, pools=pools)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def mpls_state_memory_pools_sub_pools_delete(self, pools=None, sub_pools=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		SLXOS: 16r.1.00b    

	**Parent Instance Keyword Arg Tuple(s)**:
		:param pools: kwarg tuple.
		:type pools: (pool_index).

		:param pool_index: tuple arg.
		:type pool_index: (long)
		
		.. note::
			* range - ['0..4294967295']

	**This Instance Keyword Arg Tuple**:
		:param sub_pools: kwarg tuple.
		:type sub_pools: (sub_pool_index).

		:param sub_pool_index: tuple arg.
		:type sub_pool_index: (long)
		
		.. note::
			* range - ['0..4294967295']

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = [('pybind.slxos.v16r_1_00b.mpls_state.memory.pools', u'pools')]
    bindings_list = [('pybind.slxos.v16r_1_00b.mpls_state.memory.pools.sub_pools', 'pybind.slxos.v16r_1_00b.brocade_mpls_operational', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'pool_index', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'sub_pools', 'keyval': 'sub_pool_index', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, pools=pools, sub_pools=sub_pools)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def mpls_state_memory_stats_delete(self, stats=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		SLXOS: 16r.1.00b    

	**This Instance Keyword Arg Tuple**:
		:param stats: kwarg tuple.
		:type stats: (mem_stats_index).

		:param mem_stats_index: tuple arg.
		:type mem_stats_index: (long)
		
		.. note::
			* range - ['0..4294967295']

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = []
    bindings_list = [('pybind.slxos.v16r_1_00b.mpls_state.memory.stats', 'pybind.slxos.v16r_1_00b.brocade_mpls_operational', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = []
    bindings_keyval = {'kwargs_key_name': u'stats', 'keyval': 'mem_stats_index', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, stats=stats)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def mpls_state_path_delete(self, path=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		SLXOS: 16r.1.00b    

	**This Instance Keyword Arg Tuple**:
		:param path: kwarg tuple.
		:type path: (path_name).

		:param path_name: tuple arg.
		:type path_name: (unicode)

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = []
    bindings_list = [('pybind.slxos.v16r_1_00b.mpls_state.path', 'pybind.slxos.v16r_1_00b.brocade_mpls_operational', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = []
    bindings_keyval = {'kwargs_key_name': u'path', 'keyval': 'path_name', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, path=path)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def mpls_state_path_path_hops_delete(self, path=None, path_hops=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		SLXOS: 16r.1.00b    

	**Parent Instance Keyword Arg Tuple(s)**:
		:param path: kwarg tuple.
		:type path: (path_name).

		:param path_name: tuple arg.
		:type path_name: (unicode)

	**This Instance Keyword Arg Tuple**:
		:param path_hops: kwarg tuple.
		:type path_hops: (hop_address).

		:param hop_address: tuple arg.
		:type hop_address: (unicode)
		
		.. note::
			* pattern - (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = [('pybind.slxos.v16r_1_00b.mpls_state.path', u'path')]
    bindings_list = [('pybind.slxos.v16r_1_00b.mpls_state.path.path_hops', 'pybind.slxos.v16r_1_00b.brocade_mpls_operational', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'path_name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'path_hops', 'keyval': 'hop_address', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, path=path, path_hops=path_hops)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def mpls_state_path_path_lsps_delete(self, path=None, path_lsps=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		SLXOS: 16r.1.00b    

	**Parent Instance Keyword Arg Tuple(s)**:
		:param path: kwarg tuple.
		:type path: (path_name).

		:param path_name: tuple arg.
		:type path_name: (unicode)

	**This Instance Keyword Arg Tuple**:
		:param path_lsps: kwarg tuple.
		:type path_lsps: (lsp_name).

		:param lsp_name: tuple arg.
		:type lsp_name: (unicode)

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = [('pybind.slxos.v16r_1_00b.mpls_state.path', u'path')]
    bindings_list = [('pybind.slxos.v16r_1_00b.mpls_state.path.path_lsps', 'pybind.slxos.v16r_1_00b.brocade_mpls_operational', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'path_name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'path_lsps', 'keyval': 'lsp_name', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, path=path, path_lsps=path_lsps)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def mpls_state_policy_admin_groups_delete(self, admin_groups=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		SLXOS: 16r.1.00b    

	**This Instance Keyword Arg Tuple**:
		:param admin_groups: kwarg tuple.
		:type admin_groups: (name).

		:param name: tuple arg.
		:type name: (unicode)

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = []
    bindings_list = [('pybind.slxos.v16r_1_00b.mpls_state.policy.admin_groups', 'pybind.slxos.v16r_1_00b.brocade_mpls_operational', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = []
    bindings_keyval = {'kwargs_key_name': u'admin_groups', 'keyval': 'name', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, admin_groups=admin_groups)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def mpls_state_policy_rsvp_flooding_thresholds_delete(self, rsvp_flooding_thresholds=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		SLXOS: 16r.1.00b    

	**This Instance Keyword Arg Tuple**:
		:param rsvp_flooding_thresholds: kwarg tuple.
		:type rsvp_flooding_thresholds: (threshold_type).

		:param threshold_type: tuple arg.
		:type threshold_type: (unicode)

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = []
    bindings_list = [('pybind.slxos.v16r_1_00b.mpls_state.policy.rsvp_flooding_thresholds', 'pybind.slxos.v16r_1_00b.brocade_mpls_operational', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = []
    bindings_keyval = {'kwargs_key_name': u'rsvp_flooding_thresholds', 'keyval': 'threshold_type', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, rsvp_flooding_thresholds=rsvp_flooding_thresholds)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def mpls_state_route_delete(self, route=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		SLXOS: 16r.1.00b    

	**This Instance Keyword Arg Tuple**:
		:param route: kwarg tuple.
		:type route: (entry_index).

		:param entry_index: tuple arg.
		:type entry_index: (long)
		
		.. note::
			* range - ['0..4294967295']

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = []
    bindings_list = [('pybind.slxos.v16r_1_00b.mpls_state.route', 'pybind.slxos.v16r_1_00b.brocade_mpls_operational', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = []
    bindings_keyval = {'kwargs_key_name': u'route', 'keyval': 'entry_index', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, route=route)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def mpls_state_rsvp_igp_sync_link_delete(self, link=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		SLXOS: 16r.1.00b    

	**This Instance Keyword Arg Tuple**:
		:param link: kwarg tuple.
		:type link: (ip_address, nbr_ip_address).

		:param ip_address: tuple arg.
		:type ip_address: (unicode)
		
		.. note::
			* pattern - (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?

		:param nbr_ip_address: tuple arg.
		:type nbr_ip_address: (unicode)
		
		.. note::
			* pattern - (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = []
    bindings_list = [('pybind.slxos.v16r_1_00b.mpls_state.rsvp.igp_sync.link', 'pybind.slxos.v16r_1_00b.brocade_mpls_operational', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = []
    bindings_keyval = {'kwargs_key_name': u'link', 'keyval': 'ip_address, nbr_ip_address', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, link=link)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def mpls_state_rsvp_igp_sync_link_lsp_delete(self, link=None, lsp=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		SLXOS: 16r.1.00b    

	**Parent Instance Keyword Arg Tuple(s)**:
		:param link: kwarg tuple.
		:type link: (ip_address, nbr_ip_address).

		:param ip_address: tuple arg.
		:type ip_address: (unicode)
		
		.. note::
			* pattern - (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?

		:param nbr_ip_address: tuple arg.
		:type nbr_ip_address: (unicode)
		
		.. note::
			* pattern - (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?

	**This Instance Keyword Arg Tuple**:
		:param lsp: kwarg tuple.
		:type lsp: (lsp_name, path_name).

		:param lsp_name: tuple arg.
		:type lsp_name: (unicode)

		:param path_name: tuple arg.
		:type path_name: (unicode)

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = [('pybind.slxos.v16r_1_00b.mpls_state.rsvp.igp_sync.link', u'link')]
    bindings_list = [('pybind.slxos.v16r_1_00b.mpls_state.rsvp.igp_sync.link.lsp', 'pybind.slxos.v16r_1_00b.brocade_mpls_operational', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'ip_address, nbr_ip_address', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'lsp', 'keyval': 'lsp_name, path_name', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, link=link, lsp=lsp)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def mpls_state_rsvp_igp_sync_link_lsp_cspf_hop_delete(self, link=None, lsp=None, cspf_hop=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		SLXOS: 16r.1.00b    

	**Parent Instance Keyword Arg Tuple(s)**:
		:param link: kwarg tuple.
		:type link: (ip_address, nbr_ip_address).

		:param ip_address: tuple arg.
		:type ip_address: (unicode)
		
		.. note::
			* pattern - (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?

		:param nbr_ip_address: tuple arg.
		:type nbr_ip_address: (unicode)
		
		.. note::
			* pattern - (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?

		:param lsp: kwarg tuple.
		:type lsp: (lsp_name, path_name).

		:param lsp_name: tuple arg.
		:type lsp_name: (unicode)

		:param path_name: tuple arg.
		:type path_name: (unicode)

	**This Instance Keyword Arg Tuple**:
		:param cspf_hop: kwarg tuple.
		:type cspf_hop: (index).

		:param index: tuple arg.
		:type index: (long)
		
		.. note::
			* range - ['0..4294967295']

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = [('pybind.slxos.v16r_1_00b.mpls_state.rsvp.igp_sync.link', u'link'), ('pybind.slxos.v16r_1_00b.mpls_state.rsvp.igp_sync.link.lsp', u'lsp')]
    bindings_list = [('pybind.slxos.v16r_1_00b.mpls_state.rsvp.igp_sync.link.lsp.cspf_hop', 'pybind.slxos.v16r_1_00b.brocade_mpls_operational', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'ip_address, nbr_ip_address', 'extra_keyval': ''}, {'keyval': 'lsp_name, path_name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'cspf_hop', 'keyval': 'index', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, link=link, lsp=lsp, cspf_hop=cspf_hop)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def mpls_state_rsvp_igp_sync_link_lsp_link_delete(self, link=None, lsp=None, link_=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		SLXOS: 16r.1.00b    

	**Parent Instance Keyword Arg Tuple(s)**:
		:param link: kwarg tuple.
		:type link: (ip_address, nbr_ip_address).

		:param ip_address: tuple arg.
		:type ip_address: (unicode)
		
		.. note::
			* pattern - (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?

		:param nbr_ip_address: tuple arg.
		:type nbr_ip_address: (unicode)
		
		.. note::
			* pattern - (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?

		:param lsp: kwarg tuple.
		:type lsp: (lsp_name, path_name).

		:param lsp_name: tuple arg.
		:type lsp_name: (unicode)

		:param path_name: tuple arg.
		:type path_name: (unicode)

	**This Instance Keyword Arg Tuple**:
		:param link_: kwarg tuple.
		:type link_: (index).

		:param index: tuple arg.
		:type index: (long)
		
		.. note::
			* range - ['0..4294967295']

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = [('pybind.slxos.v16r_1_00b.mpls_state.rsvp.igp_sync.link', u'link'), ('pybind.slxos.v16r_1_00b.mpls_state.rsvp.igp_sync.link.lsp', u'lsp')]
    bindings_list = [('pybind.slxos.v16r_1_00b.mpls_state.rsvp.igp_sync.link.lsp.link', 'pybind.slxos.v16r_1_00b.brocade_mpls_operational', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'ip_address, nbr_ip_address', 'extra_keyval': ''}, {'keyval': 'lsp_name, path_name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'link_', 'keyval': 'index', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, link=link, lsp=lsp, link_=link_)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def mpls_state_rsvp_igp_sync_link_lsp_rro_hop_delete(self, link=None, lsp=None, rro_hop=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		SLXOS: 16r.1.00b    

	**Parent Instance Keyword Arg Tuple(s)**:
		:param link: kwarg tuple.
		:type link: (ip_address, nbr_ip_address).

		:param ip_address: tuple arg.
		:type ip_address: (unicode)
		
		.. note::
			* pattern - (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?

		:param nbr_ip_address: tuple arg.
		:type nbr_ip_address: (unicode)
		
		.. note::
			* pattern - (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?

		:param lsp: kwarg tuple.
		:type lsp: (lsp_name, path_name).

		:param lsp_name: tuple arg.
		:type lsp_name: (unicode)

		:param path_name: tuple arg.
		:type path_name: (unicode)

	**This Instance Keyword Arg Tuple**:
		:param rro_hop: kwarg tuple.
		:type rro_hop: (index).

		:param index: tuple arg.
		:type index: (long)
		
		.. note::
			* range - ['0..4294967295']

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = [('pybind.slxos.v16r_1_00b.mpls_state.rsvp.igp_sync.link', u'link'), ('pybind.slxos.v16r_1_00b.mpls_state.rsvp.igp_sync.link.lsp', u'lsp')]
    bindings_list = [('pybind.slxos.v16r_1_00b.mpls_state.rsvp.igp_sync.link.lsp.rro_hop', 'pybind.slxos.v16r_1_00b.brocade_mpls_operational', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'ip_address, nbr_ip_address', 'extra_keyval': ''}, {'keyval': 'lsp_name, path_name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'rro_hop', 'keyval': 'index', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, link=link, lsp=lsp, rro_hop=rro_hop)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def mpls_state_rsvp_igp_sync_lsp_delete(self, lsp=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		SLXOS: 16r.1.00b    

	**This Instance Keyword Arg Tuple**:
		:param lsp: kwarg tuple.
		:type lsp: (lsp_name, path_name).

		:param lsp_name: tuple arg.
		:type lsp_name: (unicode)

		:param path_name: tuple arg.
		:type path_name: (unicode)

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = []
    bindings_list = [('pybind.slxos.v16r_1_00b.mpls_state.rsvp.igp_sync.lsp', 'pybind.slxos.v16r_1_00b.brocade_mpls_operational', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = []
    bindings_keyval = {'kwargs_key_name': u'lsp', 'keyval': 'lsp_name, path_name', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, lsp=lsp)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def mpls_state_rsvp_igp_sync_lsp_cspf_hop_delete(self, lsp=None, cspf_hop=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		SLXOS: 16r.1.00b    

	**Parent Instance Keyword Arg Tuple(s)**:
		:param lsp: kwarg tuple.
		:type lsp: (lsp_name, path_name).

		:param lsp_name: tuple arg.
		:type lsp_name: (unicode)

		:param path_name: tuple arg.
		:type path_name: (unicode)

	**This Instance Keyword Arg Tuple**:
		:param cspf_hop: kwarg tuple.
		:type cspf_hop: (index).

		:param index: tuple arg.
		:type index: (long)
		
		.. note::
			* range - ['0..4294967295']

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = [('pybind.slxos.v16r_1_00b.mpls_state.rsvp.igp_sync.lsp', u'lsp')]
    bindings_list = [('pybind.slxos.v16r_1_00b.mpls_state.rsvp.igp_sync.lsp.cspf_hop', 'pybind.slxos.v16r_1_00b.brocade_mpls_operational', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'lsp_name, path_name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'cspf_hop', 'keyval': 'index', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, lsp=lsp, cspf_hop=cspf_hop)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def mpls_state_rsvp_igp_sync_lsp_link_delete(self, lsp=None, link=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		SLXOS: 16r.1.00b    

	**Parent Instance Keyword Arg Tuple(s)**:
		:param lsp: kwarg tuple.
		:type lsp: (lsp_name, path_name).

		:param lsp_name: tuple arg.
		:type lsp_name: (unicode)

		:param path_name: tuple arg.
		:type path_name: (unicode)

	**This Instance Keyword Arg Tuple**:
		:param link: kwarg tuple.
		:type link: (index).

		:param index: tuple arg.
		:type index: (long)
		
		.. note::
			* range - ['0..4294967295']

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = [('pybind.slxos.v16r_1_00b.mpls_state.rsvp.igp_sync.lsp', u'lsp')]
    bindings_list = [('pybind.slxos.v16r_1_00b.mpls_state.rsvp.igp_sync.lsp.link', 'pybind.slxos.v16r_1_00b.brocade_mpls_operational', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'lsp_name, path_name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'link', 'keyval': 'index', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, lsp=lsp, link=link)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def mpls_state_rsvp_igp_sync_lsp_rro_hop_delete(self, lsp=None, rro_hop=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		SLXOS: 16r.1.00b    

	**Parent Instance Keyword Arg Tuple(s)**:
		:param lsp: kwarg tuple.
		:type lsp: (lsp_name, path_name).

		:param lsp_name: tuple arg.
		:type lsp_name: (unicode)

		:param path_name: tuple arg.
		:type path_name: (unicode)

	**This Instance Keyword Arg Tuple**:
		:param rro_hop: kwarg tuple.
		:type rro_hop: (index).

		:param index: tuple arg.
		:type index: (long)
		
		.. note::
			* range - ['0..4294967295']

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = [('pybind.slxos.v16r_1_00b.mpls_state.rsvp.igp_sync.lsp', u'lsp')]
    bindings_list = [('pybind.slxos.v16r_1_00b.mpls_state.rsvp.igp_sync.lsp.rro_hop', 'pybind.slxos.v16r_1_00b.brocade_mpls_operational', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'lsp_name, path_name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'rro_hop', 'keyval': 'index', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, lsp=lsp, rro_hop=rro_hop)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def mpls_state_rsvp_interfaces_delete(self, interfaces=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		SLXOS: 16r.1.00b    

	**This Instance Keyword Arg Tuple**:
		:param interfaces: kwarg tuple.
		:type interfaces: (interface_index).

		:param interface_index: tuple arg.
		:type interface_index: (long)
		
		.. note::
			* range - ['0..4294967295']

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = []
    bindings_list = [('pybind.slxos.v16r_1_00b.mpls_state.rsvp.interfaces', 'pybind.slxos.v16r_1_00b.brocade_mpls_operational', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = []
    bindings_keyval = {'kwargs_key_name': u'interfaces', 'keyval': 'interface_index', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, interfaces=interfaces)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def mpls_state_rsvp_neighbors_delete(self, neighbors=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		SLXOS: 16r.1.00b    

	**This Instance Keyword Arg Tuple**:
		:param neighbors: kwarg tuple.
		:type neighbors: (neighbor_ip_addr).

		:param neighbor_ip_addr: tuple arg.
		:type neighbor_ip_addr: (unicode)
		
		.. note::
			* pattern - (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = []
    bindings_list = [('pybind.slxos.v16r_1_00b.mpls_state.rsvp.neighbors', 'pybind.slxos.v16r_1_00b.brocade_mpls_operational', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = []
    bindings_keyval = {'kwargs_key_name': u'neighbors', 'keyval': 'neighbor_ip_addr', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, neighbors=neighbors)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def mpls_state_rsvp_sessions_delete(self, sessions=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		SLXOS: 16r.1.00b    

	**This Instance Keyword Arg Tuple**:
		:param sessions: kwarg tuple.
		:type sessions: (dest_ip_addr, src_ip_addr, tunnel_id, session_role).

		:param dest_ip_addr: tuple arg.
		:type dest_ip_addr: (unicode)
		
		.. note::
			* pattern - (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?

		:param src_ip_addr: tuple arg.
		:type src_ip_addr: (unicode)
		
		.. note::
			* pattern - (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?

		:param tunnel_id: tuple arg.
		:type tunnel_id: (int)
		
		.. note::
			* range - ['0..65535']

		:param session_role: tuple arg.
		:type session_role: (unicode)
		
		.. note::
			* enum - [u'session-role-transit', u'session-role-ingress', u'session-role-egress', u'session-role-unspecified']

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = []
    bindings_list = [('pybind.slxos.v16r_1_00b.mpls_state.rsvp.sessions', 'pybind.slxos.v16r_1_00b.brocade_mpls_operational', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = []
    bindings_keyval = {'kwargs_key_name': u'sessions', 'keyval': 'dest_ip_addr, src_ip_addr, tunnel_id, session_role', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, sessions=sessions)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def mpls_state_rsvp_sessions_psbs_delete(self, sessions=None, psbs=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		SLXOS: 16r.1.00b    

	**Parent Instance Keyword Arg Tuple(s)**:
		:param sessions: kwarg tuple.
		:type sessions: (dest_ip_addr, src_ip_addr, tunnel_id, session_role).

		:param dest_ip_addr: tuple arg.
		:type dest_ip_addr: (unicode)
		
		.. note::
			* pattern - (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?

		:param src_ip_addr: tuple arg.
		:type src_ip_addr: (unicode)
		
		.. note::
			* pattern - (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?

		:param tunnel_id: tuple arg.
		:type tunnel_id: (int)
		
		.. note::
			* range - ['0..65535']

		:param session_role: tuple arg.
		:type session_role: (unicode)
		
		.. note::
			* enum - [u'session-role-transit', u'session-role-ingress', u'session-role-egress', u'session-role-unspecified']

	**This Instance Keyword Arg Tuple**:
		:param psbs: kwarg tuple.
		:type psbs: (path_index).

		:param path_index: tuple arg.
		:type path_index: (long)
		
		.. note::
			* range - ['0..4294967295']

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = [('pybind.slxos.v16r_1_00b.mpls_state.rsvp.sessions', u'sessions')]
    bindings_list = [('pybind.slxos.v16r_1_00b.mpls_state.rsvp.sessions.psbs', 'pybind.slxos.v16r_1_00b.brocade_mpls_operational', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'dest_ip_addr, src_ip_addr, tunnel_id, session_role', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'psbs', 'keyval': 'path_index', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, sessions=sessions, psbs=psbs)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def mpls_state_rsvp_sessions_psbs_session_ero_hops_delete(self, sessions=None, psbs=None, session_ero_hops=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		SLXOS: 16r.1.00b    

	**Parent Instance Keyword Arg Tuple(s)**:
		:param sessions: kwarg tuple.
		:type sessions: (dest_ip_addr, src_ip_addr, tunnel_id, session_role).

		:param dest_ip_addr: tuple arg.
		:type dest_ip_addr: (unicode)
		
		.. note::
			* pattern - (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?

		:param src_ip_addr: tuple arg.
		:type src_ip_addr: (unicode)
		
		.. note::
			* pattern - (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?

		:param tunnel_id: tuple arg.
		:type tunnel_id: (int)
		
		.. note::
			* range - ['0..65535']

		:param session_role: tuple arg.
		:type session_role: (unicode)
		
		.. note::
			* enum - [u'session-role-transit', u'session-role-ingress', u'session-role-egress', u'session-role-unspecified']

		:param psbs: kwarg tuple.
		:type psbs: (path_index).

		:param path_index: tuple arg.
		:type path_index: (long)
		
		.. note::
			* range - ['0..4294967295']

	**This Instance Keyword Arg Tuple**:
		:param session_ero_hops: kwarg tuple.
		:type session_ero_hops: (ip_addr).

		:param ip_addr: tuple arg.
		:type ip_addr: (unicode)
		
		.. note::
			* pattern - (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = [('pybind.slxos.v16r_1_00b.mpls_state.rsvp.sessions', u'sessions'), ('pybind.slxos.v16r_1_00b.mpls_state.rsvp.sessions.psbs', u'psbs')]
    bindings_list = [('pybind.slxos.v16r_1_00b.mpls_state.rsvp.sessions.psbs.session_ero_hops', 'pybind.slxos.v16r_1_00b.brocade_mpls_operational', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'dest_ip_addr, src_ip_addr, tunnel_id, session_role', 'extra_keyval': ''}, {'keyval': 'path_index', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'session_ero_hops', 'keyval': 'ip_addr', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, sessions=sessions, psbs=psbs, session_ero_hops=session_ero_hops)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def mpls_state_rsvp_sessions_psbs_session_rro_hops_delete(self, sessions=None, psbs=None, session_rro_hops=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		SLXOS: 16r.1.00b    

	**Parent Instance Keyword Arg Tuple(s)**:
		:param sessions: kwarg tuple.
		:type sessions: (dest_ip_addr, src_ip_addr, tunnel_id, session_role).

		:param dest_ip_addr: tuple arg.
		:type dest_ip_addr: (unicode)
		
		.. note::
			* pattern - (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?

		:param src_ip_addr: tuple arg.
		:type src_ip_addr: (unicode)
		
		.. note::
			* pattern - (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?

		:param tunnel_id: tuple arg.
		:type tunnel_id: (int)
		
		.. note::
			* range - ['0..65535']

		:param session_role: tuple arg.
		:type session_role: (unicode)
		
		.. note::
			* enum - [u'session-role-transit', u'session-role-ingress', u'session-role-egress', u'session-role-unspecified']

		:param psbs: kwarg tuple.
		:type psbs: (path_index).

		:param path_index: tuple arg.
		:type path_index: (long)
		
		.. note::
			* range - ['0..4294967295']

	**This Instance Keyword Arg Tuple**:
		:param session_rro_hops: kwarg tuple.
		:type session_rro_hops: (ip_addr).

		:param ip_addr: tuple arg.
		:type ip_addr: (unicode)
		
		.. note::
			* pattern - (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = [('pybind.slxos.v16r_1_00b.mpls_state.rsvp.sessions', u'sessions'), ('pybind.slxos.v16r_1_00b.mpls_state.rsvp.sessions.psbs', u'psbs')]
    bindings_list = [('pybind.slxos.v16r_1_00b.mpls_state.rsvp.sessions.psbs.session_rro_hops', 'pybind.slxos.v16r_1_00b.brocade_mpls_operational', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'dest_ip_addr, src_ip_addr, tunnel_id, session_role', 'extra_keyval': ''}, {'keyval': 'path_index', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'session_rro_hops', 'keyval': 'ip_addr', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, sessions=sessions, psbs=psbs, session_rro_hops=session_rro_hops)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def mpls_state_statistics_oam_return_codes_delete(self, return_codes=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		SLXOS: 16r.1.00b    

	**This Instance Keyword Arg Tuple**:
		:param return_codes: kwarg tuple.
		:type return_codes: (number).

		:param number: tuple arg.
		:type number: (long)
		
		.. note::
			* range - ['0..4294967295']

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = []
    bindings_list = [('pybind.slxos.v16r_1_00b.mpls_state.statistics_oam.return_codes', 'pybind.slxos.v16r_1_00b.brocade_mpls_operational', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = []
    bindings_keyval = {'kwargs_key_name': u'return_codes', 'keyval': 'number', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, return_codes=return_codes)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def mpls_state_te_database_area_delete(self, area=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		SLXOS: 16r.1.00b    

	**This Instance Keyword Arg Tuple**:
		:param area: kwarg tuple.
		:type area: (area_id, level_id).

		:param area_id: tuple arg.
		:type area_id: (unicode)
		
		.. note::
			* pattern - (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?

		:param level_id: tuple arg.
		:type level_id: (long)
		
		.. note::
			* range - ['0..4294967295']

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = []
    bindings_list = [('pybind.slxos.v16r_1_00b.mpls_state.te.database.area', 'pybind.slxos.v16r_1_00b.brocade_mpls_operational', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = []
    bindings_keyval = {'kwargs_key_name': u'area', 'keyval': 'area_id, level_id', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, area=area)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def mpls_state_te_database_area_node_delete(self, area=None, node=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		SLXOS: 16r.1.00b    

	**Parent Instance Keyword Arg Tuple(s)**:
		:param area: kwarg tuple.
		:type area: (area_id, level_id).

		:param area_id: tuple arg.
		:type area_id: (unicode)
		
		.. note::
			* pattern - (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?

		:param level_id: tuple arg.
		:type level_id: (long)
		
		.. note::
			* range - ['0..4294967295']

	**This Instance Keyword Arg Tuple**:
		:param node: kwarg tuple.
		:type node: (local_node_id, local_router_id).

		:param local_node_id: tuple arg.
		:type local_node_id: (unicode)

		:param local_router_id: tuple arg.
		:type local_router_id: (unicode)
		
		.. note::
			* pattern - (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = [('pybind.slxos.v16r_1_00b.mpls_state.te.database.area', u'area')]
    bindings_list = [('pybind.slxos.v16r_1_00b.mpls_state.te.database.area.node', 'pybind.slxos.v16r_1_00b.brocade_mpls_operational', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'area_id, level_id', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'node', 'keyval': 'local_node_id, local_router_id', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, area=area, node=node)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def mpls_state_te_database_area_node_link_delete(self, area=None, node=None, link=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		SLXOS: 16r.1.00b    

	**Parent Instance Keyword Arg Tuple(s)**:
		:param area: kwarg tuple.
		:type area: (area_id, level_id).

		:param area_id: tuple arg.
		:type area_id: (unicode)
		
		.. note::
			* pattern - (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?

		:param level_id: tuple arg.
		:type level_id: (long)
		
		.. note::
			* range - ['0..4294967295']

		:param node: kwarg tuple.
		:type node: (local_node_id, local_router_id).

		:param local_node_id: tuple arg.
		:type local_node_id: (unicode)

		:param local_router_id: tuple arg.
		:type local_router_id: (unicode)
		
		.. note::
			* pattern - (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?

	**This Instance Keyword Arg Tuple**:
		:param link: kwarg tuple.
		:type link: (local_node_id, remote_node_id, local_router_id, remote_router_id, local_ip, remote_ip).

		:param local_node_id: tuple arg.
		:type local_node_id: (unicode)

		:param remote_node_id: tuple arg.
		:type remote_node_id: (unicode)

		:param local_router_id: tuple arg.
		:type local_router_id: (unicode)
		
		.. note::
			* pattern - (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?

		:param remote_router_id: tuple arg.
		:type remote_router_id: (unicode)
		
		.. note::
			* pattern - (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?

		:param local_ip: tuple arg.
		:type local_ip: (unicode)
		
		.. note::
			* pattern - (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?

		:param remote_ip: tuple arg.
		:type remote_ip: (unicode)
		
		.. note::
			* pattern - (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = [('pybind.slxos.v16r_1_00b.mpls_state.te.database.area', u'area'), ('pybind.slxos.v16r_1_00b.mpls_state.te.database.area.node', u'node')]
    bindings_list = [('pybind.slxos.v16r_1_00b.mpls_state.te.database.area.node.link', 'pybind.slxos.v16r_1_00b.brocade_mpls_operational', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'area_id, level_id', 'extra_keyval': ''}, {'keyval': 'local_node_id, local_router_id', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'link', 'keyval': 'local_node_id, remote_node_id, local_router_id, remote_router_id, local_ip, remote_ip', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, area=area, node=node, link=link)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def mpls_state_te_database_area_node_link_srlg_delete(self, area=None, node=None, link=None, srlg=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		SLXOS: 16r.1.00b    

	**Parent Instance Keyword Arg Tuple(s)**:
		:param area: kwarg tuple.
		:type area: (area_id, level_id).

		:param area_id: tuple arg.
		:type area_id: (unicode)
		
		.. note::
			* pattern - (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?

		:param level_id: tuple arg.
		:type level_id: (long)
		
		.. note::
			* range - ['0..4294967295']

		:param node: kwarg tuple.
		:type node: (local_node_id, local_router_id).

		:param local_node_id: tuple arg.
		:type local_node_id: (unicode)

		:param local_router_id: tuple arg.
		:type local_router_id: (unicode)
		
		.. note::
			* pattern - (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?

		:param link: kwarg tuple.
		:type link: (local_node_id, remote_node_id, local_router_id, remote_router_id, local_ip, remote_ip).

		:param local_node_id: tuple arg.
		:type local_node_id: (unicode)

		:param remote_node_id: tuple arg.
		:type remote_node_id: (unicode)

		:param local_router_id: tuple arg.
		:type local_router_id: (unicode)
		
		.. note::
			* pattern - (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?

		:param remote_router_id: tuple arg.
		:type remote_router_id: (unicode)
		
		.. note::
			* pattern - (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?

		:param local_ip: tuple arg.
		:type local_ip: (unicode)
		
		.. note::
			* pattern - (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?

		:param remote_ip: tuple arg.
		:type remote_ip: (unicode)
		
		.. note::
			* pattern - (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?

	**This Instance Keyword Arg Tuple**:
		:param srlg: kwarg tuple.
		:type srlg: (name).

		:param name: tuple arg.
		:type name: (unicode)

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = [('pybind.slxos.v16r_1_00b.mpls_state.te.database.area', u'area'), ('pybind.slxos.v16r_1_00b.mpls_state.te.database.area.node', u'node'), ('pybind.slxos.v16r_1_00b.mpls_state.te.database.area.node.link', u'link')]
    bindings_list = [('pybind.slxos.v16r_1_00b.mpls_state.te.database.area.node.link.srlg', 'pybind.slxos.v16r_1_00b.brocade_mpls_operational', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'area_id, level_id', 'extra_keyval': ''}, {'keyval': 'local_node_id, local_router_id', 'extra_keyval': ''}, {'keyval': 'local_node_id, remote_node_id, local_router_id, remote_router_id, local_ip, remote_ip', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'srlg', 'keyval': 'name', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, area=area, node=node, link=link, srlg=srlg)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def mpls_state_te_database_area_node_srlg_delete(self, area=None, node=None, srlg=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		SLXOS: 16r.1.00b    

	**Parent Instance Keyword Arg Tuple(s)**:
		:param area: kwarg tuple.
		:type area: (area_id, level_id).

		:param area_id: tuple arg.
		:type area_id: (unicode)
		
		.. note::
			* pattern - (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?

		:param level_id: tuple arg.
		:type level_id: (long)
		
		.. note::
			* range - ['0..4294967295']

		:param node: kwarg tuple.
		:type node: (local_node_id, local_router_id).

		:param local_node_id: tuple arg.
		:type local_node_id: (unicode)

		:param local_router_id: tuple arg.
		:type local_router_id: (unicode)
		
		.. note::
			* pattern - (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?

	**This Instance Keyword Arg Tuple**:
		:param srlg: kwarg tuple.
		:type srlg: (name).

		:param name: tuple arg.
		:type name: (unicode)

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = [('pybind.slxos.v16r_1_00b.mpls_state.te.database.area', u'area'), ('pybind.slxos.v16r_1_00b.mpls_state.te.database.area.node', u'node')]
    bindings_list = [('pybind.slxos.v16r_1_00b.mpls_state.te.database.area.node.srlg', 'pybind.slxos.v16r_1_00b.brocade_mpls_operational', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'area_id, level_id', 'extra_keyval': ''}, {'keyval': 'local_node_id, local_router_id', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'srlg', 'keyval': 'name', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, area=area, node=node, srlg=srlg)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def mpls_state_te_router_id_map_delete(self, router_id_map=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		SLXOS: 16r.1.00b    

	**This Instance Keyword Arg Tuple**:
		:param router_id_map: kwarg tuple.
		:type router_id_map: (ip_address).

		:param ip_address: tuple arg.
		:type ip_address: (unicode)
		
		.. note::
			* pattern - (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = []
    bindings_list = [('pybind.slxos.v16r_1_00b.mpls_state.te.router_id_map', 'pybind.slxos.v16r_1_00b.brocade_mpls_operational', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = []
    bindings_keyval = {'kwargs_key_name': u'router_id_map', 'keyval': 'ip_address', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, router_id_map=router_id_map)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def mpls_state_transit_traffic_statistics_delete(self, transit_traffic_statistics=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		SLXOS: 16r.1.00b    

	**This Instance Keyword Arg Tuple**:
		:param transit_traffic_statistics: kwarg tuple.
		:type transit_traffic_statistics: (in_label).

		:param in_label: tuple arg.
		:type in_label: (long)
		
		.. note::
			* range - ['0..4294967295']

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = []
    bindings_list = [('pybind.slxos.v16r_1_00b.mpls_state.transit_traffic_statistics', 'pybind.slxos.v16r_1_00b.brocade_mpls_operational', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = []
    bindings_keyval = {'kwargs_key_name': u'transit_traffic_statistics', 'keyval': 'in_label', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, transit_traffic_statistics=transit_traffic_statistics)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def mpls_state_tunnel_traffic_statistics_delete(self, tunnel_traffic_statistics=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		SLXOS: 16r.1.00b    

	**This Instance Keyword Arg Tuple**:
		:param tunnel_traffic_statistics: kwarg tuple.
		:type tunnel_traffic_statistics: (index).

		:param index: tuple arg.
		:type index: (long)
		
		.. note::
			* range - ['0..4294967295']

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = []
    bindings_list = [('pybind.slxos.v16r_1_00b.mpls_state.tunnel_traffic_statistics', 'pybind.slxos.v16r_1_00b.brocade_mpls_operational', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = []
    bindings_keyval = {'kwargs_key_name': u'tunnel_traffic_statistics', 'keyval': 'index', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, tunnel_traffic_statistics=tunnel_traffic_statistics)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def nas_server_ip_delete(self, server_ip=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		NOS: 6.0.2b, 7.0.1a, 7.1.0
		SLXOS: 16r.1.00b    

	**This Instance Keyword Arg Tuple**:
		:param server_ip: kwarg tuple.
		:type server_ip: (server_ip).

		:param server_ip: tuple arg.
		:type server_ip: (unicode)
		
		.. note::
			* pattern - (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])/(([0-9])|([1-2][0-9])|(3[0-2]))

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = []
    bindings_list = [('pybind.nos.v6_0_2b.nas.server_ip', 'pybind.nos.v6_0_2b.brocade_qos', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.nas.server_ip', 'pybind.nos.v7_0_1a.brocade_qos', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.nas.server_ip', 'pybind.nos.v7_1_0.brocade_qos', 'pybind.nos.v7_1_0'), ('pybind.slxos.v16r_1_00b.nas.server_ip', 'pybind.slxos.v16r_1_00b.brocade_qos_cee', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = []
    bindings_keyval = {'kwargs_key_name': u'server_ip', 'keyval': 'server_ip', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, server_ip=server_ip)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def nas_server_ip_vlan_delete(self, server_ip=None, vlan=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		NOS: 6.0.2b, 7.0.1a, 7.1.0
		SLXOS: 16r.1.00b    

	**Parent Instance Keyword Arg Tuple(s)**:
		:param server_ip: kwarg tuple.
		:type server_ip: (server_ip).

		:param server_ip: tuple arg.
		:type server_ip: (unicode)
		
		.. note::
			* pattern - (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])/(([0-9])|([1-2][0-9])|(3[0-2]))

	**This Instance Keyword Arg Tuple**:
		:param vlan: kwarg tuple.
		:type vlan: (vlan_number).

		:param vlan_number: tuple arg.
		:type vlan_number: (long)
		
		.. note::
			* range - ['0..4294967295']

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = [('pybind.slxos.v16r_1_00b.nas.server_ip', u'server_ip'), ('pybind.nos.v6_0_2b.nas.server_ip', u'server_ip'), ('pybind.nos.v7_0_1a.nas.server_ip', u'server_ip'), ('pybind.nos.v7_1_0.nas.server_ip', u'server_ip')]
    bindings_list = [('pybind.nos.v6_0_2b.nas.server_ip.vlan', 'pybind.nos.v6_0_2b.brocade_qos', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.nas.server_ip.vlan', 'pybind.nos.v7_0_1a.brocade_qos', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.nas.server_ip.vlan', 'pybind.nos.v7_1_0.brocade_qos', 'pybind.nos.v7_1_0'), ('pybind.slxos.v16r_1_00b.nas.server_ip.vlan', 'pybind.slxos.v16r_1_00b.brocade_qos_cee', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'server_ip', 'extra_keyval': ''}, {'keyval': 'server_ip', 'extra_keyval': ''}, {'keyval': 'server_ip', 'extra_keyval': ''}, {'keyval': 'server_ip', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'vlan', 'keyval': 'vlan_number', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, server_ip=server_ip, vlan=vlan)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def nas_server_ip_vrf_delete(self, server_ip=None, vrf=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		NOS: 6.0.2b, 7.0.1a, 7.1.0
		SLXOS: 16r.1.00b    

	**Parent Instance Keyword Arg Tuple(s)**:
		:param server_ip: kwarg tuple.
		:type server_ip: (server_ip).

		:param server_ip: tuple arg.
		:type server_ip: (unicode)
		
		.. note::
			* pattern - (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])/(([0-9])|([1-2][0-9])|(3[0-2]))

	**This Instance Keyword Arg Tuple**:
		:param vrf: kwarg tuple.
		:type vrf: (vrf_name).

		:param vrf_name: tuple arg.
		:type vrf_name: (unicode)
		
		.. note::
			* length - [u'1..255']

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = [('pybind.slxos.v16r_1_00b.nas.server_ip', u'server_ip'), ('pybind.nos.v7_1_0.nas.server_ip', u'server_ip'), ('pybind.nos.v7_0_1a.nas.server_ip', u'server_ip'), ('pybind.nos.v6_0_2b.nas.server_ip', u'server_ip')]
    bindings_list = [('pybind.nos.v6_0_2b.nas.server_ip.vrf', 'pybind.nos.v6_0_2b.brocade_qos', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.nas.server_ip.vrf', 'pybind.nos.v7_0_1a.brocade_qos', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.nas.server_ip.vrf', 'pybind.nos.v7_1_0.brocade_qos', 'pybind.nos.v7_1_0'), ('pybind.slxos.v16r_1_00b.nas.server_ip.vrf', 'pybind.slxos.v16r_1_00b.brocade_qos_cee', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'server_ip', 'extra_keyval': ''}, {'keyval': 'server_ip', 'extra_keyval': ''}, {'keyval': 'server_ip', 'extra_keyval': ''}, {'keyval': 'server_ip', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'vrf', 'keyval': 'vrf_name', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, server_ip=server_ip, vrf=vrf)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def nsx_controller_delete(self, nsx_controller=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		NOS: 6.0.2b, 7.0.1a, 7.1.0
		SLXOS: 16r.1.00b    

	**This Instance Keyword Arg Tuple**:
		:param nsx_controller: kwarg tuple.
		:type nsx_controller: (name).

		:param name: tuple arg.
		:type name: (unicode)
		
		.. note::
			* pattern - [-_a-zA-Z0-9]{1,32}

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = []
    bindings_list = [('pybind.nos.v6_0_2b.nsx_controller', 'pybind.nos.v6_0_2b.brocade_tunnels', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.nsx_controller', 'pybind.nos.v7_0_1a.brocade_tunnels', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.nsx_controller', 'pybind.nos.v7_1_0.brocade_tunnels', 'pybind.nos.v7_1_0'), ('pybind.slxos.v16r_1_00b.nsx_controller', 'pybind.slxos.v16r_1_00b.brocade_tunnels', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = []
    bindings_keyval = {'kwargs_key_name': 'nsx_controller', 'keyval': 'name', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, nsx_controller=nsx_controller)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def ntp_authentication_key_delete(self, authentication_key=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		NOS: 6.0.2b, 7.0.1a, 7.1.0
		SLXOS: 16r.1.00b    

	**This Instance Keyword Arg Tuple**:
		:param authentication_key: kwarg tuple.
		:type authentication_key: (keyid, md5, sha1, encryption_level).

		:param keyid: tuple arg.
		:type keyid: (long)
		
		.. note::
			* range - ['0..4294967295']

		:param md5: MD5 Encryption
		:type md5: (unicode)
		
		.. note::
			* length - [u'1 .. max']

		:param sha1: SHA1 Encryption
		:type sha1: (unicode)
		
		.. note::
			* length - [u'1 .. max']

		:param encryption_level: Level of encryption of the md5 key (default=7)
		:type encryption_level: (unicode)
		
		.. note::
			* enum - [u'0', u'7']

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = []
    bindings_list = [('pybind.nos.v6_0_2b.ntp.authentication_key', 'pybind.nos.v6_0_2b.brocade_ntp', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.ntp.authentication_key', 'pybind.nos.v7_0_1a.brocade_ntp', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.ntp.authentication_key', 'pybind.nos.v7_1_0.brocade_ntp', 'pybind.nos.v7_1_0'), ('pybind.slxos.v16r_1_00b.ntp.authentication_key', 'pybind.slxos.v16r_1_00b.brocade_ntp', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = []
    bindings_keyval = {'kwargs_key_name': u'authentication_key', 'keyval': 'keyid', 'extra_keyval': 'keyid, md5, sha1, encryption_level'}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, authentication_key=authentication_key)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def ntp_server_delete(self, server=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		NOS: 6.0.2b, 7.0.1a, 7.1.0
		SLXOS: 16r.1.00b    

	**This Instance Keyword Arg Tuple**:
		:param server: kwarg tuple.
		:type server: (ip).

		:param ip: Network Time Protocol server ip address(es)
		:type ip: (unicode)
		
		.. note::
			* pattern - (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = []
    bindings_list = [('pybind.nos.v6_0_2b.ntp.server', 'pybind.nos.v6_0_2b.brocade_ntp', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.ntp.server', 'pybind.nos.v7_0_1a.brocade_ntp', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.ntp.server', 'pybind.nos.v7_1_0.brocade_ntp', 'pybind.nos.v7_1_0'), ('pybind.slxos.v16r_1_00b.ntp.server', 'pybind.slxos.v16r_1_00b.brocade_ntp', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = []
    bindings_keyval = {'kwargs_key_name': u'server', 'keyval': 'ip, use_vrf', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, server=server)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def openflow_controller_delete(self, openflow_controller=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		NOS: 6.0.2b, 7.0.1a, 7.1.0
		SLXOS: 16r.1.00b    

	**This Instance Keyword Arg Tuple**:
		:param openflow_controller: kwarg tuple.
		:type openflow_controller: (controller_name).

		:param controller_name: tuple arg.
		:type controller_name: (unicode)
		
		.. note::
			* pattern - [-_a-zA-Z0-9]{1,32}

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = []
    bindings_list = [('pybind.nos.v6_0_2b.openflow_controller', 'pybind.nos.v6_0_2b.brocade_openflow', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.openflow_controller', 'pybind.nos.v7_0_1a.brocade_openflow', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.openflow_controller', 'pybind.nos.v7_1_0.brocade_openflow', 'pybind.nos.v7_1_0'), ('pybind.slxos.v16r_1_00b.openflow_global.openflow.controller', 'pybind.slxos.v16r_1_00b.brocade_openflow', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = []
    bindings_keyval = {'kwargs_key_name': u'controller', 'keyval': 'controller_name', 'extra_keyval': 'controller_name'}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, openflow_controller=openflow_controller)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def openflow_state_controller_delete(self, controller=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		SLXOS: 16r.1.00b    

	**This Instance Keyword Arg Tuple**:
		:param controller: kwarg tuple.
		:type controller: (name).

		:param name: tuple arg.
		:type name: (unicode)

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = []
    bindings_list = [('pybind.slxos.v16r_1_00b.openflow_state.controller', 'pybind.slxos.v16r_1_00b.brocade_openflow_operational', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = []
    bindings_keyval = {'kwargs_key_name': u'controller', 'keyval': 'name', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, controller=controller)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def openflow_state_detail_controller_detail_list_delete(self, controller_detail_list=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		SLXOS: 16r.1.00b    

	**This Instance Keyword Arg Tuple**:
		:param controller_detail_list: kwarg tuple.
		:type controller_detail_list: (controller_idx).

		:param controller_idx: tuple arg.
		:type controller_idx: (long)
		
		.. note::
			* range - ['0..4294967295']

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = []
    bindings_list = [('pybind.slxos.v16r_1_00b.openflow_state.detail.controller_detail_list', 'pybind.slxos.v16r_1_00b.brocade_openflow_operational', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = []
    bindings_keyval = {'kwargs_key_name': u'controller_detail_list', 'keyval': 'controller_idx', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, controller_detail_list=controller_detail_list)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def openflow_state_detail_controller_detail_list_controller_async_list_delete(self, controller_detail_list=None, controller_async_list=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		SLXOS: 16r.1.00b    

	**Parent Instance Keyword Arg Tuple(s)**:
		:param controller_detail_list: kwarg tuple.
		:type controller_detail_list: (controller_idx).

		:param controller_idx: tuple arg.
		:type controller_idx: (long)
		
		.. note::
			* range - ['0..4294967295']

	**This Instance Keyword Arg Tuple**:
		:param controller_async_list: kwarg tuple.
		:type controller_async_list: (async_type).

		:param async_type: tuple arg.
		:type async_type: (unicode)
		
		.. note::
			* enum - [u'dcm-async-invalid', u'dcm-packet-in', u'dcm-port-status', u'dcm-flow-removed']

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = [('pybind.slxos.v16r_1_00b.openflow_state.detail.controller_detail_list', u'controller_detail_list')]
    bindings_list = [('pybind.slxos.v16r_1_00b.openflow_state.detail.controller_detail_list.controller_async_list', 'pybind.slxos.v16r_1_00b.brocade_openflow_operational', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'controller_idx', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'controller_async_list', 'keyval': 'async_type', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, controller_detail_list=controller_detail_list, controller_async_list=controller_async_list)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def openflow_state_detail_hybrid_interfaces_delete(self, hybrid_interfaces=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		SLXOS: 16r.1.00b    

	**This Instance Keyword Arg Tuple**:
		:param hybrid_interfaces: kwarg tuple.
		:type hybrid_interfaces: (hybrid_interface).

		:param hybrid_interface: tuple arg.
		:type hybrid_interface: (unicode)

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = []
    bindings_list = [('pybind.slxos.v16r_1_00b.openflow_state.detail.hybrid_interfaces', 'pybind.slxos.v16r_1_00b.brocade_openflow_operational', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = []
    bindings_keyval = {'kwargs_key_name': u'hybrid_interfaces', 'keyval': 'hybrid_interface', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, hybrid_interfaces=hybrid_interfaces)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def openflow_state_flow_flow_info_list_delete(self, flow_info_list=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		SLXOS: 16r.1.00b    

	**This Instance Keyword Arg Tuple**:
		:param flow_info_list: kwarg tuple.
		:type flow_info_list: (flow_id).

		:param flow_id: tuple arg.
		:type flow_id: (long)
		
		.. note::
			* range - ['0..4294967295']

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = []
    bindings_list = [('pybind.slxos.v16r_1_00b.openflow_state.flow.flow_info_list', 'pybind.slxos.v16r_1_00b.brocade_openflow_operational', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = []
    bindings_keyval = {'kwargs_key_name': u'flow_info_list', 'keyval': 'flow_id', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, flow_info_list=flow_info_list)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def openflow_state_flow_flow_info_list_flow_action_list_delete(self, flow_info_list=None, flow_action_list=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		SLXOS: 16r.1.00b    

	**Parent Instance Keyword Arg Tuple(s)**:
		:param flow_info_list: kwarg tuple.
		:type flow_info_list: (flow_id).

		:param flow_id: tuple arg.
		:type flow_id: (long)
		
		.. note::
			* range - ['0..4294967295']

	**This Instance Keyword Arg Tuple**:
		:param flow_action_list: kwarg tuple.
		:type flow_action_list: (action_idx).

		:param action_idx: tuple arg.
		:type action_idx: (long)
		
		.. note::
			* range - ['0..4294967295']

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = [('pybind.slxos.v16r_1_00b.openflow_state.flow.flow_info_list', u'flow_info_list')]
    bindings_list = [('pybind.slxos.v16r_1_00b.openflow_state.flow.flow_info_list.flow_action_list', 'pybind.slxos.v16r_1_00b.brocade_openflow_operational', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'flow_id', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'flow_action_list', 'keyval': 'action_idx', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, flow_info_list=flow_info_list, flow_action_list=flow_action_list)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def openflow_state_flow_id_flow_action_list_delete(self, flow_action_list=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		SLXOS: 16r.1.00b    

	**This Instance Keyword Arg Tuple**:
		:param flow_action_list: kwarg tuple.
		:type flow_action_list: (action_idx).

		:param action_idx: tuple arg.
		:type action_idx: (long)
		
		.. note::
			* range - ['0..4294967295']

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = []
    bindings_list = [('pybind.slxos.v16r_1_00b.openflow_state.flow_id.flow_action_list', 'pybind.slxos.v16r_1_00b.brocade_openflow_operational', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = []
    bindings_keyval = {'kwargs_key_name': u'flow_action_list', 'keyval': 'action_idx', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, flow_action_list=flow_action_list)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def openflow_state_flow_interface_delete(self, flow_interface=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		SLXOS: 16r.1.00b    

	**This Instance Keyword Arg Tuple**:
		:param flow_interface: kwarg tuple.
		:type flow_interface: (interface_type, interface_value).

		:param interface_type: tuple arg.
		:type interface_type: (long)
		
		.. note::
			* range - ['0..4294967295']

		:param interface_value: tuple arg.
		:type interface_value: (unicode)

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = []
    bindings_list = [('pybind.slxos.v16r_1_00b.openflow_state.flow_interface', 'pybind.slxos.v16r_1_00b.brocade_openflow_operational', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = []
    bindings_keyval = {'kwargs_key_name': u'flow_interface', 'keyval': 'interface_type, interface_value', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, flow_interface=flow_interface)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def openflow_state_flow_interface_flow_info_list_delete(self, flow_interface=None, flow_info_list=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		SLXOS: 16r.1.00b    

	**Parent Instance Keyword Arg Tuple(s)**:
		:param flow_interface: kwarg tuple.
		:type flow_interface: (interface_type, interface_value).

		:param interface_type: tuple arg.
		:type interface_type: (long)
		
		.. note::
			* range - ['0..4294967295']

		:param interface_value: tuple arg.
		:type interface_value: (unicode)

	**This Instance Keyword Arg Tuple**:
		:param flow_info_list: kwarg tuple.
		:type flow_info_list: (flow_id).

		:param flow_id: tuple arg.
		:type flow_id: (long)
		
		.. note::
			* range - ['0..4294967295']

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = [('pybind.slxos.v16r_1_00b.openflow_state.flow_interface', u'flow_interface')]
    bindings_list = [('pybind.slxos.v16r_1_00b.openflow_state.flow_interface.flow_info_list', 'pybind.slxos.v16r_1_00b.brocade_openflow_operational', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'interface_type, interface_value', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'flow_info_list', 'keyval': 'flow_id', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, flow_interface=flow_interface, flow_info_list=flow_info_list)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def openflow_state_flow_interface_flow_info_list_flow_action_list_delete(self, flow_interface=None, flow_info_list=None, flow_action_list=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		SLXOS: 16r.1.00b    

	**Parent Instance Keyword Arg Tuple(s)**:
		:param flow_interface: kwarg tuple.
		:type flow_interface: (interface_type, interface_value).

		:param interface_type: tuple arg.
		:type interface_type: (long)
		
		.. note::
			* range - ['0..4294967295']

		:param interface_value: tuple arg.
		:type interface_value: (unicode)

		:param flow_info_list: kwarg tuple.
		:type flow_info_list: (flow_id).

		:param flow_id: tuple arg.
		:type flow_id: (long)
		
		.. note::
			* range - ['0..4294967295']

	**This Instance Keyword Arg Tuple**:
		:param flow_action_list: kwarg tuple.
		:type flow_action_list: (action_idx).

		:param action_idx: tuple arg.
		:type action_idx: (long)
		
		.. note::
			* range - ['0..4294967295']

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = [('pybind.slxos.v16r_1_00b.openflow_state.flow_interface', u'flow_interface'), ('pybind.slxos.v16r_1_00b.openflow_state.flow_interface.flow_info_list', u'flow_info_list')]
    bindings_list = [('pybind.slxos.v16r_1_00b.openflow_state.flow_interface.flow_info_list.flow_action_list', 'pybind.slxos.v16r_1_00b.brocade_openflow_operational', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'interface_type, interface_value', 'extra_keyval': ''}, {'keyval': 'flow_id', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'flow_action_list', 'keyval': 'action_idx', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, flow_interface=flow_interface, flow_info_list=flow_info_list, flow_action_list=flow_action_list)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def openflow_state_group_group_info_list_delete(self, group_info_list=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		SLXOS: 16r.1.00b    

	**This Instance Keyword Arg Tuple**:
		:param group_info_list: kwarg tuple.
		:type group_info_list: (group_id).

		:param group_id: tuple arg.
		:type group_id: (long)
		
		.. note::
			* range - ['0..4294967295']

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = []
    bindings_list = [('pybind.slxos.v16r_1_00b.openflow_state.group.group_info_list', 'pybind.slxos.v16r_1_00b.brocade_openflow_operational', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = []
    bindings_keyval = {'kwargs_key_name': u'group_info_list', 'keyval': 'group_id', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, group_info_list=group_info_list)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def openflow_state_group_group_info_list_group_bucket_list_delete(self, group_info_list=None, group_bucket_list=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		SLXOS: 16r.1.00b    

	**Parent Instance Keyword Arg Tuple(s)**:
		:param group_info_list: kwarg tuple.
		:type group_info_list: (group_id).

		:param group_id: tuple arg.
		:type group_id: (long)
		
		.. note::
			* range - ['0..4294967295']

	**This Instance Keyword Arg Tuple**:
		:param group_bucket_list: kwarg tuple.
		:type group_bucket_list: (bucket_id).

		:param bucket_id: tuple arg.
		:type bucket_id: (long)
		
		.. note::
			* range - ['0..4294967295']

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = [('pybind.slxos.v16r_1_00b.openflow_state.group.group_info_list', u'group_info_list')]
    bindings_list = [('pybind.slxos.v16r_1_00b.openflow_state.group.group_info_list.group_bucket_list', 'pybind.slxos.v16r_1_00b.brocade_openflow_operational', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'group_id', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'group_bucket_list', 'keyval': 'bucket_id', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, group_info_list=group_info_list, group_bucket_list=group_bucket_list)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def openflow_state_group_group_info_list_group_bucket_list_group_action_list_delete(self, group_info_list=None, group_bucket_list=None, group_action_list=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		SLXOS: 16r.1.00b    

	**Parent Instance Keyword Arg Tuple(s)**:
		:param group_info_list: kwarg tuple.
		:type group_info_list: (group_id).

		:param group_id: tuple arg.
		:type group_id: (long)
		
		.. note::
			* range - ['0..4294967295']

		:param group_bucket_list: kwarg tuple.
		:type group_bucket_list: (bucket_id).

		:param bucket_id: tuple arg.
		:type bucket_id: (long)
		
		.. note::
			* range - ['0..4294967295']

	**This Instance Keyword Arg Tuple**:
		:param group_action_list: kwarg tuple.
		:type group_action_list: (action_id).

		:param action_id: tuple arg.
		:type action_id: (long)
		
		.. note::
			* range - ['0..4294967295']

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = [('pybind.slxos.v16r_1_00b.openflow_state.group.group_info_list', u'group_info_list'), ('pybind.slxos.v16r_1_00b.openflow_state.group.group_info_list.group_bucket_list', u'group_bucket_list')]
    bindings_list = [('pybind.slxos.v16r_1_00b.openflow_state.group.group_info_list.group_bucket_list.group_action_list', 'pybind.slxos.v16r_1_00b.brocade_openflow_operational', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'group_id', 'extra_keyval': ''}, {'keyval': 'bucket_id', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'group_action_list', 'keyval': 'action_id', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, group_info_list=group_info_list, group_bucket_list=group_bucket_list, group_action_list=group_action_list)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def openflow_state_group_id_group_bucket_list_delete(self, group_bucket_list=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		SLXOS: 16r.1.00b    

	**This Instance Keyword Arg Tuple**:
		:param group_bucket_list: kwarg tuple.
		:type group_bucket_list: (bucket_id).

		:param bucket_id: tuple arg.
		:type bucket_id: (long)
		
		.. note::
			* range - ['0..4294967295']

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = []
    bindings_list = [('pybind.slxos.v16r_1_00b.openflow_state.group_id.group_bucket_list', 'pybind.slxos.v16r_1_00b.brocade_openflow_operational', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = []
    bindings_keyval = {'kwargs_key_name': u'group_bucket_list', 'keyval': 'bucket_id', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, group_bucket_list=group_bucket_list)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def openflow_state_group_id_group_bucket_list_group_action_list_delete(self, group_bucket_list=None, group_action_list=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		SLXOS: 16r.1.00b    

	**Parent Instance Keyword Arg Tuple(s)**:
		:param group_bucket_list: kwarg tuple.
		:type group_bucket_list: (bucket_id).

		:param bucket_id: tuple arg.
		:type bucket_id: (long)
		
		.. note::
			* range - ['0..4294967295']

	**This Instance Keyword Arg Tuple**:
		:param group_action_list: kwarg tuple.
		:type group_action_list: (action_id).

		:param action_id: tuple arg.
		:type action_id: (long)
		
		.. note::
			* range - ['0..4294967295']

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = [('pybind.slxos.v16r_1_00b.openflow_state.group_id.group_bucket_list', u'group_bucket_list')]
    bindings_list = [('pybind.slxos.v16r_1_00b.openflow_state.group_id.group_bucket_list.group_action_list', 'pybind.slxos.v16r_1_00b.brocade_openflow_operational', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'bucket_id', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'group_action_list', 'keyval': 'action_id', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, group_bucket_list=group_bucket_list, group_action_list=group_action_list)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def openflow_state_interface_delete(self, interface=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		SLXOS: 16r.1.00b    

	**This Instance Keyword Arg Tuple**:
		:param interface: kwarg tuple.
		:type interface: (port).

		:param port: tuple arg.
		:type port: (unicode)

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = []
    bindings_list = [('pybind.slxos.v16r_1_00b.openflow_state.interface', 'pybind.slxos.v16r_1_00b.brocade_openflow_operational', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = []
    bindings_keyval = {'kwargs_key_name': u'interface', 'keyval': 'port', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, interface=interface)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def openflow_state_meter_id_meterband_info_list_delete(self, meterband_info_list=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		SLXOS: 16r.1.00b    

	**This Instance Keyword Arg Tuple**:
		:param meterband_info_list: kwarg tuple.
		:type meterband_info_list: (band_type).

		:param band_type: tuple arg.
		:type band_type: (long)
		
		.. note::
			* range - ['0..4294967295']

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = []
    bindings_list = [('pybind.slxos.v16r_1_00b.openflow_state.meter_id.meterband_info_list', 'pybind.slxos.v16r_1_00b.brocade_openflow_operational', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = []
    bindings_keyval = {'kwargs_key_name': u'meterband_info_list', 'keyval': 'band_type', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, meterband_info_list=meterband_info_list)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def openflow_state_meter_meter_info_list_delete(self, meter_info_list=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		SLXOS: 16r.1.00b    

	**This Instance Keyword Arg Tuple**:
		:param meter_info_list: kwarg tuple.
		:type meter_info_list: (meter_id).

		:param meter_id: tuple arg.
		:type meter_id: (long)
		
		.. note::
			* range - ['0..4294967295']

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = []
    bindings_list = [('pybind.slxos.v16r_1_00b.openflow_state.meter.meter_info_list', 'pybind.slxos.v16r_1_00b.brocade_openflow_operational', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = []
    bindings_keyval = {'kwargs_key_name': u'meter_info_list', 'keyval': 'meter_id', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, meter_info_list=meter_info_list)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def openflow_state_meter_meter_info_list_meterband_info_list_delete(self, meter_info_list=None, meterband_info_list=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		SLXOS: 16r.1.00b    

	**Parent Instance Keyword Arg Tuple(s)**:
		:param meter_info_list: kwarg tuple.
		:type meter_info_list: (meter_id).

		:param meter_id: tuple arg.
		:type meter_id: (long)
		
		.. note::
			* range - ['0..4294967295']

	**This Instance Keyword Arg Tuple**:
		:param meterband_info_list: kwarg tuple.
		:type meterband_info_list: (band_type).

		:param band_type: tuple arg.
		:type band_type: (long)
		
		.. note::
			* range - ['0..4294967295']

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = [('pybind.slxos.v16r_1_00b.openflow_state.meter.meter_info_list', u'meter_info_list')]
    bindings_list = [('pybind.slxos.v16r_1_00b.openflow_state.meter.meter_info_list.meterband_info_list', 'pybind.slxos.v16r_1_00b.brocade_openflow_operational', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'meter_id', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'meterband_info_list', 'keyval': 'band_type', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, meter_info_list=meter_info_list, meterband_info_list=meterband_info_list)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def openflow_state_queues_interface_queue_info_list_delete(self, queue_info_list=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		SLXOS: 16r.1.00b    

	**This Instance Keyword Arg Tuple**:
		:param queue_info_list: kwarg tuple.
		:type queue_info_list: (interface, num).

		:param interface: tuple arg.
		:type interface: (unicode)

		:param num: tuple arg.
		:type num: (long)
		
		.. note::
			* range - ['0..4294967295']

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = []
    bindings_list = [('pybind.slxos.v16r_1_00b.openflow_state.queues_interface.queue_info_list', 'pybind.slxos.v16r_1_00b.brocade_openflow_operational', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = []
    bindings_keyval = {'kwargs_key_name': u'queue_info_list', 'keyval': 'interface, num', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, queue_info_list=queue_info_list)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def openflow_state_resources_group_resouces_list_delete(self, group_resouces_list=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		SLXOS: 16r.1.00b    

	**This Instance Keyword Arg Tuple**:
		:param group_resouces_list: kwarg tuple.
		:type group_resouces_list: (group_type).

		:param group_type: tuple arg.
		:type group_type: (unicode)
		
		.. note::
			* enum - [u'dcm-group-type-all', u'dcm-group-type-select', u'dcm-group-type-invalid', u'dcm-group-type-indirect', u'dcm-group-type-fast-failover']

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = []
    bindings_list = [('pybind.slxos.v16r_1_00b.openflow_state.resources.group_resouces_list', 'pybind.slxos.v16r_1_00b.brocade_openflow_operational', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = []
    bindings_keyval = {'kwargs_key_name': u'group_resouces_list', 'keyval': 'group_type', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, group_resouces_list=group_resouces_list)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def openflow_state_resources_slot_resouces_list_delete(self, slot_resouces_list=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		SLXOS: 16r.1.00b    

	**This Instance Keyword Arg Tuple**:
		:param slot_resouces_list: kwarg tuple.
		:type slot_resouces_list: (slot_id).

		:param slot_id: tuple arg.
		:type slot_id: (long)
		
		.. note::
			* range - ['0..4294967295']

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = []
    bindings_list = [('pybind.slxos.v16r_1_00b.openflow_state.resources.slot_resouces_list', 'pybind.slxos.v16r_1_00b.brocade_openflow_operational', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = []
    bindings_keyval = {'kwargs_key_name': u'slot_resouces_list', 'keyval': 'slot_id', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, slot_resouces_list=slot_resouces_list)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def openflow_state_resources_slot_resouces_list_slot_match_profile_list_delete(self, slot_resouces_list=None, slot_match_profile_list=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		SLXOS: 16r.1.00b    

	**Parent Instance Keyword Arg Tuple(s)**:
		:param slot_resouces_list: kwarg tuple.
		:type slot_resouces_list: (slot_id).

		:param slot_id: tuple arg.
		:type slot_id: (long)
		
		.. note::
			* range - ['0..4294967295']

	**This Instance Keyword Arg Tuple**:
		:param slot_match_profile_list: kwarg tuple.
		:type slot_match_profile_list: (slot_match_profile_idx).

		:param slot_match_profile_idx: tuple arg.
		:type slot_match_profile_idx: (long)
		
		.. note::
			* range - ['0..4294967295']

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = [('pybind.slxos.v16r_1_00b.openflow_state.resources.slot_resouces_list', u'slot_resouces_list')]
    bindings_list = [('pybind.slxos.v16r_1_00b.openflow_state.resources.slot_resouces_list.slot_match_profile_list', 'pybind.slxos.v16r_1_00b.brocade_openflow_operational', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'slot_id', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'slot_match_profile_list', 'keyval': 'slot_match_profile_idx', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, slot_resouces_list=slot_resouces_list, slot_match_profile_list=slot_match_profile_list)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def openflow_state_resources_slot_resouces_list_slot_match_profile_list_slot_chip_resource_list_delete(self, slot_resouces_list=None, slot_match_profile_list=None, slot_chip_resource_list=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		SLXOS: 16r.1.00b    

	**Parent Instance Keyword Arg Tuple(s)**:
		:param slot_resouces_list: kwarg tuple.
		:type slot_resouces_list: (slot_id).

		:param slot_id: tuple arg.
		:type slot_id: (long)
		
		.. note::
			* range - ['0..4294967295']

		:param slot_match_profile_list: kwarg tuple.
		:type slot_match_profile_list: (slot_match_profile_idx).

		:param slot_match_profile_idx: tuple arg.
		:type slot_match_profile_idx: (long)
		
		.. note::
			* range - ['0..4294967295']

	**This Instance Keyword Arg Tuple**:
		:param slot_chip_resource_list: kwarg tuple.
		:type slot_chip_resource_list: (slot_chip_idx).

		:param slot_chip_idx: tuple arg.
		:type slot_chip_idx: (long)
		
		.. note::
			* range - ['0..4294967295']

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = [('pybind.slxos.v16r_1_00b.openflow_state.resources.slot_resouces_list', u'slot_resouces_list'), ('pybind.slxos.v16r_1_00b.openflow_state.resources.slot_resouces_list.slot_match_profile_list', u'slot_match_profile_list')]
    bindings_list = [('pybind.slxos.v16r_1_00b.openflow_state.resources.slot_resouces_list.slot_match_profile_list.slot_chip_resource_list', 'pybind.slxos.v16r_1_00b.brocade_openflow_operational', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'slot_id', 'extra_keyval': ''}, {'keyval': 'slot_match_profile_idx', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'slot_chip_resource_list', 'keyval': 'slot_chip_idx', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, slot_resouces_list=slot_resouces_list, slot_match_profile_list=slot_match_profile_list, slot_chip_resource_list=slot_chip_resource_list)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def opstest_state_arpentries_arpe_delete(self, arpe=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		SLXOS: 16r.1.00b    

	**This Instance Keyword Arg Tuple**:
		:param arpe: kwarg tuple.
		:type arpe: (ip, ifname).

		:param ip: tuple arg.
		:type ip: (unicode)
		
		.. note::
			* pattern - (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?

		:param ifname: tuple arg.
		:type ifname: (unicode)

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = []
    bindings_list = [('pybind.slxos.v16r_1_00b.opstest_state.arpentries.arpe', 'pybind.slxos.v16r_1_00b.brocade_opstest', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = []
    bindings_keyval = {'kwargs_key_name': u'arpe', 'keyval': 'ip, ifname', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, arpe=arpe)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def opstest_state_routes_route_delete(self, route=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		SLXOS: 16r.1.00b    

	**This Instance Keyword Arg Tuple**:
		:param route: kwarg tuple.
		:type route: (destPrefix).

		:param destPrefix: tuple arg.
		:type destPrefix: (unicode)
		
		.. note::
			* pattern - (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = []
    bindings_list = [('pybind.slxos.v16r_1_00b.opstest_state.routes.route', 'pybind.slxos.v16r_1_00b.brocade_opstest', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = []
    bindings_keyval = {'kwargs_key_name': u'route', 'keyval': 'destPrefix', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, route=route)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def opstest_state_routes_route_children_delete(self, route=None, children=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		SLXOS: 16r.1.00b    

	**Parent Instance Keyword Arg Tuple(s)**:
		:param route: kwarg tuple.
		:type route: (destPrefix).

		:param destPrefix: tuple arg.
		:type destPrefix: (unicode)
		
		.. note::
			* pattern - (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?

	**This Instance Keyword Arg Tuple**:
		:param children: kwarg tuple.
		:type children: (keyid).

		:param keyid: tuple arg.
		:type keyid: (long)
		
		.. note::
			* range - ['0..4294967295']

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = [('pybind.slxos.v16r_1_00b.opstest_state.routes.route', u'route')]
    bindings_list = [('pybind.slxos.v16r_1_00b.opstest_state.routes.route.children', 'pybind.slxos.v16r_1_00b.brocade_opstest', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'destPrefix', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'children', 'keyval': 'keyid', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, route=route, children=children)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def opstest_state_routes_route_children_layer2_delete(self, route=None, children=None, layer2=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		SLXOS: 16r.1.00b    

	**Parent Instance Keyword Arg Tuple(s)**:
		:param route: kwarg tuple.
		:type route: (destPrefix).

		:param destPrefix: tuple arg.
		:type destPrefix: (unicode)
		
		.. note::
			* pattern - (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?

		:param children: kwarg tuple.
		:type children: (keyid).

		:param keyid: tuple arg.
		:type keyid: (long)
		
		.. note::
			* range - ['0..4294967295']

	**This Instance Keyword Arg Tuple**:
		:param layer2: kwarg tuple.
		:type layer2: (layer2id).

		:param layer2id: tuple arg.
		:type layer2id: (long)
		
		.. note::
			* range - ['0..4294967295']

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = [('pybind.slxos.v16r_1_00b.opstest_state.routes.route', u'route'), ('pybind.slxos.v16r_1_00b.opstest_state.routes.route.children', u'children')]
    bindings_list = [('pybind.slxos.v16r_1_00b.opstest_state.routes.route.children.layer2', 'pybind.slxos.v16r_1_00b.brocade_opstest', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'destPrefix', 'extra_keyval': ''}, {'keyval': 'keyid', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'layer2', 'keyval': 'layer2id', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, route=route, children=children, layer2=layer2)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def overlay_access_list_type_vxlan_extended_delete(self, extended=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		SLXOS: 16r.1.00b    

	**This Instance Keyword Arg Tuple**:
		:param extended: kwarg tuple.
		:type extended: (ext_user_acl_name).

		:param ext_user_acl_name: Access List Name (Max 63)
		:type ext_user_acl_name: (unicode)
		
		.. note::
			* pattern - [a-zA-Z]{1}([-a-zA-Z0-9_]{0,62})

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = []
    bindings_list = [('pybind.slxos.v16r_1_00b.overlay.access_list.type.vxlan.extended', 'pybind.slxos.v16r_1_00b.brocade_vxlan_visibility', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = []
    bindings_keyval = {'kwargs_key_name': u'extended', 'keyval': 'ext_user_acl_name', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, extended=extended)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def overlay_access_list_type_vxlan_extended_seq_delete(self, extended=None, ext_seq=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		SLXOS: 16r.1.00b    

	**Parent Instance Keyword Arg Tuple(s)**:
		:param extended: kwarg tuple.
		:type extended: (ext_user_acl_name).

		:param ext_user_acl_name: Access List Name (Max 63)
		:type ext_user_acl_name: (unicode)
		
		.. note::
			* pattern - [a-zA-Z]{1}([-a-zA-Z0-9_]{0,62})

	**This Instance Keyword Arg Tuple**:
		:param ext_seq: kwarg tuple.
		:type ext_seq: (ext_seq_num, ext_permit_deny, ext_dst_vtep_ip, ext_dst_vtep_ip_any, ext_src_vtep_ip, ext_src_vtep_ip_any, ext_vni, ext_vni_any, ext_vni_mask, ext_count, ext_mirror, ext_redirect, ext_sflow, native, tag, dst_ip_host, dst_ip, dst_ip_any, src_ip_host, src_ip, src_ip_any, dst_port, dst_port_any, src_port, src_port_any).

		:param ext_seq_num: tuple arg.
		:type ext_seq_num: (long)
		
		.. note::
			* range - ['0..4294967295']

		:param ext_permit_deny: tuple arg.
		:type ext_permit_deny: (unicode)
		
		.. note::
			* enum - [u'deny', u'permit']

		:param ext_dst_vtep_ip: dst vtep ip address: A.B.C.D
		:type ext_dst_vtep_ip: (unicode)
		
		.. note::
			* pattern - (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?

		:param ext_dst_vtep_ip_any: dst vtep ip address: any
		:type ext_dst_vtep_ip_any: (YANGBool)

		:param ext_src_vtep_ip: src vtep ip address: A.B.C.D
		:type ext_src_vtep_ip: (unicode)
		
		.. note::
			* pattern - (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?

		:param ext_src_vtep_ip_any: src vtep ip address: any
		:type ext_src_vtep_ip_any: (YANGBool)

		:param ext_vni: vni number: 1..16777215
		:type ext_vni: (long)
		
		.. note::
			* range - ['0..4294967295']

		:param ext_vni_any: vni any
		:type ext_vni_any: (YANGBool)

		:param ext_vni_mask: vni mask:Hexadecimal 0..FFFFFF
		:type ext_vni_mask: (unicode)
		
		.. note::
			* pattern - 0|[1-9a-fA-F][0-9a-fA-F]{0,5}

		:param ext_count: count
		:type ext_count: (YANGBool)

		:param ext_mirror: mirror <interface-name>
		:type ext_mirror: (unicode)
		
		.. note::
			* length - [u'3..16']
			* pattern - ((([0-9]|[1][0-6]))/([1-9]|[1-9][0-9]|[1-9][0-9][0-9])(:[1-4])?)

		:param ext_redirect: redirect <interface-name>
		:type ext_redirect: (unicode)
		
		.. note::
			* length - [u'3..16']
			* pattern - ((([0-9]|[1][0-6]))/([1-9]|[1-9][0-9]|[1-9][0-9][0-9])(:[1-4])?)

		:param ext_sflow: sflow
		:type ext_sflow: (YANGBool)

		:param native: tuple arg.
		:type native: (YANGBool)

		:param tag: tuple arg.
		:type tag: (unicode)
		
		.. note::
			* enum - [u'none', u'single', u'any']

		:param dst_ip_host: dst ip host: A.B.C.D
		:type dst_ip_host: (unicode)
		
		.. note::
			* pattern - (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?

		:param dst_ip: dst ip: A.B.C.D/mask
		:type dst_ip: (unicode)
		
		.. note::
			* pattern - (([1-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.)(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){2}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])/(([1-9])|([1-2][0-9])|(3[0-1]))

		:param dst_ip_any: dst ip address: any
		:type dst_ip_any: (YANGBool)

		:param src_ip_host: src ip host: A.B.C.D
		:type src_ip_host: (unicode)
		
		.. note::
			* pattern - (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?

		:param src_ip: src ip: A.B.C.D/mask
		:type src_ip: (unicode)
		
		.. note::
			* pattern - (([1-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.)(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){2}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])/(([1-9])|([1-2][0-9])|(3[0-1]))

		:param src_ip_any: src ip address: any
		:type src_ip_any: (YANGBool)

		:param dst_port: tuple arg.
		:type dst_port: (long)
		
		.. note::
			* range - ['0..4294967295']

		:param dst_port_any: dst-port-any
		:type dst_port_any: (YANGBool)

		:param src_port: tuple arg.
		:type src_port: (long)
		
		.. note::
			* range - ['0..4294967295']

		:param src_port_any: src-port-any
		:type src_port_any: (YANGBool)

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = [('pybind.slxos.v16r_1_00b.overlay.access_list.type.vxlan.extended', u'extended')]
    bindings_list = [('pybind.slxos.v16r_1_00b.overlay.access_list.type.vxlan.extended.ext_seq', 'pybind.slxos.v16r_1_00b.brocade_vxlan_visibility', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'ext_user_acl_name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'ext_seq', 'keyval': 'ext_seq_num', 'extra_keyval': 'ext_seq_num, ext_permit_deny, ext_dst_vtep_ip, ext_dst_vtep_ip_any, ext_src_vtep_ip, ext_src_vtep_ip_any, ext_vni, ext_vni_any, ext_vni_mask, ext_count, ext_mirror, ext_redirect, ext_sflow, native, tag, dst_ip_host, dst_ip, dst_ip_any, src_ip_host, src_ip, src_ip_any, dst_port, dst_port_any, src_port, src_port_any'}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, extended=extended, ext_seq=ext_seq)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def overlay_access_list_type_vxlan_standard_delete(self, standard=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		SLXOS: 16r.1.00b    

	**This Instance Keyword Arg Tuple**:
		:param standard: kwarg tuple.
		:type standard: (user_acl_name).

		:param user_acl_name: Access List Name (Max 63)
		:type user_acl_name: (unicode)
		
		.. note::
			* pattern - [a-zA-Z]{1}([-a-zA-Z0-9_]{0,62})

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = []
    bindings_list = [('pybind.slxos.v16r_1_00b.overlay.access_list.type.vxlan.standard', 'pybind.slxos.v16r_1_00b.brocade_vxlan_visibility', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = []
    bindings_keyval = {'kwargs_key_name': u'standard', 'keyval': 'user_acl_name', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, standard=standard)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def overlay_access_list_type_vxlan_standard_seq_delete(self, standard=None, seq=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		SLXOS: 16r.1.00b    

	**Parent Instance Keyword Arg Tuple(s)**:
		:param standard: kwarg tuple.
		:type standard: (user_acl_name).

		:param user_acl_name: Access List Name (Max 63)
		:type user_acl_name: (unicode)
		
		.. note::
			* pattern - [a-zA-Z]{1}([-a-zA-Z0-9_]{0,62})

	**This Instance Keyword Arg Tuple**:
		:param seq: kwarg tuple.
		:type seq: (seq_num, permit_deny, dst_vtep_ip, dst_vtep_ip_any, src_vtep_ip, src_vtep_ip_any, vni, vni_any, vni_mask, count, redirect, sflow).

		:param seq_num: tuple arg.
		:type seq_num: (long)
		
		.. note::
			* range - ['0..4294967295']

		:param permit_deny: tuple arg.
		:type permit_deny: (unicode)
		
		.. note::
			* enum - [u'deny', u'permit']

		:param dst_vtep_ip: dst vtep ip address: A.B.C.D
		:type dst_vtep_ip: (unicode)
		
		.. note::
			* pattern - (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?

		:param dst_vtep_ip_any: dst vtep ip address: any
		:type dst_vtep_ip_any: (YANGBool)

		:param src_vtep_ip: src vtep ip address: A.B.C.D
		:type src_vtep_ip: (unicode)
		
		.. note::
			* pattern - (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?

		:param src_vtep_ip_any: src vtep ip address: any
		:type src_vtep_ip_any: (YANGBool)

		:param vni: vni number: 1..16777215
		:type vni: (long)
		
		.. note::
			* range - ['0..4294967295']

		:param vni_any: vni any
		:type vni_any: (YANGBool)

		:param vni_mask: vni mask:Hexadecimal 0..FFFFFF
		:type vni_mask: (unicode)
		
		.. note::
			* pattern - 0|[1-9a-fA-F][0-9a-fA-F]{0,5}

		:param count: count
		:type count: (YANGBool)

		:param redirect: redirect <interface-name>
		:type redirect: (unicode)
		
		.. note::
			* length - [u'3..16']
			* pattern - ((([0-9]|[1][0-6]))/([1-9]|[1-9][0-9]|[1-9][0-9][0-9])(:[1-4])?)

		:param sflow: sflow
		:type sflow: (YANGBool)

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = [('pybind.slxos.v16r_1_00b.overlay.access_list.type.vxlan.standard', u'standard')]
    bindings_list = [('pybind.slxos.v16r_1_00b.overlay.access_list.type.vxlan.standard.seq', 'pybind.slxos.v16r_1_00b.brocade_vxlan_visibility', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'user_acl_name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'seq', 'keyval': 'seq_num', 'extra_keyval': 'seq_num, permit_deny, dst_vtep_ip, dst_vtep_ip_any, src_vtep_ip, src_vtep_ip_any, vni, vni_any, vni_mask, count, redirect, sflow'}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, standard=standard, seq=seq)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def overlay_gateway_delete(self, overlay_gateway=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		NOS: 6.0.2b, 7.0.1a, 7.1.0
		SLXOS: 16r.1.00b    

	**This Instance Keyword Arg Tuple**:
		:param overlay_gateway: kwarg tuple.
		:type overlay_gateway: (name).

		:param name: tuple arg.
		:type name: (unicode)
		
		.. note::
			* pattern - [-_a-zA-Z0-9]{1,32}

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = []
    bindings_list = [('pybind.nos.v6_0_2b.overlay_gateway', 'pybind.nos.v6_0_2b.brocade_tunnels', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.overlay_gateway', 'pybind.nos.v7_0_1a.brocade_tunnels', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.overlay_gateway', 'pybind.nos.v7_1_0.brocade_tunnels', 'pybind.nos.v7_1_0'), ('pybind.slxos.v16r_1_00b.overlay_gateway', 'pybind.slxos.v16r_1_00b.brocade_tunnels', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = []
    bindings_keyval = {'kwargs_key_name': 'overlay_gateway', 'keyval': 'name', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, overlay_gateway=overlay_gateway)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def overlay_gateway_attach_vlan_delete(self, overlay_gateway=None, vlan=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		NOS: 6.0.2b, 7.0.1a, 7.1.0
		SLXOS: 16r.1.00b    

	**Parent Instance Keyword Arg Tuple(s)**:
		:param overlay_gateway: kwarg tuple.
		:type overlay_gateway: (name).

		:param name: tuple arg.
		:type name: (unicode)
		
		.. note::
			* pattern - [-_a-zA-Z0-9]{1,32}

	**This Instance Keyword Arg Tuple**:
		:param vlan: kwarg tuple.
		:type vlan: (vid, mac).

		:param vid: tuple arg.
		:type vid: (long)
		
		.. note::
			* range - ['0..4294967295']

		:param mac: Configure VLAN-MAC attachment
		:type mac: (unicode)

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = [('pybind.nos.v7_0_1a.overlay_gateway', 'overlay_gateway'), ('pybind.slxos.v16r_1_00b.overlay_gateway', 'overlay_gateway'), ('pybind.nos.v7_1_0.overlay_gateway', 'overlay_gateway'), ('pybind.nos.v6_0_2b.overlay_gateway', 'overlay_gateway')]
    bindings_list = [('pybind.nos.v6_0_2b.overlay_gateway.attach.vlan', 'pybind.nos.v6_0_2b.brocade_tunnels', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.overlay_gateway.attach.vlan', 'pybind.nos.v7_0_1a.brocade_tunnels', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.overlay_gateway.attach.vlan', 'pybind.nos.v7_1_0.brocade_tunnels', 'pybind.nos.v7_1_0'), ('pybind.slxos.v16r_1_00b.overlay_gateway.attach.vlan', 'pybind.slxos.v16r_1_00b.brocade_tunnels', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'vlan', 'keyval': 'vid, mac', 'extra_keyval': 'vid, mac'}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, overlay_gateway=overlay_gateway, vlan=vlan)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def overlay_gateway_map_delete(self, overlay_gateway=None, vlan_vni_mapping=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		NOS: 6.0.2b, 7.0.1a, 7.1.0
		SLXOS: 16r.1.00b    

	**Parent Instance Keyword Arg Tuple(s)**:
		:param overlay_gateway: kwarg tuple.
		:type overlay_gateway: (name).

		:param name: tuple arg.
		:type name: (unicode)
		
		.. note::
			* pattern - [-_a-zA-Z0-9]{1,32}

	**This Instance Keyword Arg Tuple**:
		:param vlan_vni_mapping: kwarg tuple.
		:type vlan_vni_mapping: (vid).

		:param vid: tuple arg.
		:type vid: (long)
		
		.. note::
			* range - ['0..4294967295']

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = [('pybind.nos.v6_0_2b.overlay_gateway', 'overlay_gateway'), ('pybind.nos.v7_1_0.overlay_gateway', 'overlay_gateway'), ('pybind.nos.v7_0_1a.overlay_gateway', 'overlay_gateway'), ('pybind.slxos.v16r_1_00b.overlay_gateway', 'overlay_gateway')]
    bindings_list = [('pybind.nos.v6_0_2b.overlay_gateway.map_.vlan_vni_mapping', 'pybind.nos.v6_0_2b.brocade_tunnels', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.overlay_gateway.map_.vlan_vni_mapping', 'pybind.nos.v7_0_1a.brocade_tunnels', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.overlay_gateway.map_.vlan_vni_mapping', 'pybind.nos.v7_1_0.brocade_tunnels', 'pybind.nos.v7_1_0'), ('pybind.slxos.v16r_1_00b.overlay_gateway.map_.vlan_vni_mapping', 'pybind.slxos.v16r_1_00b.brocade_tunnels', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'vlan_vni_mapping', 'keyval': 'vid', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, overlay_gateway=overlay_gateway, vlan_vni_mapping=vlan_vni_mapping)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def overlay_gateway_monitor_delete(self, overlay_gateway=None, monitor=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		NOS: 6.0.2b, 7.0.1a, 7.1.0
		SLXOS: 16r.1.00b    

	**Parent Instance Keyword Arg Tuple(s)**:
		:param overlay_gateway: kwarg tuple.
		:type overlay_gateway: (name).

		:param name: tuple arg.
		:type name: (unicode)
		
		.. note::
			* pattern - [-_a-zA-Z0-9]{1,32}

	**This Instance Keyword Arg Tuple**:
		:param monitor: kwarg tuple.
		:type monitor: (session, direction, remote_endpoint, vlan_leaf, vlan_add_remove, vlan_range).

		:param session: Session number
		:type session: (long)
		
		.. note::
			* range - ['0..4294967295']

		:param direction: Specify flow direction
		:type direction: (unicode)
		
		.. note::
			* enum - [u'both', u'rx', u'tx']

		:param remote_endpoint: Tunnel destination end point address
		:type remote_endpoint: (unicode)
		
		.. note::
			* enum - [u'any']

		:param vlan_leaf: Target VLAN IDs
		:type vlan_leaf: (unicode)
		
		.. note::
			* enum - [u'vlan']

		:param vlan_add_remove: tuple arg.
		:type vlan_add_remove: (unicode)
		
		.. note::
			* enum - [u'add', u'remove']

		:param vlan_range: tuple arg.
		:type vlan_range: (unicode)
		
		.. note::
			* pattern - [0-9]+(-[0-9]+)?(,[0-9]+(-[0-9]+)?)*

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = [('pybind.nos.v6_0_2b.overlay_gateway', 'overlay_gateway'), ('pybind.nos.v7_0_1a.overlay_gateway', 'overlay_gateway'), ('pybind.nos.v7_1_0.overlay_gateway', 'overlay_gateway'), ('pybind.slxos.v16r_1_00b.overlay_gateway', 'overlay_gateway')]
    bindings_list = [('pybind.nos.v6_0_2b.overlay_gateway.monitor', 'pybind.nos.v6_0_2b.brocade_tunnels', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.overlay_gateway.monitor', 'pybind.nos.v7_0_1a.brocade_tunnels', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.overlay_gateway.monitor', 'pybind.nos.v7_1_0.brocade_tunnels', 'pybind.nos.v7_1_0'), ('pybind.slxos.v16r_1_00b.overlay_gateway.monitor', 'pybind.slxos.v16r_1_00b.brocade_tunnels', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'monitor', 'keyval': 'session', 'extra_keyval': 'session, direction, remote_endpoint, vlan_leaf, vlan_add_remove, vlan_range'}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, overlay_gateway=overlay_gateway, monitor=monitor)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def overlay_gateway_sflow_delete(self, overlay_gateway=None, sflow=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		NOS: 6.0.2b, 7.0.1a, 7.1.0
		SLXOS: 16r.1.00b    

	**Parent Instance Keyword Arg Tuple(s)**:
		:param overlay_gateway: kwarg tuple.
		:type overlay_gateway: (name).

		:param name: tuple arg.
		:type name: (unicode)
		
		.. note::
			* pattern - [-_a-zA-Z0-9]{1,32}

	**This Instance Keyword Arg Tuple**:
		:param sflow: kwarg tuple.
		:type sflow: (sflow_profile_name, sflow_remote_endpoint, sflow_vlan_action, sflow_vlan_range).

		:param sflow_profile_name: tuple arg.
		:type sflow_profile_name: (unicode)
		
		.. note::
			* pattern - [a-zA-Z]{1}([-a-zA-Z0-9_]{0,63})

		:param sflow_remote_endpoint: Tunnel destination end point address
		:type sflow_remote_endpoint: (unicode)
		
		.. note::
			* enum - [u'any']

		:param sflow_vlan_action: Target VLAN IDs
		:type sflow_vlan_action: (unicode)
		
		.. note::
			* enum - [u'add', u'remove']

		:param sflow_vlan_range: tuple arg.
		:type sflow_vlan_range: (unicode)
		
		.. note::
			* pattern - [0-9]+(-[0-9]+)?(,[0-9]+(-[0-9]+)?)*

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = [('pybind.slxos.v16r_1_00b.overlay_gateway', 'overlay_gateway'), ('pybind.nos.v7_1_0.overlay_gateway', 'overlay_gateway'), ('pybind.nos.v7_0_1a.overlay_gateway', 'overlay_gateway'), ('pybind.nos.v6_0_2b.overlay_gateway', 'overlay_gateway')]
    bindings_list = [('pybind.nos.v6_0_2b.overlay_gateway.sflow', 'pybind.nos.v6_0_2b.brocade_tunnels', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.overlay_gateway.sflow', 'pybind.nos.v7_0_1a.brocade_tunnels', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.overlay_gateway.sflow', 'pybind.nos.v7_1_0.brocade_tunnels', 'pybind.nos.v7_1_0'), ('pybind.slxos.v16r_1_00b.overlay_gateway.sflow', 'pybind.slxos.v16r_1_00b.brocade_tunnels', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'sflow', 'keyval': 'sflow_profile_name', 'extra_keyval': 'sflow_profile_name, sflow_remote_endpoint, sflow_vlan_action, sflow_vlan_range'}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, overlay_gateway=overlay_gateway, sflow=sflow)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def overlay_gateway_site_delete(self, overlay_gateway=None, site=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		NOS: 6.0.2b, 7.0.1a, 7.1.0
		SLXOS: 16r.1.00b    

	**Parent Instance Keyword Arg Tuple(s)**:
		:param overlay_gateway: kwarg tuple.
		:type overlay_gateway: (name).

		:param name: tuple arg.
		:type name: (unicode)
		
		.. note::
			* pattern - [-_a-zA-Z0-9]{1,32}

	**This Instance Keyword Arg Tuple**:
		:param site: kwarg tuple.
		:type site: (name).

		:param name: tuple arg.
		:type name: (unicode)
		
		.. note::
			* pattern - [-_a-zA-Z0-9]{1,63}

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = [('pybind.nos.v6_0_2b.overlay_gateway', 'overlay_gateway'), ('pybind.slxos.v16r_1_00b.overlay_gateway', 'overlay_gateway'), ('pybind.nos.v7_0_1a.overlay_gateway', 'overlay_gateway'), ('pybind.nos.v7_1_0.overlay_gateway', 'overlay_gateway')]
    bindings_list = [('pybind.nos.v6_0_2b.overlay_gateway.site', 'pybind.nos.v6_0_2b.brocade_tunnels', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.overlay_gateway.site', 'pybind.nos.v7_0_1a.brocade_tunnels', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.overlay_gateway.site', 'pybind.nos.v7_1_0.brocade_tunnels', 'pybind.nos.v7_1_0'), ('pybind.slxos.v16r_1_00b.overlay_gateway.site', 'pybind.slxos.v16r_1_00b.brocade_tunnels', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'site', 'keyval': 'name', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, overlay_gateway=overlay_gateway, site=site)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def overlay_gateway_site_ip_delete(self, overlay_gateway=None, site=None, tunnel_dst=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		NOS: 6.0.2b, 7.0.1a, 7.1.0
		SLXOS: 16r.1.00b    

	**Parent Instance Keyword Arg Tuple(s)**:
		:param overlay_gateway: kwarg tuple.
		:type overlay_gateway: (name).

		:param name: tuple arg.
		:type name: (unicode)
		
		.. note::
			* pattern - [-_a-zA-Z0-9]{1,32}

		:param site: kwarg tuple.
		:type site: (name).

		:param name: tuple arg.
		:type name: (unicode)
		
		.. note::
			* pattern - [-_a-zA-Z0-9]{1,63}

	**This Instance Keyword Arg Tuple**:
		:param tunnel_dst: kwarg tuple.
		:type tunnel_dst: (address).

		:param address: Tunnel destination IP address
		:type address: (unicode)
		
		.. note::
			* pattern - (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = [('pybind.nos.v7_0_1a.overlay_gateway', 'overlay_gateway'), ('pybind.nos.v7_0_1a.overlay_gateway.site', u'site'), ('pybind.nos.v7_1_0.overlay_gateway', 'overlay_gateway'), ('pybind.nos.v7_1_0.overlay_gateway.site', u'site'), ('pybind.slxos.v16r_1_00b.overlay_gateway', 'overlay_gateway'), ('pybind.slxos.v16r_1_00b.overlay_gateway.site', u'site'), ('pybind.nos.v6_0_2b.overlay_gateway', 'overlay_gateway'), ('pybind.nos.v6_0_2b.overlay_gateway.site', u'site')]
    bindings_list = [('pybind.nos.v6_0_2b.overlay_gateway.site.tunnel_dst', 'pybind.nos.v6_0_2b.brocade_tunnels', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.overlay_gateway.site.tunnel_dst', 'pybind.nos.v7_0_1a.brocade_tunnels', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.overlay_gateway.site.tunnel_dst', 'pybind.nos.v7_1_0.brocade_tunnels', 'pybind.nos.v7_1_0'), ('pybind.slxos.v16r_1_00b.overlay_gateway.site.tunnel_dst', 'pybind.slxos.v16r_1_00b.brocade_tunnels', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'tunnel_dst', 'keyval': 'address', 'extra_keyval': 'address'}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, overlay_gateway=overlay_gateway, site=site, tunnel_dst=tunnel_dst)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def overlay_transit_delete(self, overlay_transit=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		SLXOS: 16r.1.00b    

	**This Instance Keyword Arg Tuple**:
		:param overlay_transit: kwarg tuple.
		:type overlay_transit: (user_transit_name).

		:param user_transit_name: User Transit Name (Max 63)
		:type user_transit_name: (unicode)
		
		.. note::
			* pattern - [a-zA-Z]{1}([-a-zA-Z0-9_]{0,62})

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = []
    bindings_list = [('pybind.slxos.v16r_1_00b.overlay_transit', 'pybind.slxos.v16r_1_00b.brocade_vxlan_visibility', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = []
    bindings_keyval = {'kwargs_key_name': 'overlay_transit', 'keyval': 'user_transit_name', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, overlay_transit=overlay_transit)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def overlay_transit_overlay_delete(self, overlay_transit=None, transit_overlay=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		SLXOS: 16r.1.00b    

	**Parent Instance Keyword Arg Tuple(s)**:
		:param overlay_transit: kwarg tuple.
		:type overlay_transit: (user_transit_name).

		:param user_transit_name: User Transit Name (Max 63)
		:type user_transit_name: (unicode)
		
		.. note::
			* pattern - [a-zA-Z]{1}([-a-zA-Z0-9_]{0,62})

	**This Instance Keyword Arg Tuple**:
		:param transit_overlay: kwarg tuple.
		:type transit_overlay: (access_group, in_out).

		:param access_group: Access Group Name (Max 63)
		:type access_group: (unicode)
		
		.. note::
			* pattern - [a-zA-Z]{1}([-a-zA-Z0-9_]{0,62})

		:param in_out: tuple arg.
		:type in_out: (unicode)
		
		.. note::
			* enum - [u'in', u'out']

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = [('pybind.slxos.v16r_1_00b.overlay_transit', 'overlay_transit')]
    bindings_list = [('pybind.slxos.v16r_1_00b.overlay_transit.transit_overlay', 'pybind.slxos.v16r_1_00b.brocade_vxlan_visibility', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'user_transit_name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'transit_overlay', 'keyval': 'access_group, in_out', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, overlay_transit=overlay_transit, transit_overlay=transit_overlay)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def overlay_transit_state_extended_data_delete(self, extended_data=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		SLXOS: 16r.1.00b    

	**This Instance Keyword Arg Tuple**:
		:param extended_data: kwarg tuple.
		:type extended_data: (acl_name, seq_num).

		:param acl_name: tuple arg.
		:type acl_name: (unicode)

		:param seq_num: tuple arg.
		:type seq_num: (long)
		
		.. note::
			* range - ['0..4294967295']

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = []
    bindings_list = [('pybind.slxos.v16r_1_00b.overlay_transit_state.extended_data', 'pybind.slxos.v16r_1_00b.brocade_ssm_operational', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = []
    bindings_keyval = {'kwargs_key_name': u'extended_data', 'keyval': 'acl_name, seq_num', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, extended_data=extended_data)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def ovsdb_server_delete(self, ovsdb_server=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		NOS: 7.0.1a, 7.1.0    

	**This Instance Keyword Arg Tuple**:
		:param ovsdb_server: kwarg tuple.
		:type ovsdb_server: (name).

		:param name: Ovsdb server name
		:type name: (unicode)
		
		.. note::
			* pattern - [-_a-zA-Z0-9]{1,32}

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = []
    bindings_list = [('pybind.nos.v7_0_1a.ovsdb_server', 'pybind.nos.v7_0_1a.brocade_tunnels', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.ovsdb_server', 'pybind.nos.v7_1_0.brocade_tunnels', 'pybind.nos.v7_1_0')]
    composed_child_list = []
    compositions_keyval_list = []
    bindings_keyval = {'kwargs_key_name': 'ovsdb_server', 'keyval': 'name', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, ovsdb_server=ovsdb_server)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def pim_anycast_state_delete(self, pim_anycast_state=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		SLXOS: 16r.1.00b    

	**This Instance Keyword Arg Tuple**:
		:param pim_anycast_state: kwarg tuple.
		:type pim_anycast_state: (anycast_rp).

		:param anycast_rp: tuple arg.
		:type anycast_rp: (unicode)
		
		.. note::
			* pattern - (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = []
    bindings_list = [('pybind.slxos.v16r_1_00b.pim_anycast_state', 'pybind.slxos.v16r_1_00b.brocade_pim_operational', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = []
    bindings_keyval = {'kwargs_key_name': 'pim_anycast_state', 'keyval': 'anycast_rp', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, pim_anycast_state=pim_anycast_state)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def pim_anycast_state_peer_list_delete(self, pim_anycast_state=None, peer_list=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		SLXOS: 16r.1.00b    

	**Parent Instance Keyword Arg Tuple(s)**:
		:param pim_anycast_state: kwarg tuple.
		:type pim_anycast_state: (anycast_rp).

		:param anycast_rp: tuple arg.
		:type anycast_rp: (unicode)
		
		.. note::
			* pattern - (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?

	**This Instance Keyword Arg Tuple**:
		:param peer_list: kwarg tuple.
		:type peer_list: (ipv4_addr).

		:param ipv4_addr: tuple arg.
		:type ipv4_addr: (long)
		
		.. note::
			* range - ['0..4294967295']

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = [('pybind.slxos.v16r_1_00b.pim_anycast_state', 'pim_anycast_state')]
    bindings_list = [('pybind.slxos.v16r_1_00b.pim_anycast_state.peer_list', 'pybind.slxos.v16r_1_00b.brocade_pim_operational', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'anycast_rp', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'peer_list', 'keyval': 'ipv4_addr', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, pim_anycast_state=pim_anycast_state, peer_list=peer_list)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def pim_ecmp_state_delete(self, pim_ecmp_state=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		SLXOS: 16r.1.00b    

	**This Instance Keyword Arg Tuple**:
		:param pim_ecmp_state: kwarg tuple.
		:type pim_ecmp_state: (addr_filter).

		:param addr_filter: tuple arg.
		:type addr_filter: (unicode)
		
		.. note::
			* pattern - (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = []
    bindings_list = [('pybind.slxos.v16r_1_00b.pim_ecmp_state', 'pybind.slxos.v16r_1_00b.brocade_pim_operational', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = []
    bindings_keyval = {'kwargs_key_name': 'pim_ecmp_state', 'keyval': 'addr_filter', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, pim_ecmp_state=pim_ecmp_state)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def pim_ecmp_state_pim_ecmp_delete(self, pim_ecmp_state=None, pim_ecmp=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		SLXOS: 16r.1.00b    

	**Parent Instance Keyword Arg Tuple(s)**:
		:param pim_ecmp_state: kwarg tuple.
		:type pim_ecmp_state: (addr_filter).

		:param addr_filter: tuple arg.
		:type addr_filter: (unicode)
		
		.. note::
			* pattern - (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?

	**This Instance Keyword Arg Tuple**:
		:param pim_ecmp: kwarg tuple.
		:type pim_ecmp: (src_ip, rp_addr).

		:param src_ip: tuple arg.
		:type src_ip: (unicode)
		
		.. note::
			* pattern - (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?

		:param rp_addr: tuple arg.
		:type rp_addr: (unicode)
		
		.. note::
			* pattern - (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = [('pybind.slxos.v16r_1_00b.pim_ecmp_state', 'pim_ecmp_state')]
    bindings_list = [('pybind.slxos.v16r_1_00b.pim_ecmp_state.pim_ecmp', 'pybind.slxos.v16r_1_00b.brocade_pim_operational', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'addr_filter', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'pim_ecmp', 'keyval': 'src_ip, rp_addr', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, pim_ecmp_state=pim_ecmp_state, pim_ecmp=pim_ecmp)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def pim_global_state_interfaces_delete(self, interfaces=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		SLXOS: 16r.1.00b    

	**This Instance Keyword Arg Tuple**:
		:param interfaces: kwarg tuple.
		:type interfaces: (interface_name).

		:param interface_name: tuple arg.
		:type interface_name: (unicode)

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = []
    bindings_list = [('pybind.slxos.v16r_1_00b.pim_global_state.interfaces', 'pybind.slxos.v16r_1_00b.brocade_pim_operational', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = []
    bindings_keyval = {'kwargs_key_name': u'interfaces', 'keyval': 'interface_name', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, interfaces=interfaces)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def pim_global_state_interfaces_pim_interface_data_delete(self, interfaces=None, pim_interface_data=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		SLXOS: 16r.1.00b    

	**Parent Instance Keyword Arg Tuple(s)**:
		:param interfaces: kwarg tuple.
		:type interfaces: (interface_name).

		:param interface_name: tuple arg.
		:type interface_name: (unicode)

	**This Instance Keyword Arg Tuple**:
		:param pim_interface_data: kwarg tuple.
		:type pim_interface_data: (interface_name, interface_type).

		:param interface_name: tuple arg.
		:type interface_name: (unicode)

		:param interface_type: tuple arg.
		:type interface_type: (unicode)

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = [('pybind.slxos.v16r_1_00b.pim_global_state.interfaces', u'interfaces')]
    bindings_list = [('pybind.slxos.v16r_1_00b.pim_global_state.interfaces.pim_interface_data', 'pybind.slxos.v16r_1_00b.brocade_pim_operational', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'interface_name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'pim_interface_data', 'keyval': 'interface_name, interface_type', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, interfaces=interfaces, pim_interface_data=pim_interface_data)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def police_priority_map_delete(self, police_priority_map=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		NOS: 6.0.2b, 7.0.1a, 7.1.0    

	**This Instance Keyword Arg Tuple**:
		:param police_priority_map: kwarg tuple.
		:type police_priority_map: (name).

		:param name: Policer Priority Map Name (Max Size - 64)
		:type name: (unicode)
		
		.. note::
			* pattern - [a-zA-Z]{1}([-a-zA-Z0-9_]{0,63})

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = []
    bindings_list = [('pybind.nos.v6_0_2b.police_priority_map', 'pybind.nos.v6_0_2b.brocade_policer', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.police_priority_map', 'pybind.nos.v7_0_1a.brocade_policer', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.police_priority_map', 'pybind.nos.v7_1_0.brocade_policer', 'pybind.nos.v7_1_0')]
    composed_child_list = []
    compositions_keyval_list = []
    bindings_keyval = {'kwargs_key_name': 'police_priority_map', 'keyval': 'name', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, police_priority_map=police_priority_map)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def policy_map_delete(self, policy_map=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		NOS: 6.0.2b, 7.0.1a, 7.1.0
		SLXOS: 16r.1.00b    

	**This Instance Keyword Arg Tuple**:
		:param policy_map: kwarg tuple.
		:type policy_map: (po_name).

		:param po_name: Policy Map Name (Max Size - 64)
		:type po_name: (unicode)
		
		.. note::
			* pattern - [a-zA-Z]{1}([-a-zA-Z0-9_]{0,63})

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = []
    bindings_list = [('pybind.nos.v6_0_2b.policy_map', 'pybind.nos.v6_0_2b.brocade_policer', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.policy_map', 'pybind.nos.v7_0_1a.brocade_policer', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.policy_map', 'pybind.nos.v7_1_0.brocade_policer', 'pybind.nos.v7_1_0'), ('pybind.slxos.v16r_1_00b.policy_map', 'pybind.slxos.v16r_1_00b.brocade_qos_mqc', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = []
    bindings_keyval = {'kwargs_key_name': 'policy_map', 'keyval': 'po_name', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, policy_map=policy_map)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def policy_map_class_delete(self, policy_map=None, class_=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		NOS: 6.0.2b, 7.0.1a, 7.1.0
		SLXOS: 16r.1.00b    

	**Parent Instance Keyword Arg Tuple(s)**:
		:param policy_map: kwarg tuple.
		:type policy_map: (po_name).

		:param po_name: Policy Map Name (Max Size - 64)
		:type po_name: (unicode)
		
		.. note::
			* pattern - [a-zA-Z]{1}([-a-zA-Z0-9_]{0,63})

	**This Instance Keyword Arg Tuple**:
		:param class_: kwarg tuple.
		:type class_: (cl_name).

		:param cl_name: Policy Map Class Name (Max Size -64)
		:type cl_name: (unicode)
		
		.. note::
			* pattern - [a-zA-Z]{1}([-a-zA-Z0-9_]{0,63})

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = [('pybind.nos.v7_0_1a.policy_map', 'policy_map'), ('pybind.nos.v7_1_0.policy_map', 'policy_map'), ('pybind.nos.v6_0_2b.policy_map', 'policy_map'), ('pybind.slxos.v16r_1_00b.policy_map', 'policy_map')]
    bindings_list = [('pybind.nos.v6_0_2b.policy_map.class_', 'pybind.nos.v6_0_2b.brocade_policer', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.policy_map.class_', 'pybind.nos.v7_0_1a.brocade_policer', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.policy_map.class_', 'pybind.nos.v7_1_0.brocade_policer', 'pybind.nos.v7_1_0'), ('pybind.slxos.v16r_1_00b.policy_map.class_', 'pybind.slxos.v16r_1_00b.brocade_qos_mqc', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'po_name', 'extra_keyval': ''}, {'keyval': 'po_name', 'extra_keyval': ''}, {'keyval': 'po_name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'class_', 'keyval': 'cl_name', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, policy_map=policy_map, class_=class_)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def port_channel_redundancy_group_delete(self, port_channel_redundancy_group=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		NOS: 6.0.2b, 7.0.1a, 7.1.0
		SLXOS: 16r.1.00b    

	**This Instance Keyword Arg Tuple**:
		:param port_channel_redundancy_group: kwarg tuple.
		:type port_channel_redundancy_group: (group_id).

		:param group_id: tuple arg.
		:type group_id: (long)
		
		.. note::
			* range - ['0..4294967295']

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = []
    bindings_list = [('pybind.nos.v6_0_2b.port_channel_redundancy_group', 'pybind.nos.v6_0_2b.brocade_lag', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.port_channel_redundancy_group', 'pybind.nos.v7_0_1a.brocade_lag', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.port_channel_redundancy_group', 'pybind.nos.v7_1_0.brocade_lag', 'pybind.nos.v7_1_0'), ('pybind.slxos.v16r_1_00b.port_channel_redundancy_group', 'pybind.slxos.v16r_1_00b.brocade_lag', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = []
    bindings_keyval = {'kwargs_key_name': 'port_channel_redundancy_group', 'keyval': 'group_id', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, port_channel_redundancy_group=port_channel_redundancy_group)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def port_channel_redundancy_group_port_channel_delete(self, port_channel_redundancy_group=None, port_channel=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		NOS: 6.0.2b, 7.0.1a, 7.1.0
		SLXOS: 16r.1.00b    

	**Parent Instance Keyword Arg Tuple(s)**:
		:param port_channel_redundancy_group: kwarg tuple.
		:type port_channel_redundancy_group: (group_id).

		:param group_id: tuple arg.
		:type group_id: (long)
		
		.. note::
			* range - ['0..4294967295']

	**This Instance Keyword Arg Tuple**:
		:param port_channel: kwarg tuple.
		:type port_channel: (name, port_channel_active).

		:param name: tuple arg.
		:type name: (long)
		
		.. note::
			* range - ['0..4294967295']

		:param port_channel_active: Select port-channel as active in port-channel redundancy group.
		:type port_channel_active: (YANGBool)

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = [('pybind.nos.v7_0_1a.port_channel_redundancy_group', 'port_channel_redundancy_group'), ('pybind.nos.v7_1_0.port_channel_redundancy_group', 'port_channel_redundancy_group'), ('pybind.slxos.v16r_1_00b.port_channel_redundancy_group', 'port_channel_redundancy_group'), ('pybind.nos.v6_0_2b.port_channel_redundancy_group', 'port_channel_redundancy_group')]
    bindings_list = [('pybind.nos.v6_0_2b.port_channel_redundancy_group.port_channel', 'pybind.nos.v6_0_2b.brocade_lag', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.port_channel_redundancy_group.port_channel', 'pybind.nos.v7_0_1a.brocade_lag', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.port_channel_redundancy_group.port_channel', 'pybind.nos.v7_1_0.brocade_lag', 'pybind.nos.v7_1_0'), ('pybind.slxos.v16r_1_00b.port_channel_redundancy_group.port_channel', 'pybind.slxos.v16r_1_00b.brocade_lag', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'group_id', 'extra_keyval': ''}, {'keyval': 'group_id', 'extra_keyval': ''}, {'keyval': 'group_id', 'extra_keyval': ''}, {'keyval': 'group_id', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'port_channel', 'keyval': 'name', 'extra_keyval': 'name, port_channel_active'}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, port_channel_redundancy_group=port_channel_redundancy_group, port_channel=port_channel)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def port_profile_delete(self, port_profile=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		NOS: 6.0.2b, 7.0.1a, 7.1.0
		SLXOS: 16r.1.00b    

	**This Instance Keyword Arg Tuple**:
		:param port_profile: kwarg tuple.
		:type port_profile: (name).

		:param name: Port-profile name (Max Size - 128)
		:type name: (unicode)
		
		.. note::
			* pattern - [a-zA-Z]{1}([-a-zA-Z0-9\.\\\\@#\+\*\(\)=\{~\}%<>=$_\[\]\|]{0,127})

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = []
    bindings_list = [('pybind.nos.v6_0_2b.port_profile_global.port_profile', 'pybind.nos.v6_0_2b.brocade_port_profile', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.port_profile_global.port_profile', 'pybind.nos.v7_0_1a.brocade_port_profile', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.port_profile_global.port_profile', 'pybind.nos.v7_1_0.brocade_port_profile', 'pybind.nos.v7_1_0'), ('pybind.slxos.v16r_1_00b.port_profile_global.port_profile', 'pybind.slxos.v16r_1_00b.brocade_port_profile', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = []
    bindings_keyval = {'kwargs_key_name': u'port_profile', 'keyval': 'name', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, port_profile=port_profile)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def port_profile_domain_delete(self, port_profile_domain=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		NOS: 6.0.2b, 7.0.1a, 7.1.0
		SLXOS: 16r.1.00b    

	**This Instance Keyword Arg Tuple**:
		:param port_profile_domain: kwarg tuple.
		:type port_profile_domain: (port_profile_domain_name).

		:param port_profile_domain_name: tuple arg.
		:type port_profile_domain_name: (unicode)
		
		.. note::
			* pattern - [a-zA-Z]{1}([-a-zA-Z0-9\.\\\\@#\+\*\(\)=\{~\}%<>=$_\[\]\|]{0,127})

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = []
    bindings_list = [('pybind.nos.v6_0_2b.port_profile_domain', 'pybind.nos.v6_0_2b.brocade_port_profile', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.port_profile_domain', 'pybind.nos.v7_0_1a.brocade_port_profile', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.port_profile_domain', 'pybind.nos.v7_1_0.brocade_port_profile', 'pybind.nos.v7_1_0'), ('pybind.slxos.v16r_1_00b.port_profile_domain', 'pybind.slxos.v16r_1_00b.brocade_port_profile', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = []
    bindings_keyval = {'kwargs_key_name': 'port_profile_domain', 'keyval': 'port_profile_domain_name', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, port_profile_domain=port_profile_domain)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def port_profile_domain_port_profile_delete(self, port_profile_domain=None, profile=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		NOS: 6.0.2b, 7.0.1a, 7.1.0
		SLXOS: 16r.1.00b    

	**Parent Instance Keyword Arg Tuple(s)**:
		:param port_profile_domain: kwarg tuple.
		:type port_profile_domain: (port_profile_domain_name).

		:param port_profile_domain_name: tuple arg.
		:type port_profile_domain_name: (unicode)
		
		.. note::
			* pattern - [a-zA-Z]{1}([-a-zA-Z0-9\.\\\\@#\+\*\(\)=\{~\}%<>=$_\[\]\|]{0,127})

	**This Instance Keyword Arg Tuple**:
		:param profile: kwarg tuple.
		:type profile: (profile_name).

		:param profile_name: tuple arg.
		:type profile_name: (unicode)
		
		.. note::
			* pattern - [a-zA-Z]{1}([-a-zA-Z0-9\.\\\\@#\+\*\(\)=\{~\}%<>=$_\[\]\|]{0,127})

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = [('pybind.slxos.v16r_1_00b.port_profile_domain', 'port_profile_domain'), ('pybind.nos.v7_1_0.port_profile_domain', 'port_profile_domain'), ('pybind.nos.v6_0_2b.port_profile_domain', 'port_profile_domain'), ('pybind.nos.v7_0_1a.port_profile_domain', 'port_profile_domain')]
    bindings_list = [('pybind.nos.v6_0_2b.port_profile_domain.profile', 'pybind.nos.v6_0_2b.brocade_port_profile', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.port_profile_domain.profile', 'pybind.nos.v7_0_1a.brocade_port_profile', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.port_profile_domain.profile', 'pybind.nos.v7_1_0.brocade_port_profile', 'pybind.nos.v7_1_0'), ('pybind.slxos.v16r_1_00b.port_profile_domain.profile', 'pybind.slxos.v16r_1_00b.brocade_port_profile', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'port_profile_domain_name', 'extra_keyval': ''}, {'keyval': 'port_profile_domain_name', 'extra_keyval': ''}, {'keyval': 'port_profile_domain_name', 'extra_keyval': ''}, {'keyval': 'port_profile_domain_name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'profile', 'keyval': 'profile_name', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, port_profile_domain=port_profile_domain, profile=profile)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def port_profile_qos_profile_qos_flowcontrol_pfc_delete(self, port_profile=None, pfc=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		NOS: 6.0.2b, 7.0.1a, 7.1.0
		SLXOS: 16r.1.00b    

	**Parent Instance Keyword Arg Tuple(s)**:
		:param port_profile: kwarg tuple.
		:type port_profile: (name).

		:param name: Port-profile name (Max Size - 128)
		:type name: (unicode)
		
		.. note::
			* pattern - [a-zA-Z]{1}([-a-zA-Z0-9\.\\\\@#\+\*\(\)=\{~\}%<>=$_\[\]\|]{0,127})

	**This Instance Keyword Arg Tuple**:
		:param pfc: kwarg tuple.
		:type pfc: (pfc_cos).

		:param pfc_cos: CoS value
		:type pfc_cos: (long)
		
		.. note::
			* range - ['-2147483648..2147483647']

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = [('pybind.nos.v6_0_2b.port_profile', 'port_profile'), ('pybind.nos.v7_1_0.port_profile', 'port_profile'), ('pybind.nos.v7_0_1a.port_profile', 'port_profile'), ('pybind.slxos.v16r_1_00b.port_profile', 'port_profile')]
    bindings_list = [('pybind.nos.v6_0_2b.port_profile.qos_profile.qos.flowcontrol.pfc', 'pybind.nos.v6_0_2b.brocade_port_profile', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.port_profile.qos_profile.qos.flowcontrol.pfc', 'pybind.nos.v7_0_1a.brocade_port_profile', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.port_profile.qos_profile.qos.flowcontrol.pfc', 'pybind.nos.v7_1_0.brocade_port_profile', 'pybind.nos.v7_1_0'), ('pybind.slxos.v16r_1_00b.port_profile.qos_profile.qos.flowcontrol.pfc', 'pybind.slxos.v16r_1_00b.brocade_port_profile', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'pfc', 'keyval': 'pfc_cos', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, port_profile=port_profile, pfc=pfc)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def port_profile_static_delete(self, port_profile=None, static=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		NOS: 6.0.2b, 7.0.1a, 7.1.0
		SLXOS: 16r.1.00b    

	**Parent Instance Keyword Arg Tuple(s)**:
		:param port_profile: kwarg tuple.
		:type port_profile: (name).

		:param name: Port-profile name (Max Size - 128)
		:type name: (unicode)
		
		.. note::
			* pattern - [a-zA-Z]{1}([-a-zA-Z0-9\.\\\\@#\+\*\(\)=\{~\}%<>=$_\[\]\|]{0,127})

	**This Instance Keyword Arg Tuple**:
		:param static: kwarg tuple.
		:type static: (mac_address).

		:param mac_address: mac address in HHHH.HHHH.HHHH format
		:type mac_address: (unicode)

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = [('pybind.nos.v7_1_0.port_profile_global.port_profile', u'port_profile'), ('pybind.slxos.v16r_1_00b.port_profile_global.port_profile', u'port_profile'), ('pybind.nos.v6_0_2b.port_profile_global.port_profile', u'port_profile'), ('pybind.nos.v7_0_1a.port_profile_global.port_profile', u'port_profile')]
    bindings_list = [('pybind.nos.v6_0_2b.port_profile_global.port_profile.static', 'pybind.nos.v6_0_2b.brocade_port_profile', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.port_profile_global.port_profile.static', 'pybind.nos.v7_0_1a.brocade_port_profile', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.port_profile_global.port_profile.static', 'pybind.nos.v7_1_0.brocade_port_profile', 'pybind.nos.v7_1_0'), ('pybind.slxos.v16r_1_00b.port_profile_global.port_profile.static', 'pybind.slxos.v16r_1_00b.brocade_port_profile', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'static', 'keyval': 'mac_address', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, port_profile=port_profile, static=static)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def port_profile_vlan_profile_switchport_access_vlan_delete(self, port_profile=None, vlan=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		NOS: 6.0.2b, 7.0.1a, 7.1.0
		SLXOS: 16r.1.00b    

	**Parent Instance Keyword Arg Tuple(s)**:
		:param port_profile: kwarg tuple.
		:type port_profile: (name).

		:param name: Port-profile name (Max Size - 128)
		:type name: (unicode)
		
		.. note::
			* pattern - [a-zA-Z]{1}([-a-zA-Z0-9\.\\\\@#\+\*\(\)=\{~\}%<>=$_\[\]\|]{0,127})

	**This Instance Keyword Arg Tuple**:
		:param vlan: kwarg tuple.
		:type vlan: (access_vlan_id, access_mac_group).

		:param access_vlan_id: Set the default VLAN for the interface
		:type access_vlan_id: (long)
		
		.. note::
			* range - ['0..4294967295']

		:param access_mac_group: Associate a Mac group with a vlan
		:type access_mac_group: (long)
		
		.. note::
			* range - ['0..4294967295']

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = [('pybind.nos.v7_1_0.port_profile', 'port_profile'), ('pybind.nos.v7_1_0.port_profile', 'port_profile'), ('pybind.slxos.v16r_1_00b.port_profile', 'port_profile'), ('pybind.nos.v7_0_1a.port_profile', 'port_profile'), ('pybind.nos.v6_0_2b.port_profile', 'port_profile'), ('pybind.nos.v6_0_2b.port_profile', 'port_profile'), ('pybind.nos.v7_0_1a.port_profile', 'port_profile'), ('pybind.slxos.v16r_1_00b.port_profile', 'port_profile')]
    bindings_list = [('pybind.nos.v6_0_2b.port_profile.vlan_profile.switchport.access_mac_group_vlan_classification.access.vlan', 'pybind.nos.v6_0_2b.brocade_port_profile', 'pybind.nos.v6_0_2b'), ('pybind.nos.v6_0_2b.port_profile.vlan_profile.switchport.access_mac_vlan_classification.access.vlan', 'pybind.nos.v6_0_2b.brocade_port_profile', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.port_profile.vlan_profile.switchport.access_mac_group_vlan_classification.access.vlan', 'pybind.nos.v7_0_1a.brocade_port_profile', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_0_1a.port_profile.vlan_profile.switchport.access_mac_vlan_classification.access.vlan', 'pybind.nos.v7_0_1a.brocade_port_profile', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.port_profile.vlan_profile.switchport.access_mac_group_vlan_classification.access.vlan', 'pybind.nos.v7_1_0.brocade_port_profile', 'pybind.nos.v7_1_0'), ('pybind.nos.v7_1_0.port_profile.vlan_profile.switchport.access_mac_vlan_classification.access.vlan', 'pybind.nos.v7_1_0.brocade_port_profile', 'pybind.nos.v7_1_0'), ('pybind.slxos.v16r_1_00b.port_profile.vlan_profile.switchport.access_mac_group_vlan_classification.access.vlan', 'pybind.slxos.v16r_1_00b.brocade_port_profile', 'pybind.slxos.v16r_1_00b'), ('pybind.slxos.v16r_1_00b.port_profile.vlan_profile.switchport.access_mac_vlan_classification.access.vlan', 'pybind.slxos.v16r_1_00b.brocade_port_profile', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'vlan', 'keyval': 'access_vlan_id, access_mac_address', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, port_profile=port_profile, vlan=vlan)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def port_profile_vlan_profile_switchport_trunk_allowed_vlan_add_delete(self, port_profile=None, add=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		NOS: 6.0.2b, 7.0.1a, 7.1.0
		SLXOS: 16r.1.00b    

	**Parent Instance Keyword Arg Tuple(s)**:
		:param port_profile: kwarg tuple.
		:type port_profile: (name).

		:param name: Port-profile name (Max Size - 128)
		:type name: (unicode)
		
		.. note::
			* pattern - [a-zA-Z]{1}([-a-zA-Z0-9\.\\\\@#\+\*\(\)=\{~\}%<>=$_\[\]\|]{0,127})

	**This Instance Keyword Arg Tuple**:
		:param add: kwarg tuple.
		:type add: (trunk_vlan_id, trunk_ctag_id).

		:param trunk_vlan_id: tuple arg.
		:type trunk_vlan_id: (long)
		
		.. note::
			* range - ['0..4294967295']

		:param trunk_ctag_id: tuple arg.
		:type trunk_ctag_id: (long)
		
		.. note::
			* range - ['0..4294967295']

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = [('pybind.nos.v7_0_1a.port_profile', 'port_profile'), ('pybind.nos.v6_0_2b.port_profile', 'port_profile'), ('pybind.nos.v7_1_0.port_profile', 'port_profile'), ('pybind.slxos.v16r_1_00b.port_profile', 'port_profile')]
    bindings_list = [('pybind.nos.v6_0_2b.port_profile.vlan_profile.switchport.trunk.trunk_vlan_classification.allowed.vlan.add_', 'pybind.nos.v6_0_2b.brocade_port_profile', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.port_profile.vlan_profile.switchport.trunk.trunk_vlan_classification.allowed.vlan.add_', 'pybind.nos.v7_0_1a.brocade_port_profile', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.port_profile.vlan_profile.switchport.trunk.trunk_vlan_classification.allowed.vlan.add_', 'pybind.nos.v7_1_0.brocade_port_profile', 'pybind.nos.v7_1_0'), ('pybind.slxos.v16r_1_00b.port_profile.vlan_profile.switchport.trunk.trunk_vlan_classification.allowed.vlan.add_', 'pybind.slxos.v16r_1_00b.brocade_port_profile', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'add', 'keyval': 'trunk_vlan_id, trunk_ctag_id', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, port_profile=port_profile, add=add)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def port_profile_vlan_profile_switchport_trunk_allowed_vlan_remove_delete(self, port_profile=None, remove=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		NOS: 6.0.2b, 7.0.1a, 7.1.0
		SLXOS: 16r.1.00b    

	**Parent Instance Keyword Arg Tuple(s)**:
		:param port_profile: kwarg tuple.
		:type port_profile: (name).

		:param name: Port-profile name (Max Size - 128)
		:type name: (unicode)
		
		.. note::
			* pattern - [a-zA-Z]{1}([-a-zA-Z0-9\.\\\\@#\+\*\(\)=\{~\}%<>=$_\[\]\|]{0,127})

	**This Instance Keyword Arg Tuple**:
		:param remove: kwarg tuple.
		:type remove: (trunk_vlan_id, trunk_ctag_id).

		:param trunk_vlan_id: tuple arg.
		:type trunk_vlan_id: (long)
		
		.. note::
			* range - ['0..4294967295']

		:param trunk_ctag_id: tuple arg.
		:type trunk_ctag_id: (long)
		
		.. note::
			* range - ['0..4294967295']

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = [('pybind.nos.v7_1_0.port_profile', 'port_profile'), ('pybind.nos.v6_0_2b.port_profile', 'port_profile'), ('pybind.nos.v7_0_1a.port_profile', 'port_profile'), ('pybind.slxos.v16r_1_00b.port_profile', 'port_profile')]
    bindings_list = [('pybind.nos.v6_0_2b.port_profile.vlan_profile.switchport.trunk.trunk_vlan_classification.allowed.vlan.remove_', 'pybind.nos.v6_0_2b.brocade_port_profile', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.port_profile.vlan_profile.switchport.trunk.trunk_vlan_classification.allowed.vlan.remove_', 'pybind.nos.v7_0_1a.brocade_port_profile', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.port_profile.vlan_profile.switchport.trunk.trunk_vlan_classification.allowed.vlan.remove_', 'pybind.nos.v7_1_0.brocade_port_profile', 'pybind.nos.v7_1_0'), ('pybind.slxos.v16r_1_00b.port_profile.vlan_profile.switchport.trunk.trunk_vlan_classification.allowed.vlan.remove_', 'pybind.slxos.v16r_1_00b.brocade_port_profile', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'remove', 'keyval': 'trunk_vlan_id, trunk_ctag_id', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, port_profile=port_profile, remove=remove)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def preprovision_rbridge_id_delete(self, rbridge_id=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		NOS: 6.0.2b, 7.0.1a, 7.1.0
		SLXOS: 16r.1.00b    

	**This Instance Keyword Arg Tuple**:
		:param rbridge_id: kwarg tuple.
		:type rbridge_id: (rbridge_id, wwn).

		:param rbridge_id: tuple arg.
		:type rbridge_id: (long)
		
		.. note::
			* range - ['0..4294967295']

		:param wwn: World Wide Name (WWN)
		:type wwn: (unicode)
		
		.. note::
			* pattern - [0-9a-fA-F][0-9a-fA-F]:[0-9a-fA-F][0-9a-fA-F]:[0-9a-fA-F][0-9a-fA-F]:[0-9a-fA-F][0-9a-fA-F]:[0-9a-fA-F][0-9a-fA-F]:[0-9a-fA-F][0-9a-fA-F]:[0-9a-fA-F][0-9a-fA-F]:[0-9a-fA-F][0-9a-fA-F]

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = []
    bindings_list = [('pybind.nos.v6_0_2b.preprovision.rbridge_id', 'pybind.nos.v6_0_2b.brocade_preprovision', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.preprovision.rbridge_id', 'pybind.nos.v7_0_1a.brocade_preprovision', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.preprovision.rbridge_id', 'pybind.nos.v7_1_0.brocade_preprovision', 'pybind.nos.v7_1_0'), ('pybind.slxos.v16r_1_00b.preprovision.rbridge_id', 'pybind.slxos.v16r_1_00b.brocade_preprovision', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = []
    bindings_keyval = {'kwargs_key_name': u'rbridge_id', 'keyval': 'rbridge_id, wwn', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, rbridge_id=rbridge_id)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def protocol_cfm_domain_name_delete(self, domain_name=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		SLXOS: 16r.1.00b    

	**This Instance Keyword Arg Tuple**:
		:param domain_name: kwarg tuple.
		:type domain_name: (domain_name).

		:param domain_name: String length 21 char
		:type domain_name: (unicode)
		
		.. note::
			* length - [u'1..21']

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = []
    bindings_list = [('pybind.slxos.v16r_1_00b.protocol.cfm.domain_name', 'pybind.slxos.v16r_1_00b.brocade_interface', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = []
    bindings_keyval = {'kwargs_key_name': u'domain_name', 'keyval': 'domain_name', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, domain_name=domain_name)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def protocol_cfm_domain_name_ma_name_delete(self, domain_name=None, ma_name=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		SLXOS: 16r.1.00b    

	**Parent Instance Keyword Arg Tuple(s)**:
		:param domain_name: kwarg tuple.
		:type domain_name: (domain_name).

		:param domain_name: String length 21 char
		:type domain_name: (unicode)
		
		.. note::
			* length - [u'1..21']

	**This Instance Keyword Arg Tuple**:
		:param ma_name: kwarg tuple.
		:type ma_name: (ma_name).

		:param ma_name: String length 21 char
		:type ma_name: (unicode)
		
		.. note::
			* length - [u'1..21']

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = [('pybind.slxos.v16r_1_00b.protocol.cfm.domain_name', u'domain_name')]
    bindings_list = [('pybind.slxos.v16r_1_00b.protocol.cfm.domain_name.ma_name', 'pybind.slxos.v16r_1_00b.brocade_interface', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'domain_name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'ma_name', 'keyval': 'ma_name', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, domain_name=domain_name, ma_name=ma_name)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def protocol_cfm_domain_name_ma_name_mep_delete(self, domain_name=None, ma_name=None, mep=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		SLXOS: 16r.1.00b    

	**Parent Instance Keyword Arg Tuple(s)**:
		:param domain_name: kwarg tuple.
		:type domain_name: (domain_name).

		:param domain_name: String length 21 char
		:type domain_name: (unicode)
		
		.. note::
			* length - [u'1..21']

		:param ma_name: kwarg tuple.
		:type ma_name: (ma_name).

		:param ma_name: String length 21 char
		:type ma_name: (unicode)
		
		.. note::
			* length - [u'1..21']

	**This Instance Keyword Arg Tuple**:
		:param mep: kwarg tuple.
		:type mep: (mep_id).

		:param mep_id: DECIMAL :: <1-8191>
		:type mep_id: (long)
		
		.. note::
			* range - ['0..4294967295']

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = [('pybind.slxos.v16r_1_00b.protocol.cfm.domain_name', u'domain_name'), ('pybind.slxos.v16r_1_00b.protocol.cfm.domain_name.ma_name', u'ma_name')]
    bindings_list = [('pybind.slxos.v16r_1_00b.protocol.cfm.domain_name.ma_name.cfm_ma_sub_commands.mep', 'pybind.slxos.v16r_1_00b.brocade_interface', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'domain_name', 'extra_keyval': ''}, {'keyval': 'ma_name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'mep', 'keyval': 'mep_id', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, domain_name=domain_name, ma_name=ma_name, mep=mep)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def protocol_cfm_domain_name_ma_name_mep_remote_mep_delete(self, domain_name=None, ma_name=None, mep=None, remote_mep=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		SLXOS: 16r.1.00b    

	**Parent Instance Keyword Arg Tuple(s)**:
		:param domain_name: kwarg tuple.
		:type domain_name: (domain_name).

		:param domain_name: String length 21 char
		:type domain_name: (unicode)
		
		.. note::
			* length - [u'1..21']

		:param ma_name: kwarg tuple.
		:type ma_name: (ma_name).

		:param ma_name: String length 21 char
		:type ma_name: (unicode)
		
		.. note::
			* length - [u'1..21']

		:param mep: kwarg tuple.
		:type mep: (mep_id).

		:param mep_id: DECIMAL :: <1-8191>
		:type mep_id: (long)
		
		.. note::
			* range - ['0..4294967295']

	**This Instance Keyword Arg Tuple**:
		:param remote_mep: kwarg tuple.
		:type remote_mep: (remote_mep).

		:param remote_mep: DECIMAL :: <1-8191>
		:type remote_mep: (long)
		
		.. note::
			* range - ['0..4294967295']

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = [('pybind.slxos.v16r_1_00b.protocol.cfm.domain_name', u'domain_name'), ('pybind.slxos.v16r_1_00b.protocol.cfm.domain_name.ma_name', u'ma_name'), ('pybind.slxos.v16r_1_00b.protocol.cfm.domain_name.ma_name.cfm_ma_sub_commands.mep', u'mep')]
    bindings_list = [('pybind.slxos.v16r_1_00b.protocol.cfm.domain_name.ma_name.cfm_ma_sub_commands.mep.cfm_mep_sub_commands.remote_mep', 'pybind.slxos.v16r_1_00b.brocade_interface', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'domain_name', 'extra_keyval': ''}, {'keyval': 'ma_name', 'extra_keyval': ''}, {'keyval': 'mep_id', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'remote_mep', 'keyval': 'remote_mep', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, domain_name=domain_name, ma_name=ma_name, mep=mep, remote_mep=remote_mep)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def protocol_lldp_profile_delete(self, profile=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		NOS: 6.0.2b, 7.0.1a, 7.1.0
		SLXOS: 16r.1.00b    

	**This Instance Keyword Arg Tuple**:
		:param profile: kwarg tuple.
		:type profile: (profile_name).

		:param profile_name: tuple arg.
		:type profile_name: (unicode)
		
		.. note::
			* length - [u'1..32']
			* pattern - (\S)+

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = []
    bindings_list = [('pybind.nos.v6_0_2b.protocol.lldp.profile', 'pybind.nos.v6_0_2b.brocade_interface', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.protocol.lldp.profile', 'pybind.nos.v7_0_1a.brocade_interface', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.protocol.lldp.profile', 'pybind.nos.v7_1_0.brocade_interface', 'pybind.nos.v7_1_0'), ('pybind.slxos.v16r_1_00b.protocol.lldp.profile', 'pybind.slxos.v16r_1_00b.brocade_interface', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = []
    bindings_keyval = {'kwargs_key_name': u'profile', 'keyval': 'profile_name', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, profile=profile)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def protocol_spanning_tree_mstp_instance_delete(self, instance=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		NOS: 6.0.2b, 7.0.1a, 7.1.0
		SLXOS: 16r.1.00b    

	**This Instance Keyword Arg Tuple**:
		:param instance: kwarg tuple.
		:type instance: (id).

		:param id: tuple arg.
		:type id: (int)
		
		.. note::
			* range - ['0..255']

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = []
    bindings_list = [('pybind.nos.v6_0_2b.protocol.spanning_tree.mstp.instance', 'pybind.nos.v6_0_2b.brocade_interface', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.protocol.spanning_tree.mstp.instance', 'pybind.nos.v7_0_1a.brocade_interface', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.protocol.spanning_tree.mstp.instance', 'pybind.nos.v7_1_0.brocade_interface', 'pybind.nos.v7_1_0'), ('pybind.slxos.v16r_1_00b.protocol.spanning_tree.mstp.instance', 'pybind.slxos.v16r_1_00b.brocade_interface', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = []
    bindings_keyval = {'kwargs_key_name': u'instance', 'keyval': 'id', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, instance=instance)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def protocol_spanning_tree_pvst_vlan_delete(self, vlan=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		NOS: 6.0.2b, 7.0.1a, 7.1.0
		SLXOS: 16r.1.00b    

	**This Instance Keyword Arg Tuple**:
		:param vlan: kwarg tuple.
		:type vlan: (id).

		:param id: tuple arg.
		:type id: (long)
		
		.. note::
			* range - ['0..4294967295']

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = []
    bindings_list = [('pybind.nos.v6_0_2b.protocol.spanning_tree.pvst.vlan', 'pybind.nos.v6_0_2b.brocade_interface', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.protocol.spanning_tree.pvst.vlan', 'pybind.nos.v7_0_1a.brocade_interface', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.protocol.spanning_tree.pvst.vlan', 'pybind.nos.v7_1_0.brocade_interface', 'pybind.nos.v7_1_0'), ('pybind.slxos.v16r_1_00b.protocol.spanning_tree.pvst.vlan', 'pybind.slxos.v16r_1_00b.brocade_interface', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = []
    bindings_keyval = {'kwargs_key_name': u'vlan', 'keyval': 'id', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, vlan=vlan)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def protocol_spanning_tree_rpvst_vlan_delete(self, vlan=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		NOS: 6.0.2b, 7.0.1a, 7.1.0
		SLXOS: 16r.1.00b    

	**This Instance Keyword Arg Tuple**:
		:param vlan: kwarg tuple.
		:type vlan: (id).

		:param id: tuple arg.
		:type id: (long)
		
		.. note::
			* range - ['0..4294967295']

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = []
    bindings_list = [('pybind.nos.v6_0_2b.protocol.spanning_tree.rpvst.vlan', 'pybind.nos.v6_0_2b.brocade_interface', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.protocol.spanning_tree.rpvst.vlan', 'pybind.nos.v7_0_1a.brocade_interface', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.protocol.spanning_tree.rpvst.vlan', 'pybind.nos.v7_1_0.brocade_interface', 'pybind.nos.v7_1_0'), ('pybind.slxos.v16r_1_00b.protocol.spanning_tree.rpvst.vlan', 'pybind.slxos.v16r_1_00b.brocade_interface', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = []
    bindings_keyval = {'kwargs_key_name': u'vlan', 'keyval': 'id', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, vlan=vlan)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def pw_profile_delete(self, pw_profile=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		SLXOS: 16r.1.00b    

	**This Instance Keyword Arg Tuple**:
		:param pw_profile: kwarg tuple.
		:type pw_profile: (pw_profile_name).

		:param pw_profile_name: Pw-profile name (Max Size - 64)
		:type pw_profile_name: (unicode)
		
		.. note::
			* pattern - [a-zA-Z]{1}([-a-zA-Z0-9\.\\\\@#\+\*\(\)=\{~\}%<>=$_\[\]\|]{0,63})

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = []
    bindings_list = [('pybind.slxos.v16r_1_00b.pw_profile', 'pybind.slxos.v16r_1_00b.brocade_pw_profile', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = []
    bindings_keyval = {'kwargs_key_name': 'pw_profile', 'keyval': 'pw_profile_name', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, pw_profile=pw_profile)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def qos_cpu_slot_delete(self, slot=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		SLXOS: 16r.1.00b    

	**This Instance Keyword Arg Tuple**:
		:param slot: kwarg tuple.
		:type slot: (slot_id).

		:param slot_id: tuple arg.
		:type slot_id: (unicode)
		
		.. note::
			* length - [u'1..3']

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = []
    bindings_list = [('pybind.slxos.v16r_1_00b.qos.cpu.slot', 'pybind.slxos.v16r_1_00b.brocade_qos_mls', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = []
    bindings_keyval = {'kwargs_key_name': u'slot', 'keyval': 'slot_id', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, slot=slot)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def qos_cpu_slot_group_delete(self, slot=None, group=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		SLXOS: 16r.1.00b    

	**Parent Instance Keyword Arg Tuple(s)**:
		:param slot: kwarg tuple.
		:type slot: (slot_id).

		:param slot_id: tuple arg.
		:type slot_id: (unicode)
		
		.. note::
			* length - [u'1..3']

	**This Instance Keyword Arg Tuple**:
		:param group: kwarg tuple.
		:type group: (group_id).

		:param group_id: tuple arg.
		:type group_id: (unicode)
		
		.. note::
			* length - [u'1..3']

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = [('pybind.slxos.v16r_1_00b.qos.cpu.slot', u'slot')]
    bindings_list = [('pybind.slxos.v16r_1_00b.qos.cpu.slot.port_group.group', 'pybind.slxos.v16r_1_00b.brocade_qos_mls', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'slot_id', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'group', 'keyval': 'group_id', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, slot=slot, group=group)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def qos_cpu_slot_group_prio_delete(self, slot=None, group=None, group_prio=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		SLXOS: 16r.1.00b    

	**Parent Instance Keyword Arg Tuple(s)**:
		:param slot: kwarg tuple.
		:type slot: (slot_id).

		:param slot_id: tuple arg.
		:type slot_id: (unicode)
		
		.. note::
			* length - [u'1..3']

		:param group: kwarg tuple.
		:type group: (group_id).

		:param group_id: tuple arg.
		:type group_id: (unicode)
		
		.. note::
			* length - [u'1..3']

	**This Instance Keyword Arg Tuple**:
		:param group_prio: kwarg tuple.
		:type group_prio: (group_prio_id).

		:param group_prio_id: tuple arg.
		:type group_prio_id: (unicode)
		
		.. note::
			* length - [u'1..3']

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = [('pybind.slxos.v16r_1_00b.qos.cpu.slot', u'slot'), ('pybind.slxos.v16r_1_00b.qos.cpu.slot.port_group.group', u'group')]
    bindings_list = [('pybind.slxos.v16r_1_00b.qos.cpu.slot.port_group.group.group_config_shaper_wfq.group_prio', 'pybind.slxos.v16r_1_00b.brocade_qos_mls', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'slot_id', 'extra_keyval': ''}, {'keyval': 'group_id', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'group_prio', 'keyval': 'group_prio_id', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, slot=slot, group=group, group_prio=group_prio)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def qos_map_cos_mutation_delete(self, cos_mutation=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		NOS: 6.0.2b, 7.0.1a, 7.1.0
		SLXOS: 16r.1.00b    

	**This Instance Keyword Arg Tuple**:
		:param cos_mutation: kwarg tuple.
		:type cos_mutation: (name, cos0, cos1, cos2, cos3, cos4, cos5, cos6, cos7).

		:param name: Name for the MAP(Max 64)
		:type name: (unicode)
		
		.. note::
			* pattern - [a-zA-Z]{1}([-a-zA-Z0-9_]{0,63})

		:param cos0: tuple arg.
		:type cos0: (long)
		
		.. note::
			* range - ['-2147483648..2147483647']

		:param cos1: tuple arg.
		:type cos1: (long)
		
		.. note::
			* range - ['-2147483648..2147483647']

		:param cos2: tuple arg.
		:type cos2: (long)
		
		.. note::
			* range - ['-2147483648..2147483647']

		:param cos3: tuple arg.
		:type cos3: (long)
		
		.. note::
			* range - ['-2147483648..2147483647']

		:param cos4: tuple arg.
		:type cos4: (long)
		
		.. note::
			* range - ['-2147483648..2147483647']

		:param cos5: tuple arg.
		:type cos5: (long)
		
		.. note::
			* range - ['-2147483648..2147483647']

		:param cos6: tuple arg.
		:type cos6: (long)
		
		.. note::
			* range - ['-2147483648..2147483647']

		:param cos7: tuple arg.
		:type cos7: (long)
		
		.. note::
			* range - ['-2147483648..2147483647']

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = []
    bindings_list = [('pybind.nos.v6_0_2b.qos.map_.cos_mutation', 'pybind.nos.v6_0_2b.brocade_qos', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.qos.map_.cos_mutation', 'pybind.nos.v7_0_1a.brocade_qos', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.qos.map_.cos_mutation', 'pybind.nos.v7_1_0.brocade_qos', 'pybind.nos.v7_1_0'), ('pybind.slxos.v16r_1_00b.qos.map_.cos_mutation', 'pybind.slxos.v16r_1_00b.brocade_qos_mls', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = []
    bindings_keyval = {'kwargs_key_name': u'cos_mutation', 'keyval': 'name', 'extra_keyval': 'name, cos0, cos1, cos2, cos3, cos4, cos5, cos6, cos7'}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, cos_mutation=cos_mutation)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def qos_map_cos_mutation_map_delete(self, cos_mutation=None, cos_to_cos_mappings=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		SLXOS: 16r.1.00b    

	**Parent Instance Keyword Arg Tuple(s)**:
		:param cos_mutation: kwarg tuple.
		:type cos_mutation: (name).

		:param name: Name for the MAP(Max 64)
		:type name: (unicode)
		
		.. note::
			* pattern - [a-zA-Z]{1}([-a-zA-Z0-9_]{0,63})

	**This Instance Keyword Arg Tuple**:
		:param cos_to_cos_mappings: kwarg tuple.
		:type cos_to_cos_mappings: (from_cos).

		:param from_cos: In CoS
		:type from_cos: (int)
		
		.. note::
			* range - ['0..255']

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = [('pybind.slxos.v16r_1_00b.qos.map_.cos_mutation', u'cos_mutation')]
    bindings_list = [('pybind.slxos.v16r_1_00b.qos.map_.cos_mutation.cos_to_cos_mappings', 'pybind.slxos.v16r_1_00b.brocade_qos_mls', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'cos_to_cos_mappings', 'keyval': 'from_cos', 'extra_keyval': 'from_cos'}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, cos_mutation=cos_mutation, cos_to_cos_mappings=cos_to_cos_mappings)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def qos_map_cos_traffic_class_delete(self, cos_traffic_class=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		NOS: 6.0.2b, 7.0.1a, 7.1.0
		SLXOS: 16r.1.00b    

	**This Instance Keyword Arg Tuple**:
		:param cos_traffic_class: kwarg tuple.
		:type cos_traffic_class: (name, cos0, cos1, cos2, cos3, cos4, cos5, cos6, cos7).

		:param name: Name for the MAP(Max 64)
		:type name: (unicode)
		
		.. note::
			* pattern - [a-zA-Z]{1}([-a-zA-Z0-9_]{0,63})

		:param cos0: tuple arg.
		:type cos0: (long)
		
		.. note::
			* range - ['-2147483648..2147483647']

		:param cos1: tuple arg.
		:type cos1: (long)
		
		.. note::
			* range - ['-2147483648..2147483647']

		:param cos2: tuple arg.
		:type cos2: (long)
		
		.. note::
			* range - ['-2147483648..2147483647']

		:param cos3: tuple arg.
		:type cos3: (long)
		
		.. note::
			* range - ['-2147483648..2147483647']

		:param cos4: tuple arg.
		:type cos4: (long)
		
		.. note::
			* range - ['-2147483648..2147483647']

		:param cos5: tuple arg.
		:type cos5: (long)
		
		.. note::
			* range - ['-2147483648..2147483647']

		:param cos6: tuple arg.
		:type cos6: (long)
		
		.. note::
			* range - ['-2147483648..2147483647']

		:param cos7: tuple arg.
		:type cos7: (long)
		
		.. note::
			* range - ['-2147483648..2147483647']

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = []
    bindings_list = [('pybind.nos.v6_0_2b.qos.map_.cos_traffic_class', 'pybind.nos.v6_0_2b.brocade_qos', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.qos.map_.cos_traffic_class', 'pybind.nos.v7_0_1a.brocade_qos', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.qos.map_.cos_traffic_class', 'pybind.nos.v7_1_0.brocade_qos', 'pybind.nos.v7_1_0'), ('pybind.slxos.v16r_1_00b.qos.map_.cos_traffic_class', 'pybind.slxos.v16r_1_00b.brocade_qos_mls', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = []
    bindings_keyval = {'kwargs_key_name': u'cos_traffic_class', 'keyval': 'name', 'extra_keyval': 'name, cos0, cos1, cos2, cos3, cos4, cos5, cos6, cos7'}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, cos_traffic_class=cos_traffic_class)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def qos_map_cos_traffic_class_map_delete(self, cos_traffic_class=None, cos_to_tc_dp_mappings=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		SLXOS: 16r.1.00b    

	**Parent Instance Keyword Arg Tuple(s)**:
		:param cos_traffic_class: kwarg tuple.
		:type cos_traffic_class: (name).

		:param name: Name for the MAP(Max 64)
		:type name: (unicode)
		
		.. note::
			* pattern - [a-zA-Z]{1}([-a-zA-Z0-9_]{0,63})

	**This Instance Keyword Arg Tuple**:
		:param cos_to_tc_dp_mappings: kwarg tuple.
		:type cos_to_tc_dp_mappings: (from_cos).

		:param from_cos: In CoS
		:type from_cos: (int)
		
		.. note::
			* range - ['0..255']

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = [('pybind.slxos.v16r_1_00b.qos.map_.cos_traffic_class', u'cos_traffic_class')]
    bindings_list = [('pybind.slxos.v16r_1_00b.qos.map_.cos_traffic_class.cos_to_tc_dp_mappings', 'pybind.slxos.v16r_1_00b.brocade_qos_mls', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'cos_to_tc_dp_mappings', 'keyval': 'from_cos', 'extra_keyval': 'from_cos'}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, cos_traffic_class=cos_traffic_class, cos_to_tc_dp_mappings=cos_to_tc_dp_mappings)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def qos_map_dscp_cos_delete(self, dscp_cos=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		NOS: 6.0.2b, 7.0.1a, 7.1.0
		SLXOS: 16r.1.00b    

	**This Instance Keyword Arg Tuple**:
		:param dscp_cos: kwarg tuple.
		:type dscp_cos: (dscp_cos_map_name).

		:param dscp_cos_map_name: Name for the MAP(Max 64)
		:type dscp_cos_map_name: (unicode)
		
		.. note::
			* pattern - [a-zA-Z]{1}([-a-zA-Z0-9_]{0,63})

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = []
    bindings_list = [('pybind.nos.v6_0_2b.qos.map_.dscp_cos', 'pybind.nos.v6_0_2b.brocade_qos', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.qos.map_.dscp_cos', 'pybind.nos.v7_0_1a.brocade_qos', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.qos.map_.dscp_cos', 'pybind.nos.v7_1_0.brocade_qos', 'pybind.nos.v7_1_0'), ('pybind.slxos.v16r_1_00b.qos.map_.dscp_cos', 'pybind.slxos.v16r_1_00b.brocade_qos_mls', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = []
    bindings_keyval = {'kwargs_key_name': u'dscp_cos', 'keyval': 'dscp_cos_map_name', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, dscp_cos=dscp_cos)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def qos_map_dscp_cos_map_delete(self, dscp_cos=None, dscp_to_cos_mapping=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		SLXOS: 16r.1.00b    

	**Parent Instance Keyword Arg Tuple(s)**:
		:param dscp_cos: kwarg tuple.
		:type dscp_cos: (dscp_cos_map_name).

		:param dscp_cos_map_name: Name for the MAP(Max 64)
		:type dscp_cos_map_name: (unicode)
		
		.. note::
			* pattern - [a-zA-Z]{1}([-a-zA-Z0-9_]{0,63})

	**This Instance Keyword Arg Tuple**:
		:param dscp_to_cos_mapping: kwarg tuple.
		:type dscp_to_cos_mapping: (dscp_in_values).

		:param dscp_in_values: In DSCP
		:type dscp_in_values: (unicode)
		
		.. note::
			* pattern - (([0-9])|([1-5][0-9])|(6[0-3]))(-(([0-9])|([1-5][0-9])|(6[0-3])))?((,(([0-9])|([1-5][0-9])|(6[0-3]))(-(([0-9])|([1-5][0-9])|(6[0-3])))?)?)*

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = [('pybind.slxos.v16r_1_00b.qos.map_.dscp_cos', u'dscp_cos')]
    bindings_list = [('pybind.slxos.v16r_1_00b.qos.map_.dscp_cos.dscp_to_cos_mapping', 'pybind.slxos.v16r_1_00b.brocade_qos_mls', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'dscp_cos_map_name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'dscp_to_cos_mapping', 'keyval': 'dscp_in_values', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, dscp_cos=dscp_cos, dscp_to_cos_mapping=dscp_to_cos_mapping)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def qos_map_dscp_cos_mark_delete(self, dscp_cos=None, mark=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		NOS: 6.0.2b, 7.0.1a, 7.1.0    

	**Parent Instance Keyword Arg Tuple(s)**:
		:param dscp_cos: kwarg tuple.
		:type dscp_cos: (dscp_cos_map_name).

		:param dscp_cos_map_name: Name for the MAP(Max 64)
		:type dscp_cos_map_name: (unicode)
		
		.. note::
			* pattern - [a-zA-Z]{1}([-a-zA-Z0-9_]{0,63})

	**This Instance Keyword Arg Tuple**:
		:param mark: kwarg tuple.
		:type mark: (dscp_in_values).

		:param dscp_in_values: 0-63;;Incoming DSCP
		:type dscp_in_values: (unicode)
		
		.. note::
			* pattern - (([0-9])|([1-5][0-9])|(6[0-3]))(-(([0-9])|([1-5][0-9])|(6[0-3])))?((,(([0-9])|([1-5][0-9])|(6[0-3]))(-(([0-9])|([1-5][0-9])|(6[0-3])))?)?)*

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = [('pybind.nos.v6_0_2b.qos.map_.dscp_cos', u'dscp_cos'), ('pybind.nos.v7_1_0.qos.map_.dscp_cos', u'dscp_cos'), ('pybind.nos.v7_0_1a.qos.map_.dscp_cos', u'dscp_cos')]
    bindings_list = [('pybind.nos.v6_0_2b.qos.map_.dscp_cos.mark', 'pybind.nos.v6_0_2b.brocade_qos', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.qos.map_.dscp_cos.mark', 'pybind.nos.v7_0_1a.brocade_qos', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.qos.map_.dscp_cos.mark', 'pybind.nos.v7_1_0.brocade_qos', 'pybind.nos.v7_1_0')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'dscp_cos_map_name', 'extra_keyval': ''}, {'keyval': 'dscp_cos_map_name', 'extra_keyval': ''}, {'keyval': 'dscp_cos_map_name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'mark', 'keyval': 'dscp_in_values', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, dscp_cos=dscp_cos, mark=mark)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def qos_map_dscp_mutation_delete(self, dscp_mutation=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		NOS: 6.0.2b, 7.0.1a, 7.1.0
		SLXOS: 16r.1.00b    

	**This Instance Keyword Arg Tuple**:
		:param dscp_mutation: kwarg tuple.
		:type dscp_mutation: (dscp_mutation_map_name).

		:param dscp_mutation_map_name: Name for the MAP(Max 64)
		:type dscp_mutation_map_name: (unicode)
		
		.. note::
			* pattern - [a-zA-Z]{1}([-a-zA-Z0-9_]{0,63})

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = []
    bindings_list = [('pybind.nos.v6_0_2b.qos.map_.dscp_mutation', 'pybind.nos.v6_0_2b.brocade_qos', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.qos.map_.dscp_mutation', 'pybind.nos.v7_0_1a.brocade_qos', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.qos.map_.dscp_mutation', 'pybind.nos.v7_1_0.brocade_qos', 'pybind.nos.v7_1_0'), ('pybind.slxos.v16r_1_00b.qos.map_.dscp_mutation', 'pybind.slxos.v16r_1_00b.brocade_qos_mls', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = []
    bindings_keyval = {'kwargs_key_name': u'dscp_mutation', 'keyval': 'dscp_mutation_map_name', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, dscp_mutation=dscp_mutation)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def qos_map_dscp_mutation_map_delete(self, dscp_mutation=None, dscp_to_dscp_mapping=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		SLXOS: 16r.1.00b    

	**Parent Instance Keyword Arg Tuple(s)**:
		:param dscp_mutation: kwarg tuple.
		:type dscp_mutation: (dscp_mutation_map_name).

		:param dscp_mutation_map_name: Name for the MAP(Max 64)
		:type dscp_mutation_map_name: (unicode)
		
		.. note::
			* pattern - [a-zA-Z]{1}([-a-zA-Z0-9_]{0,63})

	**This Instance Keyword Arg Tuple**:
		:param dscp_to_dscp_mapping: kwarg tuple.
		:type dscp_to_dscp_mapping: (dscp_in_values).

		:param dscp_in_values: In DSCP
		:type dscp_in_values: (unicode)
		
		.. note::
			* pattern - (([0-9])|([1-5][0-9])|(6[0-3]))(-(([0-9])|([1-5][0-9])|(6[0-3])))?((,(([0-9])|([1-5][0-9])|(6[0-3]))(-(([0-9])|([1-5][0-9])|(6[0-3])))?)?)*

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = [('pybind.slxos.v16r_1_00b.qos.map_.dscp_mutation', u'dscp_mutation')]
    bindings_list = [('pybind.slxos.v16r_1_00b.qos.map_.dscp_mutation.dscp_to_dscp_mapping', 'pybind.slxos.v16r_1_00b.brocade_qos_mls', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'dscp_mutation_map_name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'dscp_to_dscp_mapping', 'keyval': 'dscp_in_values', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, dscp_mutation=dscp_mutation, dscp_to_dscp_mapping=dscp_to_dscp_mapping)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def qos_map_dscp_mutation_mark_delete(self, dscp_mutation=None, mark=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		NOS: 6.0.2b, 7.0.1a, 7.1.0    

	**Parent Instance Keyword Arg Tuple(s)**:
		:param dscp_mutation: kwarg tuple.
		:type dscp_mutation: (dscp_mutation_map_name).

		:param dscp_mutation_map_name: Name for the MAP(Max 64)
		:type dscp_mutation_map_name: (unicode)
		
		.. note::
			* pattern - [a-zA-Z]{1}([-a-zA-Z0-9_]{0,63})

	**This Instance Keyword Arg Tuple**:
		:param mark: kwarg tuple.
		:type mark: (dscp_in_values).

		:param dscp_in_values: 0-63;;Incoming DSCP
		:type dscp_in_values: (unicode)
		
		.. note::
			* pattern - (([0-9])|([1-5][0-9])|(6[0-3]))(-(([0-9])|([1-5][0-9])|(6[0-3])))?((,(([0-9])|([1-5][0-9])|(6[0-3]))(-(([0-9])|([1-5][0-9])|(6[0-3])))?)?)*

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = [('pybind.nos.v7_1_0.qos.map_.dscp_mutation', u'dscp_mutation'), ('pybind.nos.v6_0_2b.qos.map_.dscp_mutation', u'dscp_mutation'), ('pybind.nos.v7_0_1a.qos.map_.dscp_mutation', u'dscp_mutation')]
    bindings_list = [('pybind.nos.v6_0_2b.qos.map_.dscp_mutation.mark', 'pybind.nos.v6_0_2b.brocade_qos', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.qos.map_.dscp_mutation.mark', 'pybind.nos.v7_0_1a.brocade_qos', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.qos.map_.dscp_mutation.mark', 'pybind.nos.v7_1_0.brocade_qos', 'pybind.nos.v7_1_0')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'dscp_mutation_map_name', 'extra_keyval': ''}, {'keyval': 'dscp_mutation_map_name', 'extra_keyval': ''}, {'keyval': 'dscp_mutation_map_name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'mark', 'keyval': 'dscp_in_values', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, dscp_mutation=dscp_mutation, mark=mark)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def qos_map_dscp_traffic_class_delete(self, dscp_traffic_class=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		NOS: 6.0.2b, 7.0.1a, 7.1.0
		SLXOS: 16r.1.00b    

	**This Instance Keyword Arg Tuple**:
		:param dscp_traffic_class: kwarg tuple.
		:type dscp_traffic_class: (dscp_traffic_class_map_name).

		:param dscp_traffic_class_map_name: Name for the MAP(Max 64)
		:type dscp_traffic_class_map_name: (unicode)
		
		.. note::
			* pattern - [a-zA-Z]{1}([-a-zA-Z0-9_]{0,63})

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = []
    bindings_list = [('pybind.nos.v6_0_2b.qos.map_.dscp_traffic_class', 'pybind.nos.v6_0_2b.brocade_qos', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.qos.map_.dscp_traffic_class', 'pybind.nos.v7_0_1a.brocade_qos', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.qos.map_.dscp_traffic_class', 'pybind.nos.v7_1_0.brocade_qos', 'pybind.nos.v7_1_0'), ('pybind.slxos.v16r_1_00b.qos.map_.dscp_traffic_class', 'pybind.slxos.v16r_1_00b.brocade_qos_mls', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = []
    bindings_keyval = {'kwargs_key_name': u'dscp_traffic_class', 'keyval': 'dscp_traffic_class_map_name', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, dscp_traffic_class=dscp_traffic_class)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def qos_map_dscp_traffic_class_map_delete(self, dscp_traffic_class=None, dscp_to_tc_dp_mapping=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		SLXOS: 16r.1.00b    

	**Parent Instance Keyword Arg Tuple(s)**:
		:param dscp_traffic_class: kwarg tuple.
		:type dscp_traffic_class: (dscp_traffic_class_map_name).

		:param dscp_traffic_class_map_name: Name for the MAP(Max 64)
		:type dscp_traffic_class_map_name: (unicode)
		
		.. note::
			* pattern - [a-zA-Z]{1}([-a-zA-Z0-9_]{0,63})

	**This Instance Keyword Arg Tuple**:
		:param dscp_to_tc_dp_mapping: kwarg tuple.
		:type dscp_to_tc_dp_mapping: (dscp_in_values).

		:param dscp_in_values: In DSCP
		:type dscp_in_values: (unicode)
		
		.. note::
			* pattern - (([0-9])|([1-5][0-9])|(6[0-3]))(-(([0-9])|([1-5][0-9])|(6[0-3])))?((,(([0-9])|([1-5][0-9])|(6[0-3]))(-(([0-9])|([1-5][0-9])|(6[0-3])))?)?)*

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = [('pybind.slxos.v16r_1_00b.qos.map_.dscp_traffic_class', u'dscp_traffic_class')]
    bindings_list = [('pybind.slxos.v16r_1_00b.qos.map_.dscp_traffic_class.dscp_to_tc_dp_mapping', 'pybind.slxos.v16r_1_00b.brocade_qos_mls', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'dscp_traffic_class_map_name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'dscp_to_tc_dp_mapping', 'keyval': 'dscp_in_values', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, dscp_traffic_class=dscp_traffic_class, dscp_to_tc_dp_mapping=dscp_to_tc_dp_mapping)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def qos_map_dscp_traffic_class_mark_delete(self, dscp_traffic_class=None, mark=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		NOS: 6.0.2b, 7.0.1a, 7.1.0    

	**Parent Instance Keyword Arg Tuple(s)**:
		:param dscp_traffic_class: kwarg tuple.
		:type dscp_traffic_class: (dscp_traffic_class_map_name).

		:param dscp_traffic_class_map_name: Name for the MAP(Max 64)
		:type dscp_traffic_class_map_name: (unicode)
		
		.. note::
			* pattern - [a-zA-Z]{1}([-a-zA-Z0-9_]{0,63})

	**This Instance Keyword Arg Tuple**:
		:param mark: kwarg tuple.
		:type mark: (dscp_in_values).

		:param dscp_in_values: 0-63;;Incoming DSCP
		:type dscp_in_values: (unicode)
		
		.. note::
			* pattern - (([0-9])|([1-5][0-9])|(6[0-3]))(-(([0-9])|([1-5][0-9])|(6[0-3])))?((,(([0-9])|([1-5][0-9])|(6[0-3]))(-(([0-9])|([1-5][0-9])|(6[0-3])))?)?)*

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = [('pybind.nos.v6_0_2b.qos.map_.dscp_traffic_class', u'dscp_traffic_class'), ('pybind.nos.v7_1_0.qos.map_.dscp_traffic_class', u'dscp_traffic_class'), ('pybind.nos.v7_0_1a.qos.map_.dscp_traffic_class', u'dscp_traffic_class')]
    bindings_list = [('pybind.nos.v6_0_2b.qos.map_.dscp_traffic_class.mark', 'pybind.nos.v6_0_2b.brocade_qos', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.qos.map_.dscp_traffic_class.mark', 'pybind.nos.v7_0_1a.brocade_qos', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.qos.map_.dscp_traffic_class.mark', 'pybind.nos.v7_1_0.brocade_qos', 'pybind.nos.v7_1_0')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'dscp_traffic_class_map_name', 'extra_keyval': ''}, {'keyval': 'dscp_traffic_class_map_name', 'extra_keyval': ''}, {'keyval': 'dscp_traffic_class_map_name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'mark', 'keyval': 'dscp_in_values', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, dscp_traffic_class=dscp_traffic_class, mark=mark)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def qos_map_traffic_class_cos_delete(self, traffic_class_cos=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		SLXOS: 16r.1.00b    

	**This Instance Keyword Arg Tuple**:
		:param traffic_class_cos: kwarg tuple.
		:type traffic_class_cos: (traffic_class_cos_map_name).

		:param traffic_class_cos_map_name: Name for the MAP(Max 64)
		:type traffic_class_cos_map_name: (unicode)
		
		.. note::
			* pattern - [a-zA-Z]{1}([-a-zA-Z0-9_]{0,63})

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = []
    bindings_list = [('pybind.slxos.v16r_1_00b.qos.map_.traffic_class_cos', 'pybind.slxos.v16r_1_00b.brocade_qos_mls', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = []
    bindings_keyval = {'kwargs_key_name': u'traffic_class_cos', 'keyval': 'traffic_class_cos_map_name', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, traffic_class_cos=traffic_class_cos)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def qos_map_traffic_class_cos_map_delete(self, traffic_class_cos=None, tc_dp_to_cos_mapping=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		SLXOS: 16r.1.00b    

	**Parent Instance Keyword Arg Tuple(s)**:
		:param traffic_class_cos: kwarg tuple.
		:type traffic_class_cos: (traffic_class_cos_map_name).

		:param traffic_class_cos_map_name: Name for the MAP(Max 64)
		:type traffic_class_cos_map_name: (unicode)
		
		.. note::
			* pattern - [a-zA-Z]{1}([-a-zA-Z0-9_]{0,63})

	**This Instance Keyword Arg Tuple**:
		:param tc_dp_to_cos_mapping: kwarg tuple.
		:type tc_dp_to_cos_mapping: (from_traffic_class, from_drop_precedence).

		:param from_traffic_class: In Traffic-Class
		:type from_traffic_class: (int)
		
		.. note::
			* range - ['0..255']

		:param from_drop_precedence: In Drop-Precedence
		:type from_drop_precedence: (int)
		
		.. note::
			* range - ['0..255']

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = [('pybind.slxos.v16r_1_00b.qos.map_.traffic_class_cos', u'traffic_class_cos')]
    bindings_list = [('pybind.slxos.v16r_1_00b.qos.map_.traffic_class_cos.tc_dp_to_cos_mapping', 'pybind.slxos.v16r_1_00b.brocade_qos_mls', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'traffic_class_cos_map_name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'tc_dp_to_cos_mapping', 'keyval': 'from_traffic_class, from_drop_precedence', 'extra_keyval': 'from_traffic_class, from_drop_precedence'}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, traffic_class_cos=traffic_class_cos, tc_dp_to_cos_mapping=tc_dp_to_cos_mapping)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def qos_mpls_map_dscp_exp_delete(self, dscp_exp=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		SLXOS: 16r.1.00b    

	**This Instance Keyword Arg Tuple**:
		:param dscp_exp: kwarg tuple.
		:type dscp_exp: (dscp_exp_map_name).

		:param dscp_exp_map_name: Name for the MAP(Max 64)
		:type dscp_exp_map_name: (unicode)
		
		.. note::
			* pattern - [a-zA-Z]{1}([-a-zA-Z0-9_]{0,63})

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = []
    bindings_list = [('pybind.slxos.v16r_1_00b.qos_mpls.map_.dscp_exp', 'pybind.slxos.v16r_1_00b.brocade_qos_mpls', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = []
    bindings_keyval = {'kwargs_key_name': u'dscp_exp', 'keyval': 'dscp_exp_map_name', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, dscp_exp=dscp_exp)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def qos_mpls_map_dscp_exp_dscp_delete(self, dscp_exp=None, dscp=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		SLXOS: 16r.1.00b    

	**Parent Instance Keyword Arg Tuple(s)**:
		:param dscp_exp: kwarg tuple.
		:type dscp_exp: (dscp_exp_map_name).

		:param dscp_exp_map_name: Name for the MAP(Max 64)
		:type dscp_exp_map_name: (unicode)
		
		.. note::
			* pattern - [a-zA-Z]{1}([-a-zA-Z0-9_]{0,63})

	**This Instance Keyword Arg Tuple**:
		:param dscp: kwarg tuple.
		:type dscp: (dscp_in_values).

		:param dscp_in_values: tuple arg.
		:type dscp_in_values: (long)
		
		.. note::
			* range - ['0..4294967295']

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = [('pybind.slxos.v16r_1_00b.qos_mpls.map_.dscp_exp', u'dscp_exp')]
    bindings_list = [('pybind.slxos.v16r_1_00b.qos_mpls.map_.dscp_exp.dscp', 'pybind.slxos.v16r_1_00b.brocade_qos_mpls', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'dscp_exp_map_name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'dscp', 'keyval': 'dscp_in_values', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, dscp_exp=dscp_exp, dscp=dscp)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def qos_mpls_map_exp_dscp_delete(self, exp_dscp=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		SLXOS: 16r.1.00b    

	**This Instance Keyword Arg Tuple**:
		:param exp_dscp: kwarg tuple.
		:type exp_dscp: (exp_dscp_map_name).

		:param exp_dscp_map_name: Name for the MAP(Max 64)
		:type exp_dscp_map_name: (unicode)
		
		.. note::
			* pattern - [a-zA-Z]{1}([-a-zA-Z0-9_]{0,63})

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = []
    bindings_list = [('pybind.slxos.v16r_1_00b.qos_mpls.map_.exp_dscp', 'pybind.slxos.v16r_1_00b.brocade_qos_mpls', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = []
    bindings_keyval = {'kwargs_key_name': u'exp_dscp', 'keyval': 'exp_dscp_map_name', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, exp_dscp=exp_dscp)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def qos_mpls_map_exp_dscp_exp_delete(self, exp_dscp=None, exp=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		SLXOS: 16r.1.00b    

	**Parent Instance Keyword Arg Tuple(s)**:
		:param exp_dscp: kwarg tuple.
		:type exp_dscp: (exp_dscp_map_name).

		:param exp_dscp_map_name: Name for the MAP(Max 64)
		:type exp_dscp_map_name: (unicode)
		
		.. note::
			* pattern - [a-zA-Z]{1}([-a-zA-Z0-9_]{0,63})

	**This Instance Keyword Arg Tuple**:
		:param exp: kwarg tuple.
		:type exp: (exp_in_values).

		:param exp_in_values: tuple arg.
		:type exp_in_values: (long)
		
		.. note::
			* range - ['0..4294967295']

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = [('pybind.slxos.v16r_1_00b.qos_mpls.map_.exp_dscp', u'exp_dscp')]
    bindings_list = [('pybind.slxos.v16r_1_00b.qos_mpls.map_.exp_dscp.exp', 'pybind.slxos.v16r_1_00b.brocade_qos_mpls', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'exp_dscp_map_name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'exp', 'keyval': 'exp_in_values', 'extra_keyval': 'exp_in_values'}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, exp_dscp=exp_dscp, exp=exp)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def qos_mpls_map_exp_traffic_class_delete(self, exp_traffic_class=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		SLXOS: 16r.1.00b    

	**This Instance Keyword Arg Tuple**:
		:param exp_traffic_class: kwarg tuple.
		:type exp_traffic_class: (exp_traffic_class_map_name).

		:param exp_traffic_class_map_name: Name for the MAP(Max 64)
		:type exp_traffic_class_map_name: (unicode)
		
		.. note::
			* pattern - [a-zA-Z]{1}([-a-zA-Z0-9_]{0,63})

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = []
    bindings_list = [('pybind.slxos.v16r_1_00b.qos_mpls.map_.exp_traffic_class', 'pybind.slxos.v16r_1_00b.brocade_qos_mpls', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = []
    bindings_keyval = {'kwargs_key_name': u'exp_traffic_class', 'keyval': 'exp_traffic_class_map_name', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, exp_traffic_class=exp_traffic_class)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def qos_mpls_map_exp_traffic_class_exp_delete(self, exp_traffic_class=None, exp=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		SLXOS: 16r.1.00b    

	**Parent Instance Keyword Arg Tuple(s)**:
		:param exp_traffic_class: kwarg tuple.
		:type exp_traffic_class: (exp_traffic_class_map_name).

		:param exp_traffic_class_map_name: Name for the MAP(Max 64)
		:type exp_traffic_class_map_name: (unicode)
		
		.. note::
			* pattern - [a-zA-Z]{1}([-a-zA-Z0-9_]{0,63})

	**This Instance Keyword Arg Tuple**:
		:param exp: kwarg tuple.
		:type exp: (exp_in_values).

		:param exp_in_values: tuple arg.
		:type exp_in_values: (long)
		
		.. note::
			* range - ['0..4294967295']

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = [('pybind.slxos.v16r_1_00b.qos_mpls.map_.exp_traffic_class', u'exp_traffic_class')]
    bindings_list = [('pybind.slxos.v16r_1_00b.qos_mpls.map_.exp_traffic_class.exp', 'pybind.slxos.v16r_1_00b.brocade_qos_mpls', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'exp_traffic_class_map_name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'exp', 'keyval': 'exp_in_values', 'extra_keyval': 'exp_in_values'}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, exp_traffic_class=exp_traffic_class, exp=exp)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def qos_mpls_map_inexp_outexp_delete(self, inexp_outexp=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		SLXOS: 16r.1.00b    

	**This Instance Keyword Arg Tuple**:
		:param inexp_outexp: kwarg tuple.
		:type inexp_outexp: (inexp_outexp_map_name).

		:param inexp_outexp_map_name: Name for the MAP(Max 64)
		:type inexp_outexp_map_name: (unicode)
		
		.. note::
			* pattern - [a-zA-Z]{1}([-a-zA-Z0-9_]{0,63})

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = []
    bindings_list = [('pybind.slxos.v16r_1_00b.qos_mpls.map_.inexp_outexp', 'pybind.slxos.v16r_1_00b.brocade_qos_mpls', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = []
    bindings_keyval = {'kwargs_key_name': u'inexp_outexp', 'keyval': 'inexp_outexp_map_name', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, inexp_outexp=inexp_outexp)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def qos_mpls_map_inexp_outexp_in_exp_delete(self, inexp_outexp=None, in_exp=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		SLXOS: 16r.1.00b    

	**Parent Instance Keyword Arg Tuple(s)**:
		:param inexp_outexp: kwarg tuple.
		:type inexp_outexp: (inexp_outexp_map_name).

		:param inexp_outexp_map_name: Name for the MAP(Max 64)
		:type inexp_outexp_map_name: (unicode)
		
		.. note::
			* pattern - [a-zA-Z]{1}([-a-zA-Z0-9_]{0,63})

	**This Instance Keyword Arg Tuple**:
		:param in_exp: kwarg tuple.
		:type in_exp: (in_exp_in_values).

		:param in_exp_in_values: tuple arg.
		:type in_exp_in_values: (long)
		
		.. note::
			* range - ['-2147483648..2147483647']

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = [('pybind.slxos.v16r_1_00b.qos_mpls.map_.inexp_outexp', u'inexp_outexp')]
    bindings_list = [('pybind.slxos.v16r_1_00b.qos_mpls.map_.inexp_outexp.in_exp', 'pybind.slxos.v16r_1_00b.brocade_qos_mpls', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'inexp_outexp_map_name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'in_exp', 'keyval': 'in_exp_in_values', 'extra_keyval': 'in_exp_in_values'}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, inexp_outexp=inexp_outexp, in_exp=in_exp)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def qos_mpls_map_traffic_class_exp_delete(self, traffic_class_exp=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		SLXOS: 16r.1.00b    

	**This Instance Keyword Arg Tuple**:
		:param traffic_class_exp: kwarg tuple.
		:type traffic_class_exp: (traffic_class_exp_map_name).

		:param traffic_class_exp_map_name: Name for the MAP(Max 64)
		:type traffic_class_exp_map_name: (unicode)
		
		.. note::
			* pattern - [a-zA-Z]{1}([-a-zA-Z0-9_]{0,63})

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = []
    bindings_list = [('pybind.slxos.v16r_1_00b.qos_mpls.map_.traffic_class_exp', 'pybind.slxos.v16r_1_00b.brocade_qos_mpls', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = []
    bindings_keyval = {'kwargs_key_name': u'traffic_class_exp', 'keyval': 'traffic_class_exp_map_name', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, traffic_class_exp=traffic_class_exp)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def qos_mpls_map_traffic_class_exp_traffic_class_delete(self, traffic_class_exp=None, priority=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		SLXOS: 16r.1.00b    

	**Parent Instance Keyword Arg Tuple(s)**:
		:param traffic_class_exp: kwarg tuple.
		:type traffic_class_exp: (traffic_class_exp_map_name).

		:param traffic_class_exp_map_name: Name for the MAP(Max 64)
		:type traffic_class_exp_map_name: (unicode)
		
		.. note::
			* pattern - [a-zA-Z]{1}([-a-zA-Z0-9_]{0,63})

	**This Instance Keyword Arg Tuple**:
		:param priority: kwarg tuple.
		:type priority: (priority_in_values, drop_precedence, to, exp).

		:param priority_in_values: tuple arg.
		:type priority_in_values: (long)
		
		.. note::
			* range - ['0..4294967295']

		:param drop_precedence: drop-precedence value 0-3
		:type drop_precedence: (long)
		
		.. note::
			* range - ['0..4294967295']

		:param to: to
		:type to: (YANGBool)

		:param exp: exp value 0-7
		:type exp: (long)
		
		.. note::
			* range - ['0..4294967295']

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = [('pybind.slxos.v16r_1_00b.qos_mpls.map_.traffic_class_exp', u'traffic_class_exp')]
    bindings_list = [('pybind.slxos.v16r_1_00b.qos_mpls.map_.traffic_class_exp.priority', 'pybind.slxos.v16r_1_00b.brocade_qos_mpls', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'traffic_class_exp_map_name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'priority', 'keyval': 'priority_in_values', 'extra_keyval': 'priority_in_values, drop_precedence, to, exp'}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, traffic_class_exp=traffic_class_exp, priority=priority)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def qos_red_profile_delete(self, red_profile=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		NOS: 6.0.2b, 7.0.1a, 7.1.0
		SLXOS: 16r.1.00b    

	**This Instance Keyword Arg Tuple**:
		:param red_profile: kwarg tuple.
		:type red_profile: (profile_id, min_threshold, max_threshold, drop_probability).

		:param profile_id: 0-383;;Profile Id
		:type profile_id: (long)
		
		.. note::
			* range - ['-2147483648..2147483647']

		:param min_threshold: Minimum Threshold in Percentage
		:type min_threshold: (long)
		
		.. note::
			* range - ['-2147483648..2147483647']

		:param max_threshold: Maximum Threshold in Percentage
		:type max_threshold: (long)
		
		.. note::
			* range - ['-2147483648..2147483647']

		:param drop_probability: Drop Probability in Percentage
		:type drop_probability: (long)
		
		.. note::
			* range - ['-2147483648..2147483647']

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = []
    bindings_list = [('pybind.nos.v6_0_2b.qos.red_profile', 'pybind.nos.v6_0_2b.brocade_qos', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.qos.red_profile', 'pybind.nos.v7_0_1a.brocade_qos', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.qos.red_profile', 'pybind.nos.v7_1_0.brocade_qos', 'pybind.nos.v7_1_0'), ('pybind.slxos.v16r_1_00b.qos.red_profile', 'pybind.slxos.v16r_1_00b.brocade_qos_mls', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = []
    bindings_keyval = {'kwargs_key_name': u'red_profile', 'keyval': 'profile_id', 'extra_keyval': 'profile_id, min_threshold, max_threshold, drop_probability'}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, red_profile=red_profile)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def qos_service_policy_delete(self, service_policy=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		NOS: 6.0.2b, 7.0.1a, 7.1.0
		SLXOS: 16r.1.00b    

	**This Instance Keyword Arg Tuple**:
		:param service_policy: kwarg tuple.
		:type service_policy: (direction, policy_map_name).

		:param direction: tuple arg.
		:type direction: (unicode)
		
		.. note::
			* enum - [u'in']

		:param policy_map_name: MAP_NAME;;Qos Policy map name
		:type policy_map_name: (unicode)
		
		.. note::
			* pattern - [a-zA-Z]{1}([-a-zA-Z0-9_]{0,63})

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = []
    bindings_list = [('pybind.nos.v6_0_2b.system_qos.qos.service_policy', 'pybind.nos.v6_0_2b.brocade_policer', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.system_qos.qos.service_policy', 'pybind.nos.v7_0_1a.brocade_policer', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.system_qos.qos.service_policy', 'pybind.nos.v7_1_0.brocade_policer', 'pybind.nos.v7_1_0'), ('pybind.slxos.v16r_1_00b.system_qos.qos.service_policy', 'pybind.slxos.v16r_1_00b.brocade_qos_mqc', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = []
    bindings_keyval = {'kwargs_key_name': u'service_policy', 'keyval': 'direction, policy_map_name', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, service_policy=service_policy)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def queues_state_queue_interface_list_delete(self, queue_interface_list=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		SLXOS: 16r.1.00b    

	**This Instance Keyword Arg Tuple**:
		:param queue_interface_list: kwarg tuple.
		:type queue_interface_list: (interface_value).

		:param interface_value: tuple arg.
		:type interface_value: (unicode)

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = []
    bindings_list = [('pybind.slxos.v16r_1_00b.queues_state.queue_interface_list', 'pybind.slxos.v16r_1_00b.brocade_openflow_operational', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = []
    bindings_keyval = {'kwargs_key_name': u'queue_interface_list', 'keyval': 'interface_value', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, queue_interface_list=queue_interface_list)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def queues_state_queue_interface_list_queue_info_list_delete(self, queue_interface_list=None, queue_info_list=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		SLXOS: 16r.1.00b    

	**Parent Instance Keyword Arg Tuple(s)**:
		:param queue_interface_list: kwarg tuple.
		:type queue_interface_list: (interface_value).

		:param interface_value: tuple arg.
		:type interface_value: (unicode)

	**This Instance Keyword Arg Tuple**:
		:param queue_info_list: kwarg tuple.
		:type queue_info_list: (interface, num).

		:param interface: tuple arg.
		:type interface: (unicode)

		:param num: tuple arg.
		:type num: (long)
		
		.. note::
			* range - ['0..4294967295']

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = [('pybind.slxos.v16r_1_00b.queues_state.queue_interface_list', u'queue_interface_list')]
    bindings_list = [('pybind.slxos.v16r_1_00b.queues_state.queue_interface_list.queue_info_list', 'pybind.slxos.v16r_1_00b.brocade_openflow_operational', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'interface_value', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'queue_info_list', 'keyval': 'interface, num', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, queue_interface_list=queue_interface_list, queue_info_list=queue_info_list)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def radius_server_host_delete(self, host=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		NOS: 6.0.2b, 7.0.1a, 7.1.0
		SLXOS: 16r.1.00b    

	**This Instance Keyword Arg Tuple**:
		:param host: kwarg tuple.
		:type host: (hostname).

		:param hostname: INETADDRESS   Domain name or IP Address of
 this RADIUS server
		:type hostname: (unicode)
		
		.. note::
			* length - [u'0..max']
			* pattern - \p{IsBasicLatin}{0,255}

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = []
    bindings_list = [('pybind.nos.v6_0_2b.radius_server.host', 'pybind.nos.v6_0_2b.brocade_aaa', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.radius_server.host', 'pybind.nos.v7_0_1a.brocade_aaa', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.radius_server.host', 'pybind.nos.v7_1_0.brocade_aaa', 'pybind.nos.v7_1_0'), ('pybind.slxos.v16r_1_00b.radius_server.host', 'pybind.slxos.v16r_1_00b.brocade_aaa', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = []
    bindings_keyval = {'kwargs_key_name': u'host', 'keyval': 'hostname, use_vrf', 'extra_keyval': 'hostname, use_vrf, auth_port, protocol, key, encryption_level, retries, timeout'}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, host=host)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def rbridge_id_ag_nport_interface_fiberchannel_delete(self, rbridge_id=None, nport=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		NOS: 6.0.2b, 7.0.1a, 7.1.0
		SLXOS: 16r.1.00b    

	**Parent Instance Keyword Arg Tuple(s)**:
		:param rbridge_id: kwarg tuple.
		:type rbridge_id: (rbridge_id).

		:param rbridge_id: tuple arg.
		:type rbridge_id: (long)
		
		.. note::
			* range - ['0..4294967295']

	**This Instance Keyword Arg Tuple**:
		:param nport: kwarg tuple.
		:type nport: (agNPortNb).

		:param agNPortNb: tuple arg.
		:type agNPortNb: (unicode)
		
		.. note::
			* length - [u'1..250']

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = [('pybind.nos.v7_0_1a.rbridge_id', 'rbridge_id'), ('pybind.nos.v6_0_2b.rbridge_id', 'rbridge_id'), ('pybind.slxos.v16r_1_00b.rbridge_id', 'rbridge_id'), ('pybind.nos.v7_1_0.rbridge_id', 'rbridge_id')]
    bindings_list = [('pybind.nos.v6_0_2b.rbridge_id.ag.nport_menu.nport_interface.nport', 'pybind.nos.v6_0_2b.brocade_rbridge', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.rbridge_id.ag.nport_menu.nport_interface.nport', 'pybind.nos.v7_0_1a.brocade_rbridge', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.rbridge_id.ag.nport_menu.nport_interface.nport', 'pybind.nos.v7_1_0.brocade_rbridge', 'pybind.nos.v7_1_0'), ('pybind.slxos.v16r_1_00b.rbridge_id.ag.nport_menu.nport_interface.nport', 'pybind.slxos.v16r_1_00b.brocade_rbridge', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'rbridge_id', 'extra_keyval': ''}, {'keyval': 'rbridge_id', 'extra_keyval': ''}, {'keyval': 'rbridge_id', 'extra_keyval': ''}, {'keyval': 'rbridge_id', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'nport', 'keyval': 'agNPortNb', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, rbridge_id=rbridge_id, nport=nport)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def rbridge_id_ag_pg_delete(self, rbridge_id=None, pg=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		NOS: 6.0.2b, 7.0.1a, 7.1.0
		SLXOS: 16r.1.00b    

	**Parent Instance Keyword Arg Tuple(s)**:
		:param rbridge_id: kwarg tuple.
		:type rbridge_id: (rbridge_id).

		:param rbridge_id: tuple arg.
		:type rbridge_id: (long)
		
		.. note::
			* range - ['0..4294967295']

	**This Instance Keyword Arg Tuple**:
		:param pg: kwarg tuple.
		:type pg: (pgid).

		:param pgid: tuple arg.
		:type pgid: (long)
		
		.. note::
			* range - ['0..4294967295']

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = [('pybind.nos.v7_1_0.rbridge_id', 'rbridge_id'), ('pybind.slxos.v16r_1_00b.rbridge_id', 'rbridge_id'), ('pybind.nos.v6_0_2b.rbridge_id', 'rbridge_id'), ('pybind.nos.v7_0_1a.rbridge_id', 'rbridge_id')]
    bindings_list = [('pybind.nos.v6_0_2b.rbridge_id.ag.pg', 'pybind.nos.v6_0_2b.brocade_rbridge', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.rbridge_id.ag.pg', 'pybind.nos.v7_0_1a.brocade_rbridge', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.rbridge_id.ag.pg', 'pybind.nos.v7_1_0.brocade_rbridge', 'pybind.nos.v7_1_0'), ('pybind.slxos.v16r_1_00b.rbridge_id.ag.pg', 'pybind.slxos.v16r_1_00b.brocade_rbridge', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'rbridge_id', 'extra_keyval': ''}, {'keyval': 'rbridge_id', 'extra_keyval': ''}, {'keyval': 'rbridge_id', 'extra_keyval': ''}, {'keyval': 'rbridge_id', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'pg', 'keyval': 'pgid', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, rbridge_id=rbridge_id, pg=pg)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def rbridge_id_arp_delete(self, rbridge_id=None, arp_entry=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		NOS: 6.0.2b, 7.0.1a, 7.1.0    

	**Parent Instance Keyword Arg Tuple(s)**:
		:param rbridge_id: kwarg tuple.
		:type rbridge_id: (rbridge_id).

		:param rbridge_id: tuple arg.
		:type rbridge_id: (long)
		
		.. note::
			* range - ['0..4294967295']

	**This Instance Keyword Arg Tuple**:
		:param arp_entry: kwarg tuple.
		:type arp_entry: (arp_ip_address, mac_address_value, interfacename, GigabitEthernet, TenGigabitEthernet, FortyGigabitEthernet, HundredGigabitEthernet, Ve).

		:param arp_ip_address: A.B.C.D;; IP address of the ARP entry
		:type arp_ip_address: (unicode)
		
		.. note::
			* pattern - (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?

		:param mac_address_value: tuple arg.
		:type mac_address_value: (unicode)

		:param interfacename: tuple arg.
		:type interfacename: (unicode)
		
		.. note::
			* enum - [u'interface']

		:param GigabitEthernet: tuple arg.
		:type GigabitEthernet: (unicode)
		
		.. note::
			* length - [u'3..16']
			* pattern - ((([1-9]|[1-9][0-9]|1[0-9][0-9]|2[0-3][0-9])/)?(([0-9]|[1][0-6]))/([1-9]|[1-9][0-9]|[1-9][0-9][0-9])(:[1-4])?)

		:param TenGigabitEthernet: tuple arg.
		:type TenGigabitEthernet: (unicode)
		
		.. note::
			* length - [u'3..16']
			* pattern - ((([1-9]|[1-9][0-9]|1[0-9][0-9]|2[0-3][0-9])/)?(([0-9]|[1][0-6]))/([1-9]|[1-9][0-9]|[1-9][0-9][0-9])(:[1-4])?)

		:param FortyGigabitEthernet: tuple arg.
		:type FortyGigabitEthernet: (unicode)
		
		.. note::
			* length - [u'3..16']
			* pattern - ((([1-9]|[1-9][0-9]|1[0-9][0-9]|2[0-3][0-9])/)?(([0-9]|[1][0-6]))/([1-9]|[1-9][0-9]|[1-9][0-9][0-9])(:[1-4])?)

		:param HundredGigabitEthernet: tuple arg.
		:type HundredGigabitEthernet: (unicode)
		
		.. note::
			* length - [u'3..16']
			* pattern - ((([1-9]|[1-9][0-9]|1[0-9][0-9]|2[0-3][0-9])/)?(([0-9]|[1][0-6]))/([1-9]|[1-9][0-9]|[1-9][0-9][0-9])(:[1-4])?)

		:param Ve: tuple arg.
		:type Ve: (long)
		
		.. note::
			* range - ['0..4294967295']

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = [('pybind.nos.v7_1_0.rbridge_id', 'rbridge_id'), ('pybind.nos.v6_0_2b.rbridge_id', 'rbridge_id'), ('pybind.nos.v7_0_1a.rbridge_id', 'rbridge_id')]
    bindings_list = [('pybind.nos.v6_0_2b.rbridge_id.arp_entry', 'pybind.nos.v6_0_2b.brocade_rbridge', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.rbridge_id.arp_entry', 'pybind.nos.v7_0_1a.brocade_rbridge', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.rbridge_id.arp_entry', 'pybind.nos.v7_1_0.brocade_rbridge', 'pybind.nos.v7_1_0')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'rbridge_id', 'extra_keyval': ''}, {'keyval': 'rbridge_id', 'extra_keyval': ''}, {'keyval': 'rbridge_id', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'arp_entry', 'keyval': 'arp_ip_address', 'extra_keyval': 'arp_ip_address, mac_address_value, interfacename, Port_channel, GigabitEthernet, TenGigabitEthernet, FortyGigabitEthernet, HundredGigabitEthernet, Ve'}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, rbridge_id=rbridge_id, arp_entry=arp_entry)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def rbridge_id_bp_rate_limit_queue_delete(self, rbridge_id=None, queue=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		NOS: 7.0.1a, 7.1.0    

	**Parent Instance Keyword Arg Tuple(s)**:
		:param rbridge_id: kwarg tuple.
		:type rbridge_id: (rbridge_id).

		:param rbridge_id: tuple arg.
		:type rbridge_id: (long)
		
		.. note::
			* range - ['0..4294967295']

	**This Instance Keyword Arg Tuple**:
		:param queue: kwarg tuple.
		:type queue: (queue_id).

		:param queue_id: BP queue number (only queue 0 is supported)
		:type queue_id: (long)
		
		.. note::
			* range - ['0..4294967295']

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = [('pybind.nos.v7_1_0.rbridge_id', 'rbridge_id'), ('pybind.nos.v7_0_1a.rbridge_id', 'rbridge_id')]
    bindings_list = [('pybind.nos.v7_0_1a.rbridge_id.bp_rate_limit.queue', 'pybind.nos.v7_0_1a.brocade_rbridge', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.rbridge_id.bp_rate_limit.queue', 'pybind.nos.v7_1_0.brocade_rbridge', 'pybind.nos.v7_1_0')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'rbridge_id', 'extra_keyval': ''}, {'keyval': 'rbridge_id', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'queue', 'keyval': 'queue_id', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, rbridge_id=rbridge_id, queue=queue)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def rbridge_id_crypto_ca_delete(self, rbridge_id=None, ca=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		NOS: 6.0.2b, 7.0.1a, 7.1.0    

	**Parent Instance Keyword Arg Tuple(s)**:
		:param rbridge_id: kwarg tuple.
		:type rbridge_id: (rbridge_id).

		:param rbridge_id: tuple arg.
		:type rbridge_id: (long)
		
		.. note::
			* range - ['0..4294967295']

	**This Instance Keyword Arg Tuple**:
		:param ca: kwarg tuple.
		:type ca: (trustpoint).

		:param trustpoint: Trustpoint name
		:type trustpoint: (unicode)
		
		.. note::
			* length - [u'1..64']

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = [('pybind.nos.v6_0_2b.rbridge_id', 'rbridge_id'), ('pybind.nos.v7_0_1a.rbridge_id', 'rbridge_id'), ('pybind.nos.v7_1_0.rbridge_id', 'rbridge_id')]
    bindings_list = [('pybind.nos.v6_0_2b.rbridge_id.crypto.ca', 'pybind.nos.v6_0_2b.brocade_rbridge', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.rbridge_id.crypto.ca', 'pybind.nos.v7_0_1a.brocade_rbridge', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.rbridge_id.crypto.ca', 'pybind.nos.v7_1_0.brocade_rbridge', 'pybind.nos.v7_1_0')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'rbridge_id', 'extra_keyval': ''}, {'keyval': 'rbridge_id', 'extra_keyval': ''}, {'keyval': 'rbridge_id', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'ca', 'keyval': 'trustpoint', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, rbridge_id=rbridge_id, ca=ca)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def rbridge_id_crypto_key_delete(self, rbridge_id=None, key=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		NOS: 6.0.2b, 7.0.1a, 7.1.0    

	**Parent Instance Keyword Arg Tuple(s)**:
		:param rbridge_id: kwarg tuple.
		:type rbridge_id: (rbridge_id).

		:param rbridge_id: tuple arg.
		:type rbridge_id: (long)
		
		.. note::
			* range - ['0..4294967295']

	**This Instance Keyword Arg Tuple**:
		:param key: kwarg tuple.
		:type key: (label, type, modulus).

		:param label: Key Label
		:type label: (unicode)
		
		.. note::
			* length - [u'1..64']

		:param type: Key Type
		:type type: (unicode)
		
		.. note::
			* enum - [u'dsa', u'rsa', u'ecdsa']

		:param modulus: Key Size
		:type modulus: (long)
		
		.. note::
			* range - ['0..4294967295']

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = [('pybind.nos.v6_0_2b.rbridge_id', 'rbridge_id'), ('pybind.nos.v7_1_0.rbridge_id', 'rbridge_id'), ('pybind.nos.v7_0_1a.rbridge_id', 'rbridge_id')]
    bindings_list = [('pybind.nos.v6_0_2b.rbridge_id.crypto.key', 'pybind.nos.v6_0_2b.brocade_rbridge', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.rbridge_id.crypto.key', 'pybind.nos.v7_0_1a.brocade_rbridge', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.rbridge_id.crypto.key', 'pybind.nos.v7_1_0.brocade_rbridge', 'pybind.nos.v7_1_0')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'rbridge_id', 'extra_keyval': ''}, {'keyval': 'rbridge_id', 'extra_keyval': ''}, {'keyval': 'rbridge_id', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'key', 'keyval': 'label', 'extra_keyval': 'label, type, modulus'}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, rbridge_id=rbridge_id, key=key)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def rbridge_id_event_handler_activate_delete(self, rbridge_id=None, name=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		NOS: 6.0.2b, 7.0.1a, 7.1.0    

	**Parent Instance Keyword Arg Tuple(s)**:
		:param rbridge_id: kwarg tuple.
		:type rbridge_id: (rbridge_id).

		:param rbridge_id: tuple arg.
		:type rbridge_id: (long)
		
		.. note::
			* range - ['0..4294967295']

	**This Instance Keyword Arg Tuple**:
		:param name: kwarg tuple.
		:type name: (name).

		:param name: Event handler name
		:type name: (unicode)
		
		.. note::
			* pattern - [a-zA-Z]{1}([-a-zA-Z0-9\.\\\\@#\+\*\(\)=\{~\}%<>=$_\[\]\|]{0,31})

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = [('pybind.nos.v7_1_0.rbridge_id', 'rbridge_id'), ('pybind.nos.v7_0_1a.rbridge_id', 'rbridge_id'), ('pybind.nos.v6_0_2b.rbridge_id', 'rbridge_id')]
    bindings_list = [('pybind.nos.v6_0_2b.rbridge_id.event_handler.activate.name', 'pybind.nos.v6_0_2b.brocade_rbridge', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.rbridge_id.event_handler.activate.name', 'pybind.nos.v7_0_1a.brocade_rbridge', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.rbridge_id.event_handler.activate.name', 'pybind.nos.v7_1_0.brocade_rbridge', 'pybind.nos.v7_1_0')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'rbridge_id', 'extra_keyval': ''}, {'keyval': 'rbridge_id', 'extra_keyval': ''}, {'keyval': 'rbridge_id', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'name', 'keyval': 'name', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, rbridge_id=rbridge_id, name=name)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def rbridge_id_evpn_instance_delete(self, rbridge_id=None, evpn_instance=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		NOS: 7.0.1a, 7.1.0    

	**Parent Instance Keyword Arg Tuple(s)**:
		:param rbridge_id: kwarg tuple.
		:type rbridge_id: (rbridge_id).

		:param rbridge_id: tuple arg.
		:type rbridge_id: (long)
		
		.. note::
			* range - ['0..4294967295']

	**This Instance Keyword Arg Tuple**:
		:param evpn_instance: kwarg tuple.
		:type evpn_instance: (instance_name).

		:param instance_name: tuple arg.
		:type instance_name: (unicode)
		
		.. note::
			* pattern - [a-zA-Z]{1}([-a-zA-Z0-9_]{0,63})

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = [('pybind.nos.v7_0_1a.rbridge_id', 'rbridge_id'), ('pybind.nos.v7_1_0.rbridge_id', 'rbridge_id')]
    bindings_list = [('pybind.nos.v7_0_1a.rbridge_id.evpn_instance', 'pybind.nos.v7_0_1a.brocade_rbridge', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.rbridge_id.evpn_instance', 'pybind.nos.v7_1_0.brocade_rbridge', 'pybind.nos.v7_1_0')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'rbridge_id', 'extra_keyval': ''}, {'keyval': 'rbridge_id', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'evpn_instance', 'keyval': 'instance_name', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, rbridge_id=rbridge_id, evpn_instance=evpn_instance)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def rbridge_id_evpn_instance_route_target_both_delete(self, rbridge_id=None, evpn_instance=None, both=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		NOS: 7.0.1a, 7.1.0    

	**Parent Instance Keyword Arg Tuple(s)**:
		:param rbridge_id: kwarg tuple.
		:type rbridge_id: (rbridge_id).

		:param rbridge_id: tuple arg.
		:type rbridge_id: (long)
		
		.. note::
			* range - ['0..4294967295']

		:param evpn_instance: kwarg tuple.
		:type evpn_instance: (instance_name).

		:param instance_name: tuple arg.
		:type instance_name: (unicode)
		
		.. note::
			* pattern - [a-zA-Z]{1}([-a-zA-Z0-9_]{0,63})

	**This Instance Keyword Arg Tuple**:
		:param both: kwarg tuple.
		:type both: (target_community).

		:param target_community: auto;; Target VPN Extended Community
		:type target_community: (unicode)

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = [('pybind.nos.v7_0_1a.rbridge_id', 'rbridge_id'), ('pybind.nos.v7_0_1a.rbridge_id.evpn_instance', u'evpn_instance'), ('pybind.nos.v7_1_0.rbridge_id', 'rbridge_id'), ('pybind.nos.v7_1_0.rbridge_id.evpn_instance', u'evpn_instance')]
    bindings_list = [('pybind.nos.v7_0_1a.rbridge_id.evpn_instance.route_target.both', 'pybind.nos.v7_0_1a.brocade_rbridge', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.rbridge_id.evpn_instance.route_target.both', 'pybind.nos.v7_1_0.brocade_rbridge', 'pybind.nos.v7_1_0')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'rbridge_id', 'extra_keyval': ''}, {'keyval': 'instance_name', 'extra_keyval': ''}, {'keyval': 'rbridge_id', 'extra_keyval': ''}, {'keyval': 'instance_name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'both', 'keyval': 'target_community', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, rbridge_id=rbridge_id, evpn_instance=evpn_instance, both=both)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def rbridge_id_evpn_instance_route_target_export_delete(self, rbridge_id=None, evpn_instance=None, export=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		NOS: 7.0.1a, 7.1.0    

	**Parent Instance Keyword Arg Tuple(s)**:
		:param rbridge_id: kwarg tuple.
		:type rbridge_id: (rbridge_id).

		:param rbridge_id: tuple arg.
		:type rbridge_id: (long)
		
		.. note::
			* range - ['0..4294967295']

		:param evpn_instance: kwarg tuple.
		:type evpn_instance: (instance_name).

		:param instance_name: tuple arg.
		:type instance_name: (unicode)
		
		.. note::
			* pattern - [a-zA-Z]{1}([-a-zA-Z0-9_]{0,63})

	**This Instance Keyword Arg Tuple**:
		:param export: kwarg tuple.
		:type export: (target_community).

		:param target_community: auto;; Target VPN Extended Community
		:type target_community: (unicode)

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = [('pybind.nos.v7_1_0.rbridge_id', 'rbridge_id'), ('pybind.nos.v7_1_0.rbridge_id.evpn_instance', u'evpn_instance'), ('pybind.nos.v7_0_1a.rbridge_id', 'rbridge_id'), ('pybind.nos.v7_0_1a.rbridge_id.evpn_instance', u'evpn_instance')]
    bindings_list = [('pybind.nos.v7_0_1a.rbridge_id.evpn_instance.route_target.export', 'pybind.nos.v7_0_1a.brocade_rbridge', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.rbridge_id.evpn_instance.route_target.export', 'pybind.nos.v7_1_0.brocade_rbridge', 'pybind.nos.v7_1_0')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'rbridge_id', 'extra_keyval': ''}, {'keyval': 'instance_name', 'extra_keyval': ''}, {'keyval': 'rbridge_id', 'extra_keyval': ''}, {'keyval': 'instance_name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'export', 'keyval': 'target_community', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, rbridge_id=rbridge_id, evpn_instance=evpn_instance, export=export)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def rbridge_id_evpn_instance_route_target_import_delete(self, rbridge_id=None, evpn_instance=None, import_=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		NOS: 7.0.1a, 7.1.0    

	**Parent Instance Keyword Arg Tuple(s)**:
		:param rbridge_id: kwarg tuple.
		:type rbridge_id: (rbridge_id).

		:param rbridge_id: tuple arg.
		:type rbridge_id: (long)
		
		.. note::
			* range - ['0..4294967295']

		:param evpn_instance: kwarg tuple.
		:type evpn_instance: (instance_name).

		:param instance_name: tuple arg.
		:type instance_name: (unicode)
		
		.. note::
			* pattern - [a-zA-Z]{1}([-a-zA-Z0-9_]{0,63})

	**This Instance Keyword Arg Tuple**:
		:param import_: kwarg tuple.
		:type import_: (target_community).

		:param target_community: auto ;; Target VPN Extended Community
		:type target_community: (unicode)

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = [('pybind.nos.v7_0_1a.rbridge_id', 'rbridge_id'), ('pybind.nos.v7_0_1a.rbridge_id.evpn_instance', u'evpn_instance'), ('pybind.nos.v7_1_0.rbridge_id', 'rbridge_id'), ('pybind.nos.v7_1_0.rbridge_id.evpn_instance', u'evpn_instance')]
    bindings_list = [('pybind.nos.v7_0_1a.rbridge_id.evpn_instance.route_target.import_', 'pybind.nos.v7_0_1a.brocade_rbridge', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.rbridge_id.evpn_instance.route_target.import_', 'pybind.nos.v7_1_0.brocade_rbridge', 'pybind.nos.v7_1_0')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'rbridge_id', 'extra_keyval': ''}, {'keyval': 'instance_name', 'extra_keyval': ''}, {'keyval': 'rbridge_id', 'extra_keyval': ''}, {'keyval': 'instance_name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'import_', 'keyval': 'target_community', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, rbridge_id=rbridge_id, evpn_instance=evpn_instance, import_=import_)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def rbridge_id_evpn_instance_vni_delete(self, rbridge_id=None, evpn_instance=None, evpn_vni=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		NOS: 7.0.1a, 7.1.0    

	**Parent Instance Keyword Arg Tuple(s)**:
		:param rbridge_id: kwarg tuple.
		:type rbridge_id: (rbridge_id).

		:param rbridge_id: tuple arg.
		:type rbridge_id: (long)
		
		.. note::
			* range - ['0..4294967295']

		:param evpn_instance: kwarg tuple.
		:type evpn_instance: (instance_name).

		:param instance_name: tuple arg.
		:type instance_name: (unicode)
		
		.. note::
			* pattern - [a-zA-Z]{1}([-a-zA-Z0-9_]{0,63})

	**This Instance Keyword Arg Tuple**:
		:param evpn_vni: kwarg tuple.
		:type evpn_vni: (vni_number).

		:param vni_number: tuple arg.
		:type vni_number: (long)
		
		.. note::
			* range - ['0..4294967295']

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = [('pybind.nos.v7_1_0.rbridge_id', 'rbridge_id'), ('pybind.nos.v7_1_0.rbridge_id.evpn_instance', u'evpn_instance'), ('pybind.nos.v7_0_1a.rbridge_id', 'rbridge_id'), ('pybind.nos.v7_0_1a.rbridge_id.evpn_instance', u'evpn_instance')]
    bindings_list = [('pybind.nos.v7_0_1a.rbridge_id.evpn_instance.vni.evpn_vni', 'pybind.nos.v7_0_1a.brocade_rbridge', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.rbridge_id.evpn_instance.vni.evpn_vni', 'pybind.nos.v7_1_0.brocade_rbridge', 'pybind.nos.v7_1_0')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'rbridge_id', 'extra_keyval': ''}, {'keyval': 'instance_name', 'extra_keyval': ''}, {'keyval': 'rbridge_id', 'extra_keyval': ''}, {'keyval': 'instance_name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'evpn_vni', 'keyval': 'vni_number', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, rbridge_id=rbridge_id, evpn_instance=evpn_instance, evpn_vni=evpn_vni)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def rbridge_id_evpn_instance_vni_route_target_both_delete(self, rbridge_id=None, evpn_instance=None, evpn_vni=None, both=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		NOS: 7.0.1a, 7.1.0    

	**Parent Instance Keyword Arg Tuple(s)**:
		:param rbridge_id: kwarg tuple.
		:type rbridge_id: (rbridge_id).

		:param rbridge_id: tuple arg.
		:type rbridge_id: (long)
		
		.. note::
			* range - ['0..4294967295']

		:param evpn_instance: kwarg tuple.
		:type evpn_instance: (instance_name).

		:param instance_name: tuple arg.
		:type instance_name: (unicode)
		
		.. note::
			* pattern - [a-zA-Z]{1}([-a-zA-Z0-9_]{0,63})

		:param evpn_vni: kwarg tuple.
		:type evpn_vni: (vni_number).

		:param vni_number: tuple arg.
		:type vni_number: (long)
		
		.. note::
			* range - ['0..4294967295']

	**This Instance Keyword Arg Tuple**:
		:param both: kwarg tuple.
		:type both: (target_community).

		:param target_community: ASN:nn;; Target VPN Extended Community
		:type target_community: (unicode)
		
		.. note::
			* pattern - (((([1-9][0-9]{0,3})|([1-5][0-9]{4})|(6[0-4][0-9]{3})|(65[0-4][0-9]{2})|(655[0-2][0-9])|(6553[0-5])):(([0-9][0-9]{0,8})|([1-3][0-9]{9})|(4[0-1][0-9]{8})|(42[0-8][0-9]{7})|(429[0-3][0-9]{6})|(4294[0-8][0-9]{5})|(42949[0-5][0-9]{4})|(429496[0-6][0-9]{3})|(4294967[0-1][0-9]{2})|(42949672[0-8][0-9])|(429496729[0-5])))|((([1-9][0-9]{0,8})|(4[0-1][0-9]{8})|(42[0-8][0-9]{7})|(429[0-3][0-9]{6})|(4294[0-8][0-9]{5})|(42949[0-5][0-9]{4})|(429496[0-6][0-9]{3})|(4294967[0-1][0-9]{2})|(42949672[0-8][0-9])):(([1-9][0-9]{0,3})|([1-5][0-9]{4})|(6[0-4][0-9]{3})|(65[0-4][0-9]{2})|(655[0-2][0-9])|(6553[0-5])))|(((([1-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.)(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){2}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])):(([1-9][0-9]{0,3})|([1-5][0-9]{4})|(6[0-4][0-9]{3})|(65[0-4][0-9]{2})|(655[0-2][0-9])|(6553[0-5]))))

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = [('pybind.nos.v7_1_0.rbridge_id', 'rbridge_id'), ('pybind.nos.v7_1_0.rbridge_id.evpn_instance', u'evpn_instance'), ('pybind.nos.v7_1_0.rbridge_id.evpn_instance.vni.evpn_vni', u'evpn_vni'), ('pybind.nos.v7_0_1a.rbridge_id', 'rbridge_id'), ('pybind.nos.v7_0_1a.rbridge_id.evpn_instance', u'evpn_instance'), ('pybind.nos.v7_0_1a.rbridge_id.evpn_instance.vni.evpn_vni', u'evpn_vni')]
    bindings_list = [('pybind.nos.v7_0_1a.rbridge_id.evpn_instance.vni.evpn_vni.route_target.both', 'pybind.nos.v7_0_1a.brocade_rbridge', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.rbridge_id.evpn_instance.vni.evpn_vni.route_target.both', 'pybind.nos.v7_1_0.brocade_rbridge', 'pybind.nos.v7_1_0')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'rbridge_id', 'extra_keyval': ''}, {'keyval': 'instance_name', 'extra_keyval': ''}, {'keyval': 'vni_number', 'extra_keyval': ''}, {'keyval': 'rbridge_id', 'extra_keyval': ''}, {'keyval': 'instance_name', 'extra_keyval': ''}, {'keyval': 'vni_number', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'both', 'keyval': 'target_community', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, rbridge_id=rbridge_id, evpn_instance=evpn_instance, evpn_vni=evpn_vni, both=both)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def rbridge_id_evpn_instance_vni_route_target_export_delete(self, rbridge_id=None, evpn_instance=None, evpn_vni=None, export=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		NOS: 7.0.1a, 7.1.0    

	**Parent Instance Keyword Arg Tuple(s)**:
		:param rbridge_id: kwarg tuple.
		:type rbridge_id: (rbridge_id).

		:param rbridge_id: tuple arg.
		:type rbridge_id: (long)
		
		.. note::
			* range - ['0..4294967295']

		:param evpn_instance: kwarg tuple.
		:type evpn_instance: (instance_name).

		:param instance_name: tuple arg.
		:type instance_name: (unicode)
		
		.. note::
			* pattern - [a-zA-Z]{1}([-a-zA-Z0-9_]{0,63})

		:param evpn_vni: kwarg tuple.
		:type evpn_vni: (vni_number).

		:param vni_number: tuple arg.
		:type vni_number: (long)
		
		.. note::
			* range - ['0..4294967295']

	**This Instance Keyword Arg Tuple**:
		:param export: kwarg tuple.
		:type export: (target_community).

		:param target_community: ASN:nn;; Target VPN Extended Community
		:type target_community: (unicode)
		
		.. note::
			* pattern - (((([1-9][0-9]{0,3})|([1-5][0-9]{4})|(6[0-4][0-9]{3})|(65[0-4][0-9]{2})|(655[0-2][0-9])|(6553[0-5])):(([0-9][0-9]{0,8})|([1-3][0-9]{9})|(4[0-1][0-9]{8})|(42[0-8][0-9]{7})|(429[0-3][0-9]{6})|(4294[0-8][0-9]{5})|(42949[0-5][0-9]{4})|(429496[0-6][0-9]{3})|(4294967[0-1][0-9]{2})|(42949672[0-8][0-9])|(429496729[0-5])))|((([1-9][0-9]{0,8})|(4[0-1][0-9]{8})|(42[0-8][0-9]{7})|(429[0-3][0-9]{6})|(4294[0-8][0-9]{5})|(42949[0-5][0-9]{4})|(429496[0-6][0-9]{3})|(4294967[0-1][0-9]{2})|(42949672[0-8][0-9])):(([1-9][0-9]{0,3})|([1-5][0-9]{4})|(6[0-4][0-9]{3})|(65[0-4][0-9]{2})|(655[0-2][0-9])|(6553[0-5])))|(((([1-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.)(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){2}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])):(([1-9][0-9]{0,3})|([1-5][0-9]{4})|(6[0-4][0-9]{3})|(65[0-4][0-9]{2})|(655[0-2][0-9])|(6553[0-5]))))

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = [('pybind.nos.v7_0_1a.rbridge_id', 'rbridge_id'), ('pybind.nos.v7_0_1a.rbridge_id.evpn_instance', u'evpn_instance'), ('pybind.nos.v7_0_1a.rbridge_id.evpn_instance.vni.evpn_vni', u'evpn_vni'), ('pybind.nos.v7_1_0.rbridge_id', 'rbridge_id'), ('pybind.nos.v7_1_0.rbridge_id.evpn_instance', u'evpn_instance'), ('pybind.nos.v7_1_0.rbridge_id.evpn_instance.vni.evpn_vni', u'evpn_vni')]
    bindings_list = [('pybind.nos.v7_0_1a.rbridge_id.evpn_instance.vni.evpn_vni.route_target.export', 'pybind.nos.v7_0_1a.brocade_rbridge', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.rbridge_id.evpn_instance.vni.evpn_vni.route_target.export', 'pybind.nos.v7_1_0.brocade_rbridge', 'pybind.nos.v7_1_0')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'rbridge_id', 'extra_keyval': ''}, {'keyval': 'instance_name', 'extra_keyval': ''}, {'keyval': 'vni_number', 'extra_keyval': ''}, {'keyval': 'rbridge_id', 'extra_keyval': ''}, {'keyval': 'instance_name', 'extra_keyval': ''}, {'keyval': 'vni_number', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'export', 'keyval': 'target_community', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, rbridge_id=rbridge_id, evpn_instance=evpn_instance, evpn_vni=evpn_vni, export=export)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def rbridge_id_evpn_instance_vni_route_target_import_delete(self, rbridge_id=None, evpn_instance=None, evpn_vni=None, import_=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		NOS: 7.0.1a, 7.1.0    

	**Parent Instance Keyword Arg Tuple(s)**:
		:param rbridge_id: kwarg tuple.
		:type rbridge_id: (rbridge_id).

		:param rbridge_id: tuple arg.
		:type rbridge_id: (long)
		
		.. note::
			* range - ['0..4294967295']

		:param evpn_instance: kwarg tuple.
		:type evpn_instance: (instance_name).

		:param instance_name: tuple arg.
		:type instance_name: (unicode)
		
		.. note::
			* pattern - [a-zA-Z]{1}([-a-zA-Z0-9_]{0,63})

		:param evpn_vni: kwarg tuple.
		:type evpn_vni: (vni_number).

		:param vni_number: tuple arg.
		:type vni_number: (long)
		
		.. note::
			* range - ['0..4294967295']

	**This Instance Keyword Arg Tuple**:
		:param import_: kwarg tuple.
		:type import_: (target_community).

		:param target_community: ASN:nn;; Target VPN Extended Community
		:type target_community: (unicode)
		
		.. note::
			* pattern - (((([1-9][0-9]{0,3})|([1-5][0-9]{4})|(6[0-4][0-9]{3})|(65[0-4][0-9]{2})|(655[0-2][0-9])|(6553[0-5])):(([0-9][0-9]{0,8})|([1-3][0-9]{9})|(4[0-1][0-9]{8})|(42[0-8][0-9]{7})|(429[0-3][0-9]{6})|(4294[0-8][0-9]{5})|(42949[0-5][0-9]{4})|(429496[0-6][0-9]{3})|(4294967[0-1][0-9]{2})|(42949672[0-8][0-9])|(429496729[0-5])))|((([1-9][0-9]{0,8})|(4[0-1][0-9]{8})|(42[0-8][0-9]{7})|(429[0-3][0-9]{6})|(4294[0-8][0-9]{5})|(42949[0-5][0-9]{4})|(429496[0-6][0-9]{3})|(4294967[0-1][0-9]{2})|(42949672[0-8][0-9])):(([1-9][0-9]{0,3})|([1-5][0-9]{4})|(6[0-4][0-9]{3})|(65[0-4][0-9]{2})|(655[0-2][0-9])|(6553[0-5])))|(((([1-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.)(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){2}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])):(([1-9][0-9]{0,3})|([1-5][0-9]{4})|(6[0-4][0-9]{3})|(65[0-4][0-9]{2})|(655[0-2][0-9])|(6553[0-5]))))

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = [('pybind.nos.v7_1_0.rbridge_id', 'rbridge_id'), ('pybind.nos.v7_1_0.rbridge_id.evpn_instance', u'evpn_instance'), ('pybind.nos.v7_1_0.rbridge_id.evpn_instance.vni.evpn_vni', u'evpn_vni'), ('pybind.nos.v7_0_1a.rbridge_id', 'rbridge_id'), ('pybind.nos.v7_0_1a.rbridge_id.evpn_instance', u'evpn_instance'), ('pybind.nos.v7_0_1a.rbridge_id.evpn_instance.vni.evpn_vni', u'evpn_vni')]
    bindings_list = [('pybind.nos.v7_0_1a.rbridge_id.evpn_instance.vni.evpn_vni.route_target.import_', 'pybind.nos.v7_0_1a.brocade_rbridge', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.rbridge_id.evpn_instance.vni.evpn_vni.route_target.import_', 'pybind.nos.v7_1_0.brocade_rbridge', 'pybind.nos.v7_1_0')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'rbridge_id', 'extra_keyval': ''}, {'keyval': 'instance_name', 'extra_keyval': ''}, {'keyval': 'vni_number', 'extra_keyval': ''}, {'keyval': 'rbridge_id', 'extra_keyval': ''}, {'keyval': 'instance_name', 'extra_keyval': ''}, {'keyval': 'vni_number', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'import_', 'keyval': 'target_community', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, rbridge_id=rbridge_id, evpn_instance=evpn_instance, evpn_vni=evpn_vni, import_=import_)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def rbridge_id_fabric_port_channel_delete(self, rbridge_id=None, port_channel=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		NOS: 6.0.2b, 7.0.1a, 7.1.0
		SLXOS: 16r.1.00b    

	**Parent Instance Keyword Arg Tuple(s)**:
		:param rbridge_id: kwarg tuple.
		:type rbridge_id: (rbridge_id).

		:param rbridge_id: tuple arg.
		:type rbridge_id: (long)
		
		.. note::
			* range - ['0..4294967295']

	**This Instance Keyword Arg Tuple**:
		:param port_channel: kwarg tuple.
		:type port_channel: (po_id).

		:param po_id: Port-channel id
		:type po_id: (long)
		
		.. note::
			* range - ['0..4294967295']

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = [('pybind.slxos.v16r_1_00b.rbridge_id', 'rbridge_id'), ('pybind.nos.v6_0_2b.rbridge_id', 'rbridge_id'), ('pybind.nos.v7_0_1a.rbridge_id', 'rbridge_id'), ('pybind.nos.v7_1_0.rbridge_id', 'rbridge_id')]
    bindings_list = [('pybind.nos.v6_0_2b.rbridge_id.fabric.port_channel', 'pybind.nos.v6_0_2b.brocade_rbridge', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.rbridge_id.fabric.port_channel', 'pybind.nos.v7_0_1a.brocade_rbridge', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.rbridge_id.fabric.port_channel', 'pybind.nos.v7_1_0.brocade_rbridge', 'pybind.nos.v7_1_0'), ('pybind.slxos.v16r_1_00b.rbridge_id.fabric.port_channel', 'pybind.slxos.v16r_1_00b.brocade_rbridge', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'rbridge_id', 'extra_keyval': ''}, {'keyval': 'rbridge_id', 'extra_keyval': ''}, {'keyval': 'rbridge_id', 'extra_keyval': ''}, {'keyval': 'rbridge_id', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'port_channel', 'keyval': 'po_id', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, rbridge_id=rbridge_id, port_channel=port_channel)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def rbridge_id_fcoe_fabric_map_delete(self, rbridge_id=None, fcoe_enode_fabric_map=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		NOS: 6.0.2b, 7.0.1a, 7.1.0
		SLXOS: 16r.1.00b    

	**Parent Instance Keyword Arg Tuple(s)**:
		:param rbridge_id: kwarg tuple.
		:type rbridge_id: (rbridge_id).

		:param rbridge_id: tuple arg.
		:type rbridge_id: (long)
		
		.. note::
			* range - ['0..4294967295']

	**This Instance Keyword Arg Tuple**:
		:param fcoe_enode_fabric_map: kwarg tuple.
		:type fcoe_enode_fabric_map: (fcoe_enode_fabric_map_name).

		:param fcoe_enode_fabric_map_name: Configure an FCoE Fabric-map 
		:type fcoe_enode_fabric_map_name: (unicode)
		
		.. note::
			* length - [u'1..32']
			* pattern - default

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = [('pybind.slxos.v16r_1_00b.rbridge_id', 'rbridge_id'), ('pybind.nos.v7_1_0.rbridge_id', 'rbridge_id'), ('pybind.nos.v7_0_1a.rbridge_id', 'rbridge_id'), ('pybind.nos.v6_0_2b.rbridge_id', 'rbridge_id')]
    bindings_list = [('pybind.nos.v6_0_2b.rbridge_id.fcoe_config.fcoe_enode_fabric_map', 'pybind.nos.v6_0_2b.brocade_rbridge', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.rbridge_id.fcoe_config.fcoe_enode_fabric_map', 'pybind.nos.v7_0_1a.brocade_rbridge', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.rbridge_id.fcoe_config.fcoe_enode_fabric_map', 'pybind.nos.v7_1_0.brocade_rbridge', 'pybind.nos.v7_1_0'), ('pybind.slxos.v16r_1_00b.rbridge_id.fcoe_config.fcoe_enode_fabric_map', 'pybind.slxos.v16r_1_00b.brocade_rbridge', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'rbridge_id', 'extra_keyval': ''}, {'keyval': 'rbridge_id', 'extra_keyval': ''}, {'keyval': 'rbridge_id', 'extra_keyval': ''}, {'keyval': 'rbridge_id', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'fcoe_enode_fabric_map', 'keyval': 'fcoe_enode_fabric_map_name', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, rbridge_id=rbridge_id, fcoe_enode_fabric_map=fcoe_enode_fabric_map)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def rbridge_id_filter_change_update_delay_delete(self, rbridge_id=None, filter_change_update_delay=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		NOS: 6.0.2b, 7.0.1a, 7.1.0    

	**Parent Instance Keyword Arg Tuple(s)**:
		:param rbridge_id: kwarg tuple.
		:type rbridge_id: (rbridge_id).

		:param rbridge_id: tuple arg.
		:type rbridge_id: (long)
		
		.. note::
			* range - ['0..4294967295']

	**This Instance Keyword Arg Tuple**:
		:param filter_change_update_delay: kwarg tuple.
		:type filter_change_update_delay: (filter_delay_value).

		:param filter_delay_value: tuple arg.
		:type filter_delay_value: (long)
		
		.. note::
			* range - ['0..4294967295']

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = [('pybind.nos.v7_0_1a.rbridge_id', 'rbridge_id'), ('pybind.nos.v6_0_2b.rbridge_id', 'rbridge_id'), ('pybind.nos.v7_1_0.rbridge_id', 'rbridge_id')]
    bindings_list = [('pybind.nos.v6_0_2b.rbridge_id.filter_change_update_delay', 'pybind.nos.v6_0_2b.brocade_rbridge', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.rbridge_id.filter_change_update_delay', 'pybind.nos.v7_0_1a.brocade_rbridge', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.rbridge_id.filter_change_update_delay', 'pybind.nos.v7_1_0.brocade_rbridge', 'pybind.nos.v7_1_0')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'rbridge_id', 'extra_keyval': ''}, {'keyval': 'rbridge_id', 'extra_keyval': ''}, {'keyval': 'rbridge_id', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'filter_change_update_delay', 'keyval': 'filter_delay_value', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, rbridge_id=rbridge_id, filter_change_update_delay=filter_change_update_delay)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def rbridge_id_http_server_use_vrf_delete(self, rbridge_id=None, use_vrf=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		NOS: 7.0.1a, 7.1.0    

	**Parent Instance Keyword Arg Tuple(s)**:
		:param rbridge_id: kwarg tuple.
		:type rbridge_id: (rbridge_id).

		:param rbridge_id: tuple arg.
		:type rbridge_id: (long)
		
		.. note::
			* range - ['0..4294967295']

	**This Instance Keyword Arg Tuple**:
		:param use_vrf: kwarg tuple.
		:type use_vrf: (use_vrf_name, http_vrf_shutdown).

		:param use_vrf_name: tuple arg.
		:type use_vrf_name: (unicode)
		
		.. note::
			* length - [u'0..max']

		:param http_vrf_shutdown: Shutdown HTTP/HTTPS server on the given vrf
		:type http_vrf_shutdown: (YANGBool)

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = [('pybind.nos.v7_0_1a.rbridge_id', 'rbridge_id'), ('pybind.nos.v7_1_0.rbridge_id', 'rbridge_id')]
    bindings_list = [('pybind.nos.v7_0_1a.rbridge_id.http.server.http_vrf_cont.use_vrf', 'pybind.nos.v7_0_1a.brocade_rbridge', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.rbridge_id.http.server.http_vrf_cont.use_vrf', 'pybind.nos.v7_1_0.brocade_rbridge', 'pybind.nos.v7_1_0')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'rbridge_id', 'extra_keyval': ''}, {'keyval': 'rbridge_id', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'use_vrf', 'keyval': 'use_vrf_name', 'extra_keyval': 'use_vrf_name, secure_and_plain, http_vrf_shutdown'}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, rbridge_id=rbridge_id, use_vrf=use_vrf)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def rbridge_id_interface_loopback_delete(self, rbridge_id=None, loopback=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		NOS: 6.0.2b, 7.0.1a, 7.1.0    

	**Parent Instance Keyword Arg Tuple(s)**:
		:param rbridge_id: kwarg tuple.
		:type rbridge_id: (rbridge_id).

		:param rbridge_id: tuple arg.
		:type rbridge_id: (long)
		
		.. note::
			* range - ['0..4294967295']

	**This Instance Keyword Arg Tuple**:
		:param loopback: kwarg tuple.
		:type loopback: (id).

		:param id: tuple arg.
		:type id: (long)
		
		.. note::
			* range - ['0..4294967295']

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = [('pybind.nos.v7_1_0.rbridge_id', 'rbridge_id'), ('pybind.nos.v6_0_2b.rbridge_id', 'rbridge_id'), ('pybind.nos.v7_0_1a.rbridge_id', 'rbridge_id')]
    bindings_list = [('pybind.nos.v6_0_2b.rbridge_id.interface.loopback', 'pybind.nos.v6_0_2b.brocade_rbridge', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.rbridge_id.interface.loopback', 'pybind.nos.v7_0_1a.brocade_rbridge', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.rbridge_id.interface.loopback', 'pybind.nos.v7_1_0.brocade_rbridge', 'pybind.nos.v7_1_0')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'rbridge_id', 'extra_keyval': ''}, {'keyval': 'rbridge_id', 'extra_keyval': ''}, {'keyval': 'rbridge_id', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'loopback', 'keyval': 'id', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, rbridge_id=rbridge_id, loopback=loopback)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def rbridge_id_interface_loopback_ip_address_delete(self, rbridge_id=None, loopback=None, address=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		NOS: 6.0.2b, 7.0.1a, 7.1.0    

	**Parent Instance Keyword Arg Tuple(s)**:
		:param rbridge_id: kwarg tuple.
		:type rbridge_id: (rbridge_id).

		:param rbridge_id: tuple arg.
		:type rbridge_id: (long)
		
		.. note::
			* range - ['0..4294967295']

		:param loopback: kwarg tuple.
		:type loopback: (id).

		:param id: tuple arg.
		:type id: (long)
		
		.. note::
			* range - ['0..4294967295']

	**This Instance Keyword Arg Tuple**:
		:param address: kwarg tuple.
		:type address: (address).

		:param address: A.B.C.D/M IP address in dotted decimal/Mask
		:type address: (unicode)
		
		.. note::
			* pattern - (([1-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.)(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){2}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])/32

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = [('pybind.nos.v7_1_0.rbridge_id', 'rbridge_id'), ('pybind.nos.v7_1_0.rbridge_id.interface.loopback', u'loopback'), ('pybind.nos.v6_0_2b.rbridge_id', 'rbridge_id'), ('pybind.nos.v6_0_2b.rbridge_id.interface.loopback', u'loopback'), ('pybind.nos.v7_0_1a.rbridge_id', 'rbridge_id'), ('pybind.nos.v7_0_1a.rbridge_id.interface.loopback', u'loopback')]
    bindings_list = [('pybind.nos.v6_0_2b.rbridge_id.interface.loopback.ip.ip_config.address', 'pybind.nos.v6_0_2b.brocade_rbridge', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.rbridge_id.interface.loopback.ip.ip_config.address', 'pybind.nos.v7_0_1a.brocade_rbridge', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.rbridge_id.interface.loopback.ip.ip_config.address', 'pybind.nos.v7_1_0.brocade_rbridge', 'pybind.nos.v7_1_0')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'rbridge_id', 'extra_keyval': ''}, {'keyval': 'id', 'extra_keyval': ''}, {'keyval': 'rbridge_id', 'extra_keyval': ''}, {'keyval': 'id', 'extra_keyval': ''}, {'keyval': 'rbridge_id', 'extra_keyval': ''}, {'keyval': 'id', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'address', 'keyval': 'address', 'extra_keyval': 'address'}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, rbridge_id=rbridge_id, loopback=loopback, address=address)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def rbridge_id_interface_loopback_ipv6_address_delete(self, rbridge_id=None, loopback=None, ipv6_address=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		NOS: 6.0.2b, 7.0.1a, 7.1.0    

	**Parent Instance Keyword Arg Tuple(s)**:
		:param rbridge_id: kwarg tuple.
		:type rbridge_id: (rbridge_id).

		:param rbridge_id: tuple arg.
		:type rbridge_id: (long)
		
		.. note::
			* range - ['0..4294967295']

		:param loopback: kwarg tuple.
		:type loopback: (id).

		:param id: tuple arg.
		:type id: (long)
		
		.. note::
			* range - ['0..4294967295']

	**This Instance Keyword Arg Tuple**:
		:param ipv6_address: kwarg tuple.
		:type ipv6_address: (address, eui64, anycast).

		:param address: A:B::C:D/LEN;; IPv6 prefix format: xxxx:xxxx/ml, xxxx:xxxx::/ml, xxxx::xx/128
		:type address: (unicode)
		
		.. note::
			* pattern - ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(/(([0-9])|([0-9]{2})|(1[0-1][0-9])|(12[0-8])))

		:param eui64: Configure ipv6 address with an automatically computed EUI-64 interface Id
		:type eui64: (YANGBool)

		:param anycast: Configure ipv6 address as anycast
		:type anycast: (YANGBool)

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = [('pybind.nos.v7_0_1a.rbridge_id', 'rbridge_id'), ('pybind.nos.v7_0_1a.rbridge_id.interface.loopback', u'loopback'), ('pybind.nos.v7_1_0.rbridge_id', 'rbridge_id'), ('pybind.nos.v7_1_0.rbridge_id.interface.loopback', u'loopback'), ('pybind.nos.v6_0_2b.rbridge_id', 'rbridge_id'), ('pybind.nos.v6_0_2b.rbridge_id.interface.loopback', u'loopback')]
    bindings_list = [('pybind.nos.v6_0_2b.rbridge_id.interface.loopback.ipv6.ipv6_config.address.ipv6_address', 'pybind.nos.v6_0_2b.brocade_rbridge', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.rbridge_id.interface.loopback.ipv6.ipv6_config.address.ipv6_address', 'pybind.nos.v7_0_1a.brocade_rbridge', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.rbridge_id.interface.loopback.ipv6.ipv6_config.address.ipv6_address', 'pybind.nos.v7_1_0.brocade_rbridge', 'pybind.nos.v7_1_0')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'rbridge_id', 'extra_keyval': ''}, {'keyval': 'id', 'extra_keyval': ''}, {'keyval': 'rbridge_id', 'extra_keyval': ''}, {'keyval': 'id', 'extra_keyval': ''}, {'keyval': 'rbridge_id', 'extra_keyval': ''}, {'keyval': 'id', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'ipv6_address', 'keyval': 'address', 'extra_keyval': 'address, eui64, anycast'}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, rbridge_id=rbridge_id, loopback=loopback, ipv6_address=ipv6_address)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def rbridge_id_interface_ve_delete(self, rbridge_id=None, ve=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		NOS: 6.0.2b, 7.0.1a, 7.1.0    

	**Parent Instance Keyword Arg Tuple(s)**:
		:param rbridge_id: kwarg tuple.
		:type rbridge_id: (rbridge_id).

		:param rbridge_id: tuple arg.
		:type rbridge_id: (long)
		
		.. note::
			* range - ['0..4294967295']

	**This Instance Keyword Arg Tuple**:
		:param ve: kwarg tuple.
		:type ve: (name).

		:param name: tuple arg.
		:type name: (long)
		
		.. note::
			* range - ['0..4294967295']

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = [('pybind.nos.v6_0_2b.rbridge_id', 'rbridge_id'), ('pybind.nos.v7_0_1a.rbridge_id', 'rbridge_id'), ('pybind.nos.v7_1_0.rbridge_id', 'rbridge_id')]
    bindings_list = [('pybind.nos.v6_0_2b.rbridge_id.interface.ve', 'pybind.nos.v6_0_2b.brocade_rbridge', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.rbridge_id.interface.ve', 'pybind.nos.v7_0_1a.brocade_rbridge', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.rbridge_id.interface.ve', 'pybind.nos.v7_1_0.brocade_rbridge', 'pybind.nos.v7_1_0')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'rbridge_id', 'extra_keyval': ''}, {'keyval': 'rbridge_id', 'extra_keyval': ''}, {'keyval': 'rbridge_id', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u've', 'keyval': 'name', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, rbridge_id=rbridge_id, ve=ve)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def rbridge_id_interface_ve_ip_access_group_delete(self, rbridge_id=None, ve=None, access_group=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		NOS: 6.0.2b, 7.0.1a, 7.1.0    

	**Parent Instance Keyword Arg Tuple(s)**:
		:param rbridge_id: kwarg tuple.
		:type rbridge_id: (rbridge_id).

		:param rbridge_id: tuple arg.
		:type rbridge_id: (long)
		
		.. note::
			* range - ['0..4294967295']

		:param ve: kwarg tuple.
		:type ve: (name).

		:param name: tuple arg.
		:type name: (long)
		
		.. note::
			* range - ['0..4294967295']

	**This Instance Keyword Arg Tuple**:
		:param access_group: kwarg tuple.
		:type access_group: (ip_access_list, ip_direction, traffic_type).

		:param ip_access_list: ACL_NAME;; Access List Name (Max 63)
		:type ip_access_list: (unicode)
		
		.. note::
			* length - [u'1..63']
			* pattern - [a-zA-Z0-9]{1}([-a-zA-Z0-9_]{0,62})

		:param ip_direction: tuple arg.
		:type ip_direction: (unicode)
		
		.. note::
			* enum - [u'in', u'out']

		:param traffic_type: tuple arg.
		:type traffic_type: (unicode)
		
		.. note::
			* enum - [u'switched', u'routed']

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = [('pybind.nos.v6_0_2b.rbridge_id', 'rbridge_id'), ('pybind.nos.v6_0_2b.rbridge_id.interface.ve', u've'), ('pybind.nos.v7_1_0.rbridge_id', 'rbridge_id'), ('pybind.nos.v7_1_0.rbridge_id.interface.ve', u've'), ('pybind.nos.v7_0_1a.rbridge_id', 'rbridge_id'), ('pybind.nos.v7_0_1a.rbridge_id.interface.ve', u've')]
    bindings_list = [('pybind.nos.v6_0_2b.rbridge_id.interface.ve.ip_acl_interface.ip.access_group', 'pybind.nos.v6_0_2b.brocade_rbridge', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.rbridge_id.interface.ve.ip_acl_interface.ip.access_group', 'pybind.nos.v7_0_1a.brocade_rbridge', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.rbridge_id.interface.ve.ip_acl_interface.ip.access_group', 'pybind.nos.v7_1_0.brocade_rbridge', 'pybind.nos.v7_1_0')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'rbridge_id', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'rbridge_id', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'rbridge_id', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'access_group', 'keyval': 'ip_access_list, ip_direction', 'extra_keyval': 'ip_access_list, ip_direction, traffic_type'}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, rbridge_id=rbridge_id, ve=ve, access_group=access_group)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def rbridge_id_interface_ve_ip_address_delete(self, rbridge_id=None, ve=None, address=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		NOS: 6.0.2b, 7.0.1a, 7.1.0    

	**Parent Instance Keyword Arg Tuple(s)**:
		:param rbridge_id: kwarg tuple.
		:type rbridge_id: (rbridge_id).

		:param rbridge_id: tuple arg.
		:type rbridge_id: (long)
		
		.. note::
			* range - ['0..4294967295']

		:param ve: kwarg tuple.
		:type ve: (name).

		:param name: tuple arg.
		:type name: (long)
		
		.. note::
			* range - ['0..4294967295']

	**This Instance Keyword Arg Tuple**:
		:param address: kwarg tuple.
		:type address: (address, secondary, ospf_passive, ospf_ignore).

		:param address: A.B.C.D/M IP address in dotted decimal/Mask
		:type address: (unicode)
		
		.. note::
			* pattern - (([1-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.)(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){2}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])/(([1-9])|([1-2][0-9])|(3[0-1]))

		:param secondary: Secondary ip address on the specific interface
		:type secondary: (YANGBool)

		:param ospf_passive: ospf pasive address on the specific interface
		:type ospf_passive: (YANGBool)

		:param ospf_ignore: ospf active address on the specific interface
		:type ospf_ignore: (YANGBool)

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = [('pybind.nos.v7_1_0.rbridge_id', 'rbridge_id'), ('pybind.nos.v7_1_0.rbridge_id.interface.ve', u've'), ('pybind.nos.v7_0_1a.rbridge_id', 'rbridge_id'), ('pybind.nos.v7_0_1a.rbridge_id.interface.ve', u've'), ('pybind.nos.v6_0_2b.rbridge_id', 'rbridge_id'), ('pybind.nos.v6_0_2b.rbridge_id.interface.ve', u've')]
    bindings_list = [('pybind.nos.v6_0_2b.rbridge_id.interface.ve.ip.ip_config.address', 'pybind.nos.v6_0_2b.brocade_rbridge', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.rbridge_id.interface.ve.ip.ip_config.address', 'pybind.nos.v7_0_1a.brocade_rbridge', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.rbridge_id.interface.ve.ip.ip_config.address', 'pybind.nos.v7_1_0.brocade_rbridge', 'pybind.nos.v7_1_0')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'rbridge_id', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'rbridge_id', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'rbridge_id', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'address', 'keyval': 'address', 'extra_keyval': 'address, secondary, ospf_passive, ospf_ignore'}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, rbridge_id=rbridge_id, ve=ve, address=address)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def rbridge_id_interface_ve_ip_anycast_address_delete(self, rbridge_id=None, ve=None, ip_anycast_address=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		NOS: 7.0.1a, 7.1.0    

	**Parent Instance Keyword Arg Tuple(s)**:
		:param rbridge_id: kwarg tuple.
		:type rbridge_id: (rbridge_id).

		:param rbridge_id: tuple arg.
		:type rbridge_id: (long)
		
		.. note::
			* range - ['0..4294967295']

		:param ve: kwarg tuple.
		:type ve: (name).

		:param name: tuple arg.
		:type name: (long)
		
		.. note::
			* range - ['0..4294967295']

	**This Instance Keyword Arg Tuple**:
		:param ip_anycast_address: kwarg tuple.
		:type ip_anycast_address: (ip_address).

		:param ip_address: A.B.C.D/M IP address in dotted decimal/Mask
		:type ip_address: (unicode)
		
		.. note::
			* pattern - (([1-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.)(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){2}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])/(([1-9])|([1-2][0-9])|(3[0-1]))

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = [('pybind.nos.v7_0_1a.rbridge_id', 'rbridge_id'), ('pybind.nos.v7_0_1a.rbridge_id.interface.ve', u've'), ('pybind.nos.v7_1_0.rbridge_id', 'rbridge_id'), ('pybind.nos.v7_1_0.rbridge_id.interface.ve', u've')]
    bindings_list = [('pybind.nos.v7_0_1a.rbridge_id.interface.ve.ip.ip_anycast_address', 'pybind.nos.v7_0_1a.brocade_rbridge', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.rbridge_id.interface.ve.ip.ip_anycast_address', 'pybind.nos.v7_1_0.brocade_rbridge', 'pybind.nos.v7_1_0')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'rbridge_id', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'rbridge_id', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'ip_anycast_address', 'keyval': 'ip_address', 'extra_keyval': 'ip_address'}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, rbridge_id=rbridge_id, ve=ve, ip_anycast_address=ip_anycast_address)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def rbridge_id_interface_ve_ip_dhcp_relay_delete(self, rbridge_id=None, ve=None, servers=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		NOS: 6.0.2b, 7.0.1a, 7.1.0    

	**Parent Instance Keyword Arg Tuple(s)**:
		:param rbridge_id: kwarg tuple.
		:type rbridge_id: (rbridge_id).

		:param rbridge_id: tuple arg.
		:type rbridge_id: (long)
		
		.. note::
			* range - ['0..4294967295']

		:param ve: kwarg tuple.
		:type ve: (name).

		:param name: tuple arg.
		:type name: (long)
		
		.. note::
			* range - ['0..4294967295']

	**This Instance Keyword Arg Tuple**:
		:param servers: kwarg tuple.
		:type servers: (relay_ip_addr, server_vrf_name).

		:param relay_ip_addr: A.B.C.D;; IP address of the DHCP server
		:type relay_ip_addr: (unicode)
		
		.. note::
			* pattern - (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?

		:param server_vrf_name: VRF name of the DHCP server
		:type server_vrf_name: (unicode)
		
		.. note::
			* length - [u'1..32']
			* pattern - ((([a-zA-Z0-9_]([a-zA-Z0-9\-_]){0,61})?[a-zA-Z0-9]\.)*([a-zA-Z0-9_]([a-zA-Z0-9\-_]){0,61})?[a-zA-Z0-9]\.?)|\.

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = [('pybind.nos.v6_0_2b.rbridge_id', 'rbridge_id'), ('pybind.nos.v6_0_2b.rbridge_id.interface.ve', u've'), ('pybind.nos.v7_0_1a.rbridge_id', 'rbridge_id'), ('pybind.nos.v7_0_1a.rbridge_id.interface.ve', u've'), ('pybind.nos.v7_1_0.rbridge_id', 'rbridge_id'), ('pybind.nos.v7_1_0.rbridge_id.interface.ve', u've')]
    bindings_list = [('pybind.nos.v6_0_2b.rbridge_id.interface.ve.ip.interface_ve_dhcp_conf.dhcp.relay.servers', 'pybind.nos.v6_0_2b.brocade_rbridge', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.rbridge_id.interface.ve.ip.interface_ve_dhcp_conf.dhcp.relay.servers', 'pybind.nos.v7_0_1a.brocade_rbridge', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.rbridge_id.interface.ve.ip.interface_ve_dhcp_conf.dhcp.relay.servers', 'pybind.nos.v7_1_0.brocade_rbridge', 'pybind.nos.v7_1_0')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'rbridge_id', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'rbridge_id', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'rbridge_id', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'servers', 'keyval': 'relay_ip_addr, server_vrf_name', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, rbridge_id=rbridge_id, ve=ve, servers=servers)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def rbridge_id_interface_ve_ip_fabric_virtual_gateway_delete(self, rbridge_id=None, ve=None, ip_local_anycast_gateway=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		NOS: 6.0.2b, 7.0.1a, 7.1.0    

	**Parent Instance Keyword Arg Tuple(s)**:
		:param rbridge_id: kwarg tuple.
		:type rbridge_id: (rbridge_id).

		:param rbridge_id: tuple arg.
		:type rbridge_id: (long)
		
		.. note::
			* range - ['0..4294967295']

		:param ve: kwarg tuple.
		:type ve: (name).

		:param name: tuple arg.
		:type name: (long)
		
		.. note::
			* range - ['0..4294967295']

	**This Instance Keyword Arg Tuple**:
		:param ip_local_anycast_gateway: kwarg tuple.
		:type ip_local_anycast_gateway: (local_ip_gw_id).

		:param local_ip_gw_id: tuple arg.
		:type local_ip_gw_id: (long)
		
		.. note::
			* range - ['0..4294967295']

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = [('pybind.nos.v7_1_0.rbridge_id', 'rbridge_id'), ('pybind.nos.v7_1_0.rbridge_id.interface.ve', u've'), ('pybind.nos.v7_0_1a.rbridge_id', 'rbridge_id'), ('pybind.nos.v7_0_1a.rbridge_id.interface.ve', u've'), ('pybind.nos.v6_0_2b.rbridge_id', 'rbridge_id'), ('pybind.nos.v6_0_2b.rbridge_id.interface.ve', u've')]
    bindings_list = [('pybind.nos.v6_0_2b.rbridge_id.interface.ve.ip.ip_local_anycast_gateway', 'pybind.nos.v6_0_2b.brocade_rbridge', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.rbridge_id.interface.ve.ip.ip_local_anycast_gateway', 'pybind.nos.v7_0_1a.brocade_rbridge', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.rbridge_id.interface.ve.ip.ip_local_anycast_gateway', 'pybind.nos.v7_1_0.brocade_rbridge', 'pybind.nos.v7_1_0')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'rbridge_id', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'rbridge_id', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'rbridge_id', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'ip_local_anycast_gateway', 'keyval': 'local_ip_gw_id', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, rbridge_id=rbridge_id, ve=ve, ip_local_anycast_gateway=ip_local_anycast_gateway)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def rbridge_id_interface_ve_ip_fabric_virtual_gateway_track_interface_delete(self, rbridge_id=None, ve=None, ip_local_anycast_gateway=None, interface=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		NOS: 6.0.2b, 7.0.1a, 7.1.0    

	**Parent Instance Keyword Arg Tuple(s)**:
		:param rbridge_id: kwarg tuple.
		:type rbridge_id: (rbridge_id).

		:param rbridge_id: tuple arg.
		:type rbridge_id: (long)
		
		.. note::
			* range - ['0..4294967295']

		:param ve: kwarg tuple.
		:type ve: (name).

		:param name: tuple arg.
		:type name: (long)
		
		.. note::
			* range - ['0..4294967295']

		:param ip_local_anycast_gateway: kwarg tuple.
		:type ip_local_anycast_gateway: (local_ip_gw_id).

		:param local_ip_gw_id: tuple arg.
		:type local_ip_gw_id: (long)
		
		.. note::
			* range - ['0..4294967295']

	**This Instance Keyword Arg Tuple**:
		:param interface: kwarg tuple.
		:type interface: (interface_type, interface_name).

		:param interface_type: tuple arg.
		:type interface_type: (unicode)
		
		.. note::
			* enum - [u'fortygigabitethernet', u'gigabitethernet', u'tengigabitethernet', u'hundredgigabitethernet', u'port-channel']

		:param interface_name: tuple arg.
		:type interface_name: (unicode)
		
		.. note::
			* length - [u'3..16']
			* pattern - ((([1-9]|[1-9][0-9]|1[0-9][0-9]|2[0-3][0-9])/)?(([0-9]|[1][0-6]))/([1-9]|[1-9][0-9]|[1-9][0-9][0-9])(:[1-4])?)

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = [('pybind.nos.v7_1_0.rbridge_id', 'rbridge_id'), ('pybind.nos.v7_1_0.rbridge_id.interface.ve', u've'), ('pybind.nos.v7_1_0.rbridge_id.interface.ve.ip.ip_local_anycast_gateway', u'ip_local_anycast_gateway'), ('pybind.nos.v7_0_1a.rbridge_id', 'rbridge_id'), ('pybind.nos.v7_0_1a.rbridge_id.interface.ve', u've'), ('pybind.nos.v7_0_1a.rbridge_id.interface.ve.ip.ip_local_anycast_gateway', u'ip_local_anycast_gateway'), ('pybind.nos.v6_0_2b.rbridge_id', 'rbridge_id'), ('pybind.nos.v6_0_2b.rbridge_id.interface.ve', u've'), ('pybind.nos.v6_0_2b.rbridge_id.interface.ve.ip.ip_local_anycast_gateway', u'ip_local_anycast_gateway')]
    bindings_list = [('pybind.nos.v6_0_2b.rbridge_id.interface.ve.ip.ip_local_anycast_gateway.track.interface', 'pybind.nos.v6_0_2b.brocade_rbridge', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.rbridge_id.interface.ve.ip.ip_local_anycast_gateway.track.interface', 'pybind.nos.v7_0_1a.brocade_rbridge', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.rbridge_id.interface.ve.ip.ip_local_anycast_gateway.track.interface', 'pybind.nos.v7_1_0.brocade_rbridge', 'pybind.nos.v7_1_0')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'rbridge_id', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'local_ip_gw_id', 'extra_keyval': ''}, {'keyval': 'rbridge_id', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'local_ip_gw_id', 'extra_keyval': ''}, {'keyval': 'rbridge_id', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'local_ip_gw_id', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'interface', 'keyval': 'interface_type, interface_name', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, rbridge_id=rbridge_id, ve=ve, ip_local_anycast_gateway=ip_local_anycast_gateway, interface=interface)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def rbridge_id_interface_ve_ip_fabric_virtual_gateway_track_network_delete(self, rbridge_id=None, ve=None, ip_local_anycast_gateway=None, network=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		NOS: 6.0.2b, 7.0.1a, 7.1.0    

	**Parent Instance Keyword Arg Tuple(s)**:
		:param rbridge_id: kwarg tuple.
		:type rbridge_id: (rbridge_id).

		:param rbridge_id: tuple arg.
		:type rbridge_id: (long)
		
		.. note::
			* range - ['0..4294967295']

		:param ve: kwarg tuple.
		:type ve: (name).

		:param name: tuple arg.
		:type name: (long)
		
		.. note::
			* range - ['0..4294967295']

		:param ip_local_anycast_gateway: kwarg tuple.
		:type ip_local_anycast_gateway: (local_ip_gw_id).

		:param local_ip_gw_id: tuple arg.
		:type local_ip_gw_id: (long)
		
		.. note::
			* range - ['0..4294967295']

	**This Instance Keyword Arg Tuple**:
		:param network: kwarg tuple.
		:type network: (network_address).

		:param network_address: tuple arg.
		:type network_address: (unicode)
		
		.. note::
			* pattern - (([1-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.)(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){2}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])/(([1-9])|([1-2][0-9])|(3[0-1]))

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = [('pybind.nos.v7_1_0.rbridge_id', 'rbridge_id'), ('pybind.nos.v7_1_0.rbridge_id.interface.ve', u've'), ('pybind.nos.v7_1_0.rbridge_id.interface.ve.ip.ip_local_anycast_gateway', u'ip_local_anycast_gateway'), ('pybind.nos.v6_0_2b.rbridge_id', 'rbridge_id'), ('pybind.nos.v6_0_2b.rbridge_id.interface.ve', u've'), ('pybind.nos.v6_0_2b.rbridge_id.interface.ve.ip.ip_local_anycast_gateway', u'ip_local_anycast_gateway'), ('pybind.nos.v7_0_1a.rbridge_id', 'rbridge_id'), ('pybind.nos.v7_0_1a.rbridge_id.interface.ve', u've'), ('pybind.nos.v7_0_1a.rbridge_id.interface.ve.ip.ip_local_anycast_gateway', u'ip_local_anycast_gateway')]
    bindings_list = [('pybind.nos.v6_0_2b.rbridge_id.interface.ve.ip.ip_local_anycast_gateway.track.network', 'pybind.nos.v6_0_2b.brocade_rbridge', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.rbridge_id.interface.ve.ip.ip_local_anycast_gateway.track.network', 'pybind.nos.v7_0_1a.brocade_rbridge', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.rbridge_id.interface.ve.ip.ip_local_anycast_gateway.track.network', 'pybind.nos.v7_1_0.brocade_rbridge', 'pybind.nos.v7_1_0')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'rbridge_id', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'local_ip_gw_id', 'extra_keyval': ''}, {'keyval': 'rbridge_id', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'local_ip_gw_id', 'extra_keyval': ''}, {'keyval': 'rbridge_id', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'local_ip_gw_id', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'network', 'keyval': 'network_address', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, rbridge_id=rbridge_id, ve=ve, ip_local_anycast_gateway=ip_local_anycast_gateway, network=network)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def rbridge_id_interface_ve_ip_fabric_virtual_gateway_track_next_hop_delete(self, rbridge_id=None, ve=None, ip_local_anycast_gateway=None, next_hop=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		NOS: 6.0.2b, 7.0.1a, 7.1.0    

	**Parent Instance Keyword Arg Tuple(s)**:
		:param rbridge_id: kwarg tuple.
		:type rbridge_id: (rbridge_id).

		:param rbridge_id: tuple arg.
		:type rbridge_id: (long)
		
		.. note::
			* range - ['0..4294967295']

		:param ve: kwarg tuple.
		:type ve: (name).

		:param name: tuple arg.
		:type name: (long)
		
		.. note::
			* range - ['0..4294967295']

		:param ip_local_anycast_gateway: kwarg tuple.
		:type ip_local_anycast_gateway: (local_ip_gw_id).

		:param local_ip_gw_id: tuple arg.
		:type local_ip_gw_id: (long)
		
		.. note::
			* range - ['0..4294967295']

	**This Instance Keyword Arg Tuple**:
		:param next_hop: kwarg tuple.
		:type next_hop: (next_hop_address).

		:param next_hop_address: tuple arg.
		:type next_hop_address: (unicode)
		
		.. note::
			* pattern - (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = [('pybind.nos.v7_1_0.rbridge_id', 'rbridge_id'), ('pybind.nos.v7_1_0.rbridge_id.interface.ve', u've'), ('pybind.nos.v7_1_0.rbridge_id.interface.ve.ip.ip_local_anycast_gateway', u'ip_local_anycast_gateway'), ('pybind.nos.v6_0_2b.rbridge_id', 'rbridge_id'), ('pybind.nos.v6_0_2b.rbridge_id.interface.ve', u've'), ('pybind.nos.v6_0_2b.rbridge_id.interface.ve.ip.ip_local_anycast_gateway', u'ip_local_anycast_gateway'), ('pybind.nos.v7_0_1a.rbridge_id', 'rbridge_id'), ('pybind.nos.v7_0_1a.rbridge_id.interface.ve', u've'), ('pybind.nos.v7_0_1a.rbridge_id.interface.ve.ip.ip_local_anycast_gateway', u'ip_local_anycast_gateway')]
    bindings_list = [('pybind.nos.v6_0_2b.rbridge_id.interface.ve.ip.ip_local_anycast_gateway.track.next_hop', 'pybind.nos.v6_0_2b.brocade_rbridge', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.rbridge_id.interface.ve.ip.ip_local_anycast_gateway.track.next_hop', 'pybind.nos.v7_0_1a.brocade_rbridge', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.rbridge_id.interface.ve.ip.ip_local_anycast_gateway.track.next_hop', 'pybind.nos.v7_1_0.brocade_rbridge', 'pybind.nos.v7_1_0')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'rbridge_id', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'local_ip_gw_id', 'extra_keyval': ''}, {'keyval': 'rbridge_id', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'local_ip_gw_id', 'extra_keyval': ''}, {'keyval': 'rbridge_id', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'local_ip_gw_id', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'next_hop', 'keyval': 'next_hop_address', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, rbridge_id=rbridge_id, ve=ve, ip_local_anycast_gateway=ip_local_anycast_gateway, next_hop=next_hop)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def rbridge_id_interface_ve_ip_igmp_static_group_delete(self, rbridge_id=None, ve=None, static_group=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		NOS: 6.0.2b, 7.0.1a, 7.1.0    

	**Parent Instance Keyword Arg Tuple(s)**:
		:param rbridge_id: kwarg tuple.
		:type rbridge_id: (rbridge_id).

		:param rbridge_id: tuple arg.
		:type rbridge_id: (long)
		
		.. note::
			* range - ['0..4294967295']

		:param ve: kwarg tuple.
		:type ve: (name).

		:param name: tuple arg.
		:type name: (long)
		
		.. note::
			* range - ['0..4294967295']

	**This Instance Keyword Arg Tuple**:
		:param static_group: kwarg tuple.
		:type static_group: (sg_addr).

		:param sg_addr: Multicast Address to be Joined in the format A.B.C.D
		:type sg_addr: (unicode)
		
		.. note::
			* pattern - (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = [('pybind.nos.v7_0_1a.rbridge_id', 'rbridge_id'), ('pybind.nos.v7_0_1a.rbridge_id.interface.ve', u've'), ('pybind.nos.v7_1_0.rbridge_id', 'rbridge_id'), ('pybind.nos.v7_1_0.rbridge_id.interface.ve', u've'), ('pybind.nos.v6_0_2b.rbridge_id', 'rbridge_id'), ('pybind.nos.v6_0_2b.rbridge_id.interface.ve', u've')]
    bindings_list = [('pybind.nos.v6_0_2b.rbridge_id.interface.ve.ip.igmp.static_group', 'pybind.nos.v6_0_2b.brocade_rbridge', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.rbridge_id.interface.ve.ip.igmp.static_group', 'pybind.nos.v7_0_1a.brocade_rbridge', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.rbridge_id.interface.ve.ip.igmp.static_group', 'pybind.nos.v7_1_0.brocade_rbridge', 'pybind.nos.v7_1_0')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'rbridge_id', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'rbridge_id', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'rbridge_id', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'static_group', 'keyval': 'sg_addr', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, rbridge_id=rbridge_id, ve=ve, static_group=static_group)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def rbridge_id_interface_ve_ipv6_access_group_delete(self, rbridge_id=None, ve=None, access_group=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		NOS: 6.0.2b, 7.0.1a, 7.1.0    

	**Parent Instance Keyword Arg Tuple(s)**:
		:param rbridge_id: kwarg tuple.
		:type rbridge_id: (rbridge_id).

		:param rbridge_id: tuple arg.
		:type rbridge_id: (long)
		
		.. note::
			* range - ['0..4294967295']

		:param ve: kwarg tuple.
		:type ve: (name).

		:param name: tuple arg.
		:type name: (long)
		
		.. note::
			* range - ['0..4294967295']

	**This Instance Keyword Arg Tuple**:
		:param access_group: kwarg tuple.
		:type access_group: (ipv6_access_list, ip_direction, traffic_type).

		:param ipv6_access_list: ACL_NAME;; Access List Name (Max 63)
		:type ipv6_access_list: (unicode)
		
		.. note::
			* length - [u'1..63']
			* pattern - [a-zA-Z0-9]{1}([-a-zA-Z0-9_]{0,62})

		:param ip_direction: tuple arg.
		:type ip_direction: (unicode)
		
		.. note::
			* enum - [u'in', u'out']

		:param traffic_type: tuple arg.
		:type traffic_type: (unicode)
		
		.. note::
			* enum - [u'switched', u'routed']

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = [('pybind.nos.v7_1_0.rbridge_id', 'rbridge_id'), ('pybind.nos.v7_1_0.rbridge_id.interface.ve', u've'), ('pybind.nos.v7_0_1a.rbridge_id', 'rbridge_id'), ('pybind.nos.v7_0_1a.rbridge_id.interface.ve', u've'), ('pybind.nos.v6_0_2b.rbridge_id', 'rbridge_id'), ('pybind.nos.v6_0_2b.rbridge_id.interface.ve', u've')]
    bindings_list = [('pybind.nos.v6_0_2b.rbridge_id.interface.ve.ipv6.access_group', 'pybind.nos.v6_0_2b.brocade_rbridge', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.rbridge_id.interface.ve.ipv6.access_group', 'pybind.nos.v7_0_1a.brocade_rbridge', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.rbridge_id.interface.ve.ipv6.access_group', 'pybind.nos.v7_1_0.brocade_rbridge', 'pybind.nos.v7_1_0')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'rbridge_id', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'rbridge_id', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'rbridge_id', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'access_group', 'keyval': 'ipv6_access_list, ip_direction', 'extra_keyval': 'ipv6_access_list, ip_direction, traffic_type'}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, rbridge_id=rbridge_id, ve=ve, access_group=access_group)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def rbridge_id_interface_ve_ipv6_address_delete(self, rbridge_id=None, ve=None, ipv6_address=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		NOS: 6.0.2b, 7.0.1a, 7.1.0    

	**Parent Instance Keyword Arg Tuple(s)**:
		:param rbridge_id: kwarg tuple.
		:type rbridge_id: (rbridge_id).

		:param rbridge_id: tuple arg.
		:type rbridge_id: (long)
		
		.. note::
			* range - ['0..4294967295']

		:param ve: kwarg tuple.
		:type ve: (name).

		:param name: tuple arg.
		:type name: (long)
		
		.. note::
			* range - ['0..4294967295']

	**This Instance Keyword Arg Tuple**:
		:param ipv6_address: kwarg tuple.
		:type ipv6_address: (address, secondary, anycast).

		:param address: A:B::C:D/LEN;; IPv6 prefix format: xxxx:xxxx/ml, xxxx:xxxx::/ml, xxxx::xx/128
		:type address: (unicode)
		
		.. note::
			* pattern - ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(/(([0-9])|([0-9]{2})|(1[0-1][0-9])|(12[0-8])))

		:param secondary: Configure Secondary ipv6 address on an interface
		:type secondary: (YANGBool)

		:param anycast: Configure ipv6 address as anycast
		:type anycast: (YANGBool)

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = [('pybind.nos.v7_0_1a.rbridge_id', 'rbridge_id'), ('pybind.nos.v7_0_1a.rbridge_id.interface.ve', u've'), ('pybind.nos.v7_1_0.rbridge_id', 'rbridge_id'), ('pybind.nos.v7_1_0.rbridge_id.interface.ve', u've'), ('pybind.nos.v6_0_2b.rbridge_id', 'rbridge_id'), ('pybind.nos.v6_0_2b.rbridge_id.interface.ve', u've')]
    bindings_list = [('pybind.nos.v6_0_2b.rbridge_id.interface.ve.ipv6.ipv6_config.address.ipv6_address', 'pybind.nos.v6_0_2b.brocade_rbridge', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.rbridge_id.interface.ve.ipv6.ipv6_config.address.ipv6_address', 'pybind.nos.v7_0_1a.brocade_rbridge', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.rbridge_id.interface.ve.ipv6.ipv6_config.address.ipv6_address', 'pybind.nos.v7_1_0.brocade_rbridge', 'pybind.nos.v7_1_0')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'rbridge_id', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'rbridge_id', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'rbridge_id', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'ipv6_address', 'keyval': 'address', 'extra_keyval': 'address, secondary, anycast'}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, rbridge_id=rbridge_id, ve=ve, ipv6_address=ipv6_address)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def rbridge_id_interface_ve_ipv6_anycast_address_delete(self, rbridge_id=None, ve=None, ipv6_anycast_address=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		NOS: 7.0.1a, 7.1.0    

	**Parent Instance Keyword Arg Tuple(s)**:
		:param rbridge_id: kwarg tuple.
		:type rbridge_id: (rbridge_id).

		:param rbridge_id: tuple arg.
		:type rbridge_id: (long)
		
		.. note::
			* range - ['0..4294967295']

		:param ve: kwarg tuple.
		:type ve: (name).

		:param name: tuple arg.
		:type name: (long)
		
		.. note::
			* range - ['0..4294967295']

	**This Instance Keyword Arg Tuple**:
		:param ipv6_anycast_address: kwarg tuple.
		:type ipv6_anycast_address: (ipv6_address).

		:param ipv6_address: A:B::C:D/LEN;; IPv6 prefix format: xxxx:xxxx/ml, xxxx:xxxx::/ml, xxxx::xx/128
		:type ipv6_address: (unicode)
		
		.. note::
			* pattern - ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(/(([0-9])|([0-9]{2})|(1[0-1][0-9])|(12[0-8])))

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = [('pybind.nos.v7_0_1a.rbridge_id', 'rbridge_id'), ('pybind.nos.v7_0_1a.rbridge_id.interface.ve', u've'), ('pybind.nos.v7_1_0.rbridge_id', 'rbridge_id'), ('pybind.nos.v7_1_0.rbridge_id.interface.ve', u've')]
    bindings_list = [('pybind.nos.v7_0_1a.rbridge_id.interface.ve.ipv6.ipv6_anycast_address', 'pybind.nos.v7_0_1a.brocade_rbridge', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.rbridge_id.interface.ve.ipv6.ipv6_anycast_address', 'pybind.nos.v7_1_0.brocade_rbridge', 'pybind.nos.v7_1_0')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'rbridge_id', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'rbridge_id', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'ipv6_anycast_address', 'keyval': 'ipv6_address', 'extra_keyval': 'ipv6_address'}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, rbridge_id=rbridge_id, ve=ve, ipv6_anycast_address=ipv6_anycast_address)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def rbridge_id_interface_ve_ipv6_dhcp_relay_delete(self, rbridge_id=None, ve=None, servers=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		NOS: 6.0.2b, 7.0.1a, 7.1.0    

	**Parent Instance Keyword Arg Tuple(s)**:
		:param rbridge_id: kwarg tuple.
		:type rbridge_id: (rbridge_id).

		:param rbridge_id: tuple arg.
		:type rbridge_id: (long)
		
		.. note::
			* range - ['0..4294967295']

		:param ve: kwarg tuple.
		:type ve: (name).

		:param name: tuple arg.
		:type name: (long)
		
		.. note::
			* range - ['0..4294967295']

	**This Instance Keyword Arg Tuple**:
		:param servers: kwarg tuple.
		:type servers: (relay_ip_addr, server_vrf_name).

		:param relay_ip_addr: IPv6 address of the DHCPv6 server
		:type relay_ip_addr: (unicode)
		
		.. note::
			* pattern - ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?

		:param server_vrf_name: VRF name of the DHCPv6 server
		:type server_vrf_name: (unicode)
		
		.. note::
			* length - [u'1..32']
			* pattern - ((([a-zA-Z0-9_]([a-zA-Z0-9\-_]){0,61})?[a-zA-Z0-9]\.)*([a-zA-Z0-9_]([a-zA-Z0-9\-_]){0,61})?[a-zA-Z0-9]\.?)|\.

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = [('pybind.nos.v6_0_2b.rbridge_id', 'rbridge_id'), ('pybind.nos.v6_0_2b.rbridge_id.interface.ve', u've'), ('pybind.nos.v7_0_1a.rbridge_id', 'rbridge_id'), ('pybind.nos.v7_0_1a.rbridge_id.interface.ve', u've'), ('pybind.nos.v7_1_0.rbridge_id', 'rbridge_id'), ('pybind.nos.v7_1_0.rbridge_id.interface.ve', u've')]
    bindings_list = [('pybind.nos.v6_0_2b.rbridge_id.interface.ve.ipv6.interface_ve_dhcp_conf.dhcp.relay.servers', 'pybind.nos.v6_0_2b.brocade_rbridge', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.rbridge_id.interface.ve.ipv6.interface_ve_dhcp_conf.dhcp.relay.servers', 'pybind.nos.v7_0_1a.brocade_rbridge', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.rbridge_id.interface.ve.ipv6.interface_ve_dhcp_conf.dhcp.relay.servers', 'pybind.nos.v7_1_0.brocade_rbridge', 'pybind.nos.v7_1_0')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'rbridge_id', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'rbridge_id', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'rbridge_id', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'servers', 'keyval': 'relay_ip_addr', 'extra_keyval': 'relay_ip_addr, server_vrf_name'}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, rbridge_id=rbridge_id, ve=ve, servers=servers)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def rbridge_id_interface_ve_ipv6_fabric_virtual_gateway_delete(self, rbridge_id=None, ve=None, ipv6_local_anycast_gateway=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		NOS: 6.0.2b, 7.0.1a, 7.1.0    

	**Parent Instance Keyword Arg Tuple(s)**:
		:param rbridge_id: kwarg tuple.
		:type rbridge_id: (rbridge_id).

		:param rbridge_id: tuple arg.
		:type rbridge_id: (long)
		
		.. note::
			* range - ['0..4294967295']

		:param ve: kwarg tuple.
		:type ve: (name).

		:param name: tuple arg.
		:type name: (long)
		
		.. note::
			* range - ['0..4294967295']

	**This Instance Keyword Arg Tuple**:
		:param ipv6_local_anycast_gateway: kwarg tuple.
		:type ipv6_local_anycast_gateway: (local_ipv6_gw_id).

		:param local_ipv6_gw_id: tuple arg.
		:type local_ipv6_gw_id: (long)
		
		.. note::
			* range - ['0..4294967295']

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = [('pybind.nos.v7_1_0.rbridge_id', 'rbridge_id'), ('pybind.nos.v7_1_0.rbridge_id.interface.ve', u've'), ('pybind.nos.v7_0_1a.rbridge_id', 'rbridge_id'), ('pybind.nos.v7_0_1a.rbridge_id.interface.ve', u've'), ('pybind.nos.v6_0_2b.rbridge_id', 'rbridge_id'), ('pybind.nos.v6_0_2b.rbridge_id.interface.ve', u've')]
    bindings_list = [('pybind.nos.v6_0_2b.rbridge_id.interface.ve.ipv6.ipv6_local_anycast_gateway', 'pybind.nos.v6_0_2b.brocade_rbridge', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.rbridge_id.interface.ve.ipv6.ipv6_local_anycast_gateway', 'pybind.nos.v7_0_1a.brocade_rbridge', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.rbridge_id.interface.ve.ipv6.ipv6_local_anycast_gateway', 'pybind.nos.v7_1_0.brocade_rbridge', 'pybind.nos.v7_1_0')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'rbridge_id', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'rbridge_id', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'rbridge_id', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'ipv6_local_anycast_gateway', 'keyval': 'local_ipv6_gw_id', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, rbridge_id=rbridge_id, ve=ve, ipv6_local_anycast_gateway=ipv6_local_anycast_gateway)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def rbridge_id_interface_ve_ipv6_fabric_virtual_gateway_track_interface_delete(self, rbridge_id=None, ve=None, ipv6_local_anycast_gateway=None, ipv6_interface=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		NOS: 6.0.2b, 7.0.1a, 7.1.0    

	**Parent Instance Keyword Arg Tuple(s)**:
		:param rbridge_id: kwarg tuple.
		:type rbridge_id: (rbridge_id).

		:param rbridge_id: tuple arg.
		:type rbridge_id: (long)
		
		.. note::
			* range - ['0..4294967295']

		:param ve: kwarg tuple.
		:type ve: (name).

		:param name: tuple arg.
		:type name: (long)
		
		.. note::
			* range - ['0..4294967295']

		:param ipv6_local_anycast_gateway: kwarg tuple.
		:type ipv6_local_anycast_gateway: (local_ipv6_gw_id).

		:param local_ipv6_gw_id: tuple arg.
		:type local_ipv6_gw_id: (long)
		
		.. note::
			* range - ['0..4294967295']

	**This Instance Keyword Arg Tuple**:
		:param ipv6_interface: kwarg tuple.
		:type ipv6_interface: (ipv6_interface_type, ipv6_interface_name).

		:param ipv6_interface_type: tuple arg.
		:type ipv6_interface_type: (unicode)
		
		.. note::
			* enum - [u'fortygigabitethernet', u'gigabitethernet', u'tengigabitethernet', u'hundredgigabitethernet', u'port-channel']

		:param ipv6_interface_name: tuple arg.
		:type ipv6_interface_name: (unicode)
		
		.. note::
			* length - [u'3..16']
			* pattern - ((([1-9]|[1-9][0-9]|1[0-9][0-9]|2[0-3][0-9])/)?(([0-9]|[1][0-6]))/([1-9]|[1-9][0-9]|[1-9][0-9][0-9])(:[1-4])?)

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = [('pybind.nos.v7_0_1a.rbridge_id', 'rbridge_id'), ('pybind.nos.v7_0_1a.rbridge_id.interface.ve', u've'), ('pybind.nos.v7_0_1a.rbridge_id.interface.ve.ipv6.ipv6_local_anycast_gateway', u'ipv6_local_anycast_gateway'), ('pybind.nos.v6_0_2b.rbridge_id', 'rbridge_id'), ('pybind.nos.v6_0_2b.rbridge_id.interface.ve', u've'), ('pybind.nos.v6_0_2b.rbridge_id.interface.ve.ipv6.ipv6_local_anycast_gateway', u'ipv6_local_anycast_gateway'), ('pybind.nos.v7_1_0.rbridge_id', 'rbridge_id'), ('pybind.nos.v7_1_0.rbridge_id.interface.ve', u've'), ('pybind.nos.v7_1_0.rbridge_id.interface.ve.ipv6.ipv6_local_anycast_gateway', u'ipv6_local_anycast_gateway')]
    bindings_list = [('pybind.nos.v6_0_2b.rbridge_id.interface.ve.ipv6.ipv6_local_anycast_gateway.ipv6_track.ipv6_interface', 'pybind.nos.v6_0_2b.brocade_rbridge', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.rbridge_id.interface.ve.ipv6.ipv6_local_anycast_gateway.ipv6_track.ipv6_interface', 'pybind.nos.v7_0_1a.brocade_rbridge', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.rbridge_id.interface.ve.ipv6.ipv6_local_anycast_gateway.ipv6_track.ipv6_interface', 'pybind.nos.v7_1_0.brocade_rbridge', 'pybind.nos.v7_1_0')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'rbridge_id', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'local_ipv6_gw_id', 'extra_keyval': ''}, {'keyval': 'rbridge_id', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'local_ipv6_gw_id', 'extra_keyval': ''}, {'keyval': 'rbridge_id', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'local_ipv6_gw_id', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'ipv6_interface', 'keyval': 'ipv6_interface_type, ipv6_interface_name', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, rbridge_id=rbridge_id, ve=ve, ipv6_local_anycast_gateway=ipv6_local_anycast_gateway, ipv6_interface=ipv6_interface)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def rbridge_id_interface_ve_ipv6_fabric_virtual_gateway_track_network_delete(self, rbridge_id=None, ve=None, ipv6_local_anycast_gateway=None, ipv6_network=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		NOS: 6.0.2b, 7.0.1a, 7.1.0    

	**Parent Instance Keyword Arg Tuple(s)**:
		:param rbridge_id: kwarg tuple.
		:type rbridge_id: (rbridge_id).

		:param rbridge_id: tuple arg.
		:type rbridge_id: (long)
		
		.. note::
			* range - ['0..4294967295']

		:param ve: kwarg tuple.
		:type ve: (name).

		:param name: tuple arg.
		:type name: (long)
		
		.. note::
			* range - ['0..4294967295']

		:param ipv6_local_anycast_gateway: kwarg tuple.
		:type ipv6_local_anycast_gateway: (local_ipv6_gw_id).

		:param local_ipv6_gw_id: tuple arg.
		:type local_ipv6_gw_id: (long)
		
		.. note::
			* range - ['0..4294967295']

	**This Instance Keyword Arg Tuple**:
		:param ipv6_network: kwarg tuple.
		:type ipv6_network: (ipv6_network_address).

		:param ipv6_network_address: tuple arg.
		:type ipv6_network_address: (unicode)
		
		.. note::
			* pattern - ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(/(([0-9])|([0-9]{2})|(1[0-1][0-9])|(12[0-8])))

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = [('pybind.nos.v6_0_2b.rbridge_id', 'rbridge_id'), ('pybind.nos.v6_0_2b.rbridge_id.interface.ve', u've'), ('pybind.nos.v6_0_2b.rbridge_id.interface.ve.ipv6.ipv6_local_anycast_gateway', u'ipv6_local_anycast_gateway'), ('pybind.nos.v7_1_0.rbridge_id', 'rbridge_id'), ('pybind.nos.v7_1_0.rbridge_id.interface.ve', u've'), ('pybind.nos.v7_1_0.rbridge_id.interface.ve.ipv6.ipv6_local_anycast_gateway', u'ipv6_local_anycast_gateway'), ('pybind.nos.v7_0_1a.rbridge_id', 'rbridge_id'), ('pybind.nos.v7_0_1a.rbridge_id.interface.ve', u've'), ('pybind.nos.v7_0_1a.rbridge_id.interface.ve.ipv6.ipv6_local_anycast_gateway', u'ipv6_local_anycast_gateway')]
    bindings_list = [('pybind.nos.v6_0_2b.rbridge_id.interface.ve.ipv6.ipv6_local_anycast_gateway.ipv6_track.ipv6_network', 'pybind.nos.v6_0_2b.brocade_rbridge', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.rbridge_id.interface.ve.ipv6.ipv6_local_anycast_gateway.ipv6_track.ipv6_network', 'pybind.nos.v7_0_1a.brocade_rbridge', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.rbridge_id.interface.ve.ipv6.ipv6_local_anycast_gateway.ipv6_track.ipv6_network', 'pybind.nos.v7_1_0.brocade_rbridge', 'pybind.nos.v7_1_0')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'rbridge_id', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'local_ipv6_gw_id', 'extra_keyval': ''}, {'keyval': 'rbridge_id', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'local_ipv6_gw_id', 'extra_keyval': ''}, {'keyval': 'rbridge_id', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'local_ipv6_gw_id', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'ipv6_network', 'keyval': 'ipv6_network_address', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, rbridge_id=rbridge_id, ve=ve, ipv6_local_anycast_gateway=ipv6_local_anycast_gateway, ipv6_network=ipv6_network)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def rbridge_id_interface_ve_ipv6_fabric_virtual_gateway_track_next_hop_delete(self, rbridge_id=None, ve=None, ipv6_local_anycast_gateway=None, ipv6_next_hop=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		NOS: 6.0.2b, 7.0.1a, 7.1.0    

	**Parent Instance Keyword Arg Tuple(s)**:
		:param rbridge_id: kwarg tuple.
		:type rbridge_id: (rbridge_id).

		:param rbridge_id: tuple arg.
		:type rbridge_id: (long)
		
		.. note::
			* range - ['0..4294967295']

		:param ve: kwarg tuple.
		:type ve: (name).

		:param name: tuple arg.
		:type name: (long)
		
		.. note::
			* range - ['0..4294967295']

		:param ipv6_local_anycast_gateway: kwarg tuple.
		:type ipv6_local_anycast_gateway: (local_ipv6_gw_id).

		:param local_ipv6_gw_id: tuple arg.
		:type local_ipv6_gw_id: (long)
		
		.. note::
			* range - ['0..4294967295']

	**This Instance Keyword Arg Tuple**:
		:param ipv6_next_hop: kwarg tuple.
		:type ipv6_next_hop: (ipv6_next_hop_address).

		:param ipv6_next_hop_address: tuple arg.
		:type ipv6_next_hop_address: (unicode)
		
		.. note::
			* pattern - ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = [('pybind.nos.v7_1_0.rbridge_id', 'rbridge_id'), ('pybind.nos.v7_1_0.rbridge_id.interface.ve', u've'), ('pybind.nos.v7_1_0.rbridge_id.interface.ve.ipv6.ipv6_local_anycast_gateway', u'ipv6_local_anycast_gateway'), ('pybind.nos.v7_0_1a.rbridge_id', 'rbridge_id'), ('pybind.nos.v7_0_1a.rbridge_id.interface.ve', u've'), ('pybind.nos.v7_0_1a.rbridge_id.interface.ve.ipv6.ipv6_local_anycast_gateway', u'ipv6_local_anycast_gateway'), ('pybind.nos.v6_0_2b.rbridge_id', 'rbridge_id'), ('pybind.nos.v6_0_2b.rbridge_id.interface.ve', u've'), ('pybind.nos.v6_0_2b.rbridge_id.interface.ve.ipv6.ipv6_local_anycast_gateway', u'ipv6_local_anycast_gateway')]
    bindings_list = [('pybind.nos.v6_0_2b.rbridge_id.interface.ve.ipv6.ipv6_local_anycast_gateway.ipv6_track.ipv6_next_hop', 'pybind.nos.v6_0_2b.brocade_rbridge', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.rbridge_id.interface.ve.ipv6.ipv6_local_anycast_gateway.ipv6_track.ipv6_next_hop', 'pybind.nos.v7_0_1a.brocade_rbridge', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.rbridge_id.interface.ve.ipv6.ipv6_local_anycast_gateway.ipv6_track.ipv6_next_hop', 'pybind.nos.v7_1_0.brocade_rbridge', 'pybind.nos.v7_1_0')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'rbridge_id', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'local_ipv6_gw_id', 'extra_keyval': ''}, {'keyval': 'rbridge_id', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'local_ipv6_gw_id', 'extra_keyval': ''}, {'keyval': 'rbridge_id', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'local_ipv6_gw_id', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'ipv6_next_hop', 'keyval': 'ipv6_next_hop_address', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, rbridge_id=rbridge_id, ve=ve, ipv6_local_anycast_gateway=ipv6_local_anycast_gateway, ipv6_next_hop=ipv6_next_hop)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def rbridge_id_interface_ve_ipv6_nd_prefix_delete(self, rbridge_id=None, ve=None, prefix=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		NOS: 6.0.2b, 7.0.1a, 7.1.0    

	**Parent Instance Keyword Arg Tuple(s)**:
		:param rbridge_id: kwarg tuple.
		:type rbridge_id: (rbridge_id).

		:param rbridge_id: tuple arg.
		:type rbridge_id: (long)
		
		.. note::
			* range - ['0..4294967295']

		:param ve: kwarg tuple.
		:type ve: (name).

		:param name: tuple arg.
		:type name: (long)
		
		.. note::
			* range - ['0..4294967295']

	**This Instance Keyword Arg Tuple**:
		:param prefix: kwarg tuple.
		:type prefix: (prefix_ipv6_address).

		:param prefix_ipv6_address: tuple arg.
		:type prefix_ipv6_address: (unicode)
		
		.. note::
			* pattern - ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(/(([0-9])|([0-9]{2})|(1[0-1][0-9])|(12[0-8])))

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = [('pybind.nos.v7_1_0.rbridge_id', 'rbridge_id'), ('pybind.nos.v7_1_0.rbridge_id.interface.ve', u've'), ('pybind.nos.v6_0_2b.rbridge_id', 'rbridge_id'), ('pybind.nos.v6_0_2b.rbridge_id.interface.ve', u've'), ('pybind.nos.v7_0_1a.rbridge_id', 'rbridge_id'), ('pybind.nos.v7_0_1a.rbridge_id.interface.ve', u've')]
    bindings_list = [('pybind.nos.v6_0_2b.rbridge_id.interface.ve.ipv6.ipv6_nd_ra.ipv6_intf_cmds.nd.prefix', 'pybind.nos.v6_0_2b.brocade_rbridge', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.rbridge_id.interface.ve.ipv6.ipv6_nd_ra.ipv6_intf_cmds.nd.prefix', 'pybind.nos.v7_0_1a.brocade_rbridge', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.rbridge_id.interface.ve.ipv6.ipv6_nd_ra.ipv6_intf_cmds.nd.prefix', 'pybind.nos.v7_1_0.brocade_rbridge', 'pybind.nos.v7_1_0')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'rbridge_id', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'rbridge_id', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'rbridge_id', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'prefix', 'keyval': 'prefix_ipv6_address', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, rbridge_id=rbridge_id, ve=ve, prefix=prefix)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def rbridge_id_interface_ve_ipv6_neighbor_delete(self, rbridge_id=None, ve=None, neighbor=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		NOS: 6.0.2b, 7.0.1a, 7.1.0    

	**Parent Instance Keyword Arg Tuple(s)**:
		:param rbridge_id: kwarg tuple.
		:type rbridge_id: (rbridge_id).

		:param rbridge_id: tuple arg.
		:type rbridge_id: (long)
		
		.. note::
			* range - ['0..4294967295']

		:param ve: kwarg tuple.
		:type ve: (name).

		:param name: tuple arg.
		:type name: (long)
		
		.. note::
			* range - ['0..4294967295']

	**This Instance Keyword Arg Tuple**:
		:param neighbor: kwarg tuple.
		:type neighbor: (ipv6_address).

		:param ipv6_address: tuple arg.
		:type ipv6_address: (unicode)
		
		.. note::
			* pattern - ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = [('pybind.nos.v6_0_2b.rbridge_id', 'rbridge_id'), ('pybind.nos.v6_0_2b.rbridge_id.interface.ve', u've'), ('pybind.nos.v7_0_1a.rbridge_id', 'rbridge_id'), ('pybind.nos.v7_0_1a.rbridge_id.interface.ve', u've'), ('pybind.nos.v7_1_0.rbridge_id', 'rbridge_id'), ('pybind.nos.v7_1_0.rbridge_id.interface.ve', u've')]
    bindings_list = [('pybind.nos.v6_0_2b.rbridge_id.interface.ve.ipv6.ipv6_nd_ra.ipv6_intf_cmds.neighbor', 'pybind.nos.v6_0_2b.brocade_rbridge', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.rbridge_id.interface.ve.ipv6.ipv6_nd_ra.ipv6_intf_cmds.neighbor', 'pybind.nos.v7_0_1a.brocade_rbridge', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.rbridge_id.interface.ve.ipv6.ipv6_nd_ra.ipv6_intf_cmds.neighbor', 'pybind.nos.v7_1_0.brocade_rbridge', 'pybind.nos.v7_1_0')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'rbridge_id', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'rbridge_id', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'rbridge_id', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'neighbor', 'keyval': 'ipv6_address', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, rbridge_id=rbridge_id, ve=ve, neighbor=neighbor)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def rbridge_id_interface_ve_ipv6_vrrp_extended_group_delete(self, rbridge_id=None, ve=None, vrrpv3e=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		NOS: 6.0.2b, 7.0.1a, 7.1.0    

	**Parent Instance Keyword Arg Tuple(s)**:
		:param rbridge_id: kwarg tuple.
		:type rbridge_id: (rbridge_id).

		:param rbridge_id: tuple arg.
		:type rbridge_id: (long)
		
		.. note::
			* range - ['0..4294967295']

		:param ve: kwarg tuple.
		:type ve: (name).

		:param name: tuple arg.
		:type name: (long)
		
		.. note::
			* range - ['0..4294967295']

	**This Instance Keyword Arg Tuple**:
		:param vrrpv3e: kwarg tuple.
		:type vrrpv3e: (vrid).

		:param vrid: tuple arg.
		:type vrid: (int)
		
		.. note::
			* range - ['0..255']

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = [('pybind.nos.v6_0_2b.rbridge_id', 'rbridge_id'), ('pybind.nos.v6_0_2b.rbridge_id.interface.ve', u've'), ('pybind.nos.v7_0_1a.rbridge_id', 'rbridge_id'), ('pybind.nos.v7_0_1a.rbridge_id.interface.ve', u've'), ('pybind.nos.v7_1_0.rbridge_id', 'rbridge_id'), ('pybind.nos.v7_1_0.rbridge_id.interface.ve', u've')]
    bindings_list = [('pybind.nos.v6_0_2b.rbridge_id.interface.ve.ipv6.vrrpv3e', 'pybind.nos.v6_0_2b.brocade_rbridge', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.rbridge_id.interface.ve.ipv6.vrrpv3e', 'pybind.nos.v7_0_1a.brocade_rbridge', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.rbridge_id.interface.ve.ipv6.vrrpv3e', 'pybind.nos.v7_1_0.brocade_rbridge', 'pybind.nos.v7_1_0')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'rbridge_id', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'rbridge_id', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'rbridge_id', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'vrrpv3e', 'keyval': 'vrid', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, rbridge_id=rbridge_id, ve=ve, vrrpv3e=vrrpv3e)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def rbridge_id_interface_ve_ipv6_vrrp_extended_group_track_delete(self, rbridge_id=None, ve=None, vrrpv3e=None, interface=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		NOS: 6.0.2b, 7.0.1a, 7.1.0    

	**Parent Instance Keyword Arg Tuple(s)**:
		:param rbridge_id: kwarg tuple.
		:type rbridge_id: (rbridge_id).

		:param rbridge_id: tuple arg.
		:type rbridge_id: (long)
		
		.. note::
			* range - ['0..4294967295']

		:param ve: kwarg tuple.
		:type ve: (name).

		:param name: tuple arg.
		:type name: (long)
		
		.. note::
			* range - ['0..4294967295']

		:param vrrpv3e: kwarg tuple.
		:type vrrpv3e: (vrid).

		:param vrid: tuple arg.
		:type vrid: (int)
		
		.. note::
			* range - ['0..255']

	**This Instance Keyword Arg Tuple**:
		:param interface: kwarg tuple.
		:type interface: (interface_type, interface_name).

		:param interface_type: tuple arg.
		:type interface_type: (unicode)
		
		.. note::
			* enum - [u'fortygigabitethernet', u'gigabitethernet', u'tengigabitethernet', u'hundredgigabitethernet', u'port-channel']

		:param interface_name: tuple arg.
		:type interface_name: (unicode)
		
		.. note::
			* length - [u'3..16']
			* pattern - ((([1-9]|[1-9][0-9]|1[0-9][0-9]|2[0-3][0-9])/)?(([0-9]|[1][0-6]))/([1-9]|[1-9][0-9]|[1-9][0-9][0-9])(:[1-4])?)

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = [('pybind.nos.v7_1_0.rbridge_id', 'rbridge_id'), ('pybind.nos.v7_1_0.rbridge_id.interface.ve', u've'), ('pybind.nos.v7_1_0.rbridge_id.interface.ve.ipv6.vrrpv3e', u'vrrpv3e'), ('pybind.nos.v7_0_1a.rbridge_id', 'rbridge_id'), ('pybind.nos.v7_0_1a.rbridge_id.interface.ve', u've'), ('pybind.nos.v7_0_1a.rbridge_id.interface.ve.ipv6.vrrpv3e', u'vrrpv3e'), ('pybind.nos.v6_0_2b.rbridge_id', 'rbridge_id'), ('pybind.nos.v6_0_2b.rbridge_id.interface.ve', u've'), ('pybind.nos.v6_0_2b.rbridge_id.interface.ve.ipv6.vrrpv3e', u'vrrpv3e')]
    bindings_list = [('pybind.nos.v6_0_2b.rbridge_id.interface.ve.ipv6.vrrpv3e.track.interface', 'pybind.nos.v6_0_2b.brocade_rbridge', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.rbridge_id.interface.ve.ipv6.vrrpv3e.track.interface', 'pybind.nos.v7_0_1a.brocade_rbridge', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.rbridge_id.interface.ve.ipv6.vrrpv3e.track.interface', 'pybind.nos.v7_1_0.brocade_rbridge', 'pybind.nos.v7_1_0')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'rbridge_id', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'vrid', 'extra_keyval': ''}, {'keyval': 'rbridge_id', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'vrid', 'extra_keyval': ''}, {'keyval': 'rbridge_id', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'vrid', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'interface', 'keyval': 'interface_type, interface_name', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, rbridge_id=rbridge_id, ve=ve, vrrpv3e=vrrpv3e, interface=interface)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def rbridge_id_interface_ve_ipv6_vrrp_extended_group_track_network_delete(self, rbridge_id=None, ve=None, vrrpv3e=None, network=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		NOS: 6.0.2b, 7.0.1a, 7.1.0    

	**Parent Instance Keyword Arg Tuple(s)**:
		:param rbridge_id: kwarg tuple.
		:type rbridge_id: (rbridge_id).

		:param rbridge_id: tuple arg.
		:type rbridge_id: (long)
		
		.. note::
			* range - ['0..4294967295']

		:param ve: kwarg tuple.
		:type ve: (name).

		:param name: tuple arg.
		:type name: (long)
		
		.. note::
			* range - ['0..4294967295']

		:param vrrpv3e: kwarg tuple.
		:type vrrpv3e: (vrid).

		:param vrid: tuple arg.
		:type vrid: (int)
		
		.. note::
			* range - ['0..255']

	**This Instance Keyword Arg Tuple**:
		:param network: kwarg tuple.
		:type network: (network_address).

		:param network_address: XXXX::YYYY/L;;IPv6 global address prefix in ipv6-address/Prefix length format
		:type network_address: (unicode)
		
		.. note::
			* pattern - ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(/(([0-9])|([0-9]{2})|(1[0-1][0-9])|(12[0-8])))

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = [('pybind.nos.v7_0_1a.rbridge_id', 'rbridge_id'), ('pybind.nos.v7_0_1a.rbridge_id.interface.ve', u've'), ('pybind.nos.v7_0_1a.rbridge_id.interface.ve.ipv6.vrrpv3e', u'vrrpv3e'), ('pybind.nos.v7_1_0.rbridge_id', 'rbridge_id'), ('pybind.nos.v7_1_0.rbridge_id.interface.ve', u've'), ('pybind.nos.v7_1_0.rbridge_id.interface.ve.ipv6.vrrpv3e', u'vrrpv3e'), ('pybind.nos.v6_0_2b.rbridge_id', 'rbridge_id'), ('pybind.nos.v6_0_2b.rbridge_id.interface.ve', u've'), ('pybind.nos.v6_0_2b.rbridge_id.interface.ve.ipv6.vrrpv3e', u'vrrpv3e')]
    bindings_list = [('pybind.nos.v6_0_2b.rbridge_id.interface.ve.ipv6.vrrpv3e.track.network', 'pybind.nos.v6_0_2b.brocade_rbridge', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.rbridge_id.interface.ve.ipv6.vrrpv3e.track.network', 'pybind.nos.v7_0_1a.brocade_rbridge', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.rbridge_id.interface.ve.ipv6.vrrpv3e.track.network', 'pybind.nos.v7_1_0.brocade_rbridge', 'pybind.nos.v7_1_0')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'rbridge_id', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'vrid', 'extra_keyval': ''}, {'keyval': 'rbridge_id', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'vrid', 'extra_keyval': ''}, {'keyval': 'rbridge_id', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'vrid', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'network', 'keyval': 'network_address', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, rbridge_id=rbridge_id, ve=ve, vrrpv3e=vrrpv3e, network=network)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def rbridge_id_interface_ve_ipv6_vrrp_extended_group_virtual_ip_delete(self, rbridge_id=None, ve=None, vrrpv3e=None, virtual_ip=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		NOS: 6.0.2b, 7.0.1a, 7.1.0    

	**Parent Instance Keyword Arg Tuple(s)**:
		:param rbridge_id: kwarg tuple.
		:type rbridge_id: (rbridge_id).

		:param rbridge_id: tuple arg.
		:type rbridge_id: (long)
		
		.. note::
			* range - ['0..4294967295']

		:param ve: kwarg tuple.
		:type ve: (name).

		:param name: tuple arg.
		:type name: (long)
		
		.. note::
			* range - ['0..4294967295']

		:param vrrpv3e: kwarg tuple.
		:type vrrpv3e: (vrid).

		:param vrid: tuple arg.
		:type vrid: (int)
		
		.. note::
			* range - ['0..255']

	**This Instance Keyword Arg Tuple**:
		:param virtual_ip: kwarg tuple.
		:type virtual_ip: (virtual_ipaddr).

		:param virtual_ipaddr: Virtual IPv6 address
		:type virtual_ipaddr: (unicode)
		
		.. note::
			* pattern - ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = [('pybind.nos.v6_0_2b.rbridge_id', 'rbridge_id'), ('pybind.nos.v6_0_2b.rbridge_id.interface.ve', u've'), ('pybind.nos.v6_0_2b.rbridge_id.interface.ve.ipv6.vrrpv3e', u'vrrpv3e'), ('pybind.nos.v7_0_1a.rbridge_id', 'rbridge_id'), ('pybind.nos.v7_0_1a.rbridge_id.interface.ve', u've'), ('pybind.nos.v7_0_1a.rbridge_id.interface.ve.ipv6.vrrpv3e', u'vrrpv3e'), ('pybind.nos.v7_1_0.rbridge_id', 'rbridge_id'), ('pybind.nos.v7_1_0.rbridge_id.interface.ve', u've'), ('pybind.nos.v7_1_0.rbridge_id.interface.ve.ipv6.vrrpv3e', u'vrrpv3e')]
    bindings_list = [('pybind.nos.v6_0_2b.rbridge_id.interface.ve.ipv6.vrrpv3e.virtual_ip', 'pybind.nos.v6_0_2b.brocade_rbridge', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.rbridge_id.interface.ve.ipv6.vrrpv3e.virtual_ip', 'pybind.nos.v7_0_1a.brocade_rbridge', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.rbridge_id.interface.ve.ipv6.vrrpv3e.virtual_ip', 'pybind.nos.v7_1_0.brocade_rbridge', 'pybind.nos.v7_1_0')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'rbridge_id', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'vrid', 'extra_keyval': ''}, {'keyval': 'rbridge_id', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'vrid', 'extra_keyval': ''}, {'keyval': 'rbridge_id', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'vrid', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'virtual_ip', 'keyval': 'virtual_ipaddr', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, rbridge_id=rbridge_id, ve=ve, vrrpv3e=vrrpv3e, virtual_ip=virtual_ip)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def rbridge_id_interface_ve_ipv6_vrrp_group_delete(self, rbridge_id=None, ve=None, vrrpv3=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		NOS: 6.0.2b, 7.0.1a, 7.1.0    

	**Parent Instance Keyword Arg Tuple(s)**:
		:param rbridge_id: kwarg tuple.
		:type rbridge_id: (rbridge_id).

		:param rbridge_id: tuple arg.
		:type rbridge_id: (long)
		
		.. note::
			* range - ['0..4294967295']

		:param ve: kwarg tuple.
		:type ve: (name).

		:param name: tuple arg.
		:type name: (long)
		
		.. note::
			* range - ['0..4294967295']

	**This Instance Keyword Arg Tuple**:
		:param vrrpv3: kwarg tuple.
		:type vrrpv3: (vrid).

		:param vrid: tuple arg.
		:type vrid: (int)
		
		.. note::
			* range - ['0..255']

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = [('pybind.nos.v7_1_0.rbridge_id', 'rbridge_id'), ('pybind.nos.v7_1_0.rbridge_id.interface.ve', u've'), ('pybind.nos.v6_0_2b.rbridge_id', 'rbridge_id'), ('pybind.nos.v6_0_2b.rbridge_id.interface.ve', u've'), ('pybind.nos.v7_0_1a.rbridge_id', 'rbridge_id'), ('pybind.nos.v7_0_1a.rbridge_id.interface.ve', u've')]
    bindings_list = [('pybind.nos.v6_0_2b.rbridge_id.interface.ve.ipv6.vrrpv3', 'pybind.nos.v6_0_2b.brocade_rbridge', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.rbridge_id.interface.ve.ipv6.vrrpv3', 'pybind.nos.v7_0_1a.brocade_rbridge', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.rbridge_id.interface.ve.ipv6.vrrpv3', 'pybind.nos.v7_1_0.brocade_rbridge', 'pybind.nos.v7_1_0')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'rbridge_id', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'rbridge_id', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'rbridge_id', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'vrrpv3', 'keyval': 'vrid', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, rbridge_id=rbridge_id, ve=ve, vrrpv3=vrrpv3)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def rbridge_id_interface_ve_ipv6_vrrp_group_track_delete(self, rbridge_id=None, ve=None, vrrpv3=None, interface=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		NOS: 6.0.2b, 7.0.1a, 7.1.0    

	**Parent Instance Keyword Arg Tuple(s)**:
		:param rbridge_id: kwarg tuple.
		:type rbridge_id: (rbridge_id).

		:param rbridge_id: tuple arg.
		:type rbridge_id: (long)
		
		.. note::
			* range - ['0..4294967295']

		:param ve: kwarg tuple.
		:type ve: (name).

		:param name: tuple arg.
		:type name: (long)
		
		.. note::
			* range - ['0..4294967295']

		:param vrrpv3: kwarg tuple.
		:type vrrpv3: (vrid).

		:param vrid: tuple arg.
		:type vrid: (int)
		
		.. note::
			* range - ['0..255']

	**This Instance Keyword Arg Tuple**:
		:param interface: kwarg tuple.
		:type interface: (interface_type, interface_name).

		:param interface_type: tuple arg.
		:type interface_type: (unicode)
		
		.. note::
			* enum - [u'fortygigabitethernet', u'gigabitethernet', u'tengigabitethernet', u'hundredgigabitethernet', u'port-channel']

		:param interface_name: tuple arg.
		:type interface_name: (unicode)
		
		.. note::
			* length - [u'3..16']
			* pattern - ((([1-9]|[1-9][0-9]|1[0-9][0-9]|2[0-3][0-9])/)?(([0-9]|[1][0-6]))/([1-9]|[1-9][0-9]|[1-9][0-9][0-9])(:[1-4])?)

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = [('pybind.nos.v7_1_0.rbridge_id', 'rbridge_id'), ('pybind.nos.v7_1_0.rbridge_id.interface.ve', u've'), ('pybind.nos.v7_1_0.rbridge_id.interface.ve.ipv6.vrrpv3', u'vrrpv3'), ('pybind.nos.v6_0_2b.rbridge_id', 'rbridge_id'), ('pybind.nos.v6_0_2b.rbridge_id.interface.ve', u've'), ('pybind.nos.v6_0_2b.rbridge_id.interface.ve.ipv6.vrrpv3', u'vrrpv3'), ('pybind.nos.v7_0_1a.rbridge_id', 'rbridge_id'), ('pybind.nos.v7_0_1a.rbridge_id.interface.ve', u've'), ('pybind.nos.v7_0_1a.rbridge_id.interface.ve.ipv6.vrrpv3', u'vrrpv3')]
    bindings_list = [('pybind.nos.v6_0_2b.rbridge_id.interface.ve.ipv6.vrrpv3.track.interface', 'pybind.nos.v6_0_2b.brocade_rbridge', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.rbridge_id.interface.ve.ipv6.vrrpv3.track.interface', 'pybind.nos.v7_0_1a.brocade_rbridge', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.rbridge_id.interface.ve.ipv6.vrrpv3.track.interface', 'pybind.nos.v7_1_0.brocade_rbridge', 'pybind.nos.v7_1_0')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'rbridge_id', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'vrid', 'extra_keyval': ''}, {'keyval': 'rbridge_id', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'vrid', 'extra_keyval': ''}, {'keyval': 'rbridge_id', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'vrid', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'interface', 'keyval': 'interface_type, interface_name', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, rbridge_id=rbridge_id, ve=ve, vrrpv3=vrrpv3, interface=interface)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def rbridge_id_interface_ve_ipv6_vrrp_group_virtual_ip_delete(self, rbridge_id=None, ve=None, vrrpv3=None, virtual_ip=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		NOS: 6.0.2b, 7.0.1a, 7.1.0    

	**Parent Instance Keyword Arg Tuple(s)**:
		:param rbridge_id: kwarg tuple.
		:type rbridge_id: (rbridge_id).

		:param rbridge_id: tuple arg.
		:type rbridge_id: (long)
		
		.. note::
			* range - ['0..4294967295']

		:param ve: kwarg tuple.
		:type ve: (name).

		:param name: tuple arg.
		:type name: (long)
		
		.. note::
			* range - ['0..4294967295']

		:param vrrpv3: kwarg tuple.
		:type vrrpv3: (vrid).

		:param vrid: tuple arg.
		:type vrid: (int)
		
		.. note::
			* range - ['0..255']

	**This Instance Keyword Arg Tuple**:
		:param virtual_ip: kwarg tuple.
		:type virtual_ip: (virtual_ipaddr).

		:param virtual_ipaddr: Virtual IPv6 address
		:type virtual_ipaddr: (unicode)
		
		.. note::
			* pattern - ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = [('pybind.nos.v7_0_1a.rbridge_id', 'rbridge_id'), ('pybind.nos.v7_0_1a.rbridge_id.interface.ve', u've'), ('pybind.nos.v7_0_1a.rbridge_id.interface.ve.ipv6.vrrpv3', u'vrrpv3'), ('pybind.nos.v6_0_2b.rbridge_id', 'rbridge_id'), ('pybind.nos.v6_0_2b.rbridge_id.interface.ve', u've'), ('pybind.nos.v6_0_2b.rbridge_id.interface.ve.ipv6.vrrpv3', u'vrrpv3'), ('pybind.nos.v7_1_0.rbridge_id', 'rbridge_id'), ('pybind.nos.v7_1_0.rbridge_id.interface.ve', u've'), ('pybind.nos.v7_1_0.rbridge_id.interface.ve.ipv6.vrrpv3', u'vrrpv3')]
    bindings_list = [('pybind.nos.v6_0_2b.rbridge_id.interface.ve.ipv6.vrrpv3.virtual_ip', 'pybind.nos.v6_0_2b.brocade_rbridge', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.rbridge_id.interface.ve.ipv6.vrrpv3.virtual_ip', 'pybind.nos.v7_0_1a.brocade_rbridge', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.rbridge_id.interface.ve.ipv6.vrrpv3.virtual_ip', 'pybind.nos.v7_1_0.brocade_rbridge', 'pybind.nos.v7_1_0')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'rbridge_id', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'vrid', 'extra_keyval': ''}, {'keyval': 'rbridge_id', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'vrid', 'extra_keyval': ''}, {'keyval': 'rbridge_id', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'vrid', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'virtual_ip', 'keyval': 'virtual_ipaddr', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, rbridge_id=rbridge_id, ve=ve, vrrpv3=vrrpv3, virtual_ip=virtual_ip)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def rbridge_id_interface_ve_vrrp_extended_group_delete(self, rbridge_id=None, ve=None, vrrpe=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		NOS: 6.0.2b, 7.0.1a, 7.1.0    

	**Parent Instance Keyword Arg Tuple(s)**:
		:param rbridge_id: kwarg tuple.
		:type rbridge_id: (rbridge_id).

		:param rbridge_id: tuple arg.
		:type rbridge_id: (long)
		
		.. note::
			* range - ['0..4294967295']

		:param ve: kwarg tuple.
		:type ve: (name).

		:param name: tuple arg.
		:type name: (long)
		
		.. note::
			* range - ['0..4294967295']

	**This Instance Keyword Arg Tuple**:
		:param vrrpe: kwarg tuple.
		:type vrrpe: (vrid).

		:param vrid: tuple arg.
		:type vrid: (int)
		
		.. note::
			* range - ['0..255']

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = [('pybind.nos.v7_0_1a.rbridge_id', 'rbridge_id'), ('pybind.nos.v7_0_1a.rbridge_id.interface.ve', u've'), ('pybind.nos.v6_0_2b.rbridge_id', 'rbridge_id'), ('pybind.nos.v6_0_2b.rbridge_id.interface.ve', u've'), ('pybind.nos.v7_1_0.rbridge_id', 'rbridge_id'), ('pybind.nos.v7_1_0.rbridge_id.interface.ve', u've')]
    bindings_list = [('pybind.nos.v6_0_2b.rbridge_id.interface.ve.vrrpe', 'pybind.nos.v6_0_2b.brocade_rbridge', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.rbridge_id.interface.ve.vrrpe', 'pybind.nos.v7_0_1a.brocade_rbridge', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.rbridge_id.interface.ve.vrrpe', 'pybind.nos.v7_1_0.brocade_rbridge', 'pybind.nos.v7_1_0')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'rbridge_id', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'rbridge_id', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'rbridge_id', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'vrrpe', 'keyval': 'vrid', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, rbridge_id=rbridge_id, ve=ve, vrrpe=vrrpe)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def rbridge_id_interface_ve_vrrp_extended_group_track_delete(self, rbridge_id=None, ve=None, vrrpe=None, interface=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		NOS: 6.0.2b, 7.0.1a, 7.1.0    

	**Parent Instance Keyword Arg Tuple(s)**:
		:param rbridge_id: kwarg tuple.
		:type rbridge_id: (rbridge_id).

		:param rbridge_id: tuple arg.
		:type rbridge_id: (long)
		
		.. note::
			* range - ['0..4294967295']

		:param ve: kwarg tuple.
		:type ve: (name).

		:param name: tuple arg.
		:type name: (long)
		
		.. note::
			* range - ['0..4294967295']

		:param vrrpe: kwarg tuple.
		:type vrrpe: (vrid).

		:param vrid: tuple arg.
		:type vrid: (int)
		
		.. note::
			* range - ['0..255']

	**This Instance Keyword Arg Tuple**:
		:param interface: kwarg tuple.
		:type interface: (interface_type, interface_name).

		:param interface_type: tuple arg.
		:type interface_type: (unicode)
		
		.. note::
			* enum - [u'fortygigabitethernet', u'gigabitethernet', u'tengigabitethernet', u'hundredgigabitethernet', u'port-channel']

		:param interface_name: tuple arg.
		:type interface_name: (unicode)
		
		.. note::
			* length - [u'3..16']
			* pattern - ((([1-9]|[1-9][0-9]|1[0-9][0-9]|2[0-3][0-9])/)?(([0-9]|[1][0-6]))/([1-9]|[1-9][0-9]|[1-9][0-9][0-9])(:[1-4])?)

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = [('pybind.nos.v6_0_2b.rbridge_id', 'rbridge_id'), ('pybind.nos.v6_0_2b.rbridge_id.interface.ve', u've'), ('pybind.nos.v6_0_2b.rbridge_id.interface.ve.vrrpe', u'vrrpe'), ('pybind.nos.v7_1_0.rbridge_id', 'rbridge_id'), ('pybind.nos.v7_1_0.rbridge_id.interface.ve', u've'), ('pybind.nos.v7_1_0.rbridge_id.interface.ve.vrrpe', u'vrrpe'), ('pybind.nos.v7_0_1a.rbridge_id', 'rbridge_id'), ('pybind.nos.v7_0_1a.rbridge_id.interface.ve', u've'), ('pybind.nos.v7_0_1a.rbridge_id.interface.ve.vrrpe', u'vrrpe')]
    bindings_list = [('pybind.nos.v6_0_2b.rbridge_id.interface.ve.vrrpe.track.interface', 'pybind.nos.v6_0_2b.brocade_rbridge', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.rbridge_id.interface.ve.vrrpe.track.interface', 'pybind.nos.v7_0_1a.brocade_rbridge', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.rbridge_id.interface.ve.vrrpe.track.interface', 'pybind.nos.v7_1_0.brocade_rbridge', 'pybind.nos.v7_1_0')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'rbridge_id', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'vrid', 'extra_keyval': ''}, {'keyval': 'rbridge_id', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'vrid', 'extra_keyval': ''}, {'keyval': 'rbridge_id', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'vrid', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'interface', 'keyval': 'interface_type, interface_name', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, rbridge_id=rbridge_id, ve=ve, vrrpe=vrrpe, interface=interface)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def rbridge_id_interface_ve_vrrp_extended_group_track_network_delete(self, rbridge_id=None, ve=None, vrrpe=None, network=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		NOS: 6.0.2b, 7.0.1a, 7.1.0    

	**Parent Instance Keyword Arg Tuple(s)**:
		:param rbridge_id: kwarg tuple.
		:type rbridge_id: (rbridge_id).

		:param rbridge_id: tuple arg.
		:type rbridge_id: (long)
		
		.. note::
			* range - ['0..4294967295']

		:param ve: kwarg tuple.
		:type ve: (name).

		:param name: tuple arg.
		:type name: (long)
		
		.. note::
			* range - ['0..4294967295']

		:param vrrpe: kwarg tuple.
		:type vrrpe: (vrid).

		:param vrid: tuple arg.
		:type vrid: (int)
		
		.. note::
			* range - ['0..255']

	**This Instance Keyword Arg Tuple**:
		:param network: kwarg tuple.
		:type network: (network_address).

		:param network_address: IPv4 global address
		:type network_address: (unicode)
		
		.. note::
			* pattern - (([1-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.)(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){2}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])/(([1-9])|([1-2][0-9])|(3[0-1]))

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = [('pybind.nos.v6_0_2b.rbridge_id', 'rbridge_id'), ('pybind.nos.v6_0_2b.rbridge_id.interface.ve', u've'), ('pybind.nos.v6_0_2b.rbridge_id.interface.ve.vrrpe', u'vrrpe'), ('pybind.nos.v7_0_1a.rbridge_id', 'rbridge_id'), ('pybind.nos.v7_0_1a.rbridge_id.interface.ve', u've'), ('pybind.nos.v7_0_1a.rbridge_id.interface.ve.vrrpe', u'vrrpe'), ('pybind.nos.v7_1_0.rbridge_id', 'rbridge_id'), ('pybind.nos.v7_1_0.rbridge_id.interface.ve', u've'), ('pybind.nos.v7_1_0.rbridge_id.interface.ve.vrrpe', u'vrrpe')]
    bindings_list = [('pybind.nos.v6_0_2b.rbridge_id.interface.ve.vrrpe.track.network', 'pybind.nos.v6_0_2b.brocade_rbridge', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.rbridge_id.interface.ve.vrrpe.track.network', 'pybind.nos.v7_0_1a.brocade_rbridge', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.rbridge_id.interface.ve.vrrpe.track.network', 'pybind.nos.v7_1_0.brocade_rbridge', 'pybind.nos.v7_1_0')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'rbridge_id', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'vrid', 'extra_keyval': ''}, {'keyval': 'rbridge_id', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'vrid', 'extra_keyval': ''}, {'keyval': 'rbridge_id', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'vrid', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'network', 'keyval': 'network_address', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, rbridge_id=rbridge_id, ve=ve, vrrpe=vrrpe, network=network)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def rbridge_id_interface_ve_vrrp_extended_group_virtual_ip_delete(self, rbridge_id=None, ve=None, vrrpe=None, virtual_ip=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		NOS: 6.0.2b, 7.0.1a, 7.1.0    

	**Parent Instance Keyword Arg Tuple(s)**:
		:param rbridge_id: kwarg tuple.
		:type rbridge_id: (rbridge_id).

		:param rbridge_id: tuple arg.
		:type rbridge_id: (long)
		
		.. note::
			* range - ['0..4294967295']

		:param ve: kwarg tuple.
		:type ve: (name).

		:param name: tuple arg.
		:type name: (long)
		
		.. note::
			* range - ['0..4294967295']

		:param vrrpe: kwarg tuple.
		:type vrrpe: (vrid).

		:param vrid: tuple arg.
		:type vrid: (int)
		
		.. note::
			* range - ['0..255']

	**This Instance Keyword Arg Tuple**:
		:param virtual_ip: kwarg tuple.
		:type virtual_ip: (virtual_ipaddr).

		:param virtual_ipaddr: Virtual IPv4 address
		:type virtual_ipaddr: (unicode)
		
		.. note::
			* pattern - (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = [('pybind.nos.v7_0_1a.rbridge_id', 'rbridge_id'), ('pybind.nos.v7_0_1a.rbridge_id.interface.ve', u've'), ('pybind.nos.v7_0_1a.rbridge_id.interface.ve.vrrpe', u'vrrpe'), ('pybind.nos.v7_1_0.rbridge_id', 'rbridge_id'), ('pybind.nos.v7_1_0.rbridge_id.interface.ve', u've'), ('pybind.nos.v7_1_0.rbridge_id.interface.ve.vrrpe', u'vrrpe'), ('pybind.nos.v6_0_2b.rbridge_id', 'rbridge_id'), ('pybind.nos.v6_0_2b.rbridge_id.interface.ve', u've'), ('pybind.nos.v6_0_2b.rbridge_id.interface.ve.vrrpe', u'vrrpe')]
    bindings_list = [('pybind.nos.v6_0_2b.rbridge_id.interface.ve.vrrpe.virtual_ip', 'pybind.nos.v6_0_2b.brocade_rbridge', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.rbridge_id.interface.ve.vrrpe.virtual_ip', 'pybind.nos.v7_0_1a.brocade_rbridge', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.rbridge_id.interface.ve.vrrpe.virtual_ip', 'pybind.nos.v7_1_0.brocade_rbridge', 'pybind.nos.v7_1_0')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'rbridge_id', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'vrid', 'extra_keyval': ''}, {'keyval': 'rbridge_id', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'vrid', 'extra_keyval': ''}, {'keyval': 'rbridge_id', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'vrid', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'virtual_ip', 'keyval': 'virtual_ipaddr', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, rbridge_id=rbridge_id, ve=ve, vrrpe=vrrpe, virtual_ip=virtual_ip)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def rbridge_id_interface_ve_vrrp_group_delete(self, rbridge_id=None, ve=None, vrrp=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		NOS: 6.0.2b, 7.0.1a, 7.1.0    

	**Parent Instance Keyword Arg Tuple(s)**:
		:param rbridge_id: kwarg tuple.
		:type rbridge_id: (rbridge_id).

		:param rbridge_id: tuple arg.
		:type rbridge_id: (long)
		
		.. note::
			* range - ['0..4294967295']

		:param ve: kwarg tuple.
		:type ve: (name).

		:param name: tuple arg.
		:type name: (long)
		
		.. note::
			* range - ['0..4294967295']

	**This Instance Keyword Arg Tuple**:
		:param vrrp: kwarg tuple.
		:type vrrp: (vrid, version).

		:param vrid: tuple arg.
		:type vrid: (int)
		
		.. note::
			* range - ['0..255']

		:param version: Set VRRP version 2/3
		:type version: (int)
		
		.. note::
			* range - ['0..255']

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = [('pybind.nos.v7_0_1a.rbridge_id', 'rbridge_id'), ('pybind.nos.v7_0_1a.rbridge_id.interface.ve', u've'), ('pybind.nos.v7_1_0.rbridge_id', 'rbridge_id'), ('pybind.nos.v7_1_0.rbridge_id.interface.ve', u've'), ('pybind.nos.v6_0_2b.rbridge_id', 'rbridge_id'), ('pybind.nos.v6_0_2b.rbridge_id.interface.ve', u've')]
    bindings_list = [('pybind.nos.v6_0_2b.rbridge_id.interface.ve.vrrp', 'pybind.nos.v6_0_2b.brocade_rbridge', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.rbridge_id.interface.ve.vrrp', 'pybind.nos.v7_0_1a.brocade_rbridge', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.rbridge_id.interface.ve.vrrp', 'pybind.nos.v7_1_0.brocade_rbridge', 'pybind.nos.v7_1_0')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'rbridge_id', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'rbridge_id', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'rbridge_id', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'vrrp', 'keyval': 'vrid, version', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, rbridge_id=rbridge_id, ve=ve, vrrp=vrrp)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def rbridge_id_interface_ve_vrrp_group_track_delete(self, rbridge_id=None, ve=None, vrrp=None, interface=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		NOS: 6.0.2b, 7.0.1a, 7.1.0    

	**Parent Instance Keyword Arg Tuple(s)**:
		:param rbridge_id: kwarg tuple.
		:type rbridge_id: (rbridge_id).

		:param rbridge_id: tuple arg.
		:type rbridge_id: (long)
		
		.. note::
			* range - ['0..4294967295']

		:param ve: kwarg tuple.
		:type ve: (name).

		:param name: tuple arg.
		:type name: (long)
		
		.. note::
			* range - ['0..4294967295']

		:param vrrp: kwarg tuple.
		:type vrrp: (vrid, version).

		:param vrid: tuple arg.
		:type vrid: (int)
		
		.. note::
			* range - ['0..255']

		:param version: Set VRRP version 2/3
		:type version: (int)
		
		.. note::
			* range - ['0..255']

	**This Instance Keyword Arg Tuple**:
		:param interface: kwarg tuple.
		:type interface: (interface_type, interface_name).

		:param interface_type: tuple arg.
		:type interface_type: (unicode)
		
		.. note::
			* enum - [u'fortygigabitethernet', u'gigabitethernet', u'tengigabitethernet', u'hundredgigabitethernet', u'port-channel']

		:param interface_name: tuple arg.
		:type interface_name: (unicode)
		
		.. note::
			* length - [u'3..16']
			* pattern - ((([1-9]|[1-9][0-9]|1[0-9][0-9]|2[0-3][0-9])/)?(([0-9]|[1][0-6]))/([1-9]|[1-9][0-9]|[1-9][0-9][0-9])(:[1-4])?)

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = [('pybind.nos.v7_1_0.rbridge_id', 'rbridge_id'), ('pybind.nos.v7_1_0.rbridge_id.interface.ve', u've'), ('pybind.nos.v7_1_0.rbridge_id.interface.ve.vrrp', u'vrrp'), ('pybind.nos.v6_0_2b.rbridge_id', 'rbridge_id'), ('pybind.nos.v6_0_2b.rbridge_id.interface.ve', u've'), ('pybind.nos.v6_0_2b.rbridge_id.interface.ve.vrrp', u'vrrp'), ('pybind.nos.v7_0_1a.rbridge_id', 'rbridge_id'), ('pybind.nos.v7_0_1a.rbridge_id.interface.ve', u've'), ('pybind.nos.v7_0_1a.rbridge_id.interface.ve.vrrp', u'vrrp')]
    bindings_list = [('pybind.nos.v6_0_2b.rbridge_id.interface.ve.vrrp.track.interface', 'pybind.nos.v6_0_2b.brocade_rbridge', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.rbridge_id.interface.ve.vrrp.track.interface', 'pybind.nos.v7_0_1a.brocade_rbridge', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.rbridge_id.interface.ve.vrrp.track.interface', 'pybind.nos.v7_1_0.brocade_rbridge', 'pybind.nos.v7_1_0')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'rbridge_id', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'vrid, version', 'extra_keyval': ''}, {'keyval': 'rbridge_id', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'vrid, version', 'extra_keyval': ''}, {'keyval': 'rbridge_id', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'vrid, version', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'interface', 'keyval': 'interface_type, interface_name', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, rbridge_id=rbridge_id, ve=ve, vrrp=vrrp, interface=interface)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def rbridge_id_interface_ve_vrrp_group_virtual_ip_delete(self, rbridge_id=None, ve=None, vrrp=None, virtual_ip=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		NOS: 6.0.2b, 7.0.1a, 7.1.0    

	**Parent Instance Keyword Arg Tuple(s)**:
		:param rbridge_id: kwarg tuple.
		:type rbridge_id: (rbridge_id).

		:param rbridge_id: tuple arg.
		:type rbridge_id: (long)
		
		.. note::
			* range - ['0..4294967295']

		:param ve: kwarg tuple.
		:type ve: (name).

		:param name: tuple arg.
		:type name: (long)
		
		.. note::
			* range - ['0..4294967295']

		:param vrrp: kwarg tuple.
		:type vrrp: (vrid, version).

		:param vrid: tuple arg.
		:type vrid: (int)
		
		.. note::
			* range - ['0..255']

		:param version: Set VRRP version 2/3
		:type version: (int)
		
		.. note::
			* range - ['0..255']

	**This Instance Keyword Arg Tuple**:
		:param virtual_ip: kwarg tuple.
		:type virtual_ip: (virtual_ipaddr).

		:param virtual_ipaddr: Virtual IPv4 address
		:type virtual_ipaddr: (unicode)
		
		.. note::
			* pattern - (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = [('pybind.nos.v7_1_0.rbridge_id', 'rbridge_id'), ('pybind.nos.v7_1_0.rbridge_id.interface.ve', u've'), ('pybind.nos.v7_1_0.rbridge_id.interface.ve.vrrp', u'vrrp'), ('pybind.nos.v7_0_1a.rbridge_id', 'rbridge_id'), ('pybind.nos.v7_0_1a.rbridge_id.interface.ve', u've'), ('pybind.nos.v7_0_1a.rbridge_id.interface.ve.vrrp', u'vrrp'), ('pybind.nos.v6_0_2b.rbridge_id', 'rbridge_id'), ('pybind.nos.v6_0_2b.rbridge_id.interface.ve', u've'), ('pybind.nos.v6_0_2b.rbridge_id.interface.ve.vrrp', u'vrrp')]
    bindings_list = [('pybind.nos.v6_0_2b.rbridge_id.interface.ve.vrrp.virtual_ip', 'pybind.nos.v6_0_2b.brocade_rbridge', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.rbridge_id.interface.ve.vrrp.virtual_ip', 'pybind.nos.v7_0_1a.brocade_rbridge', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.rbridge_id.interface.ve.vrrp.virtual_ip', 'pybind.nos.v7_1_0.brocade_rbridge', 'pybind.nos.v7_1_0')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'rbridge_id', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'vrid, version', 'extra_keyval': ''}, {'keyval': 'rbridge_id', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'vrid, version', 'extra_keyval': ''}, {'keyval': 'rbridge_id', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'vrid, version', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'virtual_ip', 'keyval': 'virtual_ipaddr', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, rbridge_id=rbridge_id, ve=ve, vrrp=vrrp, virtual_ip=virtual_ip)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def rbridge_id_ip_as_path_access_list_delete(self, rbridge_id=None, access_list=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		NOS: 6.0.2b, 7.0.1a, 7.1.0    

	**Parent Instance Keyword Arg Tuple(s)**:
		:param rbridge_id: kwarg tuple.
		:type rbridge_id: (rbridge_id).

		:param rbridge_id: tuple arg.
		:type rbridge_id: (long)
		
		.. note::
			* range - ['0..4294967295']

	**This Instance Keyword Arg Tuple**:
		:param access_list: kwarg tuple.
		:type access_list: (name, seq_keyword, instance, ip_action, ip_reg_expr).

		:param name: tuple arg.
		:type name: (unicode)
		
		.. note::
			* length - [u'1..32']

		:param seq_keyword: tuple arg.
		:type seq_keyword: (unicode)
		
		.. note::
			* enum - [u'seq']

		:param instance: tuple arg.
		:type instance: (int)
		
		.. note::
			* range - ['0..65535']

		:param ip_action: tuple arg.
		:type ip_action: (unicode)
		
		.. note::
			* enum - [u'receive', u'send']

		:param ip_reg_expr: tuple arg.
		:type ip_reg_expr: (unicode)

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = [('pybind.nos.v6_0_2b.rbridge_id', 'rbridge_id'), ('pybind.nos.v7_0_1a.rbridge_id', 'rbridge_id'), ('pybind.nos.v7_1_0.rbridge_id', 'rbridge_id')]
    bindings_list = [('pybind.nos.v6_0_2b.rbridge_id.ip.as_path.access_list', 'pybind.nos.v6_0_2b.brocade_rbridge', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.rbridge_id.ip.as_path.access_list', 'pybind.nos.v7_0_1a.brocade_rbridge', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.rbridge_id.ip.as_path.access_list', 'pybind.nos.v7_1_0.brocade_rbridge', 'pybind.nos.v7_1_0')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'rbridge_id', 'extra_keyval': ''}, {'keyval': 'rbridge_id', 'extra_keyval': ''}, {'keyval': 'rbridge_id', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'access_list', 'keyval': 'name, seq_keyword, instance', 'extra_keyval': 'name, seq_keyword, instance, ip_action, ip_reg_expr'}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, rbridge_id=rbridge_id, access_list=access_list)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def rbridge_id_ip_community_list_extended_delete(self, rbridge_id=None, extended=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		NOS: 6.0.2b, 7.0.1a, 7.1.0
		SLXOS: 16r.1.00b    

	**Parent Instance Keyword Arg Tuple(s)**:
		:param rbridge_id: kwarg tuple.
		:type rbridge_id: (rbridge_id).

		:param rbridge_id: tuple arg.
		:type rbridge_id: (long)
		
		.. note::
			* range - ['0..4294967295']

	**This Instance Keyword Arg Tuple**:
		:param extended: kwarg tuple.
		:type extended: (name, seq_keyword, instance, ip_action, ip_community_reg_expr).

		:param name: tuple arg.
		:type name: (unicode)

		:param seq_keyword: tuple arg.
		:type seq_keyword: (unicode)
		
		.. note::
			* enum - [u'seq']

		:param instance: tuple arg.
		:type instance: (int)
		
		.. note::
			* range - ['0..65535']

		:param ip_action: tuple arg.
		:type ip_action: (unicode)
		
		.. note::
			* enum - [u'receive', u'send']

		:param ip_community_reg_expr: tuple arg.
		:type ip_community_reg_expr: (unicode)

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = [('pybind.nos.v6_0_2b.rbridge_id', 'rbridge_id'), ('pybind.slxos.v16r_1_00b.rbridge_id', 'rbridge_id'), ('pybind.nos.v7_1_0.rbridge_id', 'rbridge_id'), ('pybind.nos.v7_0_1a.rbridge_id', 'rbridge_id')]
    bindings_list = [('pybind.nos.v6_0_2b.rbridge_id.ip.community_list.extended', 'pybind.nos.v6_0_2b.brocade_rbridge', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.rbridge_id.ip.community_list.extended', 'pybind.nos.v7_0_1a.brocade_rbridge', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.rbridge_id.ip.community_list.extended', 'pybind.nos.v7_1_0.brocade_rbridge', 'pybind.nos.v7_1_0'), ('pybind.slxos.v16r_1_00b.rbridge_id.ip.community_list.extended', 'pybind.slxos.v16r_1_00b.brocade_rbridge', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'rbridge_id', 'extra_keyval': ''}, {'keyval': 'rbridge_id', 'extra_keyval': ''}, {'keyval': 'rbridge_id', 'extra_keyval': ''}, {'keyval': 'rbridge_id', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'extended', 'keyval': 'name, seq_keyword, instance', 'extra_keyval': 'name, seq_keyword, instance, ip_action, ip_community_reg_expr'}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, rbridge_id=rbridge_id, extended=extended)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def rbridge_id_ip_community_list_standard_delete(self, rbridge_id=None, standard=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		NOS: 6.0.2b, 7.0.1a, 7.1.0
		SLXOS: 16r.1.00b    

	**Parent Instance Keyword Arg Tuple(s)**:
		:param rbridge_id: kwarg tuple.
		:type rbridge_id: (rbridge_id).

		:param rbridge_id: tuple arg.
		:type rbridge_id: (long)
		
		.. note::
			* range - ['0..4294967295']

	**This Instance Keyword Arg Tuple**:
		:param standard: kwarg tuple.
		:type standard: (name, seq_keyword, instance, ip_action, std_community_expr).

		:param name: tuple arg.
		:type name: (unicode)

		:param seq_keyword: tuple arg.
		:type seq_keyword: (unicode)
		
		.. note::
			* enum - [u'seq']

		:param instance: tuple arg.
		:type instance: (int)
		
		.. note::
			* range - ['0..65535']

		:param ip_action: tuple arg.
		:type ip_action: (unicode)
		
		.. note::
			* enum - [u'receive', u'send']

		:param std_community_expr: tuple arg.
		:type std_community_expr: (unicode)
		
		.. note::
			* pattern - (\s*)|(\s*((local\-as)|(internet)|(no\-export)|(no\-advertise)|((([1-9][0-9]{0,3})|([1-5][0-9]{4})|(6[0-4][0-9]{3})|(65[0-4][0-9]{2})|(655[0-2][0-9])|(6553[0-5])):(([0-9][0-9]{0,3})|([1-5][0-9]{4})|(6[0-4][0-9]{3})|(65[0-4][0-9]{2})|(655[0-2][0-9])|(6553[0-5])))|([1-9][0-9]{0,8})|([1-3][0-9]{9})|(4[0-1][0-9]{8})|(42[0-8][0-9]{7})|(429[0-3][0-9]{6})|(4294[0-8][0-9]{5})|(42949[0-5][0-9]{4})|(429496[0-6][0-9]{3})|(4294967[0-1][0-9]{2})|(42949672[0-8][0-9])|(429496729[0-5])))((\s+((local\-as)|(internet)|(no\-export)|(no\-advertise)|((([1-9][0-9]{0,3})|([1-5][0-9]{4})|(6[0-4][0-9]{3})|(65[0-4][0-9]{2})|(655[0-2][0-9])|(6553[0-5])):(([0-9][0-9]{0,3})|([1-5][0-9]{4})|(6[0-4][0-9]{3})|(65[0-4][0-9]{2})|(655[0-2][0-9])|(6553[0-5])))|([1-9][0-9]{0,8})|([1-3][0-9]{9})|(4[0-1][0-9]{8})|(42[0-8][0-9]{7})|(429[0-3][0-9]{6})|(4294[0-8][0-9]{5})|(42949[0-5][0-9]{4})|(429496[0-6][0-9]{3})|(4294967[0-1][0-9]{2})|(42949672[0-8][0-9])|(429496729[0-5])))*)

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = [('pybind.slxos.v16r_1_00b.rbridge_id', 'rbridge_id'), ('pybind.nos.v7_0_1a.rbridge_id', 'rbridge_id'), ('pybind.nos.v7_1_0.rbridge_id', 'rbridge_id'), ('pybind.nos.v6_0_2b.rbridge_id', 'rbridge_id')]
    bindings_list = [('pybind.nos.v6_0_2b.rbridge_id.ip.community_list.standard', 'pybind.nos.v6_0_2b.brocade_rbridge', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.rbridge_id.ip.community_list.standard', 'pybind.nos.v7_0_1a.brocade_rbridge', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.rbridge_id.ip.community_list.standard', 'pybind.nos.v7_1_0.brocade_rbridge', 'pybind.nos.v7_1_0'), ('pybind.slxos.v16r_1_00b.rbridge_id.ip.community_list.standard', 'pybind.slxos.v16r_1_00b.brocade_rbridge', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'rbridge_id', 'extra_keyval': ''}, {'keyval': 'rbridge_id', 'extra_keyval': ''}, {'keyval': 'rbridge_id', 'extra_keyval': ''}, {'keyval': 'rbridge_id', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'standard', 'keyval': 'name, seq_keyword, instance', 'extra_keyval': 'name, seq_keyword, instance, ip_action, std_community_expr'}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, rbridge_id=rbridge_id, standard=standard)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def rbridge_id_ip_extcommunity_list_delete(self, rbridge_id=None, extcommunity_list=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		NOS: 6.0.2b, 7.0.1a, 7.1.0    

	**Parent Instance Keyword Arg Tuple(s)**:
		:param rbridge_id: kwarg tuple.
		:type rbridge_id: (rbridge_id).

		:param rbridge_id: tuple arg.
		:type rbridge_id: (long)
		
		.. note::
			* range - ['0..4294967295']

	**This Instance Keyword Arg Tuple**:
		:param extcommunity_list: kwarg tuple.
		:type extcommunity_list: (extcommunity_list_num, ext_community_action, ext_community_expr).

		:param extcommunity_list_num: tuple arg.
		:type extcommunity_list_num: (int)
		
		.. note::
			* range - ['0..65535']

		:param ext_community_action: tuple arg.
		:type ext_community_action: (unicode)
		
		.. note::
			* enum - [u'receive', u'send']

		:param ext_community_expr: Ext-community-list
		:type ext_community_expr: (unicode)
		
		.. note::
			* pattern - (\s*)|(\s*((rt)|(soo)|((([1-9][0-9]{0,8})|([1-3][0-9]{9})|(4[0-1][0-9]{8})|(42[0-8][0-9]{7})|(429[0-3][0-9]{6})|(4294[0-8][0-9]{5})|(42949[0-5][0-9]{4})|(429496[0-6][0-9]{3})|(4294967[0-1][0-9]{2})|(42949672[0-8][0-9])|(429496729[0-5])):(([1-9][0-9]{0,8})|([1-3][0-9]{9})|(4[0-1][0-9]{8})|(42[0-8][0-9]{7})|(429[0-3][0-9]{6})|(4294[0-8][0-9]{5})|(42949[0-5][0-9]{4})|(429496[0-6][0-9]{3})|(4294967[0-1][0-9]{2})|(42949672[0-8][0-9])|(429496729[0-5])))|((([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5]):(([1-9][0-9]{0,8})|([1-3][0-9]{9})|(4[0-1][0-9]{8})|(42[0-8][0-9]{7})|(429[0-3][0-9]{6})|(4294[0-8][0-9]{5})|(42949[0-5][0-9]{4})|(429496[0-6][0-9]{3})|(4294967[0-1][0-9]{2})|(42949672[0-8][0-9])|(429496729[0-5])))))((\s+((rt)|(soo)|((([1-9][0-9]{0,8})|([1-3][0-9]{9})|(4[0-1][0-9]{8})|(42[0-8][0-9]{7})|(429[0-3][0-9]{6})|(4294[0-8][0-9]{5})|(42949[0-5][0-9]{4})|(429496[0-6][0-9]{3})|(4294967[0-1][0-9]{2})|(42949672[0-8][0-9])|(429496729[0-5])):(([1-9][0-9]{0,8})|([1-3][0-9]{9})|(4[0-1][0-9]{8})|(42[0-8][0-9]{7})|(429[0-3][0-9]{6})|(4294[0-8][0-9]{5})|(42949[0-5][0-9]{4})|(429496[0-6][0-9]{3})|(4294967[0-1][0-9]{2})|(42949672[0-8][0-9])|(429496729[0-5])))|(((([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])):(([1-9][0-9]{0,8})|([1-3][0-9]{9})|(4[0-1][0-9]{8})|(42[0-8][0-9]{7})|(429[0-3][0-9]{6})|(4294[0-8][0-9]{5})|(42949[0-5][0-9]{4})|(429496[0-6][0-9]{3})|(4294967[0-1][0-9]{2})|(42949672[0-8][0-9])|(429496729[0-5])))))*)

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = [('pybind.nos.v6_0_2b.rbridge_id', 'rbridge_id'), ('pybind.nos.v7_0_1a.rbridge_id', 'rbridge_id'), ('pybind.nos.v7_1_0.rbridge_id', 'rbridge_id')]
    bindings_list = [('pybind.nos.v6_0_2b.rbridge_id.ip.extcommunity_list', 'pybind.nos.v6_0_2b.brocade_rbridge', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.rbridge_id.ip.extcommunity_list', 'pybind.nos.v7_0_1a.brocade_rbridge', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.rbridge_id.ip.extcommunity_list', 'pybind.nos.v7_1_0.brocade_rbridge', 'pybind.nos.v7_1_0')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'rbridge_id', 'extra_keyval': ''}, {'keyval': 'rbridge_id', 'extra_keyval': ''}, {'keyval': 'rbridge_id', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'extcommunity_list', 'keyval': 'extcommunity_list_num', 'extra_keyval': 'extcommunity_list_num, ext_community_action, ext_community_regex, ext_community_expr'}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, rbridge_id=rbridge_id, extcommunity_list=extcommunity_list)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def rbridge_id_ip_import_routes_delete(self, rbridge_id=None, routes=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		NOS: 6.0.2b, 7.0.1a, 7.1.0    

	**Parent Instance Keyword Arg Tuple(s)**:
		:param rbridge_id: kwarg tuple.
		:type rbridge_id: (rbridge_id).

		:param rbridge_id: tuple arg.
		:type rbridge_id: (long)
		
		.. note::
			* range - ['0..4294967295']

	**This Instance Keyword Arg Tuple**:
		:param routes: kwarg tuple.
		:type routes: (src_vrf, route_map).

		:param src_vrf: ASCII string;;Name of VRF
		:type src_vrf: (unicode)
		
		.. note::
			* length - [u'1..32']
			* pattern - ((([a-zA-Z0-9_]([a-zA-Z0-9\-_]){0,61})?[a-zA-Z0-9]\.)*([a-zA-Z0-9_]([a-zA-Z0-9\-_]){0,61})?[a-zA-Z0-9]\.?)|\.

		:param route_map: Word:1-63;;Route map name
		:type route_map: (unicode)
		
		.. note::
			* pattern - [a-zA-Z]{1}([-a-zA-Z0-9\.\\\\@#\+\*\(\)=\{~\}%<>=$_\[\]\|]{0,62})

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = [('pybind.nos.v7_1_0.rbridge_id', 'rbridge_id'), ('pybind.nos.v7_0_1a.rbridge_id', 'rbridge_id'), ('pybind.nos.v6_0_2b.rbridge_id', 'rbridge_id')]
    bindings_list = [('pybind.nos.v6_0_2b.rbridge_id.ip.import_.routes', 'pybind.nos.v6_0_2b.brocade_rbridge', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.rbridge_id.ip.import_.routes', 'pybind.nos.v7_0_1a.brocade_rbridge', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.rbridge_id.ip.import_.routes', 'pybind.nos.v7_1_0.brocade_rbridge', 'pybind.nos.v7_1_0')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'rbridge_id', 'extra_keyval': ''}, {'keyval': 'rbridge_id', 'extra_keyval': ''}, {'keyval': 'rbridge_id', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'routes', 'keyval': 'src_vrf, route_map', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, rbridge_id=rbridge_id, routes=routes)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def rbridge_id_ip_prefix_list_delete(self, rbridge_id=None, prefix_list=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		NOS: 6.0.2b, 7.0.1a, 7.1.0    

	**Parent Instance Keyword Arg Tuple(s)**:
		:param rbridge_id: kwarg tuple.
		:type rbridge_id: (rbridge_id).

		:param rbridge_id: tuple arg.
		:type rbridge_id: (long)
		
		.. note::
			* range - ['0..4294967295']

	**This Instance Keyword Arg Tuple**:
		:param prefix_list: kwarg tuple.
		:type prefix_list: (name, seq_keyword, instance, action_ipp, prefix_ipp, ge_ipp, le_ipp).

		:param name: tuple arg.
		:type name: (unicode)
		
		.. note::
			* pattern - [a-zA-Z]{1}([-a-zA-Z0-9\.\\\\@#\+\*\(\)=\{~\}%<>=$_\[\]\|]{0,31})

		:param seq_keyword: tuple arg.
		:type seq_keyword: (unicode)
		
		.. note::
			* enum - [u'seq']

		:param instance: tuple arg.
		:type instance: (int)
		
		.. note::
			* range - ['0..65535']

		:param action_ipp: tuple arg.
		:type action_ipp: (unicode)
		
		.. note::
			* enum - [u'receive', u'send']

		:param prefix_ipp: tuple arg.
		:type prefix_ipp: (unicode)
		
		.. note::
			* pattern - (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])/(([0-9])|([1-2][0-9])|(3[0-2]))

		:param ge_ipp: Minimum IP prefix length.
		:type ge_ipp: (long)
		
		.. note::
			* range - ['0..4294967295']

		:param le_ipp: Maximum IP prefix length.
		:type le_ipp: (long)
		
		.. note::
			* range - ['0..4294967295']

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = [('pybind.nos.v7_1_0.rbridge_id', 'rbridge_id'), ('pybind.nos.v6_0_2b.rbridge_id', 'rbridge_id'), ('pybind.nos.v7_0_1a.rbridge_id', 'rbridge_id')]
    bindings_list = [('pybind.nos.v6_0_2b.rbridge_id.ip.prefix_list', 'pybind.nos.v6_0_2b.brocade_rbridge', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.rbridge_id.ip.prefix_list', 'pybind.nos.v7_0_1a.brocade_rbridge', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.rbridge_id.ip.prefix_list', 'pybind.nos.v7_1_0.brocade_rbridge', 'pybind.nos.v7_1_0')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'rbridge_id', 'extra_keyval': ''}, {'keyval': 'rbridge_id', 'extra_keyval': ''}, {'keyval': 'rbridge_id', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'prefix_list', 'keyval': 'name, seq_keyword, instance', 'extra_keyval': 'name, seq_keyword, instance, action_ipp, prefix_ipp, ge_ipp, le_ipp'}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, rbridge_id=rbridge_id, prefix_list=prefix_list)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def rbridge_id_ip_route_delete(self, rbridge_id=None, static_route_nh_vrf=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		NOS: 6.0.2b, 7.0.1a, 7.1.0    

	**Parent Instance Keyword Arg Tuple(s)**:
		:param rbridge_id: kwarg tuple.
		:type rbridge_id: (rbridge_id).

		:param rbridge_id: tuple arg.
		:type rbridge_id: (long)
		
		.. note::
			* range - ['0..4294967295']

	**This Instance Keyword Arg Tuple**:
		:param static_route_nh_vrf: kwarg tuple.
		:type static_route_nh_vrf: (static_route_next_vrf_dest, next_hop_vrf, static_route_next_hop).

		:param static_route_next_vrf_dest: A.B.C.D/L ;; Destination IP address
		:type static_route_next_vrf_dest: (unicode)
		
		.. note::
			* pattern - (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])/(([0-9])|([1-2][0-9])|(3[0-2]))

		:param next_hop_vrf: Next Hop Vrf Name
		:type next_hop_vrf: (unicode)

		:param static_route_next_hop: A.B.C.D ;; Next hop IP address
		:type static_route_next_hop: (unicode)
		
		.. note::
			* pattern - (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = [('pybind.nos.v7_1_0.rbridge_id', 'rbridge_id'), ('pybind.nos.v6_0_2b.rbridge_id', 'rbridge_id'), ('pybind.nos.v7_0_1a.rbridge_id', 'rbridge_id'), ('pybind.nos.v7_0_1a.rbridge_id', 'rbridge_id'), ('pybind.nos.v7_1_0.rbridge_id', 'rbridge_id'), ('pybind.nos.v6_0_2b.rbridge_id', 'rbridge_id')]
    bindings_list = [('pybind.nos.v6_0_2b.rbridge_id.ip.rtm_config.route.static_route_nh_vrf', 'pybind.nos.v6_0_2b.brocade_rbridge', 'pybind.nos.v6_0_2b'), ('pybind.nos.v6_0_2b.rbridge_id.ip.rtm_config.route.static_route_oif_vrf', 'pybind.nos.v6_0_2b.brocade_rbridge', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.rbridge_id.ip.rtm_config.route.static_route_nh_vrf', 'pybind.nos.v7_0_1a.brocade_rbridge', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_0_1a.rbridge_id.ip.rtm_config.route.static_route_oif_vrf', 'pybind.nos.v7_0_1a.brocade_rbridge', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.rbridge_id.ip.rtm_config.route.static_route_nh_vrf', 'pybind.nos.v7_1_0.brocade_rbridge', 'pybind.nos.v7_1_0'), ('pybind.nos.v7_1_0.rbridge_id.ip.rtm_config.route.static_route_oif_vrf', 'pybind.nos.v7_1_0.brocade_rbridge', 'pybind.nos.v7_1_0')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'rbridge_id', 'extra_keyval': ''}, {'keyval': 'rbridge_id', 'extra_keyval': ''}, {'keyval': 'rbridge_id', 'extra_keyval': ''}, {'keyval': 'rbridge_id', 'extra_keyval': ''}, {'keyval': 'rbridge_id', 'extra_keyval': ''}, {'keyval': 'rbridge_id', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'static_route_oif_vrf', 'keyval': 'static_route_next_vrf_dest, next_hop_vrf, static_route_oif_type, static_route_oif_name', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, rbridge_id=rbridge_id, static_route_nh_vrf=static_route_nh_vrf)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def rbridge_id_ip_route_static_bfd_delete(self, rbridge_id=None, bfd_static_route=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		NOS: 6.0.2b, 7.0.1a, 7.1.0    

	**Parent Instance Keyword Arg Tuple(s)**:
		:param rbridge_id: kwarg tuple.
		:type rbridge_id: (rbridge_id).

		:param rbridge_id: tuple arg.
		:type rbridge_id: (long)
		
		.. note::
			* range - ['0..4294967295']

	**This Instance Keyword Arg Tuple**:
		:param bfd_static_route: kwarg tuple.
		:type bfd_static_route: (bfd_static_route_dest, bfd_static_route_src).

		:param bfd_static_route_dest: A.B.C.D ;; Destination IP address
		:type bfd_static_route_dest: (unicode)
		
		.. note::
			* pattern - (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?

		:param bfd_static_route_src: A.B.C.D ;; Source IP address
		:type bfd_static_route_src: (unicode)
		
		.. note::
			* pattern - (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = [('pybind.nos.v7_0_1a.rbridge_id', 'rbridge_id'), ('pybind.nos.v6_0_2b.rbridge_id', 'rbridge_id'), ('pybind.nos.v7_1_0.rbridge_id', 'rbridge_id')]
    bindings_list = [('pybind.nos.v6_0_2b.rbridge_id.ip.rtm_config.route.static.bfd.bfd_static_route', 'pybind.nos.v6_0_2b.brocade_rbridge', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.rbridge_id.ip.rtm_config.route.static.bfd.bfd_static_route', 'pybind.nos.v7_0_1a.brocade_rbridge', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.rbridge_id.ip.rtm_config.route.static.bfd.bfd_static_route', 'pybind.nos.v7_1_0.brocade_rbridge', 'pybind.nos.v7_1_0')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'rbridge_id', 'extra_keyval': ''}, {'keyval': 'rbridge_id', 'extra_keyval': ''}, {'keyval': 'rbridge_id', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'bfd_static_route', 'keyval': 'bfd_static_route_dest, bfd_static_route_src', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, rbridge_id=rbridge_id, bfd_static_route=bfd_static_route)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def rbridge_id_ipv6_import_routes_delete(self, rbridge_id=None, routes=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		NOS: 6.0.2b, 7.0.1a, 7.1.0    

	**Parent Instance Keyword Arg Tuple(s)**:
		:param rbridge_id: kwarg tuple.
		:type rbridge_id: (rbridge_id).

		:param rbridge_id: tuple arg.
		:type rbridge_id: (long)
		
		.. note::
			* range - ['0..4294967295']

	**This Instance Keyword Arg Tuple**:
		:param routes: kwarg tuple.
		:type routes: (src_vrf, route_map).

		:param src_vrf: ASCII string;;Name of VRF
		:type src_vrf: (unicode)
		
		.. note::
			* length - [u'1..32']
			* pattern - ((([a-zA-Z0-9_]([a-zA-Z0-9\-_]){0,61})?[a-zA-Z0-9]\.)*([a-zA-Z0-9_]([a-zA-Z0-9\-_]){0,61})?[a-zA-Z0-9]\.?)|\.

		:param route_map: Word:1-63;;Route map name
		:type route_map: (unicode)
		
		.. note::
			* pattern - [a-zA-Z]{1}([-a-zA-Z0-9\.\\\\@#\+\*\(\)=\{~\}%<>=$_\[\]\|]{0,62})

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = [('pybind.nos.v7_1_0.rbridge_id', 'rbridge_id'), ('pybind.nos.v7_0_1a.rbridge_id', 'rbridge_id'), ('pybind.nos.v6_0_2b.rbridge_id', 'rbridge_id')]
    bindings_list = [('pybind.nos.v6_0_2b.rbridge_id.ipv6.import_.routes', 'pybind.nos.v6_0_2b.brocade_rbridge', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.rbridge_id.ipv6.import_.routes', 'pybind.nos.v7_0_1a.brocade_rbridge', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.rbridge_id.ipv6.import_.routes', 'pybind.nos.v7_1_0.brocade_rbridge', 'pybind.nos.v7_1_0')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'rbridge_id', 'extra_keyval': ''}, {'keyval': 'rbridge_id', 'extra_keyval': ''}, {'keyval': 'rbridge_id', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'routes', 'keyval': 'src_vrf, route_map', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, rbridge_id=rbridge_id, routes=routes)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def rbridge_id_ipv6_prefix_list_delete(self, rbridge_id=None, prefix_list=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		NOS: 6.0.2b, 7.0.1a, 7.1.0    

	**Parent Instance Keyword Arg Tuple(s)**:
		:param rbridge_id: kwarg tuple.
		:type rbridge_id: (rbridge_id).

		:param rbridge_id: tuple arg.
		:type rbridge_id: (long)
		
		.. note::
			* range - ['0..4294967295']

	**This Instance Keyword Arg Tuple**:
		:param prefix_list: kwarg tuple.
		:type prefix_list: (name, seq_keyword, instance, action_ipp, ipv6_prefix_ipp, ge_ipp, le_ipp).

		:param name: tuple arg.
		:type name: (unicode)
		
		.. note::
			* pattern - [a-zA-Z]{1}([-a-zA-Z0-9\.\\\\@#\+\*\(\)=\{~\}%<>=$_\[\]\|]{0,31})

		:param seq_keyword: tuple arg.
		:type seq_keyword: (unicode)
		
		.. note::
			* enum - [u'seq']

		:param instance: tuple arg.
		:type instance: (int)
		
		.. note::
			* range - ['0..65535']

		:param action_ipp: tuple arg.
		:type action_ipp: (unicode)
		
		.. note::
			* enum - [u'receive', u'send']

		:param ipv6_prefix_ipp: tuple arg.
		:type ipv6_prefix_ipp: (unicode)
		
		.. note::
			* pattern - ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(/(([0-9])|([0-9]{2})|(1[0-1][0-9])|(12[0-8])))

		:param ge_ipp: Minimum IPv6 prefix length.
		:type ge_ipp: (long)
		
		.. note::
			* range - ['0..4294967295']

		:param le_ipp: Maximum IPv6 prefix length.
		:type le_ipp: (long)
		
		.. note::
			* range - ['0..4294967295']

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = [('pybind.nos.v6_0_2b.rbridge_id', 'rbridge_id'), ('pybind.nos.v7_0_1a.rbridge_id', 'rbridge_id'), ('pybind.nos.v7_1_0.rbridge_id', 'rbridge_id')]
    bindings_list = [('pybind.nos.v6_0_2b.rbridge_id.ipv6.prefix_list', 'pybind.nos.v6_0_2b.brocade_rbridge', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.rbridge_id.ipv6.prefix_list', 'pybind.nos.v7_0_1a.brocade_rbridge', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.rbridge_id.ipv6.prefix_list', 'pybind.nos.v7_1_0.brocade_rbridge', 'pybind.nos.v7_1_0')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'rbridge_id', 'extra_keyval': ''}, {'keyval': 'rbridge_id', 'extra_keyval': ''}, {'keyval': 'rbridge_id', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'prefix_list', 'keyval': 'name, seq_keyword, instance', 'extra_keyval': 'name, seq_keyword, instance, action_ipp, ipv6_prefix_ipp, ge_ipp, le_ipp'}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, rbridge_id=rbridge_id, prefix_list=prefix_list)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def rbridge_id_ipv6_route_delete(self, rbridge_id=None, route=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		NOS: 6.0.2b, 7.0.1a, 7.1.0
		SLXOS: 16r.1.00b    

	**Parent Instance Keyword Arg Tuple(s)**:
		:param rbridge_id: kwarg tuple.
		:type rbridge_id: (rbridge_id).

		:param rbridge_id: tuple arg.
		:type rbridge_id: (long)
		
		.. note::
			* range - ['0..4294967295']

	**This Instance Keyword Arg Tuple**:
		:param route: kwarg tuple.
		:type route: (dest).

		:param dest: IPv6Address/prefix.;; Destination IPv6 address-prefix
		:type dest: (unicode)
		
		.. note::
			* pattern - ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(/(([0-9])|([0-9]{2})|(1[0-1][0-9])|(12[0-8])))

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = [('pybind.nos.v6_0_2b.rbridge_id', 'rbridge_id'), ('pybind.nos.v7_1_0.rbridge_id', 'rbridge_id'), ('pybind.nos.v7_0_1a.rbridge_id', 'rbridge_id'), ('pybind.slxos.v16r_1_00b.rbridge_id', 'rbridge_id'), ('pybind.nos.v7_0_1a.rbridge_id', 'rbridge_id'), ('pybind.nos.v7_0_1a.rbridge_id', 'rbridge_id'), ('pybind.nos.v7_0_1a.rbridge_id', 'rbridge_id'), ('pybind.nos.v6_0_2b.rbridge_id', 'rbridge_id'), ('pybind.nos.v7_1_0.rbridge_id', 'rbridge_id'), ('pybind.nos.v6_0_2b.rbridge_id', 'rbridge_id'), ('pybind.nos.v7_0_1a.rbridge_id', 'rbridge_id'), ('pybind.nos.v6_0_2b.rbridge_id', 'rbridge_id'), ('pybind.nos.v7_1_0.rbridge_id', 'rbridge_id'), ('pybind.nos.v6_0_2b.rbridge_id', 'rbridge_id'), ('pybind.nos.v7_1_0.rbridge_id', 'rbridge_id'), ('pybind.nos.v7_1_0.rbridge_id', 'rbridge_id')]
    bindings_list = [('pybind.nos.v6_0_2b.rbridge_id.ipv6.ipv6route.route', 'pybind.nos.v6_0_2b.brocade_rbridge', 'pybind.nos.v6_0_2b'), ('pybind.nos.v6_0_2b.rbridge_id.ipv6.route.ipv6_static_route_oif_vrf', 'pybind.nos.v6_0_2b.brocade_rbridge', 'pybind.nos.v6_0_2b'), ('pybind.nos.v6_0_2b.rbridge_id.ipv6.route.link_local_static_route_nh_vrf', 'pybind.nos.v6_0_2b.brocade_rbridge', 'pybind.nos.v6_0_2b'), ('pybind.nos.v6_0_2b.rbridge_id.ipv6.route.static_route_nh_vrf', 'pybind.nos.v6_0_2b.brocade_rbridge', 'pybind.nos.v6_0_2b'), ('pybind.nos.v6_0_2b.rbridge_id.ipv6.route.static_route_oif', 'pybind.nos.v6_0_2b.brocade_rbridge', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.rbridge_id.ipv6.ipv6route.route', 'pybind.nos.v7_0_1a.brocade_rbridge', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_0_1a.rbridge_id.ipv6.route.ipv6_static_route_oif_vrf', 'pybind.nos.v7_0_1a.brocade_rbridge', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_0_1a.rbridge_id.ipv6.route.link_local_static_route_nh_vrf', 'pybind.nos.v7_0_1a.brocade_rbridge', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_0_1a.rbridge_id.ipv6.route.static_route_nh_vrf', 'pybind.nos.v7_0_1a.brocade_rbridge', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_0_1a.rbridge_id.ipv6.route.static_route_oif', 'pybind.nos.v7_0_1a.brocade_rbridge', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.rbridge_id.ipv6.ipv6route.route', 'pybind.nos.v7_1_0.brocade_rbridge', 'pybind.nos.v7_1_0'), ('pybind.nos.v7_1_0.rbridge_id.ipv6.route.ipv6_static_route_oif_vrf', 'pybind.nos.v7_1_0.brocade_rbridge', 'pybind.nos.v7_1_0'), ('pybind.nos.v7_1_0.rbridge_id.ipv6.route.link_local_static_route_nh_vrf', 'pybind.nos.v7_1_0.brocade_rbridge', 'pybind.nos.v7_1_0'), ('pybind.nos.v7_1_0.rbridge_id.ipv6.route.static_route_nh_vrf', 'pybind.nos.v7_1_0.brocade_rbridge', 'pybind.nos.v7_1_0'), ('pybind.nos.v7_1_0.rbridge_id.ipv6.route.static_route_oif', 'pybind.nos.v7_1_0.brocade_rbridge', 'pybind.nos.v7_1_0'), ('pybind.slxos.v16r_1_00b.rbridge_id.ipv6.ipv6route.route', 'pybind.slxos.v16r_1_00b.brocade_rbridge', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'rbridge_id', 'extra_keyval': ''}, {'keyval': 'rbridge_id', 'extra_keyval': ''}, {'keyval': 'rbridge_id', 'extra_keyval': ''}, {'keyval': 'rbridge_id', 'extra_keyval': ''}, {'keyval': 'rbridge_id', 'extra_keyval': ''}, {'keyval': 'rbridge_id', 'extra_keyval': ''}, {'keyval': 'rbridge_id', 'extra_keyval': ''}, {'keyval': 'rbridge_id', 'extra_keyval': ''}, {'keyval': 'rbridge_id', 'extra_keyval': ''}, {'keyval': 'rbridge_id', 'extra_keyval': ''}, {'keyval': 'rbridge_id', 'extra_keyval': ''}, {'keyval': 'rbridge_id', 'extra_keyval': ''}, {'keyval': 'rbridge_id', 'extra_keyval': ''}, {'keyval': 'rbridge_id', 'extra_keyval': ''}, {'keyval': 'rbridge_id', 'extra_keyval': ''}, {'keyval': 'rbridge_id', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'route', 'keyval': 'dest', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, rbridge_id=rbridge_id, route=route)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def rbridge_id_ipv6_route_static_bfd_delete(self, rbridge_id=None, bfd_ipv6_link_local_static_route=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		NOS: 6.0.2b, 7.0.1a, 7.1.0    

	**Parent Instance Keyword Arg Tuple(s)**:
		:param rbridge_id: kwarg tuple.
		:type rbridge_id: (rbridge_id).

		:param rbridge_id: tuple arg.
		:type rbridge_id: (long)
		
		.. note::
			* range - ['0..4294967295']

	**This Instance Keyword Arg Tuple**:
		:param bfd_ipv6_link_local_static_route: kwarg tuple.
		:type bfd_ipv6_link_local_static_route: (bfd_ipv6_link_local_dest, bfd_ipv6_link_local_src, bfd_interface_type, bfd_interface_name).

		:param bfd_ipv6_link_local_dest: A:B::C:D ;; Destination IPv6 address
		:type bfd_ipv6_link_local_dest: (unicode)
		
		.. note::
			* pattern - ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?

		:param bfd_ipv6_link_local_src: A:B::C:D ;; Source IPv6 address
		:type bfd_ipv6_link_local_src: (unicode)
		
		.. note::
			* pattern - ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?

		:param bfd_interface_type: Outgoing interface type
		:type bfd_interface_type: (unicode)
		
		.. note::
			* enum - [u've', u'fortygigabitethernet', u'gigabitethernet', u'tengigabitethernet', u'hundredgigabitethernet', u'null']

		:param bfd_interface_name: tuple arg.
		:type bfd_interface_name: (unicode)
		
		.. note::
			* length - [u'1..16']

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = [('pybind.nos.v7_0_1a.rbridge_id', 'rbridge_id'), ('pybind.nos.v6_0_2b.rbridge_id', 'rbridge_id'), ('pybind.nos.v7_1_0.rbridge_id', 'rbridge_id'), ('pybind.nos.v7_0_1a.rbridge_id', 'rbridge_id'), ('pybind.nos.v7_1_0.rbridge_id', 'rbridge_id'), ('pybind.nos.v6_0_2b.rbridge_id', 'rbridge_id')]
    bindings_list = [('pybind.nos.v6_0_2b.rbridge_id.ipv6.route.static.bfd.bfd_ipv6_link_local_static_route', 'pybind.nos.v6_0_2b.brocade_rbridge', 'pybind.nos.v6_0_2b'), ('pybind.nos.v6_0_2b.rbridge_id.ipv6.route.static.bfd.bfd_ipv6_static_route', 'pybind.nos.v6_0_2b.brocade_rbridge', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.rbridge_id.ipv6.route.static.bfd.bfd_ipv6_link_local_static_route', 'pybind.nos.v7_0_1a.brocade_rbridge', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_0_1a.rbridge_id.ipv6.route.static.bfd.bfd_ipv6_static_route', 'pybind.nos.v7_0_1a.brocade_rbridge', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.rbridge_id.ipv6.route.static.bfd.bfd_ipv6_link_local_static_route', 'pybind.nos.v7_1_0.brocade_rbridge', 'pybind.nos.v7_1_0'), ('pybind.nos.v7_1_0.rbridge_id.ipv6.route.static.bfd.bfd_ipv6_static_route', 'pybind.nos.v7_1_0.brocade_rbridge', 'pybind.nos.v7_1_0')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'rbridge_id', 'extra_keyval': ''}, {'keyval': 'rbridge_id', 'extra_keyval': ''}, {'keyval': 'rbridge_id', 'extra_keyval': ''}, {'keyval': 'rbridge_id', 'extra_keyval': ''}, {'keyval': 'rbridge_id', 'extra_keyval': ''}, {'keyval': 'rbridge_id', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'bfd_ipv6_link_local_static_route', 'keyval': 'bfd_ipv6_link_local_dest, bfd_ipv6_link_local_src, bfd_interface_type, bfd_interface_name', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, rbridge_id=rbridge_id, bfd_ipv6_link_local_static_route=bfd_ipv6_link_local_static_route)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def rbridge_id_ipv6_router_ospf_delete(self, rbridge_id=None, ospf=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		NOS: 6.0.2b, 7.0.1a, 7.1.0    

	**Parent Instance Keyword Arg Tuple(s)**:
		:param rbridge_id: kwarg tuple.
		:type rbridge_id: (rbridge_id).

		:param rbridge_id: tuple arg.
		:type rbridge_id: (long)
		
		.. note::
			* range - ['0..4294967295']

	**This Instance Keyword Arg Tuple**:
		:param ospf: kwarg tuple.
		:type ospf: (vrf).

		:param vrf: OSPF instance for the VRF 
		:type vrf: (unicode)
		
		.. note::
			* length - [u'1..32']
			* pattern - ((([a-zA-Z0-9_]([a-zA-Z0-9\-_]){0,61})?[a-zA-Z0-9]\.)*([a-zA-Z0-9_]([a-zA-Z0-9\-_]){0,61})?[a-zA-Z0-9]\.?)|\.

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = [('pybind.nos.v6_0_2b.rbridge_id', 'rbridge_id'), ('pybind.nos.v7_0_1a.rbridge_id', 'rbridge_id'), ('pybind.nos.v7_1_0.rbridge_id', 'rbridge_id')]
    bindings_list = [('pybind.nos.v6_0_2b.rbridge_id.ipv6.router.ospf', 'pybind.nos.v6_0_2b.brocade_rbridge', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.rbridge_id.ipv6.router.ospf', 'pybind.nos.v7_0_1a.brocade_rbridge', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.rbridge_id.ipv6.router.ospf', 'pybind.nos.v7_1_0.brocade_rbridge', 'pybind.nos.v7_1_0')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'rbridge_id', 'extra_keyval': ''}, {'keyval': 'rbridge_id', 'extra_keyval': ''}, {'keyval': 'rbridge_id', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'ospf', 'keyval': 'vrf', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, rbridge_id=rbridge_id, ospf=ospf)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def rbridge_id_ipv6_router_ospf_area_delete(self, rbridge_id=None, ospf=None, area=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		NOS: 6.0.2b, 7.0.1a, 7.1.0    

	**Parent Instance Keyword Arg Tuple(s)**:
		:param rbridge_id: kwarg tuple.
		:type rbridge_id: (rbridge_id).

		:param rbridge_id: tuple arg.
		:type rbridge_id: (long)
		
		.. note::
			* range - ['0..4294967295']

		:param ospf: kwarg tuple.
		:type ospf: (vrf).

		:param vrf: OSPF instance for the VRF 
		:type vrf: (unicode)
		
		.. note::
			* length - [u'1..32']
			* pattern - ((([a-zA-Z0-9_]([a-zA-Z0-9\-_]){0,61})?[a-zA-Z0-9]\.)*([a-zA-Z0-9_]([a-zA-Z0-9\-_]){0,61})?[a-zA-Z0-9]\.?)|\.

	**This Instance Keyword Arg Tuple**:
		:param area: kwarg tuple.
		:type area: (area_id).

		:param area_id: tuple arg.
		:type area_id: (unicode)
		
		.. note::
			* pattern - ((([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.)(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){2}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5]))|(([0-9])|([1-9]([0-9]{1,8}))|([1]([0-9]{1,9}))|([2][0]([0-9]{1,8}))|([2][1][0-3]([0-9]{1,7}))|([2][1][4][0-6]([0-9]{1,6}))|([2][1][4][7][0-3]([0-9]{1,5}))|([2][1][4][7][4][0-7]([0-9]{1,4}))|([2][1][4][7][4][8][0-2]([0-9]{1,3}))|([2][1][4][7][4][8][3][0-5]([0-9]{1,2}))|([2][1][4][7][4][8][3][6][0-3][0-9])|([2][1][4][7][4][8][3][6][4][0-7]))

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = [('pybind.nos.v6_0_2b.rbridge_id', 'rbridge_id'), ('pybind.nos.v6_0_2b.rbridge_id.ipv6.router.ospf', u'ospf'), ('pybind.nos.v7_0_1a.rbridge_id', 'rbridge_id'), ('pybind.nos.v7_0_1a.rbridge_id.ipv6.router.ospf', u'ospf'), ('pybind.nos.v7_1_0.rbridge_id', 'rbridge_id'), ('pybind.nos.v7_1_0.rbridge_id.ipv6.router.ospf', u'ospf')]
    bindings_list = [('pybind.nos.v6_0_2b.rbridge_id.ipv6.router.ospf.area', 'pybind.nos.v6_0_2b.brocade_rbridge', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.rbridge_id.ipv6.router.ospf.area', 'pybind.nos.v7_0_1a.brocade_rbridge', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.rbridge_id.ipv6.router.ospf.area', 'pybind.nos.v7_1_0.brocade_rbridge', 'pybind.nos.v7_1_0')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'rbridge_id', 'extra_keyval': ''}, {'keyval': 'vrf', 'extra_keyval': ''}, {'keyval': 'rbridge_id', 'extra_keyval': ''}, {'keyval': 'vrf', 'extra_keyval': ''}, {'keyval': 'rbridge_id', 'extra_keyval': ''}, {'keyval': 'vrf', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'area', 'keyval': 'area_id', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, rbridge_id=rbridge_id, ospf=ospf, area=area)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def rbridge_id_ipv6_router_ospf_area_range_delete(self, rbridge_id=None, ospf=None, area=None, area_range=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		NOS: 6.0.2b, 7.0.1a, 7.1.0    

	**Parent Instance Keyword Arg Tuple(s)**:
		:param rbridge_id: kwarg tuple.
		:type rbridge_id: (rbridge_id).

		:param rbridge_id: tuple arg.
		:type rbridge_id: (long)
		
		.. note::
			* range - ['0..4294967295']

		:param ospf: kwarg tuple.
		:type ospf: (vrf).

		:param vrf: OSPF instance for the VRF 
		:type vrf: (unicode)
		
		.. note::
			* length - [u'1..32']
			* pattern - ((([a-zA-Z0-9_]([a-zA-Z0-9\-_]){0,61})?[a-zA-Z0-9]\.)*([a-zA-Z0-9_]([a-zA-Z0-9\-_]){0,61})?[a-zA-Z0-9]\.?)|\.

		:param area: kwarg tuple.
		:type area: (area_id).

		:param area_id: tuple arg.
		:type area_id: (unicode)
		
		.. note::
			* pattern - ((([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.)(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){2}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5]))|(([0-9])|([1-9]([0-9]{1,8}))|([1]([0-9]{1,9}))|([2][0]([0-9]{1,8}))|([2][1][0-3]([0-9]{1,7}))|([2][1][4][0-6]([0-9]{1,6}))|([2][1][4][7][0-3]([0-9]{1,5}))|([2][1][4][7][4][0-7]([0-9]{1,4}))|([2][1][4][7][4][8][0-2]([0-9]{1,3}))|([2][1][4][7][4][8][3][0-5]([0-9]{1,2}))|([2][1][4][7][4][8][3][6][0-3][0-9])|([2][1][4][7][4][8][3][6][4][0-7]))

	**This Instance Keyword Arg Tuple**:
		:param area_range: kwarg tuple.
		:type area_range: (range_address, range_effect, range_cost).

		:param range_address: A:B::C:D/LEN;; IPv6 address to match
		:type range_address: (unicode)
		
		.. note::
			* pattern - ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(/(([0-9])|([0-9]{2})|(1[0-1][0-9])|(12[0-8])))

		:param range_effect: Advertise/Do not advertise this type-3 summarization
		:type range_effect: (unicode)
		
		.. note::
			* enum - [u'advertise', u'not-advertise']

		:param range_cost: Configure area range cost
		:type range_cost: (long)
		
		.. note::
			* range - ['0..4294967295']

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = [('pybind.nos.v6_0_2b.rbridge_id', 'rbridge_id'), ('pybind.nos.v6_0_2b.rbridge_id.ipv6.router.ospf', u'ospf'), ('pybind.nos.v6_0_2b.rbridge_id.ipv6.router.ospf.area', u'area'), ('pybind.nos.v7_0_1a.rbridge_id', 'rbridge_id'), ('pybind.nos.v7_0_1a.rbridge_id.ipv6.router.ospf', u'ospf'), ('pybind.nos.v7_0_1a.rbridge_id.ipv6.router.ospf.area', u'area'), ('pybind.nos.v7_1_0.rbridge_id', 'rbridge_id'), ('pybind.nos.v7_1_0.rbridge_id.ipv6.router.ospf', u'ospf'), ('pybind.nos.v7_1_0.rbridge_id.ipv6.router.ospf.area', u'area')]
    bindings_list = [('pybind.nos.v6_0_2b.rbridge_id.ipv6.router.ospf.area.area_range', 'pybind.nos.v6_0_2b.brocade_rbridge', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.rbridge_id.ipv6.router.ospf.area.area_range', 'pybind.nos.v7_0_1a.brocade_rbridge', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.rbridge_id.ipv6.router.ospf.area.area_range', 'pybind.nos.v7_1_0.brocade_rbridge', 'pybind.nos.v7_1_0')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'rbridge_id', 'extra_keyval': ''}, {'keyval': 'vrf', 'extra_keyval': ''}, {'keyval': 'area_id', 'extra_keyval': ''}, {'keyval': 'rbridge_id', 'extra_keyval': ''}, {'keyval': 'vrf', 'extra_keyval': ''}, {'keyval': 'area_id', 'extra_keyval': ''}, {'keyval': 'rbridge_id', 'extra_keyval': ''}, {'keyval': 'vrf', 'extra_keyval': ''}, {'keyval': 'area_id', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'area_range', 'keyval': 'range_address', 'extra_keyval': 'range_address, range_effect, range_cost'}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, rbridge_id=rbridge_id, ospf=ospf, area=area, area_range=area_range)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def rbridge_id_ipv6_router_ospf_area_virtual_link_delete(self, rbridge_id=None, ospf=None, area=None, virtual_link=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		NOS: 6.0.2b, 7.0.1a, 7.1.0    

	**Parent Instance Keyword Arg Tuple(s)**:
		:param rbridge_id: kwarg tuple.
		:type rbridge_id: (rbridge_id).

		:param rbridge_id: tuple arg.
		:type rbridge_id: (long)
		
		.. note::
			* range - ['0..4294967295']

		:param ospf: kwarg tuple.
		:type ospf: (vrf).

		:param vrf: OSPF instance for the VRF 
		:type vrf: (unicode)
		
		.. note::
			* length - [u'1..32']
			* pattern - ((([a-zA-Z0-9_]([a-zA-Z0-9\-_]){0,61})?[a-zA-Z0-9]\.)*([a-zA-Z0-9_]([a-zA-Z0-9\-_]){0,61})?[a-zA-Z0-9]\.?)|\.

		:param area: kwarg tuple.
		:type area: (area_id).

		:param area_id: tuple arg.
		:type area_id: (unicode)
		
		.. note::
			* pattern - ((([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.)(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){2}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5]))|(([0-9])|([1-9]([0-9]{1,8}))|([1]([0-9]{1,9}))|([2][0]([0-9]{1,8}))|([2][1][0-3]([0-9]{1,7}))|([2][1][4][0-6]([0-9]{1,6}))|([2][1][4][7][0-3]([0-9]{1,5}))|([2][1][4][7][4][0-7]([0-9]{1,4}))|([2][1][4][7][4][8][0-2]([0-9]{1,3}))|([2][1][4][7][4][8][3][0-5]([0-9]{1,2}))|([2][1][4][7][4][8][3][6][0-3][0-9])|([2][1][4][7][4][8][3][6][4][0-7]))

	**This Instance Keyword Arg Tuple**:
		:param virtual_link: kwarg tuple.
		:type virtual_link: (virtual_link_neighbor).

		:param virtual_link_neighbor: tuple arg.
		:type virtual_link_neighbor: (unicode)
		
		.. note::
			* pattern - (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = [('pybind.nos.v7_0_1a.rbridge_id', 'rbridge_id'), ('pybind.nos.v7_0_1a.rbridge_id.ipv6.router.ospf', u'ospf'), ('pybind.nos.v7_0_1a.rbridge_id.ipv6.router.ospf.area', u'area'), ('pybind.nos.v6_0_2b.rbridge_id', 'rbridge_id'), ('pybind.nos.v6_0_2b.rbridge_id.ipv6.router.ospf', u'ospf'), ('pybind.nos.v6_0_2b.rbridge_id.ipv6.router.ospf.area', u'area'), ('pybind.nos.v7_1_0.rbridge_id', 'rbridge_id'), ('pybind.nos.v7_1_0.rbridge_id.ipv6.router.ospf', u'ospf'), ('pybind.nos.v7_1_0.rbridge_id.ipv6.router.ospf.area', u'area')]
    bindings_list = [('pybind.nos.v6_0_2b.rbridge_id.ipv6.router.ospf.area.virtual_link', 'pybind.nos.v6_0_2b.brocade_rbridge', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.rbridge_id.ipv6.router.ospf.area.virtual_link', 'pybind.nos.v7_0_1a.brocade_rbridge', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.rbridge_id.ipv6.router.ospf.area.virtual_link', 'pybind.nos.v7_1_0.brocade_rbridge', 'pybind.nos.v7_1_0')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'rbridge_id', 'extra_keyval': ''}, {'keyval': 'vrf', 'extra_keyval': ''}, {'keyval': 'area_id', 'extra_keyval': ''}, {'keyval': 'rbridge_id', 'extra_keyval': ''}, {'keyval': 'vrf', 'extra_keyval': ''}, {'keyval': 'area_id', 'extra_keyval': ''}, {'keyval': 'rbridge_id', 'extra_keyval': ''}, {'keyval': 'vrf', 'extra_keyval': ''}, {'keyval': 'area_id', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'virtual_link', 'keyval': 'virtual_link_neighbor', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, rbridge_id=rbridge_id, ospf=ospf, area=area, virtual_link=virtual_link)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def rbridge_id_ipv6_router_ospf_distance_delete(self, rbridge_id=None, ospf=None, distance=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		NOS: 6.0.2b, 7.0.1a, 7.1.0    

	**Parent Instance Keyword Arg Tuple(s)**:
		:param rbridge_id: kwarg tuple.
		:type rbridge_id: (rbridge_id).

		:param rbridge_id: tuple arg.
		:type rbridge_id: (long)
		
		.. note::
			* range - ['0..4294967295']

		:param ospf: kwarg tuple.
		:type ospf: (vrf).

		:param vrf: OSPF instance for the VRF 
		:type vrf: (unicode)
		
		.. note::
			* length - [u'1..32']
			* pattern - ((([a-zA-Z0-9_]([a-zA-Z0-9\-_]){0,61})?[a-zA-Z0-9]\.)*([a-zA-Z0-9_]([a-zA-Z0-9\-_]){0,61})?[a-zA-Z0-9]\.?)|\.

	**This Instance Keyword Arg Tuple**:
		:param distance: kwarg tuple.
		:type distance: (route_type).

		:param route_type: The type of route propagation
		:type route_type: (unicode)
		
		.. note::
			* enum - [u'intra-area', u'external', u'inter-area']

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = [('pybind.nos.v7_1_0.rbridge_id', 'rbridge_id'), ('pybind.nos.v7_1_0.rbridge_id.ipv6.router.ospf', u'ospf'), ('pybind.nos.v7_0_1a.rbridge_id', 'rbridge_id'), ('pybind.nos.v7_0_1a.rbridge_id.ipv6.router.ospf', u'ospf'), ('pybind.nos.v6_0_2b.rbridge_id', 'rbridge_id'), ('pybind.nos.v6_0_2b.rbridge_id.ipv6.router.ospf', u'ospf')]
    bindings_list = [('pybind.nos.v6_0_2b.rbridge_id.ipv6.router.ospf.distance', 'pybind.nos.v6_0_2b.brocade_rbridge', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.rbridge_id.ipv6.router.ospf.distance', 'pybind.nos.v7_0_1a.brocade_rbridge', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.rbridge_id.ipv6.router.ospf.distance', 'pybind.nos.v7_1_0.brocade_rbridge', 'pybind.nos.v7_1_0')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'rbridge_id', 'extra_keyval': ''}, {'keyval': 'vrf', 'extra_keyval': ''}, {'keyval': 'rbridge_id', 'extra_keyval': ''}, {'keyval': 'vrf', 'extra_keyval': ''}, {'keyval': 'rbridge_id', 'extra_keyval': ''}, {'keyval': 'vrf', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'distance', 'keyval': 'route_type', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, rbridge_id=rbridge_id, ospf=ospf, distance=distance)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def rbridge_id_ipv6_router_ospf_summary_address_delete(self, rbridge_id=None, ospf=None, summary_address=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		NOS: 6.0.2b, 7.0.1a, 7.1.0    

	**Parent Instance Keyword Arg Tuple(s)**:
		:param rbridge_id: kwarg tuple.
		:type rbridge_id: (rbridge_id).

		:param rbridge_id: tuple arg.
		:type rbridge_id: (long)
		
		.. note::
			* range - ['0..4294967295']

		:param ospf: kwarg tuple.
		:type ospf: (vrf).

		:param vrf: OSPF instance for the VRF 
		:type vrf: (unicode)
		
		.. note::
			* length - [u'1..32']
			* pattern - ((([a-zA-Z0-9_]([a-zA-Z0-9\-_]){0,61})?[a-zA-Z0-9]\.)*([a-zA-Z0-9_]([a-zA-Z0-9\-_]){0,61})?[a-zA-Z0-9]\.?)|\.

	**This Instance Keyword Arg Tuple**:
		:param summary_address: kwarg tuple.
		:type summary_address: (summary_address_value).

		:param summary_address_value: tuple arg.
		:type summary_address_value: (unicode)
		
		.. note::
			* pattern - ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(/(([0-9])|([0-9]{2})|(1[0-1][0-9])|(12[0-8])))

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = [('pybind.nos.v7_0_1a.rbridge_id', 'rbridge_id'), ('pybind.nos.v7_0_1a.rbridge_id.ipv6.router.ospf', u'ospf'), ('pybind.nos.v7_1_0.rbridge_id', 'rbridge_id'), ('pybind.nos.v7_1_0.rbridge_id.ipv6.router.ospf', u'ospf'), ('pybind.nos.v6_0_2b.rbridge_id', 'rbridge_id'), ('pybind.nos.v6_0_2b.rbridge_id.ipv6.router.ospf', u'ospf')]
    bindings_list = [('pybind.nos.v6_0_2b.rbridge_id.ipv6.router.ospf.summary_address', 'pybind.nos.v6_0_2b.brocade_rbridge', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.rbridge_id.ipv6.router.ospf.summary_address', 'pybind.nos.v7_0_1a.brocade_rbridge', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.rbridge_id.ipv6.router.ospf.summary_address', 'pybind.nos.v7_1_0.brocade_rbridge', 'pybind.nos.v7_1_0')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'rbridge_id', 'extra_keyval': ''}, {'keyval': 'vrf', 'extra_keyval': ''}, {'keyval': 'rbridge_id', 'extra_keyval': ''}, {'keyval': 'vrf', 'extra_keyval': ''}, {'keyval': 'rbridge_id', 'extra_keyval': ''}, {'keyval': 'vrf', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'summary_address', 'keyval': 'summary_address_value', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, rbridge_id=rbridge_id, ospf=ospf, summary_address=summary_address)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def rbridge_id_linecard_delete(self, rbridge_id=None, linecards=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		NOS: 6.0.2b, 7.0.1a, 7.1.0    

	**Parent Instance Keyword Arg Tuple(s)**:
		:param rbridge_id: kwarg tuple.
		:type rbridge_id: (rbridge_id).

		:param rbridge_id: tuple arg.
		:type rbridge_id: (long)
		
		.. note::
			* range - ['0..4294967295']

	**This Instance Keyword Arg Tuple**:
		:param linecards: kwarg tuple.
		:type linecards: (linecardName, linecardType).

		:param linecardName: tuple arg.
		:type linecardName: (unicode)
		
		.. note::
			* pattern - ([1-9]|[1][0-6])

		:param linecardType: tuple arg.
		:type linecardType: (unicode)
		
		.. note::
			* enum - [u'LC27X40G', u'LC48X10G', u'LC6X100G', u'LC48X10GT', u'LC12X40G', u'LC48X1G']

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = [('pybind.nos.v7_1_0.rbridge_id', 'rbridge_id'), ('pybind.nos.v6_0_2b.rbridge_id', 'rbridge_id'), ('pybind.nos.v7_0_1a.rbridge_id', 'rbridge_id')]
    bindings_list = [('pybind.nos.v6_0_2b.rbridge_id.global_lc_holder.linecard.linecards', 'pybind.nos.v6_0_2b.brocade_rbridge', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.rbridge_id.global_lc_holder.linecard.linecards', 'pybind.nos.v7_0_1a.brocade_rbridge', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.rbridge_id.global_lc_holder.linecard.linecards', 'pybind.nos.v7_1_0.brocade_rbridge', 'pybind.nos.v7_1_0')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'rbridge_id', 'extra_keyval': ''}, {'keyval': 'rbridge_id', 'extra_keyval': ''}, {'keyval': 'rbridge_id', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'linecards', 'keyval': 'linecardName', 'extra_keyval': 'linecardName, linecardType'}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, rbridge_id=rbridge_id, linecards=linecards)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def rbridge_id_maps_email_delete(self, rbridge_id=None, email_list=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		NOS: 6.0.2b, 7.0.1a, 7.1.0
		SLXOS: 16r.1.00b    

	**Parent Instance Keyword Arg Tuple(s)**:
		:param rbridge_id: kwarg tuple.
		:type rbridge_id: (rbridge_id).

		:param rbridge_id: tuple arg.
		:type rbridge_id: (long)
		
		.. note::
			* range - ['0..4294967295']

	**This Instance Keyword Arg Tuple**:
		:param email_list: kwarg tuple.
		:type email_list: (email).

		:param email: <email:string>  e-mail address for MAPS alerts
		:type email: (unicode)

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = [('pybind.nos.v7_0_1a.rbridge_id', 'rbridge_id'), ('pybind.slxos.v16r_1_00b.rbridge_id', 'rbridge_id'), ('pybind.nos.v7_1_0.rbridge_id', 'rbridge_id'), ('pybind.nos.v6_0_2b.rbridge_id', 'rbridge_id')]
    bindings_list = [('pybind.nos.v6_0_2b.rbridge_id.maps.email.email_list', 'pybind.nos.v6_0_2b.brocade_rbridge', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.rbridge_id.maps.email.email_list', 'pybind.nos.v7_0_1a.brocade_rbridge', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.rbridge_id.maps.email.email_list', 'pybind.nos.v7_1_0.brocade_rbridge', 'pybind.nos.v7_1_0'), ('pybind.slxos.v16r_1_00b.rbridge_id.maps.email.email_list', 'pybind.slxos.v16r_1_00b.brocade_rbridge', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'rbridge_id', 'extra_keyval': ''}, {'keyval': 'rbridge_id', 'extra_keyval': ''}, {'keyval': 'rbridge_id', 'extra_keyval': ''}, {'keyval': 'rbridge_id', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'email_list', 'keyval': 'email', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, rbridge_id=rbridge_id, email_list=email_list)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def rbridge_id_maps_group_delete(self, rbridge_id=None, logicalgroup=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		NOS: 7.0.1a, 7.1.0    

	**Parent Instance Keyword Arg Tuple(s)**:
		:param rbridge_id: kwarg tuple.
		:type rbridge_id: (rbridge_id).

		:param rbridge_id: tuple arg.
		:type rbridge_id: (long)
		
		.. note::
			* range - ['0..4294967295']

	**This Instance Keyword Arg Tuple**:
		:param logicalgroup: kwarg tuple.
		:type logicalgroup: (logicalgroupname, elementtype, members).

		:param logicalgroupname: Configure group name
		:type logicalgroupname: (unicode)

		:param elementtype: tuple arg.
		:type elementtype: (unicode)
		
		.. note::
			* enum - [u'interface', u'sfp']

		:param members: Configure memberlist
		:type members: (unicode)
		
		.. note::
			* length - [u'1..253']
			* pattern - (((([1-9]|[1-9][0-9]|1[0-9][0-9]|2[0-3][0-9])/)?(([0-9]|[1][0-6]))/([1-9]|[1-9][0-9]|[1-9][0-9][0-9]))((-([1-9]|[1-9][0-9]|[1-9][0-9][0-9]))?)(((,([1-9]|[1-9][0-9]|[1-9][0-9][0-9])(-([1-9]|[1-9][0-9]|[1-9][0-9][0-9]))?){1})+|((([1-9]|[1-9][0-9]|1[0-9][0-9]|2[0-3][0-9])/)?(([0-9]|[1][0-6]))/([1-9]|[1-9][0-9]|[1-9][0-9][0-9]))(-([1-9]|[1-9][0-9]|[1-9][0-9][0-9])){1}|((([1-9]|[1-9][0-9]|1[0-9][0-9]|2[0-3][0-9])/)?(([0-9]|[1][0-6]))/([1-9]|[1-9][0-9]|[1-9][0-9][0-9])(:((([1-4])(-([1-4]))?)(((,([1-4])(-([1-4]))?){1})+)|([1-4])(-([1-4]))))))*)(,(((([1-9]|[1-9][0-9]|1[0-9][0-9]|2[0-3][0-9])/)?(([0-9]|[1][0-6]))/([1-9]|[1-9][0-9]|[1-9][0-9][0-9]))((-([1-9]|[1-9][0-9]|[1-9][0-9][0-9]))?)(((,([1-9]|[1-9][0-9]|[1-9][0-9][0-9])(-([1-9]|[1-9][0-9]|[1-9][0-9][0-9]))?){1})+|((([1-9]|[1-9][0-9]|1[0-9][0-9]|2[0-3][0-9])/)?(([0-9]|[1][0-6]))/([1-9]|[1-9][0-9]|[1-9][0-9][0-9]))(-([1-9]|[1-9][0-9]|[1-9][0-9][0-9])){1}|((([1-9]|[1-9][0-9]|1[0-9][0-9]|2[0-3][0-9])/)?(([0-9]|[1][0-6]))/([1-9]|[1-9][0-9]|[1-9][0-9][0-9])(:((([1-4])(-([1-4]))?)(((,([1-4])(-([1-4]))?){1})+)|([1-4])(-([1-4]))))))*))*

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = [('pybind.nos.v7_0_1a.rbridge_id', 'rbridge_id'), ('pybind.nos.v7_1_0.rbridge_id', 'rbridge_id')]
    bindings_list = [('pybind.nos.v7_0_1a.rbridge_id.maps.logicalgroup', 'pybind.nos.v7_0_1a.brocade_rbridge', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.rbridge_id.maps.logicalgroup', 'pybind.nos.v7_1_0.brocade_rbridge', 'pybind.nos.v7_1_0')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'rbridge_id', 'extra_keyval': ''}, {'keyval': 'rbridge_id', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'logicalgroup', 'keyval': 'logicalgroupname', 'extra_keyval': 'logicalgroupname, elementtype, members'}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, rbridge_id=rbridge_id, logicalgroup=logicalgroup)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def rbridge_id_maps_policy_delete(self, rbridge_id=None, policy=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		NOS: 7.0.1a, 7.1.0    

	**Parent Instance Keyword Arg Tuple(s)**:
		:param rbridge_id: kwarg tuple.
		:type rbridge_id: (rbridge_id).

		:param rbridge_id: tuple arg.
		:type rbridge_id: (long)
		
		.. note::
			* range - ['0..4294967295']

	**This Instance Keyword Arg Tuple**:
		:param policy: kwarg tuple.
		:type policy: (policyname).

		:param policyname: Configure policy name
		:type policyname: (unicode)

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = [('pybind.nos.v7_1_0.rbridge_id', 'rbridge_id'), ('pybind.nos.v7_0_1a.rbridge_id', 'rbridge_id')]
    bindings_list = [('pybind.nos.v7_0_1a.rbridge_id.maps.policy', 'pybind.nos.v7_0_1a.brocade_rbridge', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.rbridge_id.maps.policy', 'pybind.nos.v7_1_0.brocade_rbridge', 'pybind.nos.v7_1_0')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'rbridge_id', 'extra_keyval': ''}, {'keyval': 'rbridge_id', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'policy', 'keyval': 'policyname', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, rbridge_id=rbridge_id, policy=policy)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def rbridge_id_maps_policy_rule_delete(self, rbridge_id=None, policy=None, ruleaction=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		NOS: 7.0.1a, 7.1.0    

	**Parent Instance Keyword Arg Tuple(s)**:
		:param rbridge_id: kwarg tuple.
		:type rbridge_id: (rbridge_id).

		:param rbridge_id: tuple arg.
		:type rbridge_id: (long)
		
		.. note::
			* range - ['0..4294967295']

		:param policy: kwarg tuple.
		:type policy: (policyname).

		:param policyname: Configure policy name
		:type policyname: (unicode)

	**This Instance Keyword Arg Tuple**:
		:param ruleaction: kwarg tuple.
		:type ruleaction: (policyrule, policyaction).

		:param policyrule: rule name
		:type policyrule: (unicode)

		:param policyaction: rule actions
		:type policyaction: (unicode)
		
		.. note::
			* enum - [u'NONE', u'SNMP', u'RASLOG', u'SW_CRITICAL', u'SFP_MARGINAL', u'EMAIL', u'SW_MARGINAL']

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = [('pybind.nos.v7_0_1a.rbridge_id', 'rbridge_id'), ('pybind.nos.v7_0_1a.rbridge_id.maps.policy', u'policy'), ('pybind.nos.v7_1_0.rbridge_id', 'rbridge_id'), ('pybind.nos.v7_1_0.rbridge_id.maps.policy', u'policy')]
    bindings_list = [('pybind.nos.v7_0_1a.rbridge_id.maps.policy.ruleaction', 'pybind.nos.v7_0_1a.brocade_rbridge', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.rbridge_id.maps.policy.ruleaction', 'pybind.nos.v7_1_0.brocade_rbridge', 'pybind.nos.v7_1_0')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'rbridge_id', 'extra_keyval': ''}, {'keyval': 'policyname', 'extra_keyval': ''}, {'keyval': 'rbridge_id', 'extra_keyval': ''}, {'keyval': 'policyname', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'ruleaction', 'keyval': 'policyrule', 'extra_keyval': 'policyrule, policyaction'}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, rbridge_id=rbridge_id, policy=policy, ruleaction=ruleaction)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def rbridge_id_maps_relay_delete(self, rbridge_id=None, relay=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		NOS: 6.0.2b, 7.0.1a, 7.1.0
		SLXOS: 16r.1.00b    

	**Parent Instance Keyword Arg Tuple(s)**:
		:param rbridge_id: kwarg tuple.
		:type rbridge_id: (rbridge_id).

		:param rbridge_id: tuple arg.
		:type rbridge_id: (long)
		
		.. note::
			* range - ['0..4294967295']

	**This Instance Keyword Arg Tuple**:
		:param relay: kwarg tuple.
		:type relay: (hostip).

		:param hostip: <IP:Address> IP address of Relay Host
		:type hostip: (unicode)
		
		.. note::
			* pattern - (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = [('pybind.nos.v6_0_2b.rbridge_id', 'rbridge_id'), ('pybind.slxos.v16r_1_00b.rbridge_id', 'rbridge_id'), ('pybind.nos.v7_1_0.rbridge_id', 'rbridge_id'), ('pybind.nos.v7_0_1a.rbridge_id', 'rbridge_id')]
    bindings_list = [('pybind.nos.v6_0_2b.rbridge_id.maps.relay', 'pybind.nos.v6_0_2b.brocade_rbridge', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.rbridge_id.maps.relay', 'pybind.nos.v7_0_1a.brocade_rbridge', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.rbridge_id.maps.relay', 'pybind.nos.v7_1_0.brocade_rbridge', 'pybind.nos.v7_1_0'), ('pybind.slxos.v16r_1_00b.rbridge_id.maps.relay', 'pybind.slxos.v16r_1_00b.brocade_rbridge', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'rbridge_id', 'extra_keyval': ''}, {'keyval': 'rbridge_id', 'extra_keyval': ''}, {'keyval': 'rbridge_id', 'extra_keyval': ''}, {'keyval': 'rbridge_id', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'relay', 'keyval': 'hostip', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, rbridge_id=rbridge_id, relay=relay)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def rbridge_id_maps_rule_delete(self, rbridge_id=None, rule=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		NOS: 7.0.1a, 7.1.0    

	**Parent Instance Keyword Arg Tuple(s)**:
		:param rbridge_id: kwarg tuple.
		:type rbridge_id: (rbridge_id).

		:param rbridge_id: tuple arg.
		:type rbridge_id: (long)
		
		.. note::
			* range - ['0..4294967295']

	**This Instance Keyword Arg Tuple**:
		:param rule: kwarg tuple.
		:type rule: (rulename, targetgroup, monitor, timebase, op, threshold).

		:param rulename: Configure rule name
		:type rulename: (unicode)

		:param targetgroup: target group for rule
		:type targetgroup: (unicode)

		:param monitor: tuple arg.
		:type monitor: (unicode)
		
		.. note::
			* enum - [u'MEMORY_USAGE', u'FLASH_USAGE', u'HA_SYNC', u'BAD_PWR', u'ETH_MGMT_PORT_STATE', u'BAD_FAN', u'CPU', u'SFP_TEMP', u'SEC_TELNET', u'TXP', u'TEMP', u'RX_SYM_ERR', u'CRCALN', u'VOLTAGE', u'SFP_STATE', u'WWN_DOWN', u'FAN_STATE', u'CURRENT', u'RX_ABN_FRAME', u'RXP', u'FAULTY_BLADE', u'WWN', u'BAD_TEMP', u'PS_STATE', u'SEC_LV', u'BLADE_STATE', u'DOWN_SFM']

		:param timebase: tuple arg.
		:type timebase: (unicode)
		
		.. note::
			* enum - [u'none', u'day', u'hour', u'min']

		:param op: tuple arg.
		:type op: (unicode)
		
		.. note::
			* enum - [u'gt', u'lt', u'le', u'eq', u'ge']

		:param threshold: threshold value
		:type threshold: (unicode)

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = [('pybind.nos.v7_0_1a.rbridge_id', 'rbridge_id'), ('pybind.nos.v7_1_0.rbridge_id', 'rbridge_id')]
    bindings_list = [('pybind.nos.v7_0_1a.rbridge_id.maps.rule', 'pybind.nos.v7_0_1a.brocade_rbridge', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.rbridge_id.maps.rule', 'pybind.nos.v7_1_0.brocade_rbridge', 'pybind.nos.v7_1_0')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'rbridge_id', 'extra_keyval': ''}, {'keyval': 'rbridge_id', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'rule', 'keyval': 'rulename', 'extra_keyval': 'rulename, targetgroup, monitor, timebase, op, threshold'}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, rbridge_id=rbridge_id, rule=rule)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def rbridge_id_openflow_logical_instance_delete(self, rbridge_id=None, logical_instance=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		NOS: 6.0.2b, 7.0.1a, 7.1.0    

	**Parent Instance Keyword Arg Tuple(s)**:
		:param rbridge_id: kwarg tuple.
		:type rbridge_id: (rbridge_id).

		:param rbridge_id: tuple arg.
		:type rbridge_id: (long)
		
		.. note::
			* range - ['0..4294967295']

	**This Instance Keyword Arg Tuple**:
		:param logical_instance: kwarg tuple.
		:type logical_instance: (instance_id).

		:param instance_id: tuple arg.
		:type instance_id: (long)
		
		.. note::
			* range - ['0..4294967295']

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = [('pybind.nos.v7_1_0.rbridge_id', 'rbridge_id'), ('pybind.nos.v7_0_1a.rbridge_id', 'rbridge_id'), ('pybind.nos.v6_0_2b.rbridge_id', 'rbridge_id')]
    bindings_list = [('pybind.nos.v6_0_2b.rbridge_id.openflow.logical_instance', 'pybind.nos.v6_0_2b.brocade_rbridge', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.rbridge_id.openflow.logical_instance', 'pybind.nos.v7_0_1a.brocade_rbridge', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.rbridge_id.openflow.logical_instance', 'pybind.nos.v7_1_0.brocade_rbridge', 'pybind.nos.v7_1_0')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'rbridge_id', 'extra_keyval': ''}, {'keyval': 'rbridge_id', 'extra_keyval': ''}, {'keyval': 'rbridge_id', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'logical_instance', 'keyval': 'instance_id', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, rbridge_id=rbridge_id, logical_instance=logical_instance)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def rbridge_id_openflow_logical_instance_controller_delete(self, rbridge_id=None, logical_instance=None, controller=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		NOS: 6.0.2b, 7.0.1a, 7.1.0    

	**Parent Instance Keyword Arg Tuple(s)**:
		:param rbridge_id: kwarg tuple.
		:type rbridge_id: (rbridge_id).

		:param rbridge_id: tuple arg.
		:type rbridge_id: (long)
		
		.. note::
			* range - ['0..4294967295']

		:param logical_instance: kwarg tuple.
		:type logical_instance: (instance_id).

		:param instance_id: tuple arg.
		:type instance_id: (long)
		
		.. note::
			* range - ['0..4294967295']

	**This Instance Keyword Arg Tuple**:
		:param controller: kwarg tuple.
		:type controller: (controller_name).

		:param controller_name: OpenFlow controller name
		:type controller_name: (unicode)
		
		.. note::
			* pattern - [-_a-zA-Z0-9]{1,32}

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = [('pybind.nos.v6_0_2b.rbridge_id', 'rbridge_id'), ('pybind.nos.v6_0_2b.rbridge_id.openflow.logical_instance', u'logical_instance'), ('pybind.nos.v7_1_0.rbridge_id', 'rbridge_id'), ('pybind.nos.v7_1_0.rbridge_id.openflow.logical_instance', u'logical_instance'), ('pybind.nos.v7_0_1a.rbridge_id', 'rbridge_id'), ('pybind.nos.v7_0_1a.rbridge_id.openflow.logical_instance', u'logical_instance')]
    bindings_list = [('pybind.nos.v6_0_2b.rbridge_id.openflow.logical_instance.controller', 'pybind.nos.v6_0_2b.brocade_rbridge', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.rbridge_id.openflow.logical_instance.controller', 'pybind.nos.v7_0_1a.brocade_rbridge', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.rbridge_id.openflow.logical_instance.controller', 'pybind.nos.v7_1_0.brocade_rbridge', 'pybind.nos.v7_1_0')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'rbridge_id', 'extra_keyval': ''}, {'keyval': 'instance_id', 'extra_keyval': ''}, {'keyval': 'rbridge_id', 'extra_keyval': ''}, {'keyval': 'instance_id', 'extra_keyval': ''}, {'keyval': 'rbridge_id', 'extra_keyval': ''}, {'keyval': 'instance_id', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'controller', 'keyval': 'controller_name', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, rbridge_id=rbridge_id, logical_instance=logical_instance, controller=controller)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def rbridge_id_openflow_logical_instance_version_delete(self, rbridge_id=None, logical_instance=None, version=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		NOS: 6.0.2b, 7.0.1a, 7.1.0    

	**Parent Instance Keyword Arg Tuple(s)**:
		:param rbridge_id: kwarg tuple.
		:type rbridge_id: (rbridge_id).

		:param rbridge_id: tuple arg.
		:type rbridge_id: (long)
		
		.. note::
			* range - ['0..4294967295']

		:param logical_instance: kwarg tuple.
		:type logical_instance: (instance_id).

		:param instance_id: tuple arg.
		:type instance_id: (long)
		
		.. note::
			* range - ['0..4294967295']

	**This Instance Keyword Arg Tuple**:
		:param version: kwarg tuple.
		:type version: (version_name).

		:param version_name: tuple arg.
		:type version_name: (unicode)
		
		.. note::
			* enum - [u'ofv130']

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = [('pybind.nos.v7_1_0.rbridge_id', 'rbridge_id'), ('pybind.nos.v7_1_0.rbridge_id.openflow.logical_instance', u'logical_instance'), ('pybind.nos.v7_0_1a.rbridge_id', 'rbridge_id'), ('pybind.nos.v7_0_1a.rbridge_id.openflow.logical_instance', u'logical_instance'), ('pybind.nos.v6_0_2b.rbridge_id', 'rbridge_id'), ('pybind.nos.v6_0_2b.rbridge_id.openflow.logical_instance', u'logical_instance')]
    bindings_list = [('pybind.nos.v6_0_2b.rbridge_id.openflow.logical_instance.version', 'pybind.nos.v6_0_2b.brocade_rbridge', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.rbridge_id.openflow.logical_instance.version', 'pybind.nos.v7_0_1a.brocade_rbridge', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.rbridge_id.openflow.logical_instance.version', 'pybind.nos.v7_1_0.brocade_rbridge', 'pybind.nos.v7_1_0')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'rbridge_id', 'extra_keyval': ''}, {'keyval': 'instance_id', 'extra_keyval': ''}, {'keyval': 'rbridge_id', 'extra_keyval': ''}, {'keyval': 'instance_id', 'extra_keyval': ''}, {'keyval': 'rbridge_id', 'extra_keyval': ''}, {'keyval': 'instance_id', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'version', 'keyval': 'version_name', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, rbridge_id=rbridge_id, logical_instance=logical_instance, version=version)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def rbridge_id_route_map_delete(self, rbridge_id=None, route_map=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		NOS: 6.0.2b, 7.0.1a, 7.1.0    

	**Parent Instance Keyword Arg Tuple(s)**:
		:param rbridge_id: kwarg tuple.
		:type rbridge_id: (rbridge_id).

		:param rbridge_id: tuple arg.
		:type rbridge_id: (long)
		
		.. note::
			* range - ['0..4294967295']

	**This Instance Keyword Arg Tuple**:
		:param route_map: kwarg tuple.
		:type route_map: (name, action_rm, instance).

		:param name: Word:1-63;;Route map name
		:type name: (unicode)
		
		.. note::
			* pattern - [a-zA-Z]{1}([-a-zA-Z0-9\.\\\\@#\+\*\(\)=\{~\}%<>=$_\[\]\|]{0,62})

		:param action_rm: tuple arg.
		:type action_rm: (unicode)
		
		.. note::
			* enum - [u'receive', u'send']

		:param instance: tuple arg.
		:type instance: (int)
		
		.. note::
			* range - ['0..65535']

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = [('pybind.nos.v7_1_0.rbridge_id', 'rbridge_id'), ('pybind.nos.v6_0_2b.rbridge_id', 'rbridge_id'), ('pybind.nos.v7_0_1a.rbridge_id', 'rbridge_id')]
    bindings_list = [('pybind.nos.v6_0_2b.rbridge_id.route_map', 'pybind.nos.v6_0_2b.brocade_rbridge', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.rbridge_id.route_map', 'pybind.nos.v7_0_1a.brocade_rbridge', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.rbridge_id.route_map', 'pybind.nos.v7_1_0.brocade_rbridge', 'pybind.nos.v7_1_0')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'rbridge_id', 'extra_keyval': ''}, {'keyval': 'rbridge_id', 'extra_keyval': ''}, {'keyval': 'rbridge_id', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'route_map', 'keyval': 'name, action_rm, instance', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, rbridge_id=rbridge_id, route_map=route_map)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def rbridge_id_route_map_set_ip_delete(self, rbridge_id=None, route_map=None, next_hop=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		NOS: 6.0.2b, 7.0.1a, 7.1.0    

	**Parent Instance Keyword Arg Tuple(s)**:
		:param rbridge_id: kwarg tuple.
		:type rbridge_id: (rbridge_id).

		:param rbridge_id: tuple arg.
		:type rbridge_id: (long)
		
		.. note::
			* range - ['0..4294967295']

		:param route_map: kwarg tuple.
		:type route_map: (name, action_rm, instance).

		:param name: Word:1-63;;Route map name
		:type name: (unicode)
		
		.. note::
			* pattern - [a-zA-Z]{1}([-a-zA-Z0-9\.\\\\@#\+\*\(\)=\{~\}%<>=$_\[\]\|]{0,62})

		:param action_rm: tuple arg.
		:type action_rm: (unicode)
		
		.. note::
			* enum - [u'receive', u'send']

		:param instance: tuple arg.
		:type instance: (int)
		
		.. note::
			* range - ['0..65535']

	**This Instance Keyword Arg Tuple**:
		:param next_hop: kwarg tuple.
		:type next_hop: (next_hop).

		:param next_hop: tuple arg.
		:type next_hop: (unicode)
		
		.. note::
			* pattern - (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = [('pybind.nos.v6_0_2b.rbridge_id', 'rbridge_id'), ('pybind.nos.v6_0_2b.rbridge_id.route_map', u'route_map'), ('pybind.nos.v7_0_1a.rbridge_id', 'rbridge_id'), ('pybind.nos.v7_0_1a.rbridge_id.route_map', u'route_map'), ('pybind.nos.v6_0_2b.rbridge_id', 'rbridge_id'), ('pybind.nos.v6_0_2b.rbridge_id.route_map', u'route_map'), ('pybind.nos.v7_1_0.rbridge_id', 'rbridge_id'), ('pybind.nos.v7_1_0.rbridge_id.route_map', u'route_map'), ('pybind.nos.v7_1_0.rbridge_id', 'rbridge_id'), ('pybind.nos.v7_1_0.rbridge_id.route_map', u'route_map'), ('pybind.nos.v7_0_1a.rbridge_id', 'rbridge_id'), ('pybind.nos.v7_0_1a.rbridge_id.route_map', u'route_map')]
    bindings_list = [('pybind.nos.v6_0_2b.rbridge_id.route_map.content.set_.ip.next_ip.next_hop', 'pybind.nos.v6_0_2b.brocade_rbridge', 'pybind.nos.v6_0_2b'), ('pybind.nos.v6_0_2b.rbridge_id.route_map.content.set_.ip.next_vrf.next_vrf_list', 'pybind.nos.v6_0_2b.brocade_rbridge', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.rbridge_id.route_map.content.set_.ip.next_ip.next_hop', 'pybind.nos.v7_0_1a.brocade_rbridge', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_0_1a.rbridge_id.route_map.content.set_.ip.next_vrf.next_vrf_list', 'pybind.nos.v7_0_1a.brocade_rbridge', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.rbridge_id.route_map.content.set_.ip.next_ip.next_hop', 'pybind.nos.v7_1_0.brocade_rbridge', 'pybind.nos.v7_1_0'), ('pybind.nos.v7_1_0.rbridge_id.route_map.content.set_.ip.next_vrf.next_vrf_list', 'pybind.nos.v7_1_0.brocade_rbridge', 'pybind.nos.v7_1_0')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'rbridge_id', 'extra_keyval': ''}, {'keyval': 'name, action_rm, instance', 'extra_keyval': ''}, {'keyval': 'rbridge_id', 'extra_keyval': ''}, {'keyval': 'name, action_rm, instance', 'extra_keyval': ''}, {'keyval': 'rbridge_id', 'extra_keyval': ''}, {'keyval': 'name, action_rm, instance', 'extra_keyval': ''}, {'keyval': 'rbridge_id', 'extra_keyval': ''}, {'keyval': 'name, action_rm, instance', 'extra_keyval': ''}, {'keyval': 'rbridge_id', 'extra_keyval': ''}, {'keyval': 'name, action_rm, instance', 'extra_keyval': ''}, {'keyval': 'rbridge_id', 'extra_keyval': ''}, {'keyval': 'name, action_rm, instance', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'next_vrf_list', 'keyval': 'vrf, next_hop', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, rbridge_id=rbridge_id, route_map=route_map, next_hop=next_hop)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def rbridge_id_route_map_set_ip_global_delete(self, rbridge_id=None, route_map=None, next_global_hop=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		NOS: 6.0.2b, 7.0.1a, 7.1.0    

	**Parent Instance Keyword Arg Tuple(s)**:
		:param rbridge_id: kwarg tuple.
		:type rbridge_id: (rbridge_id).

		:param rbridge_id: tuple arg.
		:type rbridge_id: (long)
		
		.. note::
			* range - ['0..4294967295']

		:param route_map: kwarg tuple.
		:type route_map: (name, action_rm, instance).

		:param name: Word:1-63;;Route map name
		:type name: (unicode)
		
		.. note::
			* pattern - [a-zA-Z]{1}([-a-zA-Z0-9\.\\\\@#\+\*\(\)=\{~\}%<>=$_\[\]\|]{0,62})

		:param action_rm: tuple arg.
		:type action_rm: (unicode)
		
		.. note::
			* enum - [u'receive', u'send']

		:param instance: tuple arg.
		:type instance: (int)
		
		.. note::
			* range - ['0..65535']

	**This Instance Keyword Arg Tuple**:
		:param next_global_hop: kwarg tuple.
		:type next_global_hop: (next_hop).

		:param next_hop: tuple arg.
		:type next_hop: (unicode)
		
		.. note::
			* pattern - (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = [('pybind.nos.v7_1_0.rbridge_id', 'rbridge_id'), ('pybind.nos.v7_1_0.rbridge_id.route_map', u'route_map'), ('pybind.nos.v6_0_2b.rbridge_id', 'rbridge_id'), ('pybind.nos.v6_0_2b.rbridge_id.route_map', u'route_map'), ('pybind.nos.v7_0_1a.rbridge_id', 'rbridge_id'), ('pybind.nos.v7_0_1a.rbridge_id.route_map', u'route_map')]
    bindings_list = [('pybind.nos.v6_0_2b.rbridge_id.route_map.content.set_.ip.global_.next_global_hop', 'pybind.nos.v6_0_2b.brocade_rbridge', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.rbridge_id.route_map.content.set_.ip.global_.next_global_hop', 'pybind.nos.v7_0_1a.brocade_rbridge', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.rbridge_id.route_map.content.set_.ip.global_.next_global_hop', 'pybind.nos.v7_1_0.brocade_rbridge', 'pybind.nos.v7_1_0')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'rbridge_id', 'extra_keyval': ''}, {'keyval': 'name, action_rm, instance', 'extra_keyval': ''}, {'keyval': 'rbridge_id', 'extra_keyval': ''}, {'keyval': 'name, action_rm, instance', 'extra_keyval': ''}, {'keyval': 'rbridge_id', 'extra_keyval': ''}, {'keyval': 'name, action_rm, instance', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'next_global_hop', 'keyval': 'next_hop', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, rbridge_id=rbridge_id, route_map=route_map, next_global_hop=next_global_hop)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def rbridge_id_route_map_set_ipv6_delete(self, rbridge_id=None, route_map=None, next_hop=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		NOS: 6.0.2b, 7.0.1a, 7.1.0    

	**Parent Instance Keyword Arg Tuple(s)**:
		:param rbridge_id: kwarg tuple.
		:type rbridge_id: (rbridge_id).

		:param rbridge_id: tuple arg.
		:type rbridge_id: (long)
		
		.. note::
			* range - ['0..4294967295']

		:param route_map: kwarg tuple.
		:type route_map: (name, action_rm, instance).

		:param name: Word:1-63;;Route map name
		:type name: (unicode)
		
		.. note::
			* pattern - [a-zA-Z]{1}([-a-zA-Z0-9\.\\\\@#\+\*\(\)=\{~\}%<>=$_\[\]\|]{0,62})

		:param action_rm: tuple arg.
		:type action_rm: (unicode)
		
		.. note::
			* enum - [u'receive', u'send']

		:param instance: tuple arg.
		:type instance: (int)
		
		.. note::
			* range - ['0..65535']

	**This Instance Keyword Arg Tuple**:
		:param next_hop: kwarg tuple.
		:type next_hop: (next_hop).

		:param next_hop: tuple arg.
		:type next_hop: (unicode)
		
		.. note::
			* pattern - ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = [('pybind.nos.v7_1_0.rbridge_id', 'rbridge_id'), ('pybind.nos.v7_1_0.rbridge_id.route_map', u'route_map'), ('pybind.nos.v6_0_2b.rbridge_id', 'rbridge_id'), ('pybind.nos.v6_0_2b.rbridge_id.route_map', u'route_map'), ('pybind.nos.v7_0_1a.rbridge_id', 'rbridge_id'), ('pybind.nos.v7_0_1a.rbridge_id.route_map', u'route_map'), ('pybind.nos.v7_0_1a.rbridge_id', 'rbridge_id'), ('pybind.nos.v7_0_1a.rbridge_id.route_map', u'route_map'), ('pybind.nos.v6_0_2b.rbridge_id', 'rbridge_id'), ('pybind.nos.v6_0_2b.rbridge_id.route_map', u'route_map'), ('pybind.nos.v7_1_0.rbridge_id', 'rbridge_id'), ('pybind.nos.v7_1_0.rbridge_id.route_map', u'route_map')]
    bindings_list = [('pybind.nos.v6_0_2b.rbridge_id.route_map.content.set_.ipv6.next_ip.next_hop', 'pybind.nos.v6_0_2b.brocade_rbridge', 'pybind.nos.v6_0_2b'), ('pybind.nos.v6_0_2b.rbridge_id.route_map.content.set_.ipv6.next_vrf.next_vrf_list', 'pybind.nos.v6_0_2b.brocade_rbridge', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.rbridge_id.route_map.content.set_.ipv6.next_ip.next_hop', 'pybind.nos.v7_0_1a.brocade_rbridge', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_0_1a.rbridge_id.route_map.content.set_.ipv6.next_vrf.next_vrf_list', 'pybind.nos.v7_0_1a.brocade_rbridge', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.rbridge_id.route_map.content.set_.ipv6.next_ip.next_hop', 'pybind.nos.v7_1_0.brocade_rbridge', 'pybind.nos.v7_1_0'), ('pybind.nos.v7_1_0.rbridge_id.route_map.content.set_.ipv6.next_vrf.next_vrf_list', 'pybind.nos.v7_1_0.brocade_rbridge', 'pybind.nos.v7_1_0')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'rbridge_id', 'extra_keyval': ''}, {'keyval': 'name, action_rm, instance', 'extra_keyval': ''}, {'keyval': 'rbridge_id', 'extra_keyval': ''}, {'keyval': 'name, action_rm, instance', 'extra_keyval': ''}, {'keyval': 'rbridge_id', 'extra_keyval': ''}, {'keyval': 'name, action_rm, instance', 'extra_keyval': ''}, {'keyval': 'rbridge_id', 'extra_keyval': ''}, {'keyval': 'name, action_rm, instance', 'extra_keyval': ''}, {'keyval': 'rbridge_id', 'extra_keyval': ''}, {'keyval': 'name, action_rm, instance', 'extra_keyval': ''}, {'keyval': 'rbridge_id', 'extra_keyval': ''}, {'keyval': 'name, action_rm, instance', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'next_hop', 'keyval': 'next_hop', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, rbridge_id=rbridge_id, route_map=route_map, next_hop=next_hop)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def rbridge_id_route_map_set_ipv6_global_delete(self, rbridge_id=None, route_map=None, next_global_hop=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		NOS: 6.0.2b, 7.0.1a, 7.1.0    

	**Parent Instance Keyword Arg Tuple(s)**:
		:param rbridge_id: kwarg tuple.
		:type rbridge_id: (rbridge_id).

		:param rbridge_id: tuple arg.
		:type rbridge_id: (long)
		
		.. note::
			* range - ['0..4294967295']

		:param route_map: kwarg tuple.
		:type route_map: (name, action_rm, instance).

		:param name: Word:1-63;;Route map name
		:type name: (unicode)
		
		.. note::
			* pattern - [a-zA-Z]{1}([-a-zA-Z0-9\.\\\\@#\+\*\(\)=\{~\}%<>=$_\[\]\|]{0,62})

		:param action_rm: tuple arg.
		:type action_rm: (unicode)
		
		.. note::
			* enum - [u'receive', u'send']

		:param instance: tuple arg.
		:type instance: (int)
		
		.. note::
			* range - ['0..65535']

	**This Instance Keyword Arg Tuple**:
		:param next_global_hop: kwarg tuple.
		:type next_global_hop: (next_hop).

		:param next_hop: tuple arg.
		:type next_hop: (unicode)
		
		.. note::
			* pattern - ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = [('pybind.nos.v7_1_0.rbridge_id', 'rbridge_id'), ('pybind.nos.v7_1_0.rbridge_id.route_map', u'route_map'), ('pybind.nos.v6_0_2b.rbridge_id', 'rbridge_id'), ('pybind.nos.v6_0_2b.rbridge_id.route_map', u'route_map'), ('pybind.nos.v7_0_1a.rbridge_id', 'rbridge_id'), ('pybind.nos.v7_0_1a.rbridge_id.route_map', u'route_map')]
    bindings_list = [('pybind.nos.v6_0_2b.rbridge_id.route_map.content.set_.ipv6.global_.next_global_hop', 'pybind.nos.v6_0_2b.brocade_rbridge', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.rbridge_id.route_map.content.set_.ipv6.global_.next_global_hop', 'pybind.nos.v7_0_1a.brocade_rbridge', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.rbridge_id.route_map.content.set_.ipv6.global_.next_global_hop', 'pybind.nos.v7_1_0.brocade_rbridge', 'pybind.nos.v7_1_0')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'rbridge_id', 'extra_keyval': ''}, {'keyval': 'name, action_rm, instance', 'extra_keyval': ''}, {'keyval': 'rbridge_id', 'extra_keyval': ''}, {'keyval': 'name, action_rm, instance', 'extra_keyval': ''}, {'keyval': 'rbridge_id', 'extra_keyval': ''}, {'keyval': 'name, action_rm, instance', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'next_global_hop', 'keyval': 'next_hop', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, rbridge_id=rbridge_id, route_map=route_map, next_global_hop=next_global_hop)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def rbridge_id_router_bgp_address_family_ipv4_unicast_aggregate_address_delete(self, rbridge_id=None, aggregate_address=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		NOS: 6.0.2b, 7.0.1a, 7.1.0    

	**Parent Instance Keyword Arg Tuple(s)**:
		:param rbridge_id: kwarg tuple.
		:type rbridge_id: (rbridge_id).

		:param rbridge_id: tuple arg.
		:type rbridge_id: (long)
		
		.. note::
			* range - ['0..4294967295']

	**This Instance Keyword Arg Tuple**:
		:param aggregate_address: kwarg tuple.
		:type aggregate_address: (aggregate_ip_prefix).

		:param aggregate_ip_prefix: tuple arg.
		:type aggregate_ip_prefix: (unicode)
		
		.. note::
			* pattern - (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])/(([0-9])|([1-2][0-9])|(3[0-2]))

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = [('pybind.nos.v6_0_2b.rbridge_id', 'rbridge_id'), ('pybind.nos.v7_1_0.rbridge_id', 'rbridge_id'), ('pybind.nos.v7_0_1a.rbridge_id', 'rbridge_id')]
    bindings_list = [('pybind.nos.v6_0_2b.rbridge_id.router.router_bgp.address_family.ipv4.ipv4_unicast.default_vrf.aggregate_address', 'pybind.nos.v6_0_2b.brocade_rbridge', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.rbridge_id.router.router_bgp.address_family.ipv4.ipv4_unicast.default_vrf.aggregate_address', 'pybind.nos.v7_0_1a.brocade_rbridge', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.rbridge_id.router.router_bgp.address_family.ipv4.ipv4_unicast.default_vrf.aggregate_address', 'pybind.nos.v7_1_0.brocade_rbridge', 'pybind.nos.v7_1_0')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'rbridge_id', 'extra_keyval': ''}, {'keyval': 'rbridge_id', 'extra_keyval': ''}, {'keyval': 'rbridge_id', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'aggregate_address', 'keyval': 'aggregate_ip_prefix', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, rbridge_id=rbridge_id, aggregate_address=aggregate_address)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def rbridge_id_router_bgp_address_family_ipv4_unicast_neighbor_delete(self, rbridge_id=None, af_ipv4_neighbor_address=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		NOS: 6.0.2b, 7.0.1a, 7.1.0    

	**Parent Instance Keyword Arg Tuple(s)**:
		:param rbridge_id: kwarg tuple.
		:type rbridge_id: (rbridge_id).

		:param rbridge_id: tuple arg.
		:type rbridge_id: (long)
		
		.. note::
			* range - ['0..4294967295']

	**This Instance Keyword Arg Tuple**:
		:param af_ipv4_neighbor_address: kwarg tuple.
		:type af_ipv4_neighbor_address: (af_ipv4_neighbor_address).

		:param af_ipv4_neighbor_address: A.B.C.D;;Neighbor Address
		:type af_ipv4_neighbor_address: (unicode)
		
		.. note::
			* pattern - (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = [('pybind.nos.v7_0_1a.rbridge_id', 'rbridge_id'), ('pybind.nos.v7_1_0.rbridge_id', 'rbridge_id'), ('pybind.nos.v6_0_2b.rbridge_id', 'rbridge_id'), ('pybind.nos.v6_0_2b.rbridge_id', 'rbridge_id'), ('pybind.nos.v7_0_1a.rbridge_id', 'rbridge_id'), ('pybind.nos.v7_1_0.rbridge_id', 'rbridge_id')]
    bindings_list = [('pybind.nos.v6_0_2b.rbridge_id.router.router_bgp.address_family.ipv4.ipv4_unicast.default_vrf.neighbor.af_ipv4_neighbor_address_holder.af_ipv4_neighbor_address', 'pybind.nos.v6_0_2b.brocade_rbridge', 'pybind.nos.v6_0_2b'), ('pybind.nos.v6_0_2b.rbridge_id.router.router_bgp.address_family.ipv4.ipv4_unicast.default_vrf.neighbor.af_ipv4_neighbor_peergroup_holder.af_ipv4_neighbor_peergroup', 'pybind.nos.v6_0_2b.brocade_rbridge', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.rbridge_id.router.router_bgp.address_family.ipv4.ipv4_unicast.default_vrf.neighbor.af_ipv4_neighbor_address_holder.af_ipv4_neighbor_address', 'pybind.nos.v7_0_1a.brocade_rbridge', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_0_1a.rbridge_id.router.router_bgp.address_family.ipv4.ipv4_unicast.default_vrf.neighbor.af_ipv4_neighbor_peergroup_holder.af_ipv4_neighbor_peergroup', 'pybind.nos.v7_0_1a.brocade_rbridge', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.rbridge_id.router.router_bgp.address_family.ipv4.ipv4_unicast.default_vrf.neighbor.af_ipv4_neighbor_address_holder.af_ipv4_neighbor_address', 'pybind.nos.v7_1_0.brocade_rbridge', 'pybind.nos.v7_1_0'), ('pybind.nos.v7_1_0.rbridge_id.router.router_bgp.address_family.ipv4.ipv4_unicast.default_vrf.neighbor.af_ipv4_neighbor_peergroup_holder.af_ipv4_neighbor_peergroup', 'pybind.nos.v7_1_0.brocade_rbridge', 'pybind.nos.v7_1_0')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'rbridge_id', 'extra_keyval': ''}, {'keyval': 'rbridge_id', 'extra_keyval': ''}, {'keyval': 'rbridge_id', 'extra_keyval': ''}, {'keyval': 'rbridge_id', 'extra_keyval': ''}, {'keyval': 'rbridge_id', 'extra_keyval': ''}, {'keyval': 'rbridge_id', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'af_ipv4_neighbor_peergroup', 'keyval': 'af_ipv4_neighbor_peergroup_name', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, rbridge_id=rbridge_id, af_ipv4_neighbor_address=af_ipv4_neighbor_address)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def rbridge_id_router_bgp_address_family_ipv4_unicast_network_delete(self, rbridge_id=None, network=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		NOS: 6.0.2b, 7.0.1a, 7.1.0    

	**Parent Instance Keyword Arg Tuple(s)**:
		:param rbridge_id: kwarg tuple.
		:type rbridge_id: (rbridge_id).

		:param rbridge_id: tuple arg.
		:type rbridge_id: (long)
		
		.. note::
			* range - ['0..4294967295']

	**This Instance Keyword Arg Tuple**:
		:param network: kwarg tuple.
		:type network: (network_ipv4_address).

		:param network_ipv4_address: A.B.C.D/M IP address in dotted decimal/Mask
		:type network_ipv4_address: (unicode)
		
		.. note::
			* pattern - (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])/(([0-9])|([1-2][0-9])|(3[0-2]))

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = [('pybind.nos.v7_0_1a.rbridge_id', 'rbridge_id'), ('pybind.nos.v7_1_0.rbridge_id', 'rbridge_id'), ('pybind.nos.v6_0_2b.rbridge_id', 'rbridge_id')]
    bindings_list = [('pybind.nos.v6_0_2b.rbridge_id.router.router_bgp.address_family.ipv4.ipv4_unicast.default_vrf.network', 'pybind.nos.v6_0_2b.brocade_rbridge', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.rbridge_id.router.router_bgp.address_family.ipv4.ipv4_unicast.default_vrf.network', 'pybind.nos.v7_0_1a.brocade_rbridge', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.rbridge_id.router.router_bgp.address_family.ipv4.ipv4_unicast.default_vrf.network', 'pybind.nos.v7_1_0.brocade_rbridge', 'pybind.nos.v7_1_0')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'rbridge_id', 'extra_keyval': ''}, {'keyval': 'rbridge_id', 'extra_keyval': ''}, {'keyval': 'rbridge_id', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'network', 'keyval': 'network_ipv4_address', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, rbridge_id=rbridge_id, network=network)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def rbridge_id_router_bgp_address_family_ipv4_unicast_static_network_delete(self, rbridge_id=None, static_network=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		NOS: 6.0.2b, 7.0.1a, 7.1.0    

	**Parent Instance Keyword Arg Tuple(s)**:
		:param rbridge_id: kwarg tuple.
		:type rbridge_id: (rbridge_id).

		:param rbridge_id: tuple arg.
		:type rbridge_id: (long)
		
		.. note::
			* range - ['0..4294967295']

	**This Instance Keyword Arg Tuple**:
		:param static_network: kwarg tuple.
		:type static_network: (static_network_address).

		:param static_network_address: A.B.C.D/M IP address in dotted decimal/Mask
		:type static_network_address: (unicode)
		
		.. note::
			* pattern - (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])/(([0-9])|([1-2][0-9])|(3[0-2]))

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = [('pybind.nos.v7_0_1a.rbridge_id', 'rbridge_id'), ('pybind.nos.v7_1_0.rbridge_id', 'rbridge_id'), ('pybind.nos.v6_0_2b.rbridge_id', 'rbridge_id')]
    bindings_list = [('pybind.nos.v6_0_2b.rbridge_id.router.router_bgp.address_family.ipv4.ipv4_unicast.default_vrf.static_network', 'pybind.nos.v6_0_2b.brocade_rbridge', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.rbridge_id.router.router_bgp.address_family.ipv4.ipv4_unicast.default_vrf.static_network', 'pybind.nos.v7_0_1a.brocade_rbridge', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.rbridge_id.router.router_bgp.address_family.ipv4.ipv4_unicast.default_vrf.static_network', 'pybind.nos.v7_1_0.brocade_rbridge', 'pybind.nos.v7_1_0')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'rbridge_id', 'extra_keyval': ''}, {'keyval': 'rbridge_id', 'extra_keyval': ''}, {'keyval': 'rbridge_id', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'static_network', 'keyval': 'static_network_address', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, rbridge_id=rbridge_id, static_network=static_network)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def rbridge_id_router_bgp_address_family_ipv4_unicast_vrf_delete(self, rbridge_id=None, af_vrf=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		NOS: 6.0.2b, 7.0.1a, 7.1.0    

	**Parent Instance Keyword Arg Tuple(s)**:
		:param rbridge_id: kwarg tuple.
		:type rbridge_id: (rbridge_id).

		:param rbridge_id: tuple arg.
		:type rbridge_id: (long)
		
		.. note::
			* range - ['0..4294967295']

	**This Instance Keyword Arg Tuple**:
		:param af_vrf: kwarg tuple.
		:type af_vrf: (af_vrf_name).

		:param af_vrf_name: VRF name
		:type af_vrf_name: (unicode)
		
		.. note::
			* length - [u'1..255']

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = [('pybind.nos.v7_1_0.rbridge_id', 'rbridge_id'), ('pybind.nos.v7_0_1a.rbridge_id', 'rbridge_id'), ('pybind.nos.v6_0_2b.rbridge_id', 'rbridge_id')]
    bindings_list = [('pybind.nos.v6_0_2b.rbridge_id.router.router_bgp.address_family.ipv4.ipv4_unicast.af_vrf', 'pybind.nos.v6_0_2b.brocade_rbridge', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.rbridge_id.router.router_bgp.address_family.ipv4.ipv4_unicast.af_vrf', 'pybind.nos.v7_0_1a.brocade_rbridge', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.rbridge_id.router.router_bgp.address_family.ipv4.ipv4_unicast.af_vrf', 'pybind.nos.v7_1_0.brocade_rbridge', 'pybind.nos.v7_1_0')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'rbridge_id', 'extra_keyval': ''}, {'keyval': 'rbridge_id', 'extra_keyval': ''}, {'keyval': 'rbridge_id', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'af_vrf', 'keyval': 'af_vrf_name', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, rbridge_id=rbridge_id, af_vrf=af_vrf)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def rbridge_id_router_bgp_address_family_ipv4_unicast_vrf_aggregate_address_delete(self, rbridge_id=None, af_vrf=None, aggregate_address=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		NOS: 6.0.2b, 7.0.1a, 7.1.0    

	**Parent Instance Keyword Arg Tuple(s)**:
		:param rbridge_id: kwarg tuple.
		:type rbridge_id: (rbridge_id).

		:param rbridge_id: tuple arg.
		:type rbridge_id: (long)
		
		.. note::
			* range - ['0..4294967295']

		:param af_vrf: kwarg tuple.
		:type af_vrf: (af_vrf_name).

		:param af_vrf_name: VRF name
		:type af_vrf_name: (unicode)
		
		.. note::
			* length - [u'1..255']

	**This Instance Keyword Arg Tuple**:
		:param aggregate_address: kwarg tuple.
		:type aggregate_address: (aggregate_ip_prefix).

		:param aggregate_ip_prefix: tuple arg.
		:type aggregate_ip_prefix: (unicode)
		
		.. note::
			* pattern - (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])/(([0-9])|([1-2][0-9])|(3[0-2]))

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = [('pybind.nos.v7_1_0.rbridge_id', 'rbridge_id'), ('pybind.nos.v7_1_0.rbridge_id.router.router_bgp.address_family.ipv4.ipv4_unicast.af_vrf', u'af_vrf'), ('pybind.nos.v6_0_2b.rbridge_id', 'rbridge_id'), ('pybind.nos.v6_0_2b.rbridge_id.router.router_bgp.address_family.ipv4.ipv4_unicast.af_vrf', u'af_vrf'), ('pybind.nos.v7_0_1a.rbridge_id', 'rbridge_id'), ('pybind.nos.v7_0_1a.rbridge_id.router.router_bgp.address_family.ipv4.ipv4_unicast.af_vrf', u'af_vrf')]
    bindings_list = [('pybind.nos.v6_0_2b.rbridge_id.router.router_bgp.address_family.ipv4.ipv4_unicast.af_vrf.aggregate_address', 'pybind.nos.v6_0_2b.brocade_rbridge', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.rbridge_id.router.router_bgp.address_family.ipv4.ipv4_unicast.af_vrf.aggregate_address', 'pybind.nos.v7_0_1a.brocade_rbridge', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.rbridge_id.router.router_bgp.address_family.ipv4.ipv4_unicast.af_vrf.aggregate_address', 'pybind.nos.v7_1_0.brocade_rbridge', 'pybind.nos.v7_1_0')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'rbridge_id', 'extra_keyval': ''}, {'keyval': 'af_vrf_name', 'extra_keyval': ''}, {'keyval': 'rbridge_id', 'extra_keyval': ''}, {'keyval': 'af_vrf_name', 'extra_keyval': ''}, {'keyval': 'rbridge_id', 'extra_keyval': ''}, {'keyval': 'af_vrf_name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'aggregate_address', 'keyval': 'aggregate_ip_prefix', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, rbridge_id=rbridge_id, af_vrf=af_vrf, aggregate_address=aggregate_address)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def rbridge_id_router_bgp_address_family_ipv4_unicast_vrf_listen_range_delete(self, rbridge_id=None, af_vrf=None, listen_range=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		NOS: 7.1.0    

	**Parent Instance Keyword Arg Tuple(s)**:
		:param rbridge_id: kwarg tuple.
		:type rbridge_id: (rbridge_id).

		:param rbridge_id: tuple arg.
		:type rbridge_id: (long)
		
		.. note::
			* range - ['0..4294967295']

		:param af_vrf: kwarg tuple.
		:type af_vrf: (af_vrf_name).

		:param af_vrf_name: VRF name
		:type af_vrf_name: (unicode)
		
		.. note::
			* length - [u'1..255']

	**This Instance Keyword Arg Tuple**:
		:param listen_range: kwarg tuple.
		:type listen_range: (listen_range_prefix, peer_group, limit).

		:param listen_range_prefix: A.B.C.D/M IP address in dotted decimal/Mask
		:type listen_range_prefix: (unicode)
		
		.. note::
			* pattern - (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])/(([0-9])|([1-2][0-9])|(3[0-2]))

		:param peer_group: Peer group name
		:type peer_group: (unicode)
		
		.. note::
			* pattern - [a-zA-Z]{1}([-a-zA-Z0-9\\\\@#\+\*\(\)=\{~\}%<>=$_\[\]\|]{0,62})

		:param limit: Limit the neighbor
		:type limit: (long)
		
		.. note::
			* range - ['0..4294967295']

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = [('pybind.nos.v7_1_0.rbridge_id', 'rbridge_id'), ('pybind.nos.v7_1_0.rbridge_id.router.router_bgp.address_family.ipv4.ipv4_unicast.af_vrf', u'af_vrf')]
    bindings_list = [('pybind.nos.v7_1_0.rbridge_id.router.router_bgp.address_family.ipv4.ipv4_unicast.af_vrf.listen_range', 'pybind.nos.v7_1_0.brocade_rbridge', 'pybind.nos.v7_1_0')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'rbridge_id', 'extra_keyval': ''}, {'keyval': 'af_vrf_name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'listen_range', 'keyval': 'listen_range_prefix, peer_group', 'extra_keyval': 'listen_range_prefix, peer_group, limit'}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, rbridge_id=rbridge_id, af_vrf=af_vrf, listen_range=listen_range)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def rbridge_id_router_bgp_address_family_ipv4_unicast_vrf_neighbor_delete(self, rbridge_id=None, af_vrf=None, af_ipv4_neighbor_addr=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		NOS: 6.0.2b, 7.0.1a, 7.1.0    

	**Parent Instance Keyword Arg Tuple(s)**:
		:param rbridge_id: kwarg tuple.
		:type rbridge_id: (rbridge_id).

		:param rbridge_id: tuple arg.
		:type rbridge_id: (long)
		
		.. note::
			* range - ['0..4294967295']

		:param af_vrf: kwarg tuple.
		:type af_vrf: (af_vrf_name).

		:param af_vrf_name: VRF name
		:type af_vrf_name: (unicode)
		
		.. note::
			* length - [u'1..255']

	**This Instance Keyword Arg Tuple**:
		:param af_ipv4_neighbor_addr: kwarg tuple.
		:type af_ipv4_neighbor_addr: (af_ipv4_neighbor_address).

		:param af_ipv4_neighbor_address: A.B.C.D;;Neighbor Address
		:type af_ipv4_neighbor_address: (unicode)
		
		.. note::
			* pattern - (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = [('pybind.nos.v7_1_0.rbridge_id', 'rbridge_id'), ('pybind.nos.v7_1_0.rbridge_id.router.router_bgp.address_family.ipv4.ipv4_unicast.af_vrf', u'af_vrf'), ('pybind.nos.v7_0_1a.rbridge_id', 'rbridge_id'), ('pybind.nos.v7_0_1a.rbridge_id.router.router_bgp.address_family.ipv4.ipv4_unicast.af_vrf', u'af_vrf'), ('pybind.nos.v6_0_2b.rbridge_id', 'rbridge_id'), ('pybind.nos.v6_0_2b.rbridge_id.router.router_bgp.address_family.ipv4.ipv4_unicast.af_vrf', u'af_vrf')]
    bindings_list = [('pybind.nos.v6_0_2b.rbridge_id.router.router_bgp.address_family.ipv4.ipv4_unicast.af_vrf.neighbor.af_ipv4_vrf_neighbor_address_holder.af_ipv4_neighbor_addr', 'pybind.nos.v6_0_2b.brocade_rbridge', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.rbridge_id.router.router_bgp.address_family.ipv4.ipv4_unicast.af_vrf.neighbor.af_ipv4_vrf_neighbor_address_holder.af_ipv4_neighbor_addr', 'pybind.nos.v7_0_1a.brocade_rbridge', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.rbridge_id.router.router_bgp.address_family.ipv4.ipv4_unicast.af_vrf.neighbor.af_ipv4_vrf_neighbor_address_holder.af_ipv4_neighbor_addr', 'pybind.nos.v7_1_0.brocade_rbridge', 'pybind.nos.v7_1_0')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'rbridge_id', 'extra_keyval': ''}, {'keyval': 'af_vrf_name', 'extra_keyval': ''}, {'keyval': 'rbridge_id', 'extra_keyval': ''}, {'keyval': 'af_vrf_name', 'extra_keyval': ''}, {'keyval': 'rbridge_id', 'extra_keyval': ''}, {'keyval': 'af_vrf_name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'af_ipv4_neighbor_addr', 'keyval': 'af_ipv4_neighbor_address', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, rbridge_id=rbridge_id, af_vrf=af_vrf, af_ipv4_neighbor_addr=af_ipv4_neighbor_addr)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def rbridge_id_router_bgp_address_family_ipv4_unicast_vrf_network_delete(self, rbridge_id=None, af_vrf=None, network=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		NOS: 6.0.2b, 7.0.1a, 7.1.0    

	**Parent Instance Keyword Arg Tuple(s)**:
		:param rbridge_id: kwarg tuple.
		:type rbridge_id: (rbridge_id).

		:param rbridge_id: tuple arg.
		:type rbridge_id: (long)
		
		.. note::
			* range - ['0..4294967295']

		:param af_vrf: kwarg tuple.
		:type af_vrf: (af_vrf_name).

		:param af_vrf_name: VRF name
		:type af_vrf_name: (unicode)
		
		.. note::
			* length - [u'1..255']

	**This Instance Keyword Arg Tuple**:
		:param network: kwarg tuple.
		:type network: (network_ipv4_address).

		:param network_ipv4_address: A.B.C.D/M IP address in dotted decimal/Mask
		:type network_ipv4_address: (unicode)
		
		.. note::
			* pattern - (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])/(([0-9])|([1-2][0-9])|(3[0-2]))

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = [('pybind.nos.v7_1_0.rbridge_id', 'rbridge_id'), ('pybind.nos.v7_1_0.rbridge_id.router.router_bgp.address_family.ipv4.ipv4_unicast.af_vrf', u'af_vrf'), ('pybind.nos.v6_0_2b.rbridge_id', 'rbridge_id'), ('pybind.nos.v6_0_2b.rbridge_id.router.router_bgp.address_family.ipv4.ipv4_unicast.af_vrf', u'af_vrf'), ('pybind.nos.v7_0_1a.rbridge_id', 'rbridge_id'), ('pybind.nos.v7_0_1a.rbridge_id.router.router_bgp.address_family.ipv4.ipv4_unicast.af_vrf', u'af_vrf')]
    bindings_list = [('pybind.nos.v6_0_2b.rbridge_id.router.router_bgp.address_family.ipv4.ipv4_unicast.af_vrf.network', 'pybind.nos.v6_0_2b.brocade_rbridge', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.rbridge_id.router.router_bgp.address_family.ipv4.ipv4_unicast.af_vrf.network', 'pybind.nos.v7_0_1a.brocade_rbridge', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.rbridge_id.router.router_bgp.address_family.ipv4.ipv4_unicast.af_vrf.network', 'pybind.nos.v7_1_0.brocade_rbridge', 'pybind.nos.v7_1_0')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'rbridge_id', 'extra_keyval': ''}, {'keyval': 'af_vrf_name', 'extra_keyval': ''}, {'keyval': 'rbridge_id', 'extra_keyval': ''}, {'keyval': 'af_vrf_name', 'extra_keyval': ''}, {'keyval': 'rbridge_id', 'extra_keyval': ''}, {'keyval': 'af_vrf_name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'network', 'keyval': 'network_ipv4_address', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, rbridge_id=rbridge_id, af_vrf=af_vrf, network=network)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def rbridge_id_router_bgp_address_family_ipv4_unicast_vrf_static_network_delete(self, rbridge_id=None, af_vrf=None, static_network=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		NOS: 6.0.2b, 7.0.1a, 7.1.0    

	**Parent Instance Keyword Arg Tuple(s)**:
		:param rbridge_id: kwarg tuple.
		:type rbridge_id: (rbridge_id).

		:param rbridge_id: tuple arg.
		:type rbridge_id: (long)
		
		.. note::
			* range - ['0..4294967295']

		:param af_vrf: kwarg tuple.
		:type af_vrf: (af_vrf_name).

		:param af_vrf_name: VRF name
		:type af_vrf_name: (unicode)
		
		.. note::
			* length - [u'1..255']

	**This Instance Keyword Arg Tuple**:
		:param static_network: kwarg tuple.
		:type static_network: (static_network_address).

		:param static_network_address: A.B.C.D/M IP address in dotted decimal/Mask
		:type static_network_address: (unicode)
		
		.. note::
			* pattern - (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])/(([0-9])|([1-2][0-9])|(3[0-2]))

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = [('pybind.nos.v7_1_0.rbridge_id', 'rbridge_id'), ('pybind.nos.v7_1_0.rbridge_id.router.router_bgp.address_family.ipv4.ipv4_unicast.af_vrf', u'af_vrf'), ('pybind.nos.v6_0_2b.rbridge_id', 'rbridge_id'), ('pybind.nos.v6_0_2b.rbridge_id.router.router_bgp.address_family.ipv4.ipv4_unicast.af_vrf', u'af_vrf'), ('pybind.nos.v7_0_1a.rbridge_id', 'rbridge_id'), ('pybind.nos.v7_0_1a.rbridge_id.router.router_bgp.address_family.ipv4.ipv4_unicast.af_vrf', u'af_vrf')]
    bindings_list = [('pybind.nos.v6_0_2b.rbridge_id.router.router_bgp.address_family.ipv4.ipv4_unicast.af_vrf.static_network', 'pybind.nos.v6_0_2b.brocade_rbridge', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.rbridge_id.router.router_bgp.address_family.ipv4.ipv4_unicast.af_vrf.static_network', 'pybind.nos.v7_0_1a.brocade_rbridge', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.rbridge_id.router.router_bgp.address_family.ipv4.ipv4_unicast.af_vrf.static_network', 'pybind.nos.v7_1_0.brocade_rbridge', 'pybind.nos.v7_1_0')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'rbridge_id', 'extra_keyval': ''}, {'keyval': 'af_vrf_name', 'extra_keyval': ''}, {'keyval': 'rbridge_id', 'extra_keyval': ''}, {'keyval': 'af_vrf_name', 'extra_keyval': ''}, {'keyval': 'rbridge_id', 'extra_keyval': ''}, {'keyval': 'af_vrf_name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'static_network', 'keyval': 'static_network_address', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, rbridge_id=rbridge_id, af_vrf=af_vrf, static_network=static_network)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def rbridge_id_router_bgp_address_family_ipv6_unicast_aggregate_address_delete(self, rbridge_id=None, aggregate_ipv6_address=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		NOS: 6.0.2b, 7.0.1a, 7.1.0    

	**Parent Instance Keyword Arg Tuple(s)**:
		:param rbridge_id: kwarg tuple.
		:type rbridge_id: (rbridge_id).

		:param rbridge_id: tuple arg.
		:type rbridge_id: (long)
		
		.. note::
			* range - ['0..4294967295']

	**This Instance Keyword Arg Tuple**:
		:param aggregate_ipv6_address: kwarg tuple.
		:type aggregate_ipv6_address: (aggregate_ip_prefix).

		:param aggregate_ip_prefix: tuple arg.
		:type aggregate_ip_prefix: (unicode)
		
		.. note::
			* pattern - ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(/(([0-9])|([0-9]{2})|(1[0-1][0-9])|(12[0-8])))

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = [('pybind.nos.v7_1_0.rbridge_id', 'rbridge_id'), ('pybind.nos.v7_0_1a.rbridge_id', 'rbridge_id'), ('pybind.nos.v6_0_2b.rbridge_id', 'rbridge_id')]
    bindings_list = [('pybind.nos.v6_0_2b.rbridge_id.router.router_bgp.address_family.ipv6.ipv6_unicast.default_vrf.aggregate_ipv6_address', 'pybind.nos.v6_0_2b.brocade_rbridge', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.rbridge_id.router.router_bgp.address_family.ipv6.ipv6_unicast.default_vrf.aggregate_ipv6_address', 'pybind.nos.v7_0_1a.brocade_rbridge', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.rbridge_id.router.router_bgp.address_family.ipv6.ipv6_unicast.default_vrf.aggregate_ipv6_address', 'pybind.nos.v7_1_0.brocade_rbridge', 'pybind.nos.v7_1_0')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'rbridge_id', 'extra_keyval': ''}, {'keyval': 'rbridge_id', 'extra_keyval': ''}, {'keyval': 'rbridge_id', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'aggregate_ipv6_address', 'keyval': 'aggregate_ip_prefix', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, rbridge_id=rbridge_id, aggregate_ipv6_address=aggregate_ipv6_address)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def rbridge_id_router_bgp_address_family_ipv6_unicast_neighbor_delete(self, rbridge_id=None, af_ipv6_neighbor_address=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		NOS: 6.0.2b, 7.0.1a, 7.1.0    

	**Parent Instance Keyword Arg Tuple(s)**:
		:param rbridge_id: kwarg tuple.
		:type rbridge_id: (rbridge_id).

		:param rbridge_id: tuple arg.
		:type rbridge_id: (long)
		
		.. note::
			* range - ['0..4294967295']

	**This Instance Keyword Arg Tuple**:
		:param af_ipv6_neighbor_address: kwarg tuple.
		:type af_ipv6_neighbor_address: (af_ipv6_neighbor_address).

		:param af_ipv6_neighbor_address: A:B::C:D;;Neighbor IPV6 Address
		:type af_ipv6_neighbor_address: (unicode)
		
		.. note::
			* pattern - ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = [('pybind.nos.v6_0_2b.rbridge_id', 'rbridge_id'), ('pybind.nos.v7_1_0.rbridge_id', 'rbridge_id'), ('pybind.nos.v7_0_1a.rbridge_id', 'rbridge_id'), ('pybind.nos.v7_1_0.rbridge_id', 'rbridge_id'), ('pybind.nos.v7_0_1a.rbridge_id', 'rbridge_id'), ('pybind.nos.v6_0_2b.rbridge_id', 'rbridge_id')]
    bindings_list = [('pybind.nos.v6_0_2b.rbridge_id.router.router_bgp.address_family.ipv6.ipv6_unicast.default_vrf.neighbor.af_ipv6_neighbor_address_holder.af_ipv6_neighbor_address', 'pybind.nos.v6_0_2b.brocade_rbridge', 'pybind.nos.v6_0_2b'), ('pybind.nos.v6_0_2b.rbridge_id.router.router_bgp.address_family.ipv6.ipv6_unicast.default_vrf.neighbor.af_ipv6_neighbor_peergroup_holder.af_ipv6_neighbor_peergroup', 'pybind.nos.v6_0_2b.brocade_rbridge', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.rbridge_id.router.router_bgp.address_family.ipv6.ipv6_unicast.default_vrf.neighbor.af_ipv6_neighbor_address_holder.af_ipv6_neighbor_address', 'pybind.nos.v7_0_1a.brocade_rbridge', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_0_1a.rbridge_id.router.router_bgp.address_family.ipv6.ipv6_unicast.default_vrf.neighbor.af_ipv6_neighbor_peergroup_holder.af_ipv6_neighbor_peergroup', 'pybind.nos.v7_0_1a.brocade_rbridge', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.rbridge_id.router.router_bgp.address_family.ipv6.ipv6_unicast.default_vrf.neighbor.af_ipv6_neighbor_address_holder.af_ipv6_neighbor_address', 'pybind.nos.v7_1_0.brocade_rbridge', 'pybind.nos.v7_1_0'), ('pybind.nos.v7_1_0.rbridge_id.router.router_bgp.address_family.ipv6.ipv6_unicast.default_vrf.neighbor.af_ipv6_neighbor_peergroup_holder.af_ipv6_neighbor_peergroup', 'pybind.nos.v7_1_0.brocade_rbridge', 'pybind.nos.v7_1_0')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'rbridge_id', 'extra_keyval': ''}, {'keyval': 'rbridge_id', 'extra_keyval': ''}, {'keyval': 'rbridge_id', 'extra_keyval': ''}, {'keyval': 'rbridge_id', 'extra_keyval': ''}, {'keyval': 'rbridge_id', 'extra_keyval': ''}, {'keyval': 'rbridge_id', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'af_ipv6_neighbor_peergroup', 'keyval': 'af_ipv6_neighbor_peergroup_name', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, rbridge_id=rbridge_id, af_ipv6_neighbor_address=af_ipv6_neighbor_address)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def rbridge_id_router_bgp_address_family_ipv6_unicast_network_delete(self, rbridge_id=None, network=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		NOS: 6.0.2b, 7.0.1a, 7.1.0    

	**Parent Instance Keyword Arg Tuple(s)**:
		:param rbridge_id: kwarg tuple.
		:type rbridge_id: (rbridge_id).

		:param rbridge_id: tuple arg.
		:type rbridge_id: (long)
		
		.. note::
			* range - ['0..4294967295']

	**This Instance Keyword Arg Tuple**:
		:param network: kwarg tuple.
		:type network: (network_ipv6_address).

		:param network_ipv6_address: A:B::C:D/M IPV6 address in dotted decimal/Mask
		:type network_ipv6_address: (unicode)
		
		.. note::
			* pattern - ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(/(([0-9])|([0-9]{2})|(1[0-1][0-9])|(12[0-8])))

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = [('pybind.nos.v7_1_0.rbridge_id', 'rbridge_id'), ('pybind.nos.v7_0_1a.rbridge_id', 'rbridge_id'), ('pybind.nos.v6_0_2b.rbridge_id', 'rbridge_id')]
    bindings_list = [('pybind.nos.v6_0_2b.rbridge_id.router.router_bgp.address_family.ipv6.ipv6_unicast.default_vrf.network', 'pybind.nos.v6_0_2b.brocade_rbridge', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.rbridge_id.router.router_bgp.address_family.ipv6.ipv6_unicast.default_vrf.network', 'pybind.nos.v7_0_1a.brocade_rbridge', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.rbridge_id.router.router_bgp.address_family.ipv6.ipv6_unicast.default_vrf.network', 'pybind.nos.v7_1_0.brocade_rbridge', 'pybind.nos.v7_1_0')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'rbridge_id', 'extra_keyval': ''}, {'keyval': 'rbridge_id', 'extra_keyval': ''}, {'keyval': 'rbridge_id', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'network', 'keyval': 'network_ipv6_address', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, rbridge_id=rbridge_id, network=network)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def rbridge_id_router_bgp_address_family_ipv6_unicast_vrf_delete(self, rbridge_id=None, af_ipv6_vrf=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		NOS: 6.0.2b, 7.0.1a, 7.1.0    

	**Parent Instance Keyword Arg Tuple(s)**:
		:param rbridge_id: kwarg tuple.
		:type rbridge_id: (rbridge_id).

		:param rbridge_id: tuple arg.
		:type rbridge_id: (long)
		
		.. note::
			* range - ['0..4294967295']

	**This Instance Keyword Arg Tuple**:
		:param af_ipv6_vrf: kwarg tuple.
		:type af_ipv6_vrf: (af_ipv6_vrf_name).

		:param af_ipv6_vrf_name: VRF name
		:type af_ipv6_vrf_name: (unicode)
		
		.. note::
			* length - [u'1..255']

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = [('pybind.nos.v7_1_0.rbridge_id', 'rbridge_id'), ('pybind.nos.v7_0_1a.rbridge_id', 'rbridge_id'), ('pybind.nos.v6_0_2b.rbridge_id', 'rbridge_id')]
    bindings_list = [('pybind.nos.v6_0_2b.rbridge_id.router.router_bgp.address_family.ipv6.ipv6_unicast.af_ipv6_vrf', 'pybind.nos.v6_0_2b.brocade_rbridge', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.rbridge_id.router.router_bgp.address_family.ipv6.ipv6_unicast.af_ipv6_vrf', 'pybind.nos.v7_0_1a.brocade_rbridge', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.rbridge_id.router.router_bgp.address_family.ipv6.ipv6_unicast.af_ipv6_vrf', 'pybind.nos.v7_1_0.brocade_rbridge', 'pybind.nos.v7_1_0')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'rbridge_id', 'extra_keyval': ''}, {'keyval': 'rbridge_id', 'extra_keyval': ''}, {'keyval': 'rbridge_id', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'af_ipv6_vrf', 'keyval': 'af_ipv6_vrf_name', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, rbridge_id=rbridge_id, af_ipv6_vrf=af_ipv6_vrf)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def rbridge_id_router_bgp_address_family_ipv6_unicast_vrf_aggregate_address_delete(self, rbridge_id=None, af_ipv6_vrf=None, aggregate_ipv6_address=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		NOS: 6.0.2b, 7.0.1a, 7.1.0    

	**Parent Instance Keyword Arg Tuple(s)**:
		:param rbridge_id: kwarg tuple.
		:type rbridge_id: (rbridge_id).

		:param rbridge_id: tuple arg.
		:type rbridge_id: (long)
		
		.. note::
			* range - ['0..4294967295']

		:param af_ipv6_vrf: kwarg tuple.
		:type af_ipv6_vrf: (af_ipv6_vrf_name).

		:param af_ipv6_vrf_name: VRF name
		:type af_ipv6_vrf_name: (unicode)
		
		.. note::
			* length - [u'1..255']

	**This Instance Keyword Arg Tuple**:
		:param aggregate_ipv6_address: kwarg tuple.
		:type aggregate_ipv6_address: (aggregate_ip_prefix).

		:param aggregate_ip_prefix: tuple arg.
		:type aggregate_ip_prefix: (unicode)
		
		.. note::
			* pattern - ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(/(([0-9])|([0-9]{2})|(1[0-1][0-9])|(12[0-8])))

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = [('pybind.nos.v6_0_2b.rbridge_id', 'rbridge_id'), ('pybind.nos.v6_0_2b.rbridge_id.router.router_bgp.address_family.ipv6.ipv6_unicast.af_ipv6_vrf', u'af_ipv6_vrf'), ('pybind.nos.v7_0_1a.rbridge_id', 'rbridge_id'), ('pybind.nos.v7_0_1a.rbridge_id.router.router_bgp.address_family.ipv6.ipv6_unicast.af_ipv6_vrf', u'af_ipv6_vrf'), ('pybind.nos.v7_1_0.rbridge_id', 'rbridge_id'), ('pybind.nos.v7_1_0.rbridge_id.router.router_bgp.address_family.ipv6.ipv6_unicast.af_ipv6_vrf', u'af_ipv6_vrf')]
    bindings_list = [('pybind.nos.v6_0_2b.rbridge_id.router.router_bgp.address_family.ipv6.ipv6_unicast.af_ipv6_vrf.aggregate_ipv6_address', 'pybind.nos.v6_0_2b.brocade_rbridge', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.rbridge_id.router.router_bgp.address_family.ipv6.ipv6_unicast.af_ipv6_vrf.aggregate_ipv6_address', 'pybind.nos.v7_0_1a.brocade_rbridge', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.rbridge_id.router.router_bgp.address_family.ipv6.ipv6_unicast.af_ipv6_vrf.aggregate_ipv6_address', 'pybind.nos.v7_1_0.brocade_rbridge', 'pybind.nos.v7_1_0')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'rbridge_id', 'extra_keyval': ''}, {'keyval': 'af_ipv6_vrf_name', 'extra_keyval': ''}, {'keyval': 'rbridge_id', 'extra_keyval': ''}, {'keyval': 'af_ipv6_vrf_name', 'extra_keyval': ''}, {'keyval': 'rbridge_id', 'extra_keyval': ''}, {'keyval': 'af_ipv6_vrf_name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'aggregate_ipv6_address', 'keyval': 'aggregate_ip_prefix', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, rbridge_id=rbridge_id, af_ipv6_vrf=af_ipv6_vrf, aggregate_ipv6_address=aggregate_ipv6_address)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def rbridge_id_router_bgp_address_family_ipv6_unicast_vrf_neighbor_delete(self, rbridge_id=None, af_ipv6_vrf=None, af_ipv6_neighbor_addr=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		NOS: 6.0.2b, 7.0.1a, 7.1.0    

	**Parent Instance Keyword Arg Tuple(s)**:
		:param rbridge_id: kwarg tuple.
		:type rbridge_id: (rbridge_id).

		:param rbridge_id: tuple arg.
		:type rbridge_id: (long)
		
		.. note::
			* range - ['0..4294967295']

		:param af_ipv6_vrf: kwarg tuple.
		:type af_ipv6_vrf: (af_ipv6_vrf_name).

		:param af_ipv6_vrf_name: VRF name
		:type af_ipv6_vrf_name: (unicode)
		
		.. note::
			* length - [u'1..255']

	**This Instance Keyword Arg Tuple**:
		:param af_ipv6_neighbor_addr: kwarg tuple.
		:type af_ipv6_neighbor_addr: (af_ipv6_neighbor_address).

		:param af_ipv6_neighbor_address: A:B::C:D;;Neighbor Ipv6 Address
		:type af_ipv6_neighbor_address: (unicode)
		
		.. note::
			* pattern - ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = [('pybind.nos.v7_0_1a.rbridge_id', 'rbridge_id'), ('pybind.nos.v7_0_1a.rbridge_id.router.router_bgp.address_family.ipv6.ipv6_unicast.af_ipv6_vrf', u'af_ipv6_vrf'), ('pybind.nos.v7_1_0.rbridge_id', 'rbridge_id'), ('pybind.nos.v7_1_0.rbridge_id.router.router_bgp.address_family.ipv6.ipv6_unicast.af_ipv6_vrf', u'af_ipv6_vrf'), ('pybind.nos.v6_0_2b.rbridge_id', 'rbridge_id'), ('pybind.nos.v6_0_2b.rbridge_id.router.router_bgp.address_family.ipv6.ipv6_unicast.af_ipv6_vrf', u'af_ipv6_vrf')]
    bindings_list = [('pybind.nos.v6_0_2b.rbridge_id.router.router_bgp.address_family.ipv6.ipv6_unicast.af_ipv6_vrf.neighbor.af_ipv6_vrf_neighbor_address_holder.af_ipv6_neighbor_addr', 'pybind.nos.v6_0_2b.brocade_rbridge', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.rbridge_id.router.router_bgp.address_family.ipv6.ipv6_unicast.af_ipv6_vrf.neighbor.af_ipv6_vrf_neighbor_address_holder.af_ipv6_neighbor_addr', 'pybind.nos.v7_0_1a.brocade_rbridge', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.rbridge_id.router.router_bgp.address_family.ipv6.ipv6_unicast.af_ipv6_vrf.neighbor.af_ipv6_vrf_neighbor_address_holder.af_ipv6_neighbor_addr', 'pybind.nos.v7_1_0.brocade_rbridge', 'pybind.nos.v7_1_0')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'rbridge_id', 'extra_keyval': ''}, {'keyval': 'af_ipv6_vrf_name', 'extra_keyval': ''}, {'keyval': 'rbridge_id', 'extra_keyval': ''}, {'keyval': 'af_ipv6_vrf_name', 'extra_keyval': ''}, {'keyval': 'rbridge_id', 'extra_keyval': ''}, {'keyval': 'af_ipv6_vrf_name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'af_ipv6_neighbor_addr', 'keyval': 'af_ipv6_neighbor_address', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, rbridge_id=rbridge_id, af_ipv6_vrf=af_ipv6_vrf, af_ipv6_neighbor_addr=af_ipv6_neighbor_addr)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def rbridge_id_router_bgp_address_family_ipv6_unicast_vrf_network_delete(self, rbridge_id=None, af_ipv6_vrf=None, network=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		NOS: 6.0.2b, 7.0.1a, 7.1.0    

	**Parent Instance Keyword Arg Tuple(s)**:
		:param rbridge_id: kwarg tuple.
		:type rbridge_id: (rbridge_id).

		:param rbridge_id: tuple arg.
		:type rbridge_id: (long)
		
		.. note::
			* range - ['0..4294967295']

		:param af_ipv6_vrf: kwarg tuple.
		:type af_ipv6_vrf: (af_ipv6_vrf_name).

		:param af_ipv6_vrf_name: VRF name
		:type af_ipv6_vrf_name: (unicode)
		
		.. note::
			* length - [u'1..255']

	**This Instance Keyword Arg Tuple**:
		:param network: kwarg tuple.
		:type network: (network_ipv6_address).

		:param network_ipv6_address: A:B::C:D/M IPV6 address in dotted decimal/Mask
		:type network_ipv6_address: (unicode)
		
		.. note::
			* pattern - ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(/(([0-9])|([0-9]{2})|(1[0-1][0-9])|(12[0-8])))

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = [('pybind.nos.v7_0_1a.rbridge_id', 'rbridge_id'), ('pybind.nos.v7_0_1a.rbridge_id.router.router_bgp.address_family.ipv6.ipv6_unicast.af_ipv6_vrf', u'af_ipv6_vrf'), ('pybind.nos.v7_1_0.rbridge_id', 'rbridge_id'), ('pybind.nos.v7_1_0.rbridge_id.router.router_bgp.address_family.ipv6.ipv6_unicast.af_ipv6_vrf', u'af_ipv6_vrf'), ('pybind.nos.v6_0_2b.rbridge_id', 'rbridge_id'), ('pybind.nos.v6_0_2b.rbridge_id.router.router_bgp.address_family.ipv6.ipv6_unicast.af_ipv6_vrf', u'af_ipv6_vrf')]
    bindings_list = [('pybind.nos.v6_0_2b.rbridge_id.router.router_bgp.address_family.ipv6.ipv6_unicast.af_ipv6_vrf.network', 'pybind.nos.v6_0_2b.brocade_rbridge', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.rbridge_id.router.router_bgp.address_family.ipv6.ipv6_unicast.af_ipv6_vrf.network', 'pybind.nos.v7_0_1a.brocade_rbridge', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.rbridge_id.router.router_bgp.address_family.ipv6.ipv6_unicast.af_ipv6_vrf.network', 'pybind.nos.v7_1_0.brocade_rbridge', 'pybind.nos.v7_1_0')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'rbridge_id', 'extra_keyval': ''}, {'keyval': 'af_ipv6_vrf_name', 'extra_keyval': ''}, {'keyval': 'rbridge_id', 'extra_keyval': ''}, {'keyval': 'af_ipv6_vrf_name', 'extra_keyval': ''}, {'keyval': 'rbridge_id', 'extra_keyval': ''}, {'keyval': 'af_ipv6_vrf_name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'network', 'keyval': 'network_ipv6_address', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, rbridge_id=rbridge_id, af_ipv6_vrf=af_ipv6_vrf, network=network)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def rbridge_id_router_bgp_address_family_l2vpn_evpn_neighbor_delete(self, rbridge_id=None, evpn_neighbor_ipv4=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		NOS: 7.0.1a, 7.1.0    

	**Parent Instance Keyword Arg Tuple(s)**:
		:param rbridge_id: kwarg tuple.
		:type rbridge_id: (rbridge_id).

		:param rbridge_id: tuple arg.
		:type rbridge_id: (long)
		
		.. note::
			* range - ['0..4294967295']

	**This Instance Keyword Arg Tuple**:
		:param evpn_neighbor_ipv4: kwarg tuple.
		:type evpn_neighbor_ipv4: (evpn_neighbor_ipv4_address).

		:param evpn_neighbor_ipv4_address: A.B.C.D;;Neighbor Address
		:type evpn_neighbor_ipv4_address: (unicode)
		
		.. note::
			* pattern - (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = [('pybind.nos.v7_0_1a.rbridge_id', 'rbridge_id'), ('pybind.nos.v7_1_0.rbridge_id', 'rbridge_id'), ('pybind.nos.v7_0_1a.rbridge_id', 'rbridge_id'), ('pybind.nos.v7_1_0.rbridge_id', 'rbridge_id'), ('pybind.nos.v7_1_0.rbridge_id', 'rbridge_id'), ('pybind.nos.v7_0_1a.rbridge_id', 'rbridge_id')]
    bindings_list = [('pybind.nos.v7_0_1a.rbridge_id.router.router_bgp.address_family.l2vpn.evpn.neighbor.evpn_neighbor_ipv4', 'pybind.nos.v7_0_1a.brocade_rbridge', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_0_1a.rbridge_id.router.router_bgp.address_family.l2vpn.evpn.neighbor.evpn_neighbor_ipv6', 'pybind.nos.v7_0_1a.brocade_rbridge', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_0_1a.rbridge_id.router.router_bgp.address_family.l2vpn.evpn.neighbor.evpn_peer_group', 'pybind.nos.v7_0_1a.brocade_rbridge', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.rbridge_id.router.router_bgp.address_family.l2vpn.evpn.neighbor.evpn_neighbor_ipv4', 'pybind.nos.v7_1_0.brocade_rbridge', 'pybind.nos.v7_1_0'), ('pybind.nos.v7_1_0.rbridge_id.router.router_bgp.address_family.l2vpn.evpn.neighbor.evpn_neighbor_ipv6', 'pybind.nos.v7_1_0.brocade_rbridge', 'pybind.nos.v7_1_0'), ('pybind.nos.v7_1_0.rbridge_id.router.router_bgp.address_family.l2vpn.evpn.neighbor.evpn_peer_group', 'pybind.nos.v7_1_0.brocade_rbridge', 'pybind.nos.v7_1_0')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'rbridge_id', 'extra_keyval': ''}, {'keyval': 'rbridge_id', 'extra_keyval': ''}, {'keyval': 'rbridge_id', 'extra_keyval': ''}, {'keyval': 'rbridge_id', 'extra_keyval': ''}, {'keyval': 'rbridge_id', 'extra_keyval': ''}, {'keyval': 'rbridge_id', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'evpn_peer_group', 'keyval': 'evpn_neighbor_peergroup_name', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, rbridge_id=rbridge_id, evpn_neighbor_ipv4=evpn_neighbor_ipv4)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def rbridge_id_router_bgp_listen_range_delete(self, rbridge_id=None, listen_range=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		NOS: 7.1.0    

	**Parent Instance Keyword Arg Tuple(s)**:
		:param rbridge_id: kwarg tuple.
		:type rbridge_id: (rbridge_id).

		:param rbridge_id: tuple arg.
		:type rbridge_id: (long)
		
		.. note::
			* range - ['0..4294967295']

	**This Instance Keyword Arg Tuple**:
		:param listen_range: kwarg tuple.
		:type listen_range: (listen_range_prefix, peer_group, limit).

		:param listen_range_prefix: A.B.C.D/M IP address in dotted decimal/Mask
		:type listen_range_prefix: (unicode)
		
		.. note::
			* pattern - (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])/(([0-9])|([1-2][0-9])|(3[0-2]))

		:param peer_group: Peer group name
		:type peer_group: (unicode)
		
		.. note::
			* pattern - [a-zA-Z]{1}([-a-zA-Z0-9\\\\@#\+\*\(\)=\{~\}%<>=$_\[\]\|]{0,62})

		:param limit: Limit the neighbor
		:type limit: (long)
		
		.. note::
			* range - ['0..4294967295']

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = [('pybind.nos.v7_1_0.rbridge_id', 'rbridge_id')]
    bindings_list = [('pybind.nos.v7_1_0.rbridge_id.router.router_bgp.router_bgp_attributes.listen_range', 'pybind.nos.v7_1_0.brocade_rbridge', 'pybind.nos.v7_1_0')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'rbridge_id', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'listen_range', 'keyval': 'listen_range_prefix, peer_group', 'extra_keyval': 'listen_range_prefix, peer_group, limit'}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, rbridge_id=rbridge_id, listen_range=listen_range)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def rbridge_id_router_bgp_neighbor_delete(self, rbridge_id=None, neighbor_addr=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		NOS: 6.0.2b, 7.0.1a, 7.1.0    

	**Parent Instance Keyword Arg Tuple(s)**:
		:param rbridge_id: kwarg tuple.
		:type rbridge_id: (rbridge_id).

		:param rbridge_id: tuple arg.
		:type rbridge_id: (long)
		
		.. note::
			* range - ['0..4294967295']

	**This Instance Keyword Arg Tuple**:
		:param neighbor_addr: kwarg tuple.
		:type neighbor_addr: (router_bgp_neighbor_address).

		:param router_bgp_neighbor_address: A.B.C.D;;Neighbor Address
		:type router_bgp_neighbor_address: (unicode)
		
		.. note::
			* pattern - (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = [('pybind.nos.v7_1_0.rbridge_id', 'rbridge_id'), ('pybind.nos.v6_0_2b.rbridge_id', 'rbridge_id'), ('pybind.nos.v7_1_0.rbridge_id', 'rbridge_id'), ('pybind.nos.v7_1_0.rbridge_id', 'rbridge_id'), ('pybind.nos.v6_0_2b.rbridge_id', 'rbridge_id'), ('pybind.nos.v7_0_1a.rbridge_id', 'rbridge_id'), ('pybind.nos.v7_0_1a.rbridge_id', 'rbridge_id'), ('pybind.nos.v6_0_2b.rbridge_id', 'rbridge_id'), ('pybind.nos.v7_0_1a.rbridge_id', 'rbridge_id')]
    bindings_list = [('pybind.nos.v6_0_2b.rbridge_id.router.router_bgp.router_bgp_attributes.neighbor.neighbor_ips.neighbor_addr', 'pybind.nos.v6_0_2b.brocade_rbridge', 'pybind.nos.v6_0_2b'), ('pybind.nos.v6_0_2b.rbridge_id.router.router_bgp.router_bgp_attributes.neighbor.neighbor_ipv6s.neighbor_ipv6_addr', 'pybind.nos.v6_0_2b.brocade_rbridge', 'pybind.nos.v6_0_2b'), ('pybind.nos.v6_0_2b.rbridge_id.router.router_bgp.router_bgp_attributes.neighbor.peer_grps.neighbor_peer_grp', 'pybind.nos.v6_0_2b.brocade_rbridge', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.rbridge_id.router.router_bgp.router_bgp_attributes.neighbor.neighbor_ips.neighbor_addr', 'pybind.nos.v7_0_1a.brocade_rbridge', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_0_1a.rbridge_id.router.router_bgp.router_bgp_attributes.neighbor.neighbor_ipv6s.neighbor_ipv6_addr', 'pybind.nos.v7_0_1a.brocade_rbridge', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_0_1a.rbridge_id.router.router_bgp.router_bgp_attributes.neighbor.peer_grps.neighbor_peer_grp', 'pybind.nos.v7_0_1a.brocade_rbridge', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.rbridge_id.router.router_bgp.router_bgp_attributes.neighbor.neighbor_ips.neighbor_addr', 'pybind.nos.v7_1_0.brocade_rbridge', 'pybind.nos.v7_1_0'), ('pybind.nos.v7_1_0.rbridge_id.router.router_bgp.router_bgp_attributes.neighbor.neighbor_ipv6s.neighbor_ipv6_addr', 'pybind.nos.v7_1_0.brocade_rbridge', 'pybind.nos.v7_1_0'), ('pybind.nos.v7_1_0.rbridge_id.router.router_bgp.router_bgp_attributes.neighbor.peer_grps.neighbor_peer_grp', 'pybind.nos.v7_1_0.brocade_rbridge', 'pybind.nos.v7_1_0')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'rbridge_id', 'extra_keyval': ''}, {'keyval': 'rbridge_id', 'extra_keyval': ''}, {'keyval': 'rbridge_id', 'extra_keyval': ''}, {'keyval': 'rbridge_id', 'extra_keyval': ''}, {'keyval': 'rbridge_id', 'extra_keyval': ''}, {'keyval': 'rbridge_id', 'extra_keyval': ''}, {'keyval': 'rbridge_id', 'extra_keyval': ''}, {'keyval': 'rbridge_id', 'extra_keyval': ''}, {'keyval': 'rbridge_id', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'neighbor_ipv6_addr', 'keyval': 'router_bgp_neighbor_ipv6_address', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, rbridge_id=rbridge_id, neighbor_addr=neighbor_addr)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def rbridge_id_router_ospf_delete(self, rbridge_id=None, ospf=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		NOS: 6.0.2b, 7.0.1a, 7.1.0    

	**Parent Instance Keyword Arg Tuple(s)**:
		:param rbridge_id: kwarg tuple.
		:type rbridge_id: (rbridge_id).

		:param rbridge_id: tuple arg.
		:type rbridge_id: (long)
		
		.. note::
			* range - ['0..4294967295']

	**This Instance Keyword Arg Tuple**:
		:param ospf: kwarg tuple.
		:type ospf: (vrf).

		:param vrf: Create a VRF
		:type vrf: (unicode)
		
		.. note::
			* length - [u'1..64']

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = [('pybind.nos.v6_0_2b.rbridge_id', 'rbridge_id'), ('pybind.nos.v7_1_0.rbridge_id', 'rbridge_id'), ('pybind.nos.v7_0_1a.rbridge_id', 'rbridge_id')]
    bindings_list = [('pybind.nos.v6_0_2b.rbridge_id.router.ospf', 'pybind.nos.v6_0_2b.brocade_rbridge', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.rbridge_id.router.ospf', 'pybind.nos.v7_0_1a.brocade_rbridge', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.rbridge_id.router.ospf', 'pybind.nos.v7_1_0.brocade_rbridge', 'pybind.nos.v7_1_0')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'rbridge_id', 'extra_keyval': ''}, {'keyval': 'rbridge_id', 'extra_keyval': ''}, {'keyval': 'rbridge_id', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'ospf', 'keyval': 'vrf', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, rbridge_id=rbridge_id, ospf=ospf)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def rbridge_id_router_ospf_area_delete(self, rbridge_id=None, ospf=None, area=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		NOS: 6.0.2b, 7.0.1a, 7.1.0    

	**Parent Instance Keyword Arg Tuple(s)**:
		:param rbridge_id: kwarg tuple.
		:type rbridge_id: (rbridge_id).

		:param rbridge_id: tuple arg.
		:type rbridge_id: (long)
		
		.. note::
			* range - ['0..4294967295']

		:param ospf: kwarg tuple.
		:type ospf: (vrf).

		:param vrf: Create a VRF
		:type vrf: (unicode)
		
		.. note::
			* length - [u'1..64']

	**This Instance Keyword Arg Tuple**:
		:param area: kwarg tuple.
		:type area: (area_id).

		:param area_id: tuple arg.
		:type area_id: (unicode)
		
		.. note::
			* pattern - ((([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.)(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){2}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5]))|(([0-9])|([1-9]([0-9]{1,8}))|([1]([0-9]{1,9}))|([2][0]([0-9]{1,8}))|([2][1][0-3]([0-9]{1,7}))|([2][1][4][0-6]([0-9]{1,6}))|([2][1][4][7][0-3]([0-9]{1,5}))|([2][1][4][7][4][0-7]([0-9]{1,4}))|([2][1][4][7][4][8][0-2]([0-9]{1,3}))|([2][1][4][7][4][8][3][0-5]([0-9]{1,2}))|([2][1][4][7][4][8][3][6][0-3][0-9])|([2][1][4][7][4][8][3][6][4][0-7]))

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = [('pybind.nos.v6_0_2b.rbridge_id', 'rbridge_id'), ('pybind.nos.v6_0_2b.rbridge_id.router.ospf', u'ospf'), ('pybind.nos.v7_1_0.rbridge_id', 'rbridge_id'), ('pybind.nos.v7_1_0.rbridge_id.router.ospf', u'ospf'), ('pybind.nos.v7_0_1a.rbridge_id', 'rbridge_id'), ('pybind.nos.v7_0_1a.rbridge_id.router.ospf', u'ospf')]
    bindings_list = [('pybind.nos.v6_0_2b.rbridge_id.router.ospf.area', 'pybind.nos.v6_0_2b.brocade_rbridge', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.rbridge_id.router.ospf.area', 'pybind.nos.v7_0_1a.brocade_rbridge', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.rbridge_id.router.ospf.area', 'pybind.nos.v7_1_0.brocade_rbridge', 'pybind.nos.v7_1_0')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'rbridge_id', 'extra_keyval': ''}, {'keyval': 'vrf', 'extra_keyval': ''}, {'keyval': 'rbridge_id', 'extra_keyval': ''}, {'keyval': 'vrf', 'extra_keyval': ''}, {'keyval': 'rbridge_id', 'extra_keyval': ''}, {'keyval': 'vrf', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'area', 'keyval': 'area_id', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, rbridge_id=rbridge_id, ospf=ospf, area=area)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def rbridge_id_router_ospf_area_range_delete(self, rbridge_id=None, ospf=None, area=None, range=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		NOS: 6.0.2b, 7.0.1a, 7.1.0    

	**Parent Instance Keyword Arg Tuple(s)**:
		:param rbridge_id: kwarg tuple.
		:type rbridge_id: (rbridge_id).

		:param rbridge_id: tuple arg.
		:type rbridge_id: (long)
		
		.. note::
			* range - ['0..4294967295']

		:param ospf: kwarg tuple.
		:type ospf: (vrf).

		:param vrf: Create a VRF
		:type vrf: (unicode)
		
		.. note::
			* length - [u'1..64']

		:param area: kwarg tuple.
		:type area: (area_id).

		:param area_id: tuple arg.
		:type area_id: (unicode)
		
		.. note::
			* pattern - ((([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.)(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){2}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5]))|(([0-9])|([1-9]([0-9]{1,8}))|([1]([0-9]{1,9}))|([2][0]([0-9]{1,8}))|([2][1][0-3]([0-9]{1,7}))|([2][1][4][0-6]([0-9]{1,6}))|([2][1][4][7][0-3]([0-9]{1,5}))|([2][1][4][7][4][0-7]([0-9]{1,4}))|([2][1][4][7][4][8][0-2]([0-9]{1,3}))|([2][1][4][7][4][8][3][0-5]([0-9]{1,2}))|([2][1][4][7][4][8][3][6][0-3][0-9])|([2][1][4][7][4][8][3][6][4][0-7]))

	**This Instance Keyword Arg Tuple**:
		:param range: kwarg tuple.
		:type range: (range_address, range_mask, range_effect, range_cost).

		:param range_address: A.B.C.D   IP address to match
		:type range_address: (unicode)
		
		.. note::
			* pattern - (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?

		:param range_mask: A.B.C.D   IP mask for address
		:type range_mask: (unicode)
		
		.. note::
			* pattern - (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?

		:param range_effect: Advertise/Do not advertise this 
type-3 summarization
		:type range_effect: (unicode)
		
		.. note::
			* enum - [u'advertise', u'not-advertise']

		:param range_cost: Configure area range cost
		:type range_cost: (long)
		
		.. note::
			* range - ['0..4294967295']

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = [('pybind.nos.v7_1_0.rbridge_id', 'rbridge_id'), ('pybind.nos.v7_1_0.rbridge_id.router.ospf', u'ospf'), ('pybind.nos.v7_1_0.rbridge_id.router.ospf.area', u'area'), ('pybind.nos.v6_0_2b.rbridge_id', 'rbridge_id'), ('pybind.nos.v6_0_2b.rbridge_id.router.ospf', u'ospf'), ('pybind.nos.v6_0_2b.rbridge_id.router.ospf.area', u'area'), ('pybind.nos.v7_0_1a.rbridge_id', 'rbridge_id'), ('pybind.nos.v7_0_1a.rbridge_id.router.ospf', u'ospf'), ('pybind.nos.v7_0_1a.rbridge_id.router.ospf.area', u'area')]
    bindings_list = [('pybind.nos.v6_0_2b.rbridge_id.router.ospf.area.range', 'pybind.nos.v6_0_2b.brocade_rbridge', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.rbridge_id.router.ospf.area.range', 'pybind.nos.v7_0_1a.brocade_rbridge', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.rbridge_id.router.ospf.area.range', 'pybind.nos.v7_1_0.brocade_rbridge', 'pybind.nos.v7_1_0')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'rbridge_id', 'extra_keyval': ''}, {'keyval': 'vrf', 'extra_keyval': ''}, {'keyval': 'area_id', 'extra_keyval': ''}, {'keyval': 'rbridge_id', 'extra_keyval': ''}, {'keyval': 'vrf', 'extra_keyval': ''}, {'keyval': 'area_id', 'extra_keyval': ''}, {'keyval': 'rbridge_id', 'extra_keyval': ''}, {'keyval': 'vrf', 'extra_keyval': ''}, {'keyval': 'area_id', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'range', 'keyval': 'range_address, range_mask', 'extra_keyval': 'range_address, range_mask, range_effect, range_cost'}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, rbridge_id=rbridge_id, ospf=ospf, area=area, range=range)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def rbridge_id_router_ospf_area_virtual_link_delete(self, rbridge_id=None, ospf=None, area=None, virtual_link=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		NOS: 6.0.2b, 7.0.1a, 7.1.0    

	**Parent Instance Keyword Arg Tuple(s)**:
		:param rbridge_id: kwarg tuple.
		:type rbridge_id: (rbridge_id).

		:param rbridge_id: tuple arg.
		:type rbridge_id: (long)
		
		.. note::
			* range - ['0..4294967295']

		:param ospf: kwarg tuple.
		:type ospf: (vrf).

		:param vrf: Create a VRF
		:type vrf: (unicode)
		
		.. note::
			* length - [u'1..64']

		:param area: kwarg tuple.
		:type area: (area_id).

		:param area_id: tuple arg.
		:type area_id: (unicode)
		
		.. note::
			* pattern - ((([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.)(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){2}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5]))|(([0-9])|([1-9]([0-9]{1,8}))|([1]([0-9]{1,9}))|([2][0]([0-9]{1,8}))|([2][1][0-3]([0-9]{1,7}))|([2][1][4][0-6]([0-9]{1,6}))|([2][1][4][7][0-3]([0-9]{1,5}))|([2][1][4][7][4][0-7]([0-9]{1,4}))|([2][1][4][7][4][8][0-2]([0-9]{1,3}))|([2][1][4][7][4][8][3][0-5]([0-9]{1,2}))|([2][1][4][7][4][8][3][6][0-3][0-9])|([2][1][4][7][4][8][3][6][4][0-7]))

	**This Instance Keyword Arg Tuple**:
		:param virtual_link: kwarg tuple.
		:type virtual_link: (virt_link_neighbor).

		:param virt_link_neighbor: tuple arg.
		:type virt_link_neighbor: (unicode)
		
		.. note::
			* pattern - (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = [('pybind.nos.v7_0_1a.rbridge_id', 'rbridge_id'), ('pybind.nos.v7_0_1a.rbridge_id.router.ospf', u'ospf'), ('pybind.nos.v7_0_1a.rbridge_id.router.ospf.area', u'area'), ('pybind.nos.v7_1_0.rbridge_id', 'rbridge_id'), ('pybind.nos.v7_1_0.rbridge_id.router.ospf', u'ospf'), ('pybind.nos.v7_1_0.rbridge_id.router.ospf.area', u'area'), ('pybind.nos.v6_0_2b.rbridge_id', 'rbridge_id'), ('pybind.nos.v6_0_2b.rbridge_id.router.ospf', u'ospf'), ('pybind.nos.v6_0_2b.rbridge_id.router.ospf.area', u'area')]
    bindings_list = [('pybind.nos.v6_0_2b.rbridge_id.router.ospf.area.virtual_link', 'pybind.nos.v6_0_2b.brocade_rbridge', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.rbridge_id.router.ospf.area.virtual_link', 'pybind.nos.v7_0_1a.brocade_rbridge', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.rbridge_id.router.ospf.area.virtual_link', 'pybind.nos.v7_1_0.brocade_rbridge', 'pybind.nos.v7_1_0')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'rbridge_id', 'extra_keyval': ''}, {'keyval': 'vrf', 'extra_keyval': ''}, {'keyval': 'area_id', 'extra_keyval': ''}, {'keyval': 'rbridge_id', 'extra_keyval': ''}, {'keyval': 'vrf', 'extra_keyval': ''}, {'keyval': 'area_id', 'extra_keyval': ''}, {'keyval': 'rbridge_id', 'extra_keyval': ''}, {'keyval': 'vrf', 'extra_keyval': ''}, {'keyval': 'area_id', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'virtual_link', 'keyval': 'virt_link_neighbor', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, rbridge_id=rbridge_id, ospf=ospf, area=area, virtual_link=virtual_link)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def rbridge_id_router_ospf_deny_redistribute_delete(self, rbridge_id=None, ospf=None, redistribute=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		NOS: 6.0.2b, 7.0.1a, 7.1.0    

	**Parent Instance Keyword Arg Tuple(s)**:
		:param rbridge_id: kwarg tuple.
		:type rbridge_id: (rbridge_id).

		:param rbridge_id: tuple arg.
		:type rbridge_id: (long)
		
		.. note::
			* range - ['0..4294967295']

		:param ospf: kwarg tuple.
		:type ospf: (vrf).

		:param vrf: Create a VRF
		:type vrf: (unicode)
		
		.. note::
			* length - [u'1..64']

	**This Instance Keyword Arg Tuple**:
		:param redistribute: kwarg tuple.
		:type redistribute: (redist_value, route_option, address, mask, set_metric_val, match_metric_val).

		:param redist_value: Number
		:type redist_value: (long)
		
		.. note::
			* range - ['0..4294967295']

		:param route_option: OSPF route option
		:type route_option: (unicode)
		
		.. note::
			* enum - [u'connected', u'all', u'static']

		:param address: IP address
		:type address: (unicode)
		
		.. note::
			* pattern - (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?

		:param mask: Subnet Mask
		:type mask: (unicode)
		
		.. note::
			* pattern - (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?

		:param set_metric_val: Metric value
		:type set_metric_val: (long)
		
		.. note::
			* range - ['0..4294967295']

		:param match_metric_val: Metric value
		:type match_metric_val: (long)
		
		.. note::
			* range - ['0..4294967295']

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = [('pybind.nos.v7_1_0.rbridge_id', 'rbridge_id'), ('pybind.nos.v7_1_0.rbridge_id.router.ospf', u'ospf'), ('pybind.nos.v7_0_1a.rbridge_id', 'rbridge_id'), ('pybind.nos.v7_0_1a.rbridge_id.router.ospf', u'ospf'), ('pybind.nos.v6_0_2b.rbridge_id', 'rbridge_id'), ('pybind.nos.v6_0_2b.rbridge_id.router.ospf', u'ospf')]
    bindings_list = [('pybind.nos.v6_0_2b.rbridge_id.router.ospf.deny.redistribute', 'pybind.nos.v6_0_2b.brocade_rbridge', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.rbridge_id.router.ospf.deny.redistribute', 'pybind.nos.v7_0_1a.brocade_rbridge', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.rbridge_id.router.ospf.deny.redistribute', 'pybind.nos.v7_1_0.brocade_rbridge', 'pybind.nos.v7_1_0')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'rbridge_id', 'extra_keyval': ''}, {'keyval': 'vrf', 'extra_keyval': ''}, {'keyval': 'rbridge_id', 'extra_keyval': ''}, {'keyval': 'vrf', 'extra_keyval': ''}, {'keyval': 'rbridge_id', 'extra_keyval': ''}, {'keyval': 'vrf', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'redistribute', 'keyval': 'redist_value, route_option', 'extra_keyval': 'redist_value, route_option, address, mask, set_metric_val, match_metric_val'}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, rbridge_id=rbridge_id, ospf=ospf, redistribute=redistribute)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def rbridge_id_router_ospf_distance_delete(self, rbridge_id=None, ospf=None, distance=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		NOS: 6.0.2b, 7.0.1a, 7.1.0    

	**Parent Instance Keyword Arg Tuple(s)**:
		:param rbridge_id: kwarg tuple.
		:type rbridge_id: (rbridge_id).

		:param rbridge_id: tuple arg.
		:type rbridge_id: (long)
		
		.. note::
			* range - ['0..4294967295']

		:param ospf: kwarg tuple.
		:type ospf: (vrf).

		:param vrf: Create a VRF
		:type vrf: (unicode)
		
		.. note::
			* length - [u'1..64']

	**This Instance Keyword Arg Tuple**:
		:param distance: kwarg tuple.
		:type distance: (route_type).

		:param route_type: The type of route propogation
		:type route_type: (unicode)
		
		.. note::
			* enum - [u'intra-area', u'external', u'inter-area']

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = [('pybind.nos.v6_0_2b.rbridge_id', 'rbridge_id'), ('pybind.nos.v6_0_2b.rbridge_id.router.ospf', u'ospf'), ('pybind.nos.v7_0_1a.rbridge_id', 'rbridge_id'), ('pybind.nos.v7_0_1a.rbridge_id.router.ospf', u'ospf'), ('pybind.nos.v7_1_0.rbridge_id', 'rbridge_id'), ('pybind.nos.v7_1_0.rbridge_id.router.ospf', u'ospf')]
    bindings_list = [('pybind.nos.v6_0_2b.rbridge_id.router.ospf.distance', 'pybind.nos.v6_0_2b.brocade_rbridge', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.rbridge_id.router.ospf.distance', 'pybind.nos.v7_0_1a.brocade_rbridge', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.rbridge_id.router.ospf.distance', 'pybind.nos.v7_1_0.brocade_rbridge', 'pybind.nos.v7_1_0')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'rbridge_id', 'extra_keyval': ''}, {'keyval': 'vrf', 'extra_keyval': ''}, {'keyval': 'rbridge_id', 'extra_keyval': ''}, {'keyval': 'vrf', 'extra_keyval': ''}, {'keyval': 'rbridge_id', 'extra_keyval': ''}, {'keyval': 'vrf', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'distance', 'keyval': 'route_type', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, rbridge_id=rbridge_id, ospf=ospf, distance=distance)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def rbridge_id_router_ospf_neighbor_delete(self, rbridge_id=None, ospf=None, neighbor=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		NOS: 6.0.2b, 7.0.1a, 7.1.0    

	**Parent Instance Keyword Arg Tuple(s)**:
		:param rbridge_id: kwarg tuple.
		:type rbridge_id: (rbridge_id).

		:param rbridge_id: tuple arg.
		:type rbridge_id: (long)
		
		.. note::
			* range - ['0..4294967295']

		:param ospf: kwarg tuple.
		:type ospf: (vrf).

		:param vrf: Create a VRF
		:type vrf: (unicode)
		
		.. note::
			* length - [u'1..64']

	**This Instance Keyword Arg Tuple**:
		:param neighbor: kwarg tuple.
		:type neighbor: (neighbor_addr).

		:param neighbor_addr: tuple arg.
		:type neighbor_addr: (unicode)
		
		.. note::
			* pattern - (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = [('pybind.nos.v6_0_2b.rbridge_id', 'rbridge_id'), ('pybind.nos.v6_0_2b.rbridge_id.router.ospf', u'ospf'), ('pybind.nos.v7_0_1a.rbridge_id', 'rbridge_id'), ('pybind.nos.v7_0_1a.rbridge_id.router.ospf', u'ospf'), ('pybind.nos.v7_1_0.rbridge_id', 'rbridge_id'), ('pybind.nos.v7_1_0.rbridge_id.router.ospf', u'ospf')]
    bindings_list = [('pybind.nos.v6_0_2b.rbridge_id.router.ospf.neighbor', 'pybind.nos.v6_0_2b.brocade_rbridge', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.rbridge_id.router.ospf.neighbor', 'pybind.nos.v7_0_1a.brocade_rbridge', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.rbridge_id.router.ospf.neighbor', 'pybind.nos.v7_1_0.brocade_rbridge', 'pybind.nos.v7_1_0')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'rbridge_id', 'extra_keyval': ''}, {'keyval': 'vrf', 'extra_keyval': ''}, {'keyval': 'rbridge_id', 'extra_keyval': ''}, {'keyval': 'vrf', 'extra_keyval': ''}, {'keyval': 'rbridge_id', 'extra_keyval': ''}, {'keyval': 'vrf', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'neighbor', 'keyval': 'neighbor_addr', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, rbridge_id=rbridge_id, ospf=ospf, neighbor=neighbor)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def rbridge_id_router_ospf_permit_redistribute_delete(self, rbridge_id=None, ospf=None, redistribute=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		NOS: 6.0.2b, 7.0.1a, 7.1.0    

	**Parent Instance Keyword Arg Tuple(s)**:
		:param rbridge_id: kwarg tuple.
		:type rbridge_id: (rbridge_id).

		:param rbridge_id: tuple arg.
		:type rbridge_id: (long)
		
		.. note::
			* range - ['0..4294967295']

		:param ospf: kwarg tuple.
		:type ospf: (vrf).

		:param vrf: Create a VRF
		:type vrf: (unicode)
		
		.. note::
			* length - [u'1..64']

	**This Instance Keyword Arg Tuple**:
		:param redistribute: kwarg tuple.
		:type redistribute: (redist_value, route_option, address, mask, set_metric_val, match_metric_val).

		:param redist_value: Number
		:type redist_value: (long)
		
		.. note::
			* range - ['0..4294967295']

		:param route_option: OSPF route option
		:type route_option: (unicode)
		
		.. note::
			* enum - [u'connected', u'all', u'static']

		:param address: IP address
		:type address: (unicode)
		
		.. note::
			* pattern - (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?

		:param mask: Subnet Mask
		:type mask: (unicode)
		
		.. note::
			* pattern - (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?

		:param set_metric_val: Metric value
		:type set_metric_val: (long)
		
		.. note::
			* range - ['0..4294967295']

		:param match_metric_val: Metric value
		:type match_metric_val: (long)
		
		.. note::
			* range - ['0..4294967295']

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = [('pybind.nos.v7_1_0.rbridge_id', 'rbridge_id'), ('pybind.nos.v7_1_0.rbridge_id.router.ospf', u'ospf'), ('pybind.nos.v6_0_2b.rbridge_id', 'rbridge_id'), ('pybind.nos.v6_0_2b.rbridge_id.router.ospf', u'ospf'), ('pybind.nos.v7_0_1a.rbridge_id', 'rbridge_id'), ('pybind.nos.v7_0_1a.rbridge_id.router.ospf', u'ospf')]
    bindings_list = [('pybind.nos.v6_0_2b.rbridge_id.router.ospf.permit.redistribute', 'pybind.nos.v6_0_2b.brocade_rbridge', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.rbridge_id.router.ospf.permit.redistribute', 'pybind.nos.v7_0_1a.brocade_rbridge', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.rbridge_id.router.ospf.permit.redistribute', 'pybind.nos.v7_1_0.brocade_rbridge', 'pybind.nos.v7_1_0')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'rbridge_id', 'extra_keyval': ''}, {'keyval': 'vrf', 'extra_keyval': ''}, {'keyval': 'rbridge_id', 'extra_keyval': ''}, {'keyval': 'vrf', 'extra_keyval': ''}, {'keyval': 'rbridge_id', 'extra_keyval': ''}, {'keyval': 'vrf', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'redistribute', 'keyval': 'redist_value, route_option', 'extra_keyval': 'redist_value, route_option, address, mask, set_metric_val, match_metric_val'}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, rbridge_id=rbridge_id, ospf=ospf, redistribute=redistribute)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def rbridge_id_router_ospf_summary_address_delete(self, rbridge_id=None, ospf=None, summary_address=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		NOS: 6.0.2b, 7.0.1a, 7.1.0    

	**Parent Instance Keyword Arg Tuple(s)**:
		:param rbridge_id: kwarg tuple.
		:type rbridge_id: (rbridge_id).

		:param rbridge_id: tuple arg.
		:type rbridge_id: (long)
		
		.. note::
			* range - ['0..4294967295']

		:param ospf: kwarg tuple.
		:type ospf: (vrf).

		:param vrf: Create a VRF
		:type vrf: (unicode)
		
		.. note::
			* length - [u'1..64']

	**This Instance Keyword Arg Tuple**:
		:param summary_address: kwarg tuple.
		:type summary_address: (sum_address, sum_address_mask).

		:param sum_address: tuple arg.
		:type sum_address: (unicode)
		
		.. note::
			* pattern - (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?

		:param sum_address_mask: tuple arg.
		:type sum_address_mask: (unicode)
		
		.. note::
			* pattern - (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = [('pybind.nos.v7_1_0.rbridge_id', 'rbridge_id'), ('pybind.nos.v7_1_0.rbridge_id.router.ospf', u'ospf'), ('pybind.nos.v6_0_2b.rbridge_id', 'rbridge_id'), ('pybind.nos.v6_0_2b.rbridge_id.router.ospf', u'ospf'), ('pybind.nos.v7_0_1a.rbridge_id', 'rbridge_id'), ('pybind.nos.v7_0_1a.rbridge_id.router.ospf', u'ospf')]
    bindings_list = [('pybind.nos.v6_0_2b.rbridge_id.router.ospf.summary_address', 'pybind.nos.v6_0_2b.brocade_rbridge', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.rbridge_id.router.ospf.summary_address', 'pybind.nos.v7_0_1a.brocade_rbridge', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.rbridge_id.router.ospf.summary_address', 'pybind.nos.v7_1_0.brocade_rbridge', 'pybind.nos.v7_1_0')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'rbridge_id', 'extra_keyval': ''}, {'keyval': 'vrf', 'extra_keyval': ''}, {'keyval': 'rbridge_id', 'extra_keyval': ''}, {'keyval': 'vrf', 'extra_keyval': ''}, {'keyval': 'rbridge_id', 'extra_keyval': ''}, {'keyval': 'vrf', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'summary_address', 'keyval': 'sum_address, sum_address_mask', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, rbridge_id=rbridge_id, ospf=ospf, summary_address=summary_address)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def rbridge_id_router_pim_bsr_candidate_interface_delete(self, rbridge_id=None, bsr_cand_interface=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		NOS: 6.0.2b, 7.0.1a, 7.1.0    

	**Parent Instance Keyword Arg Tuple(s)**:
		:param rbridge_id: kwarg tuple.
		:type rbridge_id: (rbridge_id).

		:param rbridge_id: tuple arg.
		:type rbridge_id: (long)
		
		.. note::
			* range - ['0..4294967295']

	**This Instance Keyword Arg Tuple**:
		:param bsr_cand_interface: kwarg tuple.
		:type bsr_cand_interface: (bsr_cand_intf_type, bsr_cand_intf_id, hash_mask_length, bsr_cand_priority).

		:param bsr_cand_intf_type: tuple arg.
		:type bsr_cand_intf_type: (unicode)
		
		.. note::
			* enum - [u'port-channel', u've', u'fortygigabitethernet', u'gigabitethernet', u'tengigabitethernet', u'hundredgigabitethernet']

		:param bsr_cand_intf_id: String;;Interface ID
		:type bsr_cand_intf_id: (unicode)

		:param hash_mask_length: BSR hash mask
		:type hash_mask_length: (int)
		
		.. note::
			* range - ['0..65535']

		:param bsr_cand_priority: BSR priority
		:type bsr_cand_priority: (long)
		
		.. note::
			* range - ['0..4294967295']

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = [('pybind.nos.v7_1_0.rbridge_id', 'rbridge_id'), ('pybind.nos.v6_0_2b.rbridge_id', 'rbridge_id'), ('pybind.nos.v7_0_1a.rbridge_id', 'rbridge_id')]
    bindings_list = [('pybind.nos.v6_0_2b.rbridge_id.router.hide_pim_holder.pim.bsr_candidate.bsr_cand_interface', 'pybind.nos.v6_0_2b.brocade_rbridge', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.rbridge_id.router.hide_pim_holder.pim.bsr_candidate.bsr_cand_interface', 'pybind.nos.v7_0_1a.brocade_rbridge', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.rbridge_id.router.hide_pim_holder.pim.bsr_candidate.bsr_cand_interface', 'pybind.nos.v7_1_0.brocade_rbridge', 'pybind.nos.v7_1_0')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'rbridge_id', 'extra_keyval': ''}, {'keyval': 'rbridge_id', 'extra_keyval': ''}, {'keyval': 'rbridge_id', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'bsr_cand_interface', 'keyval': 'bsr_cand_intf_type, bsr_cand_intf_id', 'extra_keyval': 'bsr_cand_intf_type, bsr_cand_intf_id, hash_mask_length, bsr_cand_priority'}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, rbridge_id=rbridge_id, bsr_cand_interface=bsr_cand_interface)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def rbridge_id_router_pim_rp_address_delete(self, rbridge_id=None, rp_address=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		NOS: 6.0.2b, 7.0.1a, 7.1.0    

	**Parent Instance Keyword Arg Tuple(s)**:
		:param rbridge_id: kwarg tuple.
		:type rbridge_id: (rbridge_id).

		:param rbridge_id: tuple arg.
		:type rbridge_id: (long)
		
		.. note::
			* range - ['0..4294967295']

	**This Instance Keyword Arg Tuple**:
		:param rp_address: kwarg tuple.
		:type rp_address: (rp_ip_addr, prefix_list).

		:param rp_ip_addr: tuple arg.
		:type rp_ip_addr: (unicode)
		
		.. note::
			* pattern - (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?

		:param prefix_list: Prefix list
		:type prefix_list: (unicode)
		
		.. note::
			* pattern - [a-zA-Z]{1}([-a-zA-Z0-9\.\\\\@#\+\*\(\)=\{~\}%<>=$_\[\]\|]{0,31})

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = [('pybind.nos.v7_0_1a.rbridge_id', 'rbridge_id'), ('pybind.nos.v7_1_0.rbridge_id', 'rbridge_id'), ('pybind.nos.v6_0_2b.rbridge_id', 'rbridge_id')]
    bindings_list = [('pybind.nos.v6_0_2b.rbridge_id.router.hide_pim_holder.pim.rp_address', 'pybind.nos.v6_0_2b.brocade_rbridge', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.rbridge_id.router.hide_pim_holder.pim.rp_address', 'pybind.nos.v7_0_1a.brocade_rbridge', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.rbridge_id.router.hide_pim_holder.pim.rp_address', 'pybind.nos.v7_1_0.brocade_rbridge', 'pybind.nos.v7_1_0')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'rbridge_id', 'extra_keyval': ''}, {'keyval': 'rbridge_id', 'extra_keyval': ''}, {'keyval': 'rbridge_id', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'rp_address', 'keyval': 'rp_ip_addr', 'extra_keyval': 'rp_ip_addr, prefix_list'}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, rbridge_id=rbridge_id, rp_address=rp_address)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def rbridge_id_router_pim_rp_candidate_delete(self, rbridge_id=None, rp_cand_grp_prefix=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		NOS: 6.0.2b    

	**Parent Instance Keyword Arg Tuple(s)**:
		:param rbridge_id: kwarg tuple.
		:type rbridge_id: (rbridge_id).

		:param rbridge_id: tuple arg.
		:type rbridge_id: (long)
		
		.. note::
			* range - ['0..4294967295']

	**This Instance Keyword Arg Tuple**:
		:param rp_cand_grp_prefix: kwarg tuple.
		:type rp_cand_grp_prefix: (rp_cand_grp_prefix_action, rp_cand_grp_prefix_ip, rp_cand_grp_prefix_length).

		:param rp_cand_grp_prefix_action: tuple arg.
		:type rp_cand_grp_prefix_action: (unicode)
		
		.. note::
			* enum - [u'add', u'delete']

		:param rp_cand_grp_prefix_ip: tuple arg.
		:type rp_cand_grp_prefix_ip: (unicode)
		
		.. note::
			* pattern - (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?

		:param rp_cand_grp_prefix_length: tuple arg.
		:type rp_cand_grp_prefix_length: (int)
		
		.. note::
			* range - ['0..65535']

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = [('pybind.nos.v6_0_2b.rbridge_id', 'rbridge_id')]
    bindings_list = [('pybind.nos.v6_0_2b.rbridge_id.router.hide_pim_holder.pim.rp_candidate.rp_cand_grp_prefix', 'pybind.nos.v6_0_2b.brocade_rbridge', 'pybind.nos.v6_0_2b')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'rbridge_id', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'rp_cand_grp_prefix', 'keyval': 'rp_cand_grp_prefix_action, rp_cand_grp_prefix_ip, rp_cand_grp_prefix_length', 'extra_keyval': 'rp_cand_grp_prefix_action, rp_cand_grp_prefix_ip, rp_cand_grp_prefix_length'}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, rbridge_id=rbridge_id, rp_cand_grp_prefix=rp_cand_grp_prefix)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def rbridge_id_router_pim_rp_candidate_group_range_delete(self, rbridge_id=None, rp_cand_grp_prefix=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		NOS: 7.0.1a, 7.1.0    

	**Parent Instance Keyword Arg Tuple(s)**:
		:param rbridge_id: kwarg tuple.
		:type rbridge_id: (rbridge_id).

		:param rbridge_id: tuple arg.
		:type rbridge_id: (long)
		
		.. note::
			* range - ['0..4294967295']

	**This Instance Keyword Arg Tuple**:
		:param rp_cand_grp_prefix: kwarg tuple.
		:type rp_cand_grp_prefix: (rp_cand_grp_prefix_ip, rp_cand_grp_prefix_length).

		:param rp_cand_grp_prefix_ip: tuple arg.
		:type rp_cand_grp_prefix_ip: (unicode)
		
		.. note::
			* pattern - (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?

		:param rp_cand_grp_prefix_length: tuple arg.
		:type rp_cand_grp_prefix_length: (int)
		
		.. note::
			* range - ['0..65535']

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = [('pybind.nos.v7_1_0.rbridge_id', 'rbridge_id'), ('pybind.nos.v7_0_1a.rbridge_id', 'rbridge_id')]
    bindings_list = [('pybind.nos.v7_0_1a.rbridge_id.router.hide_pim_holder.pim.rp_candidate.rp_cand_grp_prefix', 'pybind.nos.v7_0_1a.brocade_rbridge', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.rbridge_id.router.hide_pim_holder.pim.rp_candidate.rp_cand_grp_prefix', 'pybind.nos.v7_1_0.brocade_rbridge', 'pybind.nos.v7_1_0')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'rbridge_id', 'extra_keyval': ''}, {'keyval': 'rbridge_id', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'rp_cand_grp_prefix', 'keyval': 'rp_cand_grp_prefix_ip, rp_cand_grp_prefix_length', 'extra_keyval': 'rp_cand_grp_prefix_ip, rp_cand_grp_prefix_length'}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, rbridge_id=rbridge_id, rp_cand_grp_prefix=rp_cand_grp_prefix)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def rbridge_id_router_pim_rp_candidate_interface_delete(self, rbridge_id=None, rp_cand_interface=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		NOS: 6.0.2b, 7.0.1a, 7.1.0    

	**Parent Instance Keyword Arg Tuple(s)**:
		:param rbridge_id: kwarg tuple.
		:type rbridge_id: (rbridge_id).

		:param rbridge_id: tuple arg.
		:type rbridge_id: (long)
		
		.. note::
			* range - ['0..4294967295']

	**This Instance Keyword Arg Tuple**:
		:param rp_cand_interface: kwarg tuple.
		:type rp_cand_interface: (rp_cand_intf_type, rp_cand_intf_id).

		:param rp_cand_intf_type: tuple arg.
		:type rp_cand_intf_type: (unicode)
		
		.. note::
			* enum - [u'port-channel', u've', u'fortygigabitethernet', u'gigabitethernet', u'tengigabitethernet', u'hundredgigabitethernet']

		:param rp_cand_intf_id: Interface ID
		:type rp_cand_intf_id: (unicode)

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = [('pybind.nos.v7_0_1a.rbridge_id', 'rbridge_id'), ('pybind.nos.v7_1_0.rbridge_id', 'rbridge_id'), ('pybind.nos.v6_0_2b.rbridge_id', 'rbridge_id')]
    bindings_list = [('pybind.nos.v6_0_2b.rbridge_id.router.hide_pim_holder.pim.rp_candidate.rp_cand_interface', 'pybind.nos.v6_0_2b.brocade_rbridge', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.rbridge_id.router.hide_pim_holder.pim.rp_candidate.rp_cand_interface', 'pybind.nos.v7_0_1a.brocade_rbridge', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.rbridge_id.router.hide_pim_holder.pim.rp_candidate.rp_cand_interface', 'pybind.nos.v7_1_0.brocade_rbridge', 'pybind.nos.v7_1_0')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'rbridge_id', 'extra_keyval': ''}, {'keyval': 'rbridge_id', 'extra_keyval': ''}, {'keyval': 'rbridge_id', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'rp_cand_interface', 'keyval': 'rp_cand_intf_type, rp_cand_intf_id', 'extra_keyval': 'rp_cand_intf_type, rp_cand_intf_id'}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, rbridge_id=rbridge_id, rp_cand_interface=rp_cand_interface)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def rbridge_id_secpolicy_active_policy_delete(self, rbridge_id=None, policies=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		NOS: 6.0.2b, 7.0.1a, 7.1.0    

	**Parent Instance Keyword Arg Tuple(s)**:
		:param rbridge_id: kwarg tuple.
		:type rbridge_id: (rbridge_id).

		:param rbridge_id: tuple arg.
		:type rbridge_id: (long)
		
		.. note::
			* range - ['0..4294967295']

	**This Instance Keyword Arg Tuple**:
		:param policies: kwarg tuple.
		:type policies: (policy).

		:param policy: tuple arg.
		:type policy: (unicode)
		
		.. note::
			* pattern - SCC_POLICY

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = [('pybind.nos.v6_0_2b.rbridge_id', 'rbridge_id'), ('pybind.nos.v7_1_0.rbridge_id', 'rbridge_id'), ('pybind.nos.v7_0_1a.rbridge_id', 'rbridge_id')]
    bindings_list = [('pybind.nos.v6_0_2b.rbridge_id.secpolicy.active_policy.policies', 'pybind.nos.v6_0_2b.brocade_rbridge', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.rbridge_id.secpolicy.active_policy.policies', 'pybind.nos.v7_0_1a.brocade_rbridge', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.rbridge_id.secpolicy.active_policy.policies', 'pybind.nos.v7_1_0.brocade_rbridge', 'pybind.nos.v7_1_0')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'rbridge_id', 'extra_keyval': ''}, {'keyval': 'rbridge_id', 'extra_keyval': ''}, {'keyval': 'rbridge_id', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'policies', 'keyval': 'policy', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, rbridge_id=rbridge_id, policies=policies)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def rbridge_id_secpolicy_active_policy_member_entry_delete(self, rbridge_id=None, policies=None, member_entry=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		NOS: 6.0.2b, 7.0.1a, 7.1.0    

	**Parent Instance Keyword Arg Tuple(s)**:
		:param rbridge_id: kwarg tuple.
		:type rbridge_id: (rbridge_id).

		:param rbridge_id: tuple arg.
		:type rbridge_id: (long)
		
		.. note::
			* range - ['0..4294967295']

		:param policies: kwarg tuple.
		:type policies: (policy).

		:param policy: tuple arg.
		:type policy: (unicode)
		
		.. note::
			* pattern - SCC_POLICY

	**This Instance Keyword Arg Tuple**:
		:param member_entry: kwarg tuple.
		:type member_entry: (member).

		:param member: WWN of the switch
		:type member: (unicode)

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = [('pybind.nos.v7_1_0.rbridge_id', 'rbridge_id'), ('pybind.nos.v7_1_0.rbridge_id.secpolicy.active_policy.policies', u'policies'), ('pybind.nos.v6_0_2b.rbridge_id', 'rbridge_id'), ('pybind.nos.v6_0_2b.rbridge_id.secpolicy.active_policy.policies', u'policies'), ('pybind.nos.v7_0_1a.rbridge_id', 'rbridge_id'), ('pybind.nos.v7_0_1a.rbridge_id.secpolicy.active_policy.policies', u'policies')]
    bindings_list = [('pybind.nos.v6_0_2b.rbridge_id.secpolicy.active_policy.policies.member_entry', 'pybind.nos.v6_0_2b.brocade_rbridge', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.rbridge_id.secpolicy.active_policy.policies.member_entry', 'pybind.nos.v7_0_1a.brocade_rbridge', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.rbridge_id.secpolicy.active_policy.policies.member_entry', 'pybind.nos.v7_1_0.brocade_rbridge', 'pybind.nos.v7_1_0')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'rbridge_id', 'extra_keyval': ''}, {'keyval': 'policy', 'extra_keyval': ''}, {'keyval': 'rbridge_id', 'extra_keyval': ''}, {'keyval': 'policy', 'extra_keyval': ''}, {'keyval': 'rbridge_id', 'extra_keyval': ''}, {'keyval': 'policy', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'member_entry', 'keyval': 'member', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, rbridge_id=rbridge_id, policies=policies, member_entry=member_entry)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def rbridge_id_secpolicy_defined_policy_delete(self, rbridge_id=None, policies=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		NOS: 6.0.2b, 7.0.1a, 7.1.0    

	**Parent Instance Keyword Arg Tuple(s)**:
		:param rbridge_id: kwarg tuple.
		:type rbridge_id: (rbridge_id).

		:param rbridge_id: tuple arg.
		:type rbridge_id: (long)
		
		.. note::
			* range - ['0..4294967295']

	**This Instance Keyword Arg Tuple**:
		:param policies: kwarg tuple.
		:type policies: (policy).

		:param policy: tuple arg.
		:type policy: (unicode)
		
		.. note::
			* pattern - SCC_POLICY

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = [('pybind.nos.v7_0_1a.rbridge_id', 'rbridge_id'), ('pybind.nos.v7_1_0.rbridge_id', 'rbridge_id'), ('pybind.nos.v6_0_2b.rbridge_id', 'rbridge_id')]
    bindings_list = [('pybind.nos.v6_0_2b.rbridge_id.secpolicy.defined_policy.policies', 'pybind.nos.v6_0_2b.brocade_rbridge', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.rbridge_id.secpolicy.defined_policy.policies', 'pybind.nos.v7_0_1a.brocade_rbridge', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.rbridge_id.secpolicy.defined_policy.policies', 'pybind.nos.v7_1_0.brocade_rbridge', 'pybind.nos.v7_1_0')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'rbridge_id', 'extra_keyval': ''}, {'keyval': 'rbridge_id', 'extra_keyval': ''}, {'keyval': 'rbridge_id', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'policies', 'keyval': 'policy', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, rbridge_id=rbridge_id, policies=policies)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def rbridge_id_secpolicy_defined_policy_member_entry_delete(self, rbridge_id=None, policies=None, member_entry=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		NOS: 6.0.2b, 7.0.1a, 7.1.0    

	**Parent Instance Keyword Arg Tuple(s)**:
		:param rbridge_id: kwarg tuple.
		:type rbridge_id: (rbridge_id).

		:param rbridge_id: tuple arg.
		:type rbridge_id: (long)
		
		.. note::
			* range - ['0..4294967295']

		:param policies: kwarg tuple.
		:type policies: (policy).

		:param policy: tuple arg.
		:type policy: (unicode)
		
		.. note::
			* pattern - SCC_POLICY

	**This Instance Keyword Arg Tuple**:
		:param member_entry: kwarg tuple.
		:type member_entry: (member).

		:param member: WWN of the switch
		:type member: (unicode)

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = [('pybind.nos.v6_0_2b.rbridge_id', 'rbridge_id'), ('pybind.nos.v6_0_2b.rbridge_id.secpolicy.defined_policy.policies', u'policies'), ('pybind.nos.v7_0_1a.rbridge_id', 'rbridge_id'), ('pybind.nos.v7_0_1a.rbridge_id.secpolicy.defined_policy.policies', u'policies'), ('pybind.nos.v7_1_0.rbridge_id', 'rbridge_id'), ('pybind.nos.v7_1_0.rbridge_id.secpolicy.defined_policy.policies', u'policies')]
    bindings_list = [('pybind.nos.v6_0_2b.rbridge_id.secpolicy.defined_policy.policies.member_entry', 'pybind.nos.v6_0_2b.brocade_rbridge', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.rbridge_id.secpolicy.defined_policy.policies.member_entry', 'pybind.nos.v7_0_1a.brocade_rbridge', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.rbridge_id.secpolicy.defined_policy.policies.member_entry', 'pybind.nos.v7_1_0.brocade_rbridge', 'pybind.nos.v7_1_0')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'rbridge_id', 'extra_keyval': ''}, {'keyval': 'policy', 'extra_keyval': ''}, {'keyval': 'rbridge_id', 'extra_keyval': ''}, {'keyval': 'policy', 'extra_keyval': ''}, {'keyval': 'rbridge_id', 'extra_keyval': ''}, {'keyval': 'policy', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'member_entry', 'keyval': 'member', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, rbridge_id=rbridge_id, policies=policies, member_entry=member_entry)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def rbridge_id_snmp_server_user_delete(self, rbridge_id=None, user=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		NOS: 6.0.2b, 7.0.1a, 7.1.0    

	**Parent Instance Keyword Arg Tuple(s)**:
		:param rbridge_id: kwarg tuple.
		:type rbridge_id: (rbridge_id).

		:param rbridge_id: tuple arg.
		:type rbridge_id: (long)
		
		.. note::
			* range - ['0..4294967295']

	**This Instance Keyword Arg Tuple**:
		:param user: kwarg tuple.
		:type user: (username, groupname, auth, auth_password, priv, priv_password, encrypted).

		:param username: tuple arg.
		:type username: (unicode)
		
		.. note::
			* length - [u'1 .. 25']

		:param groupname: tuple arg.
		:type groupname: (unicode)

		:param auth: Authorization protocol for username
(Default=noauth)
		:type auth: (unicode)
		
		.. note::
			* enum - [u'sha', u'noauth', u'md5']

		:param auth_password: Authorization password associated with
username
		:type auth_password: (unicode)

		:param priv: Privacy protocol for username (Default=nopriv)
		:type priv: (unicode)
		
		.. note::
			* enum - [u'AES128', u'DES', u'nopriv']

		:param priv_password: Privacy password associated with username
		:type priv_password: (unicode)

		:param encrypted: This flag is used to enter the auth/priv
passwords as encrypted.(Default=disable)
		:type encrypted: (YANGBool)

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = [('pybind.nos.v7_0_1a.rbridge_id', 'rbridge_id'), ('pybind.nos.v6_0_2b.rbridge_id', 'rbridge_id'), ('pybind.nos.v7_1_0.rbridge_id', 'rbridge_id')]
    bindings_list = [('pybind.nos.v6_0_2b.rbridge_id.snmp_server.user', 'pybind.nos.v6_0_2b.brocade_rbridge', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.rbridge_id.snmp_server.user', 'pybind.nos.v7_0_1a.brocade_rbridge', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.rbridge_id.snmp_server.user', 'pybind.nos.v7_1_0.brocade_rbridge', 'pybind.nos.v7_1_0')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'rbridge_id', 'extra_keyval': ''}, {'keyval': 'rbridge_id', 'extra_keyval': ''}, {'keyval': 'rbridge_id', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'user', 'keyval': 'username', 'extra_keyval': 'username, groupname, auth, auth_password, priv, priv_password, encrypted'}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, rbridge_id=rbridge_id, user=user)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def rbridge_id_snmp_server_v3host_delete(self, rbridge_id=None, v3host=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		NOS: 6.0.2b, 7.0.1a, 7.1.0    

	**Parent Instance Keyword Arg Tuple(s)**:
		:param rbridge_id: kwarg tuple.
		:type rbridge_id: (rbridge_id).

		:param rbridge_id: tuple arg.
		:type rbridge_id: (long)
		
		.. note::
			* range - ['0..4294967295']

	**This Instance Keyword Arg Tuple**:
		:param v3host: kwarg tuple.
		:type v3host: (hostip, username).

		:param hostip: ipv4/ipv6/dns address of the notification recipient
associated with username. Notifications
will be sent to this host
		:type hostip: (unicode)
		
		.. note::
			* pattern - (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?

		:param username: Username associated with notification type.
		:type username: (unicode)

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = [('pybind.nos.v7_0_1a.rbridge_id', 'rbridge_id'), ('pybind.nos.v6_0_2b.rbridge_id', 'rbridge_id'), ('pybind.nos.v7_1_0.rbridge_id', 'rbridge_id')]
    bindings_list = [('pybind.nos.v6_0_2b.rbridge_id.snmp_server.v3host', 'pybind.nos.v6_0_2b.brocade_rbridge', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.rbridge_id.snmp_server.v3host', 'pybind.nos.v7_0_1a.brocade_rbridge', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.rbridge_id.snmp_server.v3host', 'pybind.nos.v7_1_0.brocade_rbridge', 'pybind.nos.v7_1_0')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'rbridge_id', 'extra_keyval': ''}, {'keyval': 'rbridge_id', 'extra_keyval': ''}, {'keyval': 'rbridge_id', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'v3host', 'keyval': 'hostip, username', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, rbridge_id=rbridge_id, v3host=v3host)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def rbridge_id_ssh_server_use_vrf_delete(self, rbridge_id=None, use_vrf=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		NOS: 6.0.2b, 7.0.1a, 7.1.0    

	**Parent Instance Keyword Arg Tuple(s)**:
		:param rbridge_id: kwarg tuple.
		:type rbridge_id: (rbridge_id).

		:param rbridge_id: tuple arg.
		:type rbridge_id: (long)
		
		.. note::
			* range - ['0..4294967295']

	**This Instance Keyword Arg Tuple**:
		:param use_vrf: kwarg tuple.
		:type use_vrf: (use_vrf_name, ssh_vrf_shutdown).

		:param use_vrf_name: tuple arg.
		:type use_vrf_name: (unicode)
		
		.. note::
			* length - [u'0 .. max']

		:param ssh_vrf_shutdown: Shutdown SSH server on given vrf
		:type ssh_vrf_shutdown: (YANGBool)

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = [('pybind.nos.v7_0_1a.rbridge_id', 'rbridge_id'), ('pybind.nos.v7_1_0.rbridge_id', 'rbridge_id'), ('pybind.nos.v6_0_2b.rbridge_id', 'rbridge_id')]
    bindings_list = [('pybind.nos.v6_0_2b.rbridge_id.ssh.server.ssh_vrf_cont.use_vrf', 'pybind.nos.v6_0_2b.brocade_rbridge', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.rbridge_id.ssh.server.ssh_vrf_cont.use_vrf', 'pybind.nos.v7_0_1a.brocade_rbridge', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.rbridge_id.ssh.server.ssh_vrf_cont.use_vrf', 'pybind.nos.v7_1_0.brocade_rbridge', 'pybind.nos.v7_1_0')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'rbridge_id', 'extra_keyval': ''}, {'keyval': 'rbridge_id', 'extra_keyval': ''}, {'keyval': 'rbridge_id', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'use_vrf', 'keyval': 'use_vrf_name', 'extra_keyval': 'use_vrf_name, ssh_vrf_shutdown'}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, rbridge_id=rbridge_id, use_vrf=use_vrf)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def rbridge_id_telnet_server_use_vrf_delete(self, rbridge_id=None, use_vrf=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		NOS: 6.0.2b, 7.0.1a, 7.1.0    

	**Parent Instance Keyword Arg Tuple(s)**:
		:param rbridge_id: kwarg tuple.
		:type rbridge_id: (rbridge_id).

		:param rbridge_id: tuple arg.
		:type rbridge_id: (long)
		
		.. note::
			* range - ['0..4294967295']

	**This Instance Keyword Arg Tuple**:
		:param use_vrf: kwarg tuple.
		:type use_vrf: (use_vrf_name, telnet_vrf_shutdown).

		:param use_vrf_name: tuple arg.
		:type use_vrf_name: (unicode)
		
		.. note::
			* length - [u'0 .. max']

		:param telnet_vrf_shutdown: Shutdown telnet server on given vrf
		:type telnet_vrf_shutdown: (YANGBool)

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = [('pybind.nos.v7_0_1a.rbridge_id', 'rbridge_id'), ('pybind.nos.v7_1_0.rbridge_id', 'rbridge_id'), ('pybind.nos.v6_0_2b.rbridge_id', 'rbridge_id')]
    bindings_list = [('pybind.nos.v6_0_2b.rbridge_id.telnet.server.telnet_vrf_cont.use_vrf', 'pybind.nos.v6_0_2b.brocade_rbridge', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.rbridge_id.telnet.server.telnet_vrf_cont.use_vrf', 'pybind.nos.v7_0_1a.brocade_rbridge', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.rbridge_id.telnet.server.telnet_vrf_cont.use_vrf', 'pybind.nos.v7_1_0.brocade_rbridge', 'pybind.nos.v7_1_0')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'rbridge_id', 'extra_keyval': ''}, {'keyval': 'rbridge_id', 'extra_keyval': ''}, {'keyval': 'rbridge_id', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'use_vrf', 'keyval': 'use_vrf_name', 'extra_keyval': 'use_vrf_name, telnet_vrf_shutdown'}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, rbridge_id=rbridge_id, use_vrf=use_vrf)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def rbridge_id_threshold_monitor_interface_policy_delete(self, rbridge_id=None, policy=None, area=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		NOS: 6.0.2b, 7.0.1a, 7.1.0
		SLXOS: 16r.1.00b    

	**Parent Instance Keyword Arg Tuple(s)**:
		:param rbridge_id: kwarg tuple.
		:type rbridge_id: (rbridge_id).

		:param rbridge_id: tuple arg.
		:type rbridge_id: (long)
		
		.. note::
			* range - ['0..4294967295']

		:param policy: kwarg tuple.
		:type policy: (policy_name).

		:param policy_name: tuple arg.
		:type policy_name: (unicode)

	**This Instance Keyword Arg Tuple**:
		:param area: kwarg tuple.
		:type area: (type, area_value).

		:param type: Interface types that can be configured independent of speed
		:type type: (unicode)
		
		.. note::
			* enum - [u'Ethernet']

		:param area_value: tuple arg.
		:type area_value: (unicode)
		
		.. note::
			* enum - [u'MissingTerminationCharacter', u'CRCAlignErrors', u'IFG', u'SymbolErrors']

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = [('pybind.nos.v6_0_2b.rbridge_id', 'rbridge_id'), ('pybind.nos.v6_0_2b.rbridge_id.threshold_monitor.interface.policy', u'policy'), ('pybind.nos.v7_0_1a.rbridge_id', 'rbridge_id'), ('pybind.nos.v7_0_1a.rbridge_id.threshold_monitor.interface.policy', u'policy'), ('pybind.slxos.v16r_1_00b.rbridge_id', 'rbridge_id'), ('pybind.slxos.v16r_1_00b.rbridge_id.threshold_monitor.interface.policy', u'policy'), ('pybind.nos.v7_1_0.rbridge_id', 'rbridge_id'), ('pybind.nos.v7_1_0.rbridge_id.threshold_monitor.interface.policy', u'policy')]
    bindings_list = [('pybind.nos.v6_0_2b.rbridge_id.threshold_monitor.interface.policy.area', 'pybind.nos.v6_0_2b.brocade_rbridge', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.rbridge_id.threshold_monitor.interface.policy.area', 'pybind.nos.v7_0_1a.brocade_rbridge', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.rbridge_id.threshold_monitor.interface.policy.area', 'pybind.nos.v7_1_0.brocade_rbridge', 'pybind.nos.v7_1_0'), ('pybind.slxos.v16r_1_00b.rbridge_id.threshold_monitor.interface.policy.area', 'pybind.slxos.v16r_1_00b.brocade_rbridge', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'rbridge_id', 'extra_keyval': ''}, {'keyval': 'policy_name', 'extra_keyval': 'policy_name'}, {'keyval': 'rbridge_id', 'extra_keyval': ''}, {'keyval': 'policy_name', 'extra_keyval': 'policy_name'}, {'keyval': 'rbridge_id', 'extra_keyval': ''}, {'keyval': 'policy_name', 'extra_keyval': 'policy_name'}, {'keyval': 'rbridge_id', 'extra_keyval': ''}, {'keyval': 'policy_name', 'extra_keyval': 'policy_name'}]
    bindings_keyval = {'kwargs_key_name': u'area', 'keyval': 'type, area_value', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, rbridge_id=rbridge_id, policy=policy, area=area)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def rbridge_id_threshold_monitor_security_policy_delete(self, rbridge_id=None, policy=None, area=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		NOS: 6.0.2b, 7.0.1a, 7.1.0
		SLXOS: 16r.1.00b    

	**Parent Instance Keyword Arg Tuple(s)**:
		:param rbridge_id: kwarg tuple.
		:type rbridge_id: (rbridge_id).

		:param rbridge_id: tuple arg.
		:type rbridge_id: (long)
		
		.. note::
			* range - ['0..4294967295']

		:param policy: kwarg tuple.
		:type policy: (sec_policy_name).

		:param sec_policy_name: tuple arg.
		:type sec_policy_name: (unicode)

	**This Instance Keyword Arg Tuple**:
		:param area: kwarg tuple.
		:type area: (sec_area_value).

		:param sec_area_value: Security Areas
		:type sec_area_value: (unicode)
		
		.. note::
			* enum - [u'telnet-violation', u'login-violation']

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = [('pybind.nos.v7_0_1a.rbridge_id', 'rbridge_id'), ('pybind.nos.v7_0_1a.rbridge_id.threshold_monitor.security.policy', u'policy'), ('pybind.nos.v6_0_2b.rbridge_id', 'rbridge_id'), ('pybind.nos.v6_0_2b.rbridge_id.threshold_monitor.security.policy', u'policy'), ('pybind.slxos.v16r_1_00b.rbridge_id', 'rbridge_id'), ('pybind.slxos.v16r_1_00b.rbridge_id.threshold_monitor.security.policy', u'policy'), ('pybind.nos.v7_1_0.rbridge_id', 'rbridge_id'), ('pybind.nos.v7_1_0.rbridge_id.threshold_monitor.security.policy', u'policy')]
    bindings_list = [('pybind.nos.v6_0_2b.rbridge_id.threshold_monitor.security.policy.area', 'pybind.nos.v6_0_2b.brocade_rbridge', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.rbridge_id.threshold_monitor.security.policy.area', 'pybind.nos.v7_0_1a.brocade_rbridge', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.rbridge_id.threshold_monitor.security.policy.area', 'pybind.nos.v7_1_0.brocade_rbridge', 'pybind.nos.v7_1_0'), ('pybind.slxos.v16r_1_00b.rbridge_id.threshold_monitor.security.policy.area', 'pybind.slxos.v16r_1_00b.brocade_rbridge', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'rbridge_id', 'extra_keyval': ''}, {'keyval': 'sec_policy_name', 'extra_keyval': 'sec_policy_name'}, {'keyval': 'rbridge_id', 'extra_keyval': ''}, {'keyval': 'sec_policy_name', 'extra_keyval': 'sec_policy_name'}, {'keyval': 'rbridge_id', 'extra_keyval': ''}, {'keyval': 'sec_policy_name', 'extra_keyval': 'sec_policy_name'}, {'keyval': 'rbridge_id', 'extra_keyval': ''}, {'keyval': 'sec_policy_name', 'extra_keyval': 'sec_policy_name'}]
    bindings_keyval = {'kwargs_key_name': u'area', 'keyval': 'sec_area_value', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, rbridge_id=rbridge_id, policy=policy, area=area)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def rbridge_id_threshold_monitor_sfp_policy_delete(self, rbridge_id=None, policy=None, area=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		NOS: 6.0.2b, 7.0.1a, 7.1.0
		SLXOS: 16r.1.00b    

	**Parent Instance Keyword Arg Tuple(s)**:
		:param rbridge_id: kwarg tuple.
		:type rbridge_id: (rbridge_id).

		:param rbridge_id: tuple arg.
		:type rbridge_id: (long)
		
		.. note::
			* range - ['0..4294967295']

		:param policy: kwarg tuple.
		:type policy: (policy_name).

		:param policy_name: tuple arg.
		:type policy_name: (unicode)

	**This Instance Keyword Arg Tuple**:
		:param area: kwarg tuple.
		:type area: (type, area_value).

		:param type: SFP types that can be configured
		:type type: (unicode)
		
		.. note::
			* enum - [u'10GLR', u'1GLR', u'100GSR', u'10GUSR', u'1GSR', u'10GSR', u'QSFP']

		:param area_value: tuple arg.
		:type area_value: (unicode)
		
		.. note::
			* enum - [u'Current', u'RXP', u'TXP', u'Voltage', u'Temperature']

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = [('pybind.nos.v7_1_0.rbridge_id', 'rbridge_id'), ('pybind.nos.v7_1_0.rbridge_id.threshold_monitor.sfp.policy', u'policy'), ('pybind.nos.v6_0_2b.rbridge_id', 'rbridge_id'), ('pybind.nos.v6_0_2b.rbridge_id.threshold_monitor.sfp.policy', u'policy'), ('pybind.slxos.v16r_1_00b.rbridge_id', 'rbridge_id'), ('pybind.slxos.v16r_1_00b.rbridge_id.threshold_monitor.sfp.policy', u'policy'), ('pybind.nos.v7_0_1a.rbridge_id', 'rbridge_id'), ('pybind.nos.v7_0_1a.rbridge_id.threshold_monitor.sfp.policy', u'policy')]
    bindings_list = [('pybind.nos.v6_0_2b.rbridge_id.threshold_monitor.sfp.policy.area', 'pybind.nos.v6_0_2b.brocade_rbridge', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.rbridge_id.threshold_monitor.sfp.policy.area', 'pybind.nos.v7_0_1a.brocade_rbridge', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.rbridge_id.threshold_monitor.sfp.policy.area', 'pybind.nos.v7_1_0.brocade_rbridge', 'pybind.nos.v7_1_0'), ('pybind.slxos.v16r_1_00b.rbridge_id.threshold_monitor.sfp.policy.area', 'pybind.slxos.v16r_1_00b.brocade_rbridge', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'rbridge_id', 'extra_keyval': ''}, {'keyval': 'policy_name', 'extra_keyval': 'policy_name'}, {'keyval': 'rbridge_id', 'extra_keyval': ''}, {'keyval': 'policy_name', 'extra_keyval': 'policy_name'}, {'keyval': 'rbridge_id', 'extra_keyval': ''}, {'keyval': 'policy_name', 'extra_keyval': 'policy_name'}, {'keyval': 'rbridge_id', 'extra_keyval': ''}, {'keyval': 'policy_name', 'extra_keyval': 'policy_name'}]
    bindings_keyval = {'kwargs_key_name': u'area', 'keyval': 'type, area_value', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, rbridge_id=rbridge_id, policy=policy, area=area)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def rbridge_id_vrf_delete(self, rbridge_id=None, vrf=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		NOS: 6.0.2b, 7.0.1a, 7.1.0    

	**Parent Instance Keyword Arg Tuple(s)**:
		:param rbridge_id: kwarg tuple.
		:type rbridge_id: (rbridge_id).

		:param rbridge_id: tuple arg.
		:type rbridge_id: (long)
		
		.. note::
			* range - ['0..4294967295']

	**This Instance Keyword Arg Tuple**:
		:param vrf: kwarg tuple.
		:type vrf: (vrf_name).

		:param vrf_name: <WORD:1-32>;;Name of VRF
		:type vrf_name: (unicode)
		
		.. note::
			* length - [u'1..32']
			* pattern - ((([a-zA-Z0-9_]([a-zA-Z0-9\-_]){0,61})?[a-zA-Z0-9]\.)*([a-zA-Z0-9_]([a-zA-Z0-9\-_]){0,61})?[a-zA-Z0-9]\.?)|\.

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = [('pybind.nos.v7_0_1a.rbridge_id', 'rbridge_id'), ('pybind.nos.v7_1_0.rbridge_id', 'rbridge_id'), ('pybind.nos.v6_0_2b.rbridge_id', 'rbridge_id')]
    bindings_list = [('pybind.nos.v6_0_2b.rbridge_id.vrf', 'pybind.nos.v6_0_2b.brocade_rbridge', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.rbridge_id.vrf', 'pybind.nos.v7_0_1a.brocade_rbridge', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.rbridge_id.vrf', 'pybind.nos.v7_1_0.brocade_rbridge', 'pybind.nos.v7_1_0')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'rbridge_id', 'extra_keyval': ''}, {'keyval': 'rbridge_id', 'extra_keyval': ''}, {'keyval': 'rbridge_id', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'vrf', 'keyval': 'vrf_name', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, rbridge_id=rbridge_id, vrf=vrf)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def rbridge_id_vrf_address_family_ipv4_unicast_arp_delete(self, rbridge_id=None, vrf=None, arp_entry=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		NOS: 6.0.2b, 7.0.1a, 7.1.0    

	**Parent Instance Keyword Arg Tuple(s)**:
		:param rbridge_id: kwarg tuple.
		:type rbridge_id: (rbridge_id).

		:param rbridge_id: tuple arg.
		:type rbridge_id: (long)
		
		.. note::
			* range - ['0..4294967295']

		:param vrf: kwarg tuple.
		:type vrf: (vrf_name).

		:param vrf_name: <WORD:1-32>;;Name of VRF
		:type vrf_name: (unicode)
		
		.. note::
			* length - [u'1..32']
			* pattern - ((([a-zA-Z0-9_]([a-zA-Z0-9\-_]){0,61})?[a-zA-Z0-9]\.)*([a-zA-Z0-9_]([a-zA-Z0-9\-_]){0,61})?[a-zA-Z0-9]\.?)|\.

	**This Instance Keyword Arg Tuple**:
		:param arp_entry: kwarg tuple.
		:type arp_entry: (arp_ip_address, mac_address_value, interfacename, GigabitEthernet, TenGigabitEthernet, FortyGigabitEthernet, HundredGigabitEthernet, Ve).

		:param arp_ip_address: A.B.C.D;; IP address of the ARP entry
		:type arp_ip_address: (unicode)
		
		.. note::
			* pattern - (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?

		:param mac_address_value: tuple arg.
		:type mac_address_value: (unicode)

		:param interfacename: tuple arg.
		:type interfacename: (unicode)
		
		.. note::
			* enum - [u'interface']

		:param GigabitEthernet: tuple arg.
		:type GigabitEthernet: (unicode)
		
		.. note::
			* length - [u'3..16']
			* pattern - ((([1-9]|[1-9][0-9]|1[0-9][0-9]|2[0-3][0-9])/)?(([0-9]|[1][0-6]))/([1-9]|[1-9][0-9]|[1-9][0-9][0-9])(:[1-4])?)

		:param TenGigabitEthernet: tuple arg.
		:type TenGigabitEthernet: (unicode)
		
		.. note::
			* length - [u'3..16']
			* pattern - ((([1-9]|[1-9][0-9]|1[0-9][0-9]|2[0-3][0-9])/)?(([0-9]|[1][0-6]))/([1-9]|[1-9][0-9]|[1-9][0-9][0-9])(:[1-4])?)

		:param FortyGigabitEthernet: tuple arg.
		:type FortyGigabitEthernet: (unicode)
		
		.. note::
			* length - [u'3..16']
			* pattern - ((([1-9]|[1-9][0-9]|1[0-9][0-9]|2[0-3][0-9])/)?(([0-9]|[1][0-6]))/([1-9]|[1-9][0-9]|[1-9][0-9][0-9])(:[1-4])?)

		:param HundredGigabitEthernet: tuple arg.
		:type HundredGigabitEthernet: (unicode)
		
		.. note::
			* length - [u'3..16']
			* pattern - ((([1-9]|[1-9][0-9]|1[0-9][0-9]|2[0-3][0-9])/)?(([0-9]|[1][0-6]))/([1-9]|[1-9][0-9]|[1-9][0-9][0-9])(:[1-4])?)

		:param Ve: tuple arg.
		:type Ve: (long)
		
		.. note::
			* range - ['0..4294967295']

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = [('pybind.nos.v7_0_1a.rbridge_id', 'rbridge_id'), ('pybind.nos.v7_0_1a.rbridge_id.vrf', u'vrf'), ('pybind.nos.v6_0_2b.rbridge_id', 'rbridge_id'), ('pybind.nos.v6_0_2b.rbridge_id.vrf', u'vrf'), ('pybind.nos.v7_1_0.rbridge_id', 'rbridge_id'), ('pybind.nos.v7_1_0.rbridge_id.vrf', u'vrf')]
    bindings_list = [('pybind.nos.v6_0_2b.rbridge_id.vrf.address_family.ip.unicast.arp_entry', 'pybind.nos.v6_0_2b.brocade_rbridge', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.rbridge_id.vrf.address_family.ip.unicast.arp_entry', 'pybind.nos.v7_0_1a.brocade_rbridge', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.rbridge_id.vrf.address_family.ip.unicast.arp_entry', 'pybind.nos.v7_1_0.brocade_rbridge', 'pybind.nos.v7_1_0')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'rbridge_id', 'extra_keyval': ''}, {'keyval': 'vrf_name', 'extra_keyval': ''}, {'keyval': 'rbridge_id', 'extra_keyval': ''}, {'keyval': 'vrf_name', 'extra_keyval': ''}, {'keyval': 'rbridge_id', 'extra_keyval': ''}, {'keyval': 'vrf_name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'arp_entry', 'keyval': 'arp_ip_address', 'extra_keyval': 'arp_ip_address, mac_address_value, interfacename, Port_channel, GigabitEthernet, TenGigabitEthernet, FortyGigabitEthernet, HundredGigabitEthernet, Ve'}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, rbridge_id=rbridge_id, vrf=vrf, arp_entry=arp_entry)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def rbridge_id_vrf_address_family_ipv4_unicast_ip_import_routes_delete(self, rbridge_id=None, vrf=None, routes=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		NOS: 6.0.2b, 7.0.1a, 7.1.0    

	**Parent Instance Keyword Arg Tuple(s)**:
		:param rbridge_id: kwarg tuple.
		:type rbridge_id: (rbridge_id).

		:param rbridge_id: tuple arg.
		:type rbridge_id: (long)
		
		.. note::
			* range - ['0..4294967295']

		:param vrf: kwarg tuple.
		:type vrf: (vrf_name).

		:param vrf_name: <WORD:1-32>;;Name of VRF
		:type vrf_name: (unicode)
		
		.. note::
			* length - [u'1..32']
			* pattern - ((([a-zA-Z0-9_]([a-zA-Z0-9\-_]){0,61})?[a-zA-Z0-9]\.)*([a-zA-Z0-9_]([a-zA-Z0-9\-_]){0,61})?[a-zA-Z0-9]\.?)|\.

	**This Instance Keyword Arg Tuple**:
		:param routes: kwarg tuple.
		:type routes: (src_vrf, route_map).

		:param src_vrf: ASCII string;;Name of VRF
		:type src_vrf: (unicode)
		
		.. note::
			* length - [u'1..32']
			* pattern - ((([a-zA-Z0-9_]([a-zA-Z0-9\-_]){0,61})?[a-zA-Z0-9]\.)*([a-zA-Z0-9_]([a-zA-Z0-9\-_]){0,61})?[a-zA-Z0-9]\.?)|\.

		:param route_map: Word:1-63;;Route map name
		:type route_map: (unicode)
		
		.. note::
			* pattern - [a-zA-Z]{1}([-a-zA-Z0-9\.\\\\@#\+\*\(\)=\{~\}%<>=$_\[\]\|]{0,62})

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = [('pybind.nos.v7_0_1a.rbridge_id', 'rbridge_id'), ('pybind.nos.v7_0_1a.rbridge_id.vrf', u'vrf'), ('pybind.nos.v7_1_0.rbridge_id', 'rbridge_id'), ('pybind.nos.v7_1_0.rbridge_id.vrf', u'vrf'), ('pybind.nos.v6_0_2b.rbridge_id', 'rbridge_id'), ('pybind.nos.v6_0_2b.rbridge_id.vrf', u'vrf')]
    bindings_list = [('pybind.nos.v6_0_2b.rbridge_id.vrf.address_family.ip.unicast.ip.import_.routes', 'pybind.nos.v6_0_2b.brocade_rbridge', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.rbridge_id.vrf.address_family.ip.unicast.ip.import_.routes', 'pybind.nos.v7_0_1a.brocade_rbridge', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.rbridge_id.vrf.address_family.ip.unicast.ip.import_.routes', 'pybind.nos.v7_1_0.brocade_rbridge', 'pybind.nos.v7_1_0')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'rbridge_id', 'extra_keyval': ''}, {'keyval': 'vrf_name', 'extra_keyval': ''}, {'keyval': 'rbridge_id', 'extra_keyval': ''}, {'keyval': 'vrf_name', 'extra_keyval': ''}, {'keyval': 'rbridge_id', 'extra_keyval': ''}, {'keyval': 'vrf_name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'routes', 'keyval': 'src_vrf, route_map', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, rbridge_id=rbridge_id, vrf=vrf, routes=routes)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def rbridge_id_vrf_address_family_ipv4_unicast_ip_route_delete(self, rbridge_id=None, vrf=None, static_route_nh_vrf=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		NOS: 6.0.2b, 7.0.1a, 7.1.0    

	**Parent Instance Keyword Arg Tuple(s)**:
		:param rbridge_id: kwarg tuple.
		:type rbridge_id: (rbridge_id).

		:param rbridge_id: tuple arg.
		:type rbridge_id: (long)
		
		.. note::
			* range - ['0..4294967295']

		:param vrf: kwarg tuple.
		:type vrf: (vrf_name).

		:param vrf_name: <WORD:1-32>;;Name of VRF
		:type vrf_name: (unicode)
		
		.. note::
			* length - [u'1..32']
			* pattern - ((([a-zA-Z0-9_]([a-zA-Z0-9\-_]){0,61})?[a-zA-Z0-9]\.)*([a-zA-Z0-9_]([a-zA-Z0-9\-_]){0,61})?[a-zA-Z0-9]\.?)|\.

	**This Instance Keyword Arg Tuple**:
		:param static_route_nh_vrf: kwarg tuple.
		:type static_route_nh_vrf: (static_route_next_vrf_dest, next_hop_vrf, static_route_next_hop).

		:param static_route_next_vrf_dest: A.B.C.D/L ;; Destination IP address
		:type static_route_next_vrf_dest: (unicode)
		
		.. note::
			* pattern - (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])/(([0-9])|([1-2][0-9])|(3[0-2]))

		:param next_hop_vrf: Next Hop Vrf Name
		:type next_hop_vrf: (unicode)

		:param static_route_next_hop: A.B.C.D ;; Next hop IP address
		:type static_route_next_hop: (unicode)
		
		.. note::
			* pattern - (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = [('pybind.nos.v7_1_0.rbridge_id', 'rbridge_id'), ('pybind.nos.v7_1_0.rbridge_id.vrf', u'vrf'), ('pybind.nos.v7_1_0.rbridge_id', 'rbridge_id'), ('pybind.nos.v7_1_0.rbridge_id.vrf', u'vrf'), ('pybind.nos.v7_0_1a.rbridge_id', 'rbridge_id'), ('pybind.nos.v7_0_1a.rbridge_id.vrf', u'vrf'), ('pybind.nos.v6_0_2b.rbridge_id', 'rbridge_id'), ('pybind.nos.v6_0_2b.rbridge_id.vrf', u'vrf'), ('pybind.nos.v7_0_1a.rbridge_id', 'rbridge_id'), ('pybind.nos.v7_0_1a.rbridge_id.vrf', u'vrf'), ('pybind.nos.v6_0_2b.rbridge_id', 'rbridge_id'), ('pybind.nos.v6_0_2b.rbridge_id.vrf', u'vrf')]
    bindings_list = [('pybind.nos.v6_0_2b.rbridge_id.vrf.address_family.ip.unicast.ip.route.static_route_nh_vrf', 'pybind.nos.v6_0_2b.brocade_rbridge', 'pybind.nos.v6_0_2b'), ('pybind.nos.v6_0_2b.rbridge_id.vrf.address_family.ip.unicast.ip.route.static_route_oif_vrf', 'pybind.nos.v6_0_2b.brocade_rbridge', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.rbridge_id.vrf.address_family.ip.unicast.ip.route.static_route_nh_vrf', 'pybind.nos.v7_0_1a.brocade_rbridge', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_0_1a.rbridge_id.vrf.address_family.ip.unicast.ip.route.static_route_oif_vrf', 'pybind.nos.v7_0_1a.brocade_rbridge', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.rbridge_id.vrf.address_family.ip.unicast.ip.route.static_route_nh_vrf', 'pybind.nos.v7_1_0.brocade_rbridge', 'pybind.nos.v7_1_0'), ('pybind.nos.v7_1_0.rbridge_id.vrf.address_family.ip.unicast.ip.route.static_route_oif_vrf', 'pybind.nos.v7_1_0.brocade_rbridge', 'pybind.nos.v7_1_0')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'rbridge_id', 'extra_keyval': ''}, {'keyval': 'vrf_name', 'extra_keyval': ''}, {'keyval': 'rbridge_id', 'extra_keyval': ''}, {'keyval': 'vrf_name', 'extra_keyval': ''}, {'keyval': 'rbridge_id', 'extra_keyval': ''}, {'keyval': 'vrf_name', 'extra_keyval': ''}, {'keyval': 'rbridge_id', 'extra_keyval': ''}, {'keyval': 'vrf_name', 'extra_keyval': ''}, {'keyval': 'rbridge_id', 'extra_keyval': ''}, {'keyval': 'vrf_name', 'extra_keyval': ''}, {'keyval': 'rbridge_id', 'extra_keyval': ''}, {'keyval': 'vrf_name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'static_route_nh_vrf', 'keyval': 'static_route_next_vrf_dest, next_hop_vrf, static_route_next_hop', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, rbridge_id=rbridge_id, vrf=vrf, static_route_nh_vrf=static_route_nh_vrf)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def rbridge_id_vrf_address_family_ipv4_unicast_ip_route_static_bfd_delete(self, rbridge_id=None, vrf=None, bfd_static_route=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		NOS: 6.0.2b, 7.0.1a, 7.1.0    

	**Parent Instance Keyword Arg Tuple(s)**:
		:param rbridge_id: kwarg tuple.
		:type rbridge_id: (rbridge_id).

		:param rbridge_id: tuple arg.
		:type rbridge_id: (long)
		
		.. note::
			* range - ['0..4294967295']

		:param vrf: kwarg tuple.
		:type vrf: (vrf_name).

		:param vrf_name: <WORD:1-32>;;Name of VRF
		:type vrf_name: (unicode)
		
		.. note::
			* length - [u'1..32']
			* pattern - ((([a-zA-Z0-9_]([a-zA-Z0-9\-_]){0,61})?[a-zA-Z0-9]\.)*([a-zA-Z0-9_]([a-zA-Z0-9\-_]){0,61})?[a-zA-Z0-9]\.?)|\.

	**This Instance Keyword Arg Tuple**:
		:param bfd_static_route: kwarg tuple.
		:type bfd_static_route: (bfd_static_route_dest, bfd_static_route_src).

		:param bfd_static_route_dest: A.B.C.D ;; Destination IP address
		:type bfd_static_route_dest: (unicode)
		
		.. note::
			* pattern - (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?

		:param bfd_static_route_src: A.B.C.D ;; Source IP address
		:type bfd_static_route_src: (unicode)
		
		.. note::
			* pattern - (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = [('pybind.nos.v6_0_2b.rbridge_id', 'rbridge_id'), ('pybind.nos.v6_0_2b.rbridge_id.vrf', u'vrf'), ('pybind.nos.v7_1_0.rbridge_id', 'rbridge_id'), ('pybind.nos.v7_1_0.rbridge_id.vrf', u'vrf'), ('pybind.nos.v7_0_1a.rbridge_id', 'rbridge_id'), ('pybind.nos.v7_0_1a.rbridge_id.vrf', u'vrf')]
    bindings_list = [('pybind.nos.v6_0_2b.rbridge_id.vrf.address_family.ip.unicast.ip.route.static.bfd.bfd_static_route', 'pybind.nos.v6_0_2b.brocade_rbridge', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.rbridge_id.vrf.address_family.ip.unicast.ip.route.static.bfd.bfd_static_route', 'pybind.nos.v7_0_1a.brocade_rbridge', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.rbridge_id.vrf.address_family.ip.unicast.ip.route.static.bfd.bfd_static_route', 'pybind.nos.v7_1_0.brocade_rbridge', 'pybind.nos.v7_1_0')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'rbridge_id', 'extra_keyval': ''}, {'keyval': 'vrf_name', 'extra_keyval': ''}, {'keyval': 'rbridge_id', 'extra_keyval': ''}, {'keyval': 'vrf_name', 'extra_keyval': ''}, {'keyval': 'rbridge_id', 'extra_keyval': ''}, {'keyval': 'vrf_name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'bfd_static_route', 'keyval': 'bfd_static_route_dest, bfd_static_route_src', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, rbridge_id=rbridge_id, vrf=vrf, bfd_static_route=bfd_static_route)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def rbridge_id_vrf_address_family_ipv4_unicast_route_target_delete(self, rbridge_id=None, vrf=None, route_target=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		NOS: 7.0.1a, 7.1.0    

	**Parent Instance Keyword Arg Tuple(s)**:
		:param rbridge_id: kwarg tuple.
		:type rbridge_id: (rbridge_id).

		:param rbridge_id: tuple arg.
		:type rbridge_id: (long)
		
		.. note::
			* range - ['0..4294967295']

		:param vrf: kwarg tuple.
		:type vrf: (vrf_name).

		:param vrf_name: <WORD:1-32>;;Name of VRF
		:type vrf_name: (unicode)
		
		.. note::
			* length - [u'1..32']
			* pattern - ((([a-zA-Z0-9_]([a-zA-Z0-9\-_]){0,61})?[a-zA-Z0-9]\.)*([a-zA-Z0-9_]([a-zA-Z0-9\-_]){0,61})?[a-zA-Z0-9]\.?)|\.

	**This Instance Keyword Arg Tuple**:
		:param route_target: kwarg tuple.
		:type route_target: (action, target_community).

		:param action: tuple arg.
		:type action: (unicode)
		
		.. note::
			* enum - [u'import', u'export', u'both']

		:param target_community: ASN:nn;; Target VPN Extended Community
		:type target_community: (unicode)

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = [('pybind.nos.v7_0_1a.rbridge_id', 'rbridge_id'), ('pybind.nos.v7_0_1a.rbridge_id.vrf', u'vrf'), ('pybind.nos.v7_1_0.rbridge_id', 'rbridge_id'), ('pybind.nos.v7_1_0.rbridge_id.vrf', u'vrf')]
    bindings_list = [('pybind.nos.v7_0_1a.rbridge_id.vrf.address_family.ip.unicast.route_target', 'pybind.nos.v7_0_1a.brocade_rbridge', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.rbridge_id.vrf.address_family.ip.unicast.route_target', 'pybind.nos.v7_1_0.brocade_rbridge', 'pybind.nos.v7_1_0')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'rbridge_id', 'extra_keyval': ''}, {'keyval': 'vrf_name', 'extra_keyval': ''}, {'keyval': 'rbridge_id', 'extra_keyval': ''}, {'keyval': 'vrf_name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'route_target', 'keyval': 'action, target_community', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, rbridge_id=rbridge_id, vrf=vrf, route_target=route_target)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def rbridge_id_vrf_address_family_ipv6_unicast_ipv6_import_routes_delete(self, rbridge_id=None, vrf=None, routes=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		NOS: 6.0.2b, 7.0.1a, 7.1.0    

	**Parent Instance Keyword Arg Tuple(s)**:
		:param rbridge_id: kwarg tuple.
		:type rbridge_id: (rbridge_id).

		:param rbridge_id: tuple arg.
		:type rbridge_id: (long)
		
		.. note::
			* range - ['0..4294967295']

		:param vrf: kwarg tuple.
		:type vrf: (vrf_name).

		:param vrf_name: <WORD:1-32>;;Name of VRF
		:type vrf_name: (unicode)
		
		.. note::
			* length - [u'1..32']
			* pattern - ((([a-zA-Z0-9_]([a-zA-Z0-9\-_]){0,61})?[a-zA-Z0-9]\.)*([a-zA-Z0-9_]([a-zA-Z0-9\-_]){0,61})?[a-zA-Z0-9]\.?)|\.

	**This Instance Keyword Arg Tuple**:
		:param routes: kwarg tuple.
		:type routes: (src_vrf, route_map).

		:param src_vrf: ASCII string;;Name of VRF
		:type src_vrf: (unicode)
		
		.. note::
			* length - [u'1..32']
			* pattern - ((([a-zA-Z0-9_]([a-zA-Z0-9\-_]){0,61})?[a-zA-Z0-9]\.)*([a-zA-Z0-9_]([a-zA-Z0-9\-_]){0,61})?[a-zA-Z0-9]\.?)|\.

		:param route_map: Word:1-63;;Route map name
		:type route_map: (unicode)
		
		.. note::
			* pattern - [a-zA-Z]{1}([-a-zA-Z0-9\.\\\\@#\+\*\(\)=\{~\}%<>=$_\[\]\|]{0,62})

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = [('pybind.nos.v7_0_1a.rbridge_id', 'rbridge_id'), ('pybind.nos.v7_0_1a.rbridge_id.vrf', u'vrf'), ('pybind.nos.v7_1_0.rbridge_id', 'rbridge_id'), ('pybind.nos.v7_1_0.rbridge_id.vrf', u'vrf'), ('pybind.nos.v6_0_2b.rbridge_id', 'rbridge_id'), ('pybind.nos.v6_0_2b.rbridge_id.vrf', u'vrf')]
    bindings_list = [('pybind.nos.v6_0_2b.rbridge_id.vrf.address_family.ipv6.unicast.ipv6.import_.routes', 'pybind.nos.v6_0_2b.brocade_rbridge', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.rbridge_id.vrf.address_family.ipv6.unicast.ipv6.import_.routes', 'pybind.nos.v7_0_1a.brocade_rbridge', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.rbridge_id.vrf.address_family.ipv6.unicast.ipv6.import_.routes', 'pybind.nos.v7_1_0.brocade_rbridge', 'pybind.nos.v7_1_0')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'rbridge_id', 'extra_keyval': ''}, {'keyval': 'vrf_name', 'extra_keyval': ''}, {'keyval': 'rbridge_id', 'extra_keyval': ''}, {'keyval': 'vrf_name', 'extra_keyval': ''}, {'keyval': 'rbridge_id', 'extra_keyval': ''}, {'keyval': 'vrf_name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'routes', 'keyval': 'src_vrf, route_map', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, rbridge_id=rbridge_id, vrf=vrf, routes=routes)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def rbridge_id_vrf_address_family_ipv6_unicast_ipv6_route_delete(self, rbridge_id=None, vrf=None, ipv6_static_route_oif_vrf=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		NOS: 6.0.2b, 7.0.1a, 7.1.0    

	**Parent Instance Keyword Arg Tuple(s)**:
		:param rbridge_id: kwarg tuple.
		:type rbridge_id: (rbridge_id).

		:param rbridge_id: tuple arg.
		:type rbridge_id: (long)
		
		.. note::
			* range - ['0..4294967295']

		:param vrf: kwarg tuple.
		:type vrf: (vrf_name).

		:param vrf_name: <WORD:1-32>;;Name of VRF
		:type vrf_name: (unicode)
		
		.. note::
			* length - [u'1..32']
			* pattern - ((([a-zA-Z0-9_]([a-zA-Z0-9\-_]){0,61})?[a-zA-Z0-9]\.)*([a-zA-Z0-9_]([a-zA-Z0-9\-_]){0,61})?[a-zA-Z0-9]\.?)|\.

	**This Instance Keyword Arg Tuple**:
		:param ipv6_static_route_oif_vrf: kwarg tuple.
		:type ipv6_static_route_oif_vrf: (static_route_next_vrf_dest, next_hop_vrf, static_route_oif_type, static_route_oif_name).

		:param static_route_next_vrf_dest: A:B::C:D/LEN ;; Destination IPv6 Prefix
		:type static_route_next_vrf_dest: (unicode)
		
		.. note::
			* pattern - ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(/(([0-9])|([0-9]{2})|(1[0-1][0-9])|(12[0-8])))

		:param next_hop_vrf: Next Hop Vrf Name
		:type next_hop_vrf: (unicode)

		:param static_route_oif_type: Outgoing interface type
		:type static_route_oif_type: (unicode)
		
		.. note::
			* enum - [u'fortygigabitethernet', u'gigabitethernet', u'tengigabitethernet', u'hundredgigabitethernet', u've']

		:param static_route_oif_name: tuple arg.
		:type static_route_oif_name: (unicode)
		
		.. note::
			* length - [u'1..16']

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = [('pybind.nos.v7_1_0.rbridge_id', 'rbridge_id'), ('pybind.nos.v7_1_0.rbridge_id.vrf', u'vrf'), ('pybind.nos.v7_1_0.rbridge_id', 'rbridge_id'), ('pybind.nos.v7_1_0.rbridge_id.vrf', u'vrf'), ('pybind.nos.v7_1_0.rbridge_id', 'rbridge_id'), ('pybind.nos.v7_1_0.rbridge_id.vrf', u'vrf'), ('pybind.nos.v7_0_1a.rbridge_id', 'rbridge_id'), ('pybind.nos.v7_0_1a.rbridge_id.vrf', u'vrf'), ('pybind.nos.v6_0_2b.rbridge_id', 'rbridge_id'), ('pybind.nos.v6_0_2b.rbridge_id.vrf', u'vrf'), ('pybind.nos.v7_0_1a.rbridge_id', 'rbridge_id'), ('pybind.nos.v7_0_1a.rbridge_id.vrf', u'vrf'), ('pybind.nos.v7_0_1a.rbridge_id', 'rbridge_id'), ('pybind.nos.v7_0_1a.rbridge_id.vrf', u'vrf'), ('pybind.nos.v7_1_0.rbridge_id', 'rbridge_id'), ('pybind.nos.v7_1_0.rbridge_id.vrf', u'vrf'), ('pybind.nos.v6_0_2b.rbridge_id', 'rbridge_id'), ('pybind.nos.v6_0_2b.rbridge_id.vrf', u'vrf'), ('pybind.nos.v7_0_1a.rbridge_id', 'rbridge_id'), ('pybind.nos.v7_0_1a.rbridge_id.vrf', u'vrf'), ('pybind.nos.v6_0_2b.rbridge_id', 'rbridge_id'), ('pybind.nos.v6_0_2b.rbridge_id.vrf', u'vrf'), ('pybind.nos.v6_0_2b.rbridge_id', 'rbridge_id'), ('pybind.nos.v6_0_2b.rbridge_id.vrf', u'vrf')]
    bindings_list = [('pybind.nos.v6_0_2b.rbridge_id.vrf.address_family.ipv6.unicast.ipv6.route.ipv6_static_route_oif_vrf', 'pybind.nos.v6_0_2b.brocade_rbridge', 'pybind.nos.v6_0_2b'), ('pybind.nos.v6_0_2b.rbridge_id.vrf.address_family.ipv6.unicast.ipv6.route.link_local_static_route_nh_vrf', 'pybind.nos.v6_0_2b.brocade_rbridge', 'pybind.nos.v6_0_2b'), ('pybind.nos.v6_0_2b.rbridge_id.vrf.address_family.ipv6.unicast.ipv6.route.static_route_nh_vrf', 'pybind.nos.v6_0_2b.brocade_rbridge', 'pybind.nos.v6_0_2b'), ('pybind.nos.v6_0_2b.rbridge_id.vrf.address_family.ipv6.unicast.ipv6.route.static_route_oif', 'pybind.nos.v6_0_2b.brocade_rbridge', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.rbridge_id.vrf.address_family.ipv6.unicast.ipv6.route.ipv6_static_route_oif_vrf', 'pybind.nos.v7_0_1a.brocade_rbridge', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_0_1a.rbridge_id.vrf.address_family.ipv6.unicast.ipv6.route.link_local_static_route_nh_vrf', 'pybind.nos.v7_0_1a.brocade_rbridge', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_0_1a.rbridge_id.vrf.address_family.ipv6.unicast.ipv6.route.static_route_nh_vrf', 'pybind.nos.v7_0_1a.brocade_rbridge', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_0_1a.rbridge_id.vrf.address_family.ipv6.unicast.ipv6.route.static_route_oif', 'pybind.nos.v7_0_1a.brocade_rbridge', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.rbridge_id.vrf.address_family.ipv6.unicast.ipv6.route.ipv6_static_route_oif_vrf', 'pybind.nos.v7_1_0.brocade_rbridge', 'pybind.nos.v7_1_0'), ('pybind.nos.v7_1_0.rbridge_id.vrf.address_family.ipv6.unicast.ipv6.route.link_local_static_route_nh_vrf', 'pybind.nos.v7_1_0.brocade_rbridge', 'pybind.nos.v7_1_0'), ('pybind.nos.v7_1_0.rbridge_id.vrf.address_family.ipv6.unicast.ipv6.route.static_route_nh_vrf', 'pybind.nos.v7_1_0.brocade_rbridge', 'pybind.nos.v7_1_0'), ('pybind.nos.v7_1_0.rbridge_id.vrf.address_family.ipv6.unicast.ipv6.route.static_route_oif', 'pybind.nos.v7_1_0.brocade_rbridge', 'pybind.nos.v7_1_0')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'rbridge_id', 'extra_keyval': ''}, {'keyval': 'vrf_name', 'extra_keyval': ''}, {'keyval': 'rbridge_id', 'extra_keyval': ''}, {'keyval': 'vrf_name', 'extra_keyval': ''}, {'keyval': 'rbridge_id', 'extra_keyval': ''}, {'keyval': 'vrf_name', 'extra_keyval': ''}, {'keyval': 'rbridge_id', 'extra_keyval': ''}, {'keyval': 'vrf_name', 'extra_keyval': ''}, {'keyval': 'rbridge_id', 'extra_keyval': ''}, {'keyval': 'vrf_name', 'extra_keyval': ''}, {'keyval': 'rbridge_id', 'extra_keyval': ''}, {'keyval': 'vrf_name', 'extra_keyval': ''}, {'keyval': 'rbridge_id', 'extra_keyval': ''}, {'keyval': 'vrf_name', 'extra_keyval': ''}, {'keyval': 'rbridge_id', 'extra_keyval': ''}, {'keyval': 'vrf_name', 'extra_keyval': ''}, {'keyval': 'rbridge_id', 'extra_keyval': ''}, {'keyval': 'vrf_name', 'extra_keyval': ''}, {'keyval': 'rbridge_id', 'extra_keyval': ''}, {'keyval': 'vrf_name', 'extra_keyval': ''}, {'keyval': 'rbridge_id', 'extra_keyval': ''}, {'keyval': 'vrf_name', 'extra_keyval': ''}, {'keyval': 'rbridge_id', 'extra_keyval': ''}, {'keyval': 'vrf_name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'static_route_nh_vrf', 'keyval': 'static_route_next_vrf_dest, next_hop_vrf, static_route_next_hop', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, rbridge_id=rbridge_id, vrf=vrf, ipv6_static_route_oif_vrf=ipv6_static_route_oif_vrf)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def rbridge_id_vrf_address_family_ipv6_unicast_ipv6_route_static_bfd_delete(self, rbridge_id=None, vrf=None, bfd_ipv6_link_local_static_route=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		NOS: 6.0.2b, 7.0.1a, 7.1.0    

	**Parent Instance Keyword Arg Tuple(s)**:
		:param rbridge_id: kwarg tuple.
		:type rbridge_id: (rbridge_id).

		:param rbridge_id: tuple arg.
		:type rbridge_id: (long)
		
		.. note::
			* range - ['0..4294967295']

		:param vrf: kwarg tuple.
		:type vrf: (vrf_name).

		:param vrf_name: <WORD:1-32>;;Name of VRF
		:type vrf_name: (unicode)
		
		.. note::
			* length - [u'1..32']
			* pattern - ((([a-zA-Z0-9_]([a-zA-Z0-9\-_]){0,61})?[a-zA-Z0-9]\.)*([a-zA-Z0-9_]([a-zA-Z0-9\-_]){0,61})?[a-zA-Z0-9]\.?)|\.

	**This Instance Keyword Arg Tuple**:
		:param bfd_ipv6_link_local_static_route: kwarg tuple.
		:type bfd_ipv6_link_local_static_route: (bfd_ipv6_link_local_dest, bfd_ipv6_link_local_src, bfd_interface_type, bfd_interface_name).

		:param bfd_ipv6_link_local_dest: A:B::C:D ;; Destination IPv6 address
		:type bfd_ipv6_link_local_dest: (unicode)
		
		.. note::
			* pattern - ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?

		:param bfd_ipv6_link_local_src: A:B::C:D ;; Source IPv6 address
		:type bfd_ipv6_link_local_src: (unicode)
		
		.. note::
			* pattern - ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?

		:param bfd_interface_type: Outgoing interface type
		:type bfd_interface_type: (unicode)
		
		.. note::
			* enum - [u've', u'fortygigabitethernet', u'gigabitethernet', u'tengigabitethernet', u'hundredgigabitethernet', u'null']

		:param bfd_interface_name: tuple arg.
		:type bfd_interface_name: (unicode)
		
		.. note::
			* length - [u'1..16']

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = [('pybind.nos.v7_1_0.rbridge_id', 'rbridge_id'), ('pybind.nos.v7_1_0.rbridge_id.vrf', u'vrf'), ('pybind.nos.v6_0_2b.rbridge_id', 'rbridge_id'), ('pybind.nos.v6_0_2b.rbridge_id.vrf', u'vrf'), ('pybind.nos.v7_1_0.rbridge_id', 'rbridge_id'), ('pybind.nos.v7_1_0.rbridge_id.vrf', u'vrf'), ('pybind.nos.v6_0_2b.rbridge_id', 'rbridge_id'), ('pybind.nos.v6_0_2b.rbridge_id.vrf', u'vrf'), ('pybind.nos.v7_0_1a.rbridge_id', 'rbridge_id'), ('pybind.nos.v7_0_1a.rbridge_id.vrf', u'vrf'), ('pybind.nos.v7_0_1a.rbridge_id', 'rbridge_id'), ('pybind.nos.v7_0_1a.rbridge_id.vrf', u'vrf')]
    bindings_list = [('pybind.nos.v6_0_2b.rbridge_id.vrf.address_family.ipv6.unicast.ipv6.route.static.bfd.bfd_ipv6_link_local_static_route', 'pybind.nos.v6_0_2b.brocade_rbridge', 'pybind.nos.v6_0_2b'), ('pybind.nos.v6_0_2b.rbridge_id.vrf.address_family.ipv6.unicast.ipv6.route.static.bfd.bfd_ipv6_static_route', 'pybind.nos.v6_0_2b.brocade_rbridge', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.rbridge_id.vrf.address_family.ipv6.unicast.ipv6.route.static.bfd.bfd_ipv6_link_local_static_route', 'pybind.nos.v7_0_1a.brocade_rbridge', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_0_1a.rbridge_id.vrf.address_family.ipv6.unicast.ipv6.route.static.bfd.bfd_ipv6_static_route', 'pybind.nos.v7_0_1a.brocade_rbridge', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.rbridge_id.vrf.address_family.ipv6.unicast.ipv6.route.static.bfd.bfd_ipv6_link_local_static_route', 'pybind.nos.v7_1_0.brocade_rbridge', 'pybind.nos.v7_1_0'), ('pybind.nos.v7_1_0.rbridge_id.vrf.address_family.ipv6.unicast.ipv6.route.static.bfd.bfd_ipv6_static_route', 'pybind.nos.v7_1_0.brocade_rbridge', 'pybind.nos.v7_1_0')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'rbridge_id', 'extra_keyval': ''}, {'keyval': 'vrf_name', 'extra_keyval': ''}, {'keyval': 'rbridge_id', 'extra_keyval': ''}, {'keyval': 'vrf_name', 'extra_keyval': ''}, {'keyval': 'rbridge_id', 'extra_keyval': ''}, {'keyval': 'vrf_name', 'extra_keyval': ''}, {'keyval': 'rbridge_id', 'extra_keyval': ''}, {'keyval': 'vrf_name', 'extra_keyval': ''}, {'keyval': 'rbridge_id', 'extra_keyval': ''}, {'keyval': 'vrf_name', 'extra_keyval': ''}, {'keyval': 'rbridge_id', 'extra_keyval': ''}, {'keyval': 'vrf_name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'bfd_ipv6_link_local_static_route', 'keyval': 'bfd_ipv6_link_local_dest, bfd_ipv6_link_local_src, bfd_interface_type, bfd_interface_name', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, rbridge_id=rbridge_id, vrf=vrf, bfd_ipv6_link_local_static_route=bfd_ipv6_link_local_static_route)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def rbridge_id_vrf_address_family_ipv6_unicast_route_target_delete(self, rbridge_id=None, vrf=None, route_target=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		NOS: 7.0.1a, 7.1.0    

	**Parent Instance Keyword Arg Tuple(s)**:
		:param rbridge_id: kwarg tuple.
		:type rbridge_id: (rbridge_id).

		:param rbridge_id: tuple arg.
		:type rbridge_id: (long)
		
		.. note::
			* range - ['0..4294967295']

		:param vrf: kwarg tuple.
		:type vrf: (vrf_name).

		:param vrf_name: <WORD:1-32>;;Name of VRF
		:type vrf_name: (unicode)
		
		.. note::
			* length - [u'1..32']
			* pattern - ((([a-zA-Z0-9_]([a-zA-Z0-9\-_]){0,61})?[a-zA-Z0-9]\.)*([a-zA-Z0-9_]([a-zA-Z0-9\-_]){0,61})?[a-zA-Z0-9]\.?)|\.

	**This Instance Keyword Arg Tuple**:
		:param route_target: kwarg tuple.
		:type route_target: (action, target_community).

		:param action: tuple arg.
		:type action: (unicode)
		
		.. note::
			* enum - [u'import', u'export', u'both']

		:param target_community: ASN:nn;; Target VPN Extended Community
		:type target_community: (unicode)

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = [('pybind.nos.v7_1_0.rbridge_id', 'rbridge_id'), ('pybind.nos.v7_1_0.rbridge_id.vrf', u'vrf'), ('pybind.nos.v7_0_1a.rbridge_id', 'rbridge_id'), ('pybind.nos.v7_0_1a.rbridge_id.vrf', u'vrf')]
    bindings_list = [('pybind.nos.v7_0_1a.rbridge_id.vrf.address_family.ipv6.unicast.route_target', 'pybind.nos.v7_0_1a.brocade_rbridge', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.rbridge_id.vrf.address_family.ipv6.unicast.route_target', 'pybind.nos.v7_1_0.brocade_rbridge', 'pybind.nos.v7_1_0')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'rbridge_id', 'extra_keyval': ''}, {'keyval': 'vrf_name', 'extra_keyval': ''}, {'keyval': 'rbridge_id', 'extra_keyval': ''}, {'keyval': 'vrf_name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'route_target', 'keyval': 'action, target_community', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, rbridge_id=rbridge_id, vrf=vrf, route_target=route_target)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def rbridge_id_vrf_route_target_delete(self, rbridge_id=None, vrf=None, route_target=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		NOS: 6.0.2b, 7.0.1a, 7.1.0    

	**Parent Instance Keyword Arg Tuple(s)**:
		:param rbridge_id: kwarg tuple.
		:type rbridge_id: (rbridge_id).

		:param rbridge_id: tuple arg.
		:type rbridge_id: (long)
		
		.. note::
			* range - ['0..4294967295']

		:param vrf: kwarg tuple.
		:type vrf: (vrf_name).

		:param vrf_name: <WORD:1-32>;;Name of VRF
		:type vrf_name: (unicode)
		
		.. note::
			* length - [u'1..32']
			* pattern - ((([a-zA-Z0-9_]([a-zA-Z0-9\-_]){0,61})?[a-zA-Z0-9]\.)*([a-zA-Z0-9_]([a-zA-Z0-9\-_]){0,61})?[a-zA-Z0-9]\.?)|\.

	**This Instance Keyword Arg Tuple**:
		:param route_target: kwarg tuple.
		:type route_target: (action, target_community).

		:param action: tuple arg.
		:type action: (unicode)
		
		.. note::
			* enum - [u'import', u'export', u'both']

		:param target_community: ASN:nn;; Target VPN Extended Community
		:type target_community: (unicode)

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = [('pybind.nos.v6_0_2b.rbridge_id', 'rbridge_id'), ('pybind.nos.v6_0_2b.rbridge_id.vrf', u'vrf'), ('pybind.nos.v7_0_1a.rbridge_id', 'rbridge_id'), ('pybind.nos.v7_0_1a.rbridge_id.vrf', u'vrf'), ('pybind.nos.v7_1_0.rbridge_id', 'rbridge_id'), ('pybind.nos.v7_1_0.rbridge_id.vrf', u'vrf')]
    bindings_list = [('pybind.nos.v6_0_2b.rbridge_id.vrf.route_target', 'pybind.nos.v6_0_2b.brocade_rbridge', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.rbridge_id.vrf.route_target', 'pybind.nos.v7_0_1a.brocade_rbridge', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.rbridge_id.vrf.route_target', 'pybind.nos.v7_1_0.brocade_rbridge', 'pybind.nos.v7_1_0')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'rbridge_id', 'extra_keyval': ''}, {'keyval': 'vrf_name', 'extra_keyval': ''}, {'keyval': 'rbridge_id', 'extra_keyval': ''}, {'keyval': 'vrf_name', 'extra_keyval': ''}, {'keyval': 'rbridge_id', 'extra_keyval': ''}, {'keyval': 'vrf_name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'route_target', 'keyval': 'action, target_community', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, rbridge_id=rbridge_id, vrf=vrf, route_target=route_target)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def rmon_alarm_delete(self, alarm_entry=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		NOS: 6.0.2b, 7.0.1a, 7.1.0
		SLXOS: 16r.1.00b    

	**This Instance Keyword Arg Tuple**:
		:param alarm_entry: kwarg tuple.
		:type alarm_entry: (alarm_index, snmp_oid, alarm_interval, alarm_sample, alarm_rising_threshold, alarm_rising_event_index, alarm_falling_threshold, alarm_falling_event_index, alarm_owner).

		:param alarm_index: tuple arg.
		:type alarm_index: (long)
		
		.. note::
			* range - ['-2147483648..2147483647']

		:param snmp_oid: tuple arg.
		:type snmp_oid: (unicode)
		
		.. note::
			* length - [u'min .. 35']

		:param alarm_interval: Alarm sample interval
		:type alarm_interval: (long)
		
		.. note::
			* range - ['0..4294967295']

		:param alarm_sample: tuple arg.
		:type alarm_sample: (unicode)
		
		.. note::
			* enum - [u'absolute', u'delta']

		:param alarm_rising_threshold: Alarm rising threshold
		:type alarm_rising_threshold: (long)
		
		.. note::
			* range - ['0..4294967295']

		:param alarm_rising_event_index: Event for rising alarm
		:type alarm_rising_event_index: (long)
		
		.. note::
			* range - ['-2147483648..2147483647']

		:param alarm_falling_threshold: Alarm falling threshold
		:type alarm_falling_threshold: (long)
		
		.. note::
			* range - ['0..4294967295']

		:param alarm_falling_event_index: Event for falling alarm
		:type alarm_falling_event_index: (long)
		
		.. note::
			* range - ['-2147483648..2147483647']

		:param alarm_owner: Owner identity
		:type alarm_owner: (unicode)
		
		.. note::
			* length - [u'1 .. 15']
			* pattern - [a-zA-Z]{1}([-a-zA-Z0-9\.\\\\@#\+\*\(\)=\{~\}%<>=$_\[\]\|]{0,14})

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = []
    bindings_list = [('pybind.nos.v6_0_2b.rmon.alarm_entry', 'pybind.nos.v6_0_2b.brocade_rmon', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.rmon.alarm_entry', 'pybind.nos.v7_0_1a.brocade_rmon', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.rmon.alarm_entry', 'pybind.nos.v7_1_0.brocade_rmon', 'pybind.nos.v7_1_0'), ('pybind.slxos.v16r_1_00b.rmon.alarm_entry', 'pybind.slxos.v16r_1_00b.brocade_rmon', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = []
    bindings_keyval = {'kwargs_key_name': u'alarm_entry', 'keyval': 'alarm_index', 'extra_keyval': 'alarm_index, snmp_oid, alarm_interval, alarm_sample, alarm_rising_threshold, alarm_rising_event_index, alarm_falling_threshold, alarm_falling_event_index, alarm_owner'}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, alarm_entry=alarm_entry)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def rmon_event_delete(self, event_entry=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		NOS: 6.0.2b, 7.0.1a, 7.1.0
		SLXOS: 16r.1.00b    

	**This Instance Keyword Arg Tuple**:
		:param event_entry: kwarg tuple.
		:type event_entry: (event_index, event_description, log, event_community, event_owner).

		:param event_index: tuple arg.
		:type event_index: (long)
		
		.. note::
			* range - ['-2147483648..2147483647']

		:param event_description: Event description
		:type event_description: (unicode)
		
		.. note::
			* length - [u'min .. 127']

		:param log: Log the event
		:type log: (YANGBool)

		:param event_community: Send trap for the event
		:type event_community: (unicode)
		
		.. note::
			* length - [u'1 .. 127']

		:param event_owner: Owner identity
		:type event_owner: (unicode)
		
		.. note::
			* length - [u'1 .. 15']
			* pattern - [a-zA-Z]{1}([-a-zA-Z0-9\.\\\\@#\+\*\(\)=\{~\}%<>=$_\[\]\|]{0,14})

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = []
    bindings_list = [('pybind.nos.v6_0_2b.rmon.event_entry', 'pybind.nos.v6_0_2b.brocade_rmon', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.rmon.event_entry', 'pybind.nos.v7_0_1a.brocade_rmon', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.rmon.event_entry', 'pybind.nos.v7_1_0.brocade_rmon', 'pybind.nos.v7_1_0'), ('pybind.slxos.v16r_1_00b.rmon.event_entry', 'pybind.slxos.v16r_1_00b.brocade_rmon', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = []
    bindings_keyval = {'kwargs_key_name': u'event_entry', 'keyval': 'event_index', 'extra_keyval': 'event_index, event_description, log, event_community, event_owner'}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, event_entry=event_entry)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def role_name_delete(self, name=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		NOS: 6.0.2b, 7.0.1a, 7.1.0
		SLXOS: 16r.1.00b    

	**This Instance Keyword Arg Tuple**:
		:param name: kwarg tuple.
		:type name: (name, desc).

		:param name: tuple arg.
		:type name: (unicode)
		
		.. note::
			* length - [u'4 .. 32']

		:param desc: Description of the role (default='')
		:type desc: (unicode)
		
		.. note::
			* length - [u'0 .. 64']

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = []
    bindings_list = [('pybind.nos.v6_0_2b.role.name', 'pybind.nos.v6_0_2b.brocade_aaa', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.role.name', 'pybind.nos.v7_0_1a.brocade_aaa', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.role.name', 'pybind.nos.v7_1_0.brocade_aaa', 'pybind.nos.v7_1_0'), ('pybind.slxos.v16r_1_00b.role.name', 'pybind.slxos.v16r_1_00b.brocade_aaa', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = []
    bindings_keyval = {'kwargs_key_name': u'name', 'keyval': 'name', 'extra_keyval': 'name, desc'}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, name=name)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def route_map_delete(self, route_map=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		NOS: 6.0.2b, 7.0.1a, 7.1.0
		SLXOS: 16r.1.00b    

	**This Instance Keyword Arg Tuple**:
		:param route_map: kwarg tuple.
		:type route_map: (name, action_rm, instance).

		:param name: Word:1-63;;Route map name
		:type name: (unicode)
		
		.. note::
			* pattern - [a-zA-Z]{1}([-a-zA-Z0-9\.\\\\@#\+\*\(\)=\{~\}%<>=$_\[\]\|]{0,62})

		:param action_rm: tuple arg.
		:type action_rm: (unicode)
		
		.. note::
			* enum - [u'receive', u'send']

		:param instance: tuple arg.
		:type instance: (int)
		
		.. note::
			* range - ['0..65535']

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = []
    bindings_list = [('pybind.nos.v6_0_2b.hide_routemap_holder.route_map', 'pybind.nos.v6_0_2b.brocade_ip_policy', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.hide_routemap_holder.route_map', 'pybind.nos.v7_0_1a.brocade_ip_policy', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.hide_routemap_holder.route_map', 'pybind.nos.v7_1_0.brocade_ip_policy', 'pybind.nos.v7_1_0'), ('pybind.slxos.v16r_1_00b.routing_system.route_map', 'pybind.slxos.v16r_1_00b.brocade_common_def', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = []
    bindings_keyval = {'kwargs_key_name': u'route_map', 'keyval': 'name, action_rm, instance', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, route_map=route_map)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def route_map_set_ip_delete(self, route_map=None, next_hop=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		NOS: 6.0.2b, 7.0.1a, 7.1.0
		SLXOS: 16r.1.00b    

	**Parent Instance Keyword Arg Tuple(s)**:
		:param route_map: kwarg tuple.
		:type route_map: (name, action_rm, instance).

		:param name: Word:1-63;;Route map name
		:type name: (unicode)
		
		.. note::
			* pattern - [a-zA-Z]{1}([-a-zA-Z0-9\.\\\\@#\+\*\(\)=\{~\}%<>=$_\[\]\|]{0,62})

		:param action_rm: tuple arg.
		:type action_rm: (unicode)
		
		.. note::
			* enum - [u'receive', u'send']

		:param instance: tuple arg.
		:type instance: (int)
		
		.. note::
			* range - ['0..65535']

	**This Instance Keyword Arg Tuple**:
		:param next_hop: kwarg tuple.
		:type next_hop: (next_hop).

		:param next_hop: tuple arg.
		:type next_hop: (unicode)
		
		.. note::
			* pattern - (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = [('pybind.nos.v6_0_2b.hide_routemap_holder.route_map', u'route_map'), ('pybind.slxos.v16r_1_00b.routing_system.route_map', u'route_map'), ('pybind.nos.v7_0_1a.hide_routemap_holder.route_map', u'route_map'), ('pybind.nos.v6_0_2b.hide_routemap_holder.route_map', u'route_map'), ('pybind.nos.v7_0_1a.hide_routemap_holder.route_map', u'route_map'), ('pybind.nos.v7_1_0.hide_routemap_holder.route_map', u'route_map'), ('pybind.nos.v7_1_0.hide_routemap_holder.route_map', u'route_map')]
    bindings_list = [('pybind.nos.v6_0_2b.hide_routemap_holder.route_map.content.set_.ip.next_ip.next_hop', 'pybind.nos.v6_0_2b.brocade_ip_policy', 'pybind.nos.v6_0_2b'), ('pybind.nos.v6_0_2b.hide_routemap_holder.route_map.content.set_.ip.next_vrf.next_vrf_list', 'pybind.nos.v6_0_2b.brocade_ip_policy', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.hide_routemap_holder.route_map.content.set_.ip.next_ip.next_hop', 'pybind.nos.v7_0_1a.brocade_ip_policy', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_0_1a.hide_routemap_holder.route_map.content.set_.ip.next_vrf.next_vrf_list', 'pybind.nos.v7_0_1a.brocade_ip_policy', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.hide_routemap_holder.route_map.content.set_.ip.next_ip.next_hop', 'pybind.nos.v7_1_0.brocade_ip_policy', 'pybind.nos.v7_1_0'), ('pybind.nos.v7_1_0.hide_routemap_holder.route_map.content.set_.ip.next_vrf.next_vrf_list', 'pybind.nos.v7_1_0.brocade_ip_policy', 'pybind.nos.v7_1_0'), ('pybind.slxos.v16r_1_00b.routing_system.route_map.content.set_.ip.next_vrf.next_vrf_list', 'pybind.slxos.v16r_1_00b.brocade_common_def', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'name, action_rm, instance', 'extra_keyval': ''}, {'keyval': 'name, action_rm, instance', 'extra_keyval': ''}, {'keyval': 'name, action_rm, instance', 'extra_keyval': ''}, {'keyval': 'name, action_rm, instance', 'extra_keyval': ''}, {'keyval': 'name, action_rm, instance', 'extra_keyval': ''}, {'keyval': 'name, action_rm, instance', 'extra_keyval': ''}, {'keyval': 'name, action_rm, instance', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'next_hop', 'keyval': 'next_hop', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, route_map=route_map, next_hop=next_hop)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def route_map_set_ip_global_delete(self, route_map=None, next_global_hop=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		NOS: 6.0.2b, 7.0.1a, 7.1.0
		SLXOS: 16r.1.00b    

	**Parent Instance Keyword Arg Tuple(s)**:
		:param route_map: kwarg tuple.
		:type route_map: (name, action_rm, instance).

		:param name: Word:1-63;;Route map name
		:type name: (unicode)
		
		.. note::
			* pattern - [a-zA-Z]{1}([-a-zA-Z0-9\.\\\\@#\+\*\(\)=\{~\}%<>=$_\[\]\|]{0,62})

		:param action_rm: tuple arg.
		:type action_rm: (unicode)
		
		.. note::
			* enum - [u'receive', u'send']

		:param instance: tuple arg.
		:type instance: (int)
		
		.. note::
			* range - ['0..65535']

	**This Instance Keyword Arg Tuple**:
		:param next_global_hop: kwarg tuple.
		:type next_global_hop: (next_hop).

		:param next_hop: tuple arg.
		:type next_hop: (unicode)
		
		.. note::
			* pattern - (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = [('pybind.nos.v7_0_1a.hide_routemap_holder.route_map', u'route_map'), ('pybind.nos.v7_1_0.hide_routemap_holder.route_map', u'route_map'), ('pybind.nos.v6_0_2b.hide_routemap_holder.route_map', u'route_map'), ('pybind.slxos.v16r_1_00b.routing_system.route_map', u'route_map')]
    bindings_list = [('pybind.nos.v6_0_2b.hide_routemap_holder.route_map.content.set_.ip.global_.next_global_hop', 'pybind.nos.v6_0_2b.brocade_ip_policy', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.hide_routemap_holder.route_map.content.set_.ip.global_.next_global_hop', 'pybind.nos.v7_0_1a.brocade_ip_policy', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.hide_routemap_holder.route_map.content.set_.ip.global_.next_global_hop', 'pybind.nos.v7_1_0.brocade_ip_policy', 'pybind.nos.v7_1_0'), ('pybind.slxos.v16r_1_00b.routing_system.route_map.content.set_.ip.global_.next_global_hop', 'pybind.slxos.v16r_1_00b.brocade_common_def', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'name, action_rm, instance', 'extra_keyval': ''}, {'keyval': 'name, action_rm, instance', 'extra_keyval': ''}, {'keyval': 'name, action_rm, instance', 'extra_keyval': ''}, {'keyval': 'name, action_rm, instance', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'next_global_hop', 'keyval': 'next_hop', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, route_map=route_map, next_global_hop=next_global_hop)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def route_map_set_ip_next_hop_delete(self, route_map=None, next_hop_list=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		SLXOS: 16r.1.00b    

	**Parent Instance Keyword Arg Tuple(s)**:
		:param route_map: kwarg tuple.
		:type route_map: (name, action_rm, instance).

		:param name: Word:1-63;;Route map name
		:type name: (unicode)
		
		.. note::
			* pattern - [a-zA-Z]{1}([-a-zA-Z0-9\.\\\\@#\+\*\(\)=\{~\}%<>=$_\[\]\|]{0,62})

		:param action_rm: tuple arg.
		:type action_rm: (unicode)
		
		.. note::
			* enum - [u'receive', u'send']

		:param instance: tuple arg.
		:type instance: (int)
		
		.. note::
			* range - ['0..65535']

	**This Instance Keyword Arg Tuple**:
		:param next_hop_list: kwarg tuple.
		:type next_hop_list: (next_hop_addr).

		:param next_hop_addr: tuple arg.
		:type next_hop_addr: (unicode)
		
		.. note::
			* pattern - (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = [('pybind.slxos.v16r_1_00b.routing_system.route_map', u'route_map')]
    bindings_list = [('pybind.slxos.v16r_1_00b.routing_system.route_map.content.set_.ip.next_hop.next_hop_list', 'pybind.slxos.v16r_1_00b.brocade_common_def', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'name, action_rm, instance', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'next_hop_list', 'keyval': 'next_hop_addr', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, route_map=route_map, next_hop_list=next_hop_list)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def route_map_set_ipv6_delete(self, route_map=None, next_hop=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		NOS: 6.0.2b, 7.0.1a, 7.1.0
		SLXOS: 16r.1.00b    

	**Parent Instance Keyword Arg Tuple(s)**:
		:param route_map: kwarg tuple.
		:type route_map: (name, action_rm, instance).

		:param name: Word:1-63;;Route map name
		:type name: (unicode)
		
		.. note::
			* pattern - [a-zA-Z]{1}([-a-zA-Z0-9\.\\\\@#\+\*\(\)=\{~\}%<>=$_\[\]\|]{0,62})

		:param action_rm: tuple arg.
		:type action_rm: (unicode)
		
		.. note::
			* enum - [u'receive', u'send']

		:param instance: tuple arg.
		:type instance: (int)
		
		.. note::
			* range - ['0..65535']

	**This Instance Keyword Arg Tuple**:
		:param next_hop: kwarg tuple.
		:type next_hop: (next_hop).

		:param next_hop: tuple arg.
		:type next_hop: (unicode)
		
		.. note::
			* pattern - ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = [('pybind.nos.v7_0_1a.hide_routemap_holder.route_map', u'route_map'), ('pybind.nos.v7_1_0.hide_routemap_holder.route_map', u'route_map'), ('pybind.slxos.v16r_1_00b.routing_system.route_map', u'route_map'), ('pybind.nos.v7_0_1a.hide_routemap_holder.route_map', u'route_map'), ('pybind.slxos.v16r_1_00b.routing_system.route_map', u'route_map'), ('pybind.nos.v7_1_0.hide_routemap_holder.route_map', u'route_map'), ('pybind.nos.v6_0_2b.hide_routemap_holder.route_map', u'route_map'), ('pybind.nos.v6_0_2b.hide_routemap_holder.route_map', u'route_map')]
    bindings_list = [('pybind.nos.v6_0_2b.hide_routemap_holder.route_map.content.set_.ipv6.next_ip.next_hop', 'pybind.nos.v6_0_2b.brocade_ip_policy', 'pybind.nos.v6_0_2b'), ('pybind.nos.v6_0_2b.hide_routemap_holder.route_map.content.set_.ipv6.next_vrf.next_vrf_list', 'pybind.nos.v6_0_2b.brocade_ip_policy', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.hide_routemap_holder.route_map.content.set_.ipv6.next_ip.next_hop', 'pybind.nos.v7_0_1a.brocade_ip_policy', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_0_1a.hide_routemap_holder.route_map.content.set_.ipv6.next_vrf.next_vrf_list', 'pybind.nos.v7_0_1a.brocade_ip_policy', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.hide_routemap_holder.route_map.content.set_.ipv6.next_ip.next_hop', 'pybind.nos.v7_1_0.brocade_ip_policy', 'pybind.nos.v7_1_0'), ('pybind.nos.v7_1_0.hide_routemap_holder.route_map.content.set_.ipv6.next_vrf.next_vrf_list', 'pybind.nos.v7_1_0.brocade_ip_policy', 'pybind.nos.v7_1_0'), ('pybind.slxos.v16r_1_00b.routing_system.route_map.content.set_.ipv6.next_ip.next_hop', 'pybind.slxos.v16r_1_00b.brocade_common_def', 'pybind.slxos.v16r_1_00b'), ('pybind.slxos.v16r_1_00b.routing_system.route_map.content.set_.ipv6.next_vrf.next_vrf_list', 'pybind.slxos.v16r_1_00b.brocade_common_def', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'name, action_rm, instance', 'extra_keyval': ''}, {'keyval': 'name, action_rm, instance', 'extra_keyval': ''}, {'keyval': 'name, action_rm, instance', 'extra_keyval': ''}, {'keyval': 'name, action_rm, instance', 'extra_keyval': ''}, {'keyval': 'name, action_rm, instance', 'extra_keyval': ''}, {'keyval': 'name, action_rm, instance', 'extra_keyval': ''}, {'keyval': 'name, action_rm, instance', 'extra_keyval': ''}, {'keyval': 'name, action_rm, instance', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'next_vrf_list', 'keyval': 'vrf, next_hop', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, route_map=route_map, next_hop=next_hop)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def route_map_set_ipv6_global_delete(self, route_map=None, next_global_hop=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		NOS: 6.0.2b, 7.0.1a, 7.1.0
		SLXOS: 16r.1.00b    

	**Parent Instance Keyword Arg Tuple(s)**:
		:param route_map: kwarg tuple.
		:type route_map: (name, action_rm, instance).

		:param name: Word:1-63;;Route map name
		:type name: (unicode)
		
		.. note::
			* pattern - [a-zA-Z]{1}([-a-zA-Z0-9\.\\\\@#\+\*\(\)=\{~\}%<>=$_\[\]\|]{0,62})

		:param action_rm: tuple arg.
		:type action_rm: (unicode)
		
		.. note::
			* enum - [u'receive', u'send']

		:param instance: tuple arg.
		:type instance: (int)
		
		.. note::
			* range - ['0..65535']

	**This Instance Keyword Arg Tuple**:
		:param next_global_hop: kwarg tuple.
		:type next_global_hop: (next_hop).

		:param next_hop: tuple arg.
		:type next_hop: (unicode)
		
		.. note::
			* pattern - ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = [('pybind.nos.v6_0_2b.hide_routemap_holder.route_map', u'route_map'), ('pybind.nos.v7_0_1a.hide_routemap_holder.route_map', u'route_map'), ('pybind.slxos.v16r_1_00b.routing_system.route_map', u'route_map'), ('pybind.nos.v7_1_0.hide_routemap_holder.route_map', u'route_map')]
    bindings_list = [('pybind.nos.v6_0_2b.hide_routemap_holder.route_map.content.set_.ipv6.global_.next_global_hop', 'pybind.nos.v6_0_2b.brocade_ip_policy', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.hide_routemap_holder.route_map.content.set_.ipv6.global_.next_global_hop', 'pybind.nos.v7_0_1a.brocade_ip_policy', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.hide_routemap_holder.route_map.content.set_.ipv6.global_.next_global_hop', 'pybind.nos.v7_1_0.brocade_ip_policy', 'pybind.nos.v7_1_0'), ('pybind.slxos.v16r_1_00b.routing_system.route_map.content.set_.ipv6.global_.next_global_hop', 'pybind.slxos.v16r_1_00b.brocade_common_def', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'name, action_rm, instance', 'extra_keyval': ''}, {'keyval': 'name, action_rm, instance', 'extra_keyval': ''}, {'keyval': 'name, action_rm, instance', 'extra_keyval': ''}, {'keyval': 'name, action_rm, instance', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'next_global_hop', 'keyval': 'next_hop', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, route_map=route_map, next_global_hop=next_global_hop)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def router_bgp_address_family_evpn_neighbor_delete(self, af_evpn_neighbor=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		SLXOS: 16r.1.00b    

	**This Instance Keyword Arg Tuple**:
		:param af_evpn_neighbor: kwarg tuple.
		:type af_evpn_neighbor: (af_evpn_neighbor_address).

		:param af_evpn_neighbor_address: A.B.C.D;;Neighbor Address
		:type af_evpn_neighbor_address: (unicode)
		
		.. note::
			* pattern - (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = []
    bindings_list = [('pybind.slxos.v16r_1_00b.routing_system.router.router_bgp.address_family.evpn.af_evpn_neighbor_address_holder.af_evpn_neighbor', 'pybind.slxos.v16r_1_00b.brocade_common_def', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = []
    bindings_keyval = {'kwargs_key_name': u'af_evpn_neighbor', 'keyval': 'af_evpn_neighbor_address', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, af_evpn_neighbor=af_evpn_neighbor)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def router_bgp_address_family_ipv4_unicast_aggregate_address_delete(self, aggregate_address=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		SLXOS: 16r.1.00b    

	**This Instance Keyword Arg Tuple**:
		:param aggregate_address: kwarg tuple.
		:type aggregate_address: (aggregate_ip_prefix).

		:param aggregate_ip_prefix: tuple arg.
		:type aggregate_ip_prefix: (unicode)
		
		.. note::
			* pattern - (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])/(([0-9])|([1-2][0-9])|(3[0-2]))

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = []
    bindings_list = [('pybind.slxos.v16r_1_00b.routing_system.router.router_bgp.address_family.ipv4.ipv4_unicast.default_vrf.aggregate_address', 'pybind.slxos.v16r_1_00b.brocade_common_def', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = []
    bindings_keyval = {'kwargs_key_name': u'aggregate_address', 'keyval': 'aggregate_ip_prefix', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, aggregate_address=aggregate_address)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def router_bgp_address_family_ipv4_unicast_neighbor_delete(self, af_ipv4_neighbor_address=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		SLXOS: 16r.1.00b    

	**This Instance Keyword Arg Tuple**:
		:param af_ipv4_neighbor_address: kwarg tuple.
		:type af_ipv4_neighbor_address: (af_ipv4_neighbor_address).

		:param af_ipv4_neighbor_address: A.B.C.D;;Neighbor Address
		:type af_ipv4_neighbor_address: (unicode)
		
		.. note::
			* pattern - (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = []
    bindings_list = [('pybind.slxos.v16r_1_00b.routing_system.router.router_bgp.address_family.ipv4.ipv4_unicast.default_vrf.neighbor.af_ipv4_neighbor_address_holder.af_ipv4_neighbor_address', 'pybind.slxos.v16r_1_00b.brocade_common_def', 'pybind.slxos.v16r_1_00b'), ('pybind.slxos.v16r_1_00b.routing_system.router.router_bgp.address_family.ipv4.ipv4_unicast.default_vrf.neighbor.af_ipv4_neighbor_peergroup_holder.af_ipv4_neighbor_peergroup', 'pybind.slxos.v16r_1_00b.brocade_common_def', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = []
    bindings_keyval = {'kwargs_key_name': u'af_ipv4_neighbor_address', 'keyval': 'af_ipv4_neighbor_address', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, af_ipv4_neighbor_address=af_ipv4_neighbor_address)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def router_bgp_address_family_ipv4_unicast_network_delete(self, network=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		SLXOS: 16r.1.00b    

	**This Instance Keyword Arg Tuple**:
		:param network: kwarg tuple.
		:type network: (network_ipv4_address).

		:param network_ipv4_address: A.B.C.D/M IP address in dotted decimal/Mask
		:type network_ipv4_address: (unicode)
		
		.. note::
			* pattern - (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])/(([0-9])|([1-2][0-9])|(3[0-2]))

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = []
    bindings_list = [('pybind.slxos.v16r_1_00b.routing_system.router.router_bgp.address_family.ipv4.ipv4_unicast.default_vrf.network', 'pybind.slxos.v16r_1_00b.brocade_common_def', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = []
    bindings_keyval = {'kwargs_key_name': u'network', 'keyval': 'network_ipv4_address', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, network=network)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def router_bgp_address_family_ipv4_unicast_static_network_delete(self, static_network=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		SLXOS: 16r.1.00b    

	**This Instance Keyword Arg Tuple**:
		:param static_network: kwarg tuple.
		:type static_network: (static_network_address).

		:param static_network_address: A.B.C.D/M IP address in dotted decimal/Mask
		:type static_network_address: (unicode)
		
		.. note::
			* pattern - (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])/(([0-9])|([1-2][0-9])|(3[0-2]))

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = []
    bindings_list = [('pybind.slxos.v16r_1_00b.routing_system.router.router_bgp.address_family.ipv4.ipv4_unicast.default_vrf.static_network', 'pybind.slxos.v16r_1_00b.brocade_common_def', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = []
    bindings_keyval = {'kwargs_key_name': u'static_network', 'keyval': 'static_network_address', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, static_network=static_network)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def router_bgp_address_family_ipv4_unicast_vrf_delete(self, af_vrf=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		SLXOS: 16r.1.00b    

	**This Instance Keyword Arg Tuple**:
		:param af_vrf: kwarg tuple.
		:type af_vrf: (af_vrf_name).

		:param af_vrf_name: VRF name
		:type af_vrf_name: (unicode)
		
		.. note::
			* length - [u'1..255']

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = []
    bindings_list = [('pybind.slxos.v16r_1_00b.routing_system.router.router_bgp.address_family.ipv4.ipv4_unicast.af_vrf', 'pybind.slxos.v16r_1_00b.brocade_common_def', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = []
    bindings_keyval = {'kwargs_key_name': u'af_vrf', 'keyval': 'af_vrf_name', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, af_vrf=af_vrf)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def router_bgp_address_family_ipv4_unicast_vrf_aggregate_address_delete(self, af_vrf=None, aggregate_address=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		SLXOS: 16r.1.00b    

	**Parent Instance Keyword Arg Tuple(s)**:
		:param af_vrf: kwarg tuple.
		:type af_vrf: (af_vrf_name).

		:param af_vrf_name: VRF name
		:type af_vrf_name: (unicode)
		
		.. note::
			* length - [u'1..255']

	**This Instance Keyword Arg Tuple**:
		:param aggregate_address: kwarg tuple.
		:type aggregate_address: (aggregate_ip_prefix).

		:param aggregate_ip_prefix: tuple arg.
		:type aggregate_ip_prefix: (unicode)
		
		.. note::
			* pattern - (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])/(([0-9])|([1-2][0-9])|(3[0-2]))

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = [('pybind.slxos.v16r_1_00b.routing_system.router.router_bgp.address_family.ipv4.ipv4_unicast.af_vrf', u'af_vrf')]
    bindings_list = [('pybind.slxos.v16r_1_00b.routing_system.router.router_bgp.address_family.ipv4.ipv4_unicast.af_vrf.aggregate_address', 'pybind.slxos.v16r_1_00b.brocade_common_def', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'af_vrf_name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'aggregate_address', 'keyval': 'aggregate_ip_prefix', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, af_vrf=af_vrf, aggregate_address=aggregate_address)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def router_bgp_address_family_ipv4_unicast_vrf_neighbor_delete(self, af_vrf=None, af_ipv4_neighbor_addr=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		SLXOS: 16r.1.00b    

	**Parent Instance Keyword Arg Tuple(s)**:
		:param af_vrf: kwarg tuple.
		:type af_vrf: (af_vrf_name).

		:param af_vrf_name: VRF name
		:type af_vrf_name: (unicode)
		
		.. note::
			* length - [u'1..255']

	**This Instance Keyword Arg Tuple**:
		:param af_ipv4_neighbor_addr: kwarg tuple.
		:type af_ipv4_neighbor_addr: (af_ipv4_neighbor_address).

		:param af_ipv4_neighbor_address: A.B.C.D;;Neighbor Address
		:type af_ipv4_neighbor_address: (unicode)
		
		.. note::
			* pattern - (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = [('pybind.slxos.v16r_1_00b.routing_system.router.router_bgp.address_family.ipv4.ipv4_unicast.af_vrf', u'af_vrf')]
    bindings_list = [('pybind.slxos.v16r_1_00b.routing_system.router.router_bgp.address_family.ipv4.ipv4_unicast.af_vrf.neighbor.af_ipv4_vrf_neighbor_address_holder.af_ipv4_neighbor_addr', 'pybind.slxos.v16r_1_00b.brocade_common_def', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'af_vrf_name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'af_ipv4_neighbor_addr', 'keyval': 'af_ipv4_neighbor_address', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, af_vrf=af_vrf, af_ipv4_neighbor_addr=af_ipv4_neighbor_addr)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def router_bgp_address_family_ipv4_unicast_vrf_network_delete(self, af_vrf=None, network=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		SLXOS: 16r.1.00b    

	**Parent Instance Keyword Arg Tuple(s)**:
		:param af_vrf: kwarg tuple.
		:type af_vrf: (af_vrf_name).

		:param af_vrf_name: VRF name
		:type af_vrf_name: (unicode)
		
		.. note::
			* length - [u'1..255']

	**This Instance Keyword Arg Tuple**:
		:param network: kwarg tuple.
		:type network: (network_ipv4_address).

		:param network_ipv4_address: A.B.C.D/M IP address in dotted decimal/Mask
		:type network_ipv4_address: (unicode)
		
		.. note::
			* pattern - (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])/(([0-9])|([1-2][0-9])|(3[0-2]))

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = [('pybind.slxos.v16r_1_00b.routing_system.router.router_bgp.address_family.ipv4.ipv4_unicast.af_vrf', u'af_vrf')]
    bindings_list = [('pybind.slxos.v16r_1_00b.routing_system.router.router_bgp.address_family.ipv4.ipv4_unicast.af_vrf.network', 'pybind.slxos.v16r_1_00b.brocade_common_def', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'af_vrf_name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'network', 'keyval': 'network_ipv4_address', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, af_vrf=af_vrf, network=network)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def router_bgp_address_family_ipv4_unicast_vrf_static_network_delete(self, af_vrf=None, static_network=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		SLXOS: 16r.1.00b    

	**Parent Instance Keyword Arg Tuple(s)**:
		:param af_vrf: kwarg tuple.
		:type af_vrf: (af_vrf_name).

		:param af_vrf_name: VRF name
		:type af_vrf_name: (unicode)
		
		.. note::
			* length - [u'1..255']

	**This Instance Keyword Arg Tuple**:
		:param static_network: kwarg tuple.
		:type static_network: (static_network_address).

		:param static_network_address: A.B.C.D/M IP address in dotted decimal/Mask
		:type static_network_address: (unicode)
		
		.. note::
			* pattern - (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])/(([0-9])|([1-2][0-9])|(3[0-2]))

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = [('pybind.slxos.v16r_1_00b.routing_system.router.router_bgp.address_family.ipv4.ipv4_unicast.af_vrf', u'af_vrf')]
    bindings_list = [('pybind.slxos.v16r_1_00b.routing_system.router.router_bgp.address_family.ipv4.ipv4_unicast.af_vrf.static_network', 'pybind.slxos.v16r_1_00b.brocade_common_def', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'af_vrf_name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'static_network', 'keyval': 'static_network_address', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, af_vrf=af_vrf, static_network=static_network)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def router_bgp_address_family_ipv6_unicast_aggregate_address_delete(self, aggregate_ipv6_address=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		SLXOS: 16r.1.00b    

	**This Instance Keyword Arg Tuple**:
		:param aggregate_ipv6_address: kwarg tuple.
		:type aggregate_ipv6_address: (aggregate_ip_prefix).

		:param aggregate_ip_prefix: tuple arg.
		:type aggregate_ip_prefix: (unicode)
		
		.. note::
			* pattern - ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(/(([0-9])|([0-9]{2})|(1[0-1][0-9])|(12[0-8])))

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = []
    bindings_list = [('pybind.slxos.v16r_1_00b.routing_system.router.router_bgp.address_family.ipv6.ipv6_unicast.default_vrf.aggregate_ipv6_address', 'pybind.slxos.v16r_1_00b.brocade_common_def', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = []
    bindings_keyval = {'kwargs_key_name': u'aggregate_ipv6_address', 'keyval': 'aggregate_ip_prefix', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, aggregate_ipv6_address=aggregate_ipv6_address)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def router_bgp_address_family_ipv6_unicast_neighbor_delete(self, af_ipv6_neighbor_address=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		SLXOS: 16r.1.00b    

	**This Instance Keyword Arg Tuple**:
		:param af_ipv6_neighbor_address: kwarg tuple.
		:type af_ipv6_neighbor_address: (af_ipv6_neighbor_address).

		:param af_ipv6_neighbor_address: A:B::C:D;;Neighbor IPV6 Address
		:type af_ipv6_neighbor_address: (unicode)
		
		.. note::
			* pattern - ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = []
    bindings_list = [('pybind.slxos.v16r_1_00b.routing_system.router.router_bgp.address_family.ipv6.ipv6_unicast.default_vrf.neighbor.af_ipv6_neighbor_address_holder.af_ipv6_neighbor_address', 'pybind.slxos.v16r_1_00b.brocade_common_def', 'pybind.slxos.v16r_1_00b'), ('pybind.slxos.v16r_1_00b.routing_system.router.router_bgp.address_family.ipv6.ipv6_unicast.default_vrf.neighbor.af_ipv6_neighbor_peergroup_holder.af_ipv6_neighbor_peergroup', 'pybind.slxos.v16r_1_00b.brocade_common_def', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = []
    bindings_keyval = {'kwargs_key_name': u'af_ipv6_neighbor_peergroup', 'keyval': 'af_ipv6_neighbor_peergroup_name', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, af_ipv6_neighbor_address=af_ipv6_neighbor_address)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def router_bgp_address_family_ipv6_unicast_network_delete(self, network=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		SLXOS: 16r.1.00b    

	**This Instance Keyword Arg Tuple**:
		:param network: kwarg tuple.
		:type network: (network_ipv6_address).

		:param network_ipv6_address: A:B::C:D/M IPV6 address in dotted decimal/Mask
		:type network_ipv6_address: (unicode)
		
		.. note::
			* pattern - ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(/(([0-9])|([0-9]{2})|(1[0-1][0-9])|(12[0-8])))

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = []
    bindings_list = [('pybind.slxos.v16r_1_00b.routing_system.router.router_bgp.address_family.ipv6.ipv6_unicast.default_vrf.network', 'pybind.slxos.v16r_1_00b.brocade_common_def', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = []
    bindings_keyval = {'kwargs_key_name': u'network', 'keyval': 'network_ipv6_address', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, network=network)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def router_bgp_address_family_ipv6_unicast_vrf_delete(self, af_ipv6_vrf=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		SLXOS: 16r.1.00b    

	**This Instance Keyword Arg Tuple**:
		:param af_ipv6_vrf: kwarg tuple.
		:type af_ipv6_vrf: (af_ipv6_vrf_name).

		:param af_ipv6_vrf_name: VRF name
		:type af_ipv6_vrf_name: (unicode)
		
		.. note::
			* length - [u'1..255']

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = []
    bindings_list = [('pybind.slxos.v16r_1_00b.routing_system.router.router_bgp.address_family.ipv6.ipv6_unicast.af_ipv6_vrf', 'pybind.slxos.v16r_1_00b.brocade_common_def', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = []
    bindings_keyval = {'kwargs_key_name': u'af_ipv6_vrf', 'keyval': 'af_ipv6_vrf_name', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, af_ipv6_vrf=af_ipv6_vrf)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def router_bgp_address_family_ipv6_unicast_vrf_aggregate_address_delete(self, af_ipv6_vrf=None, aggregate_ipv6_address=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		SLXOS: 16r.1.00b    

	**Parent Instance Keyword Arg Tuple(s)**:
		:param af_ipv6_vrf: kwarg tuple.
		:type af_ipv6_vrf: (af_ipv6_vrf_name).

		:param af_ipv6_vrf_name: VRF name
		:type af_ipv6_vrf_name: (unicode)
		
		.. note::
			* length - [u'1..255']

	**This Instance Keyword Arg Tuple**:
		:param aggregate_ipv6_address: kwarg tuple.
		:type aggregate_ipv6_address: (aggregate_ip_prefix).

		:param aggregate_ip_prefix: tuple arg.
		:type aggregate_ip_prefix: (unicode)
		
		.. note::
			* pattern - ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(/(([0-9])|([0-9]{2})|(1[0-1][0-9])|(12[0-8])))

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = [('pybind.slxos.v16r_1_00b.routing_system.router.router_bgp.address_family.ipv6.ipv6_unicast.af_ipv6_vrf', u'af_ipv6_vrf')]
    bindings_list = [('pybind.slxos.v16r_1_00b.routing_system.router.router_bgp.address_family.ipv6.ipv6_unicast.af_ipv6_vrf.aggregate_ipv6_address', 'pybind.slxos.v16r_1_00b.brocade_common_def', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'af_ipv6_vrf_name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'aggregate_ipv6_address', 'keyval': 'aggregate_ip_prefix', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, af_ipv6_vrf=af_ipv6_vrf, aggregate_ipv6_address=aggregate_ipv6_address)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def router_bgp_address_family_ipv6_unicast_vrf_neighbor_delete(self, af_ipv6_vrf=None, af_ipv6_neighbor_addr=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		SLXOS: 16r.1.00b    

	**Parent Instance Keyword Arg Tuple(s)**:
		:param af_ipv6_vrf: kwarg tuple.
		:type af_ipv6_vrf: (af_ipv6_vrf_name).

		:param af_ipv6_vrf_name: VRF name
		:type af_ipv6_vrf_name: (unicode)
		
		.. note::
			* length - [u'1..255']

	**This Instance Keyword Arg Tuple**:
		:param af_ipv6_neighbor_addr: kwarg tuple.
		:type af_ipv6_neighbor_addr: (af_ipv6_neighbor_address).

		:param af_ipv6_neighbor_address: A:B::C:D;;Neighbor Ipv6 Address
		:type af_ipv6_neighbor_address: (unicode)
		
		.. note::
			* pattern - ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = [('pybind.slxos.v16r_1_00b.routing_system.router.router_bgp.address_family.ipv6.ipv6_unicast.af_ipv6_vrf', u'af_ipv6_vrf')]
    bindings_list = [('pybind.slxos.v16r_1_00b.routing_system.router.router_bgp.address_family.ipv6.ipv6_unicast.af_ipv6_vrf.neighbor.af_ipv6_vrf_neighbor_address_holder.af_ipv6_neighbor_addr', 'pybind.slxos.v16r_1_00b.brocade_common_def', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'af_ipv6_vrf_name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'af_ipv6_neighbor_addr', 'keyval': 'af_ipv6_neighbor_address', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, af_ipv6_vrf=af_ipv6_vrf, af_ipv6_neighbor_addr=af_ipv6_neighbor_addr)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def router_bgp_address_family_ipv6_unicast_vrf_network_delete(self, af_ipv6_vrf=None, network=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		SLXOS: 16r.1.00b    

	**Parent Instance Keyword Arg Tuple(s)**:
		:param af_ipv6_vrf: kwarg tuple.
		:type af_ipv6_vrf: (af_ipv6_vrf_name).

		:param af_ipv6_vrf_name: VRF name
		:type af_ipv6_vrf_name: (unicode)
		
		.. note::
			* length - [u'1..255']

	**This Instance Keyword Arg Tuple**:
		:param network: kwarg tuple.
		:type network: (network_ipv6_address).

		:param network_ipv6_address: A:B::C:D/M IPV6 address in dotted decimal/Mask
		:type network_ipv6_address: (unicode)
		
		.. note::
			* pattern - ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(/(([0-9])|([0-9]{2})|(1[0-1][0-9])|(12[0-8])))

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = [('pybind.slxos.v16r_1_00b.routing_system.router.router_bgp.address_family.ipv6.ipv6_unicast.af_ipv6_vrf', u'af_ipv6_vrf')]
    bindings_list = [('pybind.slxos.v16r_1_00b.routing_system.router.router_bgp.address_family.ipv6.ipv6_unicast.af_ipv6_vrf.network', 'pybind.slxos.v16r_1_00b.brocade_common_def', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'af_ipv6_vrf_name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'network', 'keyval': 'network_ipv6_address', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, af_ipv6_vrf=af_ipv6_vrf, network=network)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def router_bgp_neighbor_delete(self, neighbor_addr=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		SLXOS: 16r.1.00b    

	**This Instance Keyword Arg Tuple**:
		:param neighbor_addr: kwarg tuple.
		:type neighbor_addr: (router_bgp_neighbor_address).

		:param router_bgp_neighbor_address: A.B.C.D;;Neighbor Address
		:type router_bgp_neighbor_address: (unicode)
		
		.. note::
			* pattern - (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = []
    bindings_list = [('pybind.slxos.v16r_1_00b.routing_system.router.router_bgp.router_bgp_attributes.neighbor.neighbor_ips.neighbor_addr', 'pybind.slxos.v16r_1_00b.brocade_common_def', 'pybind.slxos.v16r_1_00b'), ('pybind.slxos.v16r_1_00b.routing_system.router.router_bgp.router_bgp_attributes.neighbor.neighbor_ipv6s.neighbor_ipv6_addr', 'pybind.slxos.v16r_1_00b.brocade_common_def', 'pybind.slxos.v16r_1_00b'), ('pybind.slxos.v16r_1_00b.routing_system.router.router_bgp.router_bgp_attributes.neighbor.peer_grps.neighbor_peer_grp', 'pybind.slxos.v16r_1_00b.brocade_common_def', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = []
    bindings_keyval = {'kwargs_key_name': u'neighbor_ipv6_addr', 'keyval': 'router_bgp_neighbor_ipv6_address', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, neighbor_addr=neighbor_addr)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def router_isis_address_family_ipv4_unicast_summary_address_delete(self, summary_address=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		SLXOS: 16r.1.00b    

	**This Instance Keyword Arg Tuple**:
		:param summary_address: kwarg tuple.
		:type summary_address: (summary_ip, summary_ip_mask, summary_ip_level1, summary_ip_level2).

		:param summary_ip: tuple arg.
		:type summary_ip: (unicode)
		
		.. note::
			* pattern - (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?

		:param summary_ip_mask: tuple arg.
		:type summary_ip_mask: (unicode)
		
		.. note::
			* pattern - (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?

		:param summary_ip_level1: For Level-1
		:type summary_ip_level1: (YANGBool)

		:param summary_ip_level2: For Level-2
		:type summary_ip_level2: (YANGBool)

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = []
    bindings_list = [('pybind.slxos.v16r_1_00b.routing_system.router.isis.router_isis_cmds_holder.address_family.ipv4.af_ipv4_unicast.af_ipv4_attributes.summary_address', 'pybind.slxos.v16r_1_00b.brocade_common_def', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = []
    bindings_keyval = {'kwargs_key_name': u'summary_address', 'keyval': 'summary_ip, summary_ip_mask', 'extra_keyval': 'summary_ip, summary_ip_mask, summary_ip_level1, summary_ip_level2'}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, summary_address=summary_address)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def router_isis_address_family_ipv6_unicast_spf_interval_delete(self, spf6_interval=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		SLXOS: 16r.1.00b    

	**This Instance Keyword Arg Tuple**:
		:param spf6_interval: kwarg tuple.
		:type spf6_interval: (spf6_interval_level, spf6_interval_max_hold_time, spf6_interval_initial_delay, spf6_interval_hold_time).

		:param spf6_interval_level: tuple arg.
		:type spf6_interval_level: (unicode)
		
		.. note::
			* enum - [u'level-2', u'level-1']

		:param spf6_interval_max_hold_time: tuple arg.
		:type spf6_interval_max_hold_time: (long)
		
		.. note::
			* range - ['0..4294967295']

		:param spf6_interval_initial_delay: tuple arg.
		:type spf6_interval_initial_delay: (long)
		
		.. note::
			* range - ['0..4294967295']

		:param spf6_interval_hold_time: tuple arg.
		:type spf6_interval_hold_time: (long)
		
		.. note::
			* range - ['0..4294967295']

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = []
    bindings_list = [('pybind.slxos.v16r_1_00b.routing_system.router.isis.router_isis_cmds_holder.address_family.ipv6.af_ipv6_unicast.af_ipv6_attributes.spf6_interval', 'pybind.slxos.v16r_1_00b.brocade_common_def', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = []
    bindings_keyval = {'kwargs_key_name': u'spf6_interval', 'keyval': 'spf6_interval_level', 'extra_keyval': 'spf6_interval_level, spf6_interval_max_hold_time, spf6_interval_initial_delay, spf6_interval_hold_time'}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, spf6_interval=spf6_interval)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def router_isis_address_family_ipv6_unicast_summary_prefix_delete(self, summary_prefix=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		SLXOS: 16r.1.00b    

	**This Instance Keyword Arg Tuple**:
		:param summary_prefix: kwarg tuple.
		:type summary_prefix: (summary_prefix_ipv6).

		:param summary_prefix_ipv6: tuple arg.
		:type summary_prefix_ipv6: (unicode)
		
		.. note::
			* pattern - ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(/(([0-9])|([0-9]{2})|(1[0-1][0-9])|(12[0-8])))

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = []
    bindings_list = [('pybind.slxos.v16r_1_00b.routing_system.router.isis.router_isis_cmds_holder.address_family.ipv6.af_ipv6_unicast.af_ipv6_attributes.summary_prefix', 'pybind.slxos.v16r_1_00b.brocade_common_def', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = []
    bindings_keyval = {'kwargs_key_name': u'summary_prefix', 'keyval': 'summary_prefix_ipv6', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, summary_prefix=summary_prefix)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def router_isis_net_delete(self, net=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		SLXOS: 16r.1.00b    

	**This Instance Keyword Arg Tuple**:
		:param net: kwarg tuple.
		:type net: (net_cmd).

		:param net_cmd: tuple arg.
		:type net_cmd: (unicode)
		
		.. note::
			* pattern - ([0-9a-fA-F]{2}((\.[0-9a-fA-F]{4}){3,9})\.00)

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = []
    bindings_list = [('pybind.slxos.v16r_1_00b.routing_system.router.isis.router_isis_cmds_holder.net', 'pybind.slxos.v16r_1_00b.brocade_common_def', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = []
    bindings_keyval = {'kwargs_key_name': u'net', 'keyval': 'net_cmd', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, net=net)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def router_isis_spf_interval_delete(self, spf_interval=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		SLXOS: 16r.1.00b    

	**This Instance Keyword Arg Tuple**:
		:param spf_interval: kwarg tuple.
		:type spf_interval: (spf_interval_level, spf_interval_max_hold_time, spf_interval_initial_delay, spf_interval_hold_time).

		:param spf_interval_level: tuple arg.
		:type spf_interval_level: (unicode)
		
		.. note::
			* enum - [u'level-2', u'level-1']

		:param spf_interval_max_hold_time: tuple arg.
		:type spf_interval_max_hold_time: (long)
		
		.. note::
			* range - ['0..4294967295']

		:param spf_interval_initial_delay: tuple arg.
		:type spf_interval_initial_delay: (long)
		
		.. note::
			* range - ['0..4294967295']

		:param spf_interval_hold_time: tuple arg.
		:type spf_interval_hold_time: (long)
		
		.. note::
			* range - ['0..4294967295']

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = []
    bindings_list = [('pybind.slxos.v16r_1_00b.routing_system.router.isis.router_isis_cmds_holder.router_isis_attributes.spf_interval', 'pybind.slxos.v16r_1_00b.brocade_common_def', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = []
    bindings_keyval = {'kwargs_key_name': u'spf_interval', 'keyval': 'spf_interval_level', 'extra_keyval': 'spf_interval_level, spf_interval_max_hold_time, spf_interval_initial_delay, spf_interval_hold_time'}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, spf_interval=spf_interval)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def router_mpls_autobw_template_delete(self, autobw_template=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		SLXOS: 16r.1.00b    

	**This Instance Keyword Arg Tuple**:
		:param autobw_template: kwarg tuple.
		:type autobw_template: (autobw_template_name).

		:param autobw_template_name: ASCII string;;Name (up to 64 characters)
		:type autobw_template_name: (unicode)
		
		.. note::
			* length - [u'1..64']

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = []
    bindings_list = [('pybind.slxos.v16r_1_00b.mpls_config.router.mpls.mpls_cmds_holder.autobw_template', 'pybind.slxos.v16r_1_00b.brocade_mpls', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = []
    bindings_keyval = {'kwargs_key_name': u'autobw_template', 'keyval': 'autobw_template_name', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, autobw_template=autobw_template)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def router_mpls_autobw_threshold_table_bandwidth_delete(self, autobw_threshold_table_bandwidth=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		SLXOS: 16r.1.00b    

	**This Instance Keyword Arg Tuple**:
		:param autobw_threshold_table_bandwidth: kwarg tuple.
		:type autobw_threshold_table_bandwidth: (bandwidth_value, autobw_threshold_table_threshold).

		:param bandwidth_value: DECIMAL;;Bandwidth upto which threshold will apply
		:type bandwidth_value: (long)
		
		.. note::
			* range - ['0..4294967295']

		:param autobw_threshold_table_threshold: DECIMAL;;Absolute threshold value for the bandwidth
		:type autobw_threshold_table_threshold: (long)
		
		.. note::
			* range - ['0..4294967295']

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = []
    bindings_list = [('pybind.slxos.v16r_1_00b.mpls_config.router.mpls.mpls_cmds_holder.autobw_threshold_table.autobw_threshold_table_bandwidth', 'pybind.slxos.v16r_1_00b.brocade_mpls', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = []
    bindings_keyval = {'kwargs_key_name': u'autobw_threshold_table_bandwidth', 'keyval': 'bandwidth_value', 'extra_keyval': 'bandwidth_value, autobw_threshold_table_threshold'}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, autobw_threshold_table_bandwidth=autobw_threshold_table_bandwidth)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def router_mpls_bypass_lsp_delete(self, bypass_lsp=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		SLXOS: 16r.1.00b    

	**This Instance Keyword Arg Tuple**:
		:param bypass_lsp: kwarg tuple.
		:type bypass_lsp: (bypass_lsp_name).

		:param bypass_lsp_name: ASCII string;;Name (up to 64 characters)
		:type bypass_lsp_name: (unicode)
		
		.. note::
			* length - [u'1..64']

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = []
    bindings_list = [('pybind.slxos.v16r_1_00b.mpls_config.router.mpls.mpls_cmds_holder.bypass_lsp', 'pybind.slxos.v16r_1_00b.brocade_mpls', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = []
    bindings_keyval = {'kwargs_key_name': u'bypass_lsp', 'keyval': 'bypass_lsp_name', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, bypass_lsp=bypass_lsp)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def router_mpls_bypass_lsp_exclude_interface_delete(self, bypass_lsp=None, exclude_interface=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		SLXOS: 16r.1.00b    

	**Parent Instance Keyword Arg Tuple(s)**:
		:param bypass_lsp: kwarg tuple.
		:type bypass_lsp: (bypass_lsp_name).

		:param bypass_lsp_name: ASCII string;;Name (up to 64 characters)
		:type bypass_lsp_name: (unicode)
		
		.. note::
			* length - [u'1..64']

	**This Instance Keyword Arg Tuple**:
		:param exclude_interface: kwarg tuple.
		:type exclude_interface: (bypass_exclude_interface_type, bypass_exclude_interface_name).

		:param bypass_exclude_interface_type: tuple arg.
		:type bypass_exclude_interface_type: (unicode)
		
		.. note::
			* enum - [u'ethernet', u've']

		:param bypass_exclude_interface_name: The Interface value.
		:type bypass_exclude_interface_name: (unicode)
		
		.. note::
			* length - [u'3..16']
			* pattern - ((([0-9]|[1][0-6]))/([1-9]|[1-9][0-9]|[1-9][0-9][0-9])(:[1-4])?)

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = [('pybind.slxos.v16r_1_00b.mpls_config.router.mpls.mpls_cmds_holder.bypass_lsp', u'bypass_lsp')]
    bindings_list = [('pybind.slxos.v16r_1_00b.mpls_config.router.mpls.mpls_cmds_holder.bypass_lsp.exclude_interface', 'pybind.slxos.v16r_1_00b.brocade_mpls', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'bypass_lsp_name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'exclude_interface', 'keyval': 'bypass_exclude_interface_type, bypass_exclude_interface_name', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, bypass_lsp=bypass_lsp, exclude_interface=exclude_interface)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def router_mpls_cspf_group_delete(self, cspf_group=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		SLXOS: 16r.1.00b    

	**This Instance Keyword Arg Tuple**:
		:param cspf_group: kwarg tuple.
		:type cspf_group: (cspf_group_name).

		:param cspf_group_name: ASCII string;;Name (up to 128 characters)
		:type cspf_group_name: (unicode)
		
		.. note::
			* length - [u'1..128']

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = []
    bindings_list = [('pybind.slxos.v16r_1_00b.mpls_config.router.mpls.mpls_cmds_holder.cspf_group', 'pybind.slxos.v16r_1_00b.brocade_mpls', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = []
    bindings_keyval = {'kwargs_key_name': u'cspf_group', 'keyval': 'cspf_group_name', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, cspf_group=cspf_group)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def router_mpls_cspf_group_from_delete(self, cspf_group=None, cspf_group_ip=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		SLXOS: 16r.1.00b    

	**Parent Instance Keyword Arg Tuple(s)**:
		:param cspf_group: kwarg tuple.
		:type cspf_group: (cspf_group_name).

		:param cspf_group_name: ASCII string;;Name (up to 128 characters)
		:type cspf_group_name: (unicode)
		
		.. note::
			* length - [u'1..128']

	**This Instance Keyword Arg Tuple**:
		:param cspf_group_ip: kwarg tuple.
		:type cspf_group_ip: (cspf_group_ip_address).

		:param cspf_group_ip_address: A.B.C.D;;ip address
		:type cspf_group_ip_address: (unicode)
		
		.. note::
			* pattern - (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = [('pybind.slxos.v16r_1_00b.mpls_config.router.mpls.mpls_cmds_holder.cspf_group', u'cspf_group')]
    bindings_list = [('pybind.slxos.v16r_1_00b.mpls_config.router.mpls.mpls_cmds_holder.cspf_group.cspf_group_ip', 'pybind.slxos.v16r_1_00b.brocade_mpls', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'cspf_group_name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'cspf_group_ip', 'keyval': 'cspf_group_ip_address', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, cspf_group=cspf_group, cspf_group_ip=cspf_group_ip)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def router_mpls_cspf_group_link_delete(self, cspf_group=None, cspf_group_link=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		SLXOS: 16r.1.00b    

	**Parent Instance Keyword Arg Tuple(s)**:
		:param cspf_group: kwarg tuple.
		:type cspf_group: (cspf_group_name).

		:param cspf_group_name: ASCII string;;Name (up to 128 characters)
		:type cspf_group_name: (unicode)
		
		.. note::
			* length - [u'1..128']

	**This Instance Keyword Arg Tuple**:
		:param cspf_group_link: kwarg tuple.
		:type cspf_group_link: (cspf_group_link_from, cspf_group_link_to).

		:param cspf_group_link_from: A.B.C.D;;from ip address
		:type cspf_group_link_from: (unicode)
		
		.. note::
			* pattern - (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?

		:param cspf_group_link_to: A.B.C.D;;to ip address
		:type cspf_group_link_to: (unicode)
		
		.. note::
			* pattern - (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = [('pybind.slxos.v16r_1_00b.mpls_config.router.mpls.mpls_cmds_holder.cspf_group', u'cspf_group')]
    bindings_list = [('pybind.slxos.v16r_1_00b.mpls_config.router.mpls.mpls_cmds_holder.cspf_group.cspf_group_link', 'pybind.slxos.v16r_1_00b.brocade_mpls', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'cspf_group_name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'cspf_group_link', 'keyval': 'cspf_group_link_from, cspf_group_link_to', 'extra_keyval': 'cspf_group_link_from, cspf_group_link_to'}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, cspf_group=cspf_group, cspf_group_link=cspf_group_link)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def router_mpls_cspf_group_node_delete(self, cspf_group=None, cspf_group_node=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		SLXOS: 16r.1.00b    

	**Parent Instance Keyword Arg Tuple(s)**:
		:param cspf_group: kwarg tuple.
		:type cspf_group: (cspf_group_name).

		:param cspf_group_name: ASCII string;;Name (up to 128 characters)
		:type cspf_group_name: (unicode)
		
		.. note::
			* length - [u'1..128']

	**This Instance Keyword Arg Tuple**:
		:param cspf_group_node: kwarg tuple.
		:type cspf_group_node: (cspf_group_node_ip).

		:param cspf_group_node_ip: A.B.C.D;;node ip address
		:type cspf_group_node_ip: (unicode)
		
		.. note::
			* pattern - (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = [('pybind.slxos.v16r_1_00b.mpls_config.router.mpls.mpls_cmds_holder.cspf_group', u'cspf_group')]
    bindings_list = [('pybind.slxos.v16r_1_00b.mpls_config.router.mpls.mpls_cmds_holder.cspf_group.cspf_group_node', 'pybind.slxos.v16r_1_00b.brocade_mpls', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'cspf_group_name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'cspf_group_node', 'keyval': 'cspf_group_node_ip', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, cspf_group=cspf_group, cspf_group_node=cspf_group_node)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def router_mpls_cspf_group_subnet_delete(self, cspf_group=None, cspf_group_subnet=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		SLXOS: 16r.1.00b    

	**Parent Instance Keyword Arg Tuple(s)**:
		:param cspf_group: kwarg tuple.
		:type cspf_group: (cspf_group_name).

		:param cspf_group_name: ASCII string;;Name (up to 128 characters)
		:type cspf_group_name: (unicode)
		
		.. note::
			* length - [u'1..128']

	**This Instance Keyword Arg Tuple**:
		:param cspf_group_subnet: kwarg tuple.
		:type cspf_group_subnet: (cspf_group_subnet_ip).

		:param cspf_group_subnet_ip: A.B.C.D/M;;Subnet address (with host part zero) in dotted decimal/Mask
		:type cspf_group_subnet_ip: (unicode)
		
		.. note::
			* pattern - (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])/(([0-9])|([1-2][0-9])|(3[0-2]))

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = [('pybind.slxos.v16r_1_00b.mpls_config.router.mpls.mpls_cmds_holder.cspf_group', u'cspf_group')]
    bindings_list = [('pybind.slxos.v16r_1_00b.mpls_config.router.mpls.mpls_cmds_holder.cspf_group.cspf_group_subnet', 'pybind.slxos.v16r_1_00b.brocade_mpls', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'cspf_group_name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'cspf_group_subnet', 'keyval': 'cspf_group_subnet_ip', 'extra_keyval': 'cspf_group_subnet_ip'}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, cspf_group=cspf_group, cspf_group_subnet=cspf_group_subnet)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def router_mpls_ldp_session_delete(self, ldp_session=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		SLXOS: 16r.1.00b    

	**This Instance Keyword Arg Tuple**:
		:param ldp_session: kwarg tuple.
		:type ldp_session: (ldp_session_ip).

		:param ldp_session_ip: Define LDP peer ip address
		:type ldp_session_ip: (unicode)
		
		.. note::
			* pattern - (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = []
    bindings_list = [('pybind.slxos.v16r_1_00b.mpls_config.router.mpls.mpls_cmds_holder.ldp.ldp_holder.ldp_session', 'pybind.slxos.v16r_1_00b.brocade_mpls', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = []
    bindings_keyval = {'kwargs_key_name': u'ldp_session', 'keyval': 'ldp_session_ip', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, ldp_session=ldp_session)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def router_mpls_ldp_targeted_peer_delete(self, ldp_targeted_peer=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		SLXOS: 16r.1.00b    

	**This Instance Keyword Arg Tuple**:
		:param ldp_targeted_peer: kwarg tuple.
		:type ldp_targeted_peer: (ldp_targeted_peer_ip).

		:param ldp_targeted_peer_ip: tuple arg.
		:type ldp_targeted_peer_ip: (unicode)
		
		.. note::
			* pattern - (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = []
    bindings_list = [('pybind.slxos.v16r_1_00b.mpls_config.router.mpls.mpls_cmds_holder.ldp.ldp_holder.ldp_targeted_peer', 'pybind.slxos.v16r_1_00b.brocade_mpls', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = []
    bindings_keyval = {'kwargs_key_name': u'ldp_targeted_peer', 'keyval': 'ldp_targeted_peer_ip', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, ldp_targeted_peer=ldp_targeted_peer)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def router_mpls_lsp_delete(self, lsp=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		SLXOS: 16r.1.00b    

	**This Instance Keyword Arg Tuple**:
		:param lsp: kwarg tuple.
		:type lsp: (lsp_name).

		:param lsp_name: ASCII string;;Name (up to 64 characters)
		:type lsp_name: (unicode)
		
		.. note::
			* length - [u'1..64']

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = []
    bindings_list = [('pybind.slxos.v16r_1_00b.mpls_config.router.mpls.mpls_cmds_holder.lsp', 'pybind.slxos.v16r_1_00b.brocade_mpls', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = []
    bindings_keyval = {'kwargs_key_name': u'lsp', 'keyval': 'lsp_name', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, lsp=lsp)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def router_mpls_lsp_secondary_path_delete(self, lsp=None, secondary_path=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		SLXOS: 16r.1.00b    

	**Parent Instance Keyword Arg Tuple(s)**:
		:param lsp: kwarg tuple.
		:type lsp: (lsp_name).

		:param lsp_name: ASCII string;;Name (up to 64 characters)
		:type lsp_name: (unicode)
		
		.. note::
			* length - [u'1..64']

	**This Instance Keyword Arg Tuple**:
		:param secondary_path: kwarg tuple.
		:type secondary_path: (secpath_name).

		:param secpath_name: Set secondary explicit path
		:type secpath_name: (unicode)
		
		.. note::
			* length - [u'1..64']

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = [('pybind.slxos.v16r_1_00b.mpls_config.router.mpls.mpls_cmds_holder.lsp', u'lsp')]
    bindings_list = [('pybind.slxos.v16r_1_00b.mpls_config.router.mpls.mpls_cmds_holder.lsp.secondary_path', 'pybind.slxos.v16r_1_00b.brocade_mpls', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'lsp_name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'secondary_path', 'keyval': 'secpath_name', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, lsp=lsp, secondary_path=secondary_path)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def router_mpls_mpls_interface_delete(self, mpls_interface=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		SLXOS: 16r.1.00b    

	**This Instance Keyword Arg Tuple**:
		:param mpls_interface: kwarg tuple.
		:type mpls_interface: (interface_type, interface_name).

		:param interface_type: tuple arg.
		:type interface_type: (unicode)
		
		.. note::
			* enum - [u'ethernet', u've']

		:param interface_name: The Interface value.
		:type interface_name: (unicode)
		
		.. note::
			* length - [u'3..16']
			* pattern - ((([0-9]|[1][0-6]))/([1-9]|[1-9][0-9]|[1-9][0-9][0-9])(:[1-4])?)

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = []
    bindings_list = [('pybind.slxos.v16r_1_00b.mpls_config.router.mpls.mpls_cmds_holder.mpls_interface', 'pybind.slxos.v16r_1_00b.brocade_mpls', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = []
    bindings_keyval = {'kwargs_key_name': u'mpls_interface', 'keyval': 'interface_type, interface_name', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, mpls_interface=mpls_interface)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def router_mpls_path_delete(self, path=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		SLXOS: 16r.1.00b    

	**This Instance Keyword Arg Tuple**:
		:param path: kwarg tuple.
		:type path: (path_name).

		:param path_name: ASCII string;;Name (up to 64 characters)
		:type path_name: (unicode)
		
		.. note::
			* length - [u'1..64']

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = []
    bindings_list = [('pybind.slxos.v16r_1_00b.mpls_config.router.mpls.mpls_cmds_holder.path', 'pybind.slxos.v16r_1_00b.brocade_mpls', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = []
    bindings_keyval = {'kwargs_key_name': u'path', 'keyval': 'path_name', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, path=path)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def router_mpls_path_hop_delete(self, path=None, path_hop=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		SLXOS: 16r.1.00b    

	**Parent Instance Keyword Arg Tuple(s)**:
		:param path: kwarg tuple.
		:type path: (path_name).

		:param path_name: ASCII string;;Name (up to 64 characters)
		:type path_name: (unicode)
		
		.. note::
			* length - [u'1..64']

	**This Instance Keyword Arg Tuple**:
		:param path_hop: kwarg tuple.
		:type path_hop: (path_hop_ip, path_hop_type).

		:param path_hop_ip: A.B.C.D;;path hop ip address
		:type path_hop_ip: (unicode)
		
		.. note::
			* pattern - (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?

		:param path_hop_type: path hop type
		:type path_hop_type: (unicode)
		
		.. note::
			* enum - [u'strict', u'loose']

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = [('pybind.slxos.v16r_1_00b.mpls_config.router.mpls.mpls_cmds_holder.path', u'path')]
    bindings_list = [('pybind.slxos.v16r_1_00b.mpls_config.router.mpls.mpls_cmds_holder.path.path_hop', 'pybind.slxos.v16r_1_00b.brocade_mpls', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'path_name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'path_hop', 'keyval': 'path_hop_ip', 'extra_keyval': 'path_hop_ip, path_hop_type'}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, path=path, path_hop=path_hop)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def router_mpls_path_insert_delete(self, path=None, path_insert=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		SLXOS: 16r.1.00b    

	**Parent Instance Keyword Arg Tuple(s)**:
		:param path: kwarg tuple.
		:type path: (path_name).

		:param path_name: ASCII string;;Name (up to 64 characters)
		:type path_name: (unicode)
		
		.. note::
			* length - [u'1..64']

	**This Instance Keyword Arg Tuple**:
		:param path_insert: kwarg tuple.
		:type path_insert: (path_insert_ip).

		:param path_insert_ip: A.B.C.D;;path hop ip address
		:type path_insert_ip: (unicode)
		
		.. note::
			* pattern - (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = [('pybind.slxos.v16r_1_00b.mpls_config.router.mpls.mpls_cmds_holder.path', u'path')]
    bindings_list = [('pybind.slxos.v16r_1_00b.mpls_config.router.mpls.mpls_cmds_holder.path.path_insert', 'pybind.slxos.v16r_1_00b.brocade_mpls', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'path_name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'path_insert', 'keyval': 'path_insert_ip', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, path=path, path_insert=path_insert)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def router_mpls_policy_admin_group_delete(self, policy_admin_group=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		SLXOS: 16r.1.00b    

	**This Instance Keyword Arg Tuple**:
		:param policy_admin_group: kwarg tuple.
		:type policy_admin_group: (admin_group_name, admin_group_number).

		:param admin_group_name: tuple arg.
		:type admin_group_name: (unicode)
		
		.. note::
			* length - [u'1..32']

		:param admin_group_number: tuple arg.
		:type admin_group_number: (long)
		
		.. note::
			* range - ['0..4294967295']

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = []
    bindings_list = [('pybind.slxos.v16r_1_00b.mpls_config.router.mpls.mpls_cmds_holder.policy.policy_admin_group', 'pybind.slxos.v16r_1_00b.brocade_mpls', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = []
    bindings_keyval = {'kwargs_key_name': u'policy_admin_group', 'keyval': 'admin_group_name, admin_group_number', 'extra_keyval': 'admin_group_name, admin_group_number'}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, policy_admin_group=policy_admin_group)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def router_ospf_delete(self, ospf=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		SLXOS: 16r.1.00b    

	**This Instance Keyword Arg Tuple**:
		:param ospf: kwarg tuple.
		:type ospf: (vrf).

		:param vrf: Create a VRF
		:type vrf: (unicode)
		
		.. note::
			* length - [u'1..64']

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = []
    bindings_list = [('pybind.slxos.v16r_1_00b.routing_system.router.ospf', 'pybind.slxos.v16r_1_00b.brocade_common_def', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = []
    bindings_keyval = {'kwargs_key_name': u'ospf', 'keyval': 'vrf', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, ospf=ospf)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def router_ospf_area_delete(self, ospf=None, area=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		SLXOS: 16r.1.00b    

	**Parent Instance Keyword Arg Tuple(s)**:
		:param ospf: kwarg tuple.
		:type ospf: (vrf).

		:param vrf: Create a VRF
		:type vrf: (unicode)
		
		.. note::
			* length - [u'1..64']

	**This Instance Keyword Arg Tuple**:
		:param area: kwarg tuple.
		:type area: (area_id).

		:param area_id: tuple arg.
		:type area_id: (unicode)
		
		.. note::
			* pattern - ((([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.)(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){2}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5]))|(([0-9])|([1-9]([0-9]{1,8}))|([1]([0-9]{1,9}))|([2][0]([0-9]{1,8}))|([2][1][0-3]([0-9]{1,7}))|([2][1][4][0-6]([0-9]{1,6}))|([2][1][4][7][0-3]([0-9]{1,5}))|([2][1][4][7][4][0-7]([0-9]{1,4}))|([2][1][4][7][4][8][0-2]([0-9]{1,3}))|([2][1][4][7][4][8][3][0-5]([0-9]{1,2}))|([2][1][4][7][4][8][3][6][0-3][0-9])|([2][1][4][7][4][8][3][6][4][0-7]))

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = [('pybind.slxos.v16r_1_00b.routing_system.router.ospf', u'ospf')]
    bindings_list = [('pybind.slxos.v16r_1_00b.routing_system.router.ospf.area', 'pybind.slxos.v16r_1_00b.brocade_common_def', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'vrf', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'area', 'keyval': 'area_id', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, ospf=ospf, area=area)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def router_ospf_area_range_delete(self, ospf=None, area=None, range=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		SLXOS: 16r.1.00b    

	**Parent Instance Keyword Arg Tuple(s)**:
		:param ospf: kwarg tuple.
		:type ospf: (vrf).

		:param vrf: Create a VRF
		:type vrf: (unicode)
		
		.. note::
			* length - [u'1..64']

		:param area: kwarg tuple.
		:type area: (area_id).

		:param area_id: tuple arg.
		:type area_id: (unicode)
		
		.. note::
			* pattern - ((([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.)(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){2}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5]))|(([0-9])|([1-9]([0-9]{1,8}))|([1]([0-9]{1,9}))|([2][0]([0-9]{1,8}))|([2][1][0-3]([0-9]{1,7}))|([2][1][4][0-6]([0-9]{1,6}))|([2][1][4][7][0-3]([0-9]{1,5}))|([2][1][4][7][4][0-7]([0-9]{1,4}))|([2][1][4][7][4][8][0-2]([0-9]{1,3}))|([2][1][4][7][4][8][3][0-5]([0-9]{1,2}))|([2][1][4][7][4][8][3][6][0-3][0-9])|([2][1][4][7][4][8][3][6][4][0-7]))

	**This Instance Keyword Arg Tuple**:
		:param range: kwarg tuple.
		:type range: (range_address, range_mask, range_effect, range_cost).

		:param range_address: A.B.C.D   IP address to match
		:type range_address: (unicode)
		
		.. note::
			* pattern - (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?

		:param range_mask: A.B.C.D   IP mask for address
		:type range_mask: (unicode)
		
		.. note::
			* pattern - (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?

		:param range_effect: Advertise/Do not advertise this 
type-3 summarization
		:type range_effect: (unicode)
		
		.. note::
			* enum - [u'advertise', u'not-advertise']

		:param range_cost: Configure area range cost
		:type range_cost: (long)
		
		.. note::
			* range - ['0..4294967295']

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = [('pybind.slxos.v16r_1_00b.routing_system.router.ospf', u'ospf'), ('pybind.slxos.v16r_1_00b.routing_system.router.ospf.area', u'area')]
    bindings_list = [('pybind.slxos.v16r_1_00b.routing_system.router.ospf.area.range', 'pybind.slxos.v16r_1_00b.brocade_common_def', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'vrf', 'extra_keyval': ''}, {'keyval': 'area_id', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'range', 'keyval': 'range_address, range_mask', 'extra_keyval': 'range_address, range_mask, range_effect, range_cost'}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, ospf=ospf, area=area, range=range)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def router_ospf_area_virtual_link_delete(self, ospf=None, area=None, virtual_link=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		SLXOS: 16r.1.00b    

	**Parent Instance Keyword Arg Tuple(s)**:
		:param ospf: kwarg tuple.
		:type ospf: (vrf).

		:param vrf: Create a VRF
		:type vrf: (unicode)
		
		.. note::
			* length - [u'1..64']

		:param area: kwarg tuple.
		:type area: (area_id).

		:param area_id: tuple arg.
		:type area_id: (unicode)
		
		.. note::
			* pattern - ((([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.)(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){2}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5]))|(([0-9])|([1-9]([0-9]{1,8}))|([1]([0-9]{1,9}))|([2][0]([0-9]{1,8}))|([2][1][0-3]([0-9]{1,7}))|([2][1][4][0-6]([0-9]{1,6}))|([2][1][4][7][0-3]([0-9]{1,5}))|([2][1][4][7][4][0-7]([0-9]{1,4}))|([2][1][4][7][4][8][0-2]([0-9]{1,3}))|([2][1][4][7][4][8][3][0-5]([0-9]{1,2}))|([2][1][4][7][4][8][3][6][0-3][0-9])|([2][1][4][7][4][8][3][6][4][0-7]))

	**This Instance Keyword Arg Tuple**:
		:param virtual_link: kwarg tuple.
		:type virtual_link: (virt_link_neighbor).

		:param virt_link_neighbor: tuple arg.
		:type virt_link_neighbor: (unicode)
		
		.. note::
			* pattern - (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = [('pybind.slxos.v16r_1_00b.routing_system.router.ospf', u'ospf'), ('pybind.slxos.v16r_1_00b.routing_system.router.ospf.area', u'area')]
    bindings_list = [('pybind.slxos.v16r_1_00b.routing_system.router.ospf.area.virtual_link', 'pybind.slxos.v16r_1_00b.brocade_common_def', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'vrf', 'extra_keyval': ''}, {'keyval': 'area_id', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'virtual_link', 'keyval': 'virt_link_neighbor', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, ospf=ospf, area=area, virtual_link=virtual_link)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def router_ospf_deny_redistribute_delete(self, ospf=None, redistribute=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		SLXOS: 16r.1.00b    

	**Parent Instance Keyword Arg Tuple(s)**:
		:param ospf: kwarg tuple.
		:type ospf: (vrf).

		:param vrf: Create a VRF
		:type vrf: (unicode)
		
		.. note::
			* length - [u'1..64']

	**This Instance Keyword Arg Tuple**:
		:param redistribute: kwarg tuple.
		:type redistribute: (redist_value, route_option, address, mask, set_metric_val, match_metric_val).

		:param redist_value: Number
		:type redist_value: (long)
		
		.. note::
			* range - ['0..4294967295']

		:param route_option: OSPF route option
		:type route_option: (unicode)
		
		.. note::
			* enum - [u'connected', u'all', u'static']

		:param address: IP address
		:type address: (unicode)
		
		.. note::
			* pattern - (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?

		:param mask: Subnet Mask
		:type mask: (unicode)
		
		.. note::
			* pattern - (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?

		:param set_metric_val: Metric value
		:type set_metric_val: (long)
		
		.. note::
			* range - ['0..4294967295']

		:param match_metric_val: Metric value
		:type match_metric_val: (long)
		
		.. note::
			* range - ['0..4294967295']

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = [('pybind.slxos.v16r_1_00b.routing_system.router.ospf', u'ospf')]
    bindings_list = [('pybind.slxos.v16r_1_00b.routing_system.router.ospf.deny.redistribute', 'pybind.slxos.v16r_1_00b.brocade_common_def', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'vrf', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'redistribute', 'keyval': 'redist_value, route_option', 'extra_keyval': 'redist_value, route_option, address, mask, set_metric_val, match_metric_val'}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, ospf=ospf, redistribute=redistribute)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def router_ospf_distance_delete(self, ospf=None, distance=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		SLXOS: 16r.1.00b    

	**Parent Instance Keyword Arg Tuple(s)**:
		:param ospf: kwarg tuple.
		:type ospf: (vrf).

		:param vrf: Create a VRF
		:type vrf: (unicode)
		
		.. note::
			* length - [u'1..64']

	**This Instance Keyword Arg Tuple**:
		:param distance: kwarg tuple.
		:type distance: (route_type).

		:param route_type: The type of route propogation
		:type route_type: (unicode)
		
		.. note::
			* enum - [u'intra-area', u'external', u'inter-area']

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = [('pybind.slxos.v16r_1_00b.routing_system.router.ospf', u'ospf')]
    bindings_list = [('pybind.slxos.v16r_1_00b.routing_system.router.ospf.distance', 'pybind.slxos.v16r_1_00b.brocade_common_def', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'vrf', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'distance', 'keyval': 'route_type', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, ospf=ospf, distance=distance)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def router_ospf_neighbor_delete(self, ospf=None, neighbor=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		SLXOS: 16r.1.00b    

	**Parent Instance Keyword Arg Tuple(s)**:
		:param ospf: kwarg tuple.
		:type ospf: (vrf).

		:param vrf: Create a VRF
		:type vrf: (unicode)
		
		.. note::
			* length - [u'1..64']

	**This Instance Keyword Arg Tuple**:
		:param neighbor: kwarg tuple.
		:type neighbor: (neighbor_addr).

		:param neighbor_addr: tuple arg.
		:type neighbor_addr: (unicode)
		
		.. note::
			* pattern - (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = [('pybind.slxos.v16r_1_00b.routing_system.router.ospf', u'ospf')]
    bindings_list = [('pybind.slxos.v16r_1_00b.routing_system.router.ospf.neighbor', 'pybind.slxos.v16r_1_00b.brocade_common_def', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'vrf', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'neighbor', 'keyval': 'neighbor_addr', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, ospf=ospf, neighbor=neighbor)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def router_ospf_permit_redistribute_delete(self, ospf=None, redistribute=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		SLXOS: 16r.1.00b    

	**Parent Instance Keyword Arg Tuple(s)**:
		:param ospf: kwarg tuple.
		:type ospf: (vrf).

		:param vrf: Create a VRF
		:type vrf: (unicode)
		
		.. note::
			* length - [u'1..64']

	**This Instance Keyword Arg Tuple**:
		:param redistribute: kwarg tuple.
		:type redistribute: (redist_value, route_option, address, mask, set_metric_val, match_metric_val).

		:param redist_value: Number
		:type redist_value: (long)
		
		.. note::
			* range - ['0..4294967295']

		:param route_option: OSPF route option
		:type route_option: (unicode)
		
		.. note::
			* enum - [u'connected', u'all', u'static']

		:param address: IP address
		:type address: (unicode)
		
		.. note::
			* pattern - (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?

		:param mask: Subnet Mask
		:type mask: (unicode)
		
		.. note::
			* pattern - (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?

		:param set_metric_val: Metric value
		:type set_metric_val: (long)
		
		.. note::
			* range - ['0..4294967295']

		:param match_metric_val: Metric value
		:type match_metric_val: (long)
		
		.. note::
			* range - ['0..4294967295']

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = [('pybind.slxos.v16r_1_00b.routing_system.router.ospf', u'ospf')]
    bindings_list = [('pybind.slxos.v16r_1_00b.routing_system.router.ospf.permit.redistribute', 'pybind.slxos.v16r_1_00b.brocade_common_def', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'vrf', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'redistribute', 'keyval': 'redist_value, route_option', 'extra_keyval': 'redist_value, route_option, address, mask, set_metric_val, match_metric_val'}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, ospf=ospf, redistribute=redistribute)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def router_ospf_summary_address_delete(self, ospf=None, summary_address=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		SLXOS: 16r.1.00b    

	**Parent Instance Keyword Arg Tuple(s)**:
		:param ospf: kwarg tuple.
		:type ospf: (vrf).

		:param vrf: Create a VRF
		:type vrf: (unicode)
		
		.. note::
			* length - [u'1..64']

	**This Instance Keyword Arg Tuple**:
		:param summary_address: kwarg tuple.
		:type summary_address: (sum_address, sum_address_mask).

		:param sum_address: tuple arg.
		:type sum_address: (unicode)
		
		.. note::
			* pattern - (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?

		:param sum_address_mask: tuple arg.
		:type sum_address_mask: (unicode)
		
		.. note::
			* pattern - (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = [('pybind.slxos.v16r_1_00b.routing_system.router.ospf', u'ospf')]
    bindings_list = [('pybind.slxos.v16r_1_00b.routing_system.router.ospf.summary_address', 'pybind.slxos.v16r_1_00b.brocade_common_def', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'vrf', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'summary_address', 'keyval': 'sum_address, sum_address_mask', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, ospf=ospf, summary_address=summary_address)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def router_pim_anycast_rp_delete(self, anycast_rp=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		SLXOS: 16r.1.00b    

	**This Instance Keyword Arg Tuple**:
		:param anycast_rp: kwarg tuple.
		:type anycast_rp: (anycast_ip_addr, anycast_prefix_list).

		:param anycast_ip_addr: tuple arg.
		:type anycast_ip_addr: (unicode)
		
		.. note::
			* pattern - (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?

		:param anycast_prefix_list: tuple arg.
		:type anycast_prefix_list: (unicode)
		
		.. note::
			* pattern - [a-zA-Z]{1}([-a-zA-Z0-9\.\\\\@#\+\*\(\)=\{~\}%<>=$_\[\]\|]{0,31})

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = []
    bindings_list = [('pybind.slxos.v16r_1_00b.routing_system.router.hide_pim_holder.pim.anycast_rp', 'pybind.slxos.v16r_1_00b.brocade_common_def', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = []
    bindings_keyval = {'kwargs_key_name': u'anycast_rp', 'keyval': 'anycast_ip_addr', 'extra_keyval': 'anycast_ip_addr, anycast_prefix_list'}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, anycast_rp=anycast_rp)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def router_pim_anycast_rp_ip_delete(self, anycast_rp_ip=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		SLXOS: 16r.1.00b    

	**This Instance Keyword Arg Tuple**:
		:param anycast_rp_ip: kwarg tuple.
		:type anycast_rp_ip: (anycast_rp_ip_addr).

		:param anycast_rp_ip_addr: tuple arg.
		:type anycast_rp_ip_addr: (unicode)
		
		.. note::
			* pattern - (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = []
    bindings_list = [('pybind.slxos.v16r_1_00b.routing_system.router.hide_pim_holder.pim.anycast_rp_ip', 'pybind.slxos.v16r_1_00b.brocade_common_def', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = []
    bindings_keyval = {'kwargs_key_name': u'anycast_rp_ip', 'keyval': 'anycast_rp_ip_addr', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, anycast_rp_ip=anycast_rp_ip)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def router_pim_bsr_candidate_interface_delete(self, bsr_cand_interface=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		SLXOS: 16r.1.00b    

	**This Instance Keyword Arg Tuple**:
		:param bsr_cand_interface: kwarg tuple.
		:type bsr_cand_interface: (bsr_cand_intf_type, bsr_cand_intf_id, hash_mask_length, bsr_cand_priority).

		:param bsr_cand_intf_type: tuple arg.
		:type bsr_cand_intf_type: (unicode)
		
		.. note::
			* enum - [u'ethernet', u'port-channel', u've', u'loopback']

		:param bsr_cand_intf_id: Interface name in slot/port format for ethernet or port-channel/ve/loopback interface number
		:type bsr_cand_intf_id: (unicode)

		:param hash_mask_length: BSR hash mask
		:type hash_mask_length: (int)
		
		.. note::
			* range - ['0..65535']

		:param bsr_cand_priority: BSR priority
		:type bsr_cand_priority: (long)
		
		.. note::
			* range - ['0..4294967295']

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = []
    bindings_list = [('pybind.slxos.v16r_1_00b.routing_system.router.hide_pim_holder.pim.bsr_candidate.bsr_cand_interface', 'pybind.slxos.v16r_1_00b.brocade_common_def', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = []
    bindings_keyval = {'kwargs_key_name': u'bsr_cand_interface', 'keyval': 'bsr_cand_intf_type, bsr_cand_intf_id', 'extra_keyval': 'bsr_cand_intf_type, bsr_cand_intf_id, hash_mask_length, bsr_cand_priority'}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, bsr_cand_interface=bsr_cand_interface)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def router_pim_rp_address_delete(self, rp_address=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		SLXOS: 16r.1.00b    

	**This Instance Keyword Arg Tuple**:
		:param rp_address: kwarg tuple.
		:type rp_address: (rp_ip_addr, rp_addr_prefix_list).

		:param rp_ip_addr: tuple arg.
		:type rp_ip_addr: (unicode)
		
		.. note::
			* pattern - (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?

		:param rp_addr_prefix_list: Prefix list
		:type rp_addr_prefix_list: (unicode)
		
		.. note::
			* pattern - [a-zA-Z]{1}([-a-zA-Z0-9\.\\\\@#\+\*\(\)=\{~\}%<>=$_\[\]\|]{0,62})

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = []
    bindings_list = [('pybind.slxos.v16r_1_00b.routing_system.router.hide_pim_holder.pim.rp_address', 'pybind.slxos.v16r_1_00b.brocade_common_def', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = []
    bindings_keyval = {'kwargs_key_name': u'rp_address', 'keyval': 'rp_ip_addr', 'extra_keyval': 'rp_ip_addr, rp_addr_prefix_list'}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, rp_address=rp_address)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def router_pim_rp_candidate_interface_delete(self, rp_cand_interface=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		SLXOS: 16r.1.00b    

	**This Instance Keyword Arg Tuple**:
		:param rp_cand_interface: kwarg tuple.
		:type rp_cand_interface: (rp_cand_intf_type, rp_cand_intf_id).

		:param rp_cand_intf_type: tuple arg.
		:type rp_cand_intf_type: (unicode)
		
		.. note::
			* enum - [u'ethernet', u'port-channel', u've', u'loopback']

		:param rp_cand_intf_id: Interface name in slot/port format for ethernet or port-channel/ve/loopback interface number
		:type rp_cand_intf_id: (unicode)

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = []
    bindings_list = [('pybind.slxos.v16r_1_00b.routing_system.router.hide_pim_holder.pim.rp_candidate.rp_cand_interface', 'pybind.slxos.v16r_1_00b.brocade_common_def', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = []
    bindings_keyval = {'kwargs_key_name': u'rp_cand_interface', 'keyval': 'rp_cand_intf_type, rp_cand_intf_id', 'extra_keyval': 'rp_cand_intf_type, rp_cand_intf_id'}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, rp_cand_interface=rp_cand_interface)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def router_pim_rp_candidate_prefix_delete(self, rp_cand_grp_prefix=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		SLXOS: 16r.1.00b    

	**This Instance Keyword Arg Tuple**:
		:param rp_cand_grp_prefix: kwarg tuple.
		:type rp_cand_grp_prefix: (rp_cand_prefix_name).

		:param rp_cand_prefix_name: tuple arg.
		:type rp_cand_prefix_name: (unicode)
		
		.. note::
			* pattern - [a-zA-Z]{1}([-a-zA-Z0-9\.\\\\@#\+\*\(\)=\{~\}%<>=$_\[\]\|]{0,31})

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = []
    bindings_list = [('pybind.slxos.v16r_1_00b.routing_system.router.hide_pim_holder.pim.rp_candidate.rp_cand_grp_prefix', 'pybind.slxos.v16r_1_00b.brocade_common_def', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = []
    bindings_keyval = {'kwargs_key_name': u'rp_cand_grp_prefix', 'keyval': 'rp_cand_prefix_name', 'extra_keyval': 'rp_cand_prefix_name'}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, rp_cand_grp_prefix=rp_cand_grp_prefix)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def rule_delete(self, rule=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		NOS: 6.0.2b, 7.0.1a, 7.1.0
		SLXOS: 16r.1.00b    

	**This Instance Keyword Arg Tuple**:
		:param rule: kwarg tuple.
		:type rule: (index, action, operation, role).

		:param index: tuple arg.
		:type index: (long)
		
		.. note::
			* range - ['0..4294967295']

		:param action: Action for the command
		:type action: (unicode)
		
		.. note::
			* enum - [u'accept', u'reject']

		:param operation: Operation for the command
		:type operation: (unicode)
		
		.. note::
			* enum - [u'read-write', u'read-only']

		:param role: One of the existing roles
		:type role: (unicode)
		
		.. note::
			* length - [u'4 .. 32']

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = []
    bindings_list = [('pybind.nos.v6_0_2b.rule', 'pybind.nos.v6_0_2b.brocade_aaa', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.rule', 'pybind.nos.v7_0_1a.brocade_aaa', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.rule', 'pybind.nos.v7_1_0.brocade_aaa', 'pybind.nos.v7_1_0'), ('pybind.slxos.v16r_1_00b.rule', 'pybind.slxos.v16r_1_00b.brocade_aaa', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = []
    bindings_keyval = {'kwargs_key_name': 'rule', 'keyval': 'index', 'extra_keyval': 'index, action, operation, role'}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, rule=rule)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def secpolicy_active_policy_delete(self, policies=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		NOS: 6.0.2b, 7.0.1a, 7.1.0
		SLXOS: 16r.1.00b    

	**This Instance Keyword Arg Tuple**:
		:param policies: kwarg tuple.
		:type policies: (policy).

		:param policy: tuple arg.
		:type policy: (unicode)
		
		.. note::
			* pattern - SCC_POLICY

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = []
    bindings_list = [('pybind.nos.v6_0_2b.secpolicy_sa.secpolicy.active_policy.policies', 'pybind.nos.v6_0_2b.brocade_fc_auth', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.secpolicy_sa.secpolicy.active_policy.policies', 'pybind.nos.v7_0_1a.brocade_fc_auth', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.secpolicy_sa.secpolicy.active_policy.policies', 'pybind.nos.v7_1_0.brocade_fc_auth', 'pybind.nos.v7_1_0'), ('pybind.slxos.v16r_1_00b.secpolicy_sa.secpolicy.active_policy.policies', 'pybind.slxos.v16r_1_00b.brocade_fc_auth', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = []
    bindings_keyval = {'kwargs_key_name': u'policies', 'keyval': 'policy', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, policies=policies)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def secpolicy_active_policy_member_entry_delete(self, policies=None, member_entry=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		NOS: 6.0.2b, 7.0.1a, 7.1.0
		SLXOS: 16r.1.00b    

	**Parent Instance Keyword Arg Tuple(s)**:
		:param policies: kwarg tuple.
		:type policies: (policy).

		:param policy: tuple arg.
		:type policy: (unicode)
		
		.. note::
			* pattern - SCC_POLICY

	**This Instance Keyword Arg Tuple**:
		:param member_entry: kwarg tuple.
		:type member_entry: (member).

		:param member: WWN of the switch
		:type member: (unicode)

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = [('pybind.nos.v7_1_0.secpolicy_sa.secpolicy.active_policy.policies', u'policies'), ('pybind.nos.v7_0_1a.secpolicy_sa.secpolicy.active_policy.policies', u'policies'), ('pybind.nos.v6_0_2b.secpolicy_sa.secpolicy.active_policy.policies', u'policies'), ('pybind.slxos.v16r_1_00b.secpolicy_sa.secpolicy.active_policy.policies', u'policies')]
    bindings_list = [('pybind.nos.v6_0_2b.secpolicy_sa.secpolicy.active_policy.policies.member_entry', 'pybind.nos.v6_0_2b.brocade_fc_auth', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.secpolicy_sa.secpolicy.active_policy.policies.member_entry', 'pybind.nos.v7_0_1a.brocade_fc_auth', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.secpolicy_sa.secpolicy.active_policy.policies.member_entry', 'pybind.nos.v7_1_0.brocade_fc_auth', 'pybind.nos.v7_1_0'), ('pybind.slxos.v16r_1_00b.secpolicy_sa.secpolicy.active_policy.policies.member_entry', 'pybind.slxos.v16r_1_00b.brocade_fc_auth', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'policy', 'extra_keyval': ''}, {'keyval': 'policy', 'extra_keyval': ''}, {'keyval': 'policy', 'extra_keyval': ''}, {'keyval': 'policy', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'member_entry', 'keyval': 'member', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, policies=policies, member_entry=member_entry)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def secpolicy_defined_policy_delete(self, policies=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		NOS: 6.0.2b, 7.0.1a, 7.1.0
		SLXOS: 16r.1.00b    

	**This Instance Keyword Arg Tuple**:
		:param policies: kwarg tuple.
		:type policies: (policy).

		:param policy: tuple arg.
		:type policy: (unicode)
		
		.. note::
			* pattern - SCC_POLICY

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = []
    bindings_list = [('pybind.nos.v6_0_2b.secpolicy_sa.secpolicy.defined_policy.policies', 'pybind.nos.v6_0_2b.brocade_fc_auth', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.secpolicy_sa.secpolicy.defined_policy.policies', 'pybind.nos.v7_0_1a.brocade_fc_auth', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.secpolicy_sa.secpolicy.defined_policy.policies', 'pybind.nos.v7_1_0.brocade_fc_auth', 'pybind.nos.v7_1_0'), ('pybind.slxos.v16r_1_00b.secpolicy_sa.secpolicy.defined_policy.policies', 'pybind.slxos.v16r_1_00b.brocade_fc_auth', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = []
    bindings_keyval = {'kwargs_key_name': u'policies', 'keyval': 'policy', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, policies=policies)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def secpolicy_defined_policy_member_entry_delete(self, policies=None, member_entry=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		NOS: 6.0.2b, 7.0.1a, 7.1.0
		SLXOS: 16r.1.00b    

	**Parent Instance Keyword Arg Tuple(s)**:
		:param policies: kwarg tuple.
		:type policies: (policy).

		:param policy: tuple arg.
		:type policy: (unicode)
		
		.. note::
			* pattern - SCC_POLICY

	**This Instance Keyword Arg Tuple**:
		:param member_entry: kwarg tuple.
		:type member_entry: (member).

		:param member: WWN of the switch
		:type member: (unicode)

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = [('pybind.nos.v7_1_0.secpolicy_sa.secpolicy.defined_policy.policies', u'policies'), ('pybind.nos.v7_0_1a.secpolicy_sa.secpolicy.defined_policy.policies', u'policies'), ('pybind.nos.v6_0_2b.secpolicy_sa.secpolicy.defined_policy.policies', u'policies'), ('pybind.slxos.v16r_1_00b.secpolicy_sa.secpolicy.defined_policy.policies', u'policies')]
    bindings_list = [('pybind.nos.v6_0_2b.secpolicy_sa.secpolicy.defined_policy.policies.member_entry', 'pybind.nos.v6_0_2b.brocade_fc_auth', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.secpolicy_sa.secpolicy.defined_policy.policies.member_entry', 'pybind.nos.v7_0_1a.brocade_fc_auth', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.secpolicy_sa.secpolicy.defined_policy.policies.member_entry', 'pybind.nos.v7_1_0.brocade_fc_auth', 'pybind.nos.v7_1_0'), ('pybind.slxos.v16r_1_00b.secpolicy_sa.secpolicy.defined_policy.policies.member_entry', 'pybind.slxos.v16r_1_00b.brocade_fc_auth', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'policy', 'extra_keyval': ''}, {'keyval': 'policy', 'extra_keyval': ''}, {'keyval': 'policy', 'extra_keyval': ''}, {'keyval': 'policy', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'member_entry', 'keyval': 'member', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, policies=policies, member_entry=member_entry)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def sflow_collector_delete(self, collector=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		NOS: 6.0.2b, 7.0.1a, 7.1.0
		SLXOS: 16r.1.00b    

	**This Instance Keyword Arg Tuple**:
		:param collector: kwarg tuple.
		:type collector: (collector_ip_address, collector_port_number, use_vrf).

		:param collector_ip_address: <ipv4/v6 address>; The IPv4/IPv6 address of the Sflow collector
		:type collector_ip_address: (unicode)
		
		.. note::
			* pattern - (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?

		:param collector_port_number: <1-65535> The port number used by the Sflow collector (default = 6343)
		:type collector_port_number: (long)
		
		.. note::
			* range - ['0..4294967295']

		:param use_vrf: Vrf to use for sending data to the collector (default = mgmt-vrf)
		:type use_vrf: (unicode)
		
		.. note::
			* length - [u'1..32']
			* pattern - ((([a-zA-Z0-9_]([a-zA-Z0-9\-_]){0,61})?[a-zA-Z0-9]\.)*([a-zA-Z0-9_]([a-zA-Z0-9\-_]){0,61})?[a-zA-Z0-9]\.?)|\.

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = []
    bindings_list = [('pybind.nos.v6_0_2b.sflow.collector', 'pybind.nos.v6_0_2b.brocade_sflow', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.sflow.collector', 'pybind.nos.v7_0_1a.brocade_sflow', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.sflow.collector', 'pybind.nos.v7_1_0.brocade_sflow', 'pybind.nos.v7_1_0'), ('pybind.slxos.v16r_1_00b.sflow.collector', 'pybind.slxos.v16r_1_00b.brocade_sflow', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = []
    bindings_keyval = {'kwargs_key_name': u'collector', 'keyval': 'collector_ip_address, collector_port_number, use_vrf', 'extra_keyval': 'collector_ip_address, collector_port_number, use_vrf'}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, collector=collector)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def sflow_profile_delete(self, sflow_profile=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		NOS: 6.0.2b, 7.0.1a, 7.1.0
		SLXOS: 16r.1.00b    

	**This Instance Keyword Arg Tuple**:
		:param sflow_profile: kwarg tuple.
		:type sflow_profile: (profile_name, profile_sampling_rate).

		:param profile_name: tuple arg.
		:type profile_name: (unicode)
		
		.. note::
			* pattern - [a-zA-Z]{1}([-a-zA-Z0-9_]{0,63})

		:param profile_sampling_rate: Sflow profile sampling-rate
		:type profile_sampling_rate: (long)
		
		.. note::
			* range - ['0..4294967295']

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = []
    bindings_list = [('pybind.nos.v6_0_2b.sflow_profile', 'pybind.nos.v6_0_2b.brocade_sflow', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.sflow_profile', 'pybind.nos.v7_0_1a.brocade_sflow', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.sflow_profile', 'pybind.nos.v7_1_0.brocade_sflow', 'pybind.nos.v7_1_0'), ('pybind.slxos.v16r_1_00b.sflow_profile', 'pybind.slxos.v16r_1_00b.brocade_sflow', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = []
    bindings_keyval = {'kwargs_key_name': 'sflow_profile', 'keyval': 'profile_name', 'extra_keyval': 'profile_name, profile_sampling_rate'}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, sflow_profile=sflow_profile)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def sfm_state_connectivity_delete(self, connectivity=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		SLXOS: 16r.1.00b    

	**This Instance Keyword Arg Tuple**:
		:param connectivity: kwarg tuple.
		:type connectivity: (connectivity_sfmid).

		:param connectivity_sfmid: tuple arg.
		:type connectivity_sfmid: (long)
		
		.. note::
			* range - ['0..4294967295']

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = []
    bindings_list = [('pybind.slxos.v16r_1_00b.sfm_state.connectivity', 'pybind.slxos.v16r_1_00b.brocade_sysmgr_operational', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = []
    bindings_keyval = {'kwargs_key_name': u'connectivity', 'keyval': 'connectivity_sfmid', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, connectivity=connectivity)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def sfm_state_links_delete(self, links=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		SLXOS: 16r.1.00b    

	**This Instance Keyword Arg Tuple**:
		:param links: kwarg tuple.
		:type links: (links_sfmid).

		:param links_sfmid: tuple arg.
		:type links_sfmid: (long)
		
		.. note::
			* range - ['0..4294967295']

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = []
    bindings_list = [('pybind.slxos.v16r_1_00b.sfm_state.links', 'pybind.slxos.v16r_1_00b.brocade_sysmgr_operational', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = []
    bindings_keyval = {'kwargs_key_name': u'links', 'keyval': 'links_sfmid', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, links=links)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def sfm_state_mcast_delete(self, mcast=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		SLXOS: 16r.1.00b    

	**This Instance Keyword Arg Tuple**:
		:param mcast: kwarg tuple.
		:type mcast: (mcastid).

		:param mcastid: tuple arg.
		:type mcastid: (long)
		
		.. note::
			* range - ['0..4294967295']

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = []
    bindings_list = [('pybind.slxos.v16r_1_00b.sfm_state.mcast', 'pybind.slxos.v16r_1_00b.brocade_sysmgr_operational', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = []
    bindings_keyval = {'kwargs_key_name': u'mcast', 'keyval': 'mcastid', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, mcast=mcast)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def sfm_state_queue_delete(self, queue=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		SLXOS: 16r.1.00b    

	**This Instance Keyword Arg Tuple**:
		:param queue: kwarg tuple.
		:type queue: (queue_sfmid).

		:param queue_sfmid: tuple arg.
		:type queue_sfmid: (long)
		
		.. note::
			* range - ['0..4294967295']

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = []
    bindings_list = [('pybind.slxos.v16r_1_00b.sfm_state.queue', 'pybind.slxos.v16r_1_00b.brocade_sysmgr_operational', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = []
    bindings_keyval = {'kwargs_key_name': u'queue', 'keyval': 'queue_sfmid', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, queue=queue)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def sfm_state_serdesmode_delete(self, serdesmode=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		SLXOS: 16r.1.00b    

	**This Instance Keyword Arg Tuple**:
		:param serdesmode: kwarg tuple.
		:type serdesmode: (serdesmode_sfmid).

		:param serdesmode_sfmid: tuple arg.
		:type serdesmode_sfmid: (long)
		
		.. note::
			* range - ['0..4294967295']

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = []
    bindings_list = [('pybind.slxos.v16r_1_00b.sfm_state.serdesmode', 'pybind.slxos.v16r_1_00b.brocade_sysmgr_operational', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = []
    bindings_keyval = {'kwargs_key_name': u'serdesmode', 'keyval': 'serdesmode_sfmid', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, serdesmode=serdesmode)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def sfm_state_statistics_delete(self, statistics=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		SLXOS: 16r.1.00b    

	**This Instance Keyword Arg Tuple**:
		:param statistics: kwarg tuple.
		:type statistics: (statistics_sfmid).

		:param statistics_sfmid: tuple arg.
		:type statistics_sfmid: (long)
		
		.. note::
			* range - ['0..4294967295']

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = []
    bindings_list = [('pybind.slxos.v16r_1_00b.sfm_state.statistics', 'pybind.slxos.v16r_1_00b.brocade_sysmgr_operational', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = []
    bindings_keyval = {'kwargs_key_name': u'statistics', 'keyval': 'statistics_sfmid', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, statistics=statistics)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def sfm_state_thresholds_delete(self, thresholds=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		SLXOS: 16r.1.00b    

	**This Instance Keyword Arg Tuple**:
		:param thresholds: kwarg tuple.
		:type thresholds: (thresholds_sfmid).

		:param thresholds_sfmid: tuple arg.
		:type thresholds_sfmid: (long)
		
		.. note::
			* range - ['0..4294967295']

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = []
    bindings_list = [('pybind.slxos.v16r_1_00b.sfm_state.thresholds', 'pybind.slxos.v16r_1_00b.brocade_sysmgr_operational', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = []
    bindings_keyval = {'kwargs_key_name': u'thresholds', 'keyval': 'thresholds_sfmid', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, thresholds=thresholds)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def show_client_id_df_info_state_delete(self, show_client_id_df_info_state=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		SLXOS: 16r.1.00b    

	**This Instance Keyword Arg Tuple**:
		:param show_client_id_df_info_state: kwarg tuple.
		:type show_client_id_df_info_state: (cluster_id, client_id).

		:param cluster_id: tuple arg.
		:type cluster_id: (long)
		
		.. note::
			* range - ['0..4294967295']

		:param client_id: tuple arg.
		:type client_id: (long)
		
		.. note::
			* range - ['0..4294967295']

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = []
    bindings_list = [('pybind.slxos.v16r_1_00b.show_client_id_df_info_state', 'pybind.slxos.v16r_1_00b.brocade_mct_operational', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = []
    bindings_keyval = {'kwargs_key_name': 'show_client_id_df_info_state', 'keyval': 'cluster_id, client_id', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, show_client_id_df_info_state=show_client_id_df_info_state)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def snmp_server_community_delete(self, community=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		NOS: 6.0.2b, 7.0.1a, 7.1.0
		SLXOS: 16r.1.00b    

	**This Instance Keyword Arg Tuple**:
		:param community: kwarg tuple.
		:type community: (community, groupname, ipv4_acl, ipv6_acl).

		:param community: tuple arg.
		:type community: (unicode)

		:param groupname: Groupname associated with community string
		:type groupname: (unicode)

		:param ipv4_acl: standard IPv4 Access list name (or) ID associated with community strings.
		:type ipv4_acl: (unicode)
		
		.. note::
			* length - [u'0 .. 63']

		:param ipv6_acl: standard IPv6 Access list name (or) ID associated with community strings.
		:type ipv6_acl: (unicode)
		
		.. note::
			* length - [u'0 .. 63']

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = []
    bindings_list = [('pybind.nos.v6_0_2b.snmp_server.community', 'pybind.nos.v6_0_2b.brocade_snmp', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.snmp_server.community', 'pybind.nos.v7_0_1a.brocade_snmp', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.snmp_server.community', 'pybind.nos.v7_1_0.brocade_snmp', 'pybind.nos.v7_1_0'), ('pybind.slxos.v16r_1_00b.snmp_server.community', 'pybind.slxos.v16r_1_00b.brocade_snmp', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = []
    bindings_keyval = {'kwargs_key_name': u'community', 'keyval': 'community', 'extra_keyval': 'community, groupname'}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, community=community)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def snmp_server_context_delete(self, context=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		NOS: 6.0.2b, 7.0.1a, 7.1.0
		SLXOS: 16r.1.00b    

	**This Instance Keyword Arg Tuple**:
		:param context: kwarg tuple.
		:type context: (context_name).

		:param context_name: tuple arg.
		:type context_name: (unicode)

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = []
    bindings_list = [('pybind.nos.v6_0_2b.snmp_server.context', 'pybind.nos.v6_0_2b.brocade_snmp', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.snmp_server.context', 'pybind.nos.v7_0_1a.brocade_snmp', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.snmp_server.context', 'pybind.nos.v7_1_0.brocade_snmp', 'pybind.nos.v7_1_0'), ('pybind.slxos.v16r_1_00b.snmp_server.context', 'pybind.slxos.v16r_1_00b.brocade_snmp', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = []
    bindings_keyval = {'kwargs_key_name': u'context', 'keyval': 'context_name', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, context=context)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def snmp_server_group_delete(self, group=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		NOS: 6.0.2b, 7.0.1a, 7.1.0
		SLXOS: 16r.1.00b    

	**This Instance Keyword Arg Tuple**:
		:param group: kwarg tuple.
		:type group: (group_name, group_version, group_auth_mode, read, write, notify).

		:param group_name: tuple arg.
		:type group_name: (unicode)
		
		.. note::
			* length - [u'1 .. 32']

		:param group_version: tuple arg.
		:type group_version: (unicode)
		
		.. note::
			* enum - [u'v2c', u'v1', u'v3']

		:param group_auth_mode: tuple arg.
		:type group_auth_mode: (unicode)
		
		.. note::
			* enum - [u'noauth', u'auth', u'priv']

		:param read: read	Specify a read view for the group
		:type read: (unicode)
		
		.. note::
			* length - [u'1 .. 32']

		:param write: write	Specify a write view for the group
		:type write: (unicode)
		
		.. note::
			* length - [u'1 .. 32']

		:param notify: notify	Specify a notify view for the group
		:type notify: (unicode)
		
		.. note::
			* length - [u'1 .. 32']

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = []
    bindings_list = [('pybind.nos.v6_0_2b.snmp_server.group', 'pybind.nos.v6_0_2b.brocade_snmp', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.snmp_server.group', 'pybind.nos.v7_0_1a.brocade_snmp', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.snmp_server.group', 'pybind.nos.v7_1_0.brocade_snmp', 'pybind.nos.v7_1_0'), ('pybind.slxos.v16r_1_00b.snmp_server.group', 'pybind.slxos.v16r_1_00b.brocade_snmp', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = []
    bindings_keyval = {'kwargs_key_name': u'group', 'keyval': 'group_name, group_version', 'extra_keyval': 'group_name, group_version, group_auth_mode, read, write, notify'}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, group=group)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def snmp_server_host_delete(self, host=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		NOS: 6.0.2b, 7.0.1a, 7.1.0
		SLXOS: 16r.1.00b    

	**This Instance Keyword Arg Tuple**:
		:param host: kwarg tuple.
		:type host: (ip, community).

		:param ip: ipv4/ipv6/dns address of the trap recipient 
associated with community strings.  Traps will be 
sent to this host
		:type ip: (unicode)
		
		.. note::
			* pattern - (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?

		:param community: Community string associated with traps.
		:type community: (unicode)

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = []
    bindings_list = [('pybind.nos.v6_0_2b.snmp_server.host', 'pybind.nos.v6_0_2b.brocade_snmp', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.snmp_server.host', 'pybind.nos.v7_0_1a.brocade_snmp', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.snmp_server.host', 'pybind.nos.v7_1_0.brocade_snmp', 'pybind.nos.v7_1_0'), ('pybind.slxos.v16r_1_00b.snmp_server.host', 'pybind.slxos.v16r_1_00b.brocade_snmp', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = []
    bindings_keyval = {'kwargs_key_name': u'host', 'keyval': 'ip, community', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, host=host)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def snmp_server_mib_community_map_delete(self, community_map=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		NOS: 7.0.1a, 7.1.0
		SLXOS: 16r.1.00b    

	**This Instance Keyword Arg Tuple**:
		:param community_map: kwarg tuple.
		:type community_map: (community, context).

		:param community: Community string to map with the context name
		:type community: (unicode)

		:param context: Context Name.
		:type context: (unicode)

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = []
    bindings_list = [('pybind.nos.v7_0_1a.snmp_server.mib.community_map', 'pybind.nos.v7_0_1a.brocade_snmp', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.snmp_server.mib.community_map', 'pybind.nos.v7_1_0.brocade_snmp', 'pybind.nos.v7_1_0'), ('pybind.slxos.v16r_1_00b.snmp_server.mib.community_map', 'pybind.slxos.v16r_1_00b.brocade_snmp', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = []
    bindings_keyval = {'kwargs_key_name': u'community_map', 'keyval': 'community', 'extra_keyval': 'community, context'}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, community_map=community_map)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def snmp_server_user_delete(self, user=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		NOS: 6.0.2b, 7.0.1a, 7.1.0
		SLXOS: 16r.1.00b    

	**This Instance Keyword Arg Tuple**:
		:param user: kwarg tuple.
		:type user: (username, groupname, auth, auth_password, priv, priv_password, encrypted, ipv4_acl, ipv6_acl).

		:param username: tuple arg.
		:type username: (unicode)
		
		.. note::
			* length - [u'1 .. 25']

		:param groupname: tuple arg.
		:type groupname: (unicode)

		:param auth: Authorization protocol for username
(Default=noauth)
		:type auth: (unicode)
		
		.. note::
			* enum - [u'sha', u'noauth', u'md5']

		:param auth_password: Authorization password associated with
username
		:type auth_password: (unicode)

		:param priv: Privacy protocol for username (Default=nopriv)
		:type priv: (unicode)
		
		.. note::
			* enum - [u'AES128', u'DES', u'nopriv']

		:param priv_password: Privacy password associated with username
		:type priv_password: (unicode)

		:param encrypted: This flag is used to enter the auth/priv
passwords as encrypted.(Default=disable)
		:type encrypted: (YANGBool)

		:param ipv4_acl: standard IPv4 Access list name (or) ID associated with SNMP v3 user strings.
		:type ipv4_acl: (unicode)
		
		.. note::
			* length - [u'0 .. 63']

		:param ipv6_acl: standard IPv6 Access list name (or) ID associated with SNMP V3 user strings.
		:type ipv6_acl: (unicode)
		
		.. note::
			* length - [u'0 .. 63']

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = []
    bindings_list = [('pybind.nos.v6_0_2b.snmp_server.user', 'pybind.nos.v6_0_2b.brocade_snmp', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.snmp_server.user', 'pybind.nos.v7_0_1a.brocade_snmp', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.snmp_server.user', 'pybind.nos.v7_1_0.brocade_snmp', 'pybind.nos.v7_1_0'), ('pybind.slxos.v16r_1_00b.snmp_server.user', 'pybind.slxos.v16r_1_00b.brocade_snmp', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = []
    bindings_keyval = {'kwargs_key_name': u'user', 'keyval': 'username', 'extra_keyval': 'username, groupname, auth, auth_password, priv, priv_password, encrypted, ipv4_acl, ipv6_acl'}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, user=user)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def snmp_server_v3host_delete(self, v3host=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		NOS: 6.0.2b, 7.0.1a, 7.1.0
		SLXOS: 16r.1.00b    

	**This Instance Keyword Arg Tuple**:
		:param v3host: kwarg tuple.
		:type v3host: (hostip, username).

		:param hostip: ipv4/ipv6/dns address of the notification recipient
associated with username. Notifications
will be sent to this host
		:type hostip: (unicode)
		
		.. note::
			* pattern - (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?

		:param username: Username associated with notification type.
		:type username: (unicode)

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = []
    bindings_list = [('pybind.nos.v6_0_2b.snmp_server.v3host', 'pybind.nos.v6_0_2b.brocade_snmp', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.snmp_server.v3host', 'pybind.nos.v7_0_1a.brocade_snmp', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.snmp_server.v3host', 'pybind.nos.v7_1_0.brocade_snmp', 'pybind.nos.v7_1_0'), ('pybind.slxos.v16r_1_00b.snmp_server.v3host', 'pybind.slxos.v16r_1_00b.brocade_snmp', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = []
    bindings_keyval = {'kwargs_key_name': u'v3host', 'keyval': 'hostip, username', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, v3host=v3host)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def snmp_server_view_delete(self, view=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		NOS: 6.0.2b, 7.0.1a, 7.1.0
		SLXOS: 16r.1.00b    

	**This Instance Keyword Arg Tuple**:
		:param view: kwarg tuple.
		:type view: (viewname, mibtree).

		:param viewname: tuple arg.
		:type viewname: (unicode)
		
		.. note::
			* length - [u'1 .. 32']

		:param mibtree: tuple arg.
		:type mibtree: (unicode)
		
		.. note::
			* length - [u'1 .. 256']

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = []
    bindings_list = [('pybind.nos.v6_0_2b.snmp_server.view', 'pybind.nos.v6_0_2b.brocade_snmp', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.snmp_server.view', 'pybind.nos.v7_0_1a.brocade_snmp', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.snmp_server.view', 'pybind.nos.v7_1_0.brocade_snmp', 'pybind.nos.v7_1_0'), ('pybind.slxos.v16r_1_00b.snmp_server.view', 'pybind.slxos.v16r_1_00b.brocade_snmp', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = []
    bindings_keyval = {'kwargs_key_name': u'view', 'keyval': 'viewname, mibtree', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, view=view)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def spf_log_state_delete(self, spf_log_state=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		SLXOS: 16r.1.00b    

	**This Instance Keyword Arg Tuple**:
		:param spf_log_state: kwarg tuple.
		:type spf_log_state: (spf_log_version).

		:param spf_log_version: tuple arg.
		:type spf_log_version: (unicode)
		
		.. note::
			* enum - [u'isis-ipv6-unicast-safi', u'isis-ipv4-unicast-safi']

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = []
    bindings_list = [('pybind.slxos.v16r_1_00b.spf_log_state', 'pybind.slxos.v16r_1_00b.brocade_isis_operational', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = []
    bindings_keyval = {'kwargs_key_name': 'spf_log_state', 'keyval': 'spf_log_version', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, spf_log_state=spf_log_state)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def spf_log_state_spf_log_levels_delete(self, spf_log_state=None, spf_log_levels=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		SLXOS: 16r.1.00b    

	**Parent Instance Keyword Arg Tuple(s)**:
		:param spf_log_state: kwarg tuple.
		:type spf_log_state: (spf_log_version).

		:param spf_log_version: tuple arg.
		:type spf_log_version: (unicode)
		
		.. note::
			* enum - [u'isis-ipv6-unicast-safi', u'isis-ipv4-unicast-safi']

	**This Instance Keyword Arg Tuple**:
		:param spf_log_levels: kwarg tuple.
		:type spf_log_levels: (level).

		:param level: tuple arg.
		:type level: (unicode)
		
		.. note::
			* enum - [u'level-2', u'level-1-2', u'level-1']

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = [('pybind.slxos.v16r_1_00b.spf_log_state', 'spf_log_state')]
    bindings_list = [('pybind.slxos.v16r_1_00b.spf_log_state.spf_log_levels', 'pybind.slxos.v16r_1_00b.brocade_isis_operational', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'spf_log_version', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'spf_log_levels', 'keyval': 'level', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, spf_log_state=spf_log_state, spf_log_levels=spf_log_levels)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def spf_log_state_spf_log_levels_spf_log_events_delete(self, spf_log_state=None, spf_log_levels=None, spf_log_events=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		SLXOS: 16r.1.00b    

	**Parent Instance Keyword Arg Tuple(s)**:
		:param spf_log_state: kwarg tuple.
		:type spf_log_state: (spf_log_version).

		:param spf_log_version: tuple arg.
		:type spf_log_version: (unicode)
		
		.. note::
			* enum - [u'isis-ipv6-unicast-safi', u'isis-ipv4-unicast-safi']

		:param spf_log_levels: kwarg tuple.
		:type spf_log_levels: (level).

		:param level: tuple arg.
		:type level: (unicode)
		
		.. note::
			* enum - [u'level-2', u'level-1-2', u'level-1']

	**This Instance Keyword Arg Tuple**:
		:param spf_log_events: kwarg tuple.
		:type spf_log_events: (spf_log_index).

		:param spf_log_index: tuple arg.
		:type spf_log_index: (int)
		
		.. note::
			* range - ['0..65535']

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = [('pybind.slxos.v16r_1_00b.spf_log_state', 'spf_log_state'), ('pybind.slxos.v16r_1_00b.spf_log_state.spf_log_levels', u'spf_log_levels')]
    bindings_list = [('pybind.slxos.v16r_1_00b.spf_log_state.spf_log_levels.spf_log_events', 'pybind.slxos.v16r_1_00b.brocade_isis_operational', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'spf_log_version', 'extra_keyval': ''}, {'keyval': 'level', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'spf_log_events', 'keyval': 'spf_log_index', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, spf_log_state=spf_log_state, spf_log_levels=spf_log_levels, spf_log_events=spf_log_events)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def ssh_server_use_vrf_delete(self, use_vrf=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		NOS: 6.0.2b, 7.0.1a, 7.1.0
		SLXOS: 16r.1.00b    

	**This Instance Keyword Arg Tuple**:
		:param use_vrf: kwarg tuple.
		:type use_vrf: (use_vrf_name, ssh_vrf_shutdown).

		:param use_vrf_name: tuple arg.
		:type use_vrf_name: (unicode)
		
		.. note::
			* length - [u'0 .. max']

		:param ssh_vrf_shutdown: Shutdown SSH server on given vrf
		:type ssh_vrf_shutdown: (YANGBool)

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = []
    bindings_list = [('pybind.nos.v6_0_2b.ssh_sa.ssh.server.ssh_vrf_cont.use_vrf', 'pybind.nos.v6_0_2b.brocade_sec_services', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.ssh_sa.ssh.server.ssh_vrf_cont.use_vrf', 'pybind.nos.v7_0_1a.brocade_sec_services', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.ssh_sa.ssh.server.ssh_vrf_cont.use_vrf', 'pybind.nos.v7_1_0.brocade_sec_services', 'pybind.nos.v7_1_0'), ('pybind.slxos.v16r_1_00b.ssh_sa.ssh.server.ssh_vrf_cont.use_vrf', 'pybind.slxos.v16r_1_00b.brocade_sec_services', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = []
    bindings_keyval = {'kwargs_key_name': u'use_vrf', 'keyval': 'use_vrf_name', 'extra_keyval': 'use_vrf_name, ssh_vrf_shutdown'}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, use_vrf=use_vrf)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def sub_interface_statistics_state_bridge_domain_statistics_delete(self, bridge_domain_statistics=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		SLXOS: 16r.1.00b    

	**This Instance Keyword Arg Tuple**:
		:param bridge_domain_statistics: kwarg tuple.
		:type bridge_domain_statistics: (bd_id).

		:param bd_id: tuple arg.
		:type bd_id: (long)
		
		.. note::
			* range - ['0..4294967295']

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = []
    bindings_list = [('pybind.slxos.v16r_1_00b.sub_interface_statistics_state.bridge_domain_statistics', 'pybind.slxos.v16r_1_00b.brocade_nsm_operational', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = []
    bindings_keyval = {'kwargs_key_name': u'bridge_domain_statistics', 'keyval': 'bd_id', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, bridge_domain_statistics=bridge_domain_statistics)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def sub_interface_statistics_state_bridge_domain_statistics_lif_statistics_delete(self, bridge_domain_statistics=None, lif_statistics=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		SLXOS: 16r.1.00b    

	**Parent Instance Keyword Arg Tuple(s)**:
		:param bridge_domain_statistics: kwarg tuple.
		:type bridge_domain_statistics: (bd_id).

		:param bd_id: tuple arg.
		:type bd_id: (long)
		
		.. note::
			* range - ['0..4294967295']

	**This Instance Keyword Arg Tuple**:
		:param lif_statistics: kwarg tuple.
		:type lif_statistics: (lif_id).

		:param lif_id: tuple arg.
		:type lif_id: (long)
		
		.. note::
			* range - ['0..4294967295']

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = [('pybind.slxos.v16r_1_00b.sub_interface_statistics_state.bridge_domain_statistics', u'bridge_domain_statistics')]
    bindings_list = [('pybind.slxos.v16r_1_00b.sub_interface_statistics_state.bridge_domain_statistics.lif_statistics', 'pybind.slxos.v16r_1_00b.brocade_nsm_operational', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'bd_id', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'lif_statistics', 'keyval': 'lif_id', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, bridge_domain_statistics=bridge_domain_statistics, lif_statistics=lif_statistics)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def sub_interface_statistics_state_vlan_statistics_delete(self, vlan_statistics=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		SLXOS: 16r.1.00b    

	**This Instance Keyword Arg Tuple**:
		:param vlan_statistics: kwarg tuple.
		:type vlan_statistics: (vlan_id).

		:param vlan_id: tuple arg.
		:type vlan_id: (long)
		
		.. note::
			* range - ['0..4294967295']

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = []
    bindings_list = [('pybind.slxos.v16r_1_00b.sub_interface_statistics_state.vlan_statistics', 'pybind.slxos.v16r_1_00b.brocade_nsm_operational', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = []
    bindings_keyval = {'kwargs_key_name': u'vlan_statistics', 'keyval': 'vlan_id', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, vlan_statistics=vlan_statistics)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def sub_interface_statistics_state_vlan_statistics_port_statistics_delete(self, vlan_statistics=None, port_statistics=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		SLXOS: 16r.1.00b    

	**Parent Instance Keyword Arg Tuple(s)**:
		:param vlan_statistics: kwarg tuple.
		:type vlan_statistics: (vlan_id).

		:param vlan_id: tuple arg.
		:type vlan_id: (long)
		
		.. note::
			* range - ['0..4294967295']

	**This Instance Keyword Arg Tuple**:
		:param port_statistics: kwarg tuple.
		:type port_statistics: (port_id).

		:param port_id: tuple arg.
		:type port_id: (long)
		
		.. note::
			* range - ['0..4294967295']

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = [('pybind.slxos.v16r_1_00b.sub_interface_statistics_state.vlan_statistics', u'vlan_statistics')]
    bindings_list = [('pybind.slxos.v16r_1_00b.sub_interface_statistics_state.vlan_statistics.port_statistics', 'pybind.slxos.v16r_1_00b.brocade_nsm_operational', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'vlan_id', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'port_statistics', 'keyval': 'port_id', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, vlan_statistics=vlan_statistics, port_statistics=port_statistics)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def switch_attributes_delete(self, rbridge_id=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		NOS: 6.0.2b, 7.0.1a, 7.1.0    

	**This Instance Keyword Arg Tuple**:
		:param rbridge_id: kwarg tuple.
		:type rbridge_id: (rbridge_id).

		:param rbridge_id: tuple arg.
		:type rbridge_id: (unicode)
		
		.. note::
			* length - [u'1..3']
			* pattern - [1-9]|[1-9][0-9]|1[0-9][0-9]|2[0-3][0-9]

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = []
    bindings_list = [('pybind.nos.v6_0_2b.system.switch_attributes.rbridge_id', 'pybind.nos.v6_0_2b.brocade_ras', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.system.switch_attributes.rbridge_id', 'pybind.nos.v7_0_1a.brocade_ras', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.system.switch_attributes.rbridge_id', 'pybind.nos.v7_1_0.brocade_ras', 'pybind.nos.v7_1_0')]
    composed_child_list = []
    compositions_keyval_list = []
    bindings_keyval = {'kwargs_key_name': u'rbridge_id', 'keyval': 'rbridge_id', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, rbridge_id=rbridge_id)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def system_monitor_mail_fru_delete(self, email_list=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		NOS: 6.0.2b, 7.0.1a, 7.1.0
		SLXOS: 16r.1.00b    

	**This Instance Keyword Arg Tuple**:
		:param email_list: kwarg tuple.
		:type email_list: (email).

		:param email: <email:string>  e-mail address for FRU alerts
		:type email: (unicode)

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = []
    bindings_list = [('pybind.nos.v6_0_2b.system_monitor_mail.fru.email_list', 'pybind.nos.v6_0_2b.brocade_system_monitor', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.system_monitor_mail.fru.email_list', 'pybind.nos.v7_0_1a.brocade_system_monitor', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.system_monitor_mail.fru.email_list', 'pybind.nos.v7_1_0.brocade_system_monitor', 'pybind.nos.v7_1_0'), ('pybind.slxos.v16r_1_00b.system_monitor_mail.fru.email_list', 'pybind.slxos.v16r_1_00b.brocade_system_monitor', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = []
    bindings_keyval = {'kwargs_key_name': u'email_list', 'keyval': 'email', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, email_list=email_list)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def system_monitor_mail_interface_delete(self, email_list=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		NOS: 6.0.2b, 7.0.1a, 7.1.0
		SLXOS: 16r.1.00b    

	**This Instance Keyword Arg Tuple**:
		:param email_list: kwarg tuple.
		:type email_list: (email).

		:param email: <email:string>  e-mail address for Interface alerts
		:type email: (unicode)

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = []
    bindings_list = [('pybind.nos.v6_0_2b.system_monitor_mail.interface.email_list', 'pybind.nos.v6_0_2b.brocade_system_monitor', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.system_monitor_mail.interface.email_list', 'pybind.nos.v7_0_1a.brocade_system_monitor', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.system_monitor_mail.interface.email_list', 'pybind.nos.v7_1_0.brocade_system_monitor', 'pybind.nos.v7_1_0'), ('pybind.slxos.v16r_1_00b.system_monitor_mail.interface.email_list', 'pybind.slxos.v16r_1_00b.brocade_system_monitor', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = []
    bindings_keyval = {'kwargs_key_name': u'email_list', 'keyval': 'email', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, email_list=email_list)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def system_monitor_mail_relay_delete(self, relay=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		NOS: 6.0.2b, 7.0.1a, 7.1.0
		SLXOS: 16r.1.00b    

	**This Instance Keyword Arg Tuple**:
		:param relay: kwarg tuple.
		:type relay: (host_ip).

		:param host_ip: tuple arg.
		:type host_ip: (unicode)
		
		.. note::
			* pattern - (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = []
    bindings_list = [('pybind.nos.v6_0_2b.system_monitor_mail.relay', 'pybind.nos.v6_0_2b.brocade_system_monitor', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.system_monitor_mail.relay', 'pybind.nos.v7_0_1a.brocade_system_monitor', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.system_monitor_mail.relay', 'pybind.nos.v7_1_0.brocade_system_monitor', 'pybind.nos.v7_1_0'), ('pybind.slxos.v16r_1_00b.system_monitor_mail.relay', 'pybind.slxos.v16r_1_00b.brocade_system_monitor', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = []
    bindings_keyval = {'kwargs_key_name': u'relay', 'keyval': 'host_ip', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, relay=relay)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def system_monitor_mail_security_delete(self, email_list=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		NOS: 6.0.2b, 7.0.1a, 7.1.0
		SLXOS: 16r.1.00b    

	**This Instance Keyword Arg Tuple**:
		:param email_list: kwarg tuple.
		:type email_list: (email).

		:param email: <email:string>  e-mail address for Security alerts
		:type email: (unicode)

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = []
    bindings_list = [('pybind.nos.v6_0_2b.system_monitor_mail.security.email_list', 'pybind.nos.v6_0_2b.brocade_system_monitor', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.system_monitor_mail.security.email_list', 'pybind.nos.v7_0_1a.brocade_system_monitor', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.system_monitor_mail.security.email_list', 'pybind.nos.v7_1_0.brocade_system_monitor', 'pybind.nos.v7_1_0'), ('pybind.slxos.v16r_1_00b.system_monitor_mail.security.email_list', 'pybind.slxos.v16r_1_00b.brocade_system_monitor', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = []
    bindings_keyval = {'kwargs_key_name': u'email_list', 'keyval': 'email', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, email_list=email_list)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def system_monitor_mail_sfp_delete(self, email_list=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		NOS: 6.0.2b, 7.0.1a, 7.1.0
		SLXOS: 16r.1.00b    

	**This Instance Keyword Arg Tuple**:
		:param email_list: kwarg tuple.
		:type email_list: (email).

		:param email: <email:string>  e-mail address for SFP alerts
		:type email: (unicode)

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = []
    bindings_list = [('pybind.nos.v6_0_2b.system_monitor_mail.sfp.email_list', 'pybind.nos.v6_0_2b.brocade_system_monitor', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.system_monitor_mail.sfp.email_list', 'pybind.nos.v7_0_1a.brocade_system_monitor', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.system_monitor_mail.sfp.email_list', 'pybind.nos.v7_1_0.brocade_system_monitor', 'pybind.nos.v7_1_0'), ('pybind.slxos.v16r_1_00b.system_monitor_mail.sfp.email_list', 'pybind.slxos.v16r_1_00b.brocade_system_monitor', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = []
    bindings_keyval = {'kwargs_key_name': u'email_list', 'keyval': 'email', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, email_list=email_list)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def tacacs_server_host_delete(self, host=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		NOS: 6.0.2b, 7.0.1a, 7.1.0
		SLXOS: 16r.1.00b    

	**This Instance Keyword Arg Tuple**:
		:param host: kwarg tuple.
		:type host: (hostname).

		:param hostname: INETADDRESS   Domain name or IP Address of
 this TACACS+ server
		:type hostname: (unicode)
		
		.. note::
			* length - [u'0..max']
			* pattern - \p{IsBasicLatin}{0,255}

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = []
    bindings_list = [('pybind.nos.v6_0_2b.tacacs_server.host', 'pybind.nos.v6_0_2b.brocade_aaa', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.tacacs_server.host', 'pybind.nos.v7_0_1a.brocade_aaa', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.tacacs_server.host', 'pybind.nos.v7_1_0.brocade_aaa', 'pybind.nos.v7_1_0'), ('pybind.slxos.v16r_1_00b.tacacs_server.host', 'pybind.slxos.v16r_1_00b.brocade_aaa', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = []
    bindings_keyval = {'kwargs_key_name': u'host', 'keyval': 'hostname, use_vrf', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, host=host)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def telnet_server_use_vrf_delete(self, use_vrf=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		NOS: 6.0.2b, 7.0.1a, 7.1.0
		SLXOS: 16r.1.00b    

	**This Instance Keyword Arg Tuple**:
		:param use_vrf: kwarg tuple.
		:type use_vrf: (use_vrf_name, telnet_vrf_shutdown).

		:param use_vrf_name: tuple arg.
		:type use_vrf_name: (unicode)
		
		.. note::
			* length - [u'0 .. max']

		:param telnet_vrf_shutdown: Shutdown telnet server on given vrf
		:type telnet_vrf_shutdown: (YANGBool)

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = []
    bindings_list = [('pybind.nos.v6_0_2b.telnet_sa.telnet.server.telnet_vrf_cont.use_vrf', 'pybind.nos.v6_0_2b.brocade_sec_services', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.telnet_sa.telnet.server.telnet_vrf_cont.use_vrf', 'pybind.nos.v7_0_1a.brocade_sec_services', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.telnet_sa.telnet.server.telnet_vrf_cont.use_vrf', 'pybind.nos.v7_1_0.brocade_sec_services', 'pybind.nos.v7_1_0'), ('pybind.slxos.v16r_1_00b.telnet_sa.telnet.server.telnet_vrf_cont.use_vrf', 'pybind.slxos.v16r_1_00b.brocade_sec_services', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = []
    bindings_keyval = {'kwargs_key_name': u'use_vrf', 'keyval': 'use_vrf_name', 'extra_keyval': 'use_vrf_name, telnet_vrf_shutdown'}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, use_vrf=use_vrf)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def threshold_monitor_interface_policy_delete(self, policy=None, area=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		NOS: 6.0.2b, 7.0.1a, 7.1.0
		SLXOS: 16r.1.00b    

	**Parent Instance Keyword Arg Tuple(s)**:
		:param policy: kwarg tuple.
		:type policy: (policy_name).

		:param policy_name: tuple arg.
		:type policy_name: (unicode)

	**This Instance Keyword Arg Tuple**:
		:param area: kwarg tuple.
		:type area: (type, area_value).

		:param type: Interface types that can be configured independent of speed
		:type type: (unicode)
		
		.. note::
			* enum - [u'Ethernet']

		:param area_value: tuple arg.
		:type area_value: (unicode)
		
		.. note::
			* enum - [u'MissingTerminationCharacter', u'CRCAlignErrors', u'IFG', u'SymbolErrors']

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = [('pybind.nos.v7_0_1a.threshold_monitor_hidden.threshold_monitor.interface.policy', u'policy'), ('pybind.slxos.v16r_1_00b.threshold_monitor_hidden.threshold_monitor.interface.policy', u'policy'), ('pybind.nos.v6_0_2b.threshold_monitor_hidden.threshold_monitor.interface.policy', u'policy'), ('pybind.nos.v7_1_0.threshold_monitor_hidden.threshold_monitor.interface.policy', u'policy')]
    bindings_list = [('pybind.nos.v6_0_2b.threshold_monitor_hidden.threshold_monitor.interface.policy.area', 'pybind.nos.v6_0_2b.brocade_threshold_monitor', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.threshold_monitor_hidden.threshold_monitor.interface.policy.area', 'pybind.nos.v7_0_1a.brocade_threshold_monitor', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.threshold_monitor_hidden.threshold_monitor.interface.policy.area', 'pybind.nos.v7_1_0.brocade_threshold_monitor', 'pybind.nos.v7_1_0'), ('pybind.slxos.v16r_1_00b.threshold_monitor_hidden.threshold_monitor.interface.policy.area', 'pybind.slxos.v16r_1_00b.brocade_threshold_monitor', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'policy_name', 'extra_keyval': 'policy_name'}, {'keyval': 'policy_name', 'extra_keyval': 'policy_name'}, {'keyval': 'policy_name', 'extra_keyval': 'policy_name'}, {'keyval': 'policy_name', 'extra_keyval': 'policy_name'}]
    bindings_keyval = {'kwargs_key_name': u'area', 'keyval': 'type, area_value', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, policy=policy, area=area)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def threshold_monitor_security_policy_delete(self, policy=None, area=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		NOS: 6.0.2b, 7.0.1a, 7.1.0
		SLXOS: 16r.1.00b    

	**Parent Instance Keyword Arg Tuple(s)**:
		:param policy: kwarg tuple.
		:type policy: (sec_policy_name).

		:param sec_policy_name: tuple arg.
		:type sec_policy_name: (unicode)

	**This Instance Keyword Arg Tuple**:
		:param area: kwarg tuple.
		:type area: (sec_area_value).

		:param sec_area_value: Security Areas
		:type sec_area_value: (unicode)
		
		.. note::
			* enum - [u'telnet-violation', u'login-violation']

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = [('pybind.nos.v7_1_0.threshold_monitor_hidden.threshold_monitor.security.policy', u'policy'), ('pybind.nos.v6_0_2b.threshold_monitor_hidden.threshold_monitor.security.policy', u'policy'), ('pybind.nos.v7_0_1a.threshold_monitor_hidden.threshold_monitor.security.policy', u'policy'), ('pybind.slxos.v16r_1_00b.threshold_monitor_hidden.threshold_monitor.security.policy', u'policy')]
    bindings_list = [('pybind.nos.v6_0_2b.threshold_monitor_hidden.threshold_monitor.security.policy.area', 'pybind.nos.v6_0_2b.brocade_threshold_monitor', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.threshold_monitor_hidden.threshold_monitor.security.policy.area', 'pybind.nos.v7_0_1a.brocade_threshold_monitor', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.threshold_monitor_hidden.threshold_monitor.security.policy.area', 'pybind.nos.v7_1_0.brocade_threshold_monitor', 'pybind.nos.v7_1_0'), ('pybind.slxos.v16r_1_00b.threshold_monitor_hidden.threshold_monitor.security.policy.area', 'pybind.slxos.v16r_1_00b.brocade_threshold_monitor', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'sec_policy_name', 'extra_keyval': 'sec_policy_name'}, {'keyval': 'sec_policy_name', 'extra_keyval': 'sec_policy_name'}, {'keyval': 'sec_policy_name', 'extra_keyval': 'sec_policy_name'}, {'keyval': 'sec_policy_name', 'extra_keyval': 'sec_policy_name'}]
    bindings_keyval = {'kwargs_key_name': u'area', 'keyval': 'sec_area_value', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, policy=policy, area=area)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def threshold_monitor_sfp_policy_delete(self, policy=None, area=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		NOS: 6.0.2b, 7.0.1a, 7.1.0
		SLXOS: 16r.1.00b    

	**Parent Instance Keyword Arg Tuple(s)**:
		:param policy: kwarg tuple.
		:type policy: (policy_name).

		:param policy_name: tuple arg.
		:type policy_name: (unicode)

	**This Instance Keyword Arg Tuple**:
		:param area: kwarg tuple.
		:type area: (type, area_value).

		:param type: SFP types that can be configured
		:type type: (unicode)
		
		.. note::
			* enum - [u'10GLR', u'1GLR', u'100GSR', u'10GUSR', u'1GSR', u'10GSR', u'QSFP']

		:param area_value: tuple arg.
		:type area_value: (unicode)
		
		.. note::
			* enum - [u'Current', u'RXP', u'TXP', u'Voltage', u'Temperature']

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = [('pybind.nos.v7_0_1a.threshold_monitor_hidden.threshold_monitor.sfp.policy', u'policy'), ('pybind.nos.v6_0_2b.threshold_monitor_hidden.threshold_monitor.sfp.policy', u'policy'), ('pybind.slxos.v16r_1_00b.threshold_monitor_hidden.threshold_monitor.sfp.policy', u'policy'), ('pybind.nos.v7_1_0.threshold_monitor_hidden.threshold_monitor.sfp.policy', u'policy')]
    bindings_list = [('pybind.nos.v6_0_2b.threshold_monitor_hidden.threshold_monitor.sfp.policy.area', 'pybind.nos.v6_0_2b.brocade_threshold_monitor', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.threshold_monitor_hidden.threshold_monitor.sfp.policy.area', 'pybind.nos.v7_0_1a.brocade_threshold_monitor', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.threshold_monitor_hidden.threshold_monitor.sfp.policy.area', 'pybind.nos.v7_1_0.brocade_threshold_monitor', 'pybind.nos.v7_1_0'), ('pybind.slxos.v16r_1_00b.threshold_monitor_hidden.threshold_monitor.sfp.policy.area', 'pybind.slxos.v16r_1_00b.brocade_threshold_monitor', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'policy_name', 'extra_keyval': 'policy_name'}, {'keyval': 'policy_name', 'extra_keyval': 'policy_name'}, {'keyval': 'policy_name', 'extra_keyval': 'policy_name'}, {'keyval': 'policy_name', 'extra_keyval': 'policy_name'}]
    bindings_keyval = {'kwargs_key_name': u'area', 'keyval': 'type, area_value', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, policy=policy, area=area)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def tm_state_non_empty_voq_delete(self, non_empty_voq=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		SLXOS: 16r.1.00b    

	**This Instance Keyword Arg Tuple**:
		:param non_empty_voq: kwarg tuple.
		:type non_empty_voq: (slot_port).

		:param slot_port: tuple arg.
		:type slot_port: (unicode)

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = []
    bindings_list = [('pybind.slxos.v16r_1_00b.tm_state.non_empty_voq', 'pybind.slxos.v16r_1_00b.brocade_sysdiag_operational', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = []
    bindings_keyval = {'kwargs_key_name': u'non_empty_voq', 'keyval': 'slot_port', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, non_empty_voq=non_empty_voq)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def tm_state_tm_max_buff_util_data_delete(self, tm_max_buff_util_data=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		SLXOS: 16r.1.00b    

	**This Instance Keyword Arg Tuple**:
		:param tm_max_buff_util_data: kwarg tuple.
		:type tm_max_buff_util_data: (slot, tower).

		:param slot: tuple arg.
		:type slot: (int)
		
		.. note::
			* range - ['0..65535']

		:param tower: tuple arg.
		:type tower: (int)
		
		.. note::
			* range - ['0..65535']

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = []
    bindings_list = [('pybind.slxos.v16r_1_00b.tm_state.tm_max_buff_util_data', 'pybind.slxos.v16r_1_00b.brocade_sysdiag_operational', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = []
    bindings_keyval = {'kwargs_key_name': u'tm_max_buff_util_data', 'keyval': 'slot, tower', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, tm_max_buff_util_data=tm_max_buff_util_data)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def tm_state_tm_top_discard_pkt_data_delete(self, tm_top_discard_pkt_data=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		SLXOS: 16r.1.00b    

	**This Instance Keyword Arg Tuple**:
		:param tm_top_discard_pkt_data: kwarg tuple.
		:type tm_top_discard_pkt_data: (slot, tower, id).

		:param slot: tuple arg.
		:type slot: (int)
		
		.. note::
			* range - ['0..65535']

		:param tower: tuple arg.
		:type tower: (int)
		
		.. note::
			* range - ['0..65535']

		:param id: tuple arg.
		:type id: (int)
		
		.. note::
			* range - ['0..65535']

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = []
    bindings_list = [('pybind.slxos.v16r_1_00b.tm_state.tm_top_discard_pkt_data', 'pybind.slxos.v16r_1_00b.brocade_sysdiag_operational', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = []
    bindings_keyval = {'kwargs_key_name': u'tm_top_discard_pkt_data', 'keyval': 'slot, tower, id', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, tm_top_discard_pkt_data=tm_top_discard_pkt_data)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def tm_state_tm_top_max_queue_depth_data_delete(self, tm_top_max_queue_depth_data=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		SLXOS: 16r.1.00b    

	**This Instance Keyword Arg Tuple**:
		:param tm_top_max_queue_depth_data: kwarg tuple.
		:type tm_top_max_queue_depth_data: (slot, tower, id).

		:param slot: tuple arg.
		:type slot: (int)
		
		.. note::
			* range - ['0..65535']

		:param tower: tuple arg.
		:type tower: (int)
		
		.. note::
			* range - ['0..65535']

		:param id: tuple arg.
		:type id: (int)
		
		.. note::
			* range - ['0..65535']

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = []
    bindings_list = [('pybind.slxos.v16r_1_00b.tm_state.tm_top_max_queue_depth_data', 'pybind.slxos.v16r_1_00b.brocade_sysdiag_operational', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = []
    bindings_keyval = {'kwargs_key_name': u'tm_top_max_queue_depth_data', 'keyval': 'slot, tower, id', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, tm_top_max_queue_depth_data=tm_top_max_queue_depth_data)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def tm_state_tmcpustatsslot_delete(self, tmcpustatsslot=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		SLXOS: 16r.1.00b    

	**This Instance Keyword Arg Tuple**:
		:param tmcpustatsslot: kwarg tuple.
		:type tmcpustatsslot: (slot_id, cpugroup_id).

		:param slot_id: tuple arg.
		:type slot_id: (int)
		
		.. note::
			* range - ['0..65535']

		:param cpugroup_id: tuple arg.
		:type cpugroup_id: (int)
		
		.. note::
			* range - ['0..65535']

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = []
    bindings_list = [('pybind.slxos.v16r_1_00b.tm_state.tmcpustatsslot', 'pybind.slxos.v16r_1_00b.brocade_sysdiag_operational', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = []
    bindings_keyval = {'kwargs_key_name': u'tmcpustatsslot', 'keyval': 'slot_id, cpugroup_id', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, tmcpustatsslot=tmcpustatsslot)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def tm_state_tmcpustatsslotallgrp_delete(self, tmcpustatsslotallgrp=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		SLXOS: 16r.1.00b    

	**This Instance Keyword Arg Tuple**:
		:param tmcpustatsslotallgrp: kwarg tuple.
		:type tmcpustatsslotallgrp: (slot_id).

		:param slot_id: tuple arg.
		:type slot_id: (int)
		
		.. note::
			* range - ['0..65535']

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = []
    bindings_list = [('pybind.slxos.v16r_1_00b.tm_state.tmcpustatsslotallgrp', 'pybind.slxos.v16r_1_00b.brocade_sysdiag_operational', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = []
    bindings_keyval = {'kwargs_key_name': u'tmcpustatsslotallgrp', 'keyval': 'slot_id', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, tmcpustatsslotallgrp=tmcpustatsslotallgrp)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def tm_state_tmdevicestataggr_delete(self, tmdevicestataggr=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		SLXOS: 16r.1.00b    

	**This Instance Keyword Arg Tuple**:
		:param tmdevicestataggr: kwarg tuple.
		:type tmdevicestataggr: (slot, tower).

		:param slot: tuple arg.
		:type slot: (int)
		
		.. note::
			* range - ['0..65535']

		:param tower: tuple arg.
		:type tower: (int)
		
		.. note::
			* range - ['0..65535']

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = []
    bindings_list = [('pybind.slxos.v16r_1_00b.tm_state.tmdevicestataggr', 'pybind.slxos.v16r_1_00b.brocade_sysdiag_operational', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = []
    bindings_keyval = {'kwargs_key_name': u'tmdevicestataggr', 'keyval': 'slot, tower', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, tmdevicestataggr=tmdevicestataggr)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def tm_state_tmvoqstatistics_delete(self, tmvoqstatistics=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		SLXOS: 16r.1.00b    

	**This Instance Keyword Arg Tuple**:
		:param tmvoqstatistics: kwarg tuple.
		:type tmvoqstatistics: (ing_slot, ing_tower, egr_voqid).

		:param ing_slot: tuple arg.
		:type ing_slot: (int)
		
		.. note::
			* range - ['0..65535']

		:param ing_tower: tuple arg.
		:type ing_tower: (int)
		
		.. note::
			* range - ['0..65535']

		:param egr_voqid: tuple arg.
		:type egr_voqid: (int)
		
		.. note::
			* range - ['0..65535']

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = []
    bindings_list = [('pybind.slxos.v16r_1_00b.tm_state.tmvoqstatistics', 'pybind.slxos.v16r_1_00b.brocade_sysdiag_operational', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = []
    bindings_keyval = {'kwargs_key_name': u'tmvoqstatistics', 'keyval': 'ing_slot, ing_tower, egr_voqid', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, tmvoqstatistics=tmvoqstatistics)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def topology_group_delete(self, topology_group=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		SLXOS: 16r.1.00b    

	**This Instance Keyword Arg Tuple**:
		:param topology_group: kwarg tuple.
		:type topology_group: (topology_group_id).

		:param topology_group_id: tuple arg.
		:type topology_group_id: (long)
		
		.. note::
			* range - ['0..4294967295']

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = []
    bindings_list = [('pybind.slxos.v16r_1_00b.topology_group', 'pybind.slxos.v16r_1_00b.brocade_topology_group', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = []
    bindings_keyval = {'kwargs_key_name': 'topology_group', 'keyval': 'topology_group_id', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, topology_group=topology_group)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def topology_group_state_topology_group_data_delete(self, topology_group_data=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		SLXOS: 16r.1.00b    

	**This Instance Keyword Arg Tuple**:
		:param topology_group_data: kwarg tuple.
		:type topology_group_data: (topology_group_id).

		:param topology_group_id: tuple arg.
		:type topology_group_id: (int)
		
		.. note::
			* range - ['0..65535']

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = []
    bindings_list = [('pybind.slxos.v16r_1_00b.topology_group_state.topology_group_data', 'pybind.slxos.v16r_1_00b.brocade_nsm_operational', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = []
    bindings_keyval = {'kwargs_key_name': u'topology_group_data', 'keyval': 'topology_group_id', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, topology_group_data=topology_group_data)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def topology_group_state_topology_group_data_member_bd_delete(self, topology_group_data=None, member_bd=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		SLXOS: 16r.1.00b    

	**Parent Instance Keyword Arg Tuple(s)**:
		:param topology_group_data: kwarg tuple.
		:type topology_group_data: (topology_group_id).

		:param topology_group_id: tuple arg.
		:type topology_group_id: (int)
		
		.. note::
			* range - ['0..65535']

	**This Instance Keyword Arg Tuple**:
		:param member_bd: kwarg tuple.
		:type member_bd: (bd_id).

		:param bd_id: tuple arg.
		:type bd_id: (long)
		
		.. note::
			* range - ['0..4294967295']

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = [('pybind.slxos.v16r_1_00b.topology_group_state.topology_group_data', u'topology_group_data')]
    bindings_list = [('pybind.slxos.v16r_1_00b.topology_group_state.topology_group_data.member_bd', 'pybind.slxos.v16r_1_00b.brocade_nsm_operational', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'topology_group_id', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'member_bd', 'keyval': 'bd_id', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, topology_group_data=topology_group_data, member_bd=member_bd)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def topology_group_state_topology_group_data_member_vlan_delete(self, topology_group_data=None, member_vlan=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		SLXOS: 16r.1.00b    

	**Parent Instance Keyword Arg Tuple(s)**:
		:param topology_group_data: kwarg tuple.
		:type topology_group_data: (topology_group_id).

		:param topology_group_id: tuple arg.
		:type topology_group_id: (int)
		
		.. note::
			* range - ['0..65535']

	**This Instance Keyword Arg Tuple**:
		:param member_vlan: kwarg tuple.
		:type member_vlan: (vlan_id).

		:param vlan_id: tuple arg.
		:type vlan_id: (int)
		
		.. note::
			* range - ['0..65535']

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = [('pybind.slxos.v16r_1_00b.topology_group_state.topology_group_data', u'topology_group_data')]
    bindings_list = [('pybind.slxos.v16r_1_00b.topology_group_state.topology_group_data.member_vlan', 'pybind.slxos.v16r_1_00b.brocade_nsm_operational', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'topology_group_id', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'member_vlan', 'keyval': 'vlan_id', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, topology_group_data=topology_group_data, member_vlan=member_vlan)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def traffic_class_exp_state_qos_mpls_delete(self, qos_mpls=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		SLXOS: 16r.1.00b    

	**This Instance Keyword Arg Tuple**:
		:param qos_mpls: kwarg tuple.
		:type qos_mpls: (map_name).

		:param map_name: tuple arg.
		:type map_name: (unicode)

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = []
    bindings_list = [('pybind.slxos.v16r_1_00b.traffic_class_exp_state.qos_mpls', 'pybind.slxos.v16r_1_00b.brocade_qos_operational', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = []
    bindings_keyval = {'kwargs_key_name': u'qos_mpls', 'keyval': 'map_name', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, qos_mpls=qos_mpls)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def username_delete(self, username=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		NOS: 6.0.2b, 7.0.1a, 7.1.0
		SLXOS: 16r.1.00b    

	**This Instance Keyword Arg Tuple**:
		:param username: kwarg tuple.
		:type username: (name, user_password, encryption_level, role, desc, enable, expire).

		:param name: tuple arg.
		:type name: (unicode)
		
		.. note::
			* length - [u'1 .. 40']

		:param user_password: Password of the user
		:type user_password: (unicode)
		
		.. note::
			* length - [u'1..40']

		:param encryption_level: Level of encryption of the password
(default=0)
		:type encryption_level: (unicode)
		
		.. note::
			* enum - [u'0', u'7']

		:param role: Role of the user
		:type role: (unicode)
		
		.. note::
			* length - [u'4 .. 32']

		:param desc: Description of the user (default='')
		:type desc: (unicode)
		
		.. note::
			* length - [u'0 .. 64']

		:param enable: Represents whether the user account is enabled
(default=true)
		:type enable: (YANGBool)

		:param expire: Date until when the password will remain valid after being updated
(default=never)
		:type expire: (unicode)
		
		.. note::
			* length - [u'0 .. 10']
			* pattern - ((19(0[2-9]|[1-9][0-9])|20([012][0-9]|3[0-7]))-(0[1-9]|1[012])-(0[1-9]|[12][0-9]|3[01]))|never

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = []
    bindings_list = [('pybind.nos.v6_0_2b.username', 'pybind.nos.v6_0_2b.brocade_aaa', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.username', 'pybind.nos.v7_0_1a.brocade_aaa', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.username', 'pybind.nos.v7_1_0.brocade_aaa', 'pybind.nos.v7_1_0'), ('pybind.slxos.v16r_1_00b.username', 'pybind.slxos.v16r_1_00b.brocade_aaa', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = []
    bindings_keyval = {'kwargs_key_name': 'username', 'keyval': 'name', 'extra_keyval': 'name, user_password, encryption_level, role, desc, enable, expire, access_time, end_time'}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, username=username)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def vc_peer_state_vc_peer_data_delete(self, vc_peer_data=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		SLXOS: 16r.1.00b    

	**This Instance Keyword Arg Tuple**:
		:param vc_peer_data: kwarg tuple.
		:type vc_peer_data: (vc_id).

		:param vc_id: tuple arg.
		:type vc_id: (long)
		
		.. note::
			* range - ['0..4294967295']

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = []
    bindings_list = [('pybind.slxos.v16r_1_00b.vc_peer_state.vc_peer_data', 'pybind.slxos.v16r_1_00b.brocade_pwm_operational', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = []
    bindings_keyval = {'kwargs_key_name': u'vc_peer_data', 'keyval': 'vc_id', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, vc_peer_data=vc_peer_data)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def vc_peer_state_vc_peer_data_vc_assigned_lsp_delete(self, vc_peer_data=None, vc_assigned_lsp=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		SLXOS: 16r.1.00b    

	**Parent Instance Keyword Arg Tuple(s)**:
		:param vc_peer_data: kwarg tuple.
		:type vc_peer_data: (vc_id).

		:param vc_id: tuple arg.
		:type vc_id: (long)
		
		.. note::
			* range - ['0..4294967295']

	**This Instance Keyword Arg Tuple**:
		:param vc_assigned_lsp: kwarg tuple.
		:type vc_assigned_lsp: (vc_lsp_name).

		:param vc_lsp_name: tuple arg.
		:type vc_lsp_name: (unicode)

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = [('pybind.slxos.v16r_1_00b.vc_peer_state.vc_peer_data', u'vc_peer_data')]
    bindings_list = [('pybind.slxos.v16r_1_00b.vc_peer_state.vc_peer_data.vc_assigned_lsp', 'pybind.slxos.v16r_1_00b.brocade_pwm_operational', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'vc_id', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'vc_assigned_lsp', 'keyval': 'vc_lsp_name', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, vc_peer_data=vc_peer_data, vc_assigned_lsp=vc_assigned_lsp)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def vc_peer_state_vc_peer_data_vc_proto_tnnl_delete(self, vc_peer_data=None, vc_proto_tnnl=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		SLXOS: 16r.1.00b    

	**Parent Instance Keyword Arg Tuple(s)**:
		:param vc_peer_data: kwarg tuple.
		:type vc_peer_data: (vc_id).

		:param vc_id: tuple arg.
		:type vc_id: (long)
		
		.. note::
			* range - ['0..4294967295']

	**This Instance Keyword Arg Tuple**:
		:param vc_proto_tnnl: kwarg tuple.
		:type vc_proto_tnnl: (vc_proto_name).

		:param vc_proto_name: tuple arg.
		:type vc_proto_name: (unicode)

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = [('pybind.slxos.v16r_1_00b.vc_peer_state.vc_peer_data', u'vc_peer_data')]
    bindings_list = [('pybind.slxos.v16r_1_00b.vc_peer_state.vc_peer_data.vc_proto_tnnl', 'pybind.slxos.v16r_1_00b.brocade_pwm_operational', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'vc_id', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'vc_proto_tnnl', 'keyval': 'vc_proto_name', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, vc_peer_data=vc_peer_data, vc_proto_tnnl=vc_proto_tnnl)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def vcenter_delete(self, vcenter=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		NOS: 6.0.2b, 7.0.1a, 7.1.0
		SLXOS: 16r.1.00b    

	**This Instance Keyword Arg Tuple**:
		:param vcenter: kwarg tuple.
		:type vcenter: (id).

		:param id: NAME;;vCenter name (Max Size - 32)
		:type id: (unicode)
		
		.. note::
			* pattern - [a-zA-Z]{1}([-a-zA-Z0-9\.\\\\@#\+\*\(\)=\{~\}%<>=$_\[\]\|]{0,31})

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = []
    bindings_list = [('pybind.nos.v6_0_2b.vcenter', 'pybind.nos.v6_0_2b.brocade_vswitch', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.vcenter', 'pybind.nos.v7_0_1a.brocade_vswitch', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.vcenter', 'pybind.nos.v7_1_0.brocade_vswitch', 'pybind.nos.v7_1_0'), ('pybind.slxos.v16r_1_00b.vcenter', 'pybind.slxos.v16r_1_00b.brocade_vswitch', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = []
    bindings_keyval = {'kwargs_key_name': 'vcenter', 'keyval': 'id', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, vcenter=vcenter)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def vcs_virtual_ip_address_delete(self, address=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		NOS: 6.0.2b, 7.0.1a, 7.1.0
		SLXOS: 16r.1.00b    

	**This Instance Keyword Arg Tuple**:
		:param address: kwarg tuple.
		:type address: (address).

		:param address: Virtual IP address (IPv4 Address/Prefix)
		:type address: (unicode)
		
		.. note::
			* pattern - ((0|(1[0-9]{0,2})|(2(([0-4][0-9]?)|(5[0-5]?)|([6-9]?)))|([3-9][0-9]?))\.){3}(0|(1[0-9]{0,2})|(2(([0-4][0-9]?)|(5[0-5]?)|([6-9]?)))|([3-9][0-9]?))/(([0-9])|([1-2][0-9])|(3[0-2]))

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = []
    bindings_list = [('pybind.nos.v6_0_2b.vcs.virtual.ip.address', 'pybind.nos.v6_0_2b.brocade_vcs', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.vcs.virtual.ip.address', 'pybind.nos.v7_0_1a.brocade_vcs', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.vcs.virtual.ip.address', 'pybind.nos.v7_1_0.brocade_vcs', 'pybind.nos.v7_1_0'), ('pybind.slxos.v16r_1_00b.vcs.virtual.ip.address', 'pybind.slxos.v16r_1_00b.brocade_vcs', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = []
    bindings_keyval = {'kwargs_key_name': u'address', 'keyval': 'address', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, address=address)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def vcs_virtual_ipv6_address_delete(self, address=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		NOS: 6.0.2b, 7.0.1a, 7.1.0
		SLXOS: 16r.1.00b    

	**This Instance Keyword Arg Tuple**:
		:param address: kwarg tuple.
		:type address: (ipv6address).

		:param ipv6address: Virtual IPV6 address (IPv6 Address/Prefix)
		:type ipv6address: (unicode)
		
		.. note::
			* pattern - ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(/(([0-9])|([0-9]{2})|(1[0-1][0-9])|(12[0-8])))

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = []
    bindings_list = [('pybind.nos.v6_0_2b.vcs.virtual.ipv6.address', 'pybind.nos.v6_0_2b.brocade_vcs', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.vcs.virtual.ipv6.address', 'pybind.nos.v7_0_1a.brocade_vcs', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.vcs.virtual.ipv6.address', 'pybind.nos.v7_1_0.brocade_vcs', 'pybind.nos.v7_1_0'), ('pybind.slxos.v16r_1_00b.vcs.virtual.ipv6.address', 'pybind.slxos.v16r_1_00b.brocade_vcs', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = []
    bindings_keyval = {'kwargs_key_name': u'address', 'keyval': 'ipv6address', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, address=address)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def vlan_delete(self, vlan=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		NOS: 6.0.2b, 7.0.1a, 7.1.0
		SLXOS: 16r.1.00b    

	**This Instance Keyword Arg Tuple**:
		:param vlan: kwarg tuple.
		:type vlan: (name).

		:param name: tuple arg.
		:type name: (long)
		
		.. note::
			* range - ['0..4294967295']

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = []
    bindings_list = [('pybind.nos.v6_0_2b.interface_vlan.interface.vlan', 'pybind.nos.v6_0_2b.brocade_interface', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.interface_vlan.interface.vlan', 'pybind.nos.v7_0_1a.brocade_interface', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.interface_vlan.interface.vlan', 'pybind.nos.v7_1_0.brocade_interface', 'pybind.nos.v7_1_0'), ('pybind.slxos.v16r_1_00b.interface_vlan.vlan', 'pybind.slxos.v16r_1_00b.brocade_interface', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = []
    bindings_keyval = {'kwargs_key_name': u'vlan', 'keyval': 'name', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, vlan=vlan)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def vlan_classifier_group_delete(self, group=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		NOS: 6.0.2b, 7.0.1a, 7.1.0    

	**This Instance Keyword Arg Tuple**:
		:param group: kwarg tuple.
		:type group: (groupid, oper, rule_name, ruleid).

		:param groupid: tuple arg.
		:type groupid: (long)
		
		.. note::
			* range - ['0..4294967295']

		:param oper: Add/Delete Rule.
		:type oper: (unicode)
		
		.. note::
			* enum - [u'add', u'delete']

		:param rule_name: tuple arg.
		:type rule_name: (unicode)
		
		.. note::
			* enum - [u'rule']

		:param ruleid: tuple arg.
		:type ruleid: (long)
		
		.. note::
			* range - ['0..4294967295']

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = []
    bindings_list = [('pybind.nos.v6_0_2b.vlan.classifier.group', 'pybind.nos.v6_0_2b.brocade_vlan', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.vlan.classifier.group', 'pybind.nos.v7_0_1a.brocade_vlan', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.vlan.classifier.group', 'pybind.nos.v7_1_0.brocade_vlan', 'pybind.nos.v7_1_0')]
    composed_child_list = []
    compositions_keyval_list = []
    bindings_keyval = {'kwargs_key_name': u'group', 'keyval': 'groupid, oper, rule_name, ruleid', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, group=group)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def vlan_classifier_rule_delete(self, rule=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		NOS: 6.0.2b, 7.0.1a, 7.1.0    

	**This Instance Keyword Arg Tuple**:
		:param rule: kwarg tuple.
		:type rule: (ruleid).

		:param ruleid: tuple arg.
		:type ruleid: (long)
		
		.. note::
			* range - ['0..4294967295']

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = []
    bindings_list = [('pybind.nos.v6_0_2b.vlan.classifier.rule', 'pybind.nos.v6_0_2b.brocade_vlan', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.vlan.classifier.rule', 'pybind.nos.v7_0_1a.brocade_vlan', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.vlan.classifier.rule', 'pybind.nos.v7_1_0.brocade_vlan', 'pybind.nos.v7_1_0')]
    composed_child_list = []
    compositions_keyval_list = []
    bindings_keyval = {'kwargs_key_name': u'rule', 'keyval': 'ruleid', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, rule=rule)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def vlan_ip_igmp_snooping_mrouter_interface_delete(self, vlan=None, igmps_interface=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		SLXOS: 16r.1.00b    

	**Parent Instance Keyword Arg Tuple(s)**:
		:param vlan: kwarg tuple.
		:type vlan: (name).

		:param name: tuple arg.
		:type name: (long)
		
		.. note::
			* range - ['0..4294967295']

	**This Instance Keyword Arg Tuple**:
		:param igmps_interface: kwarg tuple.
		:type igmps_interface: (igmps_if_type, igmps_value).

		:param igmps_if_type: tuple arg.
		:type igmps_if_type: (unicode)
		
		.. note::
			* enum - [u'ethernet', u'port-channel']

		:param igmps_value: tuple arg.
		:type igmps_value: (unicode)
		
		.. note::
			* length - [u'1..10']

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = [('pybind.slxos.v16r_1_00b.interface_vlan.vlan', u'vlan')]
    bindings_list = [('pybind.slxos.v16r_1_00b.interface_vlan.vlan.ip.igmpVlan.snooping.igmps_mrouter.igmps_interface', 'pybind.slxos.v16r_1_00b.brocade_interface', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'igmps_interface', 'keyval': 'igmps_if_type, igmps_value', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, vlan=vlan, igmps_interface=igmps_interface)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def vlan_ip_igmp_snooping_static_group_delete(self, vlan=None, igmps_static_group=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		SLXOS: 16r.1.00b    

	**Parent Instance Keyword Arg Tuple(s)**:
		:param vlan: kwarg tuple.
		:type vlan: (name).

		:param name: tuple arg.
		:type name: (long)
		
		.. note::
			* range - ['0..4294967295']

	**This Instance Keyword Arg Tuple**:
		:param igmps_static_group: kwarg tuple.
		:type igmps_static_group: (igmps_mcast_address, igmps_interface, igmps_if_type, igmps_value).

		:param igmps_mcast_address: Multicast Address to be Joined in the format A.B.C.D
		:type igmps_mcast_address: (unicode)
		
		.. note::
			* pattern - (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?

		:param igmps_interface: tuple arg.
		:type igmps_interface: (unicode)
		
		.. note::
			* enum - [u'interface']

		:param igmps_if_type: tuple arg.
		:type igmps_if_type: (unicode)
		
		.. note::
			* enum - [u'ethernet', u'port-channel']

		:param igmps_value: tuple arg.
		:type igmps_value: (unicode)
		
		.. note::
			* length - [u'1..10']

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = [('pybind.slxos.v16r_1_00b.interface_vlan.vlan', u'vlan')]
    bindings_list = [('pybind.slxos.v16r_1_00b.interface_vlan.vlan.ip.igmpVlan.snooping.igmps_static_group', 'pybind.slxos.v16r_1_00b.brocade_interface', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'igmps_static_group', 'keyval': 'igmps_mcast_address, igmps_interface, igmps_if_type, igmps_value', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, vlan=vlan, igmps_static_group=igmps_static_group)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def vlan_ipv6_mld_snooping_mrouter_interface_delete(self, vlan=None, interface=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		SLXOS: 16r.1.00b    

	**Parent Instance Keyword Arg Tuple(s)**:
		:param vlan: kwarg tuple.
		:type vlan: (name).

		:param name: tuple arg.
		:type name: (long)
		
		.. note::
			* range - ['0..4294967295']

	**This Instance Keyword Arg Tuple**:
		:param interface: kwarg tuple.
		:type interface: (if_type, value).

		:param if_type: tuple arg.
		:type if_type: (unicode)
		
		.. note::
			* enum - [u'Ethernet', u'Port-channel']

		:param value: tuple arg.
		:type value: (unicode)
		
		.. note::
			* length - [u'1..10']

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = [('pybind.slxos.v16r_1_00b.interface_vlan.vlan', u'vlan')]
    bindings_list = [('pybind.slxos.v16r_1_00b.interface_vlan.vlan.ipv6.mldVlan.snooping.mrouter.interface', 'pybind.slxos.v16r_1_00b.brocade_interface', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'interface', 'keyval': 'if_type, value', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, vlan=vlan, interface=interface)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def vlan_ipv6_mld_snooping_static_group_delete(self, vlan=None, static_group=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		SLXOS: 16r.1.00b    

	**Parent Instance Keyword Arg Tuple(s)**:
		:param vlan: kwarg tuple.
		:type vlan: (name).

		:param name: tuple arg.
		:type name: (long)
		
		.. note::
			* range - ['0..4294967295']

	**This Instance Keyword Arg Tuple**:
		:param static_group: kwarg tuple.
		:type static_group: (mcast_address, interface, if_type, value).

		:param mcast_address: Multicast Address to be Joined in format xxxx:xxxx/ml, xxxx:xxxx::/ml
		:type mcast_address: (unicode)
		
		.. note::
			* pattern - ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?

		:param interface: tuple arg.
		:type interface: (unicode)
		
		.. note::
			* enum - [u'interface']

		:param if_type: tuple arg.
		:type if_type: (unicode)
		
		.. note::
			* enum - [u'Ethernet', u'Port-channel']

		:param value: tuple arg.
		:type value: (unicode)
		
		.. note::
			* length - [u'1..10']

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = [('pybind.slxos.v16r_1_00b.interface_vlan.vlan', u'vlan')]
    bindings_list = [('pybind.slxos.v16r_1_00b.interface_vlan.vlan.ipv6.mldVlan.snooping.static_group', 'pybind.slxos.v16r_1_00b.brocade_interface', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'static_group', 'keyval': 'mcast_address, interface, if_type, value', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, vlan=vlan, static_group=static_group)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def vlan_mac_access_group_delete(self, vlan=None, access_group=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		SLXOS: 16r.1.00b    

	**Parent Instance Keyword Arg Tuple(s)**:
		:param vlan: kwarg tuple.
		:type vlan: (name).

		:param name: tuple arg.
		:type name: (long)
		
		.. note::
			* range - ['0..4294967295']

	**This Instance Keyword Arg Tuple**:
		:param access_group: kwarg tuple.
		:type access_group: (mac_access_list, mac_direction, traffic_type).

		:param mac_access_list: ACL_NAME;; Access List Name (Max 63)
		:type mac_access_list: (unicode)
		
		.. note::
			* length - [u'1..63']
			* pattern - [a-zA-Z0-9]{1}([-a-zA-Z0-9_]{0,62})

		:param mac_direction: tuple arg.
		:type mac_direction: (unicode)
		
		.. note::
			* enum - [u'in', u'out']

		:param traffic_type: tuple arg.
		:type traffic_type: (unicode)
		
		.. note::
			* enum - [u'switched', u'routed']

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = [('pybind.slxos.v16r_1_00b.interface_vlan.vlan', u'vlan')]
    bindings_list = [('pybind.slxos.v16r_1_00b.interface_vlan.vlan.mac.access_group', 'pybind.slxos.v16r_1_00b.brocade_interface', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'access_group', 'keyval': 'mac_access_list, mac_direction', 'extra_keyval': 'mac_access_list, mac_direction, traffic_type'}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, vlan=vlan, access_group=access_group)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def vrf_delete(self, vrf=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		SLXOS: 16r.1.00b    

	**This Instance Keyword Arg Tuple**:
		:param vrf: kwarg tuple.
		:type vrf: (vrf_name).

		:param vrf_name: <WORD:1-32>;;Name of VRF
		:type vrf_name: (unicode)
		
		.. note::
			* length - [u'1..32']
			* pattern - ((([a-zA-Z0-9_]([a-zA-Z0-9\-_]){0,61})?[a-zA-Z0-9]\.)*([a-zA-Z0-9_]([a-zA-Z0-9\-_]){0,61})?[a-zA-Z0-9]\.?)|\.

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = []
    bindings_list = [('pybind.slxos.v16r_1_00b.vrf', 'pybind.slxos.v16r_1_00b.brocade_vrf', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = []
    bindings_keyval = {'kwargs_key_name': 'vrf', 'keyval': 'vrf_name', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, vrf=vrf)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def vrf_address_family_ipv4_unicast_arp_delete(self, vrf=None, arp_entry=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		SLXOS: 16r.1.00b    

	**Parent Instance Keyword Arg Tuple(s)**:
		:param vrf: kwarg tuple.
		:type vrf: (vrf_name).

		:param vrf_name: <WORD:1-32>;;Name of VRF
		:type vrf_name: (unicode)
		
		.. note::
			* length - [u'1..32']
			* pattern - ((([a-zA-Z0-9_]([a-zA-Z0-9\-_]){0,61})?[a-zA-Z0-9]\.)*([a-zA-Z0-9_]([a-zA-Z0-9\-_]){0,61})?[a-zA-Z0-9]\.?)|\.

	**This Instance Keyword Arg Tuple**:
		:param arp_entry: kwarg tuple.
		:type arp_entry: (arp_ip_address, mac_address_value, interfacename, Ethernet, Ve).

		:param arp_ip_address: A.B.C.D;; IP address of the ARP entry
		:type arp_ip_address: (unicode)
		
		.. note::
			* pattern - (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?

		:param mac_address_value: tuple arg.
		:type mac_address_value: (unicode)

		:param interfacename: tuple arg.
		:type interfacename: (unicode)
		
		.. note::
			* enum - [u'interface']

		:param Ethernet: tuple arg.
		:type Ethernet: (unicode)
		
		.. note::
			* length - [u'3..16']
			* pattern - ((([0-9]|[1][0-6]))/([1-9]|[1-9][0-9]|[1-9][0-9][0-9])(:[1-4])?)

		:param Ve: tuple arg.
		:type Ve: (long)
		
		.. note::
			* range - ['0..4294967295']

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = [('pybind.slxos.v16r_1_00b.vrf', 'vrf')]
    bindings_list = [('pybind.slxos.v16r_1_00b.vrf.address_family.ip.unicast.arp_entry', 'pybind.slxos.v16r_1_00b.brocade_vrf', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'vrf_name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'arp_entry', 'keyval': 'arp_ip_address', 'extra_keyval': 'arp_ip_address, mac_address_value, interfacename, Ethernet, Ve'}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, vrf=vrf, arp_entry=arp_entry)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def vrf_address_family_ipv4_unicast_ip_import_routes_delete(self, vrf=None, routes=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		SLXOS: 16r.1.00b    

	**Parent Instance Keyword Arg Tuple(s)**:
		:param vrf: kwarg tuple.
		:type vrf: (vrf_name).

		:param vrf_name: <WORD:1-32>;;Name of VRF
		:type vrf_name: (unicode)
		
		.. note::
			* length - [u'1..32']
			* pattern - ((([a-zA-Z0-9_]([a-zA-Z0-9\-_]){0,61})?[a-zA-Z0-9]\.)*([a-zA-Z0-9_]([a-zA-Z0-9\-_]){0,61})?[a-zA-Z0-9]\.?)|\.

	**This Instance Keyword Arg Tuple**:
		:param routes: kwarg tuple.
		:type routes: (src_vrf, route_map).

		:param src_vrf: ASCII string;;Name of VRF
		:type src_vrf: (unicode)
		
		.. note::
			* length - [u'1..32']
			* pattern - ((([a-zA-Z0-9_]([a-zA-Z0-9\-_]){0,61})?[a-zA-Z0-9]\.)*([a-zA-Z0-9_]([a-zA-Z0-9\-_]){0,61})?[a-zA-Z0-9]\.?)|\.

		:param route_map: Word:1-63;;Route map name
		:type route_map: (unicode)
		
		.. note::
			* pattern - [a-zA-Z]{1}([-a-zA-Z0-9\.\\\\@#\+\*\(\)=\{~\}%<>=$_\[\]\|]{0,62})

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = [('pybind.slxos.v16r_1_00b.vrf', 'vrf')]
    bindings_list = [('pybind.slxos.v16r_1_00b.vrf.address_family.ip.unicast.ip.import_.routes', 'pybind.slxos.v16r_1_00b.brocade_vrf', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'vrf_name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'routes', 'keyval': 'src_vrf, route_map', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, vrf=vrf, routes=routes)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def vrf_address_family_ipv4_unicast_ip_route_delete(self, vrf=None, static_route_nh_vrf=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		SLXOS: 16r.1.00b    

	**Parent Instance Keyword Arg Tuple(s)**:
		:param vrf: kwarg tuple.
		:type vrf: (vrf_name).

		:param vrf_name: <WORD:1-32>;;Name of VRF
		:type vrf_name: (unicode)
		
		.. note::
			* length - [u'1..32']
			* pattern - ((([a-zA-Z0-9_]([a-zA-Z0-9\-_]){0,61})?[a-zA-Z0-9]\.)*([a-zA-Z0-9_]([a-zA-Z0-9\-_]){0,61})?[a-zA-Z0-9]\.?)|\.

	**This Instance Keyword Arg Tuple**:
		:param static_route_nh_vrf: kwarg tuple.
		:type static_route_nh_vrf: (static_route_next_vrf_dest, next_hop_vrf, static_route_next_hop).

		:param static_route_next_vrf_dest: A.B.C.D/L ;; Destination IP address
		:type static_route_next_vrf_dest: (unicode)
		
		.. note::
			* pattern - (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])/(([0-9])|([1-2][0-9])|(3[0-2]))

		:param next_hop_vrf: Next Hop Vrf Name
		:type next_hop_vrf: (unicode)
		
		.. note::
			* length - [u'1..32']
			* pattern - ((([a-zA-Z0-9_]([a-zA-Z0-9\-_]){0,61})?[a-zA-Z0-9]\.)*([a-zA-Z0-9_]([a-zA-Z0-9\-_]){0,61})?[a-zA-Z0-9]\.?)|\.

		:param static_route_next_hop: A.B.C.D ;; Next hop IP address
		:type static_route_next_hop: (unicode)
		
		.. note::
			* pattern - (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = [('pybind.slxos.v16r_1_00b.vrf', 'vrf'), ('pybind.slxos.v16r_1_00b.vrf', 'vrf')]
    bindings_list = [('pybind.slxos.v16r_1_00b.vrf.address_family.ip.unicast.ip.route.static_route_nh_vrf', 'pybind.slxos.v16r_1_00b.brocade_vrf', 'pybind.slxos.v16r_1_00b'), ('pybind.slxos.v16r_1_00b.vrf.address_family.ip.unicast.ip.route.static_route_oif_vrf', 'pybind.slxos.v16r_1_00b.brocade_vrf', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'vrf_name', 'extra_keyval': ''}, {'keyval': 'vrf_name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'static_route_nh_vrf', 'keyval': 'static_route_next_vrf_dest, next_hop_vrf, static_route_next_hop', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, vrf=vrf, static_route_nh_vrf=static_route_nh_vrf)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def vrf_address_family_ipv4_unicast_ip_route_static_bfd_delete(self, vrf=None, bfd_static_route=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		SLXOS: 16r.1.00b    

	**Parent Instance Keyword Arg Tuple(s)**:
		:param vrf: kwarg tuple.
		:type vrf: (vrf_name).

		:param vrf_name: <WORD:1-32>;;Name of VRF
		:type vrf_name: (unicode)
		
		.. note::
			* length - [u'1..32']
			* pattern - ((([a-zA-Z0-9_]([a-zA-Z0-9\-_]){0,61})?[a-zA-Z0-9]\.)*([a-zA-Z0-9_]([a-zA-Z0-9\-_]){0,61})?[a-zA-Z0-9]\.?)|\.

	**This Instance Keyword Arg Tuple**:
		:param bfd_static_route: kwarg tuple.
		:type bfd_static_route: (bfd_static_route_dest, bfd_static_route_src).

		:param bfd_static_route_dest: A.B.C.D ;; Destination IP address
		:type bfd_static_route_dest: (unicode)
		
		.. note::
			* pattern - (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?

		:param bfd_static_route_src: A.B.C.D ;; Source IP address
		:type bfd_static_route_src: (unicode)
		
		.. note::
			* pattern - (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = [('pybind.slxos.v16r_1_00b.vrf', 'vrf')]
    bindings_list = [('pybind.slxos.v16r_1_00b.vrf.address_family.ip.unicast.ip.route.static.bfd.bfd_static_route', 'pybind.slxos.v16r_1_00b.brocade_vrf', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'vrf_name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'bfd_static_route', 'keyval': 'bfd_static_route_dest, bfd_static_route_src', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, vrf=vrf, bfd_static_route=bfd_static_route)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def vrf_address_family_ipv6_unicast_ipv6_import_routes_delete(self, vrf=None, routes=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		SLXOS: 16r.1.00b    

	**Parent Instance Keyword Arg Tuple(s)**:
		:param vrf: kwarg tuple.
		:type vrf: (vrf_name).

		:param vrf_name: <WORD:1-32>;;Name of VRF
		:type vrf_name: (unicode)
		
		.. note::
			* length - [u'1..32']
			* pattern - ((([a-zA-Z0-9_]([a-zA-Z0-9\-_]){0,61})?[a-zA-Z0-9]\.)*([a-zA-Z0-9_]([a-zA-Z0-9\-_]){0,61})?[a-zA-Z0-9]\.?)|\.

	**This Instance Keyword Arg Tuple**:
		:param routes: kwarg tuple.
		:type routes: (src_vrf, route_map).

		:param src_vrf: ASCII string;;Name of VRF
		:type src_vrf: (unicode)
		
		.. note::
			* length - [u'1..32']
			* pattern - ((([a-zA-Z0-9_]([a-zA-Z0-9\-_]){0,61})?[a-zA-Z0-9]\.)*([a-zA-Z0-9_]([a-zA-Z0-9\-_]){0,61})?[a-zA-Z0-9]\.?)|\.

		:param route_map: Word:1-63;;Route map name
		:type route_map: (unicode)
		
		.. note::
			* pattern - [a-zA-Z]{1}([-a-zA-Z0-9\.\\\\@#\+\*\(\)=\{~\}%<>=$_\[\]\|]{0,62})

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = [('pybind.slxos.v16r_1_00b.vrf', 'vrf')]
    bindings_list = [('pybind.slxos.v16r_1_00b.vrf.address_family.ipv6.unicast.ipv6.import_.routes', 'pybind.slxos.v16r_1_00b.brocade_vrf', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'vrf_name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'routes', 'keyval': 'src_vrf, route_map', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, vrf=vrf, routes=routes)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def vrf_address_family_ipv6_unicast_ipv6_route_delete(self, vrf=None, ipv6_static_route_oif_vrf=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		SLXOS: 16r.1.00b    

	**Parent Instance Keyword Arg Tuple(s)**:
		:param vrf: kwarg tuple.
		:type vrf: (vrf_name).

		:param vrf_name: <WORD:1-32>;;Name of VRF
		:type vrf_name: (unicode)
		
		.. note::
			* length - [u'1..32']
			* pattern - ((([a-zA-Z0-9_]([a-zA-Z0-9\-_]){0,61})?[a-zA-Z0-9]\.)*([a-zA-Z0-9_]([a-zA-Z0-9\-_]){0,61})?[a-zA-Z0-9]\.?)|\.

	**This Instance Keyword Arg Tuple**:
		:param ipv6_static_route_oif_vrf: kwarg tuple.
		:type ipv6_static_route_oif_vrf: (static_route_next_vrf_dest, next_hop_vrf, static_route_oif_type, static_route_oif_name).

		:param static_route_next_vrf_dest: A:B::C:D/LEN ;; Destination IPv6 Prefix
		:type static_route_next_vrf_dest: (unicode)
		
		.. note::
			* pattern - ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(/(([0-9])|([0-9]{2})|(1[0-1][0-9])|(12[0-8])))

		:param next_hop_vrf: Next Hop Vrf Name
		:type next_hop_vrf: (unicode)
		
		.. note::
			* length - [u'1..32']
			* pattern - ((([a-zA-Z0-9_]([a-zA-Z0-9\-_]){0,61})?[a-zA-Z0-9]\.)*([a-zA-Z0-9_]([a-zA-Z0-9\-_]){0,61})?[a-zA-Z0-9]\.?)|\.

		:param static_route_oif_type: Outgoing interface type
		:type static_route_oif_type: (unicode)
		
		.. note::
			* enum - [u'ethernet', u'null', u've']

		:param static_route_oif_name: tuple arg.
		:type static_route_oif_name: (unicode)
		
		.. note::
			* length - [u'1..16']

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = [('pybind.slxos.v16r_1_00b.vrf', 'vrf'), ('pybind.slxos.v16r_1_00b.vrf', 'vrf'), ('pybind.slxos.v16r_1_00b.vrf', 'vrf'), ('pybind.slxos.v16r_1_00b.vrf', 'vrf')]
    bindings_list = [('pybind.slxos.v16r_1_00b.vrf.address_family.ipv6.unicast.ipv6.route.ipv6_static_route_oif_vrf', 'pybind.slxos.v16r_1_00b.brocade_vrf', 'pybind.slxos.v16r_1_00b'), ('pybind.slxos.v16r_1_00b.vrf.address_family.ipv6.unicast.ipv6.route.link_local_static_route_nh_vrf', 'pybind.slxos.v16r_1_00b.brocade_vrf', 'pybind.slxos.v16r_1_00b'), ('pybind.slxos.v16r_1_00b.vrf.address_family.ipv6.unicast.ipv6.route.static_route_nh_vrf', 'pybind.slxos.v16r_1_00b.brocade_vrf', 'pybind.slxos.v16r_1_00b'), ('pybind.slxos.v16r_1_00b.vrf.address_family.ipv6.unicast.ipv6.route.static_route_oif', 'pybind.slxos.v16r_1_00b.brocade_vrf', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'vrf_name', 'extra_keyval': ''}, {'keyval': 'vrf_name', 'extra_keyval': ''}, {'keyval': 'vrf_name', 'extra_keyval': ''}, {'keyval': 'vrf_name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'static_route_oif', 'keyval': 'static_route_dest, static_route_oif_type, static_route_oif_name', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, vrf=vrf, ipv6_static_route_oif_vrf=ipv6_static_route_oif_vrf)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def vrf_address_family_ipv6_unicast_ipv6_route_static_bfd_delete(self, vrf=None, bfd_ipv6_link_local_static_route=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		SLXOS: 16r.1.00b    

	**Parent Instance Keyword Arg Tuple(s)**:
		:param vrf: kwarg tuple.
		:type vrf: (vrf_name).

		:param vrf_name: <WORD:1-32>;;Name of VRF
		:type vrf_name: (unicode)
		
		.. note::
			* length - [u'1..32']
			* pattern - ((([a-zA-Z0-9_]([a-zA-Z0-9\-_]){0,61})?[a-zA-Z0-9]\.)*([a-zA-Z0-9_]([a-zA-Z0-9\-_]){0,61})?[a-zA-Z0-9]\.?)|\.

	**This Instance Keyword Arg Tuple**:
		:param bfd_ipv6_link_local_static_route: kwarg tuple.
		:type bfd_ipv6_link_local_static_route: (bfd_ipv6_link_local_dest, bfd_ipv6_link_local_src, bfd_interface_type, bfd_interface_name).

		:param bfd_ipv6_link_local_dest: A:B::C:D ;; Destination IPv6 address
		:type bfd_ipv6_link_local_dest: (unicode)
		
		.. note::
			* pattern - ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?

		:param bfd_ipv6_link_local_src: A:B::C:D ;; Source IPv6 address
		:type bfd_ipv6_link_local_src: (unicode)
		
		.. note::
			* pattern - ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?

		:param bfd_interface_type: Outgoing interface type
		:type bfd_interface_type: (unicode)
		
		.. note::
			* enum - [u'ethernet', u'null', u've']

		:param bfd_interface_name: tuple arg.
		:type bfd_interface_name: (unicode)
		
		.. note::
			* length - [u'1..16']

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = [('pybind.slxos.v16r_1_00b.vrf', 'vrf'), ('pybind.slxos.v16r_1_00b.vrf', 'vrf')]
    bindings_list = [('pybind.slxos.v16r_1_00b.vrf.address_family.ipv6.unicast.ipv6.route.static.bfd.bfd_ipv6_link_local_static_route', 'pybind.slxos.v16r_1_00b.brocade_vrf', 'pybind.slxos.v16r_1_00b'), ('pybind.slxos.v16r_1_00b.vrf.address_family.ipv6.unicast.ipv6.route.static.bfd.bfd_ipv6_static_route', 'pybind.slxos.v16r_1_00b.brocade_vrf', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'vrf_name', 'extra_keyval': ''}, {'keyval': 'vrf_name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'bfd_ipv6_link_local_static_route', 'keyval': 'bfd_ipv6_link_local_dest, bfd_ipv6_link_local_src, bfd_interface_type, bfd_interface_name', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, vrf=vrf, bfd_ipv6_link_local_static_route=bfd_ipv6_link_local_static_route)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def vrf_route_target_delete(self, vrf=None, route_target=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		SLXOS: 16r.1.00b    

	**Parent Instance Keyword Arg Tuple(s)**:
		:param vrf: kwarg tuple.
		:type vrf: (vrf_name).

		:param vrf_name: <WORD:1-32>;;Name of VRF
		:type vrf_name: (unicode)
		
		.. note::
			* length - [u'1..32']
			* pattern - ((([a-zA-Z0-9_]([a-zA-Z0-9\-_]){0,61})?[a-zA-Z0-9]\.)*([a-zA-Z0-9_]([a-zA-Z0-9\-_]){0,61})?[a-zA-Z0-9]\.?)|\.

	**This Instance Keyword Arg Tuple**:
		:param route_target: kwarg tuple.
		:type route_target: (action, target_community).

		:param action: tuple arg.
		:type action: (unicode)
		
		.. note::
			* enum - [u'import', u'export', u'both']

		:param target_community: ASN:nn;; Target VPN Extended Community
		:type target_community: (unicode)
		
		.. note::
			* pattern - ((\s*(((([1-9][0-9]{0,8})|(4[0-1][0-9]{8})|(42[0-8][0-9]{7})|(429[0-3][0-9]{6})|(4294[0-8][0-9]{5})|(42949[0-5][0-9]{4})|(429496[0-6][0-9]{3})|(4294967[0-1][0-9]{2})|(42949672[0-8][0-9])|(429496729[0-5])):(([1-9][0-9]{0,3})|([1-5][0-9]{4})|(6[0-4][0-9]{3})|(65[0-4][0-9]{2})|(655[0-2][0-9])|(6553[0-5])))|(((([1-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.)(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){2}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])):(([1-9][0-9]{0,3})|([1-5][0-9]{4})|(6[0-4][0-9]{3})|(65[0-4][0-9]{2})|(655[0-2][0-9])|(6553[0-5])))))*)

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = [('pybind.slxos.v16r_1_00b.vrf', 'vrf')]
    bindings_list = [('pybind.slxos.v16r_1_00b.vrf.route_target', 'pybind.slxos.v16r_1_00b.brocade_vrf', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'vrf_name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'route_target', 'keyval': 'action, target_community', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, vrf=vrf, route_target=route_target)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def vxlan_stats_acl_state_extended_stats_data_delete(self, extended_stats_data=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		SLXOS: 16r.1.00b    

	**This Instance Keyword Arg Tuple**:
		:param extended_stats_data: kwarg tuple.
		:type extended_stats_data: (acl_name, seq_num).

		:param acl_name: tuple arg.
		:type acl_name: (unicode)

		:param seq_num: tuple arg.
		:type seq_num: (long)
		
		.. note::
			* range - ['0..4294967295']

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = []
    bindings_list = [('pybind.slxos.v16r_1_00b.vxlan_stats_acl_state.extended_stats_data', 'pybind.slxos.v16r_1_00b.brocade_ssm_operational', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = []
    bindings_keyval = {'kwargs_key_name': u'extended_stats_data', 'keyval': 'acl_name, seq_num', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, extended_stats_data=extended_stats_data)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def zoning_defined_configuration_alias_delete(self, alias=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		NOS: 6.0.2b, 7.0.1a, 7.1.0
		SLXOS: 16r.1.00b    

	**This Instance Keyword Arg Tuple**:
		:param alias: kwarg tuple.
		:type alias: (alias_name).

		:param alias_name: <WORD>;;Alias-Name
		:type alias_name: (unicode)
		
		.. note::
			* length - [u'1..64']
			* pattern - [0-9a-zA-Z_]{1,64}

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = []
    bindings_list = [('pybind.nos.v6_0_2b.zoning.defined_configuration.alias', 'pybind.nos.v6_0_2b.brocade_zone', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.zoning.defined_configuration.alias', 'pybind.nos.v7_0_1a.brocade_zone', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.zoning.defined_configuration.alias', 'pybind.nos.v7_1_0.brocade_zone', 'pybind.nos.v7_1_0'), ('pybind.slxos.v16r_1_00b.zoning.defined_configuration.alias', 'pybind.slxos.v16r_1_00b.brocade_zone', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = []
    bindings_keyval = {'kwargs_key_name': u'alias', 'keyval': 'alias_name', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, alias=alias)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def zoning_defined_configuration_alias_member_entry_delete(self, alias=None, member_entry=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		NOS: 6.0.2b, 7.0.1a, 7.1.0
		SLXOS: 16r.1.00b    

	**Parent Instance Keyword Arg Tuple(s)**:
		:param alias: kwarg tuple.
		:type alias: (alias_name).

		:param alias_name: <WORD>;;Alias-Name
		:type alias_name: (unicode)
		
		.. note::
			* length - [u'1..64']
			* pattern - [0-9a-zA-Z_]{1,64}

	**This Instance Keyword Arg Tuple**:
		:param member_entry: kwarg tuple.
		:type member_entry: (alias_entry_name).

		:param alias_entry_name: <WWN>;;Member-Name - add one or more WWN
members to an alias, the [no] option removes
only one member at a time.
		:type alias_entry_name: (unicode)
		
		.. note::
			* pattern - ([0-9a-fA-F]{2}(:[0-9a-fA-F]{2}){7})(;[0-9a-fA-F]{2}(:[0-9a-fA-F]{2}){7})*

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = [('pybind.nos.v7_0_1a.zoning.defined_configuration.alias', u'alias'), ('pybind.nos.v7_1_0.zoning.defined_configuration.alias', u'alias'), ('pybind.slxos.v16r_1_00b.zoning.defined_configuration.alias', u'alias'), ('pybind.nos.v6_0_2b.zoning.defined_configuration.alias', u'alias')]
    bindings_list = [('pybind.nos.v6_0_2b.zoning.defined_configuration.alias.member_entry', 'pybind.nos.v6_0_2b.brocade_zone', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.zoning.defined_configuration.alias.member_entry', 'pybind.nos.v7_0_1a.brocade_zone', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.zoning.defined_configuration.alias.member_entry', 'pybind.nos.v7_1_0.brocade_zone', 'pybind.nos.v7_1_0'), ('pybind.slxos.v16r_1_00b.zoning.defined_configuration.alias.member_entry', 'pybind.slxos.v16r_1_00b.brocade_zone', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'alias_name', 'extra_keyval': ''}, {'keyval': 'alias_name', 'extra_keyval': ''}, {'keyval': 'alias_name', 'extra_keyval': ''}, {'keyval': 'alias_name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'member_entry', 'keyval': 'alias_entry_name', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, alias=alias, member_entry=member_entry)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def zoning_defined_configuration_cfg_delete(self, cfg=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		NOS: 6.0.2b, 7.0.1a, 7.1.0
		SLXOS: 16r.1.00b    

	**This Instance Keyword Arg Tuple**:
		:param cfg: kwarg tuple.
		:type cfg: (cfg_name).

		:param cfg_name: <WORD>;;CFG-Name
		:type cfg_name: (unicode)
		
		.. note::
			* length - [u'1..64']
			* pattern - [0-9a-zA-Z_]{1,64}

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = []
    bindings_list = [('pybind.nos.v6_0_2b.zoning.defined_configuration.cfg', 'pybind.nos.v6_0_2b.brocade_zone', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.zoning.defined_configuration.cfg', 'pybind.nos.v7_0_1a.brocade_zone', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.zoning.defined_configuration.cfg', 'pybind.nos.v7_1_0.brocade_zone', 'pybind.nos.v7_1_0'), ('pybind.slxos.v16r_1_00b.zoning.defined_configuration.cfg', 'pybind.slxos.v16r_1_00b.brocade_zone', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = []
    bindings_keyval = {'kwargs_key_name': u'cfg', 'keyval': 'cfg_name', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, cfg=cfg)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def zoning_defined_configuration_cfg_member_zone_delete(self, cfg=None, member_zone=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		NOS: 6.0.2b, 7.0.1a, 7.1.0
		SLXOS: 16r.1.00b    

	**Parent Instance Keyword Arg Tuple(s)**:
		:param cfg: kwarg tuple.
		:type cfg: (cfg_name).

		:param cfg_name: <WORD>;;CFG-Name
		:type cfg_name: (unicode)
		
		.. note::
			* length - [u'1..64']
			* pattern - [0-9a-zA-Z_]{1,64}

	**This Instance Keyword Arg Tuple**:
		:param member_zone: kwarg tuple.
		:type member_zone: (zone_name).

		:param zone_name: <WORD>;;Zone-Name - add one or more zone
members to a cfg, the [no] option removes
only one member at a time.
		:type zone_name: (unicode)
		
		.. note::
			* pattern - ([0-9a-zA-Z_]{1,64})(;([0-9a-zA-Z_]{1,64}))*

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = [('pybind.nos.v7_1_0.zoning.defined_configuration.cfg', u'cfg'), ('pybind.nos.v7_0_1a.zoning.defined_configuration.cfg', u'cfg'), ('pybind.nos.v6_0_2b.zoning.defined_configuration.cfg', u'cfg'), ('pybind.slxos.v16r_1_00b.zoning.defined_configuration.cfg', u'cfg')]
    bindings_list = [('pybind.nos.v6_0_2b.zoning.defined_configuration.cfg.member_zone', 'pybind.nos.v6_0_2b.brocade_zone', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.zoning.defined_configuration.cfg.member_zone', 'pybind.nos.v7_0_1a.brocade_zone', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.zoning.defined_configuration.cfg.member_zone', 'pybind.nos.v7_1_0.brocade_zone', 'pybind.nos.v7_1_0'), ('pybind.slxos.v16r_1_00b.zoning.defined_configuration.cfg.member_zone', 'pybind.slxos.v16r_1_00b.brocade_zone', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'cfg_name', 'extra_keyval': ''}, {'keyval': 'cfg_name', 'extra_keyval': ''}, {'keyval': 'cfg_name', 'extra_keyval': ''}, {'keyval': 'cfg_name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'member_zone', 'keyval': 'zone_name', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, cfg=cfg, member_zone=member_zone)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def zoning_defined_configuration_zone_delete(self, zone=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		NOS: 6.0.2b, 7.0.1a, 7.1.0
		SLXOS: 16r.1.00b    

	**This Instance Keyword Arg Tuple**:
		:param zone: kwarg tuple.
		:type zone: (zone_name).

		:param zone_name: <WORD>;;Zone-Name
		:type zone_name: (unicode)
		
		.. note::
			* length - [u'1..64']
			* pattern - [0-9a-zA-Z_]{1,64}

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = []
    bindings_list = [('pybind.nos.v6_0_2b.zoning.defined_configuration.zone', 'pybind.nos.v6_0_2b.brocade_zone', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.zoning.defined_configuration.zone', 'pybind.nos.v7_0_1a.brocade_zone', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.zoning.defined_configuration.zone', 'pybind.nos.v7_1_0.brocade_zone', 'pybind.nos.v7_1_0'), ('pybind.slxos.v16r_1_00b.zoning.defined_configuration.zone', 'pybind.slxos.v16r_1_00b.brocade_zone', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = []
    bindings_keyval = {'kwargs_key_name': u'zone', 'keyval': 'zone_name', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, zone=zone)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

def zoning_defined_configuration_zone_member_entry_delete(self, zone=None, member_entry=None, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

	**Supported Versions**:
		NOS: 6.0.2b, 7.0.1a, 7.1.0
		SLXOS: 16r.1.00b    

	**Parent Instance Keyword Arg Tuple(s)**:
		:param zone: kwarg tuple.
		:type zone: (zone_name).

		:param zone_name: <WORD>;;Zone-Name
		:type zone_name: (unicode)
		
		.. note::
			* length - [u'1..64']
			* pattern - [0-9a-zA-Z_]{1,64}

	**This Instance Keyword Arg Tuple**:
		:param member_entry: kwarg tuple.
		:type member_entry: (entry_name).

		:param entry_name: <WWN> and/or <Alias-Name>;;Member-Name - 
add one or more WWN and/or Alias-Name
members to a zone, the [no] option removes
only one member at a time.
		:type entry_name: (unicode)
		
		.. note::
			* pattern - (([0-9a-zA-Z_]{1,64})|([0-9a-fA-F]{2}(:[0-9a-fA-F]{2}){7}))(;(([0-9a-zA-Z_]{1,64})|([0-9a-fA-F]{2}(:[0-9a-fA-F]{2}){7})))*

		:param api_timeout: Timeout for connection and response in seconds.  If tuple specified, then first value is for connection timeout and second value is for response timeout.
		:type api_timeout: (long or tuple)

	:returns: (bool, list)
		Returns a tuple. First element (bool): The overall success or failure of the API. Second element (list): List of REST request/response dictionaries, keyed by the asset's ip address.

	:raises: AttributeError, ConnectionError
    """

    operation_type = 'delete'
    compositions_list = [('pybind.nos.v7_0_1a.zoning.defined_configuration.zone', u'zone'), ('pybind.slxos.v16r_1_00b.zoning.defined_configuration.zone', u'zone'), ('pybind.nos.v7_1_0.zoning.defined_configuration.zone', u'zone'), ('pybind.nos.v6_0_2b.zoning.defined_configuration.zone', u'zone')]
    bindings_list = [('pybind.nos.v6_0_2b.zoning.defined_configuration.zone.member_entry', 'pybind.nos.v6_0_2b.brocade_zone', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.zoning.defined_configuration.zone.member_entry', 'pybind.nos.v7_0_1a.brocade_zone', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.zoning.defined_configuration.zone.member_entry', 'pybind.nos.v7_1_0.brocade_zone', 'pybind.nos.v7_1_0'), ('pybind.slxos.v16r_1_00b.zoning.defined_configuration.zone.member_entry', 'pybind.slxos.v16r_1_00b.brocade_zone', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'zone_name', 'extra_keyval': ''}, {'keyval': 'zone_name', 'extra_keyval': ''}, {'keyval': 'zone_name', 'extra_keyval': ''}, {'keyval': 'zone_name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'member_entry', 'keyval': 'entry_name', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, zone=zone, member_entry=member_entry)

    return self._config_worker(operation_type=operation_type, pybind_object=pybind_object, resource_depth=1, timeout=api_timeout)

