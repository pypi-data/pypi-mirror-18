# Generated from sdpl.g4 by ANTLR 4.5.1
from antlr4 import *
from io import StringIO


def serializedATN():
    with StringIO() as buf:
        buf.write("\3\u0430\ud6d1\u8206\uad2d\u4417\uaef1\u8d80\uaadd\2\62")
        buf.write("\u0143\b\1\4\2\t\2\4\3\t\3\4\4\t\4\4\5\t\5\4\6\t\6\4\7")
        buf.write("\t\7\4\b\t\b\4\t\t\t\4\n\t\n\4\13\t\13\4\f\t\f\4\r\t\r")
        buf.write("\4\16\t\16\4\17\t\17\4\20\t\20\4\21\t\21\4\22\t\22\4\23")
        buf.write("\t\23\4\24\t\24\4\25\t\25\4\26\t\26\4\27\t\27\4\30\t\30")
        buf.write("\4\31\t\31\4\32\t\32\4\33\t\33\4\34\t\34\4\35\t\35\4\36")
        buf.write("\t\36\4\37\t\37\4 \t \4!\t!\4\"\t\"\4#\t#\4$\t$\4%\t%")
        buf.write("\4&\t&\4\'\t\'\4(\t(\4)\t)\4*\t*\4+\t+\4,\t,\4-\t-\4.")
        buf.write("\t.\4/\t/\4\60\t\60\4\61\t\61\4\62\t\62\4\63\t\63\4\64")
        buf.write("\t\64\3\2\3\2\3\2\3\2\3\2\3\2\3\2\3\2\3\2\3\3\3\3\3\3")
        buf.write("\3\4\3\4\3\5\3\5\3\6\3\6\3\6\3\6\3\6\3\7\3\7\3\7\3\7\3")
        buf.write("\7\3\7\3\7\3\b\3\b\3\b\3\b\3\b\3\b\3\b\3\b\3\t\3\t\3\t")
        buf.write("\3\t\3\t\3\t\3\n\3\n\3\n\3\n\3\n\3\13\3\13\3\13\3\13\3")
        buf.write("\13\3\f\3\f\3\f\3\f\3\f\3\f\3\f\3\f\3\f\3\f\3\f\3\r\3")
        buf.write("\r\3\16\3\16\3\17\3\17\3\20\3\20\3\21\3\21\3\22\3\22\3")
        buf.write("\23\3\23\3\23\3\23\3\23\3\23\3\23\3\24\3\24\3\24\3\24")
        buf.write("\3\24\3\24\3\25\3\25\3\25\3\25\3\25\3\26\3\26\3\26\3\26")
        buf.write("\3\26\3\27\3\27\3\27\3\30\3\30\3\30\3\30\3\30\3\30\3\30")
        buf.write("\3\31\3\31\3\31\3\31\3\31\3\31\3\32\3\32\3\32\3\32\3\32")
        buf.write("\3\32\3\33\3\33\3\34\3\34\3\35\3\35\3\36\3\36\3\37\3\37")
        buf.write("\3 \3 \3!\3!\3\"\3\"\3#\3#\3$\3$\3$\3%\3%\3%\3&\3&\3&")
        buf.write("\3\'\3\'\3(\3(\3(\3)\3)\3*\3*\3*\3*\3+\3+\3+\3,\3,\3,")
        buf.write("\3,\3-\3-\3-\3-\7-\u0113\n-\f-\16-\u0116\13-\3.\6.\u0119")
        buf.write("\n.\r.\16.\u011a\3.\3.\6.\u011f\n.\r.\16.\u0120\3/\6/")
        buf.write("\u0124\n/\r/\16/\u0125\3\60\6\60\u0129\n\60\r\60\16\60")
        buf.write("\u012a\3\60\3\60\3\61\3\61\3\61\5\61\u0132\n\61\3\61\7")
        buf.write("\61\u0135\n\61\f\61\16\61\u0138\13\61\3\61\3\61\3\61\3")
        buf.write("\61\3\62\3\62\3\63\3\63\3\64\3\64\3\u0136\2\65\3\3\5\4")
        buf.write("\7\5\t\6\13\7\r\b\17\t\21\n\23\13\25\f\27\r\31\16\33\17")
        buf.write("\35\20\37\21!\22#\23%\24\'\25)\26+\27-\30/\31\61\32\63")
        buf.write("\33\65\34\67\359\36;\37= ?!A\"C#E$G%I&K\'M(O)Q*S+U,W-")
        buf.write("Y.[/]\60_\61a\62c\2e\2g\2\3\2\5\5\2\13\f\17\17\"\"\3\2")
        buf.write("\62;\4\2C\\c|\u0148\2\3\3\2\2\2\2\5\3\2\2\2\2\7\3\2\2")
        buf.write("\2\2\t\3\2\2\2\2\13\3\2\2\2\2\r\3\2\2\2\2\17\3\2\2\2\2")
        buf.write("\21\3\2\2\2\2\23\3\2\2\2\2\25\3\2\2\2\2\27\3\2\2\2\2\31")
        buf.write("\3\2\2\2\2\33\3\2\2\2\2\35\3\2\2\2\2\37\3\2\2\2\2!\3\2")
        buf.write("\2\2\2#\3\2\2\2\2%\3\2\2\2\2\'\3\2\2\2\2)\3\2\2\2\2+\3")
        buf.write("\2\2\2\2-\3\2\2\2\2/\3\2\2\2\2\61\3\2\2\2\2\63\3\2\2\2")
        buf.write("\2\65\3\2\2\2\2\67\3\2\2\2\29\3\2\2\2\2;\3\2\2\2\2=\3")
        buf.write("\2\2\2\2?\3\2\2\2\2A\3\2\2\2\2C\3\2\2\2\2E\3\2\2\2\2G")
        buf.write("\3\2\2\2\2I\3\2\2\2\2K\3\2\2\2\2M\3\2\2\2\2O\3\2\2\2\2")
        buf.write("Q\3\2\2\2\2S\3\2\2\2\2U\3\2\2\2\2W\3\2\2\2\2Y\3\2\2\2")
        buf.write("\2[\3\2\2\2\2]\3\2\2\2\2_\3\2\2\2\2a\3\2\2\2\3i\3\2\2")
        buf.write("\2\5r\3\2\2\2\7u\3\2\2\2\tw\3\2\2\2\13y\3\2\2\2\r~\3\2")
        buf.write("\2\2\17\u0085\3\2\2\2\21\u008d\3\2\2\2\23\u0093\3\2\2")
        buf.write("\2\25\u0098\3\2\2\2\27\u009d\3\2\2\2\31\u00a8\3\2\2\2")
        buf.write("\33\u00aa\3\2\2\2\35\u00ac\3\2\2\2\37\u00ae\3\2\2\2!\u00b0")
        buf.write("\3\2\2\2#\u00b2\3\2\2\2%\u00b4\3\2\2\2\'\u00bb\3\2\2\2")
        buf.write(")\u00c1\3\2\2\2+\u00c6\3\2\2\2-\u00cb\3\2\2\2/\u00ce\3")
        buf.write("\2\2\2\61\u00d5\3\2\2\2\63\u00db\3\2\2\2\65\u00e1\3\2")
        buf.write("\2\2\67\u00e3\3\2\2\29\u00e5\3\2\2\2;\u00e7\3\2\2\2=\u00e9")
        buf.write("\3\2\2\2?\u00eb\3\2\2\2A\u00ed\3\2\2\2C\u00ef\3\2\2\2")
        buf.write("E\u00f1\3\2\2\2G\u00f3\3\2\2\2I\u00f6\3\2\2\2K\u00f9\3")
        buf.write("\2\2\2M\u00fc\3\2\2\2O\u00fe\3\2\2\2Q\u0101\3\2\2\2S\u0103")
        buf.write("\3\2\2\2U\u0107\3\2\2\2W\u010a\3\2\2\2Y\u010e\3\2\2\2")
        buf.write("[\u0118\3\2\2\2]\u0123\3\2\2\2_\u0128\3\2\2\2a\u0131\3")
        buf.write("\2\2\2c\u013d\3\2\2\2e\u013f\3\2\2\2g\u0141\3\2\2\2ij")
        buf.write("\7T\2\2jk\7G\2\2kl\7I\2\2lm\7K\2\2mn\7U\2\2no\7V\2\2o")
        buf.write("p\7G\2\2pq\7T\2\2q\4\3\2\2\2rs\7C\2\2st\7U\2\2t\6\3\2")
        buf.write("\2\2uv\7=\2\2v\b\3\2\2\2wx\7?\2\2x\n\3\2\2\2yz\7N\2\2")
        buf.write("z{\7Q\2\2{|\7C\2\2|}\7F\2\2}\f\3\2\2\2~\177\7U\2\2\177")
        buf.write("\u0080\7E\2\2\u0080\u0081\7J\2\2\u0081\u0082\7G\2\2\u0082")
        buf.write("\u0083\7O\2\2\u0083\u0084\7C\2\2\u0084\16\3\2\2\2\u0085")
        buf.write("\u0086\7X\2\2\u0086\u0087\7G\2\2\u0087\u0088\7T\2\2\u0088")
        buf.write("\u0089\7U\2\2\u0089\u008a\7K\2\2\u008a\u008b\7Q\2\2\u008b")
        buf.write("\u008c\7P\2\2\u008c\20\3\2\2\2\u008d\u008e\7V\2\2\u008e")
        buf.write("\u008f\7C\2\2\u008f\u0090\7D\2\2\u0090\u0091\7N\2\2\u0091")
        buf.write("\u0092\7G\2\2\u0092\22\3\2\2\2\u0093\u0094\7H\2\2\u0094")
        buf.write("\u0095\7T\2\2\u0095\u0096\7Q\2\2\u0096\u0097\7O\2\2\u0097")
        buf.write("\24\3\2\2\2\u0098\u0099\7Y\2\2\u0099\u009a\7K\2\2\u009a")
        buf.write("\u009b\7V\2\2\u009b\u009c\7J\2\2\u009c\26\3\2\2\2\u009d")
        buf.write("\u009e\7R\2\2\u009e\u009f\7T\2\2\u009f\u00a0\7Q\2\2\u00a0")
        buf.write("\u00a1\7L\2\2\u00a1\u00a2\7G\2\2\u00a2\u00a3\7E\2\2\u00a3")
        buf.write("\u00a4\7V\2\2\u00a4\u00a5\7K\2\2\u00a5\u00a6\7Q\2\2\u00a6")
        buf.write("\u00a7\7P\2\2\u00a7\30\3\2\2\2\u00a8\u00a9\7*\2\2\u00a9")
        buf.write("\32\3\2\2\2\u00aa\u00ab\7+\2\2\u00ab\34\3\2\2\2\u00ac")
        buf.write("\u00ad\7.\2\2\u00ad\36\3\2\2\2\u00ae\u00af\7/\2\2\u00af")
        buf.write(" \3\2\2\2\u00b0\u00b1\7\60\2\2\u00b1\"\3\2\2\2\u00b2\u00b3")
        buf.write("\7,\2\2\u00b3$\3\2\2\2\u00b4\u00b5\7G\2\2\u00b5\u00b6")
        buf.write("\7Z\2\2\u00b6\u00b7\7R\2\2\u00b7\u00b8\7C\2\2\u00b8\u00b9")
        buf.write("\7P\2\2\u00b9\u00ba\7F\2\2\u00ba&\3\2\2\2\u00bb\u00bc")
        buf.write("\7U\2\2\u00bc\u00bd\7V\2\2\u00bd\u00be\7Q\2\2\u00be\u00bf")
        buf.write("\7T\2\2\u00bf\u00c0\7G\2\2\u00c0(\3\2\2\2\u00c1\u00c2")
        buf.write("\7K\2\2\u00c2\u00c3\7P\2\2\u00c3\u00c4\7V\2\2\u00c4\u00c5")
        buf.write("\7Q\2\2\u00c5*\3\2\2\2\u00c6\u00c7\7L\2\2\u00c7\u00c8")
        buf.write("\7Q\2\2\u00c8\u00c9\7K\2\2\u00c9\u00ca\7P\2\2\u00ca,\3")
        buf.write("\2\2\2\u00cb\u00cc\7D\2\2\u00cc\u00cd\7[\2\2\u00cd.\3")
        buf.write("\2\2\2\u00ce\u00cf\7H\2\2\u00cf\u00d0\7K\2\2\u00d0\u00d1")
        buf.write("\7N\2\2\u00d1\u00d2\7V\2\2\u00d2\u00d3\7G\2\2\u00d3\u00d4")
        buf.write("\7T\2\2\u00d4\60\3\2\2\2\u00d5\u00d6\7Q\2\2\u00d6\u00d7")
        buf.write("\7T\2\2\u00d7\u00d8\7F\2\2\u00d8\u00d9\7G\2\2\u00d9\u00da")
        buf.write("\7T\2\2\u00da\62\3\2\2\2\u00db\u00dc\7I\2\2\u00dc\u00dd")
        buf.write("\7T\2\2\u00dd\u00de\7Q\2\2\u00de\u00df\7W\2\2\u00df\u00e0")
        buf.write("\7R\2\2\u00e0\64\3\2\2\2\u00e1\u00e2\7)\2\2\u00e2\66\3")
        buf.write("\2\2\2\u00e3\u00e4\7<\2\2\u00e48\3\2\2\2\u00e5\u00e6\7")
        buf.write("\61\2\2\u00e6:\3\2\2\2\u00e7\u00e8\7&\2\2\u00e8<\3\2\2")
        buf.write("\2\u00e9\u00ea\7}\2\2\u00ea>\3\2\2\2\u00eb\u00ec\7\177")
        buf.write("\2\2\u00ec@\3\2\2\2\u00ed\u00ee\7B\2\2\u00eeB\3\2\2\2")
        buf.write("\u00ef\u00f0\7\'\2\2\u00f0D\3\2\2\2\u00f1\u00f2\7A\2\2")
        buf.write("\u00f2F\3\2\2\2\u00f3\u00f4\7#\2\2\u00f4\u00f5\7?\2\2")
        buf.write("\u00f5H\3\2\2\2\u00f6\u00f7\7?\2\2\u00f7\u00f8\7?\2\2")
        buf.write("\u00f8J\3\2\2\2\u00f9\u00fa\7>\2\2\u00fa\u00fb\7?\2\2")
        buf.write("\u00fbL\3\2\2\2\u00fc\u00fd\7>\2\2\u00fdN\3\2\2\2\u00fe")
        buf.write("\u00ff\7@\2\2\u00ff\u0100\7?\2\2\u0100P\3\2\2\2\u0101")
        buf.write("\u0102\7@\2\2\u0102R\3\2\2\2\u0103\u0104\7C\2\2\u0104")
        buf.write("\u0105\7P\2\2\u0105\u0106\7F\2\2\u0106T\3\2\2\2\u0107")
        buf.write("\u0108\7Q\2\2\u0108\u0109\7T\2\2\u0109V\3\2\2\2\u010a")
        buf.write("\u010b\7b\2\2\u010b\u010c\7b\2\2\u010c\u010d\7b\2\2\u010d")
        buf.write("X\3\2\2\2\u010e\u0114\5g\64\2\u010f\u0113\5g\64\2\u0110")
        buf.write("\u0113\5e\63\2\u0111\u0113\5c\62\2\u0112\u010f\3\2\2\2")
        buf.write("\u0112\u0110\3\2\2\2\u0112\u0111\3\2\2\2\u0113\u0116\3")
        buf.write("\2\2\2\u0114\u0112\3\2\2\2\u0114\u0115\3\2\2\2\u0115Z")
        buf.write("\3\2\2\2\u0116\u0114\3\2\2\2\u0117\u0119\5e\63\2\u0118")
        buf.write("\u0117\3\2\2\2\u0119\u011a\3\2\2\2\u011a\u0118\3\2\2\2")
        buf.write("\u011a\u011b\3\2\2\2\u011b\u011c\3\2\2\2\u011c\u011e\7")
        buf.write("\60\2\2\u011d\u011f\5e\63\2\u011e\u011d\3\2\2\2\u011f")
        buf.write("\u0120\3\2\2\2\u0120\u011e\3\2\2\2\u0120\u0121\3\2\2\2")
        buf.write("\u0121\\\3\2\2\2\u0122\u0124\5e\63\2\u0123\u0122\3\2\2")
        buf.write("\2\u0124\u0125\3\2\2\2\u0125\u0123\3\2\2\2\u0125\u0126")
        buf.write("\3\2\2\2\u0126^\3\2\2\2\u0127\u0129\t\2\2\2\u0128\u0127")
        buf.write("\3\2\2\2\u0129\u012a\3\2\2\2\u012a\u0128\3\2\2\2\u012a")
        buf.write("\u012b\3\2\2\2\u012b\u012c\3\2\2\2\u012c\u012d\b\60\2")
        buf.write("\2\u012d`\3\2\2\2\u012e\u012f\7/\2\2\u012f\u0132\7/\2")
        buf.write("\2\u0130\u0132\7%\2\2\u0131\u012e\3\2\2\2\u0131\u0130")
        buf.write("\3\2\2\2\u0132\u0136\3\2\2\2\u0133\u0135\13\2\2\2\u0134")
        buf.write("\u0133\3\2\2\2\u0135\u0138\3\2\2\2\u0136\u0137\3\2\2\2")
        buf.write("\u0136\u0134\3\2\2\2\u0137\u0139\3\2\2\2\u0138\u0136\3")
        buf.write("\2\2\2\u0139\u013a\7\f\2\2\u013a\u013b\3\2\2\2\u013b\u013c")
        buf.write("\b\61\3\2\u013cb\3\2\2\2\u013d\u013e\7a\2\2\u013ed\3\2")
        buf.write("\2\2\u013f\u0140\t\3\2\2\u0140f\3\2\2\2\u0141\u0142\t")
        buf.write("\4\2\2\u0142h\3\2\2\2\13\2\u0112\u0114\u011a\u0120\u0125")
        buf.write("\u012a\u0131\u0136\4\2\3\2\2\4\2")
        return buf.getvalue()


class sdplLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]


    T__0 = 1
    T__1 = 2
    T__2 = 3
    T__3 = 4
    T__4 = 5
    T__5 = 6
    T__6 = 7
    T__7 = 8
    T__8 = 9
    T__9 = 10
    T__10 = 11
    T__11 = 12
    T__12 = 13
    T__13 = 14
    T__14 = 15
    T__15 = 16
    T__16 = 17
    T__17 = 18
    T__18 = 19
    T__19 = 20
    T__20 = 21
    T__21 = 22
    T__22 = 23
    T__23 = 24
    T__24 = 25
    T__25 = 26
    T__26 = 27
    T__27 = 28
    T__28 = 29
    T__29 = 30
    T__30 = 31
    T__31 = 32
    T__32 = 33
    T__33 = 34
    CO_NE = 35
    CO_EQ = 36
    CO_LE = 37
    CO_LT = 38
    CO_GE = 39
    CO_GT = 40
    AND = 41
    OR = 42
    QUOTE_DELIM = 43
    ID = 44
    DECIMAL = 45
    INTEGER = 46
    WS = 47
    SL_COMMENT = 48

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'REGISTER'", "'AS'", "';'", "'='", "'LOAD'", "'SCHEMA'", "'VERSION'", 
            "'TABLE'", "'FROM'", "'WITH'", "'PROJECTION'", "'('", "')'", 
            "','", "'-'", "'.'", "'*'", "'EXPAND'", "'STORE'", "'INTO'", 
            "'JOIN'", "'BY'", "'FILTER'", "'ORDER'", "'GROUP'", "'''", "':'", 
            "'/'", "'$'", "'{'", "'}'", "'@'", "'%'", "'?'", "'!='", "'=='", 
            "'<='", "'<'", "'>='", "'>'", "'AND'", "'OR'", "'```'" ]

    symbolicNames = [ "<INVALID>",
            "CO_NE", "CO_EQ", "CO_LE", "CO_LT", "CO_GE", "CO_GT", "AND", 
            "OR", "QUOTE_DELIM", "ID", "DECIMAL", "INTEGER", "WS", "SL_COMMENT" ]

    ruleNames = [ "T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", 
                  "T__7", "T__8", "T__9", "T__10", "T__11", "T__12", "T__13", 
                  "T__14", "T__15", "T__16", "T__17", "T__18", "T__19", 
                  "T__20", "T__21", "T__22", "T__23", "T__24", "T__25", 
                  "T__26", "T__27", "T__28", "T__29", "T__30", "T__31", 
                  "T__32", "T__33", "CO_NE", "CO_EQ", "CO_LE", "CO_LT", 
                  "CO_GE", "CO_GT", "AND", "OR", "QUOTE_DELIM", "ID", "DECIMAL", 
                  "INTEGER", "WS", "SL_COMMENT", "UNDERSCORE", "NUMBER", 
                  "LETTER" ]

    grammarFileName = "sdpl.g4"

    def __init__(self, input=None):
        super().__init__(input)
        self.checkVersion("4.5.1")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


    CHANNEL_WHITESPACE = 1
    CHANNEL_COMMENTS = 2


