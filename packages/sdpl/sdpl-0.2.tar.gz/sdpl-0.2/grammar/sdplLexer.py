# Generated from sdpl.g4 by ANTLR 4.5.1
from antlr4 import *
from io import StringIO


def serializedATN():
    with StringIO() as buf:
        buf.write("\3\u0430\ud6d1\u8206\uad2d\u4417\uaef1\u8d80\uaadd\2\65")
        buf.write("\u0155\b\1\4\2\t\2\4\3\t\3\4\4\t\4\4\5\t\5\4\6\t\6\4\7")
        buf.write("\t\7\4\b\t\b\4\t\t\t\4\n\t\n\4\13\t\13\4\f\t\f\4\r\t\r")
        buf.write("\4\16\t\16\4\17\t\17\4\20\t\20\4\21\t\21\4\22\t\22\4\23")
        buf.write("\t\23\4\24\t\24\4\25\t\25\4\26\t\26\4\27\t\27\4\30\t\30")
        buf.write("\4\31\t\31\4\32\t\32\4\33\t\33\4\34\t\34\4\35\t\35\4\36")
        buf.write("\t\36\4\37\t\37\4 \t \4!\t!\4\"\t\"\4#\t#\4$\t$\4%\t%")
        buf.write("\4&\t&\4\'\t\'\4(\t(\4)\t)\4*\t*\4+\t+\4,\t,\4-\t-\4.")
        buf.write("\t.\4/\t/\4\60\t\60\4\61\t\61\4\62\t\62\4\63\t\63\4\64")
        buf.write("\t\64\4\65\t\65\4\66\t\66\4\67\t\67\3\2\3\2\3\2\3\2\3")
        buf.write("\2\3\2\3\2\3\2\3\2\3\3\3\3\3\3\3\4\3\4\3\5\3\5\3\6\3\6")
        buf.write("\3\6\3\6\3\6\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\b\3\b\3\b\3")
        buf.write("\b\3\b\3\b\3\b\3\b\3\t\3\t\3\t\3\t\3\t\3\t\3\n\3\n\3\n")
        buf.write("\3\n\3\n\3\13\3\13\3\13\3\13\3\13\3\f\3\f\3\f\3\f\3\f")
        buf.write("\3\f\3\f\3\f\3\f\3\f\3\f\3\r\3\r\3\16\3\16\3\17\3\17\3")
        buf.write("\20\3\20\3\21\3\21\3\21\3\21\3\21\3\21\3\21\3\21\3\22")
        buf.write("\3\22\3\23\3\23\3\23\3\23\3\23\3\23\3\23\3\24\3\24\3\24")
        buf.write("\3\24\3\24\3\24\3\25\3\25\3\25\3\25\3\25\3\26\3\26\3\26")
        buf.write("\3\26\3\26\3\27\3\27\3\27\3\30\3\30\3\30\3\30\3\30\3\30")
        buf.write("\3\30\3\31\3\31\3\31\3\31\3\31\3\31\3\32\3\32\3\32\3\32")
        buf.write("\3\32\3\32\3\33\3\33\3\34\3\34\3\35\3\35\3\36\3\36\3\37")
        buf.write("\3\37\3 \3 \3!\3!\3\"\3\"\3#\3#\3$\3$\3%\3%\3&\3&\3\'")
        buf.write("\3\'\3\'\3(\3(\3(\3)\3)\3)\3*\3*\3+\3+\3+\3,\3,\3-\3-")
        buf.write("\3-\3-\3.\3.\3.\3/\3/\3/\3/\3\60\3\60\3\60\3\60\7\60\u0125")
        buf.write("\n\60\f\60\16\60\u0128\13\60\3\61\6\61\u012b\n\61\r\61")
        buf.write("\16\61\u012c\3\61\3\61\6\61\u0131\n\61\r\61\16\61\u0132")
        buf.write("\3\62\6\62\u0136\n\62\r\62\16\62\u0137\3\63\6\63\u013b")
        buf.write("\n\63\r\63\16\63\u013c\3\63\3\63\3\64\3\64\3\64\5\64\u0144")
        buf.write("\n\64\3\64\7\64\u0147\n\64\f\64\16\64\u014a\13\64\3\64")
        buf.write("\3\64\3\64\3\64\3\65\3\65\3\66\3\66\3\67\3\67\3\u0148")
        buf.write("\28\3\3\5\4\7\5\t\6\13\7\r\b\17\t\21\n\23\13\25\f\27\r")
        buf.write("\31\16\33\17\35\20\37\21!\22#\23%\24\'\25)\26+\27-\30")
        buf.write("/\31\61\32\63\33\65\34\67\359\36;\37= ?!A\"C#E$G%I&K\'")
        buf.write("M(O)Q*S+U,W-Y.[/]\60_\61a\62c\63e\64g\65i\2k\2m\2\3\2")
        buf.write("\5\5\2\13\f\17\17\"\"\3\2\62;\4\2C\\c|\u015a\2\3\3\2\2")
        buf.write("\2\2\5\3\2\2\2\2\7\3\2\2\2\2\t\3\2\2\2\2\13\3\2\2\2\2")
        buf.write("\r\3\2\2\2\2\17\3\2\2\2\2\21\3\2\2\2\2\23\3\2\2\2\2\25")
        buf.write("\3\2\2\2\2\27\3\2\2\2\2\31\3\2\2\2\2\33\3\2\2\2\2\35\3")
        buf.write("\2\2\2\2\37\3\2\2\2\2!\3\2\2\2\2#\3\2\2\2\2%\3\2\2\2\2")
        buf.write("\'\3\2\2\2\2)\3\2\2\2\2+\3\2\2\2\2-\3\2\2\2\2/\3\2\2\2")
        buf.write("\2\61\3\2\2\2\2\63\3\2\2\2\2\65\3\2\2\2\2\67\3\2\2\2\2")
        buf.write("9\3\2\2\2\2;\3\2\2\2\2=\3\2\2\2\2?\3\2\2\2\2A\3\2\2\2")
        buf.write("\2C\3\2\2\2\2E\3\2\2\2\2G\3\2\2\2\2I\3\2\2\2\2K\3\2\2")
        buf.write("\2\2M\3\2\2\2\2O\3\2\2\2\2Q\3\2\2\2\2S\3\2\2\2\2U\3\2")
        buf.write("\2\2\2W\3\2\2\2\2Y\3\2\2\2\2[\3\2\2\2\2]\3\2\2\2\2_\3")
        buf.write("\2\2\2\2a\3\2\2\2\2c\3\2\2\2\2e\3\2\2\2\2g\3\2\2\2\3o")
        buf.write("\3\2\2\2\5x\3\2\2\2\7{\3\2\2\2\t}\3\2\2\2\13\177\3\2\2")
        buf.write("\2\r\u0084\3\2\2\2\17\u008b\3\2\2\2\21\u0093\3\2\2\2\23")
        buf.write("\u0099\3\2\2\2\25\u009e\3\2\2\2\27\u00a3\3\2\2\2\31\u00ae")
        buf.write("\3\2\2\2\33\u00b0\3\2\2\2\35\u00b2\3\2\2\2\37\u00b4\3")
        buf.write("\2\2\2!\u00b6\3\2\2\2#\u00be\3\2\2\2%\u00c0\3\2\2\2\'")
        buf.write("\u00c7\3\2\2\2)\u00cd\3\2\2\2+\u00d2\3\2\2\2-\u00d7\3")
        buf.write("\2\2\2/\u00da\3\2\2\2\61\u00e1\3\2\2\2\63\u00e7\3\2\2")
        buf.write("\2\65\u00ed\3\2\2\2\67\u00ef\3\2\2\29\u00f1\3\2\2\2;\u00f3")
        buf.write("\3\2\2\2=\u00f5\3\2\2\2?\u00f7\3\2\2\2A\u00f9\3\2\2\2")
        buf.write("C\u00fb\3\2\2\2E\u00fd\3\2\2\2G\u00ff\3\2\2\2I\u0101\3")
        buf.write("\2\2\2K\u0103\3\2\2\2M\u0105\3\2\2\2O\u0108\3\2\2\2Q\u010b")
        buf.write("\3\2\2\2S\u010e\3\2\2\2U\u0110\3\2\2\2W\u0113\3\2\2\2")
        buf.write("Y\u0115\3\2\2\2[\u0119\3\2\2\2]\u011c\3\2\2\2_\u0120\3")
        buf.write("\2\2\2a\u012a\3\2\2\2c\u0135\3\2\2\2e\u013a\3\2\2\2g\u0143")
        buf.write("\3\2\2\2i\u014f\3\2\2\2k\u0151\3\2\2\2m\u0153\3\2\2\2")
        buf.write("op\7T\2\2pq\7G\2\2qr\7I\2\2rs\7K\2\2st\7U\2\2tu\7V\2\2")
        buf.write("uv\7G\2\2vw\7T\2\2w\4\3\2\2\2xy\7C\2\2yz\7U\2\2z\6\3\2")
        buf.write("\2\2{|\7=\2\2|\b\3\2\2\2}~\7?\2\2~\n\3\2\2\2\177\u0080")
        buf.write("\7N\2\2\u0080\u0081\7Q\2\2\u0081\u0082\7C\2\2\u0082\u0083")
        buf.write("\7F\2\2\u0083\f\3\2\2\2\u0084\u0085\7U\2\2\u0085\u0086")
        buf.write("\7E\2\2\u0086\u0087\7J\2\2\u0087\u0088\7G\2\2\u0088\u0089")
        buf.write("\7O\2\2\u0089\u008a\7C\2\2\u008a\16\3\2\2\2\u008b\u008c")
        buf.write("\7X\2\2\u008c\u008d\7G\2\2\u008d\u008e\7T\2\2\u008e\u008f")
        buf.write("\7U\2\2\u008f\u0090\7K\2\2\u0090\u0091\7Q\2\2\u0091\u0092")
        buf.write("\7P\2\2\u0092\20\3\2\2\2\u0093\u0094\7V\2\2\u0094\u0095")
        buf.write("\7C\2\2\u0095\u0096\7D\2\2\u0096\u0097\7N\2\2\u0097\u0098")
        buf.write("\7G\2\2\u0098\22\3\2\2\2\u0099\u009a\7H\2\2\u009a\u009b")
        buf.write("\7T\2\2\u009b\u009c\7Q\2\2\u009c\u009d\7O\2\2\u009d\24")
        buf.write("\3\2\2\2\u009e\u009f\7Y\2\2\u009f\u00a0\7K\2\2\u00a0\u00a1")
        buf.write("\7V\2\2\u00a1\u00a2\7J\2\2\u00a2\26\3\2\2\2\u00a3\u00a4")
        buf.write("\7R\2\2\u00a4\u00a5\7T\2\2\u00a5\u00a6\7Q\2\2\u00a6\u00a7")
        buf.write("\7L\2\2\u00a7\u00a8\7G\2\2\u00a8\u00a9\7E\2\2\u00a9\u00aa")
        buf.write("\7V\2\2\u00aa\u00ab\7K\2\2\u00ab\u00ac\7Q\2\2\u00ac\u00ad")
        buf.write("\7P\2\2\u00ad\30\3\2\2\2\u00ae\u00af\7*\2\2\u00af\32\3")
        buf.write("\2\2\2\u00b0\u00b1\7+\2\2\u00b1\34\3\2\2\2\u00b2\u00b3")
        buf.write("\7.\2\2\u00b3\36\3\2\2\2\u00b4\u00b5\7\60\2\2\u00b5 \3")
        buf.write("\2\2\2\u00b6\u00b7\7E\2\2\u00b7\u00b8\7Q\2\2\u00b8\u00b9")
        buf.write("\7O\2\2\u00b9\u00ba\7R\2\2\u00ba\u00bb\7W\2\2\u00bb\u00bc")
        buf.write("\7V\2\2\u00bc\u00bd\7G\2\2\u00bd\"\3\2\2\2\u00be\u00bf")
        buf.write("\7<\2\2\u00bf$\3\2\2\2\u00c0\u00c1\7G\2\2\u00c1\u00c2")
        buf.write("\7Z\2\2\u00c2\u00c3\7R\2\2\u00c3\u00c4\7C\2\2\u00c4\u00c5")
        buf.write("\7P\2\2\u00c5\u00c6\7F\2\2\u00c6&\3\2\2\2\u00c7\u00c8")
        buf.write("\7U\2\2\u00c8\u00c9\7V\2\2\u00c9\u00ca\7Q\2\2\u00ca\u00cb")
        buf.write("\7T\2\2\u00cb\u00cc\7G\2\2\u00cc(\3\2\2\2\u00cd\u00ce")
        buf.write("\7K\2\2\u00ce\u00cf\7P\2\2\u00cf\u00d0\7V\2\2\u00d0\u00d1")
        buf.write("\7Q\2\2\u00d1*\3\2\2\2\u00d2\u00d3\7L\2\2\u00d3\u00d4")
        buf.write("\7Q\2\2\u00d4\u00d5\7K\2\2\u00d5\u00d6\7P\2\2\u00d6,\3")
        buf.write("\2\2\2\u00d7\u00d8\7D\2\2\u00d8\u00d9\7[\2\2\u00d9.\3")
        buf.write("\2\2\2\u00da\u00db\7H\2\2\u00db\u00dc\7K\2\2\u00dc\u00dd")
        buf.write("\7N\2\2\u00dd\u00de\7V\2\2\u00de\u00df\7G\2\2\u00df\u00e0")
        buf.write("\7T\2\2\u00e0\60\3\2\2\2\u00e1\u00e2\7Q\2\2\u00e2\u00e3")
        buf.write("\7T\2\2\u00e3\u00e4\7F\2\2\u00e4\u00e5\7G\2\2\u00e5\u00e6")
        buf.write("\7T\2\2\u00e6\62\3\2\2\2\u00e7\u00e8\7I\2\2\u00e8\u00e9")
        buf.write("\7T\2\2\u00e9\u00ea\7Q\2\2\u00ea\u00eb\7W\2\2\u00eb\u00ec")
        buf.write("\7R\2\2\u00ec\64\3\2\2\2\u00ed\u00ee\7)\2\2\u00ee\66\3")
        buf.write("\2\2\2\u00ef\u00f0\7&\2\2\u00f08\3\2\2\2\u00f1\u00f2\7")
        buf.write("}\2\2\u00f2:\3\2\2\2\u00f3\u00f4\7\177\2\2\u00f4<\3\2")
        buf.write("\2\2\u00f5\u00f6\7B\2\2\u00f6>\3\2\2\2\u00f7\u00f8\7\'")
        buf.write("\2\2\u00f8@\3\2\2\2\u00f9\u00fa\7A\2\2\u00faB\3\2\2\2")
        buf.write("\u00fb\u00fc\7,\2\2\u00fcD\3\2\2\2\u00fd\u00fe\7\61\2")
        buf.write("\2\u00feF\3\2\2\2\u00ff\u0100\7-\2\2\u0100H\3\2\2\2\u0101")
        buf.write("\u0102\7/\2\2\u0102J\3\2\2\2\u0103\u0104\7`\2\2\u0104")
        buf.write("L\3\2\2\2\u0105\u0106\7#\2\2\u0106\u0107\7?\2\2\u0107")
        buf.write("N\3\2\2\2\u0108\u0109\7?\2\2\u0109\u010a\7?\2\2\u010a")
        buf.write("P\3\2\2\2\u010b\u010c\7>\2\2\u010c\u010d\7?\2\2\u010d")
        buf.write("R\3\2\2\2\u010e\u010f\7>\2\2\u010fT\3\2\2\2\u0110\u0111")
        buf.write("\7@\2\2\u0111\u0112\7?\2\2\u0112V\3\2\2\2\u0113\u0114")
        buf.write("\7@\2\2\u0114X\3\2\2\2\u0115\u0116\7C\2\2\u0116\u0117")
        buf.write("\7P\2\2\u0117\u0118\7F\2\2\u0118Z\3\2\2\2\u0119\u011a")
        buf.write("\7Q\2\2\u011a\u011b\7T\2\2\u011b\\\3\2\2\2\u011c\u011d")
        buf.write("\7b\2\2\u011d\u011e\7b\2\2\u011e\u011f\7b\2\2\u011f^\3")
        buf.write("\2\2\2\u0120\u0126\5m\67\2\u0121\u0125\5m\67\2\u0122\u0125")
        buf.write("\5k\66\2\u0123\u0125\5i\65\2\u0124\u0121\3\2\2\2\u0124")
        buf.write("\u0122\3\2\2\2\u0124\u0123\3\2\2\2\u0125\u0128\3\2\2\2")
        buf.write("\u0126\u0124\3\2\2\2\u0126\u0127\3\2\2\2\u0127`\3\2\2")
        buf.write("\2\u0128\u0126\3\2\2\2\u0129\u012b\5k\66\2\u012a\u0129")
        buf.write("\3\2\2\2\u012b\u012c\3\2\2\2\u012c\u012a\3\2\2\2\u012c")
        buf.write("\u012d\3\2\2\2\u012d\u012e\3\2\2\2\u012e\u0130\7\60\2")
        buf.write("\2\u012f\u0131\5k\66\2\u0130\u012f\3\2\2\2\u0131\u0132")
        buf.write("\3\2\2\2\u0132\u0130\3\2\2\2\u0132\u0133\3\2\2\2\u0133")
        buf.write("b\3\2\2\2\u0134\u0136\5k\66\2\u0135\u0134\3\2\2\2\u0136")
        buf.write("\u0137\3\2\2\2\u0137\u0135\3\2\2\2\u0137\u0138\3\2\2\2")
        buf.write("\u0138d\3\2\2\2\u0139\u013b\t\2\2\2\u013a\u0139\3\2\2")
        buf.write("\2\u013b\u013c\3\2\2\2\u013c\u013a\3\2\2\2\u013c\u013d")
        buf.write("\3\2\2\2\u013d\u013e\3\2\2\2\u013e\u013f\b\63\2\2\u013f")
        buf.write("f\3\2\2\2\u0140\u0141\7/\2\2\u0141\u0144\7/\2\2\u0142")
        buf.write("\u0144\7%\2\2\u0143\u0140\3\2\2\2\u0143\u0142\3\2\2\2")
        buf.write("\u0144\u0148\3\2\2\2\u0145\u0147\13\2\2\2\u0146\u0145")
        buf.write("\3\2\2\2\u0147\u014a\3\2\2\2\u0148\u0149\3\2\2\2\u0148")
        buf.write("\u0146\3\2\2\2\u0149\u014b\3\2\2\2\u014a\u0148\3\2\2\2")
        buf.write("\u014b\u014c\7\f\2\2\u014c\u014d\3\2\2\2\u014d\u014e\b")
        buf.write("\64\3\2\u014eh\3\2\2\2\u014f\u0150\7a\2\2\u0150j\3\2\2")
        buf.write("\2\u0151\u0152\t\3\2\2\u0152l\3\2\2\2\u0153\u0154\t\4")
        buf.write("\2\2\u0154n\3\2\2\2\13\2\u0124\u0126\u012c\u0132\u0137")
        buf.write("\u013c\u0143\u0148\4\2\3\2\2\4\2")
        return buf.getvalue()


class sdplLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]


    T__0 = 1
    T__1 = 2
    T__2 = 3
    T__3 = 4
    T__4 = 5
    T__5 = 6
    T__6 = 7
    T__7 = 8
    T__8 = 9
    T__9 = 10
    T__10 = 11
    T__11 = 12
    T__12 = 13
    T__13 = 14
    T__14 = 15
    T__15 = 16
    T__16 = 17
    T__17 = 18
    T__18 = 19
    T__19 = 20
    T__20 = 21
    T__21 = 22
    T__22 = 23
    T__23 = 24
    T__24 = 25
    T__25 = 26
    T__26 = 27
    T__27 = 28
    T__28 = 29
    T__29 = 30
    T__30 = 31
    T__31 = 32
    AO_MULTIPLY = 33
    AO_DIVIDE = 34
    AO_PLUS = 35
    AO_MINUS = 36
    AO_POWER = 37
    CO_NE = 38
    CO_EQ = 39
    CO_LE = 40
    CO_LT = 41
    CO_GE = 42
    CO_GT = 43
    AND = 44
    OR = 45
    QUOTE_DELIM = 46
    ID = 47
    DECIMAL = 48
    INTEGER = 49
    WS = 50
    SL_COMMENT = 51

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'REGISTER'", "'AS'", "';'", "'='", "'LOAD'", "'SCHEMA'", "'VERSION'", 
            "'TABLE'", "'FROM'", "'WITH'", "'PROJECTION'", "'('", "')'", 
            "','", "'.'", "'COMPUTE'", "':'", "'EXPAND'", "'STORE'", "'INTO'", 
            "'JOIN'", "'BY'", "'FILTER'", "'ORDER'", "'GROUP'", "'''", "'$'", 
            "'{'", "'}'", "'@'", "'%'", "'?'", "'*'", "'/'", "'+'", "'-'", 
            "'^'", "'!='", "'=='", "'<='", "'<'", "'>='", "'>'", "'AND'", 
            "'OR'", "'```'" ]

    symbolicNames = [ "<INVALID>",
            "AO_MULTIPLY", "AO_DIVIDE", "AO_PLUS", "AO_MINUS", "AO_POWER", 
            "CO_NE", "CO_EQ", "CO_LE", "CO_LT", "CO_GE", "CO_GT", "AND", 
            "OR", "QUOTE_DELIM", "ID", "DECIMAL", "INTEGER", "WS", "SL_COMMENT" ]

    ruleNames = [ "T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", 
                  "T__7", "T__8", "T__9", "T__10", "T__11", "T__12", "T__13", 
                  "T__14", "T__15", "T__16", "T__17", "T__18", "T__19", 
                  "T__20", "T__21", "T__22", "T__23", "T__24", "T__25", 
                  "T__26", "T__27", "T__28", "T__29", "T__30", "T__31", 
                  "AO_MULTIPLY", "AO_DIVIDE", "AO_PLUS", "AO_MINUS", "AO_POWER", 
                  "CO_NE", "CO_EQ", "CO_LE", "CO_LT", "CO_GE", "CO_GT", 
                  "AND", "OR", "QUOTE_DELIM", "ID", "DECIMAL", "INTEGER", 
                  "WS", "SL_COMMENT", "UNDERSCORE", "NUMBER", "LETTER" ]

    grammarFileName = "sdpl.g4"

    def __init__(self, input=None):
        super().__init__(input)
        self.checkVersion("4.5.1")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


    CHANNEL_WHITESPACE = 1
    CHANNEL_COMMENTS = 2


