# coding: utf-8
"""Read mapping for either single end and paired end data using BWA and samtools.

input:
    fastq -> list with your fastq.gz (R1, R2)
    ref -> reference's fastq file
"""

"""
from easydev import shellcmd
try:
    ret = shellcmd("which pbwa") # for IP cluster
    bwa_exe = "pbwa"
except:
    ret = shellcmd("which bwa")
    bwa_exe = "bwa"
"""

bwa_exe = "bwa"

def bwa_mem_dynamic(name, project):
    metadata = {'name':name, 'project':project}

    bwa_mem_code = '''
rule bwa_mem_%(name)s:
    """BWA MEM


    """
    input:
        fastq = __bwa_mem_%(name)s__input,
        reference = __bwa_mem_%(name)s__ref_input
    output:
        mem = __bwa_mem_%(name)s__mem_output,
        sort = __bwa_mem_%(name)s__sort_output,
        reference = __bwa_mem_%(name)s__reference
    log:
        mem = "%(project)s/logs/bwa_mem_%(name)s/bwa_mem.logs",
        index = "%(project)s/logs/bwa_mem_%(name)s/bwa_index.logs",
        sort = "%(project)s/logs/bwa_mem_%(name)s/samtools_sort.logs"
    params:
        index = config["bwa_mem_%(name)s"]["index"]["options"],
        mem = config["bwa_mem_%(name)s"]["mem"]["options"],
        rg = config["bwa_mem_%(name)s"]["mem"]["read_groups"],
        bwa_exe = bwa_exe
    threads:
        int(config["bwa_mem_%(name)s"]["mem"]["threads"])
    shell:
        """
        # Symbolic link of the reference
        if [[ {input.reference} == /* ]];
        then
            ln -sf {input.reference} {output.reference}
        else
            ln -sf $(pwd)/{input.reference} {output.reference}
        fi

        # Indexing
        bwa index {params.index} {output.reference} 2> {log.index}
        samtools faidx {output.reference}

        # Mapping
        ({params.bwa_exe} mem -t {threads} -R {params.rg} {params.mem} \
        {output.reference} {input.fastq} | \
        samtools view -Sbh -> {output.mem}) 2> {log.mem}
 
        # Sorting
        samtools sort -o {output.sort} {output.mem} 2> {log.sort}
        samtools index {output.sort} 2>> {log.sort}
        """
    '''

    from easydev import TempFile
    tt = TempFile()
    fh = open(tt.name, "w")
    fh.write(bwa_mem_code % metadata)
    fh.close()
    return fh.name
