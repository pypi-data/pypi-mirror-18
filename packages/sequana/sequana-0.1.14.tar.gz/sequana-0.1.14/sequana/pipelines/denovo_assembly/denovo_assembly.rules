"""
Author: Dimitri Desvillechabrol
Affiliation: Institut Pasteur
Aim: Denovo assembly
Data: paired end
Run: snakemake -s denovo_assembly.rules
"""

import os

import sequana
from sequana import snaketools as sm
from sequana.snaketools import SequanaConfig
sm.init("denovo_assembly.rules", globals())


# load config file
configfile: "config.yaml"
__snakefile__ = srcdir(__snakefile__)

final_output = []

manager = sm.PipelineManager("denovo_assembly", config)
report_dir = manager.getreportdir("da")
__rawdata__input = manager.getrawdata()

if config["digital_normalisation"]["do"]:
    __digital_normalisation__input = __rawdata__input
    __digital_normalisation__outdir = manager.getname("digital_normalisation")
    __digital_normalisation__output = [manager.getname("digital_normalisation",
                                       "_R%i_.dn.fastq.gz") % i
                                       for i in (1, 2)]
    include: sm.modules["digital_normalisation"]
    __spades__input = __digital_normalisation__output
else:
    __spades__input = __rawdata__input

__spades__outdir = manager.getwkdir("spades")
__spades__contigs = manager.getname("spades", ".contigs.fasta")
__spades__scaffolds = manager.getname("spades", ".scaffolds.fasta")
include: sm.modules["spades"]

__quast__input = [__spades__contigs, __spades__scaffolds]
__quast__outdir = manager.getwkdir("/quast_" + manager.sample)
__quast__output = __quast__outdir + "/report.html"
include: sm.modules["quast"]

__format_contigs__input = __spades__contigs
__format_contigs__output = manager.getname("format_contigs", ".fasta")
include: sm.modules["format_contigs"]

if config["do_mapping_evaluation"]:
    # remove snpeff analysis
    config = dict(config, **{"snpeff": {"do": False}})
    __bwa_mem_ref__ref_input = __format_contigs__output
    __report_mapping__quast_input = __quast__output
    include: sm.modules["variant_calling"]


final_output += [expand(__quast__output, sample=manager.samples),
                 expand(__format_contigs__output, sample=manager.samples)]


rule pipeline_denovo:
    input:
        final_output

onsuccess:
    report_dir_format = "%(proj)s/report_da_%(proj)s/"
    for proj in manager.samples.keys():
        report_dir = report_dir_format % {"proj": proj}
        shell("cp %s %s/" % ("requirements.txt", report_dir))
        shell("cp %s %s/" % ("dag.svg", report_dir))
        shell("cp %s %s/" % (__snakefile__, report_dir))
        shell("cp config.yaml %s/" % report_dir)
        sm.plot_stats()

        if config["do_mapping_evaluation"]:
            shell("cp %s %s" % (proj + "/freebayes/*vcf", report_dir))

        shell("cp -r %s %s" % (proj + "/quast_" + proj, report_dir))
        shell("cp %s %s" % (proj + "/format_contigs/*fasta", report_dir))
        shell("cp %s %s" % (proj + "/spades/*fasta", report_dir))
