"""
Author: Dimitri Desvillechabrol
Affiliation: Institut Pasteur
Aim: Variant calling
Data: paired end or single reads
Run: snakemake -s variant_calling.rules
"""

import sequana
from sequana import snaketools as sm
from sequana.snaketools import SequanaConfig
from sequana import SnpEff
sm.init("variant_calling.rules", globals())

# This must be defined before the include 
configfile: "config.yaml"

__snakefile__ = srcdir(__snakefile__)

final_output = []

# If annotation file is not provided
__report_mapping__ann = None
__report_mapping__ann_format = None

manager = sm.PipelineManager("variant_calling", config)
try:
    report_dir
except NameError:
    report_dir = manager.getreportdir("vc")

__rawdata__input = manager.getrawdata()

exec(open(sequana.modules["bwa_mem_dynamic"], "r").read())

# we must check if we are in the case of denovo assembly:
try:
    __report_mapping__quast_input = __quast__output
except NameError:
    __bwa_mem_ref__ref_input = config["bwa_mem_ref"]["reference"]
    __report_mapping__quast_input = []

# Generate data directory for SnpEff and annotation file for coverage
if config["snpeff"]["do"]:
    tmp = SnpEff(config["snpeff"]["reference"])
    __add_locus_in_fasta__fasta_input = __bwa_mem_ref__ref_input
    __add_locus_in_fasta__output = manager.getname("add_locus_in_fasta", 
            ".fasta")
    include: sm.modules["add_locus_in_fasta"]
    __bwa_mem_ref__ref_input = __add_locus_in_fasta__output
    __report_mapping__ann_input = config["snpeff"]["reference"]
else:
    __report_mapping__ann_input = []

# Mapping
__bwa_mem_ref__input = __rawdata__input
__bwa_mem_ref__reference = manager.getname("reference", ".fasta")
__bwa_mem_ref__mem_output = manager.getname("bwa_mem_ref", ".bam")
__bwa_mem_ref__sort_output = manager.getname("bwa_mem_ref", ".sorted.bam")
include: bwa_mem_dynamic("ref", manager.sample)
# set input of next rules 
__indel_realigner__input = __bwa_mem_ref__sort_output
__mark_duplicates__input = __bwa_mem_ref__sort_output
__bam_quality_filter__input = __bwa_mem_ref__sort_output
__freebayes__input = __bwa_mem_ref__sort_output

# Indel realigner
if config["indel_realigner"]["do"]:
    # create_sequence_dictionary input
    __create_sequence_dictionary__reference = __bwa_mem_ref__reference
    # create_sequence_dictionary output
    __create_sequence_dictionary__output = __bwa_mem_ref__reference.split(
            ".fa")[0] + ".dict"
    include: sm.modules["create_sequence_dictionary"]
    # indel_realigner inputs
    __indel_realigner__reference = __bwa_mem_ref__reference
    __indel_realigner__ref_dict = __create_sequence_dictionary__output
    # indel_realigner outputs
    __indel_realigner__output = manager.getname("indel_realigner", ".bam")
    __indel_realigner__intervals = manager.getname("indel_realigner", 
            ".intervals")
    include: sm.modules["indel_realigner"]
    __mark_duplicates__input = __indel_realigner__output
    __bam_quality_filter__input = __indel_realigner__output
    __freebayes__input = __indel_realigner__output

# Mark duplicates
if config["mark_duplicates"]["do"]:
    __mark_duplicates__output = manager.getname("mark_duplicates", ".bam")
    __mark_duplicates__metrics = manager.getname("mark_duplicates", ".metrics")
    include: sm.modules["mark_duplicates"]
    __bam_quality_filter__input = __mark_duplicates__output
    __freebayes__input = __mark_duplicates__output

# bam quality filter
if config["bam_quality_filter"]["do"]:
    __bam_quality_filter__output = manager.getname("bam_quality_filter",
                                                   ".filter.bam")
    include: sm.modules["bam_quality_filter"]
    __freebayes__input = __bam_quality_filter__output

# Mapping report
if config["report_mapping"]["do"]:
    __samtools_depth__input = __bwa_mem_ref__sort_output
    if config["bam_quality_filter"]["do"]:
        __samtools_depth__input = [__bam_quality_filter__output, 
                                   __bam_quality_filter__input]
        __report_mapping__bam_input = __bam_quality_filter__output
    elif config["mark_duplicates"]["do"]:
        __report_mapping__bam_input = __mark_duplicates__output
    else:
        __report_mapping__bam_input = __bwa_mem_ref__sort_output

    __samtools_depth__output = manager.getname("samtools_depth", ".bed")
    include: sm.modules["samtools_depth"]
    __report_mapping__input = __samtools_depth__output

    __report_mapping__sample_dict = manager.samples
    __report_mapping__sample = manager.sample
    __report_mapping__directory = report_dir
    __report_mapping__output = report_dir + "report_mapping.html"
    include: sm.modules["report_mapping"]
    final_output.append(expand(__report_mapping__output,
                               sample=manager.samples))
    
# Variant calling
__freebayes__reference = __bwa_mem_ref__reference
__freebayes__output = manager.getname("freebayes", ".vcf")
include: sm.modules["freebayes"]

# snpEff
if config["snpeff"]["do"]: 
    __snpeff__input = __freebayes__output
    __snpeff__output = manager.getname("snpeff", ".ann.vcf")
    include: sm.modules["snpeff"]
    __vcf_filter__input = __snpeff__output
else:
    __vcf_filter__input = __freebayes__output

# VCF filter
__vcf_filter__output = manager.getname("vcf_filter", ".filter.vcf")
include: sm.modules["vcf_filter"]
__report_variant__input = __vcf_filter__output

# report vcf
__report_variant__directory = report_dir
__report_variant__html_output = report_dir + "report_variant.html"
__report_variant__csv_output = report_dir + "variants.csv"
include: sm.modules["report_variant"]
final_output.append(expand(__report_variant__html_output, 
        sample=manager.samples))


include: sm.modules["conda"] # Create requirements.txt(dependencies)
__dag__input = __snakefile__
__rulegraph__output = "dag.svg"
__rulegraph__mapper = {"report_mapping":"report_mapping.html",
                       "report_variant":"report_variant.html"}
include: sm.modules["rulegraph"]
final_output.extend(["requirements.txt", "dag.svg"])


rule pipeline_variant:
    input:
        final_output


onsuccess: 
    sm.plot_stats()
    report_dir_format = "%(proj)s/report_vc_%(proj)s/"
    for proj in manager.samples.keys():
        report_dir = report_dir_format % {"proj": proj}
        shell("cp %s %s/" % (__snakefile__, report_dir))
        shell("cp %s %s/" % ("requirements.txt", report_dir))
        shell("cp %s %s/" % ("dag.svg", report_dir))
        shell("cp config.yaml %s/" % report_dir)
        shell("cp %s %s" % (proj + "/freebayes/*vcf", report_dir))
        shell("cp %s %s" % (proj + "/vcf_filter/*vcf", report_dir))
        if config["snpeff"]["do"]:
            shell("cp %s %s" % ("snpEff_summary.html", report_dir))
