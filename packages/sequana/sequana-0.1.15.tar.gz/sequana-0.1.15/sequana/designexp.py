# -*- coding: utf-8 -*-
#
#  This file is part of Sequana software
#
#  Copyright (c) 2016 - Sequana Development Team
#
#  File author(s):
#      Thomas Cokelaer <thomas.cokelaer@pasteur.fr>
#      Dimitri Desvillechabrol <dimitri.desvillechabrol@pasteur.fr>,
#          <d.desvillechabrol@gmail.com>
#
#  Distributed under the terms of the 3-clause BSD license.
#  The full license is in the LICENSE file, distributed with this software.
#
#  website: https://github.com/sequana/sequana
#  documentation: http://sequana.readthedocs.io
#
##############################################################################
"""Handle experimental design files (adapters)"""
import pandas as pd
import shlex
import io


__all__ = ["ExpDesignAdapter", "ExpDesignMiSeq", "ExpDesignHiSeq"]


class ExpDesignAdapter(object):
    """Generic Experimantal design class for adapters


    The :attr:`df` attribute contains Sample_ID, Index_Seq and Index_ID amongst
    other things. The other columns may differ depending on the input.


    .. seealso:: :class:`ExpDesignHiSeq`, :class:`ExpDesignMiSeq`.
    """
    def __init__(self, filename, verbose=True):
        """.. rubric:: constructor

        :param str filename:
        :param bool verbose:

        """
        self.df = None
        if self.df is None:
            try: 
                self.df = ExpDesignMiSeq(filename).df
                if verbose: print("Found MiSeq design file")
            except: pass
        if self.df is None:
            try: 
                self.df = ExpDesignHiSeq(filename).df
                if verbose: print("Found HiSeq design file")
            except:pass
        if self.df is None:
            try: 
                self.df = ExpDesignGeneric(filename).df
                if verbose: print("Found Generic Sequencer design file")
            except: pass
        if self.df is None:
            raise IOError("Input file could not be read or interpreted")


class ExpDesignBase(object):

    def check(self):
        """Check the presence of the Sample_ID columnd"""
        for this in ["Sample_ID"]:
            if this not in self.df.columns:
                print(self.df.columns)
                raise KeyError("%s not found. " % this)

    def read(self, filename):
        """Read a CSV file"""
        self.df = pd.read_csv(filename, sep=",")


class ExpDesignGeneric(ExpDesignBase):
    #TODO a generic list of columns to be found
    def __init__(self, filename):
        self.read(filename)

        self.df.rename(columns={"index1": "Index1_ID", "index2": "Index2_ID", 
            "sample_name": "Sample_ID"},  inplace=True)

        self.check()


class ExpDesignHiSeq(ExpDesignBase):
    """Dedicated experimental design class for adapters (see details below)


    Columns are:
        - FCID
        - Lane
        - SampleID",
        - "Index Seq" may be empty, an index sequence, or 2 index sequences
          separated by a "-" sign
    Design Exp for HiSeq data from 

    Index should appear in the name

    This layout is specific to the demultiplexing LIMS used at Biomics

    FCID = flowcell ID

    double indexing is stored in one column as index1-index2

    rename columns to a common format
    """
    def __init__(self, filename):
        self.read(filename)

        for this in ["FCID","Lane","SampleID","Index Seq"]:
            if this not in self.df.columns:
                raise ValueError("Invalid header. %s column is missing" % this)

        self.df.rename(columns={"SampleID":"Sample_ID", "Index Seq":"Index_Seq"},
                       inplace=True)

        index1 = []
        index2 = []
        for this in self.df.Index_Seq.values:
            if isinstance(this, str):
                indices = this.split("-")
                index1.append(indices[0])
                if len(indices) == 2:
                    index2.append(indices[1])
                else:
                    index2.append(None)
            else:
                index1.append(None)
                index2.append(None)
        self.df['Index1_Seq'] = index1
        self.df['Index2_Seq'] = index2
        self.df.drop("Index_Seq", axis=1, inplace=True)

        self.check()


class ExpDesignMiSeq(ExpDesignBase):
    """

    MiSeq design file is generated by Illumina itself.
    The format is ::

        [Header]

        [Reads]

        [Settings]

        [Data]

    In Data, index are stored as NFXX where XX is the index ID.NF should be
    dropped.
    ::

        ff = ExpDesignMiSeq("test_expdesign_miseq_illumina.csv")
        ff.df

    """
    def __init__(self, filename):
        data = {}
        # shlex removes all white lines and split by return carriage
        # strip is also applied
        rawdata = shlex.split(open(filename, "r"))
        for line in rawdata:
            if line.startswith('[') and line.endswith(']'):
                currentkey = line.replace("[", "").replace("]", "")
                data[currentkey] = []
            else:
                data[currentkey].append(line)

        for key in data.keys():
            data[key] = "\n".join(data[key])

        for this in ["Header", "Reads", "Settings", "Data"]:
            if this not in data.keys():
                print("%s not found in the DesignExpMiSeq file" % this)

        self.data = data
        self.df = pd.read_csv(io.StringIO(data["Data"]))

        self.df.rename(columns={"I7_Index_ID":"Index1_ID", "index":"Index1_Seq",
            "I5_Index_ID": "Index2_ID", "index2":"Index2_Seq"},
                       inplace=True)

        # The name of the Index_ID is not standard....
        # Depends on the experimentalist because a prefix may be added.
        # One known prefix is NF. We agreed that future prefix must end with an
        # underscore so that it can be removed. Since ID may contain letters
        # (e.g.S501), it would be impossible otherwise to split the prefix from
        # the index.
        self.df["Index1_ID"] = self.df["Index1_ID"].apply(
                lambda x: x.replace("NF", ""))
        self.df["Index1_ID"] = self.df["Index1_ID"].apply(
                lambda x: x.split("_",1)[-1])
        try:
            self.df["Index1_ID"] = self.df["Index1_ID"].astype(int)
        except:
            pass

        if "Index2_ID" in self.df.columns:
            self.df["Index2_ID"] = self.df["Index2_ID"].apply(
                lambda x: x.replace("NF", ""))
            self.df["Index2_ID"] = self.df["Index2_ID"].apply(
                lambda x: x.split("_",1)[-1])
            try:
                self.df["Index2_ID"] = self.df["Index2_ID"].astype(int)
            except:
                pass

        self.check()


