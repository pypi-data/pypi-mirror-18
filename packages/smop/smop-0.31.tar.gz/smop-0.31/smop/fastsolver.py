# Autogenerated with SMOP 0.30
from smop.core import *
# fastsolver.m

    
@function
def fastsolver(A=None,B=None,w0=None,*args,**kwargs):
    varargin = fastsolver.varargin
    nargin = fastsolver.nargin

    moves,optmove,optscore=cbest(A,B,w0,nargout=3)
# fastsolver.m:2
    curscore=sum(w0[moves[:,1]])
# fastsolver.m:3
    lots=1
# fastsolver.m:4
    if length(moves) - optmove < 20 or curscore / optscore < 1.05:
        lots=2
# fastsolver.m:6
        return moves
    else:
        lenw=length(w0)
# fastsolver.m:8
        xx,nseq=sort(rand(1,lenw),nargout=2)
# fastsolver.m:9
        A1=copy(A)
# fastsolver.m:10
        B1=copy(B)
# fastsolver.m:11
        w01=copy(w0)
# fastsolver.m:12
        for i in arange(1,lenw).reshape(-1):
            A1[A == i]=nseq[i]
# fastsolver.m:14
            B1[B == i]=nseq[i]
# fastsolver.m:15
            w01[nseq[i]]=w0[i]
# fastsolver.m:16
        moves2,optmove,optscore=cbest(A1,B1,w01,nargout=3)
# fastsolver.m:18
        moves22=copy(moves2)
# fastsolver.m:19
        for i in arange(1,lenw).reshape(-1):
            moves22[moves2[:,1] == nseq[i],1]=i
# fastsolver.m:21
        curscore2=sum(w0[moves22[:,1]])
# fastsolver.m:23
        if curscore2 < curscore:
            moves=copy(moves22)
# fastsolver.m:25
        else:
            #   [moves1,yess]=dealWall1(A,B,w0,moves);
            pass
    
    # final clean up before passing off
    n=length(w0)
# fastsolver.m:31
    ipos1=zeros(n,1)
# fastsolver.m:32
    ipos2=copy(ipos1)
# fastsolver.m:33
    fpos1=copy(ipos1)
# fastsolver.m:34
    fpos2=copy(ipos1)
# fastsolver.m:35
    for i in arange(1,n).reshape(-1):
        ipos1[i],ipos2[i]=find(A == i,nargout=2)
# fastsolver.m:37
        fpos1[i],fpos2[i]=find(B == i,nargout=2)
# fastsolver.m:38
    
    optmove=sum(abs(fpos1 - ipos1) + abs(fpos2 - ipos2))
# fastsolver.m:40
    optscore=sum(multiply((abs(fpos1 - ipos1) + abs(fpos2 - ipos2)),w0))
# fastsolver.m:41
    moves=improve(A,B,w0,optmove,optscore,cat(ipos1,ipos2),cat(fpos1,fpos2),moves,lots)
# fastsolver.m:42
    #####
    
@function
def cbest(A=None,B=None,w0=None,*args,**kwargs):
    varargin = cbest.varargin
    nargin = cbest.nargin

    lots=0
# fastsolver.m:45
    n=length(w0)
# fastsolver.m:46
    ipos1=zeros(n,1)
# fastsolver.m:47
    ipos2=copy(ipos1)
# fastsolver.m:48
    fpos1=copy(ipos1)
# fastsolver.m:49
    fpos2=copy(ipos1)
# fastsolver.m:50
    for i in arange(1,n).reshape(-1):
        ipos1[i],ipos2[i]=find(A == i,nargout=2)
# fastsolver.m:52
        fpos1[i],fpos2[i]=find(B == i,nargout=2)
# fastsolver.m:53
    
    optmove=sum(abs(fpos1 - ipos1) + abs(fpos2 - ipos2))
# fastsolver.m:55
    optscore=sum(multiply((abs(fpos1 - ipos1) + abs(fpos2 - ipos2)),w0))
# fastsolver.m:56
    score=copy(inf)
# fastsolver.m:56
    if n != 28 or (numel(A) / n) <= 1.98:
        mv=TLL79(A,B,w0,optmove,optscore)
# fastsolver.m:58
        movesTLL79=improve(A,B,w0,optmove,optscore,cat(ipos1,ipos2),cat(fpos1,fpos2),mv,lots)
# fastsolver.m:59
        scoreTLL79=sum(w0[movesTLL79[:,1]])
# fastsolver.m:60
        if (scoreTLL79 - optscore) > 0:
            movesA5=improve(A,B,w0,optmove,optscore,cat(ipos1,ipos2),cat(fpos1,fpos2),itTakesAThief(A,B,w0),lots)
# fastsolver.m:62
            scoreA5=sum(w0[movesA5[:,1]])
# fastsolver.m:63
            if scoreTLL79 < scoreA5:
                moves=copy(movesTLL79)
# fastsolver.m:65
            else:
                moves=copy(movesA5)
# fastsolver.m:67
        else:
            moves=copy(movesTLL79)
# fastsolver.m:70
        flag=0
# fastsolver.m:72
    else:
        flag=1
# fastsolver.m:74
    
    if ((n >= 18 and n <= 20) or n == 28 or n == 23 or (n >= 13 and n <= 16)) and (flag or length(moves) > dot(1.18,optmove)) and (numel(A) / n) > 1.98:
        if ((score - optscore) < 20) or (logical_not(flag) and (length(moves) - optmove) < 2):
            return moves,optmove,optscore
        ym=size(A,1)
# fastsolver.m:79
        M=matlabarray(cat(ym,1,- ym,- 1))
# fastsolver.m:80
        mask=true(1,n)
# fastsolver.m:81
        w=abs(ravel(w0).T) + 0.1
# fastsolver.m:82
        rand('seed',100)
        mov,ok=mainsolver(A,B,w,mask,nargout=2)
# fastsolver.m:84
        mov=dot(1,(mov == M[1])) + dot(2,(mov == M[2])) + dot(3,(mov == M[3])) + dot(4,(mov == M[4]))
# fastsolver.m:85
        mov=matlabarray(cat(dot((mov > 0),(arange(1,n)).T),sum(mov,2)))
# fastsolver.m:86
        mov=improve(A,B,w0,optmove,optscore,cat(ipos1,ipos2),cat(fpos1,fpos2),mov,lots)
# fastsolver.m:87
        if ok and flag == 0:
            if sum(w0[mov[:,1]]) < sum(w0[moves[:,1]]):
                moves=copy(mov)
# fastsolver.m:90
        else:
            moves=copy(mov)
# fastsolver.m:93
    
    ##################
    
@function
def mainsolver(A=None,B=None,w=None,mask=None,*args,**kwargs):
    varargin = mainsolver.varargin
    nargin = mainsolver.nargin

    n=sum(mask)
# fastsolver.m:98
    if n == 0:
        ok=0
# fastsolver.m:100
        return mov,ok
    
    mov,ok=easysolver(A,B,w,mask,nargout=2)
# fastsolver.m:103
    if ok:
        return mov,ok
    
    ipos=zeros(size(mask))
# fastsolver.m:107
    for i in find(mask).reshape(-1):
        ipos[i]=find(A == i)
# fastsolver.m:109
    
    invw=max(w) + 1 - w
# fastsolver.m:111
    blockers=sum(findoverlaps(cumsum(cat([ipos],[mov]))))
# fastsolver.m:112
    Apz=zeros(size(A))
# fastsolver.m:113
    Bpz=zeros(size(B))
# fastsolver.m:114
    for leaveout in arange(ceil(dot(2,log(n))),(n - 1)).reshape(-1):
        mmask=copy(mask)
# fastsolver.m:116
        choosew=multiply(sum(blockers),invw)
# fastsolver.m:117
        for i in arange(1,leaveout).reshape(-1):
            small=find(cumsum(multiply(mmask,choosew)) >= dot(rand,sum(multiply(mmask,choosew))))
# fastsolver.m:119
            mmask[small[1]]=false
# fastsolver.m:120
        Ap=copy(Apz)
# fastsolver.m:122
        Bp=copy(Bpz)
# fastsolver.m:123
        for i in find(mmask).reshape(-1):
            Ap[ipos[i]]=i
# fastsolver.m:125
            Bp[B == i]=i
# fastsolver.m:126
        partialmov,ok=mainsolver(Ap,Bp,w + dot(min(w),rand(size(w))),mmask,nargout=2)
# fastsolver.m:128
        blockers=blockers + sum(findoverlaps(cumsum(cat([ipos],[partialmov]))))
# fastsolver.m:129
        if logical_not(ok):
            continue
        for i in find(mask).reshape(-1):
            Ap[ipos[i]]=i
# fastsolver.m:134
        for i in arange(1,dot(3,sum(mask))).reshape(-1):
            small=find(cumsum(multiply(w,(logical_and(logical_not(mmask),mask)))) >= dot(rand,sum(multiply(w,(logical_and(logical_not(mmask),mask))))))
# fastsolver.m:137
            trymov,ok=imoves(small[1],partialmov,Ap,B,mmask,nargout=2)
# fastsolver.m:138
            if ok:
                mmask[small[1]]=true
# fastsolver.m:140
                if isequal(mmask,mask):
                    ok=1
# fastsolver.m:142
                    mov=copy(trymov)
# fastsolver.m:143
                    return mov,ok
                partialmov=copy(trymov)
# fastsolver.m:146
            else:
                dropw=multiply(blockers,invw)
# fastsolver.m:148
                small=find(cumsum(multiply(dropw,(logical_and(mmask,mask)))) >= dot(rand,sum(multiply(dropw,(logical_and(mmask,mask))))))
# fastsolver.m:149
                mmask[small[1]]=false
# fastsolver.m:150
                partialmov[find(partialmov[:,small[1]]),:]=[]
# fastsolver.m:151
        ok=0
# fastsolver.m:154
    
    ##################
    
@function
def imoves(c=None,mov=None,A=None,B=None,mask=None,*args,**kwargs):
    varargin = imoves.varargin
    nargin = imoves.nargin

    mov[find(mov[:,c]),:]=[]
# fastsolver.m:158
    nmov=size(mov,1)
# fastsolver.m:159
    crow,ccol=find(A == c,nargout=2)
# fastsolver.m:160
    trow,tcol=find(B == c,nargout=2)
# fastsolver.m:161
    if nmov == 0 and crow == trow and ccol == tcol:
        ok=1
# fastsolver.m:163
        return mov,ok
    
    n=length(mask)
# fastsolver.m:166
    rows,cols=size(A,nargout=2)
# fastsolver.m:168
    slices=false(rows,cols,nmov + 1)
# fastsolver.m:169
    ipos=zeros(1,n)
# fastsolver.m:170
    for i in find(mask).reshape(-1):
        ipos[i]=find(ravel(A) == i)
# fastsolver.m:172
    
    pos=cumsum(cat([ipos],[mov]),1)
# fastsolver.m:174
    for k in arange(1,(nmov + 1)).reshape(-1):
        R=zeros(size(A))
# fastsolver.m:176
        R[pos[k,mask]]=- 1
# fastsolver.m:177
        slices[:,:,k]=(R == - 1)
# fastsolver.m:178
    
    target=sub2ind(size(slices),trow,tcol,nmov + 1)
# fastsolver.m:180
    optlen=abs(crow - trow) + abs(ccol - tcol)
# fastsolver.m:181
    nnnn=numel(slices)
# fastsolver.m:182
    path=dijkstra(nnnn,find(A == c),target,slices,dot((1 + dot(0.1,log(nnnn))),optlen))
# fastsolver.m:183
    if isempty(path):
        ok=0
# fastsolver.m:185
        return mov,ok
    
    for i in arange(length(path),2,- 1).reshape(-1):
        if path[i] - path[i - 1] < dot(rows,cols):
            k=floor((path[i - 1] - 1) / (dot(rows,cols))) + 1
# fastsolver.m:190
            mov=matlabarray(cat([mov[1:(k - 1),:]],[zeros(1,n)],[mov[k:end(),:]]))
# fastsolver.m:191
            mov[k,c]=path[i] - path[i - 1]
# fastsolver.m:192
    
    ok=1
# fastsolver.m:195
    ##################
    
@function
def easysolver(A=None,B=None,w=None,mask=None,*args,**kwargs):
    varargin = easysolver.varargin
    nargin = easysolver.nargin

    global TEST
    TEST=1
# fastsolver.m:199
    NFIDDLE=5
# fastsolver.m:200
    ok=0
# fastsolver.m:201
    ym=size(A,1)
# fastsolver.m:202
    n=length(mask)
# fastsolver.m:203
    M=matlabarray(cat(ym,1,- ym,- 1))
# fastsolver.m:204
    moves=matlabarray([])
# fastsolver.m:205
    ipos=zeros(1,n)
# fastsolver.m:206
    for i in find(mask).reshape(-1):
        row,col=find(A == i,nargout=2)
# fastsolver.m:208
        rowt,colt=find(B == i,nargout=2)
# fastsolver.m:209
        nm=abs(col - colt) + abs(row - rowt)
# fastsolver.m:210
        moves=matlabarray(cat([moves],[zeros(nm,i - 1),cat([dot(M[1],ones(max((colt - col),0),1))],[dot(M[2],ones(max((rowt - row),0),1))],[dot(M[3],ones(max((col - colt),0),1))],[dot(M[4],ones(max((row - rowt),0),1))]),zeros(nm,n - i)]))
# fastsolver.m:211
        ipos[i]=dot((col - 1),ym) + row
# fastsolver.m:217
    
    nmov=size(moves,1)
# fastsolver.m:219
    if nmov == 0:
        ok=1
# fastsolver.m:221
        return moves,ok
    
    moves=moves[randperm(nmov),:]
# fastsolver.m:224
    for i in arange(1,NFIDDLE).reshape(-1):
        pos=cumsum(cat([ipos],[moves]))
# fastsolver.m:226
        okmov=min(find(any(findoverlaps(pos),2))) - 1
# fastsolver.m:227
        if isempty(okmov):
            ok=1
# fastsolver.m:229
            return moves,ok
        indperm=localfiddler(pos[okmov,:],moves[okmov:nmov,:],w)
# fastsolver.m:232
        moves[okmov:nmov,:]=moves[okmov - 1 + indperm,:]
# fastsolver.m:233
    
    pos=cumsum(cat([ipos],[moves]))
# fastsolver.m:235
    small=find(any(findoverlaps(pos),2))
# fastsolver.m:236
    okmov=small[1] - 1
# fastsolver.m:237
    if isempty(okmov):
        ok=1
# fastsolver.m:239
        return moves,ok
    
    oldmoves=copy(moves)
# fastsolver.m:242
    for i in arange(1,ceil(sqrt(nmov - okmov))).reshape(-1):
        pos=cumsum(cat([ipos],[moves]))
# fastsolver.m:244
        overlap=findoverlaps(pos)
# fastsolver.m:245
        if logical_not(any(ravel(overlap))):
            ok=1
# fastsolver.m:247
            return moves,ok
        else:
            small=find(any(overlap,2))
# fastsolver.m:250
            oli=small[1]
# fastsolver.m:251
            small=find(overlap[oli,:])
# fastsolver.m:252
            one=small[1]
# fastsolver.m:253
            small=find(overlap[oli,:])
# fastsolver.m:254
            other=small[end()]
# fastsolver.m:255
            rowinds=matlabarray(cat(oli - 1,min(find(logical_and(moves[:,one],(arange(1,nmov)).T) >= oli)),min(find(logical_and(moves[:,other],(arange(1,nmov)).T) >= oli)),max(find(logical_and(moves[:,one],(arange(1,nmov)).T) < oli - 1)),max(find(logical_and(moves[:,other],(arange(1,nmov)).T) < oli - 1))))
# fastsolver.m:256
            indperm=localfiddler(pos[oli - 1,:],moves[rowinds,:],w)
# fastsolver.m:261
            moves[rowinds,:]=moves[rowinds[indperm],:]
# fastsolver.m:262
    
    pos=cumsum(cat([ipos],[moves]))
# fastsolver.m:265
    small=find(any(findoverlaps(pos),2))
# fastsolver.m:266
    if isempty(small) or (small[1] - 1 < okmov):
        moves=copy(oldmoves)
# fastsolver.m:268
    
    ##################
    
@function
def localfiddler(ipos=None,mov=None,w=None,*args,**kwargs):
    varargin = localfiddler.varargin
    nargin = localfiddler.nargin

    M=4
# fastsolver.m:272
    nmov,n=size(mov,nargout=2)
# fastsolver.m:273
    if nmov <= M:
        M=copy(nmov)
# fastsolver.m:275
        P=perms(arange(1,M))
# fastsolver.m:276
    else:
        M=min(M,nmov)
# fastsolver.m:278
        inds=arange((M + 1),nmov)
# fastsolver.m:279
        P=matlabarray(cat(perms(arange(1,M)),inds[ones(prod(arange(2,M)),1),:]))
# fastsolver.m:280
        for i in arange(1,size(P,1)).reshape(-1):
            P[i,M + 1:nmov]=inds[randperm(nmov - M)]
# fastsolver.m:282
    
    f=zeros(size(P,1),1)
# fastsolver.m:285
    for i in arange(1,size(P,1)).reshape(-1):
        newmov=mov[P[i,:],:]
# fastsolver.m:287
        pos=cumsum(cat([ipos],[newmov]))
# fastsolver.m:288
        overlap=findoverlaps(pos)
# fastsolver.m:289
        if logical_not(any(ravel(overlap))):
            indperm=P[i,:]
# fastsolver.m:291
            return indperm
        else:
            p=any(overlap,1)
# fastsolver.m:294
            for c in arange(1,n).reshape(-1):
                if p[c]:
                    small=find(overlap[:,c])
# fastsolver.m:297
                    f[i]=f[i] + dot(w[c],small[1])
# fastsolver.m:298
                else:
                    f[i]=f[i] + dot(w[c],nmov)
# fastsolver.m:300
    
    DNC,best=max(f,nargout=2)
# fastsolver.m:305
    indperm=P[best,:]
# fastsolver.m:306
    ##################
    
@function
def findoverlaps(pos=None,*args,**kwargs):
    varargin = findoverlaps.varargin
    nargin = findoverlaps.nargin

    npos,n=size(pos,nargout=2)
# fastsolver.m:309
    cols=find(all(pos))
# fastsolver.m:310
    pos=pos[:,cols]
# fastsolver.m:311
    A=zeros(npos,length(cols))
# fastsolver.m:312
    sortpos,ind=sort(pos,2,nargout=2)
# fastsolver.m:313
    ind1=ind[:,1:end() - 1]
# fastsolver.m:314
    ind2=ind[:,2:end()]
# fastsolver.m:315
    dp=diff(sortpos,1,2) == 0
# fastsolver.m:316
    for i in arange(1,npos).reshape(-1):
        A[i,ind1[i,dp[i,:]]]=true
# fastsolver.m:318
        A[i,ind2[i,dp[i,:]]]=true
# fastsolver.m:319
    
    overlaps=zeros(npos,n)
# fastsolver.m:321
    overlaps[:,cols]=A
# fastsolver.m:322
    ##################
    
@function
def dijkstra(n=None,s=None,d=None,R=None,optlen=None,*args,**kwargs):
    varargin = dijkstra.varargin
    nargin = dijkstra.nargin

    rows,cols,depth=size(R,nargout=3)
# fastsolver.m:325
    R=ravel(R)
# fastsolver.m:326
    visited=false(1,n)
# fastsolver.m:327
    distance=dot(inf,ones(1,n))
# fastsolver.m:328
    parent=zeros(1,n)
# fastsolver.m:329
    distance[s]=0
# fastsolver.m:330
    stack=zeros(1,n)
# fastsolver.m:331
    stack[1]=s
# fastsolver.m:332
    next=1
# fastsolver.m:333
    last=1
# fastsolver.m:334
    for i in arange(1,(n - 1)).reshape(-1):
        if next > last:
            break
        else:
            u=stack[next]
# fastsolver.m:339
            next=next + 1
# fastsolver.m:340
        visited[u]=true
# fastsolver.m:342
        ndx=u - 1
# fastsolver.m:343
        k=floor(ndx / (dot(rows,cols))) + 1
# fastsolver.m:344
        ndx=rem(ndx,dot(rows,cols))
# fastsolver.m:345
        col=floor(ndx / rows) + 1
# fastsolver.m:346
        ndx=rem(ndx,rows)
# fastsolver.m:347
        row=floor(ndx) + 1
# fastsolver.m:348
        v=u + 1
# fastsolver.m:349
        if v > 0 and v <= n and logical_not(R[v]) and row < rows:
            if distance[u] + 1 < distance[v]:
                distance[v]=distance[u] + 1
# fastsolver.m:352
                parent[v]=u
# fastsolver.m:353
                if logical_not(visited[v]):
                    if (v == d) and (distance[d] == optlen):
                        break
                    last=last + 1
# fastsolver.m:358
                    stack[last]=v
# fastsolver.m:359
        v=u - 1
# fastsolver.m:363
        if v > 0 and v <= n and logical_not(R[v]) and row > 1:
            if distance[u] + 1 < distance[v]:
                distance[v]=distance[u] + 1
# fastsolver.m:366
                parent[v]=u
# fastsolver.m:367
                if logical_not(visited[v]):
                    if (v == d) and (distance[d] == optlen):
                        break
                    last=last + 1
# fastsolver.m:372
                    stack[last]=v
# fastsolver.m:373
        v=u + rows
# fastsolver.m:377
        if v > 0 and v <= n and logical_not(R[v]) and col < cols:
            if distance[u] + 1 < distance[v]:
                distance[v]=distance[u] + 1
# fastsolver.m:380
                parent[v]=u
# fastsolver.m:381
                if logical_not(visited[v]):
                    if (v == d) and (distance[d] == optlen):
                        break
                    last=last + 1
# fastsolver.m:386
                    stack[last]=v
# fastsolver.m:387
        v=u - rows
# fastsolver.m:391
        if v > 0 and v <= n and logical_not(R[v]) and col > 1:
            if distance[u] + 1 < distance[v]:
                distance[v]=distance[u] + 1
# fastsolver.m:394
                parent[v]=u
# fastsolver.m:395
                if logical_not(visited[v]):
                    if (v == d) and (distance[d] == optlen):
                        break
                    last=last + 1
# fastsolver.m:400
                    stack[last]=v
# fastsolver.m:401
        v=u + dot(rows,cols)
# fastsolver.m:405
        if v > 0 and v <= n and logical_not(R[v]) and k < depth:
            if distance[u] < distance[v]:
                distance[v]=distance[u]
# fastsolver.m:408
                parent[v]=u
# fastsolver.m:409
                if logical_not(visited[v]):
                    if (v == d) and (distance[d] == optlen):
                        break
                    last=last + 1
# fastsolver.m:414
                    stack[last]=v
# fastsolver.m:415
    
    if parent[d] != 0:
        path=zeros(1,distance[d] + depth)
# fastsolver.m:421
        pathi=length(path)
# fastsolver.m:422
        t=copy(d)
# fastsolver.m:423
        path[pathi]=d
# fastsolver.m:424
        pathi=pathi - 1
# fastsolver.m:425
        while t != s:

            p=parent[t]
# fastsolver.m:427
            path[pathi]=p
# fastsolver.m:428
            pathi=pathi - 1
# fastsolver.m:429
            t=copy(p)
# fastsolver.m:430

    else:
        path=matlabarray([])
# fastsolver.m:433
    
    #####
    
@function
def improve(Ai=None,Af=None,w=None,optmove=None,optscore=None,Ci=None,Cf=None,mv=None,lots=None,*args,**kwargs):
    varargin = improve.varargin
    nargin = improve.nargin

    dist=copy(optscore)
# fastsolver.m:437
    n_blk=length(w)
# fastsolver.m:438
    I=matlabarray(cat(0,1,0,- 1))
# fastsolver.m:439
    J=matlabarray(cat(1,0,- 1,0))
# fastsolver.m:440
    sc=sum(w[mv[:,1]])
# fastsolver.m:441
    mv_len=size(mv,1)
# fastsolver.m:441
    if sc == optscore:
        return mv
    
    if lots == 1:
        if ((sc - optscore) < 5) or ((mv_len - optmove) < 1):
            return mv
        num_fail=0
# fastsolver.m:445
        max_try=min(125,dot(mv_len,2))
# fastsolver.m:445
        max_fail=copy(max_try)
# fastsolver.m:445
    else:
        if lots == 0:
            if ((sc - optscore) < 20) or ((mv_len - optmove) < 2):
                return mv
            num_fail=0
# fastsolver.m:448
            max_try=min(40,mv_len)
# fastsolver.m:448
            max_fail=copy(max_try)
# fastsolver.m:448
        else:
            if lots == 2:
                if ((sc - optscore) < 5) or ((mv_len - optmove) < 1):
                    return mv
                num_fail=0
# fastsolver.m:451
                max_try=min(55,mv_len)
# fastsolver.m:451
                max_fail=copy(max_try)
# fastsolver.m:451
    
    for j_try in arange(1,max_try).reshape(-1):
        sc_old=copy(sc)
# fastsolver.m:454
        A=copy(Ai)
# fastsolver.m:454
        C=copy(Ci)
# fastsolver.m:454
        j=1
# fastsolver.m:455
        while j < mv_len:

            if (mv[j,1] == mv[j + 1,1]) and (abs(mv[j,2] - mv[j + 1,2]) == 2):
                sc=sc - dot(2,w[mv[j,1]])
# fastsolver.m:458
                mv=mv[cat(arange(1,j - 1),arange(j + 2,mv_len)),:]
# fastsolver.m:459
                mv_len=mv_len - 2
# fastsolver.m:460
                if sc == dist:
                    return mv
            else:
                if A[C[mv[j + 1,1],1] + I[mv[j + 1,2]],C[mv[j + 1,1],2] + J[mv[j + 1,2]]] == 0:
                    mv[cat(j,j + 1),:]=mv[cat(j + 1,j),:]
# fastsolver.m:464
                else:
                    if j + 3 <= mv_len:
                        b=mv[j,1]
# fastsolver.m:467
                        c=mv[j + 1,1]
# fastsolver.m:467
                        d=mv[j + 2,1]
# fastsolver.m:467
                        sit=0
# fastsolver.m:468
                        if (b == mv[j + 3,1]) and (abs(mv[j,2] - mv[j + 3,2]) == 2):
                            if (b == c) and (b == d) and (mv[j + 1,2] == mv[j + 2,2]):
                                b1=A[C[b,1] + I[mv[j + 1,2]],C[b,2] + J[mv[j + 1,2]]]
# fastsolver.m:471
                                sit=1
# fastsolver.m:471
                            else:
                                if (b == c) and (b != d) and (abs(mv[j + 1,2] - mv[j + 2,2]) == 2):
                                    b1=copy(d)
# fastsolver.m:474
                                    sit=1
# fastsolver.m:474
                                else:
                                    if (b != c) and (b == d) and (abs(mv[j + 1,2] - mv[j + 2,2]) == 2):
                                        b1=copy(c)
# fastsolver.m:477
                                        sit=1
# fastsolver.m:477
                                    else:
                                        if (b == c) and (b != d):
                                            sc=sc - dot(2,w[b])
# fastsolver.m:480
                                            mv[j,1]=d
# fastsolver.m:480
                                            mv[j,2]=mv[j + 2,2]
# fastsolver.m:480
                                            mv=mv[cat(arange(1,j + 1),arange(j + 4,mv_len)),:]
# fastsolver.m:481
                                            mv_len=mv_len - 2
# fastsolver.m:481
                        if sit == 1:
                            if w[b1] < w[b]:
                                mv[j,1]=b1
# fastsolver.m:489
                                mv[j + 3,1]=b1
# fastsolver.m:489
                                sc=sc - dot(2,(w[b] - w[b1]))
# fastsolver.m:490
                if (sc - optscore) < 5:
                    return mv
                b=mv[j,1]
# fastsolver.m:496
                r=C[b,1]
# fastsolver.m:496
                c=C[b,2]
# fastsolver.m:496
                nr=r + I[mv[j,2]]
# fastsolver.m:497
                nc=c + J[mv[j,2]]
# fastsolver.m:497
                A[r,c]=0
# fastsolver.m:498
                A[nr,nc]=b
# fastsolver.m:498
                C[b,1]=nr
# fastsolver.m:499
                C[b,2]=nc
# fastsolver.m:499
                j=j + 1
# fastsolver.m:500

        if sc_old <= sc:
            num_fail=num_fail + 1
# fastsolver.m:504
            if num_fail == max_fail:
                break
        else:
            num_fail=0
# fastsolver.m:509
    
    #####
    
@function
def TLL79(aInit=None,aFinal=None,wt=None,optmove=None,optscore=None,*args,**kwargs):
    varargin = TLL79.varargin
    nargin = TLL79.nargin

    o=matlabarray(cat([3],[4],[1],[2]))
# fastsolver.m:514
    move,score=solverA(aInit,aFinal,wt,optmove,optscore,0,nargout=2)
# fastsolver.m:515
    if ((score - optscore) > 20) or ((length(move) - optmove) > 3):
        mv2,score2=solverA(aFinal,aInit,wt,optmove,optscore,0,nargout=2)
# fastsolver.m:517
        if score > score2:
            move=mv2[end():- 1:1,:]
# fastsolver.m:519
            score=copy(score2)
# fastsolver.m:520
            move[:,2]=o[move[:,2]]
# fastsolver.m:521
        if ((score - optscore) > 20) or ((length(move) - optmove) > 3):
            a=copy(aInit)
# fastsolver.m:524
            midmoves=floor(size(move,1) / 2)
# fastsolver.m:525
            I=matlabarray(cat(0,1,0,- 1))
# fastsolver.m:526
            J=matlabarray(cat(1,0,- 1,0))
# fastsolver.m:527
            for k in arange(1,midmoves).reshape(-1):
                row,col=find(a == move[k,1],nargout=2)
# fastsolver.m:529
                a[row,col]=0
# fastsolver.m:530
                row=row + I[move[k,2]]
# fastsolver.m:531
                col=col + J[move[k,2]]
# fastsolver.m:532
                a[row,col]=move[k,1]
# fastsolver.m:533
            oldscore1=sum(wt[move[1:midmoves,1]])
# fastsolver.m:535
            oldscore2=sum(wt[move[midmoves + 1:size(move,1),1]])
# fastsolver.m:536
            newmove,newscore=solverA(aInit,a,wt,optmove,optscore,1,nargout=2)
# fastsolver.m:537
            newmove2,newscore2=solverA(a,aFinal,wt,optmove,optscore,1,nargout=2)
# fastsolver.m:538
            newscore1=sum(wt[newmove[:,1]])
# fastsolver.m:539
            newscore2=sum(wt[newmove2[:,1]])
# fastsolver.m:540
            oldmove=copy(move)
# fastsolver.m:541
            if (newscore1 < oldscore1):
                move=copy(newmove)
# fastsolver.m:543
                if (newscore2 < oldscore2):
                    for itr in arange(1,size(newmove2,1)).reshape(-1):
                        move[end() + 1,cat(1,2)]=cat(newmove2[itr,1],newmove2[itr,2])
# fastsolver.m:546
                else:
                    for itr in arange(midmoves + 1,size(oldmove,1)).reshape(-1):
                        move[end() + 1,cat(1,2)]=cat(oldmove[itr,1],oldmove[itr,2])
# fastsolver.m:550
            else:
                if (newscore2 < oldscore2):
                    move=matlabarray([])
# fastsolver.m:555
                    for itr in arange(1,midmoves).reshape(-1):
                        move[end() + 1,cat(1,2)]=cat(oldmove[itr,1],oldmove[itr,2])
# fastsolver.m:557
                    for itr in arange(1,size(newmove2,1)).reshape(-1):
                        move[end() + 1,cat(1,2)]=cat(newmove2[itr,1],newmove2[itr,2])
# fastsolver.m:560
    
    ##################
    
@function
def solverA(aInit=None,aFinal=None,wt=None,optmove=None,optscore=None,half=None,*args,**kwargs):
    varargin = solverA.varargin
    nargin = solverA.nargin

    global Dperfect
    Dperfect=copy(optmove)
# fastsolver.m:569
    if half:
        optmove=1e+20
# fastsolver.m:569
        optscore=1e+20
# fastsolver.m:569
    
    move,isPerfect,score=solver2(aInit,aFinal,wt,1111,optscore,nargout=3)
# fastsolver.m:570
    if logical_not(isPerfect):
        move1=solver1(aInit,aFinal,wt,score)
# fastsolver.m:572
        if (logical_not(isempty(move1))):
            isPerfect=length(move1) == Dperfect
# fastsolver.m:574
            score1=sum(wt[move1[:,1]])
# fastsolver.m:575
            if score1 < score:
                score=copy(score1)
# fastsolver.m:577
                move=copy(move1)
# fastsolver.m:577
    
    if isPerfect:
        score=0
# fastsolver.m:581
    
    ##################
    
@function
def solver1(aInit=None,aFinal=None,wt=None,bscore=None,*args,**kwargs):
    varargin = solver1.varargin
    nargin = solver1.nargin

    COUNTERS=0
# fastsolver.m:584
    allmoves=matlabarray([])
# fastsolver.m:585
    wtinitori=copy(wt)
# fastsolver.m:586
    sortbydist=0
# fastsolver.m:587
    sortbyweight=1
# fastsolver.m:588
    minw=10000
# fastsolver.m:589
    if sortbyweight:
        tmp,inds=sort(- wt,nargout=2)
# fastsolver.m:591
        wtinit=copy(wtinitori)
# fastsolver.m:592
    
    lenwt=length(wt)
# fastsolver.m:594
    absx=zeros(lenwt,1)
# fastsolver.m:595
    absy=copy(absx)
# fastsolver.m:596
    for index in arange(1,lenwt).reshape(-1):
        hvix,hviy=find(aInit == index,nargout=2)
# fastsolver.m:598
        hvfx,hvfy=find(aFinal == index,nargout=2)
# fastsolver.m:599
        absx[index]=abs(hvix - hvfx)
# fastsolver.m:600
        absy[index]=abs(hviy - hvfy)
# fastsolver.m:601
    
    if sortbydist:
        dist=abs(absx) + abs(absy)
# fastsolver.m:604
        tmp,inds=sort(- dist,nargout=2)
# fastsolver.m:605
        wtinit=copy(wtinitori)
# fastsolver.m:606
    
    for index in arange(1,length(inds)).reshape(-1):
        hv=inds[index]
# fastsolver.m:609
        hvix,hviy=find(aInit == hv,nargout=2)
# fastsolver.m:610
        hvfx,hvfy=find(aFinal == hv,nargout=2)
# fastsolver.m:611
        dist=abs(hvix - hvfx) + abs(hviy - hvfy)
# fastsolver.m:612
        wt[hv]=- Inf
# fastsolver.m:613
        wtinit[hv]=wtinit[hv] + minw + 10000
# fastsolver.m:614
        move,cost,aInit,COUNTERS=movefrompos(hv,cat(hvix,hviy),cat(hvfx,hvfy),aInit,aFinal,wtinit,1,dist + 5,COUNTERS,nargout=4)
# fastsolver.m:615
        if COUNTERS > 500:
            move=matlabarray([])
# fastsolver.m:616
            return move
        if isinf(cost) or isempty(move):
            pass
        else:
            move=matlabarray(cat(move[:,1],dot(3,abs(move[:,4])) - move[:,4] + dot(2,abs(move[:,5])) - move[:,5]))
# fastsolver.m:619
            allmoves=matlabarray(cat([allmoves],[move]))
# fastsolver.m:620
            if (sum(wtinitori[allmoves[:,1]]) > bscore):
                move=matlabarray([])
# fastsolver.m:622
                return move
    
    count=1
# fastsolver.m:627
    oldinds=matlabarray([])
# fastsolver.m:628
    while logical_not(isequal(aFinal,aInit)):

        sortbyweight=copy(sortbydist)
# fastsolver.m:630
        sortbydist=logical_not(sortbyweight)
# fastsolver.m:631
        if sortbyweight:
            inds=find(aFinal != aInit)
# fastsolver.m:633
            inds=aFinal[inds]
# fastsolver.m:634
            inds=inds[inds > 0]
# fastsolver.m:635
            tmp,indices=sort(- wt[inds],nargout=2)
# fastsolver.m:636
            inds=inds[indices]
# fastsolver.m:637
        if sortbydist:
            for index in arange(1,length(wt)).reshape(-1):
                hvix,hviy=find(aInit == index,nargout=2)
# fastsolver.m:641
                hvfx,hvfy=find(aFinal == index,nargout=2)
# fastsolver.m:642
                dist[index]=abs(hvix - hvfx) + abs(hviy - hvfy)
# fastsolver.m:643
            tmp,inds=sort(- dist,nargout=2)
# fastsolver.m:645
            firstzeros=find(tmp == 0)
# fastsolver.m:646
            inds[firstzeros:end()]=[]
# fastsolver.m:647
        wtinit=copy(wtinitori)
# fastsolver.m:649
        notmove=setdiff(oldinds,inds)
# fastsolver.m:650
        for hv in arange(1,length(notmove)).reshape(-1):
            wtinit[notmove[hv]]=wtinit[notmove[hv]] + minw + 10000
# fastsolver.m:652
        for hind in arange(1,length(inds)).reshape(-1):
            hv=inds[hind]
# fastsolver.m:655
            hvix,hviy=find(aInit == hv,nargout=2)
# fastsolver.m:656
            hvfx,hvfy=find(aFinal == hv,nargout=2)
# fastsolver.m:657
            dist=abs(hvix - hvfx) + abs(hviy - hvfy)
# fastsolver.m:658
            wtinit[hv]=wtinit[hv] + minw + 10000
# fastsolver.m:659
            move,cost,aInit,COUNTERS=movefrompos(hv,cat(hvix,hviy),cat(hvfx,hvfy),aInit,aFinal,wtinit,1,dist + 6,COUNTERS,nargout=4)
# fastsolver.m:660
            if COUNTERS > 500:
                move=matlabarray([])
# fastsolver.m:661
                return move
            if hind > 1:
                wtinit[inds[hind - 1]]=wtinit[inds[hind - 1]] - minw - 10000
# fastsolver.m:663
            if isinf(cost) or isempty(move):
                pass
            else:
                move=matlabarray(cat(move[:,1],dot(3,abs(move[:,4])) - move[:,4] + dot(2,abs(move[:,5])) - move[:,5]))
# fastsolver.m:667
                allmoves=matlabarray(cat([allmoves],[move]))
# fastsolver.m:668
                if (sum(wtinitori[allmoves[:,1]]) > bscore):
                    move=matlabarray([])
# fastsolver.m:670
                    return move
        oldinds=copy(inds)
# fastsolver.m:675
        count=count + 1
# fastsolver.m:676

    
    move=copy(allmoves)
# fastsolver.m:678
    ##################
    
@function
def movefrompos(item=None,pinit=None,pfin=None,curpos=None,finpos=None,wt=None,strategy=None,recur=None,COUNTERS=None,*args,**kwargs):
    varargin = movefrompos.varargin
    nargin = movefrompos.nargin

    COUNTERS=COUNTERS + 1
# fastsolver.m:681
    cost=0
# fastsolver.m:682
    curposnew=copy(curpos)
# fastsolver.m:683
    if isequal(pinit,pfin):
        move=matlabarray([])
# fastsolver.m:684
        return move,cost,curposnew,COUNTERS
    
    if recur == 0:
        move=matlabarray([])
# fastsolver.m:685
        cost=0
# fastsolver.m:685
        return move,cost,curposnew,COUNTERS
    
    diffx=pfin[1] - pinit[1]
# fastsolver.m:686
    diffy=pfin[2] - pinit[2]
# fastsolver.m:687
    dirx=sign(diffx)
# fastsolver.m:688
    diry=sign(diffy)
# fastsolver.m:689
    cost=copy(Inf)
# fastsolver.m:690
    if (strategy < 10 and abs(diffx) > abs(diffy)) or (strategy == 11 and abs(diffx) < abs(diffy)):
        if dirx and curpos[pinit[1] + dirx,pinit[2]] <= 0:
            move,cost,curposnew,COUNTERS=onemove(item,pinit,cat(dirx,0),pfin,curpos,finpos,wt,strategy,recur,COUNTERS,nargout=4)
# fastsolver.m:693
            if COUNTERS > 500:
                move=matlabarray([])
# fastsolver.m:693
                return move,cost,curposnew,COUNTERS
            if length(move) > 0 and cost / size(move,1) == mod(wt[curpos[pinit[1],pinit[2]]],10000):
                return move,cost,curposnew,COUNTERS
        if diry and curpos[pinit[1],pinit[2] + diry] <= 0:
            move1,cost1,curposnew1,COUNTERS=onemove(item,pinit,cat(0,diry),pfin,curpos,finpos,wt,strategy,recur,COUNTERS,nargout=4)
# fastsolver.m:697
            if COUNTERS > 500:
                move=matlabarray([])
# fastsolver.m:697
                return move,cost,curposnew,COUNTERS
            if length(move1) > 0 and cost1 / size(move1,1) == mod(wt[curpos[pinit[1],pinit[2]]],10000):
                move=copy(move1)
# fastsolver.m:699
                cost=copy(cost1)
# fastsolver.m:700
                curposnew=copy(curposnew1)
# fastsolver.m:701
                return move,cost,curposnew,COUNTERS
            if cost1 < cost:
                move=copy(move1)
# fastsolver.m:705
                cost=copy(cost1)
# fastsolver.m:706
                curposnew=copy(curposnew1)
# fastsolver.m:707
    else:
        if diry and curpos[pinit[1],pinit[2] + diry] <= 0:
            move,cost,curposnew,COUNTERS=onemove(item,pinit,cat(0,diry),pfin,curpos,finpos,wt,strategy,recur,COUNTERS,nargout=4)
# fastsolver.m:712
            if COUNTERS > 500:
                move=matlabarray([])
# fastsolver.m:712
                return move,cost,curposnew,COUNTERS
            if length(move) > 0 and cost / size(move,1) == mod(wt[curpos[pinit[1],pinit[2]]],10000):
                return move,cost,curposnew,COUNTERS
        if dirx and curpos[pinit[1] + dirx,pinit[2]] <= 0:
            move1,cost1,curposnew1,COUNTERS=onemove(item,pinit,cat(dirx,0),pfin,curpos,finpos,wt,strategy,recur,COUNTERS,nargout=4)
# fastsolver.m:716
            if COUNTERS > 500:
                move=matlabarray([])
# fastsolver.m:716
                return move,cost,curposnew,COUNTERS
            if length(move1) > 0 and cost1 / size(move1,1) == mod(wt[curpos[pinit[1],pinit[2]]],10000):
                move=copy(move1)
# fastsolver.m:718
                cost=copy(cost1)
# fastsolver.m:719
                curposnew=copy(curposnew1)
# fastsolver.m:720
                return move,cost,curposnew,COUNTERS
            if cost1 < cost:
                move=copy(move1)
# fastsolver.m:724
                cost=copy(cost1)
# fastsolver.m:725
                curposnew=copy(curposnew1)
# fastsolver.m:726
    
    if isinf(cost) or cost == 0:
        if dirx and diry and curpos[pinit[1],pinit[2] + diry] > 0 and curpos[pinit[1] + dirx,pinit[2]] > 0:
            move1,cost1,curposnew1,COUNTERS=onemove(item,pinit,cat(dirx,0),pfin,curpos,finpos,wt,strategy,recur,COUNTERS,nargout=4)
# fastsolver.m:732
            if COUNTERS > 500:
                move=matlabarray([])
# fastsolver.m:732
                return move,cost,curposnew,COUNTERS
            if cost1 < cost:
                move=copy(move1)
# fastsolver.m:734
                cost=copy(cost1)
# fastsolver.m:735
                curposnew=copy(curposnew1)
# fastsolver.m:736
            move1,cost1,curposnew1,COUNTERS=onemove(item,pinit,cat(0,diry),pfin,curpos,finpos,wt,strategy,recur,COUNTERS,nargout=4)
# fastsolver.m:738
            if COUNTERS > 500:
                move=matlabarray([])
# fastsolver.m:738
                return move,cost,curposnew,COUNTERS
            if cost1 < cost:
                move=copy(move1)
# fastsolver.m:740
                cost=copy(cost1)
# fastsolver.m:741
                curposnew=copy(curposnew1)
# fastsolver.m:742
        else:
            if dirx and curpos[pinit[1] + dirx,pinit[2]] > 0:
                move1,cost1,curposnew1,COUNTERS=onemove(item,pinit,cat(dirx,0),pfin,curpos,finpos,wt,strategy,recur,COUNTERS,nargout=4)
# fastsolver.m:746
                if COUNTERS > 500:
                    move=matlabarray([])
# fastsolver.m:746
                    return move,cost,curposnew,COUNTERS
                if cost1 < cost:
                    move=copy(move1)
# fastsolver.m:748
                    cost=copy(cost1)
# fastsolver.m:749
                    curposnew=copy(curposnew1)
# fastsolver.m:750
            if diry and curpos[pinit[1],pinit[2] + diry] > 0:
                move1,cost1,curposnew1,COUNTERS=onemove(item,pinit,cat(0,diry),pfin,curpos,finpos,wt,strategy,recur,COUNTERS,nargout=4)
# fastsolver.m:754
                if COUNTERS > 500:
                    move=matlabarray([])
# fastsolver.m:754
                    return move,cost,curposnew,COUNTERS
                if cost1 < cost:
                    move=copy(move1)
# fastsolver.m:756
                    cost=copy(cost1)
# fastsolver.m:757
                    curposnew=copy(curposnew1)
# fastsolver.m:758
    
    if isinf(cost) and recur > 1 and abs(strategy) < 5:
        mv=matlabarray(cat(dirx,diry))
# fastsolver.m:764
        mv1=abs(mv) - 1
# fastsolver.m:765
        if any(mv1):
            mv2=abs(mv1)
# fastsolver.m:767
            mv3=- mv
# fastsolver.m:768
            ok3=1
# fastsolver.m:769
        else:
            mv1=matlabarray(cat(- mv[1],0))
# fastsolver.m:771
            mv2=matlabarray(cat(0,- mv[2]))
# fastsolver.m:772
            ok3=0
# fastsolver.m:773
        sz=size(curpos)
# fastsolver.m:775
        strategy=strategy + dot(sign(strategy),1)
# fastsolver.m:776
        if all(pinit + mv1 > 0) and all(pinit + mv1 <= sz) and logical_not(curpos[pinit[1] + mv1[1],pinit[2] + mv1[2]]):
            move1,cost1,curposnew1,COUNTERS=onemove(item,pinit,mv1,pfin,curpos,finpos,wt,strategy,recur - 1,COUNTERS,nargout=4)
# fastsolver.m:778
            if COUNTERS > 500:
                move=matlabarray([])
# fastsolver.m:778
                return move,cost,curposnew,COUNTERS
            if cost1 < cost:
                move=copy(move1)
# fastsolver.m:780
                cost=copy(cost1)
# fastsolver.m:781
                curposnew=copy(curposnew1)
# fastsolver.m:782
        if all(pinit + mv2 > 0) and all(pinit + mv2 <= sz) and logical_not(curpos[pinit[1] + mv2[1],pinit[2] + mv2[2]]):
            move1,cost1,curposnew1,COUNTERS=onemove(item,pinit,mv2,pfin,curpos,finpos,wt,strategy,recur - 1,COUNTERS,nargout=4)
# fastsolver.m:786
            if COUNTERS > 500:
                move=matlabarray([])
# fastsolver.m:786
                return move,cost,curposnew,COUNTERS
            if cost1 < cost:
                move=copy(move1)
# fastsolver.m:788
                cost=copy(cost1)
# fastsolver.m:789
                curposnew=copy(curposnew1)
# fastsolver.m:790
        if ok3 and all(pinit + mv3 > 0) and all(pinit + mv3 <= sz) and logical_not(curpos[pinit[1] + mv3[1],pinit[2] + mv3[2]]):
            move1,cost1,curposnew1,COUNTERS=onemove(item,pinit,mv3,pfin,curpos,finpos,wt,strategy,recur - 1,COUNTERS,nargout=4)
# fastsolver.m:794
            if COUNTERS > 500:
                move=matlabarray([])
# fastsolver.m:794
                return move,cost,curposnew,COUNTERS
            if cost1 < cost:
                move=copy(move1)
# fastsolver.m:796
                cost=copy(cost1)
# fastsolver.m:797
                curposnew=copy(curposnew1)
# fastsolver.m:798
        if all(pinit + mv1 > 0) and all(pinit + mv1 <= sz) and curpos[pinit[1] + mv1[1],pinit[2] + mv1[2]] > 0:
            move1,cost1,curposnew1,COUNTERS=onemove(item,pinit,mv1,pfin,curpos,finpos,wt,strategy,recur - 1,COUNTERS,nargout=4)
# fastsolver.m:802
            if COUNTERS > 500:
                move=matlabarray([])
# fastsolver.m:802
                return move,cost,curposnew,COUNTERS
            if cost1 < cost:
                move=copy(move1)
# fastsolver.m:804
                cost=copy(cost1)
# fastsolver.m:805
                curposnew=copy(curposnew1)
# fastsolver.m:806
        if all(pinit + mv2 > 0) and all(pinit + mv2 <= sz) and curpos[pinit[1] + mv2[1],pinit[2] + mv2[2]] > 0:
            move1,cost1,curposnew1,COUNTERS=onemove(item,pinit,mv2,pfin,curpos,finpos,wt,strategy,recur - 1,COUNTERS,nargout=4)
# fastsolver.m:810
            if COUNTERS > 500:
                move=matlabarray([])
# fastsolver.m:810
                return move,cost,curposnew,COUNTERS
            if cost1 < cost:
                move=copy(move1)
# fastsolver.m:812
                cost=copy(cost1)
# fastsolver.m:813
                curposnew=copy(curposnew1)
# fastsolver.m:814
        if ok3 and all(pinit + mv3 > 0) and all(pinit + mv3 <= sz) and curpos[pinit[1] + mv3[1],pinit[2] + mv3[2]] > 0:
            move1,cost1,curposnew1,COUNTERS=onemove(item,pinit,mv3,pfin,curpos,finpos,wt,strategy,recur - 1,COUNTERS,nargout=4)
# fastsolver.m:818
            if COUNTERS > 500:
                move=matlabarray([])
# fastsolver.m:818
                return move,cost,curposnew,COUNTERS
            if cost1 < cost:
                move=copy(move1)
# fastsolver.m:820
                cost=copy(cost1)
# fastsolver.m:821
                curposnew=copy(curposnew1)
# fastsolver.m:822
    
    if isinf(cost):
        move=matlabarray([])
# fastsolver.m:828
        curposnew=copy(curpos)
# fastsolver.m:829
    
    ##################
    
@function
def onemove(item=None,pinit=None,movedir=None,pfin=None,curpos=None,finpos=None,wt=None,strategy=None,recur=None,COUNTERS=None,*args,**kwargs):
    varargin = onemove.varargin
    nargin = onemove.nargin

    COUNTERS=COUNTERS + 1
# fastsolver.m:833
    move3=0
# fastsolver.m:834
    curcost=mod(wt[curpos[pinit[1],pinit[2]]],10000)
# fastsolver.m:835
    costnew3=0
# fastsolver.m:836
    newpos=pinit + movedir
# fastsolver.m:837
    if curpos[newpos[1],newpos[2]] > 0:
        if wt[curpos[newpos[1],newpos[2]]] > 8000:
            cost=copy(Inf)
# fastsolver.m:840
            move=matlabarray([])
# fastsolver.m:841
            return move,cost,curpos,COUNTERS
        if wt[curpos[newpos[1],newpos[2]]] > dot(2,curcost) and recur > 0 and strategy > 0:
            tmppos1=abs(movedir) - 1 + pinit
# fastsolver.m:845
            tmppos2=abs(movedir) - 1 + pinit
# fastsolver.m:846
            tmppos3=movedir + tmppos1
# fastsolver.m:847
            tmppos4=movedir + tmppos2
# fastsolver.m:848
            sz=size(curpos)
# fastsolver.m:849
            wt2=matlabarray(cat([0],[wt]))
# fastsolver.m:850
            curpos2=copy(curpos)
# fastsolver.m:851
            curpos2[curpos2 < 0]=0
# fastsolver.m:852
            curpos2=curpos2 + 1
# fastsolver.m:853
            tmpcost=matlabarray(cat(Inf,Inf))
# fastsolver.m:854
            if all(tmppos1 > 0) and all(tmppos1 <= sz):
                if all(tmppos3 > 0) and all(tmppos3 <= sz):
                    tmpcost[1]=wt2[curpos2[tmppos1[1],tmppos1[2]]] + wt2[curpos2[tmppos1[1],tmppos1[2]]] + dot(2,curcost)
# fastsolver.m:857
            tmpcost[2]=tmpcost[1]
# fastsolver.m:860
            if tmpcost[2] < wt[curpos[newpos[1],newpos[2]]]:
                move3,costnew3,curpostmp,COUNTERS=onemove(item,pinit,tmppos2 - pinit,pfin,curpos,finpos,wt,strategy,- 1,COUNTERS,nargout=4)
# fastsolver.m:862
                if logical_not(isinf(costnew3)):
                    move4,costnew4,curpostmp,COUNTERS=onemove(item,tmppos2,tmppos4 - tmppos2,pfin,curpostmp,finpos,wt,strategy,- 1,COUNTERS,nargout=4)
# fastsolver.m:864
                    if logical_not(isinf(costnew4)):
                        move5,costnew5,curpostmp,COUNTERS=movefrompos(item,tmppos4,pfin,curpostmp,finpos,wt,- strategy,recur - 1,COUNTERS,nargout=4)
# fastsolver.m:866
                        cost=costnew3 + costnew4 + costnew5
# fastsolver.m:867
                        move=matlabarray(cat([move3],[move4],[move5]))
# fastsolver.m:868
                        if logical_not(isinf(cost)):
                            curpos=copy(curpostmp)
# fastsolver.m:869
                        return move,cost,curpos,COUNTERS
        newitem=curpos[newpos[1],newpos[2]]
# fastsolver.m:875
        pfin2=matlabarray([])
# fastsolver.m:876
        pfin2[1],pfin2[2]=find(finpos == newitem,nargout=2)
# fastsolver.m:877
        dirx2=sign(pfin2[1] - newpos[1])
# fastsolver.m:878
        diry2=sign(pfin2[2] - newpos[2])
# fastsolver.m:879
        wt[newitem]=wt[newitem] + 20000
# fastsolver.m:880
        if isequal(cat(dirx2,diry2),- movedir) or isequal(newpos,pfin2):
            costnew3=copy(Inf)
# fastsolver.m:882
        else:
            move3,costnew3,curposnew,COUNTERS=movefrompos(newitem,newpos,pfin2,curpos,finpos,wt,strategy,- 1,COUNTERS,nargout=4)
# fastsolver.m:884
            if costnew3 == 0:
                costnew3=copy(Inf)
# fastsolver.m:885
            if logical_not(isinf(costnew3)):
                curpos=copy(curposnew)
# fastsolver.m:886
        if isinf(costnew3):
            wtdir=matlabarray(cat(Inf,Inf,Inf,Inf))
# fastsolver.m:889
            diffpos=pfin - newpos
# fastsolver.m:890
            if (diffpos[1] and movedir[1]) or (diffpos[2] and movedir[2]):
                mv1=abs(movedir) - 1
# fastsolver.m:892
            else:
                if any(sign(diffpos) > 0):
                    mv1=abs(movedir) - 1
# fastsolver.m:895
                else:
                    mv1=abs(abs(movedir) - 1)
# fastsolver.m:897
            mv2=- mv1
# fastsolver.m:900
            mv3=copy(movedir)
# fastsolver.m:901
            sz=size(curpos)
# fastsolver.m:902
            if all(newpos + mv1 > 0) and all(newpos + mv1 <= sz):
                if curpos[newpos[1] + mv1[1],newpos[2] + mv1[2]] <= 0:
                    move3,costnew3,curpos,COUNTERS=movefrompos(newitem,newpos,newpos + mv1,curpos,finpos,wt,strategy,- 1,COUNTERS,nargout=4)
# fastsolver.m:906
                else:
                    wtdir[1]=wt[curpos[newpos[1] + mv1[1],newpos[2] + mv1[2]]]
# fastsolver.m:907
            if isinf(costnew3) and all(newpos + mv2 > 0) and all(newpos + mv2 <= sz):
                if curpos[newpos[1] + mv2[1],newpos[2] + mv2[2]] <= 0:
                    move3,costnew3,curpos,COUNTERS=movefrompos(newitem,newpos,newpos + mv2,curpos,finpos,wt,strategy,- 1,COUNTERS,nargout=4)
# fastsolver.m:912
                else:
                    wtdir[2]=wt[curpos[newpos[1] + mv2[1],newpos[2] + mv2[2]]]
# fastsolver.m:913
            if isinf(costnew3) and all(newpos + mv3 > 0) and all(newpos + mv3 <= sz):
                if curpos[newpos[1] + mv3[1],newpos[2] + mv3[2]] <= 0:
                    move3,costnew3,curpos,COUNTERS=movefrompos(newitem,newpos,newpos + mv3,curpos,finpos,wt,strategy,- 1,COUNTERS,nargout=4)
# fastsolver.m:918
                else:
                    wtdir[3]=wt[curpos[newpos[1] + mv3[1],newpos[2] + mv3[2]]]
# fastsolver.m:919
            if isinf(costnew3):
                wtdir,si=sort(wtdir,nargout=2)
# fastsolver.m:923
                for index in arange(1,length(wtdir)).reshape(-1):
                    if logical_not(isinf(wtdir[index])) and isinf(costnew3):
                        if 1 == si[index]:
                            move3,costnew3,curpos,COUNTERS=movefrompos(newitem,newpos,newpos + mv1,curpos,finpos,wt,strategy,- 1,COUNTERS,nargout=4)
# fastsolver.m:927
                        else:
                            if 2 == si[index]:
                                move3,costnew3,curpos,COUNTERS=movefrompos(newitem,newpos,newpos + mv2,curpos,finpos,wt,strategy,- 1,COUNTERS,nargout=4)
# fastsolver.m:928
                            else:
                                if 3 == si[index]:
                                    move3,costnew3,curpos,COUNTERS=movefrompos(newitem,newpos,newpos + mv3,curpos,finpos,wt,strategy,- 1,COUNTERS,nargout=4)
# fastsolver.m:929
        wt[newitem]=wt[newitem] - 20000
# fastsolver.m:935
        if isinf(costnew3) or costnew3 == 0:
            cost=copy(Inf)
# fastsolver.m:937
            move=matlabarray([])
# fastsolver.m:938
            return move,cost,curpos,COUNTERS
    
    if curpos[newpos[1],newpos[2]] == - item:
        cost=copy(Inf)
# fastsolver.m:943
        move=matlabarray([])
# fastsolver.m:944
        return move,cost,curpos,COUNTERS
    
    curpos[newpos[1],newpos[2]]=curpos[pinit[1],pinit[2]]
# fastsolver.m:947
    curpos[pinit[1],pinit[2]]=- curpos[pinit[1],pinit[2]]
# fastsolver.m:948
    if recur > 0:
        move2,costnew,curposnew,COUNTERS=movefrompos(item,pinit + movedir,pfin,curpos,finpos,wt,strategy,recur - 1,COUNTERS,nargout=4)
# fastsolver.m:950
    else:
        move2,costnew,curposnew,COUNTERS=movefrompos(item,pinit + movedir,pfin,curpos,finpos,wt,strategy,0,COUNTERS,nargout=4)
# fastsolver.m:952
    
    curpos=copy(curposnew)
# fastsolver.m:954
    if curpos[pinit[1],pinit[2]] < 0:
        curpos[pinit[1],pinit[2]]=0
# fastsolver.m:956
    
    if numel(move3) == 1 and isempty(move2):
        move=matlabarray(cat(item,pinit,movedir))
# fastsolver.m:959
    else:
        if numel(move3) == 1:
            move=matlabarray(cat([item,pinit,movedir],[move2]))
# fastsolver.m:961
        else:
            if isempty(move2):
                move=matlabarray(cat([move3],[item,pinit,movedir]))
# fastsolver.m:963
            else:
                move=matlabarray(cat([move3],[item,pinit,movedir],[move2]))
# fastsolver.m:965
    
    cost=costnew3 + costnew + curcost
# fastsolver.m:967
    ##################
    
@function
def solver2(ai=None,af=None,w=None,states=None,optscore=None,*args,**kwargs):
    varargin = solver2.varargin
    nargin = solver2.nargin

    global Ac,Ar,m2,Dperfect
    perfectMV=copy(false)
# fastsolver.m:971
    nBlocks=length(w)
# fastsolver.m:972
    m,n=size(ai,nargout=2)
# fastsolver.m:973
    m2=m + 2
# fastsolver.m:974
    n2=n + 2
# fastsolver.m:975
    A=- ones(m2,n2)
# fastsolver.m:976
    Af=copy(A)
# fastsolver.m:977
    A[2:m + 1,2:n + 1]=ai
# fastsolver.m:978
    Af[2:m + 1,2:n + 1]=af
# fastsolver.m:979
    Ac=arange(1,n2)
# fastsolver.m:980
    Ac=Ac[ones(m2,1),:]
# fastsolver.m:981
    Ar=(arange(1,m2)).T
# fastsolver.m:982
    Ar=Ar[:,ones(n2,1)]
# fastsolver.m:983
    Pi=copy(w)
# fastsolver.m:984
    Pf=copy(w)
# fastsolver.m:985
    for i in arange(m2 + 2,numel(A) - m2 - 1).reshape(-1):
        if A[i] > 0:
            Pi[A[i]]=i
# fastsolver.m:987
        if Af[i] > 0:
            Pf[Af[i]]=i
# fastsolver.m:988
    
    P=copy(Pi)
# fastsolver.m:990
    nmv=1
# fastsolver.m:991
    mv=zeros(300,2)
# fastsolver.m:992
    nNOK=sum(P != Pf)
# fastsolver.m:993
    Paths=zeros(m + n,nBlocks)
# fastsolver.m:994
    lPaths=copy(w)
# fastsolver.m:995
    fPaths=copy(w)
# fastsolver.m:996
    Pend=copy(w)
# fastsolver.m:997
    bOK=copy(w)
# fastsolver.m:998
    obs=zeros(nBlocks,2)
# fastsolver.m:999
    nmv0=0
# fastsolver.m:1000
    while nmv0 < nmv and nNOK:

        ravel[obs]=0
# fastsolver.m:1002
        nmv0=copy(nmv)
# fastsolver.m:1003
        for i in arange(1,nBlocks).reshape(-1):
            if P[i] == Pf[i]:
                lPaths[i]=0
# fastsolver.m:1006
                fPaths[i]=0
# fastsolver.m:1007
                bOK[i]=1
# fastsolver.m:1008
            else:
                P1,f1=SearchPath(A,P[i],Pf[i],nargout=2)
# fastsolver.m:1010
                if isempty(P1):
                    lPaths[i]=0
# fastsolver.m:1012
                    fPaths[i]=0
# fastsolver.m:1013
                    obs[i,1:length(f1)]=f1
# fastsolver.m:1014
                else:
                    if isempty(f1):
                        fPaths[i]=1
# fastsolver.m:1017
                    else:
                        fPaths[i]=0
# fastsolver.m:1019
                        obs[i,1:length(f1)]=f1
# fastsolver.m:1020
                    lPaths[i]=length(P1)
# fastsolver.m:1022
                    Paths[1:lPaths[i],i]=P1.T
# fastsolver.m:1023
                    Pend[i]=P1[end()]
# fastsolver.m:1024
                bOK[i]=0
# fastsolver.m:1026
        iP=find(logical_and(logical_not(bOK),lPaths))
# fastsolver.m:1029
        PCol=zeros(length(iP))
# fastsolver.m:1030
        L=lPaths[iP]
# fastsolver.m:1031
        for i in arange(1,length(iP)).reshape(-1):
            Pe=Pend[iP[i]]
# fastsolver.m:1033
            for j in arange(1,length(iP)).reshape(-1):
                if i != j:
                    lj=L[j]
# fastsolver.m:1036
                    PCol[i,j]=any(Paths[1:lj,iP[j]] == Pe)
# fastsolver.m:1037
        sPCol=sum(PCol,2)
# fastsolver.m:1041
        pOK=find(sPCol == 0)
# fastsolver.m:1042
        pNOK=find(sPCol != 0)
# fastsolver.m:1043
        if isempty(pOK):
            if length(pNOK) == 1:
                pOK[end() + 1]=pNOK
# fastsolver.m:1046
            else:
                if logical_not(isempty(pNOK)):
                    if length(pNOK) > 1 and any(fPaths[iP[pNOK]]):
                        pNOK[logical_not(fPaths[iP[pNOK]])]=[]
# fastsolver.m:1049
                    iNOK1=pNOK[find(sPCol[pNOK] == 1)]
# fastsolver.m:1051
                    for i in iNOK1.T.reshape(-1):
                        j=find(PCol[i,:])
# fastsolver.m:1054
                        jj=iP[j]
# fastsolver.m:1055
                        p=iP[i]
# fastsolver.m:1056
                        pe=Pend[p]
# fastsolver.m:1057
                        A[P[p]]=0
# fastsolver.m:1058
                        A[pe]=p
# fastsolver.m:1059
                        P1,f1=SearchPath(A,P[jj],Pf[jj],nargout=2)
# fastsolver.m:1060
                        A[P[p]]=p
# fastsolver.m:1061
                        A[pe]=0
# fastsolver.m:1062
                        if isempty(f1):
                            pOK[end() + 1]=i
# fastsolver.m:1064
                            break
        if length(pOK) > 1:
            obs1=abs(ravel(obs))
# fastsolver.m:1071
            temp=zeros(1,length(obs1))
# fastsolver.m:1072
            i=1
# fastsolver.m:1073
            q=0
# fastsolver.m:1074
            pOK1=copy(pOK)
# fastsolver.m:1075
            while i <= length(obs1):

                temp[obs1 == obs1[i]]=1
# fastsolver.m:1077
                if sum(temp) > 1:
                    j=find(obs1 == obs1[i])
# fastsolver.m:1079
                    obs1[j[2:end()]]=[]
# fastsolver.m:1080
                if any(obs1[i] == pOK):
                    q=1
# fastsolver.m:1083
                    j=find(obs1[i] == pOK)
# fastsolver.m:1084
                    pOK1[j]=0
# fastsolver.m:1085
                i=i + 1
# fastsolver.m:1087

            if q:
                pOK[pOK1 != 0]=[]
# fastsolver.m:1090
            if length(pOK) > 1 and any(fPaths[iP[pOK]]):
                pOK[logical_not(fPaths[iP[pOK]])]=[]
# fastsolver.m:1093
        j=1
# fastsolver.m:1096
        while j <= length(pOK):

            i=pOK[j]
# fastsolver.m:1098
            b=iP[i]
# fastsolver.m:1099
            k=arange(nmv + 1,nmv + L[i])
# fastsolver.m:1100
            mv[k,1]=b
# fastsolver.m:1101
            mv[k,2]=Paths[1:L[i],b]
# fastsolver.m:1102
            nmv=nmv + L[i]
# fastsolver.m:1103
            A[P[b]]=0
# fastsolver.m:1104
            A[Pend[b]]=b
# fastsolver.m:1105
            P[b]=Pend[b]
# fastsolver.m:1106
            if fPaths[b]:
                nNOK=nNOK - 1
# fastsolver.m:1108
            j=j + 1
# fastsolver.m:1110


    
    P=copy(Pi)
# fastsolver.m:1113
    for i in arange(2,nmv).reshape(-1):
        b=mv[i]
# fastsolver.m:1115
        p=mv[i,2]
# fastsolver.m:1116
        dp=p - P[b]
# fastsolver.m:1117
        if dp == 1:
            mv[i,2]=2
# fastsolver.m:1119
        else:
            if dp == - 1:
                mv[i,2]=4
# fastsolver.m:1121
            else:
                if dp == m2:
                    mv[i,2]=1
# fastsolver.m:1123
                else:
                    mv[i,2]=3
# fastsolver.m:1125
        P[b]=p
# fastsolver.m:1127
    
    mv=mv[2:nmv,:]
# fastsolver.m:1129
    if nNOK:
        rand('state',states)
        mv2=matlabarray(cat([mv],[Faster10IntReps2(A[2:m + 1,2:n + 1],af,w)]))
# fastsolver.m:1132
        score=sum(w[mv2[:,1]])
# fastsolver.m:1133
        if abs(score - optscore) < 5:
            perfectMV=(Dperfect == size(mv2,1))
# fastsolver.m:1134
            mv=copy(mv2)
# fastsolver.m:1134
            return mv,perfectMV,score
        if abs(score - optscore) > 9000:
            perfectMV=(Dperfect == size(mv2,1))
# fastsolver.m:1135
            mv=copy(mv2)
# fastsolver.m:1135
            return mv,perfectMV,score
        rand('state',dot(states,2))
        mv1=matlabarray(cat([mv],[Faster10IntReps2(A[2:m + 1,2:n + 1],af,w)]))
# fastsolver.m:1137
        score1=sum(w[mv1[:,1]])
# fastsolver.m:1138
        if score1 == score:
            mv=copy(mv2)
# fastsolver.m:1140
            score=copy(score1)
# fastsolver.m:1141
        else:
            if score1 < score:
                mv2=copy(mv1)
# fastsolver.m:1144
                score=copy(score1)
# fastsolver.m:1145
            if abs(score - optscore) < 15:
                perfectMV=(Dperfect == size(mv2,1))
# fastsolver.m:1147
                mv=copy(mv2)
# fastsolver.m:1147
                return mv,perfectMV,score
            rand('state',dot(states,371))
            mv1=matlabarray(cat([mv],[Faster10IntReps2(A[2:m + 1,2:n + 1],af,w)]))
# fastsolver.m:1149
            score1=sum(w[mv1[:,1]])
# fastsolver.m:1150
            if score1 == score:
                mv=copy(mv2)
# fastsolver.m:1151
                perfectMV=Dperfect == size(mv,1)
# fastsolver.m:1151
                return mv,perfectMV,score
            if score1 < score:
                mv2=copy(mv1)
# fastsolver.m:1153
                score=copy(score1)
# fastsolver.m:1153
            if abs(score - optscore) < 500:
                perfectMV=(Dperfect == size(mv2,1))
# fastsolver.m:1155
                mv=copy(mv2)
# fastsolver.m:1155
                return mv,perfectMV,score
            rand('state',dot(states,173))
            mv1=matlabarray(cat([mv],[Faster10IntReps2(A[2:m + 1,2:n + 1],af,w)]))
# fastsolver.m:1157
            score1=sum(w[mv1[:,1]])
# fastsolver.m:1158
            if score1 < score:
                mv2=copy(mv1)
# fastsolver.m:1160
                score=copy(score1)
# fastsolver.m:1160
            mv=copy(mv2)
# fastsolver.m:1162
        perfectMV=Dperfect == size(mv,1)
# fastsolver.m:1164
    else:
        score=sum(w[mv[:,1]])
# fastsolver.m:1166
        perfectMV=1
# fastsolver.m:1167
    
    ##################
    
@function
def SearchPath(A=None,p1=None,p2=None,*args,**kwargs):
    varargin = SearchPath.varargin
    nargin = SearchPath.nargin

    global Ac,Ar,m2
    c1=Ac[p1]
# fastsolver.m:1172
    c2=Ac[p2]
# fastsolver.m:1172
    r1=Ar[p1]
# fastsolver.m:1173
    r2=Ar[p2]
# fastsolver.m:1173
    stopped=matlabarray([])
# fastsolver.m:1174
    P=matlabarray([])
# fastsolver.m:1175
    if r1 > r2:
        d_r=- 1
# fastsolver.m:1177
    else:
        if r1 < r2:
            d_r=1
# fastsolver.m:1179
        else:
            d_r=0
# fastsolver.m:1181
    
    if c1 > c2:
        d_c=- 1
# fastsolver.m:1184
    else:
        if c1 < c2:
            d_c=1
# fastsolver.m:1186
        else:
            d_c=0
# fastsolver.m:1188
    
    n=0
# fastsolver.m:1190
    p=copy(p1)
# fastsolver.m:1191
    if d_r == 0 or d_c == 0:
        while p != p2:

            np=p + dot(d_c,m2) + d_r
# fastsolver.m:1194
            if A[np]:
                stopped=A[np]
# fastsolver.m:1196
                break
            p=copy(np)
# fastsolver.m:1199
            n=n + 1
# fastsolver.m:1200
            P[n]=p
# fastsolver.m:1201

    else:
        Ah=copy(A)
# fastsolver.m:1204
        c=copy(c2)
# fastsolver.m:1205
        i1=p2 - d_r
# fastsolver.m:1206
        r_1=r2 - d_r
# fastsolver.m:1207
        while c != c1:

            r=copy(r_1)
# fastsolver.m:1209
            r_1=0
# fastsolver.m:1210
            i2=copy(i1)
# fastsolver.m:1211
            while r != r1:

                if Ah[i2]:
                    Afil=- Ah[i2]
# fastsolver.m:1214
                    if r == r2:
                        r_1=copy(r2)
# fastsolver.m:1216
                        i1=i2 - dot(d_c,m2)
# fastsolver.m:1217
                    else:
                        r_1=r + d_r
# fastsolver.m:1219
                        i1=i2 - dot(d_c,m2) + d_r
# fastsolver.m:1220
                    r=r - d_r
# fastsolver.m:1222
                    i2=i2 - d_r
# fastsolver.m:1223
                    while r != r1:

                        if Ah[i2] == 0:
                            Ah[i2]=Afil
# fastsolver.m:1226
                        r=r - d_r
# fastsolver.m:1228
                        i2=i2 - d_r
# fastsolver.m:1229

                    if Ah[i2] == 0:
                        Ah[i2]=Afil
# fastsolver.m:1232
                    break
                r=r - d_r
# fastsolver.m:1236
                i2=i2 - d_r
# fastsolver.m:1237

            if r_1 == 0 and Ah[i2]:
                i1=i2 - dot(d_c,m2) + d_r
# fastsolver.m:1240
                r_1=r + d_r
# fastsolver.m:1241
            c=c - d_c
# fastsolver.m:1243
            if r_1 == 0:
                break

        r=copy(r2)
# fastsolver.m:1248
        i1=p2 - dot(d_c,m2)
# fastsolver.m:1249
        c_1=c2 - d_c
# fastsolver.m:1250
        while r != r1:

            c=copy(c_1)
# fastsolver.m:1252
            c_1=0
# fastsolver.m:1253
            i2=copy(i1)
# fastsolver.m:1254
            while c != c1:

                if Ah[i2]:
                    if Ah[i2] < 0:
                        Afil=Ah[i2]
# fastsolver.m:1258
                    else:
                        Afil=- Ah[i2]
# fastsolver.m:1260
                    if c == c2:
                        c_1=copy(c2)
# fastsolver.m:1263
                        i1=i2 - d_r
# fastsolver.m:1264
                    else:
                        c_1=c + d_c
# fastsolver.m:1266
                        i1=i2 - d_r + dot(d_c,m2)
# fastsolver.m:1267
                    c=c - d_c
# fastsolver.m:1269
                    i2=i2 - dot(d_c,m2)
# fastsolver.m:1270
                    while c != c1:

                        if Ah[i2] == 0:
                            Ah[i2]=Afil
# fastsolver.m:1273
                        c=c - d_c
# fastsolver.m:1275
                        i2=i2 - dot(d_c,m2)
# fastsolver.m:1276

                    if Ah[i2] == 0:
                        Ah[i2]=Afil
# fastsolver.m:1279
                    break
                c=c - d_c
# fastsolver.m:1283
                i2=i2 - dot(d_c,m2)
# fastsolver.m:1284

            if c_1 == 0 and Ah[i2]:
                i1=i2 - d_r + dot(d_c,m2)
# fastsolver.m:1287
                c_1=c + d_c
# fastsolver.m:1288
            r=r - d_r
# fastsolver.m:1290
            if c_1 == 0:
                break

        while p != p2:

            if c1 != c2 and Ah[p + dot(m2,d_c)] == 0:
                di=dot(m2,d_c)
# fastsolver.m:1297
                dc=copy(d_c)
# fastsolver.m:1298
                dr=0
# fastsolver.m:1299
            else:
                if r1 != r2 and Ah[p + d_r] == 0:
                    di=copy(d_r)
# fastsolver.m:1301
                    dc=0
# fastsolver.m:1302
                    dr=copy(d_r)
# fastsolver.m:1303
                else:
                    if c1 == c2:
                        stopped=Ah[p + d_r]
# fastsolver.m:1306
                    else:
                        if r1 == r2:
                            stopped=Ah[p + dot(m2,d_c)]
# fastsolver.m:1308
                        else:
                            stopped=matlabarray(cat(Ah[p + d_r],Ah[p + dot(m2,d_c)]))
# fastsolver.m:1310
                    break
            p=p + di
# fastsolver.m:1314
            n=n + 1
# fastsolver.m:1315
            P[n]=p
# fastsolver.m:1316
            r1=r1 + dr
# fastsolver.m:1317
            c1=c1 + dc
# fastsolver.m:1318

    
    ##################
    
@function
def Faster10IntReps2(init=None,final=None,wts=None,*args,**kwargs):
    varargin = Faster10IntReps2.varargin
    nargin = Faster10IntReps2.nargin

    global Dperfect
    numtimes=8
# fastsolver.m:1324
    if (max(size(init)) > 30) and max(size(wts)) / (dot(size(init,1),size(init,2))) > 0.25:
        numtimes=10
# fastsolver.m:1326
    else:
        if (max(size(init)) > 30):
            numtimes=7
# fastsolver.m:1328
        else:
            if (max(size(init)) < 11):
                numtimes=2
# fastsolver.m:1330
    
    bscore=1e+20
# fastsolver.m:1332
    for repcount in arange(1,numtimes).reshape(-1):
        movelist,c=matrixsolver(init,final,wts,nargout=2)
# fastsolver.m:1334
        bf=length(wts) + 1 + zeros(size(init) + 2)
# fastsolver.m:1335
        bf[2:end() - 1,2:end() - 1]=final
# fastsolver.m:1336
        tries=1
# fastsolver.m:1337
        maxtries=15
# fastsolver.m:1338
        while logical_not(isequal(c,bf)) and (tries < maxtries):

            randwts=rand(size(wts))
# fastsolver.m:1340
            addtomovelist,c=matrixsolver(c[2:end() - 1,2:end() - 1],final,randwts,nargout=2)
# fastsolver.m:1341
            movelist=matlabarray(cat([movelist],[addtomovelist]))
# fastsolver.m:1342
            tries=tries + 1
# fastsolver.m:1343

        if logical_not(isequal(c,bf)):
            movegoaltries=0
# fastsolver.m:1346
            while logical_not(isequal(c,bf)) and (movegoaltries < 20):

                problemboxes=c[c != logical_and(bf,c) != 0]
# fastsolver.m:1348
                openspots=find(c == 0)
# fastsolver.m:1349
                tempfinal=copy(bf)
# fastsolver.m:1350
                for i in arange(1,length(problemboxes)).reshape(-1):
                    cgind=find(bf == problemboxes[i])
# fastsolver.m:1352
                    tempfinal[cgind]=0
# fastsolver.m:1353
                    newind=ceil(dot(rand,length(openspots)))
# fastsolver.m:1354
                    tempfinal[openspots[newind]]=problemboxes[i]
# fastsolver.m:1355
                    openspots[newind]=[]
# fastsolver.m:1356
                randwts=rand(size(wts))
# fastsolver.m:1358
                addtomovelist,c=matrixsolver(c[2:end() - 1,2:end() - 1],tempfinal[2:end() - 1,2:end() - 1],randwts,nargout=2)
# fastsolver.m:1359
                movelist=matlabarray(cat([movelist],[addtomovelist]))
# fastsolver.m:1360
                movegoaltries=movegoaltries + 1
# fastsolver.m:1361
                aftermovegoaltries=0
# fastsolver.m:1362
                while logical_not(isequal(c,bf)) and aftermovegoaltries < 5:

                    randwts=rand(size(wts))
# fastsolver.m:1364
                    addtomovelist,c=matrixsolver(c[2:end() - 1,2:end() - 1],final,randwts,nargout=2)
# fastsolver.m:1365
                    movelist=matlabarray(cat([movelist],[addtomovelist]))
# fastsolver.m:1366
                    aftermovegoaltries=aftermovegoaltries + 1
# fastsolver.m:1367


        score=sum(wts[movelist[:,1]])
# fastsolver.m:1371
        if score < bscore:
            bmovelist=copy(movelist)
# fastsolver.m:1373
            if length(bmovelist) == Dperfect:
                return bmovelist
            bscore=copy(score)
# fastsolver.m:1375
    
    ##################
    
@function
def matrixsolver(init=None,final=None,wts=None,*args,**kwargs):
    varargin = matrixsolver.varargin
    nargin = matrixsolver.nargin

    biggermatrix=length(wts) + 1 + zeros(size(init) + 2)
# fastsolver.m:1380
    bi=copy(biggermatrix)
# fastsolver.m:1381
    bf=copy(bi)
# fastsolver.m:1382
    bi[2:end() - 1,2:end() - 1]=init
# fastsolver.m:1383
    bf[2:end() - 1,2:end() - 1]=final
# fastsolver.m:1384
    c=copy(bi)
# fastsolver.m:1385
    m,n=size(c,nargout=2)
# fastsolver.m:1386
    numboxes=length(wts)
# fastsolver.m:1387
    DNC,wtorder=sort(wts,nargout=2)
# fastsolver.m:1388
    movelist=zeros(0,2)
# fastsolver.m:1389
    for i in arange(1,numboxes).reshape(-1):
        cbn=wtorder[i]
# fastsolver.m:1391
        cr=0
# fastsolver.m:1392
        cc=0
# fastsolver.m:1392
        fr=0
# fastsolver.m:1392
        fc=0
# fastsolver.m:1392
        for j in arange(2,m - 1).reshape(-1):
            for k in arange(2,n - 1).reshape(-1):
                if c[j,k] == cbn:
                    cr=copy(j)
# fastsolver.m:1395
                    cc=copy(k)
# fastsolver.m:1395
                    if fr > 0:
                        break
                if bf[j,k] == cbn:
                    fr=copy(j)
# fastsolver.m:1396
                    fc=copy(k)
# fastsolver.m:1396
                    if cr > 0:
                        break
            if fr > 0 and cr > 0:
                break
        dr=fr - cr
# fastsolver.m:1400
        dc=fc - cc
# fastsolver.m:1401
        while dr != 0 or dc != 0:

            neighborhood=matlabarray(cat(c[cr,cc + 1],c[cr + 1,cc],c[cr,cc - 1],c[cr - 1,cc]))
# fastsolver.m:1403
            opendirs=find(logical_not(neighborhood))
# fastsolver.m:1404
            desireddirs=matlabarray([])
# fastsolver.m:1405
            if dr != 0:
                desireddirs[end() + 1]=- sign(dr) + 3
# fastsolver.m:1407
            if dc != 0:
                desireddirs[end() + 1]=- sign(dc) + 2
# fastsolver.m:1410
            pic=opendirs[ismember1(opendirs,desireddirs)]
# fastsolver.m:1412
            if logical_not(isempty(pic)):
                if length(pic) > 1:
                    if abs(dr) > abs(dc):
                        movedir=desireddirs[1]
# fastsolver.m:1416
                    else:
                        movedir=desireddirs[2]
# fastsolver.m:1418
                else:
                    movedir=copy(pic)
# fastsolver.m:1421
            else:
                ind=ceil(dot(rand,length(desireddirs)))
# fastsolver.m:1424
                boxtomove=neighborhood[desireddirs[ind]]
# fastsolver.m:1425
                if cellarray([1,3]) == desireddirs[ind]:
                    rcaxis=- 1
# fastsolver.m:1428
                else:
                    if cellarray([2,4]) == desireddirs[ind]:
                        rcaxis=1
# fastsolver.m:1430
                c,movelist,rejectflag=outoftheway(boxtomove,rcaxis,cbn,c,movelist,bf,nargout=3)
# fastsolver.m:1432
                ootwtries=1
# fastsolver.m:1433
                while rejectflag and ootwtries < 10:

                    c,movelist,rejectflag=outoftheway(boxtomove,rcaxis,cbn,c,movelist,bf,nargout=3)
# fastsolver.m:1435
                    ootwtries=ootwtries + 1
# fastsolver.m:1436

                movedir=desireddirs[ind]
# fastsolver.m:1438
            c[cr,cc]=0
# fastsolver.m:1440
            if 1 == movedir:
                cc=cc + 1
# fastsolver.m:1443
            else:
                if 2 == movedir:
                    cr=cr + 1
# fastsolver.m:1445
                else:
                    if 3 == movedir:
                        cc=cc - 1
# fastsolver.m:1447
                    else:
                        if 4 == movedir:
                            cr=cr - 1
# fastsolver.m:1449
            c[cr,cc]=cbn
# fastsolver.m:1451
            movelist[end() + 1,:]=cat(cbn,movedir)
# fastsolver.m:1452
            dr=fr - cr
# fastsolver.m:1453
            dc=fc - cc
# fastsolver.m:1454

    
    ##################
    
@function
def outoftheway(boxnumber=None,rcaxis=None,dontmovetheseboxes=None,c=None,movelist=None,bf=None,*args,**kwargs):
    varargin = outoftheway.varargin
    nargin = outoftheway.nargin

    c_in=copy(c)
# fastsolver.m:1459
    movelist_in=copy(movelist)
# fastsolver.m:1460
    rejectflag=0
# fastsolver.m:1461
    cr,cc=find(c == boxnumber,nargout=2)
# fastsolver.m:1462
    neighborhood=matlabarray(cat(c[cr,cc + 1],c[cr + 1,cc],c[cr,cc - 1],c[cr - 1,cc]))
# fastsolver.m:1463
    opendirs=find(logical_not(neighborhood))
# fastsolver.m:1464
    if isempty(opendirs):
        if - 1 == rcaxis:
            bettercandidates=neighborhood[cat(2,4)]
# fastsolver.m:1468
            worsecandidates=neighborhood[cat(1,3)]
# fastsolver.m:1469
        else:
            if 1 == rcaxis:
                bettercandidates=neighborhood[cat(1,3)]
# fastsolver.m:1471
                worsecandidates=neighborhood[cat(2,4)]
# fastsolver.m:1472
        wallnum=c[1,1]
# fastsolver.m:1474
        remainingcandidates=setdiff(bettercandidates,cat(dontmovetheseboxes,wallnum))
# fastsolver.m:1475
        if isempty(remainingcandidates):
            remainingcandidates=setdiff(worsecandidates,cat(dontmovetheseboxes,wallnum))
# fastsolver.m:1477
            if isempty(remainingcandidates):
                rejectflag=1
# fastsolver.m:1479
                c=copy(c_in)
# fastsolver.m:1480
                movelist=copy(movelist_in)
# fastsolver.m:1481
                return c,movelist,rejectflag
        if length(remainingcandidates) > 1:
            remainingcandidates=remainingcandidates[(rand > 0.515) + 1]
# fastsolver.m:1486
        c,movelist,rejectflag=outoftheway(remainingcandidates,- rcaxis,cat(dontmovetheseboxes,boxnumber),c,movelist,bf,nargout=3)
# fastsolver.m:1488
        if rejectflag:
            c=copy(c_in)
# fastsolver.m:1490
            movelist=copy(movelist_in)
# fastsolver.m:1491
            return c,movelist,rejectflag
        movedir=find(neighborhood == remainingcandidates)
# fastsolver.m:1494
    else:
        cr,cc=find(c == boxnumber,nargout=2)
# fastsolver.m:1496
        fr,fc=find(bf == boxnumber,nargout=2)
# fastsolver.m:1497
        dr=fr - cr
# fastsolver.m:1498
        dc=fc - cc
# fastsolver.m:1499
        desireddirs=matlabarray([])
# fastsolver.m:1500
        if dr != 0:
            desireddirs[end() + 1]=- sign(dr) + 3
# fastsolver.m:1502
        if dc != 0:
            desireddirs[end() + 1]=- sign(dc) + 2
# fastsolver.m:1505
        pic=opendirs[ismember1(opendirs,desireddirs)]
# fastsolver.m:1507
        if logical_not(isempty(pic)):
            if length(pic) > 1:
                if abs(dr) > abs(dc):
                    movedir=desireddirs[1]
# fastsolver.m:1511
                else:
                    movedir=desireddirs[2]
# fastsolver.m:1513
            else:
                movedir=copy(pic)
# fastsolver.m:1516
        else:
            movedir=opendirs[ceil(dot(rand,length(opendirs)))]
# fastsolver.m:1519
    
    c[cr,cc]=0
# fastsolver.m:1522
    if 1 == movedir:
        cc=cc + 1
# fastsolver.m:1525
    else:
        if 2 == movedir:
            cr=cr + 1
# fastsolver.m:1527
        else:
            if 3 == movedir:
                cc=cc - 1
# fastsolver.m:1529
            else:
                if 4 == movedir:
                    cr=cr - 1
# fastsolver.m:1531
    
    c[cr,cc]=boxnumber
# fastsolver.m:1533
    movelist[end() + 1,:]=cat(boxnumber,movedir)
# fastsolver.m:1534
    ##################
    
@function
def ismember1(a=None,s=None,*args,**kwargs):
    varargin = ismember1.varargin
    nargin = ismember1.nargin

    numelA=numel(a)
# fastsolver.m:1537
    numelS=numel(s)
# fastsolver.m:1538
    if numelA == 0 or numelS <= 1:
        if (numelA == 0 or numelS == 0):
            tf=false(size(a))
# fastsolver.m:1541
            return tf
        else:
            if numelS == 1:
                tf=(a == s)
# fastsolver.m:1544
                return tf
    else:
        tf=false(1,numelA)
# fastsolver.m:1548
        for i in arange(1,numelA).reshape(-1):
            tf[i]=any(a[i] == s)
# fastsolver.m:1550
    
    ##################
    
@function
def ismember2(a=None,s=None,*args,**kwargs):
    varargin = ismember2.varargin
    nargin = ismember2.nargin

    numelA=numel(a)
# fastsolver.m:1555
    numelS=numel(s)
# fastsolver.m:1556
    if numelA == 0 or numelS <= 1:
        if (numelA == 0 or numelS == 0):
            tf=false(size(a))
# fastsolver.m:1559
            return tf
        else:
            if numelS == 1:
                tf=(a == s)
# fastsolver.m:1562
                return tf
    else:
        tf=false(size(a))
# fastsolver.m:1566
        for i in arange(1,numelA).reshape(-1):
            found=(a[i] == ravel(s))
# fastsolver.m:1568
            if logical_not(any(found)):
                tf[i]=1
# fastsolver.m:1570
    
    ##################
    
@function
def setdiff(a=None,b=None,*args,**kwargs):
    varargin = setdiff.varargin
    nargin = setdiff.nargin

    c=unique(a[ismember2(ravel(a),ravel(b))])
# fastsolver.m:1576
    ##################
    
@function
def unique(a=None,*args,**kwargs):
    varargin = unique.varargin
    nargin = unique.nargin

    numelA=numel(a)
# fastsolver.m:1579
    if numelA < 2:
        b=copy(a)
# fastsolver.m:1581
    else:
        b=sort(a)
# fastsolver.m:1583
        db=diff(b)
# fastsolver.m:1584
        d=db != 0
# fastsolver.m:1585
        d[numelA]=true
# fastsolver.m:1586
        b=b[d]
# fastsolver.m:1587
    
    ##################
    
@function
def sub2ind(siz=None,varargin=None,*args,**kwargs):
    varargin = sub2ind.varargin
    nargin = sub2ind.nargin

    siz=matlabarray(cat(siz,ones(1,nargin - length(siz) - 1)))
# fastsolver.m:1591
    mt=cellfun('isempty',varargin)
# fastsolver.m:1592
    if any(mt):
        ndx=zeros(logical_not(mt))
# fastsolver.m:1594
        return ndx
    
    k=matlabarray(cat(1,cumprod(siz[1:end() - 1])))
# fastsolver.m:1597
    ndx=1
# fastsolver.m:1598
    for i in arange(1,length(siz)).reshape(-1):
        v=varargin[i]
# fastsolver.m:1600
        ndx=ndx + dot((v - 1),k[i])
# fastsolver.m:1601
    
    ##################
    
@function
def randperm(n=None,*args,**kwargs):
    varargin = randperm.varargin
    nargin = randperm.nargin

    DNC,p=sort(rand(1,n),nargout=2)
# fastsolver.m:1605
    ##################
    
@function
def perms(V=None,*args,**kwargs):
    varargin = perms.varargin
    nargin = perms.nargin

    V=ravel(V).T
# fastsolver.m:1608
    n=length(V)
# fastsolver.m:1609
    if n <= 1:
        P=copy(V)
# fastsolver.m:1610
        return P
    
    q=perms(arange(1,n - 1))
# fastsolver.m:1613
    m=size(q,1)
# fastsolver.m:1614
    P=zeros(dot(n,m),n)
# fastsolver.m:1615
    P[1:m,:]=cat(dot(n,ones(m,1)),q)
# fastsolver.m:1616
    for i in arange(n - 1,1,- 1).reshape(-1):
        t=copy(q)
# fastsolver.m:1618
        t[t == i]=n
# fastsolver.m:1619
        P[dot((n - i),m) + 1:dot((n - i + 1),m),:]=cat(dot(i,ones(m,1)),t)
# fastsolver.m:1620
    
    P=V[P]
# fastsolver.m:1622
    ##################
    
@function
def itTakesAThief(ai=None,af=None,w=None,*args,**kwargs):
    varargin = itTakesAThief.varargin
    nargin = itTakesAThief.nargin

    nBlocks=max(ravel(ai))
# fastsolver.m:1625
    m,n=size(ai,nargout=2)
# fastsolver.m:1626
    ftot=dot(m,n)
# fastsolver.m:1627
    steps=zeros(ftot,4)
# fastsolver.m:1628
    steps[1,:]=cat(0,0,m,1)
# fastsolver.m:1629
    steps[m,:]=cat(0,- 1,m,0)
# fastsolver.m:1630
    steps[ftot - m + 1,:]=cat(- m,0,0,1)
# fastsolver.m:1631
    steps[ftot,:]=cat(- m,- 1,0,0)
# fastsolver.m:1632
    for ci in arange(2,m - 1).reshape(-1):
        steps[ci,:]=cat(0,- 1,m,1)
# fastsolver.m:1634
    
    for ci in arange(ftot - m + 2,ftot - 1).reshape(-1):
        steps[ci,:]=cat(- m,- 1,0,1)
# fastsolver.m:1637
    
    for col in arange(m + 1,ftot - m,m).reshape(-1):
        steps[col,:]=cat(- m,0,m,1)
# fastsolver.m:1640
        steps[col + m - 1,:]=cat(- m,- 1,m,0)
# fastsolver.m:1641
        for row in arange(1,m - 2).reshape(-1):
            steps[col + row,:]=cat(- m,- 1,m,1)
# fastsolver.m:1643
    
    I=matlabarray(cat(0,1,0,- 1))
# fastsolver.m:1646
    J=matlabarray(cat(1,0,- 1,0))
# fastsolver.m:1647
    a=copy(ai)
# fastsolver.m:1648
    mv=matlabarray([])
# fastsolver.m:1649
    success=1
# fastsolver.m:1650
    uas=zeros(m,n)
# fastsolver.m:1651
    initialmode=1
# fastsolver.m:1652
    while logical_not(isequal(af,a)):

        numw=length(w)
# fastsolver.m:1654
        wwb=arange(1,length(w))
# fastsolver.m:1655
        wwbi=a[a == af]
# fastsolver.m:1656
        wwbi[wwbi == 0]=[]
# fastsolver.m:1657
        wwb[wwbi]=[]
# fastsolver.m:1658
        tmp,wwbi=sort(- w[wwb],nargout=2)
# fastsolver.m:1659
        wwb=wwb[wwbi]
# fastsolver.m:1660
        if (success == 0):
            fiter=copy(true)
# fastsolver.m:1662
        else:
            fiter=copy(false)
# fastsolver.m:1664
        success=0
# fastsolver.m:1666
        while (wwb):

            blk=wwb[1]
# fastsolver.m:1668
            wwb[1]=[]
# fastsolver.m:1669
            ci=find(ravel(af) == blk)
# fastsolver.m:1670
            if (a[ci] > 0 and logical_not(fiter) and initialmode != 2):
                continue
            smv,fc,a=findshortestpath(blk,a,af,w,m,n,1,[],steps,nargout=3)
# fastsolver.m:1674
            if (fc == 0):
                mv=matlabarray(cat([mv],[smv]))
# fastsolver.m:1676
                ci=find(ravel(a) == blk)
# fastsolver.m:1677
                a[ci]=0
# fastsolver.m:1678
                ci=find(ravel(af) == blk)
# fastsolver.m:1679
                a[ci]=blk
# fastsolver.m:1680
                success=1
# fastsolver.m:1681
            else:
                if (initialmode != 1):
                    moves=matlabarray(cat(m,1,- m,- 1))
# fastsolver.m:1683
                    cpos=1
# fastsolver.m:1684
                    ci=find(ravel(a) == blk)
# fastsolver.m:1685
                    if (initialmode == 0):
                        upos=copy(cpos)
# fastsolver.m:1687
                        mfb=matlabarray([])
# fastsolver.m:1688
                        ua=copy(uas)
# fastsolver.m:1689
                        uci=copy(ci)
# fastsolver.m:1690
                        ua[uci]=1
# fastsolver.m:1691
                        while (upos <= size(smv,1)):

                            uci=uci + moves[smv[upos,2]]
# fastsolver.m:1693
                            upos=upos + 1
# fastsolver.m:1694
                            ua[uci]=1
# fastsolver.m:1695
                            if (a[uci] > 0):
                                mfb=matlabarray(cat([mfb],[a[uci]]))
# fastsolver.m:1697

                        mfok,mfmv,a_mf=movefurniture(mfb,wwb,a,af,w,m,n,ua,steps,nargout=3)
# fastsolver.m:1700
                        if (mfok):
                            mv=matlabarray(cat([mv],[mfmv],[smv]))
# fastsolver.m:1702
                            a=copy(a_mf)
# fastsolver.m:1703
                            a[ci]=0
# fastsolver.m:1704
                            ci=find(ravel(af) == blk)
# fastsolver.m:1705
                            a[ci]=blk
# fastsolver.m:1706
                            continue
                    a[ci]=0
# fastsolver.m:1710
                    chmv=matlabarray([])
# fastsolver.m:1711
                    while (cpos <= size(smv,1)):

                        while (cpos <= size(smv,1) and a[ci + moves[smv[cpos,2]]] == 0):

                            if (initialmode):
                                if af[ci + moves[smv[cpos,2]]] > 0:
                                    break
                            ci=ci + moves[smv[cpos,2]]
# fastsolver.m:1719
                            mv=matlabarray(cat([mv],[smv[cpos,:]]))
# fastsolver.m:1720
                            cpos=cpos + 1
# fastsolver.m:1721

                        if (initialmode):
                            break
                        if (cpos > size(smv,1)):
                            continue
                        upos=copy(cpos)
# fastsolver.m:1729
                        ua=copy(uas)
# fastsolver.m:1730
                        uci=copy(ci)
# fastsolver.m:1731
                        ua[uci]=1
# fastsolver.m:1732
                        while (upos <= size(smv,1)):

                            uci=uci + moves[smv[upos,2]]
# fastsolver.m:1734
                            upos=upos + 1
# fastsolver.m:1735
                            ua[uci]=1
# fastsolver.m:1736

                        hmv,fc,a=findshortestpath(a[ci + moves[smv[cpos,2]]],a,af,w,m,n,2,ua,steps,nargout=3)
# fastsolver.m:1738
                        if (isempty(hmv)):
                            ua=zeros(m,n)
# fastsolver.m:1740
                            ua[ci]=1
# fastsolver.m:1741
                            ua[ci + moves[smv[cpos,2]]]=1
# fastsolver.m:1742
                            hmv,fc,a=findshortestpath(a[ci + moves[smv[cpos,2]]],a,af,w,m,n,2,ua,steps,nargout=3)
# fastsolver.m:1743
                        mv=matlabarray(cat([mv],[hmv]))
# fastsolver.m:1745
                        chmv=matlabarray(cat([chmv],[hmv]))
# fastsolver.m:1746
                        hpos=1
# fastsolver.m:1747
                        while (hpos <= size(hmv,1)):

                            hci=find(ravel(a) == hmv[hpos,1])
# fastsolver.m:1749
                            a[hci]=0
# fastsolver.m:1750
                            hci=hci + moves[hmv[hpos,2]]
# fastsolver.m:1751
                            a[hci]=hmv[hpos,1]
# fastsolver.m:1752
                            hpos=hpos + 1
# fastsolver.m:1753


                    a[ci]=blk
# fastsolver.m:1756

        if (logical_not(success) and initialmode == 1):
            initialmode=0
# fastsolver.m:1760
            success=1
# fastsolver.m:1761
        if (logical_not(success) and initialmode == 2):
            initialmode=0
# fastsolver.m:1764
            success=1
# fastsolver.m:1765

    
    #####
    
@function
def movefurniture(mfb=None,wwb=None,a=None,af=None,w=None,m=None,n=None,ua=None,steps=None,*args,**kwargs):
    varargin = movefurniture.varargin
    nargin = movefurniture.nargin

    fcs=0
# fastsolver.m:1770
    mfmv=matlabarray([])
# fastsolver.m:1771
    mfok=0
# fastsolver.m:1772
    a_mf=copy(a)
# fastsolver.m:1773
    moves=matlabarray(cat(m,1,- m,- 1))
# fastsolver.m:1774
    while (mfb):

        mblk=mfb[1]
# fastsolver.m:1776
        mfb[1]=[]
# fastsolver.m:1777
        mci=find(ravel(a_mf) == mblk)
# fastsolver.m:1778
        hmv,fc,a_mf=findshortestpath(mblk,a_mf,af,w,m,n,2,ua,steps,nargout=3)
# fastsolver.m:1779
        if (isempty(hmv)):
            mfok=0
# fastsolver.m:1781
            return mfok,mfmv,a_mf,ua
        mfmv=matlabarray(cat([mfmv],[hmv]))
# fastsolver.m:1784
        hpos=1
# fastsolver.m:1785
        while (hpos <= size(hmv,1)):

            hci=find(ravel(a_mf) == hmv[hpos,1])
# fastsolver.m:1787
            a_mf[hci]=0
# fastsolver.m:1788
            hci=hci + moves[hmv[hpos,2]]
# fastsolver.m:1789
            a_mf[hci]=hmv[hpos,1]
# fastsolver.m:1790
            ua[hci]=1
# fastsolver.m:1791
            hpos=hpos + 1
# fastsolver.m:1793


    
    while (wwb):

        blk=wwb[1]
# fastsolver.m:1797
        wwb[1]=[]
# fastsolver.m:1798
        ci=find(ravel(af) == blk)
# fastsolver.m:1799
        if (ua[ci]):
            continue
        hmv,fc,a_mf=findshortestpath(blk,a_mf,af,w,m,n,1,[],steps,nargout=3)
# fastsolver.m:1803
        if (fc == 0):
            mfmv=matlabarray(cat([mfmv],[hmv]))
# fastsolver.m:1805
            ci=find(ravel(a_mf) == blk)
# fastsolver.m:1806
            a_mf[ci]=0
# fastsolver.m:1807
            ci=find(ravel(af) == blk)
# fastsolver.m:1808
            a_mf[ci]=blk
# fastsolver.m:1809

    
    mfok=1
# fastsolver.m:1812
    return mfok,mfmv,a_mf,ua
    #####
    
@function
def findshortestpath(blk=None,a=None,af=None,w=None,m=None,n=None,mode=None,ua=None,steps=None,*args,**kwargs):
    varargin = findshortestpath.varargin
    nargin = findshortestpath.nargin

    finalmode=copy(false)
# fastsolver.m:1816
    smv=matlabarray([])
# fastsolver.m:1817
    fc=0
# fastsolver.m:1817
    is_=zeros(100,1)
# fastsolver.m:1818
    isi=1
# fastsolver.m:1819
    ise=1
# fastsolver.m:1820
    is_[1]=find(ravel(a) == blk)
# fastsolver.m:1821
    ca=zeros(m,n)
# fastsolver.m:1822
    ca[is_[1]]=1
# fastsolver.m:1823
    cm=zeros(m,n)
# fastsolver.m:1824
    om=zeros(m,n)
# fastsolver.m:1825
    fm=zeros(m,n)
# fastsolver.m:1826
    helpw=matlabarray(cat([0],[w]))
# fastsolver.m:1827
    while (isi <= ise):

        ci=is_[isi]
# fastsolver.m:1829
        cv=ca[ci]
# fastsolver.m:1830
        t=ci + steps[ci,:]
# fastsolver.m:1831
        if (mode == 2):
            t[ua[t] == 1]=ci
# fastsolver.m:1833
        for ind in arange(1,4).reshape(-1):
            mpenalty=0
# fastsolver.m:1836
            if (a[t[ind]] > 0):
                mpenalty=dot(2,helpw[a[t[ind]] + 1])
# fastsolver.m:1838
            if ca[t[ind]] == 0:
                ca[t[ind]]=cv + 1
# fastsolver.m:1841
                if (mode == 1):
                    cm[t[ind]]=cm[ci] + mpenalty + w[blk] + dot(0.1,(a[t[ind]] > 0))
# fastsolver.m:1843
                else:
                    cm[t[ind]]=cm[ci] + dot(2,helpw[a[t[ind]] + 1])
# fastsolver.m:1845
                om[t[ind]]=om[ci] + (a[t[ind]] > 0)
# fastsolver.m:1847
                fm[t[ind]]=a[ci]
# fastsolver.m:1848
                if (mode == 1 or a[t[ind]] > 0):
                    ise=ise + 1
# fastsolver.m:1850
                    is_[ise]=t[ind]
# fastsolver.m:1851
            else:
                if (cm[ci] + mpenalty + w[blk] < cm[t[ind]]):
                    ca[t[ind]]=ca[ci] + 1
# fastsolver.m:1855
                    cm[t[ind]]=cm[ci] + mpenalty + w[blk]
# fastsolver.m:1856
                    om[t[ind]]=om[ci] + (a[t[ind]] > 0)
# fastsolver.m:1857
                    fm[t[ind]]=a[ci]
# fastsolver.m:1858
                    if (mode == 1 or a[t[ind]] > 0):
                        ise=ise + 1
# fastsolver.m:1860
                        is_[ise]=t[ind]
# fastsolver.m:1861
        isi=isi + 1
# fastsolver.m:1866

    
    if (mode == 1):
        ci=find(ravel(af) == blk)
# fastsolver.m:1869
    else:
        cm[ca == 0]=Inf
# fastsolver.m:1871
        mi=matlabarray([])
# fastsolver.m:1872
        if (finalmode):
            ui=find(a == logical_and(0,(af == logical_or(0,af) == blk)))
# fastsolver.m:1874
            minval=min(cm[ui])
# fastsolver.m:1875
            if (logical_not(isinf(minval))):
                mi=find(cm[ui] == minval)
# fastsolver.m:1877
        if (isempty(mi) or isinf(minval)):
            ui=find(a == 0)
# fastsolver.m:1881
            minval=min(cm[ui])
# fastsolver.m:1882
            mi=find(cm[ui] == minval)
# fastsolver.m:1883
        if (length(mi) > 1):
            minval=1e+20
# fastsolver.m:1886
            for cand in arange(1,length(mi)).reshape(-1):
                cci=ui[mi[cand]]
# fastsolver.m:1888
                cblk=fm[cci]
# fastsolver.m:1889
                row=mod(cci,m)
# fastsolver.m:1890
                col=ceil(cci / m)
# fastsolver.m:1891
                frow,fcol=find(af == cblk,nargout=2)
# fastsolver.m:1892
                cblkcost=abs(row - frow) + abs(col - fcol)
# fastsolver.m:1893
                if (cblkcost < minval):
                    minval=copy(cblkcost)
# fastsolver.m:1895
                    ci=copy(cci)
# fastsolver.m:1896
        else:
            ci=ui[mi]
# fastsolver.m:1900
    
    cv=ca[ci]
# fastsolver.m:1903
    if (cv == 0):
        return smv,fc,a
    
    tmv=matlabarray([])
# fastsolver.m:1907
    while (cv > 1):

        t=ci + steps[ci,:]
# fastsolver.m:1909
        pi=find(ca[t] == cv - 1)
# fastsolver.m:1910
        tmp,ni=min(cm[t[pi]],nargout=2)
# fastsolver.m:1911
        ci=t[pi[ni]]
# fastsolver.m:1912
        if (mode == 1):
            tmv[end() + 1,cat(1,2)]=cat(blk,pi[ni])
# fastsolver.m:1914
        else:
            if (a[ci] > 0):
                tmv[end() + 1,cat(1,2)]=cat(a[ci],pi[ni])
# fastsolver.m:1916
        cv=cv - 1
# fastsolver.m:1918

    
    if (mode == 1):
        smv=matlabarray(cat(tmv[end():- 1:1,:]))
# fastsolver.m:1921
        fc=om[find(ravel(af) == blk)]
# fastsolver.m:1922
    else:
        smv=copy(tmv)
# fastsolver.m:1924
        fc=0
# fastsolver.m:1925
    
    #####
    
@function
def dealWall1(ai=None,af=None,w=None,bestmv=None,*args,**kwargs):
    varargin = dealWall1.varargin
    nargin = dealWall1.nargin

    yess=0
# fastsolver.m:1929
    aiMap=ai > 0
# fastsolver.m:1929
    nBlocks=length(w)
# fastsolver.m:1929
    m,n=size(aiMap,nargout=2)
# fastsolver.m:1929
    if nBlocks / (dot(m,n)) > 0.5:
        return bestmv,yess
    
    afMap=af > 0
# fastsolver.m:1933
    mapDif=multiply(multiply((ai == af),aiMap),afMap)
# fastsolver.m:1933
    rsum=sum(mapDif,2)
# fastsolver.m:1934
    csum=sum(mapDif)
# fastsolver.m:1934
    hwall=rsum == n
# fastsolver.m:1935
    vwall=csum == m
# fastsolver.m:1935
    hwall[cat(1,m)]=0
# fastsolver.m:1936
    vwall[cat(1,n)]=0
# fastsolver.m:1937
    nzh=nnz(hwall)
# fastsolver.m:1937
    nzv=nnz(vwall)
# fastsolver.m:1937
    nzhv=nzh + nzv
# fastsolver.m:1938
    if nzhv != 1 or nzhv != 2:
        return bestmv,yess
    
    bestScore=sum(w[bestmv[:,1]])
# fastsolver.m:1942
    aiBlock=ai[aiMap]
# fastsolver.m:1943
    aiOrder,aiPos=sort(aiBlock,nargout=2)
# fastsolver.m:1944
    airow,aicol=find(aiMap,nargout=2)
# fastsolver.m:1945
    airow=airow[aiPos]
# fastsolver.m:1946
    aicol=aicol[aiPos]
# fastsolver.m:1947
    I=matlabarray(cat(0,1,0,- 1))
# fastsolver.m:1948
    J=matlabarray(cat(1,0,- 1,0))
# fastsolver.m:1949
    if nzh == 1:
        hBrickID=ai[hwall,:]
# fastsolver.m:1951
        hwall=find(hwall)
# fastsolver.m:1952
        brickWeight=w[hBrickID]
# fastsolver.m:1953
        minb,minInd=sort(brickWeight,nargout=2)
# fastsolver.m:1954
        for i in arange(1,2).reshape(-1):
            a=copy(ai)
# fastsolver.m:1956
            openDoor=hBrickID[minInd[i]]
# fastsolver.m:1957
            di=airow[openDoor]
# fastsolver.m:1958
            dj=aicol[openDoor]
# fastsolver.m:1959
            if hwall < m / 2:
                ndi=di + I[2]
# fastsolver.m:1961
                ndj=dj + J[2]
# fastsolver.m:1962
                m1=2
# fastsolver.m:1963
            else:
                ndi=di + I[4]
# fastsolver.m:1965
                ndj=dj + J[4]
# fastsolver.m:1966
                m1=4
# fastsolver.m:1967
            if a[ndi,ndj] != 0 or af[ndi,ndj] != 0:
                if hwall < m / 2 and hwall > 2:
                    ndi=di + I[4]
# fastsolver.m:1971
                    ndj=dj + J[4]
# fastsolver.m:1971
                    m1=4
# fastsolver.m:1972
                else:
                    ndi=di + I[2]
# fastsolver.m:1974
                    ndj=dj + J[2]
# fastsolver.m:1975
                    m1=2
# fastsolver.m:1976
                if a[ndi,ndj] != 0 or af[ndi,ndj] != 0:
                    continue
            if dj < n / 2:
                ndi=ndi + I[1]
# fastsolver.m:1983
                ndj=ndj + J[1]
# fastsolver.m:1984
                m2=1
# fastsolver.m:1985
            else:
                ndi=ndi + I[3]
# fastsolver.m:1987
                ndj=ndj + J[3]
# fastsolver.m:1988
                m2=3
# fastsolver.m:1989
            if a[ndi,ndj] != 0 or af[ndi,ndj] != 0:
                if dj < n / 2 and dj > 2:
                    ndi=ndi + I[3]
# fastsolver.m:1993
                    ndj=ndj + J[3]
# fastsolver.m:1994
                    m2=3
# fastsolver.m:1995
                else:
                    ndi=ndi + I[1]
# fastsolver.m:1997
                    ndj=ndj + J[1]
# fastsolver.m:1998
                    m2=1
# fastsolver.m:1999
                if a[ndi,ndj] != 0 or af[ndi,ndj] != 0:
                    continue
            mvt=matlabarray(cat([cat(openDoor,m1)],[cat(openDoor,m2)]))
# fastsolver.m:2005
            a[di,dj]=0
# fastsolver.m:2006
            a[ndi,ndj]=openDoor
# fastsolver.m:2007
            aaf=copy(af)
# fastsolver.m:2008
            aaf[di,dj]=0
# fastsolver.m:2009
            aaf[ndi,ndj]=openDoor
# fastsolver.m:2010
            mv1=cbest(a,aaf,w)
# fastsolver.m:2011
            mvt=matlabarray(cat([mvt],[mv1],[cat(openDoor,4 - m2)],[cat(openDoor,6 - m1)]))
# fastsolver.m:2012
            curscore=sum(w[mvt[:,1]])
# fastsolver.m:2013
            if curscore < bestScore:
                yess=1
# fastsolver.m:2015
                bestmv=copy(mvt)
# fastsolver.m:2016
                bestScore=copy(curscore)
# fastsolver.m:2017
    
    if nzv == 1:
        vBrickID=ai[:,vwall]
# fastsolver.m:2022
        vwall=find(vwall)
# fastsolver.m:2023
        brickWeight=w[vBrickID]
# fastsolver.m:2024
        minb,minInd=sort(brickWeight,nargout=2)
# fastsolver.m:2025
        for i in arange(1,2).reshape(-1):
            a=copy(ai)
# fastsolver.m:2027
            openDoor=vBrickID[minInd[i]]
# fastsolver.m:2028
            di=airow[openDoor]
# fastsolver.m:2029
            dj=aicol[openDoor]
# fastsolver.m:2030
            if vwall < n / 2:
                ndi=di + I[1]
# fastsolver.m:2032
                ndj=dj + J[1]
# fastsolver.m:2033
                m1=1
# fastsolver.m:2034
            else:
                ndi=di + I[3]
# fastsolver.m:2036
                ndj=dj + J[3]
# fastsolver.m:2037
                m1=3
# fastsolver.m:2038
            if a[ndi,ndj] != 0 or af[ndi,ndj] != 0:
                if vwall < n / 2 and vwall > 2:
                    ndi=di + I[3]
# fastsolver.m:2042
                    ndj=dj + J[3]
# fastsolver.m:2043
                    m1=3
# fastsolver.m:2044
                else:
                    ndi=di + I[1]
# fastsolver.m:2046
                    ndj=dj + J[1]
# fastsolver.m:2047
                    m1=1
# fastsolver.m:2048
                if a[ndi,ndj] != 0 or af[ndi,ndj] != 0:
                    continue
            if di < m / 2:
                ndi=ndi + I[2]
# fastsolver.m:2055
                ndj=ndj + J[2]
# fastsolver.m:2056
                m2=2
# fastsolver.m:2057
            else:
                ndi=ndi + I[4]
# fastsolver.m:2059
                ndj=ndj + J[4]
# fastsolver.m:2060
                m2=4
# fastsolver.m:2061
            if a[ndi,ndj] != 0 or af[ndi,ndj] != 0:
                if di < m / 2 and di > 2:
                    ndi=ndi + I[4]
# fastsolver.m:2065
                    ndj=ndj + J[4]
# fastsolver.m:2066
                    m2=4
# fastsolver.m:2067
                else:
                    ndi=ndi + I[2]
# fastsolver.m:2069
                    ndj=ndj + J[2]
# fastsolver.m:2070
                    m2=2
# fastsolver.m:2071
                if a[ndi,ndj] != 0 or af[ndi,ndj] != 0:
                    continue
            mvt=matlabarray(cat([cat(openDoor,m1)],[cat(openDoor,m2)]))
# fastsolver.m:2077
            a[di,dj]=0
# fastsolver.m:2078
            a[ndi,ndj]=openDoor
# fastsolver.m:2079
            aaf=copy(af)
# fastsolver.m:2080
            aaf[di,dj]=0
# fastsolver.m:2081
            aaf[ndi,ndj]=openDoor
# fastsolver.m:2082
            mv1=cbest(a,aaf,w)
# fastsolver.m:2083
            mvt=matlabarray(cat([mvt],[mv1],[cat(openDoor,6 - m2)],[cat(openDoor,4 - m1)]))
# fastsolver.m:2084
            curscore=sum(w[mvt[:,1]])
# fastsolver.m:2085
            if curscore < bestScore:
                yess=1
# fastsolver.m:2087
                bestmv=copy(mvt)
# fastsolver.m:2088
                bestScore=copy(curscore)
# fastsolver.m:2089
    
    mv=copy(bestmv)
# fastsolver.m:2093