#
# Autogenerated by Thrift Compiler (0.9.3)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

from thrift.Thrift import TType, TMessageType, TException, TApplicationException
import tempest_graph.TempestGraphService
import logging
from ttypes import *
from thrift.Thrift import TProcessor
from thrift.transport import TTransport
from thrift.protocol import TBinaryProtocol, TProtocol
try:
  from thrift.protocol import fastbinary
except:
  fastbinary = None


class Iface(tempest_graph.TempestGraphService.Iface):
  def getMultiNodeAttributeAsJSON(self, nodeType, nodeIds, attributeName):
    """
    Parameters:
     - nodeType
     - nodeIds
     - attributeName
    """
    pass

  def nodes(self, nodeType, sqlClause):
    """
    Parameters:
     - nodeType
     - sqlClause
    """
    pass

  def kStepOutNeighborsFiltered(self, edgeType, sourceId, k, sqlClause, filter, alternating):
    """
    Parameters:
     - edgeType
     - sourceId
     - k
     - sqlClause
     - filter
     - alternating
    """
    pass

  def kStepInNeighborsFiltered(self, edgeType, sourceId, k, sqlClause, filter, alternating):
    """
    Parameters:
     - edgeType
     - sourceId
     - k
     - sqlClause
     - filter
     - alternating
    """
    pass

  def ppr(self, edgeType, seeds, seedType, targetType, pageRankParams):
    """
    Parameters:
     - edgeType
     - seeds
     - seedType
     - targetType
     - pageRankParams
    """
    pass

  def addEdges(self, edgeType, ids1, ids2):
    """
    Parameters:
     - edgeType
     - ids1
     - ids2
    """
    pass


class Client(tempest_graph.TempestGraphService.Client, Iface):
  def __init__(self, iprot, oprot=None):
    tempest_graph.TempestGraphService.Client.__init__(self, iprot, oprot)

  def getMultiNodeAttributeAsJSON(self, nodeType, nodeIds, attributeName):
    """
    Parameters:
     - nodeType
     - nodeIds
     - attributeName
    """
    self.send_getMultiNodeAttributeAsJSON(nodeType, nodeIds, attributeName)
    return self.recv_getMultiNodeAttributeAsJSON()

  def send_getMultiNodeAttributeAsJSON(self, nodeType, nodeIds, attributeName):
    self._oprot.writeMessageBegin('getMultiNodeAttributeAsJSON', TMessageType.CALL, self._seqid)
    args = getMultiNodeAttributeAsJSON_args()
    args.nodeType = nodeType
    args.nodeIds = nodeIds
    args.attributeName = attributeName
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_getMultiNodeAttributeAsJSON(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = getMultiNodeAttributeAsJSON_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    if result.error1 is not None:
      raise result.error1
    if result.error2 is not None:
      raise result.error2
    raise TApplicationException(TApplicationException.MISSING_RESULT, "getMultiNodeAttributeAsJSON failed: unknown result")

  def nodes(self, nodeType, sqlClause):
    """
    Parameters:
     - nodeType
     - sqlClause
    """
    self.send_nodes(nodeType, sqlClause)
    return self.recv_nodes()

  def send_nodes(self, nodeType, sqlClause):
    self._oprot.writeMessageBegin('nodes', TMessageType.CALL, self._seqid)
    args = nodes_args()
    args.nodeType = nodeType
    args.sqlClause = sqlClause
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_nodes(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = nodes_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    if result.error1 is not None:
      raise result.error1
    if result.error2 is not None:
      raise result.error2
    raise TApplicationException(TApplicationException.MISSING_RESULT, "nodes failed: unknown result")

  def kStepOutNeighborsFiltered(self, edgeType, sourceId, k, sqlClause, filter, alternating):
    """
    Parameters:
     - edgeType
     - sourceId
     - k
     - sqlClause
     - filter
     - alternating
    """
    self.send_kStepOutNeighborsFiltered(edgeType, sourceId, k, sqlClause, filter, alternating)
    return self.recv_kStepOutNeighborsFiltered()

  def send_kStepOutNeighborsFiltered(self, edgeType, sourceId, k, sqlClause, filter, alternating):
    self._oprot.writeMessageBegin('kStepOutNeighborsFiltered', TMessageType.CALL, self._seqid)
    args = kStepOutNeighborsFiltered_args()
    args.edgeType = edgeType
    args.sourceId = sourceId
    args.k = k
    args.sqlClause = sqlClause
    args.filter = filter
    args.alternating = alternating
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_kStepOutNeighborsFiltered(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = kStepOutNeighborsFiltered_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    if result.error1 is not None:
      raise result.error1
    if result.error2 is not None:
      raise result.error2
    if result.error3 is not None:
      raise result.error3
    if result.error4 is not None:
      raise result.error4
    raise TApplicationException(TApplicationException.MISSING_RESULT, "kStepOutNeighborsFiltered failed: unknown result")

  def kStepInNeighborsFiltered(self, edgeType, sourceId, k, sqlClause, filter, alternating):
    """
    Parameters:
     - edgeType
     - sourceId
     - k
     - sqlClause
     - filter
     - alternating
    """
    self.send_kStepInNeighborsFiltered(edgeType, sourceId, k, sqlClause, filter, alternating)
    return self.recv_kStepInNeighborsFiltered()

  def send_kStepInNeighborsFiltered(self, edgeType, sourceId, k, sqlClause, filter, alternating):
    self._oprot.writeMessageBegin('kStepInNeighborsFiltered', TMessageType.CALL, self._seqid)
    args = kStepInNeighborsFiltered_args()
    args.edgeType = edgeType
    args.sourceId = sourceId
    args.k = k
    args.sqlClause = sqlClause
    args.filter = filter
    args.alternating = alternating
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_kStepInNeighborsFiltered(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = kStepInNeighborsFiltered_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    if result.error1 is not None:
      raise result.error1
    if result.error2 is not None:
      raise result.error2
    if result.error3 is not None:
      raise result.error3
    if result.error4 is not None:
      raise result.error4
    raise TApplicationException(TApplicationException.MISSING_RESULT, "kStepInNeighborsFiltered failed: unknown result")

  def ppr(self, edgeType, seeds, seedType, targetType, pageRankParams):
    """
    Parameters:
     - edgeType
     - seeds
     - seedType
     - targetType
     - pageRankParams
    """
    self.send_ppr(edgeType, seeds, seedType, targetType, pageRankParams)
    return self.recv_ppr()

  def send_ppr(self, edgeType, seeds, seedType, targetType, pageRankParams):
    self._oprot.writeMessageBegin('ppr', TMessageType.CALL, self._seqid)
    args = ppr_args()
    args.edgeType = edgeType
    args.seeds = seeds
    args.seedType = seedType
    args.targetType = targetType
    args.pageRankParams = pageRankParams
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_ppr(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = ppr_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    if result.error1 is not None:
      raise result.error1
    if result.error2 is not None:
      raise result.error2
    if result.error3 is not None:
      raise result.error3
    raise TApplicationException(TApplicationException.MISSING_RESULT, "ppr failed: unknown result")

  def addEdges(self, edgeType, ids1, ids2):
    """
    Parameters:
     - edgeType
     - ids1
     - ids2
    """
    self.send_addEdges(edgeType, ids1, ids2)
    self.recv_addEdges()

  def send_addEdges(self, edgeType, ids1, ids2):
    self._oprot.writeMessageBegin('addEdges', TMessageType.CALL, self._seqid)
    args = addEdges_args()
    args.edgeType = edgeType
    args.ids1 = ids1
    args.ids2 = ids2
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_addEdges(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = addEdges_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.error1 is not None:
      raise result.error1
    if result.error2 is not None:
      raise result.error2
    return


class Processor(tempest_graph.TempestGraphService.Processor, Iface, TProcessor):
  def __init__(self, handler):
    tempest_graph.TempestGraphService.Processor.__init__(self, handler)
    self._processMap["getMultiNodeAttributeAsJSON"] = Processor.process_getMultiNodeAttributeAsJSON
    self._processMap["nodes"] = Processor.process_nodes
    self._processMap["kStepOutNeighborsFiltered"] = Processor.process_kStepOutNeighborsFiltered
    self._processMap["kStepInNeighborsFiltered"] = Processor.process_kStepInNeighborsFiltered
    self._processMap["ppr"] = Processor.process_ppr
    self._processMap["addEdges"] = Processor.process_addEdges

  def process(self, iprot, oprot):
    (name, type, seqid) = iprot.readMessageBegin()
    if name not in self._processMap:
      iprot.skip(TType.STRUCT)
      iprot.readMessageEnd()
      x = TApplicationException(TApplicationException.UNKNOWN_METHOD, 'Unknown function %s' % (name))
      oprot.writeMessageBegin(name, TMessageType.EXCEPTION, seqid)
      x.write(oprot)
      oprot.writeMessageEnd()
      oprot.trans.flush()
      return
    else:
      self._processMap[name](self, seqid, iprot, oprot)
    return True

  def process_getMultiNodeAttributeAsJSON(self, seqid, iprot, oprot):
    args = getMultiNodeAttributeAsJSON_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = getMultiNodeAttributeAsJSON_result()
    try:
      result.success = self._handler.getMultiNodeAttributeAsJSON(args.nodeType, args.nodeIds, args.attributeName)
      msg_type = TMessageType.REPLY
    except (TTransport.TTransportException, KeyboardInterrupt, SystemExit):
      raise
    except UndefinedGraphException as error1:
      msg_type = TMessageType.REPLY
      result.error1 = error1
    except UndefinedAttributeException as error2:
      msg_type = TMessageType.REPLY
      result.error2 = error2
    except Exception as ex:
      msg_type = TMessageType.EXCEPTION
      logging.exception(ex)
      result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
    oprot.writeMessageBegin("getMultiNodeAttributeAsJSON", msg_type, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_nodes(self, seqid, iprot, oprot):
    args = nodes_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = nodes_result()
    try:
      result.success = self._handler.nodes(args.nodeType, args.sqlClause)
      msg_type = TMessageType.REPLY
    except (TTransport.TTransportException, KeyboardInterrupt, SystemExit):
      raise
    except UndefinedGraphException as error1:
      msg_type = TMessageType.REPLY
      result.error1 = error1
    except SQLException as error2:
      msg_type = TMessageType.REPLY
      result.error2 = error2
    except Exception as ex:
      msg_type = TMessageType.EXCEPTION
      logging.exception(ex)
      result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
    oprot.writeMessageBegin("nodes", msg_type, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_kStepOutNeighborsFiltered(self, seqid, iprot, oprot):
    args = kStepOutNeighborsFiltered_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = kStepOutNeighborsFiltered_result()
    try:
      result.success = self._handler.kStepOutNeighborsFiltered(args.edgeType, args.sourceId, args.k, args.sqlClause, args.filter, args.alternating)
      msg_type = TMessageType.REPLY
    except (TTransport.TTransportException, KeyboardInterrupt, SystemExit):
      raise
    except UndefinedGraphException as error1:
      msg_type = TMessageType.REPLY
      result.error1 = error1
    except tempest_graph.ttypes.InvalidArgumentException as error2:
      msg_type = TMessageType.REPLY
      result.error2 = error2
    except SQLException as error3:
      msg_type = TMessageType.REPLY
      result.error3 = error3
    except tempest_graph.ttypes.InvalidNodeIdException as error4:
      msg_type = TMessageType.REPLY
      result.error4 = error4
    except Exception as ex:
      msg_type = TMessageType.EXCEPTION
      logging.exception(ex)
      result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
    oprot.writeMessageBegin("kStepOutNeighborsFiltered", msg_type, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_kStepInNeighborsFiltered(self, seqid, iprot, oprot):
    args = kStepInNeighborsFiltered_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = kStepInNeighborsFiltered_result()
    try:
      result.success = self._handler.kStepInNeighborsFiltered(args.edgeType, args.sourceId, args.k, args.sqlClause, args.filter, args.alternating)
      msg_type = TMessageType.REPLY
    except (TTransport.TTransportException, KeyboardInterrupt, SystemExit):
      raise
    except UndefinedGraphException as error1:
      msg_type = TMessageType.REPLY
      result.error1 = error1
    except tempest_graph.ttypes.InvalidArgumentException as error2:
      msg_type = TMessageType.REPLY
      result.error2 = error2
    except SQLException as error3:
      msg_type = TMessageType.REPLY
      result.error3 = error3
    except tempest_graph.ttypes.InvalidNodeIdException as error4:
      msg_type = TMessageType.REPLY
      result.error4 = error4
    except Exception as ex:
      msg_type = TMessageType.EXCEPTION
      logging.exception(ex)
      result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
    oprot.writeMessageBegin("kStepInNeighborsFiltered", msg_type, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_ppr(self, seqid, iprot, oprot):
    args = ppr_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = ppr_result()
    try:
      result.success = self._handler.ppr(args.edgeType, args.seeds, args.seedType, args.targetType, args.pageRankParams)
      msg_type = TMessageType.REPLY
    except (TTransport.TTransportException, KeyboardInterrupt, SystemExit):
      raise
    except UndefinedGraphException as error1:
      msg_type = TMessageType.REPLY
      result.error1 = error1
    except tempest_graph.ttypes.InvalidNodeIdException as error2:
      msg_type = TMessageType.REPLY
      result.error2 = error2
    except tempest_graph.ttypes.InvalidArgumentException as error3:
      msg_type = TMessageType.REPLY
      result.error3 = error3
    except Exception as ex:
      msg_type = TMessageType.EXCEPTION
      logging.exception(ex)
      result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
    oprot.writeMessageBegin("ppr", msg_type, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_addEdges(self, seqid, iprot, oprot):
    args = addEdges_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = addEdges_result()
    try:
      self._handler.addEdges(args.edgeType, args.ids1, args.ids2)
      msg_type = TMessageType.REPLY
    except (TTransport.TTransportException, KeyboardInterrupt, SystemExit):
      raise
    except UndefinedGraphException as error1:
      msg_type = TMessageType.REPLY
      result.error1 = error1
    except UnequalListSizeException as error2:
      msg_type = TMessageType.REPLY
      result.error2 = error2
    except Exception as ex:
      msg_type = TMessageType.EXCEPTION
      logging.exception(ex)
      result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
    oprot.writeMessageBegin("addEdges", msg_type, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()


# HELPER FUNCTIONS AND STRUCTURES

class getMultiNodeAttributeAsJSON_args:
  """
  Attributes:
   - nodeType
   - nodeIds
   - attributeName
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'nodeType', None, None, ), # 1
    (2, TType.LIST, 'nodeIds', (TType.I64,None), None, ), # 2
    (3, TType.STRING, 'attributeName', None, None, ), # 3
  )

  def __init__(self, nodeType=None, nodeIds=None, attributeName=None,):
    self.nodeType = nodeType
    self.nodeIds = nodeIds
    self.attributeName = attributeName

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.nodeType = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.LIST:
          self.nodeIds = []
          (_etype3, _size0) = iprot.readListBegin()
          for _i4 in xrange(_size0):
            _elem5 = iprot.readI64()
            self.nodeIds.append(_elem5)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.attributeName = iprot.readString()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('getMultiNodeAttributeAsJSON_args')
    if self.nodeType is not None:
      oprot.writeFieldBegin('nodeType', TType.STRING, 1)
      oprot.writeString(self.nodeType)
      oprot.writeFieldEnd()
    if self.nodeIds is not None:
      oprot.writeFieldBegin('nodeIds', TType.LIST, 2)
      oprot.writeListBegin(TType.I64, len(self.nodeIds))
      for iter6 in self.nodeIds:
        oprot.writeI64(iter6)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.attributeName is not None:
      oprot.writeFieldBegin('attributeName', TType.STRING, 3)
      oprot.writeString(self.attributeName)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.nodeType)
    value = (value * 31) ^ hash(self.nodeIds)
    value = (value * 31) ^ hash(self.attributeName)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class getMultiNodeAttributeAsJSON_result:
  """
  Attributes:
   - success
   - error1
   - error2
  """

  thrift_spec = (
    (0, TType.MAP, 'success', (TType.I64,None,TType.STRING,None), None, ), # 0
    (1, TType.STRUCT, 'error1', (UndefinedGraphException, UndefinedGraphException.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'error2', (UndefinedAttributeException, UndefinedAttributeException.thrift_spec), None, ), # 2
  )

  def __init__(self, success=None, error1=None, error2=None,):
    self.success = success
    self.error1 = error1
    self.error2 = error2

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.MAP:
          self.success = {}
          (_ktype8, _vtype9, _size7 ) = iprot.readMapBegin()
          for _i11 in xrange(_size7):
            _key12 = iprot.readI64()
            _val13 = iprot.readString()
            self.success[_key12] = _val13
          iprot.readMapEnd()
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.error1 = UndefinedGraphException()
          self.error1.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.error2 = UndefinedAttributeException()
          self.error2.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('getMultiNodeAttributeAsJSON_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.MAP, 0)
      oprot.writeMapBegin(TType.I64, TType.STRING, len(self.success))
      for kiter14,viter15 in self.success.items():
        oprot.writeI64(kiter14)
        oprot.writeString(viter15)
      oprot.writeMapEnd()
      oprot.writeFieldEnd()
    if self.error1 is not None:
      oprot.writeFieldBegin('error1', TType.STRUCT, 1)
      self.error1.write(oprot)
      oprot.writeFieldEnd()
    if self.error2 is not None:
      oprot.writeFieldBegin('error2', TType.STRUCT, 2)
      self.error2.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    value = (value * 31) ^ hash(self.error1)
    value = (value * 31) ^ hash(self.error2)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class nodes_args:
  """
  Attributes:
   - nodeType
   - sqlClause
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'nodeType', None, None, ), # 1
    (2, TType.STRING, 'sqlClause', None, None, ), # 2
  )

  def __init__(self, nodeType=None, sqlClause=None,):
    self.nodeType = nodeType
    self.sqlClause = sqlClause

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.nodeType = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.sqlClause = iprot.readString()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('nodes_args')
    if self.nodeType is not None:
      oprot.writeFieldBegin('nodeType', TType.STRING, 1)
      oprot.writeString(self.nodeType)
      oprot.writeFieldEnd()
    if self.sqlClause is not None:
      oprot.writeFieldBegin('sqlClause', TType.STRING, 2)
      oprot.writeString(self.sqlClause)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.nodeType)
    value = (value * 31) ^ hash(self.sqlClause)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class nodes_result:
  """
  Attributes:
   - success
   - error1
   - error2
  """

  thrift_spec = (
    (0, TType.LIST, 'success', (TType.I64,None), None, ), # 0
    (1, TType.STRUCT, 'error1', (UndefinedGraphException, UndefinedGraphException.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'error2', (SQLException, SQLException.thrift_spec), None, ), # 2
  )

  def __init__(self, success=None, error1=None, error2=None,):
    self.success = success
    self.error1 = error1
    self.error2 = error2

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.LIST:
          self.success = []
          (_etype19, _size16) = iprot.readListBegin()
          for _i20 in xrange(_size16):
            _elem21 = iprot.readI64()
            self.success.append(_elem21)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.error1 = UndefinedGraphException()
          self.error1.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.error2 = SQLException()
          self.error2.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('nodes_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.LIST, 0)
      oprot.writeListBegin(TType.I64, len(self.success))
      for iter22 in self.success:
        oprot.writeI64(iter22)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.error1 is not None:
      oprot.writeFieldBegin('error1', TType.STRUCT, 1)
      self.error1.write(oprot)
      oprot.writeFieldEnd()
    if self.error2 is not None:
      oprot.writeFieldBegin('error2', TType.STRUCT, 2)
      self.error2.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    value = (value * 31) ^ hash(self.error1)
    value = (value * 31) ^ hash(self.error2)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class kStepOutNeighborsFiltered_args:
  """
  Attributes:
   - edgeType
   - sourceId
   - k
   - sqlClause
   - filter
   - alternating
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'edgeType', None, None, ), # 1
    (2, TType.I64, 'sourceId', None, None, ), # 2
    (3, TType.I32, 'k', None, None, ), # 3
    (4, TType.STRING, 'sqlClause', None, None, ), # 4
    (5, TType.MAP, 'filter', (TType.I32,None,TType.I32,None), None, ), # 5
    (6, TType.BOOL, 'alternating', None, None, ), # 6
  )

  def __init__(self, edgeType=None, sourceId=None, k=None, sqlClause=None, filter=None, alternating=None,):
    self.edgeType = edgeType
    self.sourceId = sourceId
    self.k = k
    self.sqlClause = sqlClause
    self.filter = filter
    self.alternating = alternating

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.edgeType = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I64:
          self.sourceId = iprot.readI64()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.k = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.sqlClause = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.MAP:
          self.filter = {}
          (_ktype24, _vtype25, _size23 ) = iprot.readMapBegin()
          for _i27 in xrange(_size23):
            _key28 = iprot.readI32()
            _val29 = iprot.readI32()
            self.filter[_key28] = _val29
          iprot.readMapEnd()
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.BOOL:
          self.alternating = iprot.readBool()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('kStepOutNeighborsFiltered_args')
    if self.edgeType is not None:
      oprot.writeFieldBegin('edgeType', TType.STRING, 1)
      oprot.writeString(self.edgeType)
      oprot.writeFieldEnd()
    if self.sourceId is not None:
      oprot.writeFieldBegin('sourceId', TType.I64, 2)
      oprot.writeI64(self.sourceId)
      oprot.writeFieldEnd()
    if self.k is not None:
      oprot.writeFieldBegin('k', TType.I32, 3)
      oprot.writeI32(self.k)
      oprot.writeFieldEnd()
    if self.sqlClause is not None:
      oprot.writeFieldBegin('sqlClause', TType.STRING, 4)
      oprot.writeString(self.sqlClause)
      oprot.writeFieldEnd()
    if self.filter is not None:
      oprot.writeFieldBegin('filter', TType.MAP, 5)
      oprot.writeMapBegin(TType.I32, TType.I32, len(self.filter))
      for kiter30,viter31 in self.filter.items():
        oprot.writeI32(kiter30)
        oprot.writeI32(viter31)
      oprot.writeMapEnd()
      oprot.writeFieldEnd()
    if self.alternating is not None:
      oprot.writeFieldBegin('alternating', TType.BOOL, 6)
      oprot.writeBool(self.alternating)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.edgeType)
    value = (value * 31) ^ hash(self.sourceId)
    value = (value * 31) ^ hash(self.k)
    value = (value * 31) ^ hash(self.sqlClause)
    value = (value * 31) ^ hash(self.filter)
    value = (value * 31) ^ hash(self.alternating)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class kStepOutNeighborsFiltered_result:
  """
  Attributes:
   - success
   - error1
   - error2
   - error3
   - error4
  """

  thrift_spec = (
    (0, TType.LIST, 'success', (TType.I64,None), None, ), # 0
    (1, TType.STRUCT, 'error1', (UndefinedGraphException, UndefinedGraphException.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'error2', (tempest_graph.ttypes.InvalidArgumentException, tempest_graph.ttypes.InvalidArgumentException.thrift_spec), None, ), # 2
    (3, TType.STRUCT, 'error3', (SQLException, SQLException.thrift_spec), None, ), # 3
    (4, TType.STRUCT, 'error4', (tempest_graph.ttypes.InvalidNodeIdException, tempest_graph.ttypes.InvalidNodeIdException.thrift_spec), None, ), # 4
  )

  def __init__(self, success=None, error1=None, error2=None, error3=None, error4=None,):
    self.success = success
    self.error1 = error1
    self.error2 = error2
    self.error3 = error3
    self.error4 = error4

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.LIST:
          self.success = []
          (_etype35, _size32) = iprot.readListBegin()
          for _i36 in xrange(_size32):
            _elem37 = iprot.readI64()
            self.success.append(_elem37)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.error1 = UndefinedGraphException()
          self.error1.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.error2 = tempest_graph.ttypes.InvalidArgumentException()
          self.error2.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.error3 = SQLException()
          self.error3.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRUCT:
          self.error4 = tempest_graph.ttypes.InvalidNodeIdException()
          self.error4.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('kStepOutNeighborsFiltered_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.LIST, 0)
      oprot.writeListBegin(TType.I64, len(self.success))
      for iter38 in self.success:
        oprot.writeI64(iter38)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.error1 is not None:
      oprot.writeFieldBegin('error1', TType.STRUCT, 1)
      self.error1.write(oprot)
      oprot.writeFieldEnd()
    if self.error2 is not None:
      oprot.writeFieldBegin('error2', TType.STRUCT, 2)
      self.error2.write(oprot)
      oprot.writeFieldEnd()
    if self.error3 is not None:
      oprot.writeFieldBegin('error3', TType.STRUCT, 3)
      self.error3.write(oprot)
      oprot.writeFieldEnd()
    if self.error4 is not None:
      oprot.writeFieldBegin('error4', TType.STRUCT, 4)
      self.error4.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    value = (value * 31) ^ hash(self.error1)
    value = (value * 31) ^ hash(self.error2)
    value = (value * 31) ^ hash(self.error3)
    value = (value * 31) ^ hash(self.error4)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class kStepInNeighborsFiltered_args:
  """
  Attributes:
   - edgeType
   - sourceId
   - k
   - sqlClause
   - filter
   - alternating
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'edgeType', None, None, ), # 1
    (2, TType.I64, 'sourceId', None, None, ), # 2
    (3, TType.I32, 'k', None, None, ), # 3
    (4, TType.STRING, 'sqlClause', None, None, ), # 4
    (5, TType.MAP, 'filter', (TType.I32,None,TType.I32,None), None, ), # 5
    (6, TType.BOOL, 'alternating', None, None, ), # 6
  )

  def __init__(self, edgeType=None, sourceId=None, k=None, sqlClause=None, filter=None, alternating=None,):
    self.edgeType = edgeType
    self.sourceId = sourceId
    self.k = k
    self.sqlClause = sqlClause
    self.filter = filter
    self.alternating = alternating

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.edgeType = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I64:
          self.sourceId = iprot.readI64()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.k = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.sqlClause = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.MAP:
          self.filter = {}
          (_ktype40, _vtype41, _size39 ) = iprot.readMapBegin()
          for _i43 in xrange(_size39):
            _key44 = iprot.readI32()
            _val45 = iprot.readI32()
            self.filter[_key44] = _val45
          iprot.readMapEnd()
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.BOOL:
          self.alternating = iprot.readBool()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('kStepInNeighborsFiltered_args')
    if self.edgeType is not None:
      oprot.writeFieldBegin('edgeType', TType.STRING, 1)
      oprot.writeString(self.edgeType)
      oprot.writeFieldEnd()
    if self.sourceId is not None:
      oprot.writeFieldBegin('sourceId', TType.I64, 2)
      oprot.writeI64(self.sourceId)
      oprot.writeFieldEnd()
    if self.k is not None:
      oprot.writeFieldBegin('k', TType.I32, 3)
      oprot.writeI32(self.k)
      oprot.writeFieldEnd()
    if self.sqlClause is not None:
      oprot.writeFieldBegin('sqlClause', TType.STRING, 4)
      oprot.writeString(self.sqlClause)
      oprot.writeFieldEnd()
    if self.filter is not None:
      oprot.writeFieldBegin('filter', TType.MAP, 5)
      oprot.writeMapBegin(TType.I32, TType.I32, len(self.filter))
      for kiter46,viter47 in self.filter.items():
        oprot.writeI32(kiter46)
        oprot.writeI32(viter47)
      oprot.writeMapEnd()
      oprot.writeFieldEnd()
    if self.alternating is not None:
      oprot.writeFieldBegin('alternating', TType.BOOL, 6)
      oprot.writeBool(self.alternating)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.edgeType)
    value = (value * 31) ^ hash(self.sourceId)
    value = (value * 31) ^ hash(self.k)
    value = (value * 31) ^ hash(self.sqlClause)
    value = (value * 31) ^ hash(self.filter)
    value = (value * 31) ^ hash(self.alternating)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class kStepInNeighborsFiltered_result:
  """
  Attributes:
   - success
   - error1
   - error2
   - error3
   - error4
  """

  thrift_spec = (
    (0, TType.LIST, 'success', (TType.I64,None), None, ), # 0
    (1, TType.STRUCT, 'error1', (UndefinedGraphException, UndefinedGraphException.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'error2', (tempest_graph.ttypes.InvalidArgumentException, tempest_graph.ttypes.InvalidArgumentException.thrift_spec), None, ), # 2
    (3, TType.STRUCT, 'error3', (SQLException, SQLException.thrift_spec), None, ), # 3
    (4, TType.STRUCT, 'error4', (tempest_graph.ttypes.InvalidNodeIdException, tempest_graph.ttypes.InvalidNodeIdException.thrift_spec), None, ), # 4
  )

  def __init__(self, success=None, error1=None, error2=None, error3=None, error4=None,):
    self.success = success
    self.error1 = error1
    self.error2 = error2
    self.error3 = error3
    self.error4 = error4

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.LIST:
          self.success = []
          (_etype51, _size48) = iprot.readListBegin()
          for _i52 in xrange(_size48):
            _elem53 = iprot.readI64()
            self.success.append(_elem53)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.error1 = UndefinedGraphException()
          self.error1.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.error2 = tempest_graph.ttypes.InvalidArgumentException()
          self.error2.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.error3 = SQLException()
          self.error3.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRUCT:
          self.error4 = tempest_graph.ttypes.InvalidNodeIdException()
          self.error4.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('kStepInNeighborsFiltered_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.LIST, 0)
      oprot.writeListBegin(TType.I64, len(self.success))
      for iter54 in self.success:
        oprot.writeI64(iter54)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.error1 is not None:
      oprot.writeFieldBegin('error1', TType.STRUCT, 1)
      self.error1.write(oprot)
      oprot.writeFieldEnd()
    if self.error2 is not None:
      oprot.writeFieldBegin('error2', TType.STRUCT, 2)
      self.error2.write(oprot)
      oprot.writeFieldEnd()
    if self.error3 is not None:
      oprot.writeFieldBegin('error3', TType.STRUCT, 3)
      self.error3.write(oprot)
      oprot.writeFieldEnd()
    if self.error4 is not None:
      oprot.writeFieldBegin('error4', TType.STRUCT, 4)
      self.error4.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    value = (value * 31) ^ hash(self.error1)
    value = (value * 31) ^ hash(self.error2)
    value = (value * 31) ^ hash(self.error3)
    value = (value * 31) ^ hash(self.error4)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class ppr_args:
  """
  Attributes:
   - edgeType
   - seeds
   - seedType
   - targetType
   - pageRankParams
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'edgeType', None, None, ), # 1
    (2, TType.LIST, 'seeds', (TType.I64,None), None, ), # 2
    (3, TType.STRING, 'seedType', None, None, ), # 3
    (4, TType.STRING, 'targetType', None, None, ), # 4
    (5, TType.STRUCT, 'pageRankParams', (MonteCarloPageRankParams, MonteCarloPageRankParams.thrift_spec), None, ), # 5
  )

  def __init__(self, edgeType=None, seeds=None, seedType=None, targetType=None, pageRankParams=None,):
    self.edgeType = edgeType
    self.seeds = seeds
    self.seedType = seedType
    self.targetType = targetType
    self.pageRankParams = pageRankParams

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.edgeType = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.LIST:
          self.seeds = []
          (_etype58, _size55) = iprot.readListBegin()
          for _i59 in xrange(_size55):
            _elem60 = iprot.readI64()
            self.seeds.append(_elem60)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.seedType = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.targetType = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRUCT:
          self.pageRankParams = MonteCarloPageRankParams()
          self.pageRankParams.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('ppr_args')
    if self.edgeType is not None:
      oprot.writeFieldBegin('edgeType', TType.STRING, 1)
      oprot.writeString(self.edgeType)
      oprot.writeFieldEnd()
    if self.seeds is not None:
      oprot.writeFieldBegin('seeds', TType.LIST, 2)
      oprot.writeListBegin(TType.I64, len(self.seeds))
      for iter61 in self.seeds:
        oprot.writeI64(iter61)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.seedType is not None:
      oprot.writeFieldBegin('seedType', TType.STRING, 3)
      oprot.writeString(self.seedType)
      oprot.writeFieldEnd()
    if self.targetType is not None:
      oprot.writeFieldBegin('targetType', TType.STRING, 4)
      oprot.writeString(self.targetType)
      oprot.writeFieldEnd()
    if self.pageRankParams is not None:
      oprot.writeFieldBegin('pageRankParams', TType.STRUCT, 5)
      self.pageRankParams.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.edgeType)
    value = (value * 31) ^ hash(self.seeds)
    value = (value * 31) ^ hash(self.seedType)
    value = (value * 31) ^ hash(self.targetType)
    value = (value * 31) ^ hash(self.pageRankParams)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class ppr_result:
  """
  Attributes:
   - success
   - error1
   - error2
   - error3
  """

  thrift_spec = (
    (0, TType.MAP, 'success', (TType.I64,None,TType.DOUBLE,None), None, ), # 0
    (1, TType.STRUCT, 'error1', (UndefinedGraphException, UndefinedGraphException.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'error2', (tempest_graph.ttypes.InvalidNodeIdException, tempest_graph.ttypes.InvalidNodeIdException.thrift_spec), None, ), # 2
    (3, TType.STRUCT, 'error3', (tempest_graph.ttypes.InvalidArgumentException, tempest_graph.ttypes.InvalidArgumentException.thrift_spec), None, ), # 3
  )

  def __init__(self, success=None, error1=None, error2=None, error3=None,):
    self.success = success
    self.error1 = error1
    self.error2 = error2
    self.error3 = error3

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.MAP:
          self.success = {}
          (_ktype63, _vtype64, _size62 ) = iprot.readMapBegin()
          for _i66 in xrange(_size62):
            _key67 = iprot.readI64()
            _val68 = iprot.readDouble()
            self.success[_key67] = _val68
          iprot.readMapEnd()
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.error1 = UndefinedGraphException()
          self.error1.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.error2 = tempest_graph.ttypes.InvalidNodeIdException()
          self.error2.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.error3 = tempest_graph.ttypes.InvalidArgumentException()
          self.error3.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('ppr_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.MAP, 0)
      oprot.writeMapBegin(TType.I64, TType.DOUBLE, len(self.success))
      for kiter69,viter70 in self.success.items():
        oprot.writeI64(kiter69)
        oprot.writeDouble(viter70)
      oprot.writeMapEnd()
      oprot.writeFieldEnd()
    if self.error1 is not None:
      oprot.writeFieldBegin('error1', TType.STRUCT, 1)
      self.error1.write(oprot)
      oprot.writeFieldEnd()
    if self.error2 is not None:
      oprot.writeFieldBegin('error2', TType.STRUCT, 2)
      self.error2.write(oprot)
      oprot.writeFieldEnd()
    if self.error3 is not None:
      oprot.writeFieldBegin('error3', TType.STRUCT, 3)
      self.error3.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    value = (value * 31) ^ hash(self.error1)
    value = (value * 31) ^ hash(self.error2)
    value = (value * 31) ^ hash(self.error3)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class addEdges_args:
  """
  Attributes:
   - edgeType
   - ids1
   - ids2
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'edgeType', None, None, ), # 1
    (2, TType.LIST, 'ids1', (TType.I64,None), None, ), # 2
    (3, TType.LIST, 'ids2', (TType.I64,None), None, ), # 3
  )

  def __init__(self, edgeType=None, ids1=None, ids2=None,):
    self.edgeType = edgeType
    self.ids1 = ids1
    self.ids2 = ids2

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.edgeType = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.LIST:
          self.ids1 = []
          (_etype74, _size71) = iprot.readListBegin()
          for _i75 in xrange(_size71):
            _elem76 = iprot.readI64()
            self.ids1.append(_elem76)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.LIST:
          self.ids2 = []
          (_etype80, _size77) = iprot.readListBegin()
          for _i81 in xrange(_size77):
            _elem82 = iprot.readI64()
            self.ids2.append(_elem82)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('addEdges_args')
    if self.edgeType is not None:
      oprot.writeFieldBegin('edgeType', TType.STRING, 1)
      oprot.writeString(self.edgeType)
      oprot.writeFieldEnd()
    if self.ids1 is not None:
      oprot.writeFieldBegin('ids1', TType.LIST, 2)
      oprot.writeListBegin(TType.I64, len(self.ids1))
      for iter83 in self.ids1:
        oprot.writeI64(iter83)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.ids2 is not None:
      oprot.writeFieldBegin('ids2', TType.LIST, 3)
      oprot.writeListBegin(TType.I64, len(self.ids2))
      for iter84 in self.ids2:
        oprot.writeI64(iter84)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.edgeType)
    value = (value * 31) ^ hash(self.ids1)
    value = (value * 31) ^ hash(self.ids2)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class addEdges_result:
  """
  Attributes:
   - error1
   - error2
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'error1', (UndefinedGraphException, UndefinedGraphException.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'error2', (UnequalListSizeException, UnequalListSizeException.thrift_spec), None, ), # 2
  )

  def __init__(self, error1=None, error2=None,):
    self.error1 = error1
    self.error2 = error2

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.error1 = UndefinedGraphException()
          self.error1.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.error2 = UnequalListSizeException()
          self.error2.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('addEdges_result')
    if self.error1 is not None:
      oprot.writeFieldBegin('error1', TType.STRUCT, 1)
      self.error1.write(oprot)
      oprot.writeFieldEnd()
    if self.error2 is not None:
      oprot.writeFieldBegin('error2', TType.STRUCT, 2)
      self.error2.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.error1)
    value = (value * 31) ^ hash(self.error2)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)
