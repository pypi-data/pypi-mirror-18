#
# Autogenerated by Thrift Compiler (0.9.3)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

from thrift.Thrift import TType, TMessageType, TException, TApplicationException
import logging
from ttypes import *
from thrift.Thrift import TProcessor
from thrift.transport import TTransport
from thrift.protocol import TBinaryProtocol, TProtocol
try:
  from thrift.protocol import fastbinary
except:
  fastbinary = None


class Iface:
  def outDegree(self, edgeType, id):
    """
    Parameters:
     - edgeType
     - id
    """
    pass

  def inDegree(self, edgeType, id):
    """
    Parameters:
     - edgeType
     - id
    """
    pass

  def outNeighbors(self, edgeType, id):
    """
    Parameters:
     - edgeType
     - id
    """
    pass

  def inNeighbors(self, edgeType, id):
    """
    Parameters:
     - edgeType
     - id
    """
    pass

  def outNeighbor(self, edgeType, id, i):
    """
    Parameters:
     - edgeType
     - id
     - i
    """
    pass

  def inNeighbor(self, edgeType, id, i):
    """
    Parameters:
     - edgeType
     - id
     - i
    """
    pass

  def maxNodeId(self, edgeType):
    """
    Parameters:
     - edgeType
    """
    pass

  def nodeCount(self, edgeType):
    """
    Parameters:
     - edgeType
    """
    pass

  def edgeCount(self, edgeType):
    """
    Parameters:
     - edgeType
    """
    pass

  def pprSingleTarget(self, edgeType, seedNodeIds, targetNodeId, biPPRParams):
    """
    Parameters:
     - edgeType
     - seedNodeIds
     - targetNodeId
     - biPPRParams
    """
    pass


class Client(Iface):
  def __init__(self, iprot, oprot=None):
    self._iprot = self._oprot = iprot
    if oprot is not None:
      self._oprot = oprot
    self._seqid = 0

  def outDegree(self, edgeType, id):
    """
    Parameters:
     - edgeType
     - id
    """
    self.send_outDegree(edgeType, id)
    return self.recv_outDegree()

  def send_outDegree(self, edgeType, id):
    self._oprot.writeMessageBegin('outDegree', TMessageType.CALL, self._seqid)
    args = outDegree_args()
    args.edgeType = edgeType
    args.id = id
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_outDegree(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = outDegree_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    if result.ex1 is not None:
      raise result.ex1
    if result.ex2 is not None:
      raise result.ex2
    raise TApplicationException(TApplicationException.MISSING_RESULT, "outDegree failed: unknown result")

  def inDegree(self, edgeType, id):
    """
    Parameters:
     - edgeType
     - id
    """
    self.send_inDegree(edgeType, id)
    return self.recv_inDegree()

  def send_inDegree(self, edgeType, id):
    self._oprot.writeMessageBegin('inDegree', TMessageType.CALL, self._seqid)
    args = inDegree_args()
    args.edgeType = edgeType
    args.id = id
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_inDegree(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = inDegree_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    if result.ex1 is not None:
      raise result.ex1
    if result.ex2 is not None:
      raise result.ex2
    raise TApplicationException(TApplicationException.MISSING_RESULT, "inDegree failed: unknown result")

  def outNeighbors(self, edgeType, id):
    """
    Parameters:
     - edgeType
     - id
    """
    self.send_outNeighbors(edgeType, id)
    return self.recv_outNeighbors()

  def send_outNeighbors(self, edgeType, id):
    self._oprot.writeMessageBegin('outNeighbors', TMessageType.CALL, self._seqid)
    args = outNeighbors_args()
    args.edgeType = edgeType
    args.id = id
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_outNeighbors(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = outNeighbors_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    if result.ex1 is not None:
      raise result.ex1
    if result.ex2 is not None:
      raise result.ex2
    raise TApplicationException(TApplicationException.MISSING_RESULT, "outNeighbors failed: unknown result")

  def inNeighbors(self, edgeType, id):
    """
    Parameters:
     - edgeType
     - id
    """
    self.send_inNeighbors(edgeType, id)
    return self.recv_inNeighbors()

  def send_inNeighbors(self, edgeType, id):
    self._oprot.writeMessageBegin('inNeighbors', TMessageType.CALL, self._seqid)
    args = inNeighbors_args()
    args.edgeType = edgeType
    args.id = id
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_inNeighbors(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = inNeighbors_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    if result.ex1 is not None:
      raise result.ex1
    if result.ex2 is not None:
      raise result.ex2
    raise TApplicationException(TApplicationException.MISSING_RESULT, "inNeighbors failed: unknown result")

  def outNeighbor(self, edgeType, id, i):
    """
    Parameters:
     - edgeType
     - id
     - i
    """
    self.send_outNeighbor(edgeType, id, i)
    return self.recv_outNeighbor()

  def send_outNeighbor(self, edgeType, id, i):
    self._oprot.writeMessageBegin('outNeighbor', TMessageType.CALL, self._seqid)
    args = outNeighbor_args()
    args.edgeType = edgeType
    args.id = id
    args.i = i
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_outNeighbor(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = outNeighbor_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    if result.ex1 is not None:
      raise result.ex1
    if result.ex2 is not None:
      raise result.ex2
    if result.ex3 is not None:
      raise result.ex3
    raise TApplicationException(TApplicationException.MISSING_RESULT, "outNeighbor failed: unknown result")

  def inNeighbor(self, edgeType, id, i):
    """
    Parameters:
     - edgeType
     - id
     - i
    """
    self.send_inNeighbor(edgeType, id, i)
    return self.recv_inNeighbor()

  def send_inNeighbor(self, edgeType, id, i):
    self._oprot.writeMessageBegin('inNeighbor', TMessageType.CALL, self._seqid)
    args = inNeighbor_args()
    args.edgeType = edgeType
    args.id = id
    args.i = i
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_inNeighbor(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = inNeighbor_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    if result.ex1 is not None:
      raise result.ex1
    if result.ex2 is not None:
      raise result.ex2
    if result.ex3 is not None:
      raise result.ex3
    raise TApplicationException(TApplicationException.MISSING_RESULT, "inNeighbor failed: unknown result")

  def maxNodeId(self, edgeType):
    """
    Parameters:
     - edgeType
    """
    self.send_maxNodeId(edgeType)
    return self.recv_maxNodeId()

  def send_maxNodeId(self, edgeType):
    self._oprot.writeMessageBegin('maxNodeId', TMessageType.CALL, self._seqid)
    args = maxNodeId_args()
    args.edgeType = edgeType
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_maxNodeId(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = maxNodeId_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    if result.ex is not None:
      raise result.ex
    raise TApplicationException(TApplicationException.MISSING_RESULT, "maxNodeId failed: unknown result")

  def nodeCount(self, edgeType):
    """
    Parameters:
     - edgeType
    """
    self.send_nodeCount(edgeType)
    return self.recv_nodeCount()

  def send_nodeCount(self, edgeType):
    self._oprot.writeMessageBegin('nodeCount', TMessageType.CALL, self._seqid)
    args = nodeCount_args()
    args.edgeType = edgeType
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_nodeCount(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = nodeCount_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    if result.ex is not None:
      raise result.ex
    raise TApplicationException(TApplicationException.MISSING_RESULT, "nodeCount failed: unknown result")

  def edgeCount(self, edgeType):
    """
    Parameters:
     - edgeType
    """
    self.send_edgeCount(edgeType)
    return self.recv_edgeCount()

  def send_edgeCount(self, edgeType):
    self._oprot.writeMessageBegin('edgeCount', TMessageType.CALL, self._seqid)
    args = edgeCount_args()
    args.edgeType = edgeType
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_edgeCount(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = edgeCount_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    if result.ex is not None:
      raise result.ex
    raise TApplicationException(TApplicationException.MISSING_RESULT, "edgeCount failed: unknown result")

  def pprSingleTarget(self, edgeType, seedNodeIds, targetNodeId, biPPRParams):
    """
    Parameters:
     - edgeType
     - seedNodeIds
     - targetNodeId
     - biPPRParams
    """
    self.send_pprSingleTarget(edgeType, seedNodeIds, targetNodeId, biPPRParams)
    return self.recv_pprSingleTarget()

  def send_pprSingleTarget(self, edgeType, seedNodeIds, targetNodeId, biPPRParams):
    self._oprot.writeMessageBegin('pprSingleTarget', TMessageType.CALL, self._seqid)
    args = pprSingleTarget_args()
    args.edgeType = edgeType
    args.seedNodeIds = seedNodeIds
    args.targetNodeId = targetNodeId
    args.biPPRParams = biPPRParams
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_pprSingleTarget(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = pprSingleTarget_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    if result.ex1 is not None:
      raise result.ex1
    if result.ex2 is not None:
      raise result.ex2
    raise TApplicationException(TApplicationException.MISSING_RESULT, "pprSingleTarget failed: unknown result")


class Processor(Iface, TProcessor):
  def __init__(self, handler):
    self._handler = handler
    self._processMap = {}
    self._processMap["outDegree"] = Processor.process_outDegree
    self._processMap["inDegree"] = Processor.process_inDegree
    self._processMap["outNeighbors"] = Processor.process_outNeighbors
    self._processMap["inNeighbors"] = Processor.process_inNeighbors
    self._processMap["outNeighbor"] = Processor.process_outNeighbor
    self._processMap["inNeighbor"] = Processor.process_inNeighbor
    self._processMap["maxNodeId"] = Processor.process_maxNodeId
    self._processMap["nodeCount"] = Processor.process_nodeCount
    self._processMap["edgeCount"] = Processor.process_edgeCount
    self._processMap["pprSingleTarget"] = Processor.process_pprSingleTarget

  def process(self, iprot, oprot):
    (name, type, seqid) = iprot.readMessageBegin()
    if name not in self._processMap:
      iprot.skip(TType.STRUCT)
      iprot.readMessageEnd()
      x = TApplicationException(TApplicationException.UNKNOWN_METHOD, 'Unknown function %s' % (name))
      oprot.writeMessageBegin(name, TMessageType.EXCEPTION, seqid)
      x.write(oprot)
      oprot.writeMessageEnd()
      oprot.trans.flush()
      return
    else:
      self._processMap[name](self, seqid, iprot, oprot)
    return True

  def process_outDegree(self, seqid, iprot, oprot):
    args = outDegree_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = outDegree_result()
    try:
      result.success = self._handler.outDegree(args.edgeType, args.id)
      msg_type = TMessageType.REPLY
    except (TTransport.TTransportException, KeyboardInterrupt, SystemExit):
      raise
    except InvalidNodeIdException as ex1:
      msg_type = TMessageType.REPLY
      result.ex1 = ex1
    except InvalidArgumentException as ex2:
      msg_type = TMessageType.REPLY
      result.ex2 = ex2
    except Exception as ex:
      msg_type = TMessageType.EXCEPTION
      logging.exception(ex)
      result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
    oprot.writeMessageBegin("outDegree", msg_type, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_inDegree(self, seqid, iprot, oprot):
    args = inDegree_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = inDegree_result()
    try:
      result.success = self._handler.inDegree(args.edgeType, args.id)
      msg_type = TMessageType.REPLY
    except (TTransport.TTransportException, KeyboardInterrupt, SystemExit):
      raise
    except InvalidNodeIdException as ex1:
      msg_type = TMessageType.REPLY
      result.ex1 = ex1
    except InvalidArgumentException as ex2:
      msg_type = TMessageType.REPLY
      result.ex2 = ex2
    except Exception as ex:
      msg_type = TMessageType.EXCEPTION
      logging.exception(ex)
      result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
    oprot.writeMessageBegin("inDegree", msg_type, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_outNeighbors(self, seqid, iprot, oprot):
    args = outNeighbors_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = outNeighbors_result()
    try:
      result.success = self._handler.outNeighbors(args.edgeType, args.id)
      msg_type = TMessageType.REPLY
    except (TTransport.TTransportException, KeyboardInterrupt, SystemExit):
      raise
    except InvalidNodeIdException as ex1:
      msg_type = TMessageType.REPLY
      result.ex1 = ex1
    except InvalidArgumentException as ex2:
      msg_type = TMessageType.REPLY
      result.ex2 = ex2
    except Exception as ex:
      msg_type = TMessageType.EXCEPTION
      logging.exception(ex)
      result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
    oprot.writeMessageBegin("outNeighbors", msg_type, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_inNeighbors(self, seqid, iprot, oprot):
    args = inNeighbors_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = inNeighbors_result()
    try:
      result.success = self._handler.inNeighbors(args.edgeType, args.id)
      msg_type = TMessageType.REPLY
    except (TTransport.TTransportException, KeyboardInterrupt, SystemExit):
      raise
    except InvalidNodeIdException as ex1:
      msg_type = TMessageType.REPLY
      result.ex1 = ex1
    except InvalidArgumentException as ex2:
      msg_type = TMessageType.REPLY
      result.ex2 = ex2
    except Exception as ex:
      msg_type = TMessageType.EXCEPTION
      logging.exception(ex)
      result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
    oprot.writeMessageBegin("inNeighbors", msg_type, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_outNeighbor(self, seqid, iprot, oprot):
    args = outNeighbor_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = outNeighbor_result()
    try:
      result.success = self._handler.outNeighbor(args.edgeType, args.id, args.i)
      msg_type = TMessageType.REPLY
    except (TTransport.TTransportException, KeyboardInterrupt, SystemExit):
      raise
    except InvalidNodeIdException as ex1:
      msg_type = TMessageType.REPLY
      result.ex1 = ex1
    except InvalidIndexException as ex2:
      msg_type = TMessageType.REPLY
      result.ex2 = ex2
    except InvalidArgumentException as ex3:
      msg_type = TMessageType.REPLY
      result.ex3 = ex3
    except Exception as ex:
      msg_type = TMessageType.EXCEPTION
      logging.exception(ex)
      result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
    oprot.writeMessageBegin("outNeighbor", msg_type, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_inNeighbor(self, seqid, iprot, oprot):
    args = inNeighbor_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = inNeighbor_result()
    try:
      result.success = self._handler.inNeighbor(args.edgeType, args.id, args.i)
      msg_type = TMessageType.REPLY
    except (TTransport.TTransportException, KeyboardInterrupt, SystemExit):
      raise
    except InvalidNodeIdException as ex1:
      msg_type = TMessageType.REPLY
      result.ex1 = ex1
    except InvalidIndexException as ex2:
      msg_type = TMessageType.REPLY
      result.ex2 = ex2
    except InvalidArgumentException as ex3:
      msg_type = TMessageType.REPLY
      result.ex3 = ex3
    except Exception as ex:
      msg_type = TMessageType.EXCEPTION
      logging.exception(ex)
      result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
    oprot.writeMessageBegin("inNeighbor", msg_type, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_maxNodeId(self, seqid, iprot, oprot):
    args = maxNodeId_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = maxNodeId_result()
    try:
      result.success = self._handler.maxNodeId(args.edgeType)
      msg_type = TMessageType.REPLY
    except (TTransport.TTransportException, KeyboardInterrupt, SystemExit):
      raise
    except InvalidArgumentException as ex:
      msg_type = TMessageType.REPLY
      result.ex = ex
    except Exception as ex:
      msg_type = TMessageType.EXCEPTION
      logging.exception(ex)
      result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
    oprot.writeMessageBegin("maxNodeId", msg_type, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_nodeCount(self, seqid, iprot, oprot):
    args = nodeCount_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = nodeCount_result()
    try:
      result.success = self._handler.nodeCount(args.edgeType)
      msg_type = TMessageType.REPLY
    except (TTransport.TTransportException, KeyboardInterrupt, SystemExit):
      raise
    except InvalidArgumentException as ex:
      msg_type = TMessageType.REPLY
      result.ex = ex
    except Exception as ex:
      msg_type = TMessageType.EXCEPTION
      logging.exception(ex)
      result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
    oprot.writeMessageBegin("nodeCount", msg_type, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_edgeCount(self, seqid, iprot, oprot):
    args = edgeCount_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = edgeCount_result()
    try:
      result.success = self._handler.edgeCount(args.edgeType)
      msg_type = TMessageType.REPLY
    except (TTransport.TTransportException, KeyboardInterrupt, SystemExit):
      raise
    except InvalidArgumentException as ex:
      msg_type = TMessageType.REPLY
      result.ex = ex
    except Exception as ex:
      msg_type = TMessageType.EXCEPTION
      logging.exception(ex)
      result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
    oprot.writeMessageBegin("edgeCount", msg_type, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_pprSingleTarget(self, seqid, iprot, oprot):
    args = pprSingleTarget_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = pprSingleTarget_result()
    try:
      result.success = self._handler.pprSingleTarget(args.edgeType, args.seedNodeIds, args.targetNodeId, args.biPPRParams)
      msg_type = TMessageType.REPLY
    except (TTransport.TTransportException, KeyboardInterrupt, SystemExit):
      raise
    except InvalidNodeIdException as ex1:
      msg_type = TMessageType.REPLY
      result.ex1 = ex1
    except InvalidArgumentException as ex2:
      msg_type = TMessageType.REPLY
      result.ex2 = ex2
    except Exception as ex:
      msg_type = TMessageType.EXCEPTION
      logging.exception(ex)
      result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
    oprot.writeMessageBegin("pprSingleTarget", msg_type, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()


# HELPER FUNCTIONS AND STRUCTURES

class outDegree_args:
  """
  Attributes:
   - edgeType
   - id
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'edgeType', None, None, ), # 1
    (2, TType.I32, 'id', None, None, ), # 2
  )

  def __init__(self, edgeType=None, id=None,):
    self.edgeType = edgeType
    self.id = id

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.edgeType = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.id = iprot.readI32()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('outDegree_args')
    if self.edgeType is not None:
      oprot.writeFieldBegin('edgeType', TType.STRING, 1)
      oprot.writeString(self.edgeType)
      oprot.writeFieldEnd()
    if self.id is not None:
      oprot.writeFieldBegin('id', TType.I32, 2)
      oprot.writeI32(self.id)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.edgeType)
    value = (value * 31) ^ hash(self.id)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class outDegree_result:
  """
  Attributes:
   - success
   - ex1
   - ex2
  """

  thrift_spec = (
    (0, TType.I32, 'success', None, None, ), # 0
    (1, TType.STRUCT, 'ex1', (InvalidNodeIdException, InvalidNodeIdException.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'ex2', (InvalidArgumentException, InvalidArgumentException.thrift_spec), None, ), # 2
  )

  def __init__(self, success=None, ex1=None, ex2=None,):
    self.success = success
    self.ex1 = ex1
    self.ex2 = ex2

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.I32:
          self.success = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.ex1 = InvalidNodeIdException()
          self.ex1.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.ex2 = InvalidArgumentException()
          self.ex2.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('outDegree_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.I32, 0)
      oprot.writeI32(self.success)
      oprot.writeFieldEnd()
    if self.ex1 is not None:
      oprot.writeFieldBegin('ex1', TType.STRUCT, 1)
      self.ex1.write(oprot)
      oprot.writeFieldEnd()
    if self.ex2 is not None:
      oprot.writeFieldBegin('ex2', TType.STRUCT, 2)
      self.ex2.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    value = (value * 31) ^ hash(self.ex1)
    value = (value * 31) ^ hash(self.ex2)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class inDegree_args:
  """
  Attributes:
   - edgeType
   - id
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'edgeType', None, None, ), # 1
    (2, TType.I32, 'id', None, None, ), # 2
  )

  def __init__(self, edgeType=None, id=None,):
    self.edgeType = edgeType
    self.id = id

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.edgeType = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.id = iprot.readI32()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('inDegree_args')
    if self.edgeType is not None:
      oprot.writeFieldBegin('edgeType', TType.STRING, 1)
      oprot.writeString(self.edgeType)
      oprot.writeFieldEnd()
    if self.id is not None:
      oprot.writeFieldBegin('id', TType.I32, 2)
      oprot.writeI32(self.id)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.edgeType)
    value = (value * 31) ^ hash(self.id)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class inDegree_result:
  """
  Attributes:
   - success
   - ex1
   - ex2
  """

  thrift_spec = (
    (0, TType.I32, 'success', None, None, ), # 0
    (1, TType.STRUCT, 'ex1', (InvalidNodeIdException, InvalidNodeIdException.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'ex2', (InvalidArgumentException, InvalidArgumentException.thrift_spec), None, ), # 2
  )

  def __init__(self, success=None, ex1=None, ex2=None,):
    self.success = success
    self.ex1 = ex1
    self.ex2 = ex2

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.I32:
          self.success = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.ex1 = InvalidNodeIdException()
          self.ex1.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.ex2 = InvalidArgumentException()
          self.ex2.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('inDegree_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.I32, 0)
      oprot.writeI32(self.success)
      oprot.writeFieldEnd()
    if self.ex1 is not None:
      oprot.writeFieldBegin('ex1', TType.STRUCT, 1)
      self.ex1.write(oprot)
      oprot.writeFieldEnd()
    if self.ex2 is not None:
      oprot.writeFieldBegin('ex2', TType.STRUCT, 2)
      self.ex2.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    value = (value * 31) ^ hash(self.ex1)
    value = (value * 31) ^ hash(self.ex2)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class outNeighbors_args:
  """
  Attributes:
   - edgeType
   - id
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'edgeType', None, None, ), # 1
    (2, TType.I32, 'id', None, None, ), # 2
  )

  def __init__(self, edgeType=None, id=None,):
    self.edgeType = edgeType
    self.id = id

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.edgeType = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.id = iprot.readI32()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('outNeighbors_args')
    if self.edgeType is not None:
      oprot.writeFieldBegin('edgeType', TType.STRING, 1)
      oprot.writeString(self.edgeType)
      oprot.writeFieldEnd()
    if self.id is not None:
      oprot.writeFieldBegin('id', TType.I32, 2)
      oprot.writeI32(self.id)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.edgeType)
    value = (value * 31) ^ hash(self.id)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class outNeighbors_result:
  """
  Attributes:
   - success
   - ex1
   - ex2
  """

  thrift_spec = (
    (0, TType.LIST, 'success', (TType.I32,None), None, ), # 0
    (1, TType.STRUCT, 'ex1', (InvalidNodeIdException, InvalidNodeIdException.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'ex2', (InvalidArgumentException, InvalidArgumentException.thrift_spec), None, ), # 2
  )

  def __init__(self, success=None, ex1=None, ex2=None,):
    self.success = success
    self.ex1 = ex1
    self.ex2 = ex2

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.LIST:
          self.success = []
          (_etype3, _size0) = iprot.readListBegin()
          for _i4 in xrange(_size0):
            _elem5 = iprot.readI32()
            self.success.append(_elem5)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.ex1 = InvalidNodeIdException()
          self.ex1.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.ex2 = InvalidArgumentException()
          self.ex2.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('outNeighbors_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.LIST, 0)
      oprot.writeListBegin(TType.I32, len(self.success))
      for iter6 in self.success:
        oprot.writeI32(iter6)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.ex1 is not None:
      oprot.writeFieldBegin('ex1', TType.STRUCT, 1)
      self.ex1.write(oprot)
      oprot.writeFieldEnd()
    if self.ex2 is not None:
      oprot.writeFieldBegin('ex2', TType.STRUCT, 2)
      self.ex2.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    value = (value * 31) ^ hash(self.ex1)
    value = (value * 31) ^ hash(self.ex2)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class inNeighbors_args:
  """
  Attributes:
   - edgeType
   - id
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'edgeType', None, None, ), # 1
    (2, TType.I32, 'id', None, None, ), # 2
  )

  def __init__(self, edgeType=None, id=None,):
    self.edgeType = edgeType
    self.id = id

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.edgeType = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.id = iprot.readI32()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('inNeighbors_args')
    if self.edgeType is not None:
      oprot.writeFieldBegin('edgeType', TType.STRING, 1)
      oprot.writeString(self.edgeType)
      oprot.writeFieldEnd()
    if self.id is not None:
      oprot.writeFieldBegin('id', TType.I32, 2)
      oprot.writeI32(self.id)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.edgeType)
    value = (value * 31) ^ hash(self.id)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class inNeighbors_result:
  """
  Attributes:
   - success
   - ex1
   - ex2
  """

  thrift_spec = (
    (0, TType.LIST, 'success', (TType.I32,None), None, ), # 0
    (1, TType.STRUCT, 'ex1', (InvalidNodeIdException, InvalidNodeIdException.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'ex2', (InvalidArgumentException, InvalidArgumentException.thrift_spec), None, ), # 2
  )

  def __init__(self, success=None, ex1=None, ex2=None,):
    self.success = success
    self.ex1 = ex1
    self.ex2 = ex2

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.LIST:
          self.success = []
          (_etype10, _size7) = iprot.readListBegin()
          for _i11 in xrange(_size7):
            _elem12 = iprot.readI32()
            self.success.append(_elem12)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.ex1 = InvalidNodeIdException()
          self.ex1.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.ex2 = InvalidArgumentException()
          self.ex2.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('inNeighbors_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.LIST, 0)
      oprot.writeListBegin(TType.I32, len(self.success))
      for iter13 in self.success:
        oprot.writeI32(iter13)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.ex1 is not None:
      oprot.writeFieldBegin('ex1', TType.STRUCT, 1)
      self.ex1.write(oprot)
      oprot.writeFieldEnd()
    if self.ex2 is not None:
      oprot.writeFieldBegin('ex2', TType.STRUCT, 2)
      self.ex2.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    value = (value * 31) ^ hash(self.ex1)
    value = (value * 31) ^ hash(self.ex2)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class outNeighbor_args:
  """
  Attributes:
   - edgeType
   - id
   - i
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'edgeType', None, None, ), # 1
    (2, TType.I32, 'id', None, None, ), # 2
    (3, TType.I32, 'i', None, None, ), # 3
  )

  def __init__(self, edgeType=None, id=None, i=None,):
    self.edgeType = edgeType
    self.id = id
    self.i = i

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.edgeType = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.id = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.i = iprot.readI32()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('outNeighbor_args')
    if self.edgeType is not None:
      oprot.writeFieldBegin('edgeType', TType.STRING, 1)
      oprot.writeString(self.edgeType)
      oprot.writeFieldEnd()
    if self.id is not None:
      oprot.writeFieldBegin('id', TType.I32, 2)
      oprot.writeI32(self.id)
      oprot.writeFieldEnd()
    if self.i is not None:
      oprot.writeFieldBegin('i', TType.I32, 3)
      oprot.writeI32(self.i)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.edgeType)
    value = (value * 31) ^ hash(self.id)
    value = (value * 31) ^ hash(self.i)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class outNeighbor_result:
  """
  Attributes:
   - success
   - ex1
   - ex2
   - ex3
  """

  thrift_spec = (
    (0, TType.I32, 'success', None, None, ), # 0
    (1, TType.STRUCT, 'ex1', (InvalidNodeIdException, InvalidNodeIdException.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'ex2', (InvalidIndexException, InvalidIndexException.thrift_spec), None, ), # 2
    (3, TType.STRUCT, 'ex3', (InvalidArgumentException, InvalidArgumentException.thrift_spec), None, ), # 3
  )

  def __init__(self, success=None, ex1=None, ex2=None, ex3=None,):
    self.success = success
    self.ex1 = ex1
    self.ex2 = ex2
    self.ex3 = ex3

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.I32:
          self.success = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.ex1 = InvalidNodeIdException()
          self.ex1.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.ex2 = InvalidIndexException()
          self.ex2.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.ex3 = InvalidArgumentException()
          self.ex3.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('outNeighbor_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.I32, 0)
      oprot.writeI32(self.success)
      oprot.writeFieldEnd()
    if self.ex1 is not None:
      oprot.writeFieldBegin('ex1', TType.STRUCT, 1)
      self.ex1.write(oprot)
      oprot.writeFieldEnd()
    if self.ex2 is not None:
      oprot.writeFieldBegin('ex2', TType.STRUCT, 2)
      self.ex2.write(oprot)
      oprot.writeFieldEnd()
    if self.ex3 is not None:
      oprot.writeFieldBegin('ex3', TType.STRUCT, 3)
      self.ex3.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    value = (value * 31) ^ hash(self.ex1)
    value = (value * 31) ^ hash(self.ex2)
    value = (value * 31) ^ hash(self.ex3)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class inNeighbor_args:
  """
  Attributes:
   - edgeType
   - id
   - i
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'edgeType', None, None, ), # 1
    (2, TType.I32, 'id', None, None, ), # 2
    (3, TType.I32, 'i', None, None, ), # 3
  )

  def __init__(self, edgeType=None, id=None, i=None,):
    self.edgeType = edgeType
    self.id = id
    self.i = i

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.edgeType = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.id = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.i = iprot.readI32()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('inNeighbor_args')
    if self.edgeType is not None:
      oprot.writeFieldBegin('edgeType', TType.STRING, 1)
      oprot.writeString(self.edgeType)
      oprot.writeFieldEnd()
    if self.id is not None:
      oprot.writeFieldBegin('id', TType.I32, 2)
      oprot.writeI32(self.id)
      oprot.writeFieldEnd()
    if self.i is not None:
      oprot.writeFieldBegin('i', TType.I32, 3)
      oprot.writeI32(self.i)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.edgeType)
    value = (value * 31) ^ hash(self.id)
    value = (value * 31) ^ hash(self.i)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class inNeighbor_result:
  """
  Attributes:
   - success
   - ex1
   - ex2
   - ex3
  """

  thrift_spec = (
    (0, TType.I32, 'success', None, None, ), # 0
    (1, TType.STRUCT, 'ex1', (InvalidNodeIdException, InvalidNodeIdException.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'ex2', (InvalidIndexException, InvalidIndexException.thrift_spec), None, ), # 2
    (3, TType.STRUCT, 'ex3', (InvalidArgumentException, InvalidArgumentException.thrift_spec), None, ), # 3
  )

  def __init__(self, success=None, ex1=None, ex2=None, ex3=None,):
    self.success = success
    self.ex1 = ex1
    self.ex2 = ex2
    self.ex3 = ex3

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.I32:
          self.success = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.ex1 = InvalidNodeIdException()
          self.ex1.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.ex2 = InvalidIndexException()
          self.ex2.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.ex3 = InvalidArgumentException()
          self.ex3.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('inNeighbor_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.I32, 0)
      oprot.writeI32(self.success)
      oprot.writeFieldEnd()
    if self.ex1 is not None:
      oprot.writeFieldBegin('ex1', TType.STRUCT, 1)
      self.ex1.write(oprot)
      oprot.writeFieldEnd()
    if self.ex2 is not None:
      oprot.writeFieldBegin('ex2', TType.STRUCT, 2)
      self.ex2.write(oprot)
      oprot.writeFieldEnd()
    if self.ex3 is not None:
      oprot.writeFieldBegin('ex3', TType.STRUCT, 3)
      self.ex3.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    value = (value * 31) ^ hash(self.ex1)
    value = (value * 31) ^ hash(self.ex2)
    value = (value * 31) ^ hash(self.ex3)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class maxNodeId_args:
  """
  Attributes:
   - edgeType
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'edgeType', None, None, ), # 1
  )

  def __init__(self, edgeType=None,):
    self.edgeType = edgeType

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.edgeType = iprot.readString()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('maxNodeId_args')
    if self.edgeType is not None:
      oprot.writeFieldBegin('edgeType', TType.STRING, 1)
      oprot.writeString(self.edgeType)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.edgeType)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class maxNodeId_result:
  """
  Attributes:
   - success
   - ex
  """

  thrift_spec = (
    (0, TType.I32, 'success', None, None, ), # 0
    (1, TType.STRUCT, 'ex', (InvalidArgumentException, InvalidArgumentException.thrift_spec), None, ), # 1
  )

  def __init__(self, success=None, ex=None,):
    self.success = success
    self.ex = ex

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.I32:
          self.success = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.ex = InvalidArgumentException()
          self.ex.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('maxNodeId_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.I32, 0)
      oprot.writeI32(self.success)
      oprot.writeFieldEnd()
    if self.ex is not None:
      oprot.writeFieldBegin('ex', TType.STRUCT, 1)
      self.ex.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    value = (value * 31) ^ hash(self.ex)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class nodeCount_args:
  """
  Attributes:
   - edgeType
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'edgeType', None, None, ), # 1
  )

  def __init__(self, edgeType=None,):
    self.edgeType = edgeType

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.edgeType = iprot.readString()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('nodeCount_args')
    if self.edgeType is not None:
      oprot.writeFieldBegin('edgeType', TType.STRING, 1)
      oprot.writeString(self.edgeType)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.edgeType)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class nodeCount_result:
  """
  Attributes:
   - success
   - ex
  """

  thrift_spec = (
    (0, TType.I32, 'success', None, None, ), # 0
    (1, TType.STRUCT, 'ex', (InvalidArgumentException, InvalidArgumentException.thrift_spec), None, ), # 1
  )

  def __init__(self, success=None, ex=None,):
    self.success = success
    self.ex = ex

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.I32:
          self.success = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.ex = InvalidArgumentException()
          self.ex.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('nodeCount_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.I32, 0)
      oprot.writeI32(self.success)
      oprot.writeFieldEnd()
    if self.ex is not None:
      oprot.writeFieldBegin('ex', TType.STRUCT, 1)
      self.ex.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    value = (value * 31) ^ hash(self.ex)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class edgeCount_args:
  """
  Attributes:
   - edgeType
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'edgeType', None, None, ), # 1
  )

  def __init__(self, edgeType=None,):
    self.edgeType = edgeType

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.edgeType = iprot.readString()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('edgeCount_args')
    if self.edgeType is not None:
      oprot.writeFieldBegin('edgeType', TType.STRING, 1)
      oprot.writeString(self.edgeType)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.edgeType)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class edgeCount_result:
  """
  Attributes:
   - success
   - ex
  """

  thrift_spec = (
    (0, TType.I64, 'success', None, None, ), # 0
    (1, TType.STRUCT, 'ex', (InvalidArgumentException, InvalidArgumentException.thrift_spec), None, ), # 1
  )

  def __init__(self, success=None, ex=None,):
    self.success = success
    self.ex = ex

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.I64:
          self.success = iprot.readI64()
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.ex = InvalidArgumentException()
          self.ex.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('edgeCount_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.I64, 0)
      oprot.writeI64(self.success)
      oprot.writeFieldEnd()
    if self.ex is not None:
      oprot.writeFieldBegin('ex', TType.STRUCT, 1)
      self.ex.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    value = (value * 31) ^ hash(self.ex)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class pprSingleTarget_args:
  """
  Attributes:
   - edgeType
   - seedNodeIds
   - targetNodeId
   - biPPRParams
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'edgeType', None, None, ), # 1
    (2, TType.LIST, 'seedNodeIds', (TType.I32,None), None, ), # 2
    (3, TType.I32, 'targetNodeId', None, None, ), # 3
    (4, TType.STRUCT, 'biPPRParams', (BidirectionalPPRParams, BidirectionalPPRParams.thrift_spec), None, ), # 4
  )

  def __init__(self, edgeType=None, seedNodeIds=None, targetNodeId=None, biPPRParams=None,):
    self.edgeType = edgeType
    self.seedNodeIds = seedNodeIds
    self.targetNodeId = targetNodeId
    self.biPPRParams = biPPRParams

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.edgeType = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.LIST:
          self.seedNodeIds = []
          (_etype17, _size14) = iprot.readListBegin()
          for _i18 in xrange(_size14):
            _elem19 = iprot.readI32()
            self.seedNodeIds.append(_elem19)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.targetNodeId = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRUCT:
          self.biPPRParams = BidirectionalPPRParams()
          self.biPPRParams.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('pprSingleTarget_args')
    if self.edgeType is not None:
      oprot.writeFieldBegin('edgeType', TType.STRING, 1)
      oprot.writeString(self.edgeType)
      oprot.writeFieldEnd()
    if self.seedNodeIds is not None:
      oprot.writeFieldBegin('seedNodeIds', TType.LIST, 2)
      oprot.writeListBegin(TType.I32, len(self.seedNodeIds))
      for iter20 in self.seedNodeIds:
        oprot.writeI32(iter20)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.targetNodeId is not None:
      oprot.writeFieldBegin('targetNodeId', TType.I32, 3)
      oprot.writeI32(self.targetNodeId)
      oprot.writeFieldEnd()
    if self.biPPRParams is not None:
      oprot.writeFieldBegin('biPPRParams', TType.STRUCT, 4)
      self.biPPRParams.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.edgeType)
    value = (value * 31) ^ hash(self.seedNodeIds)
    value = (value * 31) ^ hash(self.targetNodeId)
    value = (value * 31) ^ hash(self.biPPRParams)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class pprSingleTarget_result:
  """
  Attributes:
   - success
   - ex1
   - ex2
  """

  thrift_spec = (
    (0, TType.DOUBLE, 'success', None, None, ), # 0
    (1, TType.STRUCT, 'ex1', (InvalidNodeIdException, InvalidNodeIdException.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'ex2', (InvalidArgumentException, InvalidArgumentException.thrift_spec), None, ), # 2
  )

  def __init__(self, success=None, ex1=None, ex2=None,):
    self.success = success
    self.ex1 = ex1
    self.ex2 = ex2

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.DOUBLE:
          self.success = iprot.readDouble()
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.ex1 = InvalidNodeIdException()
          self.ex1.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.ex2 = InvalidArgumentException()
          self.ex2.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('pprSingleTarget_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.DOUBLE, 0)
      oprot.writeDouble(self.success)
      oprot.writeFieldEnd()
    if self.ex1 is not None:
      oprot.writeFieldBegin('ex1', TType.STRUCT, 1)
      self.ex1.write(oprot)
      oprot.writeFieldEnd()
    if self.ex2 is not None:
      oprot.writeFieldBegin('ex2', TType.STRUCT, 2)
      self.ex2.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    value = (value * 31) ^ hash(self.ex1)
    value = (value * 31) ^ hash(self.ex2)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)
